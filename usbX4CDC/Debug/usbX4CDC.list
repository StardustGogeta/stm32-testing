
usbX4CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018748  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08018808  08018808  00028808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ccc  08018ccc  0003010c  2**0
                  CONTENTS
  4 .ARM          00000008  08018ccc  08018ccc  00028ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cd4  08018cd4  0003010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018cd4  08018cd4  00028cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018cd8  08018cd8  00028cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08018cdc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001db74  2000010c  08018de8  0003010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001dc80  08018de8  0003dc80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 12 .comment      00001dd0  00000000  00000000  0003013a  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  000001cc  00000000  00000000  00031f0a  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000014  00000000  00000000  000320d8  2**2
                  CONTENTS, READONLY
 15 .debug_info   0006c756  00000000  00000000  000320ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00011507  00000000  00000000  0009e842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ff8  00000000  00000000  000afd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021bb  00000000  00000000  000b2d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000390ea  00000000  00000000  000b4f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000673df  00000000  00000000  000edfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000edec6  00000000  00000000  001553cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000928c  00000000  00000000  00243294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000fb  00000000  00000000  0024c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080187f0 	.word	0x080187f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	080187f0 	.word	0x080187f0
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	; (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	; (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	; (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	; (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	; (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	; (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	; (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	; (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	; (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	; (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	; (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	; (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	20018c8c 	.word	0x20018c8c
    LDR     r1, =SYSTICK_CYCLES
 800017c:	000752ff 	.word	0x000752ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	; (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	; (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	; (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	; (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	; (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20018d28 	.word	0x20018d28
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	20018c90 	.word	0x20018c90
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	20018c94 	.word	0x20018c94
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	20019294 	.word	0x20019294
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	; 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	; 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	; (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f011 fae7 	bl	80118dc <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f011 fa57 	bl	80117c8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	; (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	20018d34 	.word	0x20018d34
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	20019294 	.word	0x20019294
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20018d38 	.word	0x20018d38
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	20018dc4 	.word	0x20018dc4
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	20018dc8 	.word	0x20018dc8
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	20018dc0 	.word	0x20018dc0
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	20018dbc 	.word	0x20018dbc
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20018d28 	.word	0x20018d28
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	20018c90 	.word	0x20018c90
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	20018c94 	.word	0x20018c94
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	001e      	movs	r6, r3
 8000376:	2500      	movs	r5, #0
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7b00      	ldrb	r0, [r0, #12]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e059      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e054      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000390:	200c      	movs	r0, #12
 8000392:	f018 f90f 	bl	80185b4 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e04d      	b.n	800043a <USBPD_CAD_Init+0xca>
 800039e:	9601      	str	r6, [sp, #4]
 80003a0:	210c      	movs	r1, #12
 80003a2:	f018 fa16 	bl	80187d2 <__aeabi_memclr>
 80003a6:	9801      	ldr	r0, [sp, #4]
 80003a8:	6038      	str	r0, [r7, #0]
 80003aa:	723d      	strb	r5, [r7, #8]
 80003ac:	9800      	ldr	r0, [sp, #0]
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	4860      	ldr	r0, [pc, #384]	; (8000534 <.text_6>)
 80003b2:	4669      	mov	r1, sp
 80003b4:	7b09      	ldrb	r1, [r1, #12]
 80003b6:	0089      	lsls	r1, r1, #2
 80003b8:	5047      	str	r7, [r0, r1]
 80003ba:	2001      	movs	r0, #1
 80003bc:	2100      	movs	r1, #0
 80003be:	43c9      	mvns	r1, r1
 80003c0:	4a5d      	ldr	r2, [pc, #372]	; (8000538 <.text_7>)
 80003c2:	4b5e      	ldr	r3, [pc, #376]	; (800053c <.text_8>)
 80003c4:	4d5e      	ldr	r5, [pc, #376]	; (8000540 <.text_9>)
 80003c6:	682e      	ldr	r6, [r5, #0]
 80003c8:	401e      	ands	r6, r3
 80003ca:	4f5e      	ldr	r7, [pc, #376]	; (8000544 <.text_10>)
 80003cc:	42be      	cmp	r6, r7
 80003ce:	d004      	beq.n	80003da <USBPD_CAD_Init+0x6a>
 80003d0:	682d      	ldr	r5, [r5, #0]
 80003d2:	402b      	ands	r3, r5
 80003d4:	4d5c      	ldr	r5, [pc, #368]	; (8000548 <.text_11>)
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d112      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003da:	4b5c      	ldr	r3, [pc, #368]	; (800054c <.text_12>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10e      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003e2:	0d0b      	lsrs	r3, r1, #20
 80003e4:	4d5a      	ldr	r5, [pc, #360]	; (8000550 <.text_13>)
 80003e6:	682e      	ldr	r6, [r5, #0]
 80003e8:	401e      	ands	r6, r3
 80003ea:	278a      	movs	r7, #138	; 0x8a
 80003ec:	00ff      	lsls	r7, r7, #3
 80003ee:	42be      	cmp	r6, r7
 80003f0:	d004      	beq.n	80003fc <USBPD_CAD_Init+0x8c>
 80003f2:	682d      	ldr	r5, [r5, #0]
 80003f4:	402b      	ands	r3, r5
 80003f6:	4d57      	ldr	r5, [pc, #348]	; (8000554 <.text_14>)
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	d101      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003fc:	4b56      	ldr	r3, [pc, #344]	; (8000558 <.text_15>)
 80003fe:	e000      	b.n	8000402 <USBPD_CAD_Init+0x92>
 8000400:	4b56      	ldr	r3, [pc, #344]	; (800055c <.text_16>)
 8000402:	689d      	ldr	r5, [r3, #8]
 8000404:	681e      	ldr	r6, [r3, #0]
 8000406:	695f      	ldr	r7, [r3, #20]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	6119      	str	r1, [r3, #16]
 800040c:	6098      	str	r0, [r3, #8]
 800040e:	6899      	ldr	r1, [r3, #8]
 8000410:	2901      	cmp	r1, #1
 8000412:	d0fc      	beq.n	800040e <USBPD_CAD_Init+0x9e>
 8000414:	4952      	ldr	r1, [pc, #328]	; (8000560 <.text_17>)
 8000416:	6019      	str	r1, [r3, #0]
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	4a52      	ldr	r2, [pc, #328]	; (8000564 <.text_18>)
 800041c:	6011      	str	r1, [r2, #0]
 800041e:	611e      	str	r6, [r3, #16]
 8000420:	615f      	str	r7, [r3, #20]
 8000422:	609d      	str	r5, [r3, #8]
 8000424:	6899      	ldr	r1, [r3, #8]
 8000426:	4308      	orrs	r0, r1
 8000428:	6098      	str	r0, [r3, #8]
 800042a:	9904      	ldr	r1, [sp, #16]
 800042c:	9800      	ldr	r0, [sp, #0]
 800042e:	6843      	ldr	r3, [r0, #4]
 8000430:	9a01      	ldr	r2, [sp, #4]
 8000432:	4668      	mov	r0, sp
 8000434:	7b00      	ldrb	r0, [r0, #12]
 8000436:	f00b fc31 	bl	800bc9c <CAD_Init>
 800043a:	0020      	movs	r0, r4
 800043c:	b005      	add	sp, #20
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000440 <USBPD_CAD_PortEnable>:
 8000440:	2803      	cmp	r0, #3
 8000442:	d203      	bcs.n	800044c <USBPD_CAD_PortEnable+0xc>
 8000444:	4a3b      	ldr	r2, [pc, #236]	; (8000534 <.text_6>)
 8000446:	0080      	lsls	r0, r0, #2
 8000448:	5810      	ldr	r0, [r2, r0]
 800044a:	7201      	strb	r1, [r0, #8]
 800044c:	4770      	bx	lr

0800044e <USBPD_CAD_Process>:
 800044e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000450:	2400      	movs	r4, #0
 8000452:	4669      	mov	r1, sp
 8000454:	700c      	strb	r4, [r1, #0]
 8000456:	9401      	str	r4, [sp, #4]
 8000458:	2500      	movs	r5, #0
 800045a:	43ed      	mvns	r5, r5
 800045c:	27c0      	movs	r7, #192	; 0xc0
 800045e:	43ff      	mvns	r7, r7
 8000460:	4834      	ldr	r0, [pc, #208]	; (8000534 <.text_6>)
 8000462:	00a1      	lsls	r1, r4, #2
 8000464:	1846      	adds	r6, r0, r1
 8000466:	6830      	ldr	r0, [r6, #0]
 8000468:	2800      	cmp	r0, #0
 800046a:	d05d      	beq.n	8000528 <USBPD_CAD_Process+0xda>
 800046c:	7a00      	ldrb	r0, [r0, #8]
 800046e:	2801      	cmp	r0, #1
 8000470:	d15a      	bne.n	8000528 <USBPD_CAD_Process+0xda>
 8000472:	aa01      	add	r2, sp, #4
 8000474:	4669      	mov	r1, sp
 8000476:	b2e0      	uxtb	r0, r4
 8000478:	f00b fd64 	bl	800bf44 <CAD_StateMachine>
 800047c:	42a8      	cmp	r0, r5
 800047e:	d800      	bhi.n	8000482 <USBPD_CAD_Process+0x34>
 8000480:	0005      	movs	r5, r0
 8000482:	4668      	mov	r0, sp
 8000484:	7800      	ldrb	r0, [r0, #0]
 8000486:	2801      	cmp	r0, #1
 8000488:	d004      	beq.n	8000494 <USBPD_CAD_Process+0x46>
 800048a:	2802      	cmp	r0, #2
 800048c:	d012      	beq.n	80004b4 <USBPD_CAD_Process+0x66>
 800048e:	2804      	cmp	r0, #4
 8000490:	d010      	beq.n	80004b4 <USBPD_CAD_Process+0x66>
 8000492:	e031      	b.n	80004f8 <USBPD_CAD_Process+0xaa>
 8000494:	6830      	ldr	r0, [r6, #0]
 8000496:	6801      	ldr	r1, [r0, #0]
 8000498:	680a      	ldr	r2, [r1, #0]
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <.text_19>)
 800049c:	4013      	ands	r3, r2
 800049e:	600b      	str	r3, [r1, #0]
 80004a0:	6801      	ldr	r1, [r0, #0]
 80004a2:	680a      	ldr	r2, [r1, #0]
 80004a4:	403a      	ands	r2, r7
 80004a6:	600a      	str	r2, [r1, #0]
 80004a8:	6800      	ldr	r0, [r0, #0]
 80004aa:	6801      	ldr	r1, [r0, #0]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	; (800056c <.text_20>)
 80004ae:	400a      	ands	r2, r1
 80004b0:	6002      	str	r2, [r0, #0]
 80004b2:	e025      	b.n	8000500 <USBPD_CAD_Process+0xb2>
 80004b4:	6830      	ldr	r0, [r6, #0]
 80004b6:	6801      	ldr	r1, [r0, #0]
 80004b8:	680b      	ldr	r3, [r1, #0]
 80004ba:	403b      	ands	r3, r7
 80004bc:	469c      	mov	ip, r3
 80004be:	9a01      	ldr	r2, [sp, #4]
 80004c0:	0193      	lsls	r3, r2, #6
 80004c2:	22c0      	movs	r2, #192	; 0xc0
 80004c4:	401a      	ands	r2, r3
 80004c6:	4663      	mov	r3, ip
 80004c8:	431a      	orrs	r2, r3
 80004ca:	600a      	str	r2, [r1, #0]
 80004cc:	6801      	ldr	r1, [r0, #0]
 80004ce:	680a      	ldr	r2, [r1, #0]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	015b      	lsls	r3, r3, #5
 80004d4:	4313      	orrs	r3, r2
 80004d6:	600b      	str	r3, [r1, #0]
 80004d8:	6800      	ldr	r0, [r0, #0]
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	074a      	lsls	r2, r1, #29
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	d103      	bne.n	80004ea <USBPD_CAD_Process+0x9c>
 80004e2:	2208      	movs	r2, #8
 80004e4:	4391      	bics	r1, r2
 80004e6:	6001      	str	r1, [r0, #0]
 80004e8:	e002      	b.n	80004f0 <USBPD_CAD_Process+0xa2>
 80004ea:	2208      	movs	r2, #8
 80004ec:	430a      	orrs	r2, r1
 80004ee:	6002      	str	r2, [r0, #0]
 80004f0:	2168      	movs	r1, #104	; 0x68
 80004f2:	b2e0      	uxtb	r0, r4
 80004f4:	f000 f8e0 	bl	80006b8 <USBPD_PE_Notification>
 80004f8:	4668      	mov	r0, sp
 80004fa:	7800      	ldrb	r0, [r0, #0]
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d013      	beq.n	8000528 <USBPD_CAD_Process+0xda>
 8000500:	9a01      	ldr	r2, [sp, #4]
 8000502:	4668      	mov	r0, sp
 8000504:	7801      	ldrb	r1, [r0, #0]
 8000506:	b2e0      	uxtb	r0, r4
 8000508:	6833      	ldr	r3, [r6, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4798      	blx	r3
 8000510:	4668      	mov	r0, sp
 8000512:	7800      	ldrb	r0, [r0, #0]
 8000514:	2801      	cmp	r0, #1
 8000516:	d003      	beq.n	8000520 <USBPD_CAD_Process+0xd2>
 8000518:	4668      	mov	r0, sp
 800051a:	7800      	ldrb	r0, [r0, #0]
 800051c:	2803      	cmp	r0, #3
 800051e:	d103      	bne.n	8000528 <USBPD_CAD_Process+0xda>
 8000520:	2169      	movs	r1, #105	; 0x69
 8000522:	b2e0      	uxtb	r0, r4
 8000524:	f000 f8c8 	bl	80006b8 <USBPD_PE_Notification>
 8000528:	1c64      	adds	r4, r4, #1
 800052a:	2c03      	cmp	r4, #3
 800052c:	d398      	bcc.n	8000460 <USBPD_CAD_Process+0x12>
 800052e:	0028      	movs	r0, r5
 8000530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000534 <.text_6>:
 8000534:	20000128 	.word	0x20000128

08000538 <.text_7>:
 8000538:	04c11db7 	.word	0x04c11db7

0800053c <.text_8>:
 800053c:	0000fff0 	.word	0x0000fff0

08000540 <.text_9>:
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <.text_10>:
 8000544:	0000c240 	.word	0x0000c240

08000548 <.text_11>:
 8000548:	0000c270 	.word	0x0000c270

0800054c <.text_12>:
 800054c:	e0042000 	.word	0xe0042000

08000550 <.text_13>:
 8000550:	5c001000 	.word	0x5c001000

08000554 <.text_14>:
 8000554:	00000483 	.word	0x00000483

08000558 <.text_15>:
 8000558:	58024c00 	.word	0x58024c00

0800055c <.text_16>:
 800055c:	40023000 	.word	0x40023000

08000560 <.text_17>:
 8000560:	f407a5c2 	.word	0xf407a5c2

08000564 <.text_18>:
 8000564:	20000134 	.word	0x20000134

08000568 <.text_19>:
 8000568:	ffffefff 	.word	0xffffefff

0800056c <.text_20>:
 800056c:	ffff9fff 	.word	0xffff9fff

08000570 <USBPD_CAD_AssertRd>:
 8000570:	b510      	push	{r4, lr}
 8000572:	0004      	movs	r4, r0
 8000574:	f00d f87a 	bl	800d66c <USBPDM1_DeAssertRp>
 8000578:	0020      	movs	r0, r4
 800057a:	f00d f881 	bl	800d680 <USBPDM1_AssertRd>
 800057e:	bd10      	pop	{r4, pc}

08000580 <USBPD_CAD_AssertRp>:
 8000580:	b510      	push	{r4, lr}
 8000582:	0004      	movs	r4, r0
 8000584:	f00d f922 	bl	800d7cc <USBPDM1_DeAssertRd>
 8000588:	0020      	movs	r0, r4
 800058a:	f00c ffb7 	bl	800d4fc <USBPDM1_AssertRp>
 800058e:	bd10      	pop	{r4, pc}

08000590 <USBPD_CAD_EnterErrorRecovery>:
 8000590:	b580      	push	{r7, lr}
 8000592:	f00b fc65 	bl	800be60 <CAD_Enter_ErrorRecovery>
 8000596:	bd01      	pop	{r0, pc}

08000598 <USBPD_CAD_GetMemoryConsumption>:
 8000598:	2024      	movs	r0, #36	; 0x24
 800059a:	4770      	bx	lr

0800059c <USBPD_PE_Init>:
 800059c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800059e:	b081      	sub	sp, #4
 80005a0:	0014      	movs	r4, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80005a6:	2900      	cmp	r1, #0
 80005a8:	d101      	bne.n	80005ae <USBPD_PE_Init+0x12>
 80005aa:	2418      	movs	r4, #24
 80005ac:	e03a      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005ae:	4669      	mov	r1, sp
 80005b0:	7008      	strb	r0, [r1, #0]
 80005b2:	4668      	mov	r0, sp
 80005b4:	7800      	ldrb	r0, [r0, #0]
 80005b6:	2803      	cmp	r0, #3
 80005b8:	d301      	bcc.n	80005be <USBPD_PE_Init+0x22>
 80005ba:	2417      	movs	r4, #23
 80005bc:	e032      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005be:	27aa      	movs	r7, #170	; 0xaa
 80005c0:	00bf      	lsls	r7, r7, #2
 80005c2:	0038      	movs	r0, r7
 80005c4:	f017 fff6 	bl	80185b4 <malloc>
 80005c8:	0005      	movs	r5, r0
 80005ca:	d101      	bne.n	80005d0 <USBPD_PE_Init+0x34>
 80005cc:	2416      	movs	r4, #22
 80005ce:	e029      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005d0:	0039      	movs	r1, r7
 80005d2:	f018 f8fe 	bl	80187d2 <__aeabi_memclr>
 80005d6:	48a9      	ldr	r0, [pc, #676]	; (800087c <.text_19>)
 80005d8:	4669      	mov	r1, sp
 80005da:	7809      	ldrb	r1, [r1, #0]
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	5045      	str	r5, [r0, r1]
 80005e0:	9802      	ldr	r0, [sp, #8]
 80005e2:	6028      	str	r0, [r5, #0]
 80005e4:	606c      	str	r4, [r5, #4]
 80005e6:	4668      	mov	r0, sp
 80005e8:	7800      	ldrb	r0, [r0, #0]
 80005ea:	7328      	strb	r0, [r5, #12]
 80005ec:	60ae      	str	r6, [r5, #8]
 80005ee:	20a9      	movs	r0, #169	; 0xa9
 80005f0:	0080      	lsls	r0, r0, #2
 80005f2:	182b      	adds	r3, r5, r0
 80005f4:	002a      	movs	r2, r5
 80005f6:	329c      	adds	r2, #156	; 0x9c
 80005f8:	9902      	ldr	r1, [sp, #8]
 80005fa:	4668      	mov	r0, sp
 80005fc:	7800      	ldrb	r0, [r0, #0]
 80005fe:	f000 ffc1 	bl	8001584 <USBPD_PRL_Init>
 8000602:	0004      	movs	r4, r0
 8000604:	d10e      	bne.n	8000624 <USBPD_PE_Init+0x88>
 8000606:	6868      	ldr	r0, [r5, #4]
 8000608:	6801      	ldr	r1, [r0, #0]
 800060a:	2208      	movs	r2, #8
 800060c:	4391      	bics	r1, r2
 800060e:	6001      	str	r1, [r0, #0]
 8000610:	9802      	ldr	r0, [sp, #8]
 8000612:	7900      	ldrb	r0, [r0, #4]
 8000614:	0783      	lsls	r3, r0, #30
 8000616:	0f9b      	lsrs	r3, r3, #30
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	4668      	mov	r0, sp
 800061e:	7800      	ldrb	r0, [r0, #0]
 8000620:	f000 ffe8 	bl	80015f4 <USBPD_PRL_SetHeader>
 8000624:	0020      	movs	r0, r4
 8000626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000628 <USBPD_PE_TimerCounter>:
 8000628:	4994      	ldr	r1, [pc, #592]	; (800087c <.text_19>)
 800062a:	0080      	lsls	r0, r0, #2
 800062c:	5808      	ldr	r0, [r1, r0]
 800062e:	4994      	ldr	r1, [pc, #592]	; (8000880 <.text_20>)
 8000630:	084a      	lsrs	r2, r1, #1
 8000632:	8b43      	ldrh	r3, [r0, #26]
 8000634:	4213      	tst	r3, r2
 8000636:	d002      	beq.n	800063e <USBPD_PE_TimerCounter+0x16>
 8000638:	8b43      	ldrh	r3, [r0, #26]
 800063a:	185b      	adds	r3, r3, r1
 800063c:	8343      	strh	r3, [r0, #26]
 800063e:	8b83      	ldrh	r3, [r0, #28]
 8000640:	4213      	tst	r3, r2
 8000642:	d002      	beq.n	800064a <USBPD_PE_TimerCounter+0x22>
 8000644:	8b82      	ldrh	r2, [r0, #28]
 8000646:	1851      	adds	r1, r2, r1
 8000648:	8381      	strh	r1, [r0, #28]
 800064a:	4770      	bx	lr

0800064c <USBPD_PE_TimerCounteUpdate>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	000e      	movs	r6, r1
 8000650:	498a      	ldr	r1, [pc, #552]	; (800087c <.text_19>)
 8000652:	0080      	lsls	r0, r0, #2
 8000654:	580c      	ldr	r4, [r1, r0]
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0209      	lsls	r1, r1, #8
 800065a:	428e      	cmp	r6, r1
 800065c:	da10      	bge.n	8000680 <USBPD_PE_TimerCounteUpdate+0x34>
 800065e:	1e4d      	subs	r5, r1, #1
 8000660:	8b60      	ldrh	r0, [r4, #26]
 8000662:	4228      	tst	r0, r5
 8000664:	d004      	beq.n	8000670 <USBPD_PE_TimerCounteUpdate+0x24>
 8000666:	0031      	movs	r1, r6
 8000668:	8b60      	ldrh	r0, [r4, #26]
 800066a:	f000 fc1d 	bl	8000ea8 <PE_UpdateTimer>
 800066e:	8360      	strh	r0, [r4, #26]
 8000670:	8ba0      	ldrh	r0, [r4, #28]
 8000672:	4228      	tst	r0, r5
 8000674:	d004      	beq.n	8000680 <USBPD_PE_TimerCounteUpdate+0x34>
 8000676:	0031      	movs	r1, r6
 8000678:	8ba0      	ldrh	r0, [r4, #28]
 800067a:	f000 fc15 	bl	8000ea8 <PE_UpdateTimer>
 800067e:	83a0      	strh	r0, [r4, #28]
 8000680:	bd70      	pop	{r4, r5, r6, pc}

08000682 <USBPD_PE_IsCableConnected>:
 8000682:	b510      	push	{r4, lr}
 8000684:	4a7d      	ldr	r2, [pc, #500]	; (800087c <.text_19>)
 8000686:	0080      	lsls	r0, r0, #2
 8000688:	5810      	ldr	r0, [r2, r0]
 800068a:	6842      	ldr	r2, [r0, #4]
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	4cb2      	ldr	r4, [pc, #712]	; (8000958 <.text_24>)
 8000690:	401c      	ands	r4, r3
 8000692:	0309      	lsls	r1, r1, #12
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	015b      	lsls	r3, r3, #5
 8000698:	4019      	ands	r1, r3
 800069a:	4321      	orrs	r1, r4
 800069c:	6011      	str	r1, [r2, #0]
 800069e:	2148      	movs	r1, #72	; 0x48
 80006a0:	7341      	strb	r1, [r0, #13]
 80006a2:	bd10      	pop	{r4, pc}

080006a4 <USBPD_PE_StateMachine_Reset>:
 80006a4:	2148      	movs	r1, #72	; 0x48
 80006a6:	4a75      	ldr	r2, [pc, #468]	; (800087c <.text_19>)
 80006a8:	0080      	lsls	r0, r0, #2
 80006aa:	5810      	ldr	r0, [r2, r0]
 80006ac:	7341      	strb	r1, [r0, #13]
 80006ae:	4770      	bx	lr

080006b0 <USBPD_PE_StateMachine_Stop>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	f001 fa53 	bl	8001b5c <USBPD_PRL_Stop>
 80006b6:	bd01      	pop	{r0, pc}

080006b8 <USBPD_PE_Notification>:
 80006b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80006ba:	0004      	movs	r4, r0
 80006bc:	2803      	cmp	r0, #3
 80006be:	d211      	bcs.n	80006e4 <USBPD_PE_Notification+0x2c>
 80006c0:	000d      	movs	r5, r1
 80006c2:	2000      	movs	r0, #0
 80006c4:	9000      	str	r0, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	002a      	movs	r2, r5
 80006ca:	0021      	movs	r1, r4
 80006cc:	2009      	movs	r0, #9
 80006ce:	4ea3      	ldr	r6, [pc, #652]	; (800095c <.text_25>)
 80006d0:	6836      	ldr	r6, [r6, #0]
 80006d2:	47b0      	blx	r6
 80006d4:	0029      	movs	r1, r5
 80006d6:	0020      	movs	r0, r4
 80006d8:	4a68      	ldr	r2, [pc, #416]	; (800087c <.text_19>)
 80006da:	00a3      	lsls	r3, r4, #2
 80006dc:	58d2      	ldr	r2, [r2, r3]
 80006de:	6892      	ldr	r2, [r2, #8]
 80006e0:	68d2      	ldr	r2, [r2, #12]
 80006e2:	4790      	blx	r2
 80006e4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080006e6 <USBPD_PE_Request_HardReset>:
 80006e6:	b580      	push	{r7, lr}
 80006e8:	4964      	ldr	r1, [pc, #400]	; (800087c <.text_19>)
 80006ea:	0082      	lsls	r2, r0, #2
 80006ec:	5889      	ldr	r1, [r1, r2]
 80006ee:	220f      	movs	r2, #15
 80006f0:	232a      	movs	r3, #42	; 0x2a
 80006f2:	54ca      	strb	r2, [r1, r3]
 80006f4:	6889      	ldr	r1, [r1, #8]
 80006f6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006f8:	4788      	blx	r1
 80006fa:	2000      	movs	r0, #0
 80006fc:	bd02      	pop	{r1, pc}

080006fe <USBPD_PE_Request_CableReset>:
 80006fe:	2010      	movs	r0, #16
 8000700:	4770      	bx	lr

08000702 <USBPD_PE_Request_CtrlMessage>:
 8000702:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000704:	b094      	sub	sp, #80	; 0x50
 8000706:	000f      	movs	r7, r1
 8000708:	0015      	movs	r5, r2
 800070a:	485c      	ldr	r0, [pc, #368]	; (800087c <.text_19>)
 800070c:	a914      	add	r1, sp, #80	; 0x50
 800070e:	7809      	ldrb	r1, [r1, #0]
 8000710:	0089      	lsls	r1, r1, #2
 8000712:	5846      	ldr	r6, [r0, r1]
 8000714:	2400      	movs	r4, #0
 8000716:	4668      	mov	r0, sp
 8000718:	49ac      	ldr	r1, [pc, #688]	; (80009cc <.text_27>)
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	f018 f84e 	bl	80187bc <__aeabi_memcpy>
 8000720:	2203      	movs	r2, #3
 8000722:	202a      	movs	r0, #42	; 0x2a
 8000724:	5c30      	ldrb	r0, [r6, r0]
 8000726:	2800      	cmp	r0, #0
 8000728:	d104      	bne.n	8000734 <USBPD_PE_Request_CtrlMessage+0x32>
 800072a:	6870      	ldr	r0, [r6, #4]
 800072c:	6803      	ldr	r3, [r0, #0]
 800072e:	04d8      	lsls	r0, r3, #19
 8000730:	0fc0      	lsrs	r0, r0, #31
 8000732:	d101      	bne.n	8000738 <USBPD_PE_Request_CtrlMessage+0x36>
 8000734:	2403      	movs	r4, #3
 8000736:	e03d      	b.n	80007b4 <USBPD_PE_Request_CtrlMessage+0xb2>
 8000738:	6830      	ldr	r0, [r6, #0]
 800073a:	6840      	ldr	r0, [r0, #4]
 800073c:	0701      	lsls	r1, r0, #28
 800073e:	0fc8      	lsrs	r0, r1, #31
 8000740:	0559      	lsls	r1, r3, #21
 8000742:	0f49      	lsrs	r1, r1, #29
 8000744:	2903      	cmp	r1, #3
 8000746:	d101      	bne.n	800074c <USBPD_PE_Request_CtrlMessage+0x4a>
 8000748:	2108      	movs	r1, #8
 800074a:	e000      	b.n	800074e <USBPD_PE_Request_CtrlMessage+0x4c>
 800074c:	2100      	movs	r1, #0
 800074e:	401a      	ands	r2, r3
 8000750:	2a02      	cmp	r2, #2
 8000752:	d101      	bne.n	8000758 <USBPD_PE_Request_CtrlMessage+0x56>
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	e000      	b.n	800075a <USBPD_PE_Request_CtrlMessage+0x58>
 8000758:	2200      	movs	r2, #0
 800075a:	4301      	orrs	r1, r0
 800075c:	430a      	orrs	r2, r1
 800075e:	2012      	movs	r0, #18
 8000760:	4310      	orrs	r0, r2
 8000762:	07c1      	lsls	r1, r0, #31
 8000764:	d502      	bpl.n	800076c <USBPD_PE_Request_CtrlMessage+0x6a>
 8000766:	0001      	movs	r1, r0
 8000768:	2020      	movs	r0, #32
 800076a:	4308      	orrs	r0, r1
 800076c:	0079      	lsls	r1, r7, #1
 800076e:	19c9      	adds	r1, r1, r7
 8000770:	466a      	mov	r2, sp
 8000772:	5c53      	ldrb	r3, [r2, r1]
 8000774:	4018      	ands	r0, r3
 8000776:	4298      	cmp	r0, r3
 8000778:	d001      	beq.n	800077e <USBPD_PE_Request_CtrlMessage+0x7c>
 800077a:	2402      	movs	r4, #2
 800077c:	e01a      	b.n	80007b4 <USBPD_PE_Request_CtrlMessage+0xb2>
 800077e:	232b      	movs	r3, #43	; 0x2b
 8000780:	54f4      	strb	r4, [r6, r3]
 8000782:	0030      	movs	r0, r6
 8000784:	3078      	adds	r0, #120	; 0x78
 8000786:	2f0d      	cmp	r7, #13
 8000788:	d007      	beq.n	800079a <USBPD_PE_Request_CtrlMessage+0x98>
 800078a:	2f16      	cmp	r7, #22
 800078c:	d002      	beq.n	8000794 <USBPD_PE_Request_CtrlMessage+0x92>
 800078e:	2f18      	cmp	r7, #24
 8000790:	d003      	beq.n	800079a <USBPD_PE_Request_CtrlMessage+0x98>
 8000792:	e003      	b.n	800079c <USBPD_PE_Request_CtrlMessage+0x9a>
 8000794:	2316      	movs	r3, #22
 8000796:	7003      	strb	r3, [r0, #0]
 8000798:	e000      	b.n	800079c <USBPD_PE_Request_CtrlMessage+0x9a>
 800079a:	54f5      	strb	r5, [r6, r3]
 800079c:	1853      	adds	r3, r2, r1
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	7043      	strb	r3, [r0, #1]
 80007a2:	1850      	adds	r0, r2, r1
 80007a4:	7880      	ldrb	r0, [r0, #2]
 80007a6:	212a      	movs	r1, #42	; 0x2a
 80007a8:	5470      	strb	r0, [r6, r1]
 80007aa:	a814      	add	r0, sp, #80	; 0x50
 80007ac:	7800      	ldrb	r0, [r0, #0]
 80007ae:	68b1      	ldr	r1, [r6, #8]
 80007b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80007b2:	4788      	blx	r1
 80007b4:	0020      	movs	r0, r4
 80007b6:	b015      	add	sp, #84	; 0x54
 80007b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007ba <USBPD_PE_Request_DataMessage>:
 80007ba:	b510      	push	{r4, lr}
 80007bc:	4a2f      	ldr	r2, [pc, #188]	; (800087c <.text_19>)
 80007be:	0080      	lsls	r0, r0, #2
 80007c0:	5812      	ldr	r2, [r2, r0]
 80007c2:	2002      	movs	r0, #2
 80007c4:	232a      	movs	r3, #42	; 0x2a
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <USBPD_PE_Request_DataMessage+0x1c>
 80007cc:	6853      	ldr	r3, [r2, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	04dc      	lsls	r4, r3, #19
 80007d2:	0fe4      	lsrs	r4, r4, #31
 80007d4:	d101      	bne.n	80007da <USBPD_PE_Request_DataMessage+0x20>
 80007d6:	2003      	movs	r0, #3
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	2300      	movs	r3, #0
 80007dc:	242b      	movs	r4, #43	; 0x2b
 80007de:	5513      	strb	r3, [r2, r4]
 80007e0:	1f89      	subs	r1, r1, #6
 80007e2:	2901      	cmp	r1, #1
 80007e4:	d900      	bls.n	80007e8 <USBPD_PE_Request_DataMessage+0x2e>
 80007e6:	2010      	movs	r0, #16
 80007e8:	bd10      	pop	{r4, pc}

080007ea <USBPD_PE_Send_Request>:
 80007ea:	b570      	push	{r4, r5, r6, lr}
 80007ec:	000b      	movs	r3, r1
 80007ee:	4923      	ldr	r1, [pc, #140]	; (800087c <.text_19>)
 80007f0:	0084      	lsls	r4, r0, #2
 80007f2:	590d      	ldr	r5, [r1, r4]
 80007f4:	2102      	movs	r1, #2
 80007f6:	242a      	movs	r4, #42	; 0x2a
 80007f8:	5d2c      	ldrb	r4, [r5, r4]
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d104      	bne.n	8000808 <USBPD_PE_Send_Request+0x1e>
 80007fe:	686c      	ldr	r4, [r5, #4]
 8000800:	6824      	ldr	r4, [r4, #0]
 8000802:	04e6      	lsls	r6, r4, #19
 8000804:	0ff6      	lsrs	r6, r6, #31
 8000806:	d101      	bne.n	800080c <USBPD_PE_Send_Request+0x22>
 8000808:	2103      	movs	r1, #3
 800080a:	e015      	b.n	8000838 <USBPD_PE_Send_Request+0x4e>
 800080c:	0564      	lsls	r4, r4, #21
 800080e:	0f64      	lsrs	r4, r4, #29
 8000810:	2c03      	cmp	r4, #3
 8000812:	d111      	bne.n	8000838 <USBPD_PE_Send_Request+0x4e>
 8000814:	2145      	movs	r1, #69	; 0x45
 8000816:	242a      	movs	r4, #42	; 0x2a
 8000818:	5529      	strb	r1, [r5, r4]
 800081a:	616b      	str	r3, [r5, #20]
 800081c:	6929      	ldr	r1, [r5, #16]
 800081e:	2318      	movs	r3, #24
 8000820:	4399      	bics	r1, r3
 8000822:	00d2      	lsls	r2, r2, #3
 8000824:	4013      	ands	r3, r2
 8000826:	430b      	orrs	r3, r1
 8000828:	612b      	str	r3, [r5, #16]
 800082a:	2400      	movs	r4, #0
 800082c:	222b      	movs	r2, #43	; 0x2b
 800082e:	54ac      	strb	r4, [r5, r2]
 8000830:	68a9      	ldr	r1, [r5, #8]
 8000832:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000834:	4788      	blx	r1
 8000836:	2100      	movs	r1, #0
 8000838:	0008      	movs	r0, r1
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <PE_Send_RESET>:
 800083c:	b538      	push	{r3, r4, r5, lr}
 800083e:	0005      	movs	r5, r0
 8000840:	000c      	movs	r4, r1
 8000842:	2c05      	cmp	r4, #5
 8000844:	d101      	bne.n	800084a <PE_Send_RESET+0xe>
 8000846:	211f      	movs	r1, #31
 8000848:	e000      	b.n	800084c <PE_Send_RESET+0x10>
 800084a:	215e      	movs	r1, #94	; 0x5e
 800084c:	7b28      	ldrb	r0, [r5, #12]
 800084e:	f7ff ff33 	bl	80006b8 <USBPD_PE_Notification>
 8000852:	0021      	movs	r1, r4
 8000854:	7b28      	ldrb	r0, [r5, #12]
 8000856:	f001 f91f 	bl	8001a98 <USBPD_PRL_ResetRequestProcess>
 800085a:	f3ef 8010 	mrs	r0, PRIMASK
 800085e:	b672      	cpsid	i
 8000860:	2100      	movs	r1, #0
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	54a9      	strb	r1, [r5, r2]
 8000866:	f380 8810 	msr	PRIMASK, r0
 800086a:	bd31      	pop	{r0, r4, r5, pc}

0800086c <PE_Get_SpecRevision>:
 800086c:	4903      	ldr	r1, [pc, #12]	; (800087c <.text_19>)
 800086e:	0080      	lsls	r0, r0, #2
 8000870:	5808      	ldr	r0, [r1, r0]
 8000872:	6840      	ldr	r0, [r0, #4]
 8000874:	7800      	ldrb	r0, [r0, #0]
 8000876:	0780      	lsls	r0, r0, #30
 8000878:	0f80      	lsrs	r0, r0, #30
 800087a:	4770      	bx	lr

0800087c <.text_19>:
 800087c:	20000138 	.word	0x20000138

08000880 <.text_20>:
 8000880:	0000ffff 	.word	0x0000ffff

08000884 <PE_Get_RxEvent>:
 8000884:	b530      	push	{r4, r5, lr}
 8000886:	0001      	movs	r1, r0
 8000888:	2014      	movs	r0, #20
 800088a:	f3ef 8210 	mrs	r2, PRIMASK
 800088e:	b672      	cpsid	i
 8000890:	2334      	movs	r3, #52	; 0x34
 8000892:	5ccb      	ldrb	r3, [r1, r3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d029      	beq.n	80008ec <PE_Get_RxEvent+0x68>
 8000898:	000c      	movs	r4, r1
 800089a:	3470      	adds	r4, #112	; 0x70
 800089c:	5ce4      	ldrb	r4, [r4, r3]
 800089e:	0664      	lsls	r4, r4, #25
 80008a0:	d401      	bmi.n	80008a6 <PE_Get_RxEvent+0x22>
 80008a2:	2003      	movs	r0, #3
 80008a4:	e022      	b.n	80008ec <PE_Get_RxEvent+0x68>
 80008a6:	241e      	movs	r4, #30
 80008a8:	4363      	muls	r3, r4
 80008aa:	18cb      	adds	r3, r1, r3
 80008ac:	3317      	adds	r3, #23
 80008ae:	630b      	str	r3, [r1, #48]	; 0x30
 80008b0:	781c      	ldrb	r4, [r3, #0]
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	18e3      	adds	r3, r4, r3
 80008b8:	858b      	strh	r3, [r1, #44]	; 0x2c
 80008ba:	000b      	movs	r3, r1
 80008bc:	3328      	adds	r3, #40	; 0x28
 80008be:	000c      	movs	r4, r1
 80008c0:	3470      	adds	r4, #112	; 0x70
 80008c2:	2534      	movs	r5, #52	; 0x34
 80008c4:	5d49      	ldrb	r1, [r1, r5]
 80008c6:	5c61      	ldrb	r1, [r4, r1]
 80008c8:	06c9      	lsls	r1, r1, #27
 80008ca:	0ec9      	lsrs	r1, r1, #27
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d004      	beq.n	80008da <PE_Get_RxEvent+0x56>
 80008d0:	2902      	cmp	r1, #2
 80008d2:	d005      	beq.n	80008e0 <PE_Get_RxEvent+0x5c>
 80008d4:	2904      	cmp	r1, #4
 80008d6:	d006      	beq.n	80008e6 <PE_Get_RxEvent+0x62>
 80008d8:	e008      	b.n	80008ec <PE_Get_RxEvent+0x68>
 80008da:	2011      	movs	r0, #17
 80008dc:	2100      	movs	r1, #0
 80008de:	e004      	b.n	80008ea <PE_Get_RxEvent+0x66>
 80008e0:	2012      	movs	r0, #18
 80008e2:	2101      	movs	r1, #1
 80008e4:	e001      	b.n	80008ea <PE_Get_RxEvent+0x66>
 80008e6:	2013      	movs	r0, #19
 80008e8:	2102      	movs	r1, #2
 80008ea:	7019      	strb	r1, [r3, #0]
 80008ec:	f382 8810 	msr	PRIMASK, r2
 80008f0:	bd30      	pop	{r4, r5, pc}

080008f2 <PE_Clear_RxEvent>:
 80008f2:	b538      	push	{r3, r4, r5, lr}
 80008f4:	0001      	movs	r1, r0
 80008f6:	f3ef 8010 	mrs	r0, PRIMASK
 80008fa:	b672      	cpsid	i
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	5c8a      	ldrb	r2, [r1, r2]
 8000900:	2a00      	cmp	r2, #0
 8000902:	d016      	beq.n	8000932 <PE_Clear_RxEvent+0x40>
 8000904:	1e53      	subs	r3, r2, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2200      	movs	r2, #0
 800090a:	000d      	movs	r5, r1
 800090c:	3571      	adds	r5, #113	; 0x71
 800090e:	54ea      	strb	r2, [r5, r3]
 8000910:	1e5b      	subs	r3, r3, #1
 8000912:	419b      	sbcs	r3, r3
 8000914:	0fdb      	lsrs	r3, r3, #31
 8000916:	000c      	movs	r4, r1
 8000918:	3471      	adds	r4, #113	; 0x71
 800091a:	5ce4      	ldrb	r4, [r4, r3]
 800091c:	0664      	lsls	r4, r4, #25
 800091e:	d506      	bpl.n	800092e <PE_Clear_RxEvent+0x3c>
 8000920:	1c5b      	adds	r3, r3, #1
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	548b      	strb	r3, [r1, r2]
 8000926:	f380 8810 	msr	PRIMASK, r0
 800092a:	7b08      	ldrb	r0, [r1, #12]
 800092c:	e161      	b.n	8000bf2 <.text_39>
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	54ca      	strb	r2, [r1, r3]
 8000932:	f380 8810 	msr	PRIMASK, r0
 8000936:	bd31      	pop	{r0, r4, r5, pc}

08000938 <PE_PRL_Control_RxEvent>:
 8000938:	49b0      	ldr	r1, [pc, #704]	; (8000bfc <.text_40>)
 800093a:	0080      	lsls	r0, r0, #2
 800093c:	580a      	ldr	r2, [r1, r0]
 800093e:	2000      	movs	r0, #0
 8000940:	f3ef 8110 	mrs	r1, PRIMASK
 8000944:	b672      	cpsid	i
 8000946:	2334      	movs	r3, #52	; 0x34
 8000948:	5cd2      	ldrb	r2, [r2, r3]
 800094a:	2a00      	cmp	r2, #0
 800094c:	d000      	beq.n	8000950 <PE_PRL_Control_RxEvent+0x18>
 800094e:	2001      	movs	r0, #1
 8000950:	f381 8810 	msr	PRIMASK, r1
 8000954:	4770      	bx	lr
	...

08000958 <.text_24>:
 8000958:	ffffefff 	.word	0xffffefff

0800095c <.text_25>:
 800095c:	20000000 	.word	0x20000000

08000960 <PE_Check_AMSConflict>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	0005      	movs	r5, r0
 8000964:	2400      	movs	r4, #0
 8000966:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8000968:	49a5      	ldr	r1, [pc, #660]	; (8000c00 <.text_41>)
 800096a:	4001      	ands	r1, r0
 800096c:	290d      	cmp	r1, #13
 800096e:	d101      	bne.n	8000974 <PE_Check_AMSConflict+0x14>
 8000970:	2010      	movs	r0, #16
 8000972:	e01b      	b.n	80009ac <PE_Check_AMSConflict+0x4c>
 8000974:	2603      	movs	r6, #3
 8000976:	200f      	movs	r0, #15
 8000978:	7e29      	ldrb	r1, [r5, #24]
 800097a:	2900      	cmp	r1, #0
 800097c:	d011      	beq.n	80009a2 <PE_Check_AMSConflict+0x42>
 800097e:	1e49      	subs	r1, r1, #1
 8000980:	2901      	cmp	r1, #1
 8000982:	d912      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000984:	1e89      	subs	r1, r1, #2
 8000986:	d011      	beq.n	80009ac <PE_Check_AMSConflict+0x4c>
 8000988:	1e49      	subs	r1, r1, #1
 800098a:	d01c      	beq.n	80009c6 <PE_Check_AMSConflict+0x66>
 800098c:	1e49      	subs	r1, r1, #1
 800098e:	2909      	cmp	r1, #9
 8000990:	d90b      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000992:	390b      	subs	r1, #11
 8000994:	2901      	cmp	r1, #1
 8000996:	d908      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000998:	1e89      	subs	r1, r1, #2
 800099a:	d004      	beq.n	80009a6 <PE_Check_AMSConflict+0x46>
 800099c:	394d      	subs	r1, #77	; 0x4d
 800099e:	d004      	beq.n	80009aa <PE_Check_AMSConflict+0x4a>
 80009a0:	e006      	b.n	80009b0 <PE_Check_AMSConflict+0x50>
 80009a2:	736e      	strb	r6, [r5, #13]
 80009a4:	e010      	b.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009a6:	7368      	strb	r0, [r5, #13]
 80009a8:	e00e      	b.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009aa:	2011      	movs	r0, #17
 80009ac:	7368      	strb	r0, [r5, #13]
 80009ae:	e00a      	b.n	80009c6 <PE_Check_AMSConflict+0x66>
 80009b0:	215c      	movs	r1, #92	; 0x5c
 80009b2:	7b28      	ldrb	r0, [r5, #12]
 80009b4:	f7ff fe80 	bl	80006b8 <USBPD_PE_Notification>
 80009b8:	736e      	strb	r6, [r5, #13]
 80009ba:	6868      	ldr	r0, [r5, #4]
 80009bc:	6800      	ldr	r0, [r0, #0]
 80009be:	0540      	lsls	r0, r0, #21
 80009c0:	0f40      	lsrs	r0, r0, #29
 80009c2:	2803      	cmp	r0, #3
 80009c4:	d000      	beq.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009c6:	2415      	movs	r4, #21
 80009c8:	0020      	movs	r0, r4
 80009ca:	bd70      	pop	{r4, r5, r6, pc}

080009cc <.text_27>:
 80009cc:	08018a6c 	.word	0x08018a6c

080009d0 <PE_PRL_ResetReceived>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	0004      	movs	r4, r0
 80009d4:	4889      	ldr	r0, [pc, #548]	; (8000bfc <.text_40>)
 80009d6:	00a2      	lsls	r2, r4, #2
 80009d8:	5885      	ldr	r5, [r0, r2]
 80009da:	2905      	cmp	r1, #5
 80009dc:	d115      	bne.n	8000a0a <PE_PRL_ResetReceived+0x3a>
 80009de:	6868      	ldr	r0, [r5, #4]
 80009e0:	6801      	ldr	r1, [r0, #0]
 80009e2:	2210      	movs	r2, #16
 80009e4:	4391      	bics	r1, r2
 80009e6:	6001      	str	r1, [r0, #0]
 80009e8:	6928      	ldr	r0, [r5, #16]
 80009ea:	4986      	ldr	r1, [pc, #536]	; (8000c04 <.text_42>)
 80009ec:	4001      	ands	r1, r0
 80009ee:	0150      	lsls	r0, r2, #5
 80009f0:	4308      	orrs	r0, r1
 80009f2:	6128      	str	r0, [r5, #16]
 80009f4:	2014      	movs	r0, #20
 80009f6:	212a      	movs	r1, #42	; 0x2a
 80009f8:	5468      	strb	r0, [r5, r1]
 80009fa:	2000      	movs	r0, #0
 80009fc:	2134      	movs	r1, #52	; 0x34
 80009fe:	5468      	strb	r0, [r5, r1]
 8000a00:	211e      	movs	r1, #30
 8000a02:	7b28      	ldrb	r0, [r5, #12]
 8000a04:	f7ff fe58 	bl	80006b8 <USBPD_PE_Notification>
 8000a08:	e004      	b.n	8000a14 <PE_PRL_ResetReceived+0x44>
 8000a0a:	6928      	ldr	r0, [r5, #16]
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	02c9      	lsls	r1, r1, #11
 8000a10:	4301      	orrs	r1, r0
 8000a12:	6129      	str	r1, [r5, #16]
 8000a14:	0020      	movs	r0, r4
 8000a16:	68a9      	ldr	r1, [r5, #8]
 8000a18:	e0ec      	b.n	8000bf4 <.text_39+0x2>

08000a1a <PE_PRL_BistCompleted>:
 8000a1a:	4770      	bx	lr

08000a1c <PE_Reset_HardReset>:
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	0004      	movs	r4, r0
 8000a20:	202a      	movs	r0, #42	; 0x2a
 8000a22:	5c20      	ldrb	r0, [r4, r0]
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d003      	beq.n	8000a30 <PE_Reset_HardReset+0x14>
 8000a28:	215b      	movs	r1, #91	; 0x5b
 8000a2a:	7b20      	ldrb	r0, [r4, #12]
 8000a2c:	f7ff fe44 	bl	80006b8 <USBPD_PE_Notification>
 8000a30:	0020      	movs	r0, r4
 8000a32:	f000 f819 	bl	8000a68 <PE_Reset_ZI>
 8000a36:	2503      	movs	r5, #3
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	6843      	ldr	r3, [r0, #4]
 8000a3c:	402b      	ands	r3, r5
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	7b20      	ldrb	r0, [r4, #12]
 8000a44:	f000 fdd6 	bl	80015f4 <USBPD_PRL_SetHeader>
 8000a48:	6860      	ldr	r0, [r4, #4]
 8000a4a:	6801      	ldr	r1, [r0, #0]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4391      	bics	r1, r2
 8000a50:	6001      	str	r1, [r0, #0]
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	6852      	ldr	r2, [r2, #4]
 8000a56:	4015      	ands	r5, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4391      	bics	r1, r2
 8000a5c:	430d      	orrs	r5, r1
 8000a5e:	6005      	str	r5, [r0, #0]
 8000a60:	7b20      	ldrb	r0, [r4, #12]
 8000a62:	f001 f858 	bl	8001b16 <USBPD_PRL_Reset>
 8000a66:	bd31      	pop	{r0, r4, r5, pc}

08000a68 <PE_Reset_ZI>:
 8000a68:	b51c      	push	{r2, r3, r4, lr}
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	9000      	str	r0, [sp, #0]
 8000a70:	6860      	ldr	r0, [r4, #4]
 8000a72:	6801      	ldr	r1, [r0, #0]
 8000a74:	2210      	movs	r2, #16
 8000a76:	4391      	bics	r1, r2
 8000a78:	6001      	str	r1, [r0, #0]
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0020      	movs	r0, r4
 8000a7e:	f000 fa27 	bl	8000ed0 <PE_SetPowerNegotiation>
 8000a82:	216c      	movs	r1, #108	; 0x6c
 8000a84:	0020      	movs	r0, r4
 8000a86:	3010      	adds	r0, #16
 8000a88:	f017 fea3 	bl	80187d2 <__aeabi_memclr>
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	466a      	mov	r2, sp
 8000a90:	2102      	movs	r1, #2
 8000a92:	7b20      	ldrb	r0, [r4, #12]
 8000a94:	68a4      	ldr	r4, [r4, #8]
 8000a96:	69a4      	ldr	r4, [r4, #24]
 8000a98:	47a0      	blx	r4
 8000a9a:	bd13      	pop	{r0, r1, r4, pc}

08000a9c <PE_Reset_Counter>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	307c      	adds	r0, #124	; 0x7c
 8000aa2:	f017 fe96 	bl	80187d2 <__aeabi_memclr>
 8000aa6:	bd01      	pop	{r0, pc}

08000aa8 <PE_ExtRevisionInteroperability>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4953      	ldr	r1, [pc, #332]	; (8000bfc <.text_40>)
 8000aae:	0083      	lsls	r3, r0, #2
 8000ab0:	58cb      	ldr	r3, [r1, r3]
 8000ab2:	685c      	ldr	r4, [r3, #4]
 8000ab4:	6825      	ldr	r5, [r4, #0]
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	2603      	movs	r6, #3
 8000aba:	402e      	ands	r6, r5
 8000abc:	42b2      	cmp	r2, r6
 8000abe:	db00      	blt.n	8000ac2 <PE_ExtRevisionInteroperability+0x1a>
 8000ac0:	0032      	movs	r2, r6
 8000ac2:	438d      	bics	r5, r1
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	6022      	str	r2, [r4, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	6814      	ldr	r4, [r2, #0]
 8000ace:	2503      	movs	r5, #3
 8000ad0:	4025      	ands	r5, r4
 8000ad2:	2d01      	cmp	r5, #1
 8000ad4:	d101      	bne.n	8000ada <PE_ExtRevisionInteroperability+0x32>
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	e000      	b.n	8000adc <PE_ExtRevisionInteroperability+0x34>
 8000ada:	2520      	movs	r5, #32
 8000adc:	2620      	movs	r6, #32
 8000ade:	43b4      	bics	r4, r6
 8000ae0:	4325      	orrs	r5, r4
 8000ae2:	6015      	str	r5, [r2, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	4011      	ands	r1, r2
 8000aea:	f000 fdb5 	bl	8001658 <USBPD_PRL_SetHeaderSpecification>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <PE_PRL_FastRoleSwapReception>:
 8000af0:	4942      	ldr	r1, [pc, #264]	; (8000bfc <.text_40>)
 8000af2:	0082      	lsls	r2, r0, #2
 8000af4:	5889      	ldr	r1, [r1, r2]
 8000af6:	7e0a      	ldrb	r2, [r1, #24]
 8000af8:	2a09      	cmp	r2, #9
 8000afa:	d100      	bne.n	8000afe <PE_PRL_FastRoleSwapReception+0xe>
 8000afc:	4770      	bx	lr
 8000afe:	b510      	push	{r4, lr}
 8000b00:	684a      	ldr	r2, [r1, #4]
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	2410      	movs	r4, #16
 8000b06:	431c      	orrs	r4, r3
 8000b08:	6014      	str	r4, [r2, #0]
 8000b0a:	690a      	ldr	r2, [r1, #16]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4313      	orrs	r3, r2
 8000b12:	610b      	str	r3, [r1, #16]
 8000b14:	6889      	ldr	r1, [r1, #8]
 8000b16:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000b18:	4788      	blx	r1
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <PE_PRL_PostReceiveEvent>:
 8000b1c:	b530      	push	{r4, r5, lr}
 8000b1e:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <.text_40>)
 8000b20:	0080      	lsls	r0, r0, #2
 8000b22:	5812      	ldr	r2, [r2, r0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	2571      	movs	r5, #113	; 0x71
 8000b2a:	18d4      	adds	r4, r2, r3
 8000b2c:	5d64      	ldrb	r4, [r4, r5]
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d004      	beq.n	8000b3c <PE_PRL_PostReceiveEvent+0x20>
 8000b32:	1c5b      	adds	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d9f7      	bls.n	8000b2a <PE_PRL_PostReceiveEvent+0xe>
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	18d4      	adds	r4, r2, r3
 8000b40:	5560      	strb	r0, [r4, r5]
 8000b42:	2001      	movs	r0, #1
 8000b44:	5d64      	ldrb	r4, [r4, r5]
 8000b46:	2501      	movs	r5, #1
 8000b48:	408d      	lsls	r5, r1
 8000b4a:	4325      	orrs	r5, r4
 8000b4c:	18d1      	adds	r1, r2, r3
 8000b4e:	2271      	movs	r2, #113	; 0x71
 8000b50:	548d      	strb	r5, [r1, r2]
 8000b52:	bd30      	pop	{r4, r5, pc}

08000b54 <PE_PRL_PostReceiveEventError>:
 8000b54:	b530      	push	{r4, r5, lr}
 8000b56:	4929      	ldr	r1, [pc, #164]	; (8000bfc <.text_40>)
 8000b58:	0080      	lsls	r0, r0, #2
 8000b5a:	5809      	ldr	r1, [r1, r0]
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	b2d3      	uxtb	r3, r2
 8000b62:	18cb      	adds	r3, r1, r3
 8000b64:	2471      	movs	r4, #113	; 0x71
 8000b66:	5d1c      	ldrb	r4, [r3, r4]
 8000b68:	2560      	movs	r5, #96	; 0x60
 8000b6a:	4025      	ands	r5, r4
 8000b6c:	2d20      	cmp	r5, #32
 8000b6e:	d004      	beq.n	8000b7a <PE_PRL_PostReceiveEventError+0x26>
 8000b70:	1c52      	adds	r2, r2, #1
 8000b72:	b2d3      	uxtb	r3, r2
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d3f3      	bcc.n	8000b60 <PE_PRL_PostReceiveEventError+0xc>
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	2171      	movs	r1, #113	; 0x71
 8000b7c:	5458      	strb	r0, [r3, r1]
 8000b7e:	bd30      	pop	{r4, r5, pc}

08000b80 <PE_PRL_PostReceiveEventCopy>:
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <.text_40>)
 8000b84:	0080      	lsls	r0, r0, #2
 8000b86:	5813      	ldr	r3, [r2, r0]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	b2d0      	uxtb	r0, r2
 8000b8c:	181c      	adds	r4, r3, r0
 8000b8e:	2571      	movs	r5, #113	; 0x71
 8000b90:	5d64      	ldrb	r4, [r4, r5]
 8000b92:	2560      	movs	r5, #96	; 0x60
 8000b94:	4025      	ands	r5, r4
 8000b96:	2d20      	cmp	r5, #32
 8000b98:	d004      	beq.n	8000ba4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000b9a:	1c52      	adds	r2, r2, #1
 8000b9c:	b2d0      	uxtb	r0, r2
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	d3f3      	bcc.n	8000b8a <PE_PRL_PostReceiveEventCopy+0xa>
 8000ba2:	bd31      	pop	{r0, r4, r5, pc}
 8000ba4:	221e      	movs	r2, #30
 8000ba6:	241e      	movs	r4, #30
 8000ba8:	4360      	muls	r0, r4
 8000baa:	1818      	adds	r0, r3, r0
 8000bac:	3035      	adds	r0, #53	; 0x35
 8000bae:	f017 fe05 	bl	80187bc <__aeabi_memcpy>
 8000bb2:	bd31      	pop	{r0, r4, r5, pc}

08000bb4 <PE_PRL_PostReceiveEventComplete>:
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	4911      	ldr	r1, [pc, #68]	; (8000bfc <.text_40>)
 8000bb8:	0082      	lsls	r2, r0, #2
 8000bba:	5889      	ldr	r1, [r1, r2]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	18cc      	adds	r4, r1, r3
 8000bc2:	2571      	movs	r5, #113	; 0x71
 8000bc4:	5d64      	ldrb	r4, [r4, r5]
 8000bc6:	2560      	movs	r5, #96	; 0x60
 8000bc8:	4025      	ands	r5, r4
 8000bca:	2d20      	cmp	r5, #32
 8000bcc:	d003      	beq.n	8000bd6 <PE_PRL_PostReceiveEventComplete+0x22>
 8000bce:	b2d3      	uxtb	r3, r2
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d3f4      	bcc.n	8000bbe <PE_PRL_PostReceiveEventComplete+0xa>
 8000bd4:	bd31      	pop	{r0, r4, r5, pc}
 8000bd6:	18cc      	adds	r4, r1, r3
 8000bd8:	2571      	movs	r5, #113	; 0x71
 8000bda:	5d64      	ldrb	r4, [r4, r5]
 8000bdc:	2540      	movs	r5, #64	; 0x40
 8000bde:	4325      	orrs	r5, r4
 8000be0:	18cb      	adds	r3, r1, r3
 8000be2:	2471      	movs	r4, #113	; 0x71
 8000be4:	551d      	strb	r5, [r3, r4]
 8000be6:	2334      	movs	r3, #52	; 0x34
 8000be8:	5ccb      	ldrb	r3, [r1, r3]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <.text_39>
 8000bee:	2334      	movs	r3, #52	; 0x34
 8000bf0:	54ca      	strb	r2, [r1, r3]

08000bf2 <.text_39>:
 8000bf2:	6889      	ldr	r1, [r1, #8]
 8000bf4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000bf6:	4788      	blx	r1
 8000bf8:	bd31      	pop	{r0, r4, r5, pc}
	...

08000bfc <.text_40>:
 8000bfc:	20000138 	.word	0x20000138

08000c00 <.text_41>:
 8000c00:	0000f01f 	.word	0x0000f01f

08000c04 <.text_42>:
 8000c04:	fffff9ff 	.word	0xfffff9ff

08000c08 <PE_SubStateMachine_Generic>:
 8000c08:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	0004      	movs	r4, r0
 8000c0e:	2502      	movs	r5, #2
 8000c10:	2000      	movs	r0, #0
 8000c12:	9003      	str	r0, [sp, #12]
 8000c14:	2603      	movs	r6, #3
 8000c16:	2714      	movs	r7, #20
 8000c18:	7b60      	ldrb	r0, [r4, #13]
 8000c1a:	2801      	cmp	r0, #1
 8000c1c:	d100      	bne.n	8000c20 <PE_SubStateMachine_Generic+0x18>
 8000c1e:	e109      	b.n	8000e34 <PE_SubStateMachine_Generic+0x22c>
 8000c20:	2818      	cmp	r0, #24
 8000c22:	d01c      	beq.n	8000c5e <PE_SubStateMachine_Generic+0x56>
 8000c24:	2819      	cmp	r0, #25
 8000c26:	d025      	beq.n	8000c74 <PE_SubStateMachine_Generic+0x6c>
 8000c28:	281d      	cmp	r0, #29
 8000c2a:	d06a      	beq.n	8000d02 <PE_SubStateMachine_Generic+0xfa>
 8000c2c:	2827      	cmp	r0, #39	; 0x27
 8000c2e:	d100      	bne.n	8000c32 <PE_SubStateMachine_Generic+0x2a>
 8000c30:	e087      	b.n	8000d42 <PE_SubStateMachine_Generic+0x13a>
 8000c32:	2828      	cmp	r0, #40	; 0x28
 8000c34:	d100      	bne.n	8000c38 <PE_SubStateMachine_Generic+0x30>
 8000c36:	e090      	b.n	8000d5a <PE_SubStateMachine_Generic+0x152>
 8000c38:	2829      	cmp	r0, #41	; 0x29
 8000c3a:	d100      	bne.n	8000c3e <PE_SubStateMachine_Generic+0x36>
 8000c3c:	e098      	b.n	8000d70 <PE_SubStateMachine_Generic+0x168>
 8000c3e:	284b      	cmp	r0, #75	; 0x4b
 8000c40:	d100      	bne.n	8000c44 <PE_SubStateMachine_Generic+0x3c>
 8000c42:	e09f      	b.n	8000d84 <PE_SubStateMachine_Generic+0x17c>
 8000c44:	2864      	cmp	r0, #100	; 0x64
 8000c46:	d100      	bne.n	8000c4a <PE_SubStateMachine_Generic+0x42>
 8000c48:	e0fd      	b.n	8000e46 <PE_SubStateMachine_Generic+0x23e>
 8000c4a:	2867      	cmp	r0, #103	; 0x67
 8000c4c:	d100      	bne.n	8000c50 <PE_SubStateMachine_Generic+0x48>
 8000c4e:	e0b2      	b.n	8000db6 <PE_SubStateMachine_Generic+0x1ae>
 8000c50:	2868      	cmp	r0, #104	; 0x68
 8000c52:	d100      	bne.n	8000c56 <PE_SubStateMachine_Generic+0x4e>
 8000c54:	e0bf      	b.n	8000dd6 <PE_SubStateMachine_Generic+0x1ce>
 8000c56:	2874      	cmp	r0, #116	; 0x74
 8000c58:	d100      	bne.n	8000c5c <PE_SubStateMachine_Generic+0x54>
 8000c5a:	e119      	b.n	8000e90 <PE_SubStateMachine_Generic+0x288>
 8000c5c:	e11f      	b.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000c5e:	9500      	str	r5, [sp, #0]
 8000c60:	2319      	movs	r3, #25
 8000c62:	2208      	movs	r2, #8
 8000c64:	2100      	movs	r1, #0
 8000c66:	0020      	movs	r0, r4
 8000c68:	f000 f9a6 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d158      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000c70:	2007      	movs	r0, #7
 8000c72:	e0ab      	b.n	8000dcc <PE_SubStateMachine_Generic+0x1c4>
 8000c74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c76:	7800      	ldrb	r0, [r0, #0]
 8000c78:	2811      	cmp	r0, #17
 8000c7a:	d13c      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000c7c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000c7e:	0bc1      	lsrs	r1, r0, #15
 8000c80:	d11f      	bne.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c82:	0b01      	lsrs	r1, r0, #12
 8000c84:	2207      	movs	r2, #7
 8000c86:	4211      	tst	r1, r2
 8000c88:	d01b      	beq.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c8a:	06c0      	lsls	r0, r0, #27
 8000c8c:	0ec0      	lsrs	r0, r0, #27
 8000c8e:	2804      	cmp	r0, #4
 8000c90:	d117      	bne.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c92:	400a      	ands	r2, r1
 8000c94:	0093      	lsls	r3, r2, #2
 8000c96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000c98:	1c82      	adds	r2, r0, #2
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	7b20      	ldrb	r0, [r4, #12]
 8000c9e:	68a5      	ldr	r5, [r4, #8]
 8000ca0:	69ad      	ldr	r5, [r5, #24]
 8000ca2:	47a8      	blx	r5
 8000ca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ca6:	7800      	ldrb	r0, [r0, #0]
 8000ca8:	2814      	cmp	r0, #20
 8000caa:	d004      	beq.n	8000cb6 <PE_SubStateMachine_Generic+0xae>
 8000cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cae:	700f      	strb	r7, [r1, #0]
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f7ff fe1e 	bl	80008f2 <PE_Clear_RxEvent>
 8000cb6:	7366      	strb	r6, [r4, #13]
 8000cb8:	2500      	movs	r5, #0
 8000cba:	2107      	movs	r1, #7
 8000cbc:	7b20      	ldrb	r0, [r4, #12]
 8000cbe:	f7ff fcfb 	bl	80006b8 <USBPD_PE_Notification>
 8000cc2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000cc4:	21f0      	movs	r1, #240	; 0xf0
 8000cc6:	0209      	lsls	r1, r1, #8
 8000cc8:	4001      	ands	r1, r0
 8000cca:	d114      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000ccc:	06c0      	lsls	r0, r0, #27
 8000cce:	0ec0      	lsrs	r0, r0, #27
 8000cd0:	2804      	cmp	r0, #4
 8000cd2:	d001      	beq.n	8000cd8 <PE_SubStateMachine_Generic+0xd0>
 8000cd4:	2810      	cmp	r0, #16
 8000cd6:	d10e      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000cd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000cda:	7800      	ldrb	r0, [r0, #0]
 8000cdc:	2814      	cmp	r0, #20
 8000cde:	d004      	beq.n	8000cea <PE_SubStateMachine_Generic+0xe2>
 8000ce0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ce2:	7007      	strb	r7, [r0, #0]
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f7ff fe04 	bl	80008f2 <PE_Clear_RxEvent>
 8000cea:	7366      	strb	r6, [r4, #13]
 8000cec:	2500      	movs	r5, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	7b20      	ldrb	r0, [r4, #12]
 8000cf2:	f7ff fce1 	bl	80006b8 <USBPD_PE_Notification>
 8000cf6:	8b60      	ldrh	r0, [r4, #26]
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0209      	lsls	r1, r1, #8
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	d110      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000d00:	e0ca      	b.n	8000e98 <PE_SubStateMachine_Generic+0x290>
 8000d02:	2000      	movs	r0, #0
 8000d04:	9004      	str	r0, [sp, #16]
 8000d06:	ab04      	add	r3, sp, #16
 8000d08:	aa05      	add	r2, sp, #20
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	7b20      	ldrb	r0, [r4, #12]
 8000d0e:	68a7      	ldr	r7, [r4, #8]
 8000d10:	697f      	ldr	r7, [r7, #20]
 8000d12:	47b8      	blx	r7
 8000d14:	2104      	movs	r1, #4
 8000d16:	9804      	ldr	r0, [sp, #16]
 8000d18:	f000 f906 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d001      	beq.n	8000d24 <PE_SubStateMachine_Generic+0x11c>
 8000d20:	7366      	strb	r6, [r4, #13]
 8000d22:	e0be      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d24:	9002      	str	r0, [sp, #8]
 8000d26:	9601      	str	r6, [sp, #4]
 8000d28:	9804      	ldr	r0, [sp, #16]
 8000d2a:	0880      	lsrs	r0, r0, #2
 8000d2c:	9000      	str	r0, [sp, #0]
 8000d2e:	ab05      	add	r3, sp, #20
 8000d30:	2204      	movs	r2, #4
 8000d32:	2100      	movs	r1, #0
 8000d34:	0020      	movs	r0, r4
 8000d36:	f000 f96a 	bl	800100e <PE_Send_DataMessage>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d1f1      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000d3e:	210a      	movs	r1, #10
 8000d40:	e0a2      	b.n	8000e88 <PE_SubStateMachine_Generic+0x280>
 8000d42:	2012      	movs	r0, #18
 8000d44:	7620      	strb	r0, [r4, #24]
 8000d46:	2105      	movs	r1, #5
 8000d48:	7b20      	ldrb	r0, [r4, #12]
 8000d4a:	f000 fed3 	bl	8001af4 <USBDPD_PRL_BistCarrierEyeMode>
 8000d4e:	2028      	movs	r0, #40	; 0x28
 8000d50:	7360      	strb	r0, [r4, #13]
 8000d52:	487e      	ldr	r0, [pc, #504]	; (8000f4c <.text_49>)
 8000d54:	8360      	strh	r0, [r4, #26]
 8000d56:	253a      	movs	r5, #58	; 0x3a
 8000d58:	e0a3      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d5a:	8b60      	ldrh	r0, [r4, #26]
 8000d5c:	03a9      	lsls	r1, r5, #14
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d1fa      	bne.n	8000d58 <PE_SubStateMachine_Generic+0x150>
 8000d62:	2105      	movs	r1, #5
 8000d64:	7b20      	ldrb	r0, [r4, #12]
 8000d66:	f000 fecd 	bl	8001b04 <USBDPD_PRL_BistCarrierEyeModeExit>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	8360      	strh	r0, [r4, #26]
 8000d6e:	e093      	b.n	8000e98 <PE_SubStateMachine_Generic+0x290>
 8000d70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000d72:	7800      	ldrb	r0, [r0, #0]
 8000d74:	2814      	cmp	r0, #20
 8000d76:	d004      	beq.n	8000d82 <PE_SubStateMachine_Generic+0x17a>
 8000d78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000d7a:	7007      	strb	r7, [r0, #0]
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	f7ff fdb8 	bl	80008f2 <PE_Clear_RxEvent>
 8000d82:	e08e      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	aa04      	add	r2, sp, #16
 8000d88:	2114      	movs	r1, #20
 8000d8a:	7b20      	ldrb	r0, [r4, #12]
 8000d8c:	68a6      	ldr	r6, [r4, #8]
 8000d8e:	6976      	ldr	r6, [r6, #20]
 8000d90:	47b0      	blx	r6
 8000d92:	9803      	ldr	r0, [sp, #12]
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d100      	bne.n	8000d9a <PE_SubStateMachine_Generic+0x192>
 8000d98:	e081      	b.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	9002      	str	r0, [sp, #8]
 8000d9e:	2003      	movs	r0, #3
 8000da0:	9001      	str	r0, [sp, #4]
 8000da2:	9803      	ldr	r0, [sp, #12]
 8000da4:	0880      	lsrs	r0, r0, #2
 8000da6:	9000      	str	r0, [sp, #0]
 8000da8:	ab04      	add	r3, sp, #16
 8000daa:	220c      	movs	r2, #12
 8000dac:	2100      	movs	r1, #0
 8000dae:	0020      	movs	r0, r4
 8000db0:	f000 f92d 	bl	800100e <PE_Send_DataMessage>
 8000db4:	e075      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000db6:	9500      	str	r5, [sp, #0]
 8000db8:	2368      	movs	r3, #104	; 0x68
 8000dba:	2218      	movs	r2, #24
 8000dbc:	2029      	movs	r0, #41	; 0x29
 8000dbe:	5c21      	ldrb	r1, [r4, r0]
 8000dc0:	0020      	movs	r0, r4
 8000dc2:	f000 f8f9 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d16b      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000dca:	200f      	movs	r0, #15
 8000dcc:	7620      	strb	r0, [r4, #24]
 8000dce:	4860      	ldr	r0, [pc, #384]	; (8000f50 <.text_50>)
 8000dd0:	8360      	strh	r0, [r4, #26]
 8000dd2:	251b      	movs	r5, #27
 8000dd4:	e065      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000dd8:	7800      	ldrb	r0, [r0, #0]
 8000dda:	2814      	cmp	r0, #20
 8000ddc:	d022      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	5c20      	ldrb	r0, [r4, r0]
 8000de2:	2129      	movs	r1, #41	; 0x29
 8000de4:	5c61      	ldrb	r1, [r4, r1]
 8000de6:	4288      	cmp	r0, r1
 8000de8:	d11c      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dea:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000dec:	0bc1      	lsrs	r1, r0, #15
 8000dee:	d119      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000df0:	0441      	lsls	r1, r0, #17
 8000df2:	0f49      	lsrs	r1, r1, #29
 8000df4:	d016      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000df6:	06c0      	lsls	r0, r0, #27
 8000df8:	0ec0      	lsrs	r0, r0, #27
 8000dfa:	280c      	cmp	r0, #12
 8000dfc:	d112      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e02:	1c82      	adds	r2, r0, #2
 8000e04:	2114      	movs	r1, #20
 8000e06:	7b20      	ldrb	r0, [r4, #12]
 8000e08:	68a5      	ldr	r5, [r4, #8]
 8000e0a:	69ad      	ldr	r5, [r5, #24]
 8000e0c:	47a8      	blx	r5
 8000e0e:	7366      	strb	r6, [r4, #13]
 8000e10:	2500      	movs	r5, #0
 8000e12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e14:	7800      	ldrb	r0, [r0, #0]
 8000e16:	2814      	cmp	r0, #20
 8000e18:	d004      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e1c:	7007      	strb	r7, [r0, #0]
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f7ff fd67 	bl	80008f2 <PE_Clear_RxEvent>
 8000e24:	8b60      	ldrh	r0, [r4, #26]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0209      	lsls	r1, r1, #8
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d139      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e2e:	2011      	movs	r0, #17
 8000e30:	7360      	strb	r0, [r4, #13]
 8000e32:	e032      	b.n	8000e9a <PE_SubStateMachine_Generic+0x292>
 8000e34:	2000      	movs	r0, #0
 8000e36:	9000      	str	r0, [sp, #0]
 8000e38:	2303      	movs	r3, #3
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f000 f8ba 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000e44:	e02d      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e46:	ab03      	add	r3, sp, #12
 8000e48:	0022      	movs	r2, r4
 8000e4a:	3282      	adds	r2, #130	; 0x82
 8000e4c:	2113      	movs	r1, #19
 8000e4e:	7b20      	ldrb	r0, [r4, #12]
 8000e50:	68a6      	ldr	r6, [r4, #8]
 8000e52:	6976      	ldr	r6, [r6, #20]
 8000e54:	47b0      	blx	r6
 8000e56:	2118      	movs	r1, #24
 8000e58:	9803      	ldr	r0, [sp, #12]
 8000e5a:	f000 f865 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d11d      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000e62:	0020      	movs	r0, r4
 8000e64:	3080      	adds	r0, #128	; 0x80
 8000e66:	2100      	movs	r1, #0
 8000e68:	7041      	strb	r1, [r0, #1]
 8000e6a:	7001      	strb	r1, [r0, #0]
 8000e6c:	9102      	str	r1, [sp, #8]
 8000e6e:	2003      	movs	r0, #3
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	9803      	ldr	r0, [sp, #12]
 8000e74:	1d00      	adds	r0, r0, #4
 8000e76:	b280      	uxth	r0, r0
 8000e78:	9000      	str	r0, [sp, #0]
 8000e7a:	0023      	movs	r3, r4
 8000e7c:	337e      	adds	r3, #126	; 0x7e
 8000e7e:	220f      	movs	r2, #15
 8000e80:	0020      	movs	r0, r4
 8000e82:	f000 f95f 	bl	8001144 <PE_Send_ExtendedMessage>
 8000e86:	2161      	movs	r1, #97	; 0x61
 8000e88:	7b20      	ldrb	r0, [r4, #12]
 8000e8a:	f7ff fc15 	bl	80006b8 <USBPD_PE_Notification>
 8000e8e:	e008      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e90:	8b60      	ldrh	r0, [r4, #26]
 8000e92:	03a9      	lsls	r1, r5, #14
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d104      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e98:	7366      	strb	r6, [r4, #13]
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	e001      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	7360      	strb	r0, [r4, #13]
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	b00d      	add	sp, #52	; 0x34
 8000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ea8 <PE_UpdateTimer>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	0002      	movs	r2, r0
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0200      	lsls	r0, r0, #8
 8000eb0:	0454      	lsls	r4, r2, #17
 8000eb2:	0c64      	lsrs	r4, r4, #17
 8000eb4:	42a1      	cmp	r1, r4
 8000eb6:	da00      	bge.n	8000eba <PE_UpdateTimer+0x12>
 8000eb8:	1a50      	subs	r0, r2, r1
 8000eba:	b280      	uxth	r0, r0
 8000ebc:	bd10      	pop	{r4, pc}

08000ebe <PE_CallHardResetCallback>:
 8000ebe:	6883      	ldr	r3, [r0, #8]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <PE_CallHardResetCallback+0xa>
 8000ec6:	4770      	bx	lr
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	7b00      	ldrb	r0, [r0, #12]
 8000ecc:	4798      	blx	r3
 8000ece:	bd01      	pop	{r0, pc}

08000ed0 <PE_SetPowerNegotiation>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	6842      	ldr	r2, [r0, #4]
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	055c      	lsls	r4, r3, #21
 8000ed8:	0f64      	lsrs	r4, r4, #29
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	d00b      	beq.n	8000ef6 <PE_SetPowerNegotiation+0x26>
 8000ede:	4c1d      	ldr	r4, [pc, #116]	; (8000f54 <.text_51>)
 8000ee0:	401c      	ands	r4, r3
 8000ee2:	0209      	lsls	r1, r1, #8
 8000ee4:	23e0      	movs	r3, #224	; 0xe0
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	4323      	orrs	r3, r4
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	215a      	movs	r1, #90	; 0x5a
 8000ef0:	7b00      	ldrb	r0, [r0, #12]
 8000ef2:	f7ff fbe1 	bl	80006b8 <USBPD_PE_Notification>
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <PE_SetPowerNegociation>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	0005      	movs	r5, r0
 8000efc:	000c      	movs	r4, r1
 8000efe:	6868      	ldr	r0, [r5, #4]
 8000f00:	6800      	ldr	r0, [r0, #0]
 8000f02:	0540      	lsls	r0, r0, #21
 8000f04:	0f40      	lsrs	r0, r0, #29
 8000f06:	4284      	cmp	r4, r0
 8000f08:	d003      	beq.n	8000f12 <PE_SetPowerNegociation+0x1a>
 8000f0a:	215a      	movs	r1, #90	; 0x5a
 8000f0c:	7b28      	ldrb	r0, [r5, #12]
 8000f0e:	f7ff fbd3 	bl	80006b8 <USBPD_PE_Notification>
 8000f12:	6868      	ldr	r0, [r5, #4]
 8000f14:	6801      	ldr	r1, [r0, #0]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <.text_51>)
 8000f18:	400a      	ands	r2, r1
 8000f1a:	0221      	lsls	r1, r4, #8
 8000f1c:	23e0      	movs	r3, #224	; 0xe0
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	400b      	ands	r3, r1
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6003      	str	r3, [r0, #0]
 8000f26:	bd31      	pop	{r0, r4, r5, pc}

08000f28 <PE_CheckDataSizeFromGetDataInfo>:
 8000f28:	b51c      	push	{r2, r3, r4, lr}
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	428a      	cmp	r2, r1
 8000f30:	d20a      	bcs.n	8000f48 <PE_CheckDataSizeFromGetDataInfo+0x20>
 8000f32:	2018      	movs	r0, #24
 8000f34:	9000      	str	r0, [sp, #0]
 8000f36:	bf00      	nop
 8000f38:	a308      	add	r3, pc, #32	; (adr r3, 8000f5c <.text_53>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2006      	movs	r0, #6
 8000f40:	4c05      	ldr	r4, [pc, #20]	; (8000f58 <.text_52>)
 8000f42:	6824      	ldr	r4, [r4, #0]
 8000f44:	47a0      	blx	r4
 8000f46:	2002      	movs	r0, #2
 8000f48:	bd16      	pop	{r1, r2, r4, pc}
	...

08000f4c <.text_49>:
 8000f4c:	0000803a 	.word	0x0000803a

08000f50 <.text_50>:
 8000f50:	0000801b 	.word	0x0000801b

08000f54 <.text_51>:
 8000f54:	fffff8ff 	.word	0xfffff8ff

08000f58 <.text_52>:
 8000f58:	20000000 	.word	0x20000000

08000f5c <.text_53>:
 8000f5c:	61746144 	.word	0x61746144
 8000f60:	7a695320 	.word	0x7a695320
 8000f64:	73692065 	.word	0x73692065
 8000f68:	746f6e20 	.word	0x746f6e20
 8000f6c:	726f6320 	.word	0x726f6320
 8000f70:	74636572 	.word	0x74636572
 8000f74:	00          	.byte	0x00
 8000f75:	00          	.byte	0x00
	...

08000f78 <USBPD_PE_SetTrace>:
 8000f78:	0001      	movs	r1, r0
 8000f7a:	d100      	bne.n	8000f7e <USBPD_PE_SetTrace+0x6>
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <.text_5>)
 8000f7e:	4906      	ldr	r1, [pc, #24]	; (8000f98 <.text_6>)
 8000f80:	6008      	str	r0, [r1, #0]
 8000f82:	4770      	bx	lr

08000f84 <USBPD_PE_CheckLIB>:
 8000f84:	0001      	movs	r1, r0
 8000f86:	2000      	movs	r0, #0
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <.text_7>)
 8000f8a:	4291      	cmp	r1, r2
 8000f8c:	d100      	bne.n	8000f90 <USBPD_PE_CheckLIB+0xc>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4770      	bx	lr
	...

08000f94 <.text_5>:
 8000f94:	08000fb7 	.word	0x08000fb7

08000f98 <.text_6>:
 8000f98:	20000000 	.word	0x20000000

08000f9c <.text_7>:
 8000f9c:	30410004 	.word	0x30410004

08000fa0 <USBPD_PE_GetMemoryConsumption>:
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	f000 fb25 	bl	80015f0 <USBPD_PRL_GetMemoryConsumption>
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	f7ff faf6 	bl	8000598 <USBPD_CAD_GetMemoryConsumption>
 8000fac:	1820      	adds	r0, r4, r0
 8000fae:	21ff      	movs	r1, #255	; 0xff
 8000fb0:	00c9      	lsls	r1, r1, #3
 8000fb2:	1840      	adds	r0, r0, r1
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <PE_Trace_Empty>:
 8000fb6:	4770      	bx	lr

08000fb8 <PE_Send_CtrlMessage>:
 8000fb8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000fba:	2501      	movs	r5, #1
 8000fbc:	0004      	movs	r4, r0
 8000fbe:	000f      	movs	r7, r1
 8000fc0:	0016      	movs	r6, r2
 8000fc2:	6860      	ldr	r0, [r4, #4]
 8000fc4:	6800      	ldr	r0, [r0, #0]
 8000fc6:	0b00      	lsrs	r0, r0, #12
 8000fc8:	4028      	ands	r0, r5
 8000fca:	d014      	beq.n	8000ff6 <PE_Send_CtrlMessage+0x3e>
 8000fcc:	a808      	add	r0, sp, #32
 8000fce:	7800      	ldrb	r0, [r0, #0]
 8000fd0:	9001      	str	r0, [sp, #4]
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	337e      	adds	r3, #126	; 0x7e
 8000fda:	0032      	movs	r2, r6
 8000fdc:	0039      	movs	r1, r7
 8000fde:	7b20      	ldrb	r0, [r4, #12]
 8000fe0:	f000 fb52 	bl	8001688 <USBPD_PRL_SendMessage>
 8000fe4:	2803      	cmp	r0, #3
 8000fe6:	d0ec      	beq.n	8000fc2 <PE_Send_CtrlMessage+0xa>
 8000fe8:	0039      	movs	r1, r7
 8000fea:	2810      	cmp	r0, #16
 8000fec:	d00e      	beq.n	800100c <PE_Send_CtrlMessage+0x54>
 8000fee:	2e0d      	cmp	r6, #13
 8000ff0:	d104      	bne.n	8000ffc <PE_Send_CtrlMessage+0x44>
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	e003      	b.n	8000ffe <PE_Send_CtrlMessage+0x46>
 8000ff6:	7360      	strb	r0, [r4, #13]
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	466b      	mov	r3, sp
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	0003      	movs	r3, r0
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fa7d 	bl	8001506 <PE_CheckSendMessageStatus>
 800100c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800100e <PE_Send_DataMessage>:
 800100e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	0004      	movs	r4, r0
 8001014:	2000      	movs	r0, #0
 8001016:	2680      	movs	r6, #128	; 0x80
 8001018:	e00c      	b.n	8001034 <PE_Send_DataMessage+0x26>
 800101a:	2100      	movs	r1, #0
 800101c:	0082      	lsls	r2, r0, #2
 800101e:	18a2      	adds	r2, r4, r2
 8001020:	1855      	adds	r5, r2, r1
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	00cf      	lsls	r7, r1, #3
 8001026:	40fa      	lsrs	r2, r7
 8001028:	55aa      	strb	r2, [r5, r6]
 800102a:	1c49      	adds	r1, r1, #1
 800102c:	2904      	cmp	r1, #4
 800102e:	d3f5      	bcc.n	800101c <PE_Send_DataMessage+0xe>
 8001030:	1d1b      	adds	r3, r3, #4
 8001032:	1c40      	adds	r0, r0, #1
 8001034:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001036:	4288      	cmp	r0, r1
 8001038:	d3ef      	bcc.n	800101a <PE_Send_DataMessage+0xc>
 800103a:	6860      	ldr	r0, [r4, #4]
 800103c:	6800      	ldr	r0, [r0, #0]
 800103e:	04c1      	lsls	r1, r0, #19
 8001040:	0fc9      	lsrs	r1, r1, #31
 8001042:	d01f      	beq.n	8001084 <PE_Send_DataMessage+0x76>
 8001044:	a80c      	add	r0, sp, #48	; 0x30
 8001046:	7800      	ldrb	r0, [r0, #0]
 8001048:	9001      	str	r0, [sp, #4]
 800104a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800104c:	0080      	lsls	r0, r0, #2
 800104e:	1c80      	adds	r0, r0, #2
 8001050:	b280      	uxth	r0, r0
 8001052:	9000      	str	r0, [sp, #0]
 8001054:	0023      	movs	r3, r4
 8001056:	337e      	adds	r3, #126	; 0x7e
 8001058:	4668      	mov	r0, sp
 800105a:	7c02      	ldrb	r2, [r0, #16]
 800105c:	7b01      	ldrb	r1, [r0, #12]
 800105e:	7b20      	ldrb	r0, [r4, #12]
 8001060:	f000 fb12 	bl	8001688 <USBPD_PRL_SendMessage>
 8001064:	2803      	cmp	r0, #3
 8001066:	d0e8      	beq.n	800103a <PE_Send_DataMessage+0x2c>
 8001068:	4669      	mov	r1, sp
 800106a:	7b09      	ldrb	r1, [r1, #12]
 800106c:	2810      	cmp	r0, #16
 800106e:	d007      	beq.n	8001080 <PE_Send_DataMessage+0x72>
 8001070:	aa0b      	add	r2, sp, #44	; 0x2c
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	0003      	movs	r3, r0
 8001078:	2200      	movs	r2, #0
 800107a:	0020      	movs	r0, r4
 800107c:	f000 fa43 	bl	8001506 <PE_CheckSendMessageStatus>
 8001080:	b005      	add	sp, #20
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	2010      	movs	r0, #16
 8001086:	e7fb      	b.n	8001080 <PE_Send_DataMessage+0x72>

08001088 <PE_Check_ExtendedMessage>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	0004      	movs	r4, r0
 800108c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800108e:	7881      	ldrb	r1, [r0, #2]
 8001090:	78c0      	ldrb	r0, [r0, #3]
 8001092:	0200      	lsls	r0, r0, #8
 8001094:	180a      	adds	r2, r1, r0
 8001096:	0021      	movs	r1, r4
 8001098:	3174      	adds	r1, #116	; 0x74
 800109a:	800a      	strh	r2, [r1, #0]
 800109c:	202c      	movs	r0, #44	; 0x2c
 800109e:	5c20      	ldrb	r0, [r4, r0]
 80010a0:	06c0      	lsls	r0, r0, #27
 80010a2:	0ec0      	lsrs	r0, r0, #27
 80010a4:	7088      	strb	r0, [r1, #2]
 80010a6:	2501      	movs	r5, #1
 80010a8:	0410      	lsls	r0, r2, #16
 80010aa:	0e80      	lsrs	r0, r0, #26
 80010ac:	2301      	movs	r3, #1
 80010ae:	4003      	ands	r3, r0
 80010b0:	0410      	lsls	r0, r2, #16
 80010b2:	0ec0      	lsrs	r0, r0, #27
 80010b4:	0700      	lsls	r0, r0, #28
 80010b6:	d003      	beq.n	80010c0 <PE_Check_ExtendedMessage+0x38>
 80010b8:	0018      	movs	r0, r3
 80010ba:	d001      	beq.n	80010c0 <PE_Check_ExtendedMessage+0x38>
 80010bc:	2034      	movs	r0, #52	; 0x34
 80010be:	e028      	b.n	8001112 <PE_Check_ExtendedMessage+0x8a>
 80010c0:	05d6      	lsls	r6, r2, #23
 80010c2:	0df6      	lsrs	r6, r6, #23
 80010c4:	2000      	movs	r0, #0
 80010c6:	0417      	lsls	r7, r2, #16
 80010c8:	0fff      	lsrs	r7, r7, #31
 80010ca:	d10e      	bne.n	80010ea <PE_Check_ExtendedMessage+0x62>
 80010cc:	22a9      	movs	r2, #169	; 0xa9
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	18a2      	adds	r2, r4, r2
 80010d2:	8016      	strh	r6, [r2, #0]
 80010d4:	279c      	movs	r7, #156	; 0x9c
 80010d6:	8813      	ldrh	r3, [r2, #0]
 80010d8:	4298      	cmp	r0, r3
 80010da:	d21c      	bcs.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 80010dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010de:	181b      	adds	r3, r3, r0
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	1826      	adds	r6, r4, r0
 80010e4:	55f3      	strb	r3, [r6, r7]
 80010e6:	1c40      	adds	r0, r0, #1
 80010e8:	e7f5      	b.n	80010d6 <PE_Check_ExtendedMessage+0x4e>
 80010ea:	27f8      	movs	r7, #248	; 0xf8
 80010ec:	01ff      	lsls	r7, r7, #7
 80010ee:	4017      	ands	r7, r2
 80010f0:	d106      	bne.n	8001100 <PE_Check_ExtendedMessage+0x78>
 80010f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80010f4:	0452      	lsls	r2, r2, #17
 80010f6:	0f52      	lsrs	r2, r2, #29
 80010f8:	2a07      	cmp	r2, #7
 80010fa:	d30c      	bcc.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 80010fc:	2e1b      	cmp	r6, #27
 80010fe:	d30a      	bcc.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 8001104:	22a9      	movs	r2, #169	; 0xa9
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	5aa2      	ldrh	r2, [r4, r2]
 800110a:	42b2      	cmp	r2, r6
 800110c:	d203      	bcs.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 800110e:	8360      	strh	r0, [r4, #26]
 8001110:	2037      	movs	r0, #55	; 0x37
 8001112:	7360      	strb	r0, [r4, #13]
 8001114:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001116:	7e20      	ldrb	r0, [r4, #24]
 8001118:	2800      	cmp	r0, #0
 800111a:	d011      	beq.n	8001140 <PE_Check_ExtendedMessage+0xb8>
 800111c:	7888      	ldrb	r0, [r1, #2]
 800111e:	280f      	cmp	r0, #15
 8001120:	d10e      	bne.n	8001140 <PE_Check_ExtendedMessage+0xb8>
 8001122:	2318      	movs	r3, #24
 8001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001126:	1d02      	adds	r2, r0, #4
 8001128:	2113      	movs	r1, #19
 800112a:	7b20      	ldrb	r0, [r4, #12]
 800112c:	68a6      	ldr	r6, [r4, #8]
 800112e:	69b6      	ldr	r6, [r6, #24]
 8001130:	47b0      	blx	r6
 8001132:	2003      	movs	r0, #3
 8001134:	7360      	strb	r0, [r4, #13]
 8001136:	2162      	movs	r1, #98	; 0x62
 8001138:	7b20      	ldrb	r0, [r4, #12]
 800113a:	f7ff fabd 	bl	80006b8 <USBPD_PE_Notification>
 800113e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001140:	7365      	strb	r5, [r4, #13]
 8001142:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001144 <PE_Send_ExtendedMessage>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800114a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800114c:	0004      	movs	r4, r0
 800114e:	000d      	movs	r5, r1
 8001150:	4668      	mov	r0, sp
 8001152:	7202      	strb	r2, [r0, #8]
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	6860      	ldr	r0, [r4, #4]
 8001158:	6800      	ldr	r0, [r0, #0]
 800115a:	04c1      	lsls	r1, r0, #19
 800115c:	0fc9      	lsrs	r1, r1, #31
 800115e:	d019      	beq.n	8001194 <PE_Send_ExtendedMessage+0x50>
 8001160:	9601      	str	r6, [sp, #4]
 8001162:	9700      	str	r7, [sp, #0]
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	4668      	mov	r0, sp
 8001168:	7a00      	ldrb	r0, [r0, #8]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	4302      	orrs	r2, r0
 800116e:	0029      	movs	r1, r5
 8001170:	7b20      	ldrb	r0, [r4, #12]
 8001172:	f000 fa89 	bl	8001688 <USBPD_PRL_SendMessage>
 8001176:	2803      	cmp	r0, #3
 8001178:	d0ed      	beq.n	8001156 <PE_Send_ExtendedMessage+0x12>
 800117a:	0029      	movs	r1, r5
 800117c:	2810      	cmp	r0, #16
 800117e:	d007      	beq.n	8001190 <PE_Send_ExtendedMessage+0x4c>
 8001180:	aa0b      	add	r2, sp, #44	; 0x2c
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	0003      	movs	r3, r0
 8001188:	2200      	movs	r2, #0
 800118a:	0020      	movs	r0, r4
 800118c:	f000 f9bb 	bl	8001506 <PE_CheckSendMessageStatus>
 8001190:	b005      	add	sp, #20
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	2011      	movs	r0, #17
 8001196:	7360      	strb	r0, [r4, #13]
 8001198:	2010      	movs	r0, #16
 800119a:	e7f9      	b.n	8001190 <PE_Send_ExtendedMessage+0x4c>

0800119c <PE_SubStateMachine_ExtendedMessages>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	0004      	movs	r4, r0
 80011a2:	2002      	movs	r0, #2
 80011a4:	2702      	movs	r7, #2
 80011a6:	21a9      	movs	r1, #169	; 0xa9
 80011a8:	0089      	lsls	r1, r1, #2
 80011aa:	1866      	adds	r6, r4, r1
 80011ac:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <.text_7>)
 80011ae:	2500      	movs	r5, #0
 80011b0:	2103      	movs	r1, #3
 80011b2:	7b63      	ldrb	r3, [r4, #13]
 80011b4:	2b31      	cmp	r3, #49	; 0x31
 80011b6:	d00f      	beq.n	80011d8 <PE_SubStateMachine_ExtendedMessages+0x3c>
 80011b8:	2b33      	cmp	r3, #51	; 0x33
 80011ba:	d004      	beq.n	80011c6 <PE_SubStateMachine_ExtendedMessages+0x2a>
 80011bc:	2b34      	cmp	r3, #52	; 0x34
 80011be:	d04b      	beq.n	8001258 <PE_SubStateMachine_ExtendedMessages+0xbc>
 80011c0:	2b35      	cmp	r3, #53	; 0x35
 80011c2:	d078      	beq.n	80012b6 <PE_SubStateMachine_ExtendedMessages+0x11a>
 80011c4:	2b36      	cmp	r3, #54	; 0x36
 80011c6:	d100      	bne.n	80011ca <PE_SubStateMachine_ExtendedMessages+0x2e>
 80011c8:	e089      	b.n	80012de <PE_SubStateMachine_ExtendedMessages+0x142>
 80011ca:	2b37      	cmp	r3, #55	; 0x37
 80011cc:	d100      	bne.n	80011d0 <PE_SubStateMachine_ExtendedMessages+0x34>
 80011ce:	e08a      	b.n	80012e6 <PE_SubStateMachine_ExtendedMessages+0x14a>
 80011d0:	2b38      	cmp	r3, #56	; 0x38
 80011d2:	d100      	bne.n	80011d6 <PE_SubStateMachine_ExtendedMessages+0x3a>
 80011d4:	e0b9      	b.n	800134a <PE_SubStateMachine_ExtendedMessages+0x1ae>
 80011d6:	e0bb      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80011d8:	466b      	mov	r3, sp
 80011da:	731d      	strb	r5, [r3, #12]
 80011dc:	8035      	strh	r5, [r6, #0]
 80011de:	0023      	movs	r3, r4
 80011e0:	3374      	adds	r3, #116	; 0x74
 80011e2:	735d      	strb	r5, [r3, #13]
 80011e4:	0023      	movs	r3, r4
 80011e6:	3374      	adds	r3, #116	; 0x74
 80011e8:	731d      	strb	r5, [r3, #12]
 80011ea:	8872      	ldrh	r2, [r6, #2]
 80011ec:	2a1a      	cmp	r2, #26
 80011ee:	d912      	bls.n	8001216 <PE_SubStateMachine_ExtendedMessages+0x7a>
 80011f0:	22d0      	movs	r2, #208	; 0xd0
 80011f2:	0052      	lsls	r2, r2, #1
 80011f4:	18a2      	adds	r2, r4, r2
 80011f6:	5d52      	ldrb	r2, [r2, r5]
 80011f8:	0023      	movs	r3, r4
 80011fa:	3382      	adds	r3, #130	; 0x82
 80011fc:	555a      	strb	r2, [r3, r5]
 80011fe:	1c6d      	adds	r5, r5, #1
 8001200:	2d1a      	cmp	r5, #26
 8001202:	d20b      	bcs.n	800121c <PE_SubStateMachine_ExtendedMessages+0x80>
 8001204:	e7f4      	b.n	80011f0 <PE_SubStateMachine_ExtendedMessages+0x54>
 8001206:	22d0      	movs	r2, #208	; 0xd0
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	18a2      	adds	r2, r4, r2
 800120c:	5d52      	ldrb	r2, [r2, r5]
 800120e:	0023      	movs	r3, r4
 8001210:	3382      	adds	r3, #130	; 0x82
 8001212:	555a      	strb	r2, [r3, r5]
 8001214:	1c6d      	adds	r5, r5, #1
 8001216:	8872      	ldrh	r2, [r6, #2]
 8001218:	4295      	cmp	r5, r2
 800121a:	d3f4      	bcc.n	8001206 <PE_SubStateMachine_ExtendedMessages+0x6a>
 800121c:	6922      	ldr	r2, [r4, #16]
 800121e:	0693      	lsls	r3, r2, #26
 8001220:	0fdb      	lsrs	r3, r3, #31
 8001222:	d002      	beq.n	800122a <PE_SubStateMachine_ExtendedMessages+0x8e>
 8001224:	4669      	mov	r1, sp
 8001226:	7308      	strb	r0, [r1, #12]
 8001228:	2133      	movs	r1, #51	; 0x33
 800122a:	0025      	movs	r5, r4
 800122c:	3574      	adds	r5, #116	; 0x74
 800122e:	4668      	mov	r0, sp
 8001230:	7b00      	ldrb	r0, [r0, #12]
 8001232:	9002      	str	r0, [sp, #8]
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	8870      	ldrh	r0, [r6, #2]
 8001238:	1d00      	adds	r0, r0, #4
 800123a:	b280      	uxth	r0, r0
 800123c:	9000      	str	r0, [sp, #0]
 800123e:	0023      	movs	r3, r4
 8001240:	337e      	adds	r3, #126	; 0x7e
 8001242:	78ea      	ldrb	r2, [r5, #3]
 8001244:	202b      	movs	r0, #43	; 0x2b
 8001246:	5c21      	ldrb	r1, [r4, r0]
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff ff7b 	bl	8001144 <PE_Send_ExtendedMessage>
 800124e:	2800      	cmp	r0, #0
 8001250:	d101      	bne.n	8001256 <PE_SubStateMachine_ExtendedMessages+0xba>
 8001252:	7968      	ldrb	r0, [r5, #5]
 8001254:	7620      	strb	r0, [r4, #24]
 8001256:	e07b      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001258:	2074      	movs	r0, #116	; 0x74
 800125a:	5a20      	ldrh	r0, [r4, r0]
 800125c:	0440      	lsls	r0, r0, #17
 800125e:	0f03      	lsrs	r3, r0, #28
 8001260:	201a      	movs	r0, #26
 8001262:	4358      	muls	r0, r3
 8001264:	8872      	ldrh	r2, [r6, #2]
 8001266:	4290      	cmp	r0, r2
 8001268:	da01      	bge.n	800126e <PE_SubStateMachine_ExtendedMessages+0xd2>
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d301      	bcc.n	8001272 <PE_SubStateMachine_ExtendedMessages+0xd6>
 800126e:	7361      	strb	r1, [r4, #13]
 8001270:	e01f      	b.n	80012b2 <PE_SubStateMachine_ExtendedMessages+0x116>
 8001272:	1a11      	subs	r1, r2, r0
 8001274:	291a      	cmp	r1, #26
 8001276:	d202      	bcs.n	800127e <PE_SubStateMachine_ExtendedMessages+0xe2>
 8001278:	1a12      	subs	r2, r2, r0
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	e000      	b.n	8001280 <PE_SubStateMachine_ExtendedMessages+0xe4>
 800127e:	221a      	movs	r2, #26
 8001280:	2100      	movs	r1, #0
 8001282:	e008      	b.n	8001296 <PE_SubStateMachine_ExtendedMessages+0xfa>
 8001284:	23d0      	movs	r3, #208	; 0xd0
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	18e3      	adds	r3, r4, r3
 800128a:	1847      	adds	r7, r0, r1
 800128c:	5ddb      	ldrb	r3, [r3, r7]
 800128e:	0027      	movs	r7, r4
 8001290:	3782      	adds	r7, #130	; 0x82
 8001292:	547b      	strb	r3, [r7, r1]
 8001294:	1c49      	adds	r1, r1, #1
 8001296:	4291      	cmp	r1, r2
 8001298:	d3f4      	bcc.n	8001284 <PE_SubStateMachine_ExtendedMessages+0xe8>
 800129a:	0023      	movs	r3, r4
 800129c:	337e      	adds	r3, #126	; 0x7e
 800129e:	8872      	ldrh	r2, [r6, #2]
 80012a0:	2074      	movs	r0, #116	; 0x74
 80012a2:	5a20      	ldrh	r0, [r4, r0]
 80012a4:	0440      	lsls	r0, r0, #17
 80012a6:	0f01      	lsrs	r1, r0, #28
 80012a8:	7b20      	ldrb	r0, [r4, #12]
 80012aa:	f000 fe5f 	bl	8001f6c <USBPD_PRL_PrepareExtendedTxChunkSending>
 80012ae:	2035      	movs	r0, #53	; 0x35
 80012b0:	7360      	strb	r0, [r4, #13]
 80012b2:	2700      	movs	r7, #0
 80012b4:	e04c      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80012b6:	6920      	ldr	r0, [r4, #16]
 80012b8:	0682      	lsls	r2, r0, #26
 80012ba:	0fd2      	lsrs	r2, r2, #31
 80012bc:	d000      	beq.n	80012c0 <PE_SubStateMachine_ExtendedMessages+0x124>
 80012be:	2136      	movs	r1, #54	; 0x36
 80012c0:	9502      	str	r5, [sp, #8]
 80012c2:	9101      	str	r1, [sp, #4]
 80012c4:	8870      	ldrh	r0, [r6, #2]
 80012c6:	9000      	str	r0, [sp, #0]
 80012c8:	0023      	movs	r3, r4
 80012ca:	337e      	adds	r3, #126	; 0x7e
 80012cc:	0020      	movs	r0, r4
 80012ce:	3074      	adds	r0, #116	; 0x74
 80012d0:	78c2      	ldrb	r2, [r0, #3]
 80012d2:	2028      	movs	r0, #40	; 0x28
 80012d4:	5c21      	ldrb	r1, [r4, r0]
 80012d6:	0020      	movs	r0, r4
 80012d8:	f7ff ff34 	bl	8001144 <PE_Send_ExtendedMessage>
 80012dc:	e037      	b.n	800134e <PE_SubStateMachine_ExtendedMessages+0x1b2>
 80012de:	8362      	strh	r2, [r4, #26]
 80012e0:	271b      	movs	r7, #27
 80012e2:	2039      	movs	r0, #57	; 0x39
 80012e4:	e004      	b.n	80012f0 <PE_SubStateMachine_ExtendedMessages+0x154>
 80012e6:	8b60      	ldrh	r0, [r4, #26]
 80012e8:	03b9      	lsls	r1, r7, #14
 80012ea:	4288      	cmp	r0, r1
 80012ec:	d102      	bne.n	80012f4 <PE_SubStateMachine_ExtendedMessages+0x158>
 80012ee:	200f      	movs	r0, #15
 80012f0:	7360      	strb	r0, [r4, #13]
 80012f2:	e02d      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80012f4:	8362      	strh	r2, [r4, #26]
 80012f6:	271b      	movs	r7, #27
 80012f8:	0021      	movs	r1, r4
 80012fa:	317e      	adds	r1, #126	; 0x7e
 80012fc:	7b20      	ldrb	r0, [r4, #12]
 80012fe:	f000 fe5c 	bl	8001fba <USBPD_PRL_PrepareChunkRequest>
 8001302:	6860      	ldr	r0, [r4, #4]
 8001304:	6800      	ldr	r0, [r0, #0]
 8001306:	04c1      	lsls	r1, r0, #19
 8001308:	0fc9      	lsrs	r1, r1, #31
 800130a:	d012      	beq.n	8001332 <PE_SubStateMachine_ExtendedMessages+0x196>
 800130c:	9501      	str	r5, [sp, #4]
 800130e:	2006      	movs	r0, #6
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	0023      	movs	r3, r4
 8001314:	337e      	adds	r3, #126	; 0x7e
 8001316:	0020      	movs	r0, r4
 8001318:	3074      	adds	r0, #116	; 0x74
 800131a:	7880      	ldrb	r0, [r0, #2]
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	4302      	orrs	r2, r0
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	5c21      	ldrb	r1, [r4, r0]
 8001324:	7b20      	ldrb	r0, [r4, #12]
 8001326:	f000 f9af 	bl	8001688 <USBPD_PRL_SendMessage>
 800132a:	0003      	movs	r3, r0
 800132c:	2803      	cmp	r0, #3
 800132e:	d0e8      	beq.n	8001302 <PE_SubStateMachine_ExtendedMessages+0x166>
 8001330:	e002      	b.n	8001338 <PE_SubStateMachine_ExtendedMessages+0x19c>
 8001332:	2011      	movs	r0, #17
 8001334:	7360      	strb	r0, [r4, #13]
 8001336:	2310      	movs	r3, #16
 8001338:	0020      	movs	r0, r4
 800133a:	2139      	movs	r1, #57	; 0x39
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	2128      	movs	r1, #40	; 0x28
 8001342:	5c41      	ldrb	r1, [r0, r1]
 8001344:	f000 f8df 	bl	8001506 <PE_CheckSendMessageStatus>
 8001348:	e002      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800134a:	7361      	strb	r1, [r4, #13]
 800134c:	2700      	movs	r7, #0
 800134e:	8035      	strh	r5, [r6, #0]
 8001350:	0038      	movs	r0, r7
 8001352:	b005      	add	sp, #20
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001358 <.text_7>:
 8001358:	0000801b 	.word	0x0000801b

0800135c <PE_ManageRXEvent>:
 800135c:	b580      	push	{r7, lr}
 800135e:	2128      	movs	r1, #40	; 0x28
 8001360:	5c41      	ldrb	r1, [r0, r1]
 8001362:	2229      	movs	r2, #41	; 0x29
 8001364:	5481      	strb	r1, [r0, r2]
 8001366:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001368:	0bca      	lsrs	r2, r1, #15
 800136a:	d002      	beq.n	8001372 <PE_ManageRXEvent+0x16>
 800136c:	f7ff fe8c 	bl	8001088 <PE_Check_ExtendedMessage>
 8001370:	bd01      	pop	{r0, pc}
 8001372:	22f0      	movs	r2, #240	; 0xf0
 8001374:	0212      	lsls	r2, r2, #8
 8001376:	400a      	ands	r2, r1
 8001378:	d102      	bne.n	8001380 <PE_ManageRXEvent+0x24>
 800137a:	f000 f805 	bl	8001388 <PE_Check_ControlMessage>
 800137e:	bd01      	pop	{r0, pc}
 8001380:	f000 f862 	bl	8001448 <PE_Check_DataMessage>
 8001384:	bd01      	pop	{r0, pc}
	...

08001388 <PE_Check_ControlMessage>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	0004      	movs	r4, r0
 800138c:	2001      	movs	r0, #1
 800138e:	212a      	movs	r1, #42	; 0x2a
 8001390:	2203      	movs	r2, #3
 8001392:	232c      	movs	r3, #44	; 0x2c
 8001394:	5ce3      	ldrb	r3, [r4, r3]
 8001396:	06db      	lsls	r3, r3, #27
 8001398:	0edb      	lsrs	r3, r3, #27
 800139a:	1e5b      	subs	r3, r3, #1
 800139c:	2b17      	cmp	r3, #23
 800139e:	d84a      	bhi.n	8001436 <PE_Check_ControlMessage+0xae>
 80013a0:	a501      	add	r5, pc, #4	; (adr r5, 80013a8 <PE_Check_ControlMessage+0x20>)
 80013a2:	5ced      	ldrb	r5, [r5, r3]
 80013a4:	44af      	add	pc, r5
 80013a6:	bf00      	nop
 80013a8:	8a8a189e 	.word	0x8a8a189e
 80013ac:	543a8a36 	.word	0x543a8a36
 80013b0:	8a8e8e8e 	.word	0x8a8e8e8e
 80013b4:	808e8e28 	.word	0x808e8e28
 80013b8:	8e8e8e8e 	.word	0x8e8e8e8e
 80013bc:	788e6c8e 	.word	0x788e6c8e
 80013c0:	2002      	movs	r0, #2
 80013c2:	7620      	strb	r0, [r4, #24]
 80013c4:	212b      	movs	r1, #43	; 0x2b
 80013c6:	7b20      	ldrb	r0, [r4, #12]
 80013c8:	f7ff f976 	bl	80006b8 <USBPD_PE_Notification>
 80013cc:	2098      	movs	r0, #152	; 0x98
 80013ce:	e037      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013d0:	7622      	strb	r2, [r4, #24]
 80013d2:	2132      	movs	r1, #50	; 0x32
 80013d4:	7b20      	ldrb	r0, [r4, #12]
 80013d6:	f7ff f96f 	bl	80006b8 <USBPD_PE_Notification>
 80013da:	2010      	movs	r0, #16
 80013dc:	e030      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013de:	2133      	movs	r1, #51	; 0x33
 80013e0:	e023      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 80013e2:	2306      	movs	r3, #6
 80013e4:	7623      	strb	r3, [r4, #24]
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	4003      	ands	r3, r0
 80013ee:	d022      	beq.n	8001436 <PE_Check_ControlMessage+0xae>
 80013f0:	210c      	movs	r1, #12
 80013f2:	7b20      	ldrb	r0, [r4, #12]
 80013f4:	f7ff f960 	bl	80006b8 <USBPD_PE_Notification>
 80013f8:	204c      	movs	r0, #76	; 0x4c
 80013fa:	e021      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2507      	movs	r5, #7
 8001402:	0a1e      	lsrs	r6, r3, #8
 8001404:	402e      	ands	r6, r5
 8001406:	2e03      	cmp	r6, #3
 8001408:	d117      	bne.n	800143a <PE_Check_ControlMessage+0xb2>
 800140a:	7625      	strb	r5, [r4, #24]
 800140c:	201d      	movs	r0, #29
 800140e:	7360      	strb	r0, [r4, #13]
 8001410:	2106      	movs	r1, #6
 8001412:	e00a      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 8001414:	205f      	movs	r0, #95	; 0x5f
 8001416:	7620      	strb	r0, [r4, #24]
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	7360      	strb	r0, [r4, #13]
 800141c:	2160      	movs	r1, #96	; 0x60
 800141e:	e004      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 8001420:	200f      	movs	r0, #15
 8001422:	7620      	strb	r0, [r4, #24]
 8001424:	204b      	movs	r0, #75	; 0x4b
 8001426:	e00b      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 8001428:	2159      	movs	r1, #89	; 0x59
 800142a:	7b20      	ldrb	r0, [r4, #12]
 800142c:	f7ff f944 	bl	80006b8 <USBPD_PE_Notification>
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	2011      	movs	r0, #17
 8001434:	e004      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	401a      	ands	r2, r3
 800143c:	2a02      	cmp	r2, #2
 800143e:	d101      	bne.n	8001444 <PE_Check_ControlMessage+0xbc>
 8001440:	7360      	strb	r0, [r4, #13]
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	7361      	strb	r1, [r4, #13]
 8001446:	bd70      	pop	{r4, r5, r6, pc}

08001448 <PE_Check_DataMessage>:
 8001448:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800144a:	0004      	movs	r4, r0
 800144c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800144e:	2607      	movs	r6, #7
 8001450:	2503      	movs	r5, #3
 8001452:	2001      	movs	r0, #1
 8001454:	06ca      	lsls	r2, r1, #27
 8001456:	0ed2      	lsrs	r2, r2, #27
 8001458:	2a01      	cmp	r2, #1
 800145a:	d006      	beq.n	800146a <PE_Check_DataMessage+0x22>
 800145c:	2a03      	cmp	r2, #3
 800145e:	d017      	beq.n	8001490 <PE_Check_DataMessage+0x48>
 8001460:	2a07      	cmp	r2, #7
 8001462:	d04e      	beq.n	8001502 <PE_Check_DataMessage+0xba>
 8001464:	2a0f      	cmp	r2, #15
 8001466:	d045      	beq.n	80014f4 <PE_Check_DataMessage+0xac>
 8001468:	e04a      	b.n	8001500 <PE_Check_DataMessage+0xb8>
 800146a:	0988      	lsrs	r0, r1, #6
 800146c:	4005      	ands	r5, r0
 800146e:	0029      	movs	r1, r5
 8001470:	7b20      	ldrb	r0, [r4, #12]
 8001472:	f7ff fb19 	bl	8000aa8 <PE_ExtRevisionInteroperability>
 8001476:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001478:	0b00      	lsrs	r0, r0, #12
 800147a:	4006      	ands	r6, r0
 800147c:	00b3      	lsls	r3, r6, #2
 800147e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001480:	1c82      	adds	r2, r0, #2
 8001482:	2104      	movs	r1, #4
 8001484:	7b20      	ldrb	r0, [r4, #12]
 8001486:	68a5      	ldr	r5, [r4, #8]
 8001488:	69ad      	ldr	r5, [r5, #24]
 800148a:	47a8      	blx	r5
 800148c:	2044      	movs	r0, #68	; 0x44
 800148e:	e038      	b.n	8001502 <PE_Check_DataMessage+0xba>
 8001490:	2000      	movs	r0, #0
 8001492:	9001      	str	r0, [sp, #4]
 8001494:	9000      	str	r0, [sp, #0]
 8001496:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001498:	7881      	ldrb	r1, [r0, #2]
 800149a:	78c2      	ldrb	r2, [r0, #3]
 800149c:	0212      	lsls	r2, r2, #8
 800149e:	1889      	adds	r1, r1, r2
 80014a0:	7902      	ldrb	r2, [r0, #4]
 80014a2:	0412      	lsls	r2, r2, #16
 80014a4:	1889      	adds	r1, r1, r2
 80014a6:	7940      	ldrb	r0, [r0, #5]
 80014a8:	0600      	lsls	r0, r0, #24
 80014aa:	1808      	adds	r0, r1, r0
 80014ac:	9002      	str	r0, [sp, #8]
 80014ae:	466b      	mov	r3, sp
 80014b0:	aa01      	add	r2, sp, #4
 80014b2:	2103      	movs	r1, #3
 80014b4:	7b20      	ldrb	r0, [r4, #12]
 80014b6:	68a7      	ldr	r7, [r4, #8]
 80014b8:	697f      	ldr	r7, [r7, #20]
 80014ba:	47b8      	blx	r7
 80014bc:	2104      	movs	r1, #4
 80014be:	9800      	ldr	r0, [sp, #0]
 80014c0:	f7ff fd32 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d113      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014c8:	6860      	ldr	r0, [r4, #4]
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	0a00      	lsrs	r0, r0, #8
 80014ce:	4006      	ands	r6, r0
 80014d0:	2e03      	cmp	r6, #3
 80014d2:	d10d      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014d4:	9801      	ldr	r0, [sp, #4]
 80014d6:	4924      	ldr	r1, [pc, #144]	; (8001568 <.text_12>)
 80014d8:	4288      	cmp	r0, r1
 80014da:	d109      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	0f00      	lsrs	r0, r0, #28
 80014e0:	2805      	cmp	r0, #5
 80014e2:	d003      	beq.n	80014ec <PE_Check_DataMessage+0xa4>
 80014e4:	2808      	cmp	r0, #8
 80014e6:	d10d      	bne.n	8001504 <PE_Check_DataMessage+0xbc>
 80014e8:	2029      	movs	r0, #41	; 0x29
 80014ea:	e00a      	b.n	8001502 <PE_Check_DataMessage+0xba>
 80014ec:	2027      	movs	r0, #39	; 0x27
 80014ee:	e008      	b.n	8001502 <PE_Check_DataMessage+0xba>
 80014f0:	7365      	strb	r5, [r4, #13]
 80014f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80014f4:	6861      	ldr	r1, [r4, #4]
 80014f6:	6809      	ldr	r1, [r1, #0]
 80014f8:	400d      	ands	r5, r1
 80014fa:	2d02      	cmp	r5, #2
 80014fc:	d102      	bne.n	8001504 <PE_Check_DataMessage+0xbc>
 80014fe:	e000      	b.n	8001502 <PE_Check_DataMessage+0xba>
 8001500:	2011      	movs	r0, #17
 8001502:	7360      	strb	r0, [r4, #13]
 8001504:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001506 <PE_CheckSendMessageStatus>:
 8001506:	b081      	sub	sp, #4
 8001508:	0001      	movs	r1, r0
 800150a:	2010      	movs	r0, #16
 800150c:	2b05      	cmp	r3, #5
 800150e:	d006      	beq.n	800151e <PE_CheckSendMessageStatus+0x18>
 8001510:	2b06      	cmp	r3, #6
 8001512:	d00e      	beq.n	8001532 <PE_CheckSendMessageStatus+0x2c>
 8001514:	2b07      	cmp	r3, #7
 8001516:	d011      	beq.n	800153c <PE_CheckSendMessageStatus+0x36>
 8001518:	2b09      	cmp	r3, #9
 800151a:	d008      	beq.n	800152e <PE_CheckSendMessageStatus+0x28>
 800151c:	e022      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800151e:	9801      	ldr	r0, [sp, #4]
 8001520:	7348      	strb	r0, [r1, #13]
 8001522:	6908      	ldr	r0, [r1, #16]
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <.text_13>)
 8001526:	4002      	ands	r2, r0
 8001528:	610a      	str	r2, [r1, #16]
 800152a:	2000      	movs	r0, #0
 800152c:	e01a      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800152e:	2009      	movs	r0, #9
 8001530:	e018      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 8001532:	690a      	ldr	r2, [r1, #16]
 8001534:	0243      	lsls	r3, r0, #9
 8001536:	4313      	orrs	r3, r2
 8001538:	610b      	str	r3, [r1, #16]
 800153a:	e013      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800153c:	684b      	ldr	r3, [r1, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	055b      	lsls	r3, r3, #21
 8001542:	0f5b      	lsrs	r3, r3, #29
 8001544:	2b04      	cmp	r3, #4
 8001546:	d003      	beq.n	8001550 <PE_CheckSendMessageStatus+0x4a>
 8001548:	2a01      	cmp	r2, #1
 800154a:	d109      	bne.n	8001560 <PE_CheckSendMessageStatus+0x5a>
 800154c:	220f      	movs	r2, #15
 800154e:	e008      	b.n	8001562 <PE_CheckSendMessageStatus+0x5c>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1fb      	bne.n	800154c <PE_CheckSendMessageStatus+0x46>
 8001554:	688a      	ldr	r2, [r1, #8]
 8001556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001558:	2a00      	cmp	r2, #0
 800155a:	d0f7      	beq.n	800154c <PE_CheckSendMessageStatus+0x46>
 800155c:	2292      	movs	r2, #146	; 0x92
 800155e:	e000      	b.n	8001562 <PE_CheckSendMessageStatus+0x5c>
 8001560:	2211      	movs	r2, #17
 8001562:	734a      	strb	r2, [r1, #13]
 8001564:	b001      	add	sp, #4
 8001566:	4770      	bx	lr

08001568 <.text_12>:
 8001568:	00001388 	.word	0x00001388

0800156c <.text_13>:
 800156c:	ffffbfff 	.word	0xffffbfff

08001570 <USBPD_PRL_TimerCounter>:
 8001570:	493f      	ldr	r1, [pc, #252]	; (8001670 <.text_12>)
 8001572:	0080      	lsls	r0, r0, #2
 8001574:	5808      	ldr	r0, [r1, r0]
 8001576:	78c1      	ldrb	r1, [r0, #3]
 8001578:	2900      	cmp	r1, #0
 800157a:	d002      	beq.n	8001582 <USBPD_PRL_TimerCounter+0x12>
 800157c:	78c1      	ldrb	r1, [r0, #3]
 800157e:	1e49      	subs	r1, r1, #1
 8001580:	70c1      	strb	r1, [r0, #3]
 8001582:	4770      	bx	lr

08001584 <USBPD_PRL_Init>:
 8001584:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8001586:	b081      	sub	sp, #4
 8001588:	0014      	movs	r4, r2
 800158a:	001d      	movs	r5, r3
 800158c:	2616      	movs	r6, #22
 800158e:	2048      	movs	r0, #72	; 0x48
 8001590:	f017 f810 	bl	80185b4 <malloc>
 8001594:	0007      	movs	r7, r0
 8001596:	d01d      	beq.n	80015d4 <USBPD_PRL_Init+0x50>
 8001598:	9e02      	ldr	r6, [sp, #8]
 800159a:	2148      	movs	r1, #72	; 0x48
 800159c:	f017 f919 	bl	80187d2 <__aeabi_memclr>
 80015a0:	220f      	movs	r2, #15
 80015a2:	2103      	movs	r1, #3
 80015a4:	1d78      	adds	r0, r7, #5
 80015a6:	f017 f90d 	bl	80187c4 <__aeabi_memset>
 80015aa:	4831      	ldr	r0, [pc, #196]	; (8001670 <.text_12>)
 80015ac:	4669      	mov	r1, sp
 80015ae:	7909      	ldrb	r1, [r1, #4]
 80015b0:	0089      	lsls	r1, r1, #2
 80015b2:	5047      	str	r7, [r0, r1]
 80015b4:	623c      	str	r4, [r7, #32]
 80015b6:	627d      	str	r5, [r7, #36]	; 0x24
 80015b8:	2001      	movs	r0, #1
 80015ba:	9000      	str	r0, [sp, #0]
 80015bc:	6870      	ldr	r0, [r6, #4]
 80015be:	0743      	lsls	r3, r0, #29
 80015c0:	0fdb      	lsrs	r3, r3, #31
 80015c2:	003a      	movs	r2, r7
 80015c4:	3228      	adds	r2, #40	; 0x28
 80015c6:	bf00      	nop
 80015c8:	a103      	add	r1, pc, #12	; (adr r1, 80015d8 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 80015ca:	4668      	mov	r0, sp
 80015cc:	7900      	ldrb	r0, [r0, #4]
 80015ce:	f00b fad1 	bl	800cb74 <USBPD_PHY_Init>
 80015d2:	0006      	movs	r6, r0
 80015d4:	0030      	movs	r0, r6
 80015d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080015d8 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80015d8:	1b71 0800 1ebd 0800 1f0d 0800 1f21 0800     q...........!...
 80015e8:	1f29 0800 0000 0000                         ).......

080015f0 <USBPD_PRL_GetMemoryConsumption>:
 80015f0:	20d8      	movs	r0, #216	; 0xd8
 80015f2:	4770      	bx	lr

080015f4 <USBPD_PRL_SetHeader>:
 80015f4:	b530      	push	{r4, r5, lr}
 80015f6:	4c1e      	ldr	r4, [pc, #120]	; (8001670 <.text_12>)
 80015f8:	0080      	lsls	r0, r0, #2
 80015fa:	5820      	ldr	r0, [r4, r0]
 80015fc:	8a04      	ldrh	r4, [r0, #16]
 80015fe:	4d1d      	ldr	r5, [pc, #116]	; (8001674 <.text_13>)
 8001600:	4025      	ands	r5, r4
 8001602:	0209      	lsls	r1, r1, #8
 8001604:	2480      	movs	r4, #128	; 0x80
 8001606:	0064      	lsls	r4, r4, #1
 8001608:	4021      	ands	r1, r4
 800160a:	4329      	orrs	r1, r5
 800160c:	8201      	strh	r1, [r0, #16]
 800160e:	4c1a      	ldr	r4, [pc, #104]	; (8001678 <.text_14>)
 8001610:	400c      	ands	r4, r1
 8001612:	0151      	lsls	r1, r2, #5
 8001614:	2220      	movs	r2, #32
 8001616:	4011      	ands	r1, r2
 8001618:	4321      	orrs	r1, r4
 800161a:	8201      	strh	r1, [r0, #16]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <.text_15>)
 800161e:	400a      	ands	r2, r1
 8001620:	0199      	lsls	r1, r3, #6
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	400b      	ands	r3, r1
 8001626:	4313      	orrs	r3, r2
 8001628:	8203      	strh	r3, [r0, #16]
 800162a:	bd30      	pop	{r4, r5, pc}

0800162c <USBPD_PRL_SetHeaderPowerRole>:
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <.text_12>)
 800162e:	0080      	lsls	r0, r0, #2
 8001630:	5810      	ldr	r0, [r2, r0]
 8001632:	8a02      	ldrh	r2, [r0, #16]
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <.text_13>)
 8001636:	4013      	ands	r3, r2
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	e007      	b.n	8001650 <.text_10>

08001640 <USBPD_PRL_SetHeaderDataRole>:
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <.text_12>)
 8001642:	0080      	lsls	r0, r0, #2
 8001644:	5810      	ldr	r0, [r2, r0]
 8001646:	8a02      	ldrh	r2, [r0, #16]
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <.text_14>)
 800164a:	4013      	ands	r3, r2
 800164c:	0149      	lsls	r1, r1, #5
 800164e:	2220      	movs	r2, #32

08001650 <.text_10>:
 8001650:	4011      	ands	r1, r2
 8001652:	4319      	orrs	r1, r3
 8001654:	8201      	strh	r1, [r0, #16]
 8001656:	4770      	bx	lr

08001658 <USBPD_PRL_SetHeaderSpecification>:
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <.text_12>)
 800165a:	0080      	lsls	r0, r0, #2
 800165c:	5810      	ldr	r0, [r2, r0]
 800165e:	8a02      	ldrh	r2, [r0, #16]
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <.text_15>)
 8001662:	4013      	ands	r3, r2
 8001664:	0189      	lsls	r1, r1, #6
 8001666:	22c0      	movs	r2, #192	; 0xc0
 8001668:	400a      	ands	r2, r1
 800166a:	431a      	orrs	r2, r3
 800166c:	8202      	strh	r2, [r0, #16]
 800166e:	4770      	bx	lr

08001670 <.text_12>:
 8001670:	20000144 	.word	0x20000144

08001674 <.text_13>:
 8001674:	0000feff 	.word	0x0000feff

08001678 <.text_14>:
 8001678:	0000ffdf 	.word	0x0000ffdf

0800167c <.text_15>:
 800167c:	0000ff3f 	.word	0x0000ff3f

08001680 <USBPD_PRL_IsResistor_SinkTxOK>:
 8001680:	b580      	push	{r7, lr}
 8001682:	f00b fb6c 	bl	800cd5e <USBPD_PHY_IsResistor_SinkTxOk>
 8001686:	bd02      	pop	{r1, pc}

08001688 <USBPD_PRL_SendMessage>:
 8001688:	b5fd      	push	{r0, r2, r3, r4, r5, r6, r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	2003      	movs	r0, #3
 800168e:	2503      	movs	r5, #3
 8001690:	466a      	mov	r2, sp
 8001692:	7e12      	ldrb	r2, [r2, #24]
 8001694:	9204      	str	r2, [sp, #16]
 8001696:	4ac0      	ldr	r2, [pc, #768]	; (8001998 <USBPD_PRL_SendMessage+0x310>)
 8001698:	9b04      	ldr	r3, [sp, #16]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18d2      	adds	r2, r2, r3
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	0014      	movs	r4, r2
 80016a4:	7923      	ldrb	r3, [r4, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <USBPD_PRL_SendMessage+0x2c>
 80016aa:	7a23      	ldrb	r3, [r4, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <USBPD_PRL_SendMessage+0x2c>
 80016b0:	230f      	movs	r3, #15
 80016b2:	7113      	strb	r3, [r2, #4]
 80016b4:	466b      	mov	r3, sp
 80016b6:	7119      	strb	r1, [r3, #4]
 80016b8:	4669      	mov	r1, sp
 80016ba:	7909      	ldrb	r1, [r1, #4]
 80016bc:	9103      	str	r1, [sp, #12]
 80016be:	1861      	adds	r1, r4, r1
 80016c0:	9b04      	ldr	r3, [sp, #16]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	1c5b      	adds	r3, r3, #1
 80016c6:	466e      	mov	r6, sp
 80016c8:	7173      	strb	r3, [r6, #5]
 80016ca:	9b03      	ldr	r3, [sp, #12]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2600      	movs	r6, #0
 80016d2:	7923      	ldrb	r3, [r4, #4]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d900      	bls.n	80016da <USBPD_PRL_SendMessage+0x52>
 80016d8:	e1d7      	b.n	8001a8a <USBPD_PRL_SendMessage+0x402>
 80016da:	a702      	add	r7, pc, #8	; (adr r7, 80016e4 <USBPD_PRL_SendMessage+0x5c>)
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	5aff      	ldrh	r7, [r7, r3]
 80016e0:	44bf      	add	pc, r7
 80016e2:	bf00      	nop
 80016e4:	03a60022 	.word	0x03a60022
 80016e8:	03a603a6 	.word	0x03a603a6
 80016ec:	0088004a 	.word	0x0088004a
 80016f0:	0140006a 	.word	0x0140006a
 80016f4:	03a603a6 	.word	0x03a603a6
 80016f8:	02e202b8 	.word	0x02e202b8
 80016fc:	0330030e 	.word	0x0330030e
 8001700:	03a003a6 	.word	0x03a003a6
 8001704:	0368      	.short	0x0368
 8001706:	f3ef 8710 	mrs	r7, PRIMASK
 800170a:	b672      	cpsid	i
 800170c:	4668      	mov	r0, sp
 800170e:	7e00      	ldrb	r0, [r0, #24]
 8001710:	f7ff f912 	bl	8000938 <PE_PRL_Control_RxEvent>
 8001714:	2800      	cmp	r0, #0
 8001716:	d105      	bne.n	8001724 <USBPD_PRL_SendMessage+0x9c>
 8001718:	7a60      	ldrb	r0, [r4, #9]
 800171a:	2800      	cmp	r0, #0
 800171c:	d102      	bne.n	8001724 <USBPD_PRL_SendMessage+0x9c>
 800171e:	20ff      	movs	r0, #255	; 0xff
 8001720:	7220      	strb	r0, [r4, #8]
 8001722:	e000      	b.n	8001726 <USBPD_PRL_SendMessage+0x9e>
 8001724:	7226      	strb	r6, [r4, #8]
 8001726:	f387 8810 	msr	PRIMASK, r7
 800172a:	2006      	movs	r0, #6
 800172c:	e076      	b.n	800181c <USBPD_PRL_SendMessage+0x194>
 800172e:	a80f      	add	r0, sp, #60	; 0x3c
 8001730:	7800      	ldrb	r0, [r0, #0]
 8001732:	2802      	cmp	r0, #2
 8001734:	d109      	bne.n	800174a <USBPD_PRL_SendMessage+0xc2>
 8001736:	4668      	mov	r0, sp
 8001738:	7e00      	ldrb	r0, [r0, #24]
 800173a:	f00b fb10 	bl	800cd5e <USBPD_PHY_IsResistor_SinkTxOk>
 800173e:	2801      	cmp	r0, #1
 8001740:	d101      	bne.n	8001746 <USBPD_PRL_SendMessage+0xbe>
 8001742:	2005      	movs	r0, #5
 8001744:	e06a      	b.n	800181c <USBPD_PRL_SendMessage+0x194>
 8001746:	2509      	movs	r5, #9
 8001748:	e1a1      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 800174a:	2006      	movs	r0, #6
 800174c:	e14f      	b.n	80019ee <USBPD_PRL_SendMessage+0x366>
 800174e:	9902      	ldr	r1, [sp, #8]
 8001750:	1861      	adds	r1, r4, r1
 8001752:	8a09      	ldrh	r1, [r1, #16]
 8001754:	0989      	lsrs	r1, r1, #6
 8001756:	4008      	ands	r0, r1
 8001758:	2802      	cmp	r0, #2
 800175a:	d105      	bne.n	8001768 <USBPD_PRL_SendMessage+0xe0>
 800175c:	a80f      	add	r0, sp, #60	; 0x3c
 800175e:	7800      	ldrb	r0, [r0, #0]
 8001760:	2802      	cmp	r0, #2
 8001762:	d101      	bne.n	8001768 <USBPD_PRL_SendMessage+0xe0>
 8001764:	2004      	movs	r0, #4
 8001766:	e142      	b.n	80019ee <USBPD_PRL_SendMessage+0x366>
 8001768:	2005      	movs	r0, #5
 800176a:	e140      	b.n	80019ee <USBPD_PRL_SendMessage+0x366>
 800176c:	9802      	ldr	r0, [sp, #8]
 800176e:	1820      	adds	r0, r4, r0
 8001770:	8a03      	ldrh	r3, [r0, #16]
 8001772:	4ac8      	ldr	r2, [pc, #800]	; (8001a94 <.text_18>)
 8001774:	401a      	ands	r2, r3
 8001776:	466b      	mov	r3, sp
 8001778:	7f1b      	ldrb	r3, [r3, #28]
 800177a:	06db      	lsls	r3, r3, #27
 800177c:	0edb      	lsrs	r3, r3, #27
 800177e:	4313      	orrs	r3, r2
 8001780:	8203      	strh	r3, [r0, #16]
 8001782:	045a      	lsls	r2, r3, #17
 8001784:	0c52      	lsrs	r2, r2, #17
 8001786:	466b      	mov	r3, sp
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	09db      	lsrs	r3, r3, #7
 800178c:	03db      	lsls	r3, r3, #15
 800178e:	4313      	orrs	r3, r2
 8001790:	8203      	strh	r3, [r0, #16]
 8001792:	7066      	strb	r6, [r4, #1]
 8001794:	8a03      	ldrh	r3, [r0, #16]
 8001796:	0bda      	lsrs	r2, r3, #15
 8001798:	d023      	beq.n	80017e2 <USBPD_PRL_SendMessage+0x15a>
 800179a:	9a08      	ldr	r2, [sp, #32]
 800179c:	7892      	ldrb	r2, [r2, #2]
 800179e:	9b08      	ldr	r3, [sp, #32]
 80017a0:	78db      	ldrb	r3, [r3, #3]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	18d2      	adds	r2, r2, r3
 80017a6:	82e2      	strh	r2, [r4, #22]
 80017a8:	8ae2      	ldrh	r2, [r4, #22]
 80017aa:	0a93      	lsrs	r3, r2, #10
 80017ac:	07db      	lsls	r3, r3, #31
 80017ae:	d40f      	bmi.n	80017d0 <USBPD_PRL_SendMessage+0x148>
 80017b0:	0ad2      	lsrs	r2, r2, #11
 80017b2:	0712      	lsls	r2, r2, #28
 80017b4:	d122      	bne.n	80017fc <USBPD_PRL_SendMessage+0x174>
 80017b6:	466a      	mov	r2, sp
 80017b8:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80017ba:	1f12      	subs	r2, r2, #4
 80017bc:	83a2      	strh	r2, [r4, #28]
 80017be:	05d2      	lsls	r2, r2, #23
 80017c0:	0dd2      	lsrs	r2, r2, #23
 80017c2:	8ae3      	ldrh	r3, [r4, #22]
 80017c4:	27fe      	movs	r7, #254	; 0xfe
 80017c6:	023f      	lsls	r7, r7, #8
 80017c8:	401f      	ands	r7, r3
 80017ca:	433a      	orrs	r2, r7
 80017cc:	82e2      	strh	r2, [r4, #22]
 80017ce:	e015      	b.n	80017fc <USBPD_PRL_SendMessage+0x174>
 80017d0:	83a6      	strh	r6, [r4, #28]
 80017d2:	8a02      	ldrh	r2, [r0, #16]
 80017d4:	4bc6      	ldr	r3, [pc, #792]	; (8001af0 <.text_20>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	0152      	lsls	r2, r2, #5
 80017dc:	431a      	orrs	r2, r3
 80017de:	8202      	strh	r2, [r0, #16]
 80017e0:	e00c      	b.n	80017fc <USBPD_PRL_SendMessage+0x174>
 80017e2:	4ac3      	ldr	r2, [pc, #780]	; (8001af0 <.text_20>)
 80017e4:	401a      	ands	r2, r3
 80017e6:	466b      	mov	r3, sp
 80017e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80017ea:	1e9b      	subs	r3, r3, #2
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	031b      	lsls	r3, r3, #12
 80017f0:	27e0      	movs	r7, #224	; 0xe0
 80017f2:	01ff      	lsls	r7, r7, #7
 80017f4:	401f      	ands	r7, r3
 80017f6:	4317      	orrs	r7, r2
 80017f8:	8207      	strh	r7, [r0, #16]
 80017fa:	83a6      	strh	r6, [r4, #28]
 80017fc:	466a      	mov	r2, sp
 80017fe:	7f12      	ldrb	r2, [r2, #28]
 8001800:	2a0d      	cmp	r2, #13
 8001802:	d10a      	bne.n	800181a <USBPD_PRL_SendMessage+0x192>
 8001804:	8a00      	ldrh	r0, [r0, #16]
 8001806:	22f0      	movs	r2, #240	; 0xf0
 8001808:	0212      	lsls	r2, r2, #8
 800180a:	4002      	ands	r2, r0
 800180c:	d105      	bne.n	800181a <USBPD_PRL_SendMessage+0x192>
 800180e:	728e      	strb	r6, [r1, #10]
 8001810:	220f      	movs	r2, #15
 8001812:	2103      	movs	r1, #3
 8001814:	1d60      	adds	r0, r4, #5
 8001816:	f016 ffd5 	bl	80187c4 <__aeabi_memset>
 800181a:	2007      	movs	r0, #7
 800181c:	9900      	ldr	r1, [sp, #0]
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	7108      	strb	r0, [r1, #4]
 8001822:	e134      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001824:	4669      	mov	r1, sp
 8001826:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8001828:	9902      	ldr	r1, [sp, #8]
 800182a:	1851      	adds	r1, r2, r1
 800182c:	8a0b      	ldrh	r3, [r1, #16]
 800182e:	0bdb      	lsrs	r3, r3, #15
 8001830:	d077      	beq.n	8001922 <USBPD_PRL_SendMessage+0x29a>
 8001832:	8ad3      	ldrh	r3, [r2, #22]
 8001834:	2780      	movs	r7, #128	; 0x80
 8001836:	023f      	lsls	r7, r7, #8
 8001838:	431f      	orrs	r7, r3
 800183a:	82d7      	strh	r7, [r2, #22]
 800183c:	0abb      	lsrs	r3, r7, #10
 800183e:	07db      	lsls	r3, r3, #31
 8001840:	d464      	bmi.n	800190c <USBPD_PRL_SendMessage+0x284>
 8001842:	8b93      	ldrh	r3, [r2, #28]
 8001844:	2b1b      	cmp	r3, #27
 8001846:	d309      	bcc.n	800185c <USBPD_PRL_SendMessage+0x1d4>
 8001848:	8a08      	ldrh	r0, [r1, #16]
 800184a:	23e0      	movs	r3, #224	; 0xe0
 800184c:	01db      	lsls	r3, r3, #7
 800184e:	4303      	orrs	r3, r0
 8001850:	820b      	strh	r3, [r1, #16]
 8001852:	8b90      	ldrh	r0, [r2, #28]
 8001854:	381a      	subs	r0, #26
 8001856:	8390      	strh	r0, [r2, #28]
 8001858:	241e      	movs	r4, #30
 800185a:	e057      	b.n	800190c <USBPD_PRL_SendMessage+0x284>
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <USBPD_PRL_SendMessage+0x310>)
 800185e:	466f      	mov	r7, sp
 8001860:	7e3f      	ldrb	r7, [r7, #24]
 8001862:	00bf      	lsls	r7, r7, #2
 8001864:	59db      	ldr	r3, [r3, r7]
 8001866:	8adb      	ldrh	r3, [r3, #22]
 8001868:	0adf      	lsrs	r7, r3, #11
 800186a:	073f      	lsls	r7, r7, #28
 800186c:	d107      	bne.n	800187e <USBPD_PRL_SendMessage+0x1f6>
 800186e:	27fe      	movs	r7, #254	; 0xfe
 8001870:	023f      	lsls	r7, r7, #8
 8001872:	401f      	ands	r7, r3
 8001874:	8b93      	ldrh	r3, [r2, #28]
 8001876:	05db      	lsls	r3, r3, #23
 8001878:	0ddb      	lsrs	r3, r3, #23
 800187a:	433b      	orrs	r3, r7
 800187c:	82d3      	strh	r3, [r2, #22]
 800187e:	8a0f      	ldrh	r7, [r1, #16]
 8001880:	4b9b      	ldr	r3, [pc, #620]	; (8001af0 <.text_20>)
 8001882:	403b      	ands	r3, r7
 8001884:	820b      	strh	r3, [r1, #16]
 8001886:	8ad7      	ldrh	r7, [r2, #22]
 8001888:	0bff      	lsrs	r7, r7, #15
 800188a:	d03c      	beq.n	8001906 <USBPD_PRL_SendMessage+0x27e>
 800188c:	8b94      	ldrh	r4, [r2, #28]
 800188e:	1ca4      	adds	r4, r4, #2
 8001890:	08a4      	lsrs	r4, r4, #2
 8001892:	0324      	lsls	r4, r4, #12
 8001894:	27e0      	movs	r7, #224	; 0xe0
 8001896:	01ff      	lsls	r7, r7, #7
 8001898:	4027      	ands	r7, r4
 800189a:	431f      	orrs	r7, r3
 800189c:	820f      	strh	r7, [r1, #16]
 800189e:	8b91      	ldrh	r1, [r2, #28]
 80018a0:	1c89      	adds	r1, r1, #2
 80018a2:	4008      	ands	r0, r1
 80018a4:	0001      	movs	r1, r0
 80018a6:	d025      	beq.n	80018f4 <USBPD_PRL_SendMessage+0x26c>
 80018a8:	2300      	movs	r3, #0
 80018aa:	483b      	ldr	r0, [pc, #236]	; (8001998 <USBPD_PRL_SendMessage+0x310>)
 80018ac:	9a04      	ldr	r2, [sp, #16]
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	1880      	adds	r0, r0, r2
 80018b2:	9000      	str	r0, [sp, #0]
 80018b4:	9808      	ldr	r0, [sp, #32]
 80018b6:	9104      	str	r1, [sp, #16]
 80018b8:	e004      	b.n	80018c4 <USBPD_PRL_SendMessage+0x23c>
 80018ba:	1d01      	adds	r1, r0, #4
 80018bc:	8ba4      	ldrh	r4, [r4, #28]
 80018be:	18a2      	adds	r2, r4, r2
 80018c0:	548e      	strb	r6, [r1, r2]
 80018c2:	1c5b      	adds	r3, r3, #1
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	680c      	ldr	r4, [r1, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	2104      	movs	r1, #4
 80018cc:	9f04      	ldr	r7, [sp, #16]
 80018ce:	1bc9      	subs	r1, r1, r7
 80018d0:	428a      	cmp	r2, r1
 80018d2:	d3f2      	bcc.n	80018ba <USBPD_PRL_SendMessage+0x232>
 80018d4:	9008      	str	r0, [sp, #32]
 80018d6:	0020      	movs	r0, r4
 80018d8:	3010      	adds	r0, #16
 80018da:	9902      	ldr	r1, [sp, #8]
 80018dc:	1840      	adds	r0, r0, r1
 80018de:	8801      	ldrh	r1, [r0, #0]
 80018e0:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <.text_20>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	0b09      	lsrs	r1, r1, #12
 80018e6:	1c49      	adds	r1, r1, #1
 80018e8:	0309      	lsls	r1, r1, #12
 80018ea:	23e0      	movs	r3, #224	; 0xe0
 80018ec:	01db      	lsls	r3, r3, #7
 80018ee:	400b      	ands	r3, r1
 80018f0:	4313      	orrs	r3, r2
 80018f2:	8003      	strh	r3, [r0, #0]
 80018f4:	9800      	ldr	r0, [sp, #0]
 80018f6:	6800      	ldr	r0, [r0, #0]
 80018f8:	3010      	adds	r0, #16
 80018fa:	9902      	ldr	r1, [sp, #8]
 80018fc:	5a40      	ldrh	r0, [r0, r1]
 80018fe:	0440      	lsls	r0, r0, #17
 8001900:	0f40      	lsrs	r0, r0, #29
 8001902:	0084      	lsls	r4, r0, #2
 8001904:	1ca4      	adds	r4, r4, #2
 8001906:	9800      	ldr	r0, [sp, #0]
 8001908:	6800      	ldr	r0, [r0, #0]
 800190a:	8386      	strh	r6, [r0, #28]
 800190c:	9800      	ldr	r0, [sp, #0]
 800190e:	6800      	ldr	r0, [r0, #0]
 8001910:	8ac0      	ldrh	r0, [r0, #22]
 8001912:	9908      	ldr	r1, [sp, #32]
 8001914:	7088      	strb	r0, [r1, #2]
 8001916:	9800      	ldr	r0, [sp, #0]
 8001918:	6800      	ldr	r0, [r0, #0]
 800191a:	8ac0      	ldrh	r0, [r0, #22]
 800191c:	0a00      	lsrs	r0, r0, #8
 800191e:	9908      	ldr	r1, [sp, #32]
 8001920:	70c8      	strb	r0, [r1, #3]
 8001922:	9800      	ldr	r0, [sp, #0]
 8001924:	6802      	ldr	r2, [r0, #0]
 8001926:	0010      	movs	r0, r2
 8001928:	3010      	adds	r0, #16
 800192a:	9902      	ldr	r1, [sp, #8]
 800192c:	1840      	adds	r0, r0, r1
 800192e:	8803      	ldrh	r3, [r0, #0]
 8001930:	4984      	ldr	r1, [pc, #528]	; (8001b44 <.text_24>)
 8001932:	4019      	ands	r1, r3
 8001934:	320a      	adds	r2, #10
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	5cd2      	ldrb	r2, [r2, r3]
 800193a:	0253      	lsls	r3, r2, #9
 800193c:	22e0      	movs	r2, #224	; 0xe0
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	401a      	ands	r2, r3
 8001942:	430a      	orrs	r2, r1
 8001944:	8002      	strh	r2, [r0, #0]
 8001946:	9808      	ldr	r0, [sp, #32]
 8001948:	7002      	strb	r2, [r0, #0]
 800194a:	9800      	ldr	r0, [sp, #0]
 800194c:	6800      	ldr	r0, [r0, #0]
 800194e:	3010      	adds	r0, #16
 8001950:	9902      	ldr	r1, [sp, #8]
 8001952:	5a40      	ldrh	r0, [r0, r1]
 8001954:	0a00      	lsrs	r0, r0, #8
 8001956:	9908      	ldr	r1, [sp, #32]
 8001958:	7048      	strb	r0, [r1, #1]
 800195a:	9800      	ldr	r0, [sp, #0]
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	8184      	strh	r4, [r0, #12]
 8001960:	210a      	movs	r1, #10
 8001962:	7101      	strb	r1, [r0, #4]
 8001964:	2102      	movs	r1, #2
 8001966:	7381      	strb	r1, [r0, #14]
 8001968:	b2a0      	uxth	r0, r4
 800196a:	9000      	str	r0, [sp, #0]
 800196c:	9b08      	ldr	r3, [sp, #32]
 800196e:	4668      	mov	r0, sp
 8001970:	7902      	ldrb	r2, [r0, #4]
 8001972:	7e01      	ldrb	r1, [r0, #24]
 8001974:	2002      	movs	r0, #2
 8001976:	4e74      	ldr	r6, [pc, #464]	; (8001b48 <.text_25>)
 8001978:	6836      	ldr	r6, [r6, #0]
 800197a:	47b0      	blx	r6
 800197c:	4973      	ldr	r1, [pc, #460]	; (8001b4c <.text_26>)
 800197e:	4668      	mov	r0, sp
 8001980:	7940      	ldrb	r0, [r0, #5]
 8001982:	f00c fc97 	bl	800e2b4 <USBPD_TIM_Start>
 8001986:	b2a3      	uxth	r3, r4
 8001988:	9a08      	ldr	r2, [sp, #32]
 800198a:	4668      	mov	r0, sp
 800198c:	7901      	ldrb	r1, [r0, #4]
 800198e:	7e00      	ldrb	r0, [r0, #24]
 8001990:	f00b f99f 	bl	800ccd2 <USBPD_PHY_SendMessage>
 8001994:	e07b      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001996:	bf00      	nop
 8001998:	20000144 	.word	0x20000144
 800199c:	f3ef 8410 	mrs	r4, PRIMASK
 80019a0:	b672      	cpsid	i
 80019a2:	9800      	ldr	r0, [sp, #0]
 80019a4:	6800      	ldr	r0, [r0, #0]
 80019a6:	7900      	ldrb	r0, [r0, #4]
 80019a8:	280a      	cmp	r0, #10
 80019aa:	d109      	bne.n	80019c0 <USBPD_PRL_SendMessage+0x338>
 80019ac:	4668      	mov	r0, sp
 80019ae:	7940      	ldrb	r0, [r0, #5]
 80019b0:	f00c fcee 	bl	800e390 <USBPD_TIM_IsExpired>
 80019b4:	2801      	cmp	r0, #1
 80019b6:	d103      	bne.n	80019c0 <USBPD_PRL_SendMessage+0x338>
 80019b8:	200d      	movs	r0, #13
 80019ba:	9900      	ldr	r1, [sp, #0]
 80019bc:	6809      	ldr	r1, [r1, #0]
 80019be:	7108      	strb	r0, [r1, #4]
 80019c0:	f384 8810 	msr	PRIMASK, r4
 80019c4:	e063      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 80019c6:	7a88      	ldrb	r0, [r1, #10]
 80019c8:	8aa7      	ldrh	r7, [r4, #20]
 80019ca:	053f      	lsls	r7, r7, #20
 80019cc:	0f7f      	lsrs	r7, r7, #29
 80019ce:	42b8      	cmp	r0, r7
 80019d0:	d10c      	bne.n	80019ec <USBPD_PRL_SendMessage+0x364>
 80019d2:	7d23      	ldrb	r3, [r4, #20]
 80019d4:	06db      	lsls	r3, r3, #27
 80019d6:	0edb      	lsrs	r3, r3, #27
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <USBPD_PRL_SendMessage+0x364>
 80019dc:	1c40      	adds	r0, r0, #1
 80019de:	0740      	lsls	r0, r0, #29
 80019e0:	0f40      	lsrs	r0, r0, #29
 80019e2:	7288      	strb	r0, [r1, #10]
 80019e4:	9800      	ldr	r0, [sp, #0]
 80019e6:	6800      	ldr	r0, [r0, #0]
 80019e8:	7106      	strb	r6, [r0, #4]
 80019ea:	e011      	b.n	8001a10 <USBPD_PRL_SendMessage+0x388>
 80019ec:	200d      	movs	r0, #13
 80019ee:	7110      	strb	r0, [r2, #4]
 80019f0:	e04d      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 80019f2:	7a88      	ldrb	r0, [r1, #10]
 80019f4:	1c40      	adds	r0, r0, #1
 80019f6:	0740      	lsls	r0, r0, #29
 80019f8:	0f40      	lsrs	r0, r0, #29
 80019fa:	7288      	strb	r0, [r1, #10]
 80019fc:	9800      	ldr	r0, [sp, #0]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	7106      	strb	r6, [r0, #4]
 8001a02:	8ae1      	ldrh	r1, [r4, #22]
 8001a04:	4852      	ldr	r0, [pc, #328]	; (8001b50 <.text_27>)
 8001a06:	4008      	ands	r0, r1
 8001a08:	82e0      	strh	r0, [r4, #22]
 8001a0a:	4952      	ldr	r1, [pc, #328]	; (8001b54 <.text_28>)
 8001a0c:	4001      	ands	r1, r0
 8001a0e:	82e1      	strh	r1, [r4, #22]
 8001a10:	2505      	movs	r5, #5
 8001a12:	e03c      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001a14:	7862      	ldrb	r2, [r4, #1]
 8001a16:	1c52      	adds	r2, r2, #1
 8001a18:	7062      	strb	r2, [r4, #1]
 8001a1a:	9b02      	ldr	r3, [sp, #8]
 8001a1c:	18e3      	adds	r3, r4, r3
 8001a1e:	8a1b      	ldrh	r3, [r3, #16]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	2403      	movs	r4, #3
 8001a24:	401c      	ands	r4, r3
 8001a26:	2c01      	cmp	r4, #1
 8001a28:	d000      	beq.n	8001a2c <USBPD_PRL_SendMessage+0x3a4>
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	9b00      	ldr	r3, [sp, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4290      	cmp	r0, r2
 8001a34:	d302      	bcc.n	8001a3c <USBPD_PRL_SendMessage+0x3b4>
 8001a36:	2010      	movs	r0, #16
 8001a38:	7118      	strb	r0, [r3, #4]
 8001a3a:	e028      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001a3c:	711e      	strb	r6, [r3, #4]
 8001a3e:	2507      	movs	r5, #7
 8001a40:	7a88      	ldrb	r0, [r1, #10]
 8001a42:	1c40      	adds	r0, r0, #1
 8001a44:	2207      	movs	r2, #7
 8001a46:	4002      	ands	r2, r0
 8001a48:	728a      	strb	r2, [r1, #10]
 8001a4a:	e020      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	7110      	strb	r0, [r2, #4]
 8001a50:	2002      	movs	r0, #2
 8001a52:	73a0      	strb	r0, [r4, #14]
 8001a54:	493d      	ldr	r1, [pc, #244]	; (8001b4c <.text_26>)
 8001a56:	4668      	mov	r0, sp
 8001a58:	7940      	ldrb	r0, [r0, #5]
 8001a5a:	f00c fc2b 	bl	800e2b4 <USBPD_TIM_Start>
 8001a5e:	89a3      	ldrh	r3, [r4, #12]
 8001a60:	9a08      	ldr	r2, [sp, #32]
 8001a62:	4668      	mov	r0, sp
 8001a64:	7901      	ldrb	r1, [r0, #4]
 8001a66:	7e00      	ldrb	r0, [r0, #24]
 8001a68:	f00b f933 	bl	800ccd2 <USBPD_PHY_SendMessage>
 8001a6c:	4668      	mov	r0, sp
 8001a6e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8001a70:	9000      	str	r0, [sp, #0]
 8001a72:	9b08      	ldr	r3, [sp, #32]
 8001a74:	4668      	mov	r0, sp
 8001a76:	7902      	ldrb	r2, [r0, #4]
 8001a78:	7e01      	ldrb	r1, [r0, #24]
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	4c32      	ldr	r4, [pc, #200]	; (8001b48 <.text_25>)
 8001a7e:	6824      	ldr	r4, [r4, #0]
 8001a80:	47a0      	blx	r4
 8001a82:	e004      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001a84:	7116      	strb	r6, [r2, #4]
 8001a86:	2506      	movs	r5, #6
 8001a88:	e001      	b.n	8001a8e <USBPD_PRL_SendMessage+0x406>
 8001a8a:	7116      	strb	r6, [r2, #4]
 8001a8c:	2510      	movs	r5, #16
 8001a8e:	0028      	movs	r0, r5
 8001a90:	b009      	add	sp, #36	; 0x24
 8001a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a94 <.text_18>:
 8001a94:	0000ffe0 	.word	0x0000ffe0

08001a98 <USBPD_PRL_ResetRequestProcess>:
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	0005      	movs	r5, r0
 8001a9c:	000e      	movs	r6, r1
 8001a9e:	482e      	ldr	r0, [pc, #184]	; (8001b58 <.text_29>)
 8001aa0:	00a9      	lsls	r1, r5, #2
 8001aa2:	1840      	adds	r0, r0, r1
 8001aa4:	9000      	str	r0, [sp, #0]
 8001aa6:	6804      	ldr	r4, [r0, #0]
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	70a7      	strb	r7, [r4, #2]
 8001aac:	72a7      	strb	r7, [r4, #10]
 8001aae:	220f      	movs	r2, #15
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	1d60      	adds	r0, r4, #5
 8001ab4:	f016 fe86 	bl	80187c4 <__aeabi_memset>
 8001ab8:	9800      	ldr	r0, [sp, #0]
 8001aba:	6800      	ldr	r0, [r0, #0]
 8001abc:	7107      	strb	r7, [r0, #4]
 8001abe:	9700      	str	r7, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	0032      	movs	r2, r6
 8001ac4:	0029      	movs	r1, r5
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	4f1f      	ldr	r7, [pc, #124]	; (8001b48 <.text_25>)
 8001aca:	683f      	ldr	r7, [r7, #0]
 8001acc:	47b8      	blx	r7
 8001ace:	0028      	movs	r0, r5
 8001ad0:	f000 f849 	bl	8001b66 <PRL_DisableRX>
 8001ad4:	0031      	movs	r1, r6
 8001ad6:	0028      	movs	r0, r5
 8001ad8:	f00b f8e5 	bl	800cca6 <USBPD_PHY_ResetRequest>
 8001adc:	2005      	movs	r0, #5
 8001ade:	70e0      	strb	r0, [r4, #3]
 8001ae0:	78a0      	ldrb	r0, [r4, #2]
 8001ae2:	2801      	cmp	r0, #1
 8001ae4:	d002      	beq.n	8001aec <USBPD_PRL_ResetRequestProcess+0x54>
 8001ae6:	78e0      	ldrb	r0, [r4, #3]
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d1f9      	bne.n	8001ae0 <USBPD_PRL_ResetRequestProcess+0x48>
 8001aec:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001af0 <.text_20>:
 8001af0:	00008fff 	.word	0x00008fff

08001af4 <USBDPD_PRL_BistCarrierEyeMode>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	2905      	cmp	r1, #5
 8001af8:	d102      	bne.n	8001b00 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8001afa:	f00b f909 	bl	800cd10 <USBPD_PHY_Send_BIST_Pattern>
 8001afe:	bd02      	pop	{r1, pc}
 8001b00:	2010      	movs	r0, #16
 8001b02:	bd02      	pop	{r1, pc}

08001b04 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	2905      	cmp	r1, #5
 8001b08:	d103      	bne.n	8001b12 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8001b0a:	2107      	movs	r1, #7
 8001b0c:	f00b f910 	bl	800cd30 <USBPD_PHY_ExitTransmit>
 8001b10:	bd02      	pop	{r1, pc}
 8001b12:	2010      	movs	r0, #16
 8001b14:	bd02      	pop	{r1, pc}

08001b16 <USBPD_PRL_Reset>:
 8001b16:	b570      	push	{r4, r5, r6, lr}
 8001b18:	0004      	movs	r4, r0
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <.text_29>)
 8001b1c:	00a1      	lsls	r1, r4, #2
 8001b1e:	5845      	ldr	r5, [r0, r1]
 8001b20:	2600      	movs	r6, #0
 8001b22:	712e      	strb	r6, [r5, #4]
 8001b24:	702e      	strb	r6, [r5, #0]
 8001b26:	70ee      	strb	r6, [r5, #3]
 8001b28:	72ae      	strb	r6, [r5, #10]
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	1d68      	adds	r0, r5, #5
 8001b30:	f016 fe48 	bl	80187c4 <__aeabi_memset>
 8001b34:	77ee      	strb	r6, [r5, #31]
 8001b36:	0020      	movs	r0, r4
 8001b38:	f00b f8ab 	bl	800cc92 <USBPD_PHY_Reset>
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	f00b f91e 	bl	800cd7e <USBPD_PHY_EnableRX>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}

08001b44 <.text_24>:
 8001b44:	0000f1ff 	.word	0x0000f1ff

08001b48 <.text_25>:
 8001b48:	20000000 	.word	0x20000000

08001b4c <.text_26>:
 8001b4c:	00002710 	.word	0x00002710

08001b50 <.text_27>:
 8001b50:	000087ff 	.word	0x000087ff

08001b54 <.text_28>:
 8001b54:	0000fbff 	.word	0x0000fbff

08001b58 <.text_29>:
 8001b58:	20000144 	.word	0x20000144

08001b5c <USBPD_PRL_Stop>:
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	f00b f91d 	bl	800cd9c <USBPD_PHY_DisableRX>
 8001b62:	bd01      	pop	{r0, pc}

08001b64 <USBPD_PRL_DeInit>:
 8001b64:	4770      	bx	lr

08001b66 <PRL_DisableRX>:
 8001b66:	b580      	push	{r7, lr}
 8001b68:	f00b f918 	bl	800cd9c <USBPD_PHY_DisableRX>
 8001b6c:	bd01      	pop	{r0, pc}
	...

08001b70 <PRL_Received>:
 8001b70:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	a809      	add	r0, sp, #36	; 0x24
 8001b76:	7805      	ldrb	r5, [r0, #0]
 8001b78:	48ce      	ldr	r0, [pc, #824]	; (8001eb4 <.text_34>)
 8001b7a:	00a9      	lsls	r1, r5, #2
 8001b7c:	1846      	adds	r6, r0, r1
 8001b7e:	6834      	ldr	r4, [r6, #0]
 8001b80:	4628      	mov	r0, r5
 8001b82:	f00b f87b 	bl	800cc7c <USBPD_PHY_GetMinGOODCRCTimerValue>
 8001b86:	a909      	add	r1, sp, #36	; 0x24
 8001b88:	7809      	ldrb	r1, [r1, #0]
 8001b8a:	0049      	lsls	r1, r1, #1
 8001b8c:	466a      	mov	r2, sp
 8001b8e:	7011      	strb	r1, [r2, #0]
 8001b90:	0001      	movs	r1, r0
 8001b92:	4668      	mov	r0, sp
 8001b94:	7800      	ldrb	r0, [r0, #0]
 8001b96:	f00c fb8d 	bl	800e2b4 <USBPD_TIM_Start>
 8001b9a:	2028      	movs	r0, #40	; 0x28
 8001b9c:	5c20      	ldrb	r0, [r4, r0]
 8001b9e:	2129      	movs	r1, #41	; 0x29
 8001ba0:	5c61      	ldrb	r1, [r4, r1]
 8001ba2:	0209      	lsls	r1, r1, #8
 8001ba4:	1840      	adds	r0, r0, r1
 8001ba6:	4669      	mov	r1, sp
 8001ba8:	8088      	strh	r0, [r1, #4]
 8001baa:	4668      	mov	r0, sp
 8001bac:	8880      	ldrh	r0, [r0, #4]
 8001bae:	0440      	lsls	r0, r0, #17
 8001bb0:	0f40      	lsrs	r0, r0, #29
 8001bb2:	0080      	lsls	r0, r0, #2
 8001bb4:	9005      	str	r0, [sp, #20]
 8001bb6:	1c80      	adds	r0, r0, #2
 8001bb8:	9007      	str	r0, [sp, #28]
 8001bba:	48bf      	ldr	r0, [pc, #764]	; (8001eb8 <.text_35>)
 8001bbc:	8889      	ldrh	r1, [r1, #4]
 8001bbe:	4001      	ands	r1, r0
 8001bc0:	2901      	cmp	r1, #1
 8001bc2:	d116      	bne.n	8001bf2 <PRL_Received+0x82>
 8001bc4:	0068      	lsls	r0, r5, #1
 8001bc6:	1c40      	adds	r0, r0, #1
 8001bc8:	b2c0      	uxtb	r0, r0
 8001bca:	f00c fbe1 	bl	800e390 <USBPD_TIM_IsExpired>
 8001bce:	2801      	cmp	r0, #1
 8001bd0:	d04c      	beq.n	8001c6c <PRL_Received+0xfc>
 8001bd2:	200b      	movs	r0, #11
 8001bd4:	6831      	ldr	r1, [r6, #0]
 8001bd6:	7108      	strb	r0, [r1, #4]
 8001bd8:	4668      	mov	r0, sp
 8001bda:	8880      	ldrh	r0, [r0, #4]
 8001bdc:	82a0      	strh	r0, [r4, #20]
 8001bde:	9807      	ldr	r0, [sp, #28]
 8001be0:	9000      	str	r0, [sp, #0]
 8001be2:	0023      	movs	r3, r4
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	a80a      	add	r0, sp, #40	; 0x28
 8001be8:	7802      	ldrb	r2, [r0, #0]
 8001bea:	a809      	add	r0, sp, #36	; 0x24
 8001bec:	7801      	ldrb	r1, [r0, #0]
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e15b      	b.n	8001eaa <PRL_Received+0x33a>
 8001bf2:	49c5      	ldr	r1, [pc, #788]	; (8001f08 <.text_37>)
 8001bf4:	880f      	ldrh	r7, [r1, #0]
 8001bf6:	2601      	movs	r6, #1
 8001bf8:	7266      	strb	r6, [r4, #9]
 8001bfa:	a90a      	add	r1, sp, #40	; 0x28
 8001bfc:	7809      	ldrb	r1, [r1, #0]
 8001bfe:	1861      	adds	r1, r4, r1
 8001c00:	9104      	str	r1, [sp, #16]
 8001c02:	2500      	movs	r5, #0
 8001c04:	4669      	mov	r1, sp
 8001c06:	8889      	ldrh	r1, [r1, #4]
 8001c08:	4008      	ands	r0, r1
 8001c0a:	280d      	cmp	r0, #13
 8001c0c:	d106      	bne.n	8001c1c <PRL_Received+0xac>
 8001c0e:	9904      	ldr	r1, [sp, #16]
 8001c10:	728d      	strb	r5, [r1, #10]
 8001c12:	220f      	movs	r2, #15
 8001c14:	2103      	movs	r1, #3
 8001c16:	1d60      	adds	r0, r4, #5
 8001c18:	f016 fdd4 	bl	80187c4 <__aeabi_memset>
 8001c1c:	a80a      	add	r0, sp, #40	; 0x28
 8001c1e:	7800      	ldrb	r0, [r0, #0]
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d10d      	bne.n	8001c40 <PRL_Received+0xd0>
 8001c24:	8a21      	ldrh	r1, [r4, #16]
 8001c26:	094a      	lsrs	r2, r1, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	4010      	ands	r0, r2
 8001c2c:	0a0a      	lsrs	r2, r1, #8
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4011      	ands	r1, r2
 8001c32:	4ab9      	ldr	r2, [pc, #740]	; (8001f18 <.text_39>)
 8001c34:	403a      	ands	r2, r7
 8001c36:	0143      	lsls	r3, r0, #5
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	0208      	lsls	r0, r1, #8
 8001c3c:	4318      	orrs	r0, r3
 8001c3e:	e001      	b.n	8001c44 <PRL_Received+0xd4>
 8001c40:	48b6      	ldr	r0, [pc, #728]	; (8001f1c <.text_40>)
 8001c42:	4038      	ands	r0, r7
 8001c44:	49c8      	ldr	r1, [pc, #800]	; (8001f68 <.text_43>)
 8001c46:	4001      	ands	r1, r0
 8001c48:	4668      	mov	r0, sp
 8001c4a:	8880      	ldrh	r0, [r0, #4]
 8001c4c:	22e0      	movs	r2, #224	; 0xe0
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	4002      	ands	r2, r0
 8001c52:	430a      	orrs	r2, r1
 8001c54:	2040      	movs	r0, #64	; 0x40
 8001c56:	4310      	orrs	r0, r2
 8001c58:	74a0      	strb	r0, [r4, #18]
 8001c5a:	0a00      	lsrs	r0, r0, #8
 8001c5c:	74e0      	strb	r0, [r4, #19]
 8001c5e:	a80a      	add	r0, sp, #40	; 0x28
 8001c60:	7801      	ldrb	r1, [r0, #0]
 8001c62:	a809      	add	r0, sp, #36	; 0x24
 8001c64:	7800      	ldrb	r0, [r0, #0]
 8001c66:	f7fe ff59 	bl	8000b1c <PE_PRL_PostReceiveEvent>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d100      	bne.n	8001c70 <PRL_Received+0x100>
 8001c6e:	e11f      	b.n	8001eb0 <PRL_Received+0x340>
 8001c70:	73a6      	strb	r6, [r4, #14]
 8001c72:	4668      	mov	r0, sp
 8001c74:	7800      	ldrb	r0, [r0, #0]
 8001c76:	f00c fb8b 	bl	800e390 <USBPD_TIM_IsExpired>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d0f9      	beq.n	8001c72 <PRL_Received+0x102>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	0022      	movs	r2, r4
 8001c82:	3212      	adds	r2, #18
 8001c84:	a80a      	add	r0, sp, #40	; 0x28
 8001c86:	7801      	ldrb	r1, [r0, #0]
 8001c88:	a809      	add	r0, sp, #36	; 0x24
 8001c8a:	7800      	ldrb	r0, [r0, #0]
 8001c8c:	f00b f821 	bl	800ccd2 <USBPD_PHY_SendMessage>
 8001c90:	9006      	str	r0, [sp, #24]
 8001c92:	a80a      	add	r0, sp, #40	; 0x28
 8001c94:	7800      	ldrb	r0, [r0, #0]
 8001c96:	7220      	strb	r0, [r4, #8]
 8001c98:	0027      	movs	r7, r4
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	0039      	movs	r1, r7
 8001c9e:	a809      	add	r0, sp, #36	; 0x24
 8001ca0:	7800      	ldrb	r0, [r0, #0]
 8001ca2:	f7fe ff6d 	bl	8000b80 <PE_PRL_PostReceiveEventCopy>
 8001ca6:	202b      	movs	r0, #43	; 0x2b
 8001ca8:	5c20      	ldrb	r0, [r4, r0]
 8001caa:	212a      	movs	r1, #42	; 0x2a
 8001cac:	5c61      	ldrb	r1, [r4, r1]
 8001cae:	0203      	lsls	r3, r0, #8
 8001cb0:	18ca      	adds	r2, r1, r3
 8001cb2:	466b      	mov	r3, sp
 8001cb4:	80da      	strh	r2, [r3, #6]
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	8892      	ldrh	r2, [r2, #4]
 8001cba:	0452      	lsls	r2, r2, #17
 8001cbc:	0f52      	lsrs	r2, r2, #29
 8001cbe:	81da      	strh	r2, [r3, #14]
 8001cc0:	466a      	mov	r2, sp
 8001cc2:	88d2      	ldrh	r2, [r2, #6]
 8001cc4:	05d2      	lsls	r2, r2, #23
 8001cc6:	0dd2      	lsrs	r2, r2, #23
 8001cc8:	811a      	strh	r2, [r3, #8]
 8001cca:	466a      	mov	r2, sp
 8001ccc:	88d2      	ldrh	r2, [r2, #6]
 8001cce:	0bd2      	lsrs	r2, r2, #15
 8001cd0:	819a      	strh	r2, [r3, #12]
 8001cd2:	466a      	mov	r2, sp
 8001cd4:	8892      	ldrh	r2, [r2, #4]
 8001cd6:	0bd2      	lsrs	r2, r2, #15
 8001cd8:	815a      	strh	r2, [r3, #10]
 8001cda:	d007      	beq.n	8001cec <PRL_Received+0x17c>
 8001cdc:	466a      	mov	r2, sp
 8001cde:	8992      	ldrh	r2, [r2, #12]
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	d103      	bne.n	8001cec <PRL_Received+0x17c>
 8001ce4:	4668      	mov	r0, sp
 8001ce6:	8900      	ldrh	r0, [r0, #8]
 8001ce8:	1d00      	adds	r0, r0, #4
 8001cea:	e01b      	b.n	8001d24 <PRL_Received+0x1b4>
 8001cec:	7822      	ldrb	r2, [r4, #0]
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d117      	bne.n	8001d22 <PRL_Received+0x1b2>
 8001cf2:	466a      	mov	r2, sp
 8001cf4:	89d2      	ldrh	r2, [r2, #14]
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d013      	beq.n	8001d22 <PRL_Received+0x1b2>
 8001cfa:	466a      	mov	r2, sp
 8001cfc:	8892      	ldrh	r2, [r2, #4]
 8001cfe:	06d2      	lsls	r2, r2, #27
 8001d00:	0ed2      	lsrs	r2, r2, #27
 8001d02:	2a03      	cmp	r2, #3
 8001d04:	d10d      	bne.n	8001d22 <PRL_Received+0x1b2>
 8001d06:	0200      	lsls	r0, r0, #8
 8001d08:	1808      	adds	r0, r1, r0
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	5c61      	ldrb	r1, [r4, r1]
 8001d0e:	0409      	lsls	r1, r1, #16
 8001d10:	1840      	adds	r0, r0, r1
 8001d12:	212d      	movs	r1, #45	; 0x2d
 8001d14:	5c61      	ldrb	r1, [r4, r1]
 8001d16:	0609      	lsls	r1, r1, #24
 8001d18:	1840      	adds	r0, r0, r1
 8001d1a:	0f00      	lsrs	r0, r0, #28
 8001d1c:	2808      	cmp	r0, #8
 8001d1e:	d100      	bne.n	8001d22 <PRL_Received+0x1b2>
 8001d20:	7026      	strb	r6, [r4, #0]
 8001d22:	9807      	ldr	r0, [sp, #28]
 8001d24:	9000      	str	r0, [sp, #0]
 8001d26:	003b      	movs	r3, r7
 8001d28:	a80a      	add	r0, sp, #40	; 0x28
 8001d2a:	7802      	ldrb	r2, [r0, #0]
 8001d2c:	a809      	add	r0, sp, #36	; 0x24
 8001d2e:	7801      	ldrb	r1, [r0, #0]
 8001d30:	2001      	movs	r0, #1
 8001d32:	4fbb      	ldr	r7, [pc, #748]	; (8002020 <.text_46>)
 8001d34:	683f      	ldr	r7, [r7, #0]
 8001d36:	47b8      	blx	r7
 8001d38:	9806      	ldr	r0, [sp, #24]
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d10b      	bne.n	8001d56 <PRL_Received+0x1e6>
 8001d3e:	2002      	movs	r0, #2
 8001d40:	9000      	str	r0, [sp, #0]
 8001d42:	0023      	movs	r3, r4
 8001d44:	3312      	adds	r3, #18
 8001d46:	a80a      	add	r0, sp, #40	; 0x28
 8001d48:	7802      	ldrb	r2, [r0, #0]
 8001d4a:	a809      	add	r0, sp, #36	; 0x24
 8001d4c:	7801      	ldrb	r1, [r0, #0]
 8001d4e:	2002      	movs	r0, #2
 8001d50:	4fb3      	ldr	r7, [pc, #716]	; (8002020 <.text_46>)
 8001d52:	683f      	ldr	r7, [r7, #0]
 8001d54:	47b8      	blx	r7
 8001d56:	4668      	mov	r0, sp
 8001d58:	8880      	ldrh	r0, [r0, #4]
 8001d5a:	0a40      	lsrs	r0, r0, #9
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	9a04      	ldr	r2, [sp, #16]
 8001d60:	7952      	ldrb	r2, [r2, #5]
 8001d62:	2307      	movs	r3, #7
 8001d64:	4003      	ands	r3, r0
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d103      	bne.n	8001d72 <PRL_Received+0x202>
 8001d6a:	9a06      	ldr	r2, [sp, #24]
 8001d6c:	2a00      	cmp	r2, #0
 8001d6e:	d100      	bne.n	8001d72 <PRL_Received+0x202>
 8001d70:	e08b      	b.n	8001e8a <PRL_Received+0x31a>
 8001d72:	4001      	ands	r1, r0
 8001d74:	9804      	ldr	r0, [sp, #16]
 8001d76:	7141      	strb	r1, [r0, #5]
 8001d78:	4668      	mov	r0, sp
 8001d7a:	8880      	ldrh	r0, [r0, #4]
 8001d7c:	8360      	strh	r0, [r4, #26]
 8001d7e:	4668      	mov	r0, sp
 8001d80:	8940      	ldrh	r0, [r0, #10]
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d042      	beq.n	8001e0c <PRL_Received+0x29c>
 8001d86:	4668      	mov	r0, sp
 8001d88:	8980      	ldrh	r0, [r0, #12]
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d03e      	beq.n	8001e0c <PRL_Received+0x29c>
 8001d8e:	4668      	mov	r0, sp
 8001d90:	88c0      	ldrh	r0, [r0, #6]
 8001d92:	8320      	strh	r0, [r4, #24]
 8001d94:	4668      	mov	r0, sp
 8001d96:	88c0      	ldrh	r0, [r0, #6]
 8001d98:	0440      	lsls	r0, r0, #17
 8001d9a:	0f01      	lsrs	r1, r0, #28
 8001d9c:	201a      	movs	r0, #26
 8001d9e:	4348      	muls	r0, r1
 8001da0:	9905      	ldr	r1, [sp, #20]
 8001da2:	1e89      	subs	r1, r1, #2
 8001da4:	466a      	mov	r2, sp
 8001da6:	88d2      	ldrh	r2, [r2, #6]
 8001da8:	23f8      	movs	r3, #248	; 0xf8
 8001daa:	01db      	lsls	r3, r3, #7
 8001dac:	4013      	ands	r3, r2
 8001dae:	d12e      	bne.n	8001e0e <PRL_Received+0x29e>
 8001db0:	466a      	mov	r2, sp
 8001db2:	88d2      	ldrh	r2, [r2, #6]
 8001db4:	05d2      	lsls	r2, r2, #23
 8001db6:	0dd2      	lsrs	r2, r2, #23
 8001db8:	466b      	mov	r3, sp
 8001dba:	89db      	ldrh	r3, [r3, #14]
 8001dbc:	2b07      	cmp	r3, #7
 8001dbe:	d30a      	bcc.n	8001dd6 <PRL_Received+0x266>
 8001dc0:	2a1a      	cmp	r2, #26
 8001dc2:	d811      	bhi.n	8001de8 <PRL_Received+0x278>
 8001dc4:	e007      	b.n	8001dd6 <PRL_Received+0x266>
 8001dc6:	0023      	movs	r3, r4
 8001dc8:	332c      	adds	r3, #44	; 0x2c
 8001dca:	5d5b      	ldrb	r3, [r3, r5]
 8001dcc:	6a26      	ldr	r6, [r4, #32]
 8001dce:	182f      	adds	r7, r5, r0
 8001dd0:	55f3      	strb	r3, [r6, r7]
 8001dd2:	1c6d      	adds	r5, r5, #1
 8001dd4:	b2ad      	uxth	r5, r5
 8001dd6:	428d      	cmp	r5, r1
 8001dd8:	d3f5      	bcc.n	8001dc6 <PRL_Received+0x256>
 8001dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ddc:	4291      	cmp	r1, r2
 8001dde:	d301      	bcc.n	8001de4 <PRL_Received+0x274>
 8001de0:	4669      	mov	r1, sp
 8001de2:	8909      	ldrh	r1, [r1, #8]
 8001de4:	8001      	strh	r1, [r0, #0]
 8001de6:	e00b      	b.n	8001e00 <PRL_Received+0x290>
 8001de8:	77e6      	strb	r6, [r4, #31]
 8001dea:	0020      	movs	r0, r4
 8001dec:	302c      	adds	r0, #44	; 0x2c
 8001dee:	5d40      	ldrb	r0, [r0, r5]
 8001df0:	6a21      	ldr	r1, [r4, #32]
 8001df2:	5548      	strb	r0, [r1, r5]
 8001df4:	1c6d      	adds	r5, r5, #1
 8001df6:	2d1a      	cmp	r5, #26
 8001df8:	d3f7      	bcc.n	8001dea <PRL_Received+0x27a>
 8001dfa:	201a      	movs	r0, #26
 8001dfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dfe:	8008      	strh	r0, [r1, #0]
 8001e00:	a80a      	add	r0, sp, #40	; 0x28
 8001e02:	7801      	ldrb	r1, [r0, #0]
 8001e04:	a809      	add	r0, sp, #36	; 0x24
 8001e06:	7800      	ldrb	r0, [r0, #0]
 8001e08:	f7fe fe88 	bl	8000b1c <PE_PRL_PostReceiveEvent>
 8001e0c:	e050      	b.n	8001eb0 <PRL_Received+0x340>
 8001e0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	9b05      	ldr	r3, [sp, #20]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	1e9b      	subs	r3, r3, #2
 8001e18:	27ff      	movs	r7, #255	; 0xff
 8001e1a:	1dbf      	adds	r7, r7, #6
 8001e1c:	321a      	adds	r2, #26
 8001e1e:	42ba      	cmp	r2, r7
 8001e20:	d21a      	bcs.n	8001e58 <PRL_Received+0x2e8>
 8001e22:	466a      	mov	r2, sp
 8001e24:	8912      	ldrh	r2, [r2, #8]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d216      	bcs.n	8001e58 <PRL_Received+0x2e8>
 8001e2a:	77e6      	strb	r6, [r4, #31]
 8001e2c:	e007      	b.n	8001e3e <PRL_Received+0x2ce>
 8001e2e:	0022      	movs	r2, r4
 8001e30:	322c      	adds	r2, #44	; 0x2c
 8001e32:	5d52      	ldrb	r2, [r2, r5]
 8001e34:	6a23      	ldr	r3, [r4, #32]
 8001e36:	182e      	adds	r6, r5, r0
 8001e38:	559a      	strb	r2, [r3, r6]
 8001e3a:	1c6d      	adds	r5, r5, #1
 8001e3c:	b2ad      	uxth	r5, r5
 8001e3e:	428d      	cmp	r5, r1
 8001e40:	d3f5      	bcc.n	8001e2e <PRL_Received+0x2be>
 8001e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e44:	8801      	ldrh	r1, [r0, #0]
 8001e46:	466a      	mov	r2, sp
 8001e48:	8892      	ldrh	r2, [r2, #4]
 8001e4a:	0a92      	lsrs	r2, r2, #10
 8001e4c:	231c      	movs	r3, #28
 8001e4e:	4013      	ands	r3, r2
 8001e50:	1e9a      	subs	r2, r3, #2
 8001e52:	1889      	adds	r1, r1, r2
 8001e54:	8001      	strh	r1, [r0, #0]
 8001e56:	e02b      	b.n	8001eb0 <PRL_Received+0x340>
 8001e58:	42bb      	cmp	r3, r7
 8001e5a:	d214      	bcs.n	8001e86 <PRL_Received+0x316>
 8001e5c:	466a      	mov	r2, sp
 8001e5e:	8912      	ldrh	r2, [r2, #8]
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d310      	bcc.n	8001e86 <PRL_Received+0x316>
 8001e64:	77e6      	strb	r6, [r4, #31]
 8001e66:	e007      	b.n	8001e78 <PRL_Received+0x308>
 8001e68:	0022      	movs	r2, r4
 8001e6a:	322c      	adds	r2, #44	; 0x2c
 8001e6c:	5d52      	ldrb	r2, [r2, r5]
 8001e6e:	6a23      	ldr	r3, [r4, #32]
 8001e70:	182e      	adds	r6, r5, r0
 8001e72:	559a      	strb	r2, [r3, r6]
 8001e74:	1c6d      	adds	r5, r5, #1
 8001e76:	b2ad      	uxth	r5, r5
 8001e78:	428d      	cmp	r5, r1
 8001e7a:	d3f5      	bcc.n	8001e68 <PRL_Received+0x2f8>
 8001e7c:	4668      	mov	r0, sp
 8001e7e:	8900      	ldrh	r0, [r0, #8]
 8001e80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e82:	8008      	strh	r0, [r1, #0]
 8001e84:	e014      	b.n	8001eb0 <PRL_Received+0x340>
 8001e86:	77e5      	strb	r5, [r4, #31]
 8001e88:	e012      	b.n	8001eb0 <PRL_Received+0x340>
 8001e8a:	20ff      	movs	r0, #255	; 0xff
 8001e8c:	7220      	strb	r0, [r4, #8]
 8001e8e:	73a5      	strb	r5, [r4, #14]
 8001e90:	a809      	add	r0, sp, #36	; 0x24
 8001e92:	7800      	ldrb	r0, [r0, #0]
 8001e94:	f7fe fe5e 	bl	8000b54 <PE_PRL_PostReceiveEventError>
 8001e98:	7265      	strb	r5, [r4, #9]
 8001e9a:	2017      	movs	r0, #23
 8001e9c:	9000      	str	r0, [sp, #0]
 8001e9e:	bf00      	nop
 8001ea0:	a363      	add	r3, pc, #396	; (adr r3, 8002030 <.text_50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	a809      	add	r0, sp, #36	; 0x24
 8001ea6:	7801      	ldrb	r1, [r0, #0]
 8001ea8:	2006      	movs	r0, #6
 8001eaa:	4c5d      	ldr	r4, [pc, #372]	; (8002020 <.text_46>)
 8001eac:	6824      	ldr	r4, [r4, #0]
 8001eae:	47a0      	blx	r4
 8001eb0:	b00b      	add	sp, #44	; 0x2c
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eb4 <.text_34>:
 8001eb4:	20000144 	.word	0x20000144

08001eb8 <.text_35>:
 8001eb8:	0000f01f 	.word	0x0000f01f

08001ebc <PRL_ResetIndicate>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	0004      	movs	r4, r0
 8001ec0:	000d      	movs	r5, r1
 8001ec2:	2d05      	cmp	r5, #5
 8001ec4:	d112      	bne.n	8001eec <PRL_ResetIndicate+0x30>
 8001ec6:	4857      	ldr	r0, [pc, #348]	; (8002024 <.text_47>)
 8001ec8:	00a1      	lsls	r1, r4, #2
 8001eca:	1840      	adds	r0, r0, r1
 8001ecc:	9000      	str	r0, [sp, #0]
 8001ece:	6806      	ldr	r6, [r0, #0]
 8001ed0:	2700      	movs	r7, #0
 8001ed2:	72b7      	strb	r7, [r6, #10]
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	1d70      	adds	r0, r6, #5
 8001eda:	f016 fc73 	bl	80187c4 <__aeabi_memset>
 8001ede:	9900      	ldr	r1, [sp, #0]
 8001ee0:	6809      	ldr	r1, [r1, #0]
 8001ee2:	710f      	strb	r7, [r1, #4]
 8001ee4:	7037      	strb	r7, [r6, #0]
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	f7ff fe3d 	bl	8001b66 <PRL_DisableRX>
 8001eec:	2000      	movs	r0, #0
 8001eee:	9000      	str	r0, [sp, #0]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	002a      	movs	r2, r5
 8001ef4:	0021      	movs	r1, r4
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	4e49      	ldr	r6, [pc, #292]	; (8002020 <.text_46>)
 8001efa:	6836      	ldr	r6, [r6, #0]
 8001efc:	47b0      	blx	r6
 8001efe:	0029      	movs	r1, r5
 8001f00:	0020      	movs	r0, r4
 8001f02:	f7fe fd65 	bl	80009d0 <PE_PRL_ResetReceived>
 8001f06:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001f08 <.text_37>:
 8001f08:	08018ab8 	.word	0x08018ab8

08001f0c <PRL_ResetCompleted>:
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4a45      	ldr	r2, [pc, #276]	; (8002024 <.text_47>)
 8001f10:	0080      	lsls	r0, r0, #2
 8001f12:	5810      	ldr	r0, [r2, r0]
 8001f14:	7081      	strb	r1, [r0, #2]
 8001f16:	4770      	bx	lr

08001f18 <.text_39>:
 8001f18:	0000fedf 	.word	0x0000fedf

08001f1c <.text_40>:
 8001f1c:	0000feff 	.word	0x0000feff

08001f20 <PRL_BistCompleted>:
 8001f20:	b580      	push	{r7, lr}
 8001f22:	f7fe fd7a 	bl	8000a1a <PE_PRL_BistCompleted>
 8001f26:	bd01      	pop	{r0, pc}

08001f28 <PRL_TxCompleted>:
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	0004      	movs	r4, r0
 8001f2c:	4a3d      	ldr	r2, [pc, #244]	; (8002024 <.text_47>)
 8001f2e:	00a3      	lsls	r3, r4, #2
 8001f30:	58d6      	ldr	r6, [r2, r3]
 8001f32:	2500      	movs	r5, #0
 8001f34:	7bb2      	ldrb	r2, [r6, #14]
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d002      	beq.n	8001f40 <PRL_TxCompleted+0x18>
 8001f3a:	2a02      	cmp	r2, #2
 8001f3c:	d009      	beq.n	8001f52 <PRL_TxCompleted+0x2a>
 8001f3e:	e010      	b.n	8001f62 <PRL_TxCompleted+0x3a>
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d102      	bne.n	8001f4a <PRL_TxCompleted+0x22>
 8001f44:	f7fe fe36 	bl	8000bb4 <PE_PRL_PostReceiveEventComplete>
 8001f48:	e001      	b.n	8001f4e <PRL_TxCompleted+0x26>
 8001f4a:	f7fe fe03 	bl	8000b54 <PE_PRL_PostReceiveEventError>
 8001f4e:	7275      	strb	r5, [r6, #9]
 8001f50:	e007      	b.n	8001f62 <PRL_TxCompleted+0x3a>
 8001f52:	f00a fe85 	bl	800cc60 <USBPD_PHY_GetRetryTimerValue>
 8001f56:	0001      	movs	r1, r0
 8001f58:	0060      	lsls	r0, r4, #1
 8001f5a:	1c40      	adds	r0, r0, #1
 8001f5c:	b2c0      	uxtb	r0, r0
 8001f5e:	f00c f9a9 	bl	800e2b4 <USBPD_TIM_Start>
 8001f62:	73b5      	strb	r5, [r6, #14]
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f68 <.text_43>:
 8001f68:	0000f13f 	.word	0x0000f13f

08001f6c <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	4c2d      	ldr	r4, [pc, #180]	; (8002024 <.text_47>)
 8001f70:	0080      	lsls	r0, r0, #2
 8001f72:	5820      	ldr	r0, [r4, r0]
 8001f74:	2480      	movs	r4, #128	; 0x80
 8001f76:	0224      	lsls	r4, r4, #8
 8001f78:	8ac5      	ldrh	r5, [r0, #22]
 8001f7a:	4e2b      	ldr	r6, [pc, #172]	; (8002028 <.text_48>)
 8001f7c:	402e      	ands	r6, r5
 8001f7e:	02c9      	lsls	r1, r1, #11
 8001f80:	4331      	orrs	r1, r6
 8001f82:	25fe      	movs	r5, #254	; 0xfe
 8001f84:	022d      	lsls	r5, r5, #8
 8001f86:	400d      	ands	r5, r1
 8001f88:	05d1      	lsls	r1, r2, #23
 8001f8a:	0dc9      	lsrs	r1, r1, #23
 8001f8c:	4329      	orrs	r1, r5
 8001f8e:	4321      	orrs	r1, r4
 8001f90:	82c1      	strh	r1, [r0, #22]
 8001f92:	8a01      	ldrh	r1, [r0, #16]
 8001f94:	430c      	orrs	r4, r1
 8001f96:	8204      	strh	r4, [r0, #16]
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <.text_49>)
 8001f9a:	4022      	ands	r2, r4
 8001f9c:	7e81      	ldrb	r1, [r0, #26]
 8001f9e:	06c9      	lsls	r1, r1, #27
 8001fa0:	0ec9      	lsrs	r1, r1, #27
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	8201      	strh	r1, [r0, #16]
 8001fa6:	7019      	strb	r1, [r3, #0]
 8001fa8:	8a01      	ldrh	r1, [r0, #16]
 8001faa:	0a09      	lsrs	r1, r1, #8
 8001fac:	7059      	strb	r1, [r3, #1]
 8001fae:	8ac1      	ldrh	r1, [r0, #22]
 8001fb0:	7099      	strb	r1, [r3, #2]
 8001fb2:	8ac0      	ldrh	r0, [r0, #22]
 8001fb4:	0a00      	lsrs	r0, r0, #8
 8001fb6:	70d8      	strb	r0, [r3, #3]
 8001fb8:	bd70      	pop	{r4, r5, r6, pc}

08001fba <USBPD_PRL_PrepareChunkRequest>:
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <.text_47>)
 8001fbe:	0080      	lsls	r0, r0, #2
 8001fc0:	5810      	ldr	r0, [r2, r0]
 8001fc2:	8ac3      	ldrh	r3, [r0, #22]
 8001fc4:	2284      	movs	r2, #132	; 0x84
 8001fc6:	0212      	lsls	r2, r2, #8
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	82c2      	strh	r2, [r0, #22]
 8001fcc:	2386      	movs	r3, #134	; 0x86
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	8b02      	ldrh	r2, [r0, #24]
 8001fd4:	0ad2      	lsrs	r2, r2, #11
 8001fd6:	1c52      	adds	r2, r2, #1
 8001fd8:	02d2      	lsls	r2, r2, #11
 8001fda:	24f0      	movs	r4, #240	; 0xf0
 8001fdc:	01e4      	lsls	r4, r4, #7
 8001fde:	4014      	ands	r4, r2
 8001fe0:	431c      	orrs	r4, r3
 8001fe2:	82c4      	strh	r4, [r0, #22]
 8001fe4:	8a03      	ldrh	r3, [r0, #16]
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	0212      	lsls	r2, r2, #8
 8001fea:	431a      	orrs	r2, r3
 8001fec:	0003      	movs	r3, r0
 8001fee:	3310      	adds	r3, #16
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	4c0e      	ldr	r4, [pc, #56]	; (800202c <.text_49>)
 8001ff4:	4014      	ands	r4, r2
 8001ff6:	7e82      	ldrb	r2, [r0, #26]
 8001ff8:	06d2      	lsls	r2, r2, #27
 8001ffa:	0ed2      	lsrs	r2, r2, #27
 8001ffc:	4322      	orrs	r2, r4
 8001ffe:	801a      	strh	r2, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	7102      	strb	r2, [r0, #4]
 8002004:	8a03      	ldrh	r3, [r0, #16]
 8002006:	700b      	strb	r3, [r1, #0]
 8002008:	8a03      	ldrh	r3, [r0, #16]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	704b      	strb	r3, [r1, #1]
 800200e:	8ac3      	ldrh	r3, [r0, #22]
 8002010:	708b      	strb	r3, [r1, #2]
 8002012:	8ac0      	ldrh	r0, [r0, #22]
 8002014:	0a00      	lsrs	r0, r0, #8
 8002016:	70c8      	strb	r0, [r1, #3]
 8002018:	710a      	strb	r2, [r1, #4]
 800201a:	714a      	strb	r2, [r1, #5]
 800201c:	bd10      	pop	{r4, pc}
	...

08002020 <.text_46>:
 8002020:	20000000 	.word	0x20000000

08002024 <.text_47>:
 8002024:	20000144 	.word	0x20000144

08002028 <.text_48>:
 8002028:	000083ff 	.word	0x000083ff

0800202c <.text_49>:
 800202c:	0000ffe0 	.word	0x0000ffe0

08002030 <.text_50>:
 8002030:	5f4c5250 	.word	0x5f4c5250
 8002034:	4e455645 	.word	0x4e455645
 8002038:	58525f54 	.word	0x58525f54
 800203c:	5349445f 	.word	0x5349445f
 8002040:	44524143 	.word	0x44524143
 8002044:	00004445 	.word	0x00004445

08002048 <strlen>:
 8002048:	2300      	movs	r3, #0
 800204a:	5cc2      	ldrb	r2, [r0, r3]
 800204c:	3301      	adds	r3, #1
 800204e:	2a00      	cmp	r2, #0
 8002050:	d1fb      	bne.n	800204a <strlen+0x2>
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	4770      	bx	lr
	...

08002058 <__udivsi3>:
 8002058:	2200      	movs	r2, #0
 800205a:	0843      	lsrs	r3, r0, #1
 800205c:	428b      	cmp	r3, r1
 800205e:	d374      	bcc.n	800214a <__udivsi3+0xf2>
 8002060:	0903      	lsrs	r3, r0, #4
 8002062:	428b      	cmp	r3, r1
 8002064:	d35f      	bcc.n	8002126 <__udivsi3+0xce>
 8002066:	0a03      	lsrs	r3, r0, #8
 8002068:	428b      	cmp	r3, r1
 800206a:	d344      	bcc.n	80020f6 <__udivsi3+0x9e>
 800206c:	0b03      	lsrs	r3, r0, #12
 800206e:	428b      	cmp	r3, r1
 8002070:	d328      	bcc.n	80020c4 <__udivsi3+0x6c>
 8002072:	0c03      	lsrs	r3, r0, #16
 8002074:	428b      	cmp	r3, r1
 8002076:	d30d      	bcc.n	8002094 <__udivsi3+0x3c>
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	0209      	lsls	r1, r1, #8
 800207c:	ba12      	rev	r2, r2
 800207e:	0c03      	lsrs	r3, r0, #16
 8002080:	428b      	cmp	r3, r1
 8002082:	d302      	bcc.n	800208a <__udivsi3+0x32>
 8002084:	1212      	asrs	r2, r2, #8
 8002086:	0209      	lsls	r1, r1, #8
 8002088:	d065      	beq.n	8002156 <__udivsi3+0xfe>
 800208a:	0b03      	lsrs	r3, r0, #12
 800208c:	428b      	cmp	r3, r1
 800208e:	d319      	bcc.n	80020c4 <__udivsi3+0x6c>
 8002090:	e000      	b.n	8002094 <__udivsi3+0x3c>
 8002092:	0a09      	lsrs	r1, r1, #8
 8002094:	0bc3      	lsrs	r3, r0, #15
 8002096:	428b      	cmp	r3, r1
 8002098:	d301      	bcc.n	800209e <__udivsi3+0x46>
 800209a:	03cb      	lsls	r3, r1, #15
 800209c:	1ac0      	subs	r0, r0, r3
 800209e:	4152      	adcs	r2, r2
 80020a0:	0b83      	lsrs	r3, r0, #14
 80020a2:	428b      	cmp	r3, r1
 80020a4:	d301      	bcc.n	80020aa <__udivsi3+0x52>
 80020a6:	038b      	lsls	r3, r1, #14
 80020a8:	1ac0      	subs	r0, r0, r3
 80020aa:	4152      	adcs	r2, r2
 80020ac:	0b43      	lsrs	r3, r0, #13
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d301      	bcc.n	80020b6 <__udivsi3+0x5e>
 80020b2:	034b      	lsls	r3, r1, #13
 80020b4:	1ac0      	subs	r0, r0, r3
 80020b6:	4152      	adcs	r2, r2
 80020b8:	0b03      	lsrs	r3, r0, #12
 80020ba:	428b      	cmp	r3, r1
 80020bc:	d301      	bcc.n	80020c2 <__udivsi3+0x6a>
 80020be:	030b      	lsls	r3, r1, #12
 80020c0:	1ac0      	subs	r0, r0, r3
 80020c2:	4152      	adcs	r2, r2
 80020c4:	0ac3      	lsrs	r3, r0, #11
 80020c6:	428b      	cmp	r3, r1
 80020c8:	d301      	bcc.n	80020ce <__udivsi3+0x76>
 80020ca:	02cb      	lsls	r3, r1, #11
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	4152      	adcs	r2, r2
 80020d0:	0a83      	lsrs	r3, r0, #10
 80020d2:	428b      	cmp	r3, r1
 80020d4:	d301      	bcc.n	80020da <__udivsi3+0x82>
 80020d6:	028b      	lsls	r3, r1, #10
 80020d8:	1ac0      	subs	r0, r0, r3
 80020da:	4152      	adcs	r2, r2
 80020dc:	0a43      	lsrs	r3, r0, #9
 80020de:	428b      	cmp	r3, r1
 80020e0:	d301      	bcc.n	80020e6 <__udivsi3+0x8e>
 80020e2:	024b      	lsls	r3, r1, #9
 80020e4:	1ac0      	subs	r0, r0, r3
 80020e6:	4152      	adcs	r2, r2
 80020e8:	0a03      	lsrs	r3, r0, #8
 80020ea:	428b      	cmp	r3, r1
 80020ec:	d301      	bcc.n	80020f2 <__udivsi3+0x9a>
 80020ee:	020b      	lsls	r3, r1, #8
 80020f0:	1ac0      	subs	r0, r0, r3
 80020f2:	4152      	adcs	r2, r2
 80020f4:	d2cd      	bcs.n	8002092 <__udivsi3+0x3a>
 80020f6:	09c3      	lsrs	r3, r0, #7
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d301      	bcc.n	8002100 <__udivsi3+0xa8>
 80020fc:	01cb      	lsls	r3, r1, #7
 80020fe:	1ac0      	subs	r0, r0, r3
 8002100:	4152      	adcs	r2, r2
 8002102:	0983      	lsrs	r3, r0, #6
 8002104:	428b      	cmp	r3, r1
 8002106:	d301      	bcc.n	800210c <__udivsi3+0xb4>
 8002108:	018b      	lsls	r3, r1, #6
 800210a:	1ac0      	subs	r0, r0, r3
 800210c:	4152      	adcs	r2, r2
 800210e:	0943      	lsrs	r3, r0, #5
 8002110:	428b      	cmp	r3, r1
 8002112:	d301      	bcc.n	8002118 <__udivsi3+0xc0>
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	1ac0      	subs	r0, r0, r3
 8002118:	4152      	adcs	r2, r2
 800211a:	0903      	lsrs	r3, r0, #4
 800211c:	428b      	cmp	r3, r1
 800211e:	d301      	bcc.n	8002124 <__udivsi3+0xcc>
 8002120:	010b      	lsls	r3, r1, #4
 8002122:	1ac0      	subs	r0, r0, r3
 8002124:	4152      	adcs	r2, r2
 8002126:	08c3      	lsrs	r3, r0, #3
 8002128:	428b      	cmp	r3, r1
 800212a:	d301      	bcc.n	8002130 <__udivsi3+0xd8>
 800212c:	00cb      	lsls	r3, r1, #3
 800212e:	1ac0      	subs	r0, r0, r3
 8002130:	4152      	adcs	r2, r2
 8002132:	0883      	lsrs	r3, r0, #2
 8002134:	428b      	cmp	r3, r1
 8002136:	d301      	bcc.n	800213c <__udivsi3+0xe4>
 8002138:	008b      	lsls	r3, r1, #2
 800213a:	1ac0      	subs	r0, r0, r3
 800213c:	4152      	adcs	r2, r2
 800213e:	0843      	lsrs	r3, r0, #1
 8002140:	428b      	cmp	r3, r1
 8002142:	d301      	bcc.n	8002148 <__udivsi3+0xf0>
 8002144:	004b      	lsls	r3, r1, #1
 8002146:	1ac0      	subs	r0, r0, r3
 8002148:	4152      	adcs	r2, r2
 800214a:	1a41      	subs	r1, r0, r1
 800214c:	d200      	bcs.n	8002150 <__udivsi3+0xf8>
 800214e:	4601      	mov	r1, r0
 8002150:	4152      	adcs	r2, r2
 8002152:	4610      	mov	r0, r2
 8002154:	4770      	bx	lr
 8002156:	e7ff      	b.n	8002158 <__udivsi3+0x100>
 8002158:	b501      	push	{r0, lr}
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f8f0 	bl	8002340 <__aeabi_idiv0>
 8002160:	bd02      	pop	{r1, pc}
 8002162:	46c0      	nop			; (mov r8, r8)

08002164 <__aeabi_uidivmod>:
 8002164:	2900      	cmp	r1, #0
 8002166:	d0f7      	beq.n	8002158 <__udivsi3+0x100>
 8002168:	e776      	b.n	8002058 <__udivsi3>
 800216a:	4770      	bx	lr

0800216c <__divsi3>:
 800216c:	4603      	mov	r3, r0
 800216e:	430b      	orrs	r3, r1
 8002170:	d47f      	bmi.n	8002272 <__divsi3+0x106>
 8002172:	2200      	movs	r2, #0
 8002174:	0843      	lsrs	r3, r0, #1
 8002176:	428b      	cmp	r3, r1
 8002178:	d374      	bcc.n	8002264 <__divsi3+0xf8>
 800217a:	0903      	lsrs	r3, r0, #4
 800217c:	428b      	cmp	r3, r1
 800217e:	d35f      	bcc.n	8002240 <__divsi3+0xd4>
 8002180:	0a03      	lsrs	r3, r0, #8
 8002182:	428b      	cmp	r3, r1
 8002184:	d344      	bcc.n	8002210 <__divsi3+0xa4>
 8002186:	0b03      	lsrs	r3, r0, #12
 8002188:	428b      	cmp	r3, r1
 800218a:	d328      	bcc.n	80021de <__divsi3+0x72>
 800218c:	0c03      	lsrs	r3, r0, #16
 800218e:	428b      	cmp	r3, r1
 8002190:	d30d      	bcc.n	80021ae <__divsi3+0x42>
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	0209      	lsls	r1, r1, #8
 8002196:	ba12      	rev	r2, r2
 8002198:	0c03      	lsrs	r3, r0, #16
 800219a:	428b      	cmp	r3, r1
 800219c:	d302      	bcc.n	80021a4 <__divsi3+0x38>
 800219e:	1212      	asrs	r2, r2, #8
 80021a0:	0209      	lsls	r1, r1, #8
 80021a2:	d065      	beq.n	8002270 <__divsi3+0x104>
 80021a4:	0b03      	lsrs	r3, r0, #12
 80021a6:	428b      	cmp	r3, r1
 80021a8:	d319      	bcc.n	80021de <__divsi3+0x72>
 80021aa:	e000      	b.n	80021ae <__divsi3+0x42>
 80021ac:	0a09      	lsrs	r1, r1, #8
 80021ae:	0bc3      	lsrs	r3, r0, #15
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d301      	bcc.n	80021b8 <__divsi3+0x4c>
 80021b4:	03cb      	lsls	r3, r1, #15
 80021b6:	1ac0      	subs	r0, r0, r3
 80021b8:	4152      	adcs	r2, r2
 80021ba:	0b83      	lsrs	r3, r0, #14
 80021bc:	428b      	cmp	r3, r1
 80021be:	d301      	bcc.n	80021c4 <__divsi3+0x58>
 80021c0:	038b      	lsls	r3, r1, #14
 80021c2:	1ac0      	subs	r0, r0, r3
 80021c4:	4152      	adcs	r2, r2
 80021c6:	0b43      	lsrs	r3, r0, #13
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d301      	bcc.n	80021d0 <__divsi3+0x64>
 80021cc:	034b      	lsls	r3, r1, #13
 80021ce:	1ac0      	subs	r0, r0, r3
 80021d0:	4152      	adcs	r2, r2
 80021d2:	0b03      	lsrs	r3, r0, #12
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d301      	bcc.n	80021dc <__divsi3+0x70>
 80021d8:	030b      	lsls	r3, r1, #12
 80021da:	1ac0      	subs	r0, r0, r3
 80021dc:	4152      	adcs	r2, r2
 80021de:	0ac3      	lsrs	r3, r0, #11
 80021e0:	428b      	cmp	r3, r1
 80021e2:	d301      	bcc.n	80021e8 <__divsi3+0x7c>
 80021e4:	02cb      	lsls	r3, r1, #11
 80021e6:	1ac0      	subs	r0, r0, r3
 80021e8:	4152      	adcs	r2, r2
 80021ea:	0a83      	lsrs	r3, r0, #10
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d301      	bcc.n	80021f4 <__divsi3+0x88>
 80021f0:	028b      	lsls	r3, r1, #10
 80021f2:	1ac0      	subs	r0, r0, r3
 80021f4:	4152      	adcs	r2, r2
 80021f6:	0a43      	lsrs	r3, r0, #9
 80021f8:	428b      	cmp	r3, r1
 80021fa:	d301      	bcc.n	8002200 <__divsi3+0x94>
 80021fc:	024b      	lsls	r3, r1, #9
 80021fe:	1ac0      	subs	r0, r0, r3
 8002200:	4152      	adcs	r2, r2
 8002202:	0a03      	lsrs	r3, r0, #8
 8002204:	428b      	cmp	r3, r1
 8002206:	d301      	bcc.n	800220c <__divsi3+0xa0>
 8002208:	020b      	lsls	r3, r1, #8
 800220a:	1ac0      	subs	r0, r0, r3
 800220c:	4152      	adcs	r2, r2
 800220e:	d2cd      	bcs.n	80021ac <__divsi3+0x40>
 8002210:	09c3      	lsrs	r3, r0, #7
 8002212:	428b      	cmp	r3, r1
 8002214:	d301      	bcc.n	800221a <__divsi3+0xae>
 8002216:	01cb      	lsls	r3, r1, #7
 8002218:	1ac0      	subs	r0, r0, r3
 800221a:	4152      	adcs	r2, r2
 800221c:	0983      	lsrs	r3, r0, #6
 800221e:	428b      	cmp	r3, r1
 8002220:	d301      	bcc.n	8002226 <__divsi3+0xba>
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	1ac0      	subs	r0, r0, r3
 8002226:	4152      	adcs	r2, r2
 8002228:	0943      	lsrs	r3, r0, #5
 800222a:	428b      	cmp	r3, r1
 800222c:	d301      	bcc.n	8002232 <__divsi3+0xc6>
 800222e:	014b      	lsls	r3, r1, #5
 8002230:	1ac0      	subs	r0, r0, r3
 8002232:	4152      	adcs	r2, r2
 8002234:	0903      	lsrs	r3, r0, #4
 8002236:	428b      	cmp	r3, r1
 8002238:	d301      	bcc.n	800223e <__divsi3+0xd2>
 800223a:	010b      	lsls	r3, r1, #4
 800223c:	1ac0      	subs	r0, r0, r3
 800223e:	4152      	adcs	r2, r2
 8002240:	08c3      	lsrs	r3, r0, #3
 8002242:	428b      	cmp	r3, r1
 8002244:	d301      	bcc.n	800224a <__divsi3+0xde>
 8002246:	00cb      	lsls	r3, r1, #3
 8002248:	1ac0      	subs	r0, r0, r3
 800224a:	4152      	adcs	r2, r2
 800224c:	0883      	lsrs	r3, r0, #2
 800224e:	428b      	cmp	r3, r1
 8002250:	d301      	bcc.n	8002256 <__divsi3+0xea>
 8002252:	008b      	lsls	r3, r1, #2
 8002254:	1ac0      	subs	r0, r0, r3
 8002256:	4152      	adcs	r2, r2
 8002258:	0843      	lsrs	r3, r0, #1
 800225a:	428b      	cmp	r3, r1
 800225c:	d301      	bcc.n	8002262 <__divsi3+0xf6>
 800225e:	004b      	lsls	r3, r1, #1
 8002260:	1ac0      	subs	r0, r0, r3
 8002262:	4152      	adcs	r2, r2
 8002264:	1a41      	subs	r1, r0, r1
 8002266:	d200      	bcs.n	800226a <__divsi3+0xfe>
 8002268:	4601      	mov	r1, r0
 800226a:	4152      	adcs	r2, r2
 800226c:	4610      	mov	r0, r2
 800226e:	4770      	bx	lr
 8002270:	e05d      	b.n	800232e <__divsi3+0x1c2>
 8002272:	0fca      	lsrs	r2, r1, #31
 8002274:	d000      	beq.n	8002278 <__divsi3+0x10c>
 8002276:	4249      	negs	r1, r1
 8002278:	1003      	asrs	r3, r0, #32
 800227a:	d300      	bcc.n	800227e <__divsi3+0x112>
 800227c:	4240      	negs	r0, r0
 800227e:	4053      	eors	r3, r2
 8002280:	2200      	movs	r2, #0
 8002282:	469c      	mov	ip, r3
 8002284:	0903      	lsrs	r3, r0, #4
 8002286:	428b      	cmp	r3, r1
 8002288:	d32d      	bcc.n	80022e6 <__divsi3+0x17a>
 800228a:	0a03      	lsrs	r3, r0, #8
 800228c:	428b      	cmp	r3, r1
 800228e:	d312      	bcc.n	80022b6 <__divsi3+0x14a>
 8002290:	22fc      	movs	r2, #252	; 0xfc
 8002292:	0189      	lsls	r1, r1, #6
 8002294:	ba12      	rev	r2, r2
 8002296:	0a03      	lsrs	r3, r0, #8
 8002298:	428b      	cmp	r3, r1
 800229a:	d30c      	bcc.n	80022b6 <__divsi3+0x14a>
 800229c:	0189      	lsls	r1, r1, #6
 800229e:	1192      	asrs	r2, r2, #6
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d308      	bcc.n	80022b6 <__divsi3+0x14a>
 80022a4:	0189      	lsls	r1, r1, #6
 80022a6:	1192      	asrs	r2, r2, #6
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d304      	bcc.n	80022b6 <__divsi3+0x14a>
 80022ac:	0189      	lsls	r1, r1, #6
 80022ae:	d03a      	beq.n	8002326 <__divsi3+0x1ba>
 80022b0:	1192      	asrs	r2, r2, #6
 80022b2:	e000      	b.n	80022b6 <__divsi3+0x14a>
 80022b4:	0989      	lsrs	r1, r1, #6
 80022b6:	09c3      	lsrs	r3, r0, #7
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d301      	bcc.n	80022c0 <__divsi3+0x154>
 80022bc:	01cb      	lsls	r3, r1, #7
 80022be:	1ac0      	subs	r0, r0, r3
 80022c0:	4152      	adcs	r2, r2
 80022c2:	0983      	lsrs	r3, r0, #6
 80022c4:	428b      	cmp	r3, r1
 80022c6:	d301      	bcc.n	80022cc <__divsi3+0x160>
 80022c8:	018b      	lsls	r3, r1, #6
 80022ca:	1ac0      	subs	r0, r0, r3
 80022cc:	4152      	adcs	r2, r2
 80022ce:	0943      	lsrs	r3, r0, #5
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d301      	bcc.n	80022d8 <__divsi3+0x16c>
 80022d4:	014b      	lsls	r3, r1, #5
 80022d6:	1ac0      	subs	r0, r0, r3
 80022d8:	4152      	adcs	r2, r2
 80022da:	0903      	lsrs	r3, r0, #4
 80022dc:	428b      	cmp	r3, r1
 80022de:	d301      	bcc.n	80022e4 <__divsi3+0x178>
 80022e0:	010b      	lsls	r3, r1, #4
 80022e2:	1ac0      	subs	r0, r0, r3
 80022e4:	4152      	adcs	r2, r2
 80022e6:	08c3      	lsrs	r3, r0, #3
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d301      	bcc.n	80022f0 <__divsi3+0x184>
 80022ec:	00cb      	lsls	r3, r1, #3
 80022ee:	1ac0      	subs	r0, r0, r3
 80022f0:	4152      	adcs	r2, r2
 80022f2:	0883      	lsrs	r3, r0, #2
 80022f4:	428b      	cmp	r3, r1
 80022f6:	d301      	bcc.n	80022fc <__divsi3+0x190>
 80022f8:	008b      	lsls	r3, r1, #2
 80022fa:	1ac0      	subs	r0, r0, r3
 80022fc:	4152      	adcs	r2, r2
 80022fe:	d2d9      	bcs.n	80022b4 <__divsi3+0x148>
 8002300:	0843      	lsrs	r3, r0, #1
 8002302:	428b      	cmp	r3, r1
 8002304:	d301      	bcc.n	800230a <__divsi3+0x19e>
 8002306:	004b      	lsls	r3, r1, #1
 8002308:	1ac0      	subs	r0, r0, r3
 800230a:	4152      	adcs	r2, r2
 800230c:	1a41      	subs	r1, r0, r1
 800230e:	d200      	bcs.n	8002312 <__divsi3+0x1a6>
 8002310:	4601      	mov	r1, r0
 8002312:	4663      	mov	r3, ip
 8002314:	4152      	adcs	r2, r2
 8002316:	105b      	asrs	r3, r3, #1
 8002318:	4610      	mov	r0, r2
 800231a:	d301      	bcc.n	8002320 <__divsi3+0x1b4>
 800231c:	4240      	negs	r0, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d500      	bpl.n	8002324 <__divsi3+0x1b8>
 8002322:	4249      	negs	r1, r1
 8002324:	4770      	bx	lr
 8002326:	4663      	mov	r3, ip
 8002328:	105b      	asrs	r3, r3, #1
 800232a:	d300      	bcc.n	800232e <__divsi3+0x1c2>
 800232c:	4240      	negs	r0, r0
 800232e:	b501      	push	{r0, lr}
 8002330:	2000      	movs	r0, #0
 8002332:	f000 f805 	bl	8002340 <__aeabi_idiv0>
 8002336:	bd02      	pop	{r1, pc}

08002338 <__aeabi_idivmod>:
 8002338:	2900      	cmp	r1, #0
 800233a:	d0f8      	beq.n	800232e <__divsi3+0x1c2>
 800233c:	e716      	b.n	800216c <__divsi3>
 800233e:	4770      	bx	lr

08002340 <__aeabi_idiv0>:
 8002340:	4770      	bx	lr
 8002342:	46c0      	nop			; (mov r8, r8)

08002344 <__aeabi_uldivmod>:
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <__aeabi_uldivmod+0x28>
 8002348:	2a00      	cmp	r2, #0
 800234a:	d10f      	bne.n	800236c <__aeabi_uldivmod+0x28>
 800234c:	2900      	cmp	r1, #0
 800234e:	d100      	bne.n	8002352 <__aeabi_uldivmod+0xe>
 8002350:	2800      	cmp	r0, #0
 8002352:	d002      	beq.n	800235a <__aeabi_uldivmod+0x16>
 8002354:	2100      	movs	r1, #0
 8002356:	43c9      	mvns	r1, r1
 8002358:	0008      	movs	r0, r1
 800235a:	b407      	push	{r0, r1, r2}
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <__aeabi_uldivmod+0x24>)
 800235e:	a102      	add	r1, pc, #8	; (adr r1, 8002368 <__aeabi_uldivmod+0x24>)
 8002360:	1840      	adds	r0, r0, r1
 8002362:	9002      	str	r0, [sp, #8]
 8002364:	bd03      	pop	{r0, r1, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	ffffffd9 	.word	0xffffffd9
 800236c:	b403      	push	{r0, r1}
 800236e:	4668      	mov	r0, sp
 8002370:	b501      	push	{r0, lr}
 8002372:	9802      	ldr	r0, [sp, #8]
 8002374:	f000 f806 	bl	8002384 <__udivmoddi4>
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	469e      	mov	lr, r3
 800237c:	b002      	add	sp, #8
 800237e:	bc0c      	pop	{r2, r3}
 8002380:	4770      	bx	lr
 8002382:	46c0      	nop			; (mov r8, r8)

08002384 <__udivmoddi4>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	4657      	mov	r7, sl
 8002388:	464e      	mov	r6, r9
 800238a:	4645      	mov	r5, r8
 800238c:	46de      	mov	lr, fp
 800238e:	b5e0      	push	{r5, r6, r7, lr}
 8002390:	0004      	movs	r4, r0
 8002392:	000d      	movs	r5, r1
 8002394:	4692      	mov	sl, r2
 8002396:	4699      	mov	r9, r3
 8002398:	b083      	sub	sp, #12
 800239a:	428b      	cmp	r3, r1
 800239c:	d830      	bhi.n	8002400 <__udivmoddi4+0x7c>
 800239e:	d02d      	beq.n	80023fc <__udivmoddi4+0x78>
 80023a0:	4649      	mov	r1, r9
 80023a2:	4650      	mov	r0, sl
 80023a4:	f000 f8ba 	bl	800251c <__clzdi2>
 80023a8:	0029      	movs	r1, r5
 80023aa:	0006      	movs	r6, r0
 80023ac:	0020      	movs	r0, r4
 80023ae:	f000 f8b5 	bl	800251c <__clzdi2>
 80023b2:	1a33      	subs	r3, r6, r0
 80023b4:	4698      	mov	r8, r3
 80023b6:	3b20      	subs	r3, #32
 80023b8:	d434      	bmi.n	8002424 <__udivmoddi4+0xa0>
 80023ba:	469b      	mov	fp, r3
 80023bc:	4653      	mov	r3, sl
 80023be:	465a      	mov	r2, fp
 80023c0:	4093      	lsls	r3, r2
 80023c2:	4642      	mov	r2, r8
 80023c4:	001f      	movs	r7, r3
 80023c6:	4653      	mov	r3, sl
 80023c8:	4093      	lsls	r3, r2
 80023ca:	001e      	movs	r6, r3
 80023cc:	42af      	cmp	r7, r5
 80023ce:	d83b      	bhi.n	8002448 <__udivmoddi4+0xc4>
 80023d0:	42af      	cmp	r7, r5
 80023d2:	d100      	bne.n	80023d6 <__udivmoddi4+0x52>
 80023d4:	e079      	b.n	80024ca <__udivmoddi4+0x146>
 80023d6:	465b      	mov	r3, fp
 80023d8:	1ba4      	subs	r4, r4, r6
 80023da:	41bd      	sbcs	r5, r7
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da00      	bge.n	80023e2 <__udivmoddi4+0x5e>
 80023e0:	e076      	b.n	80024d0 <__udivmoddi4+0x14c>
 80023e2:	2200      	movs	r2, #0
 80023e4:	2300      	movs	r3, #0
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2301      	movs	r3, #1
 80023ec:	465a      	mov	r2, fp
 80023ee:	4093      	lsls	r3, r2
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2301      	movs	r3, #1
 80023f4:	4642      	mov	r2, r8
 80023f6:	4093      	lsls	r3, r2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	e029      	b.n	8002450 <__udivmoddi4+0xcc>
 80023fc:	4282      	cmp	r2, r0
 80023fe:	d9cf      	bls.n	80023a0 <__udivmoddi4+0x1c>
 8002400:	2200      	movs	r2, #0
 8002402:	2300      	movs	r3, #0
 8002404:	9200      	str	r2, [sp, #0]
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <__udivmoddi4+0x8e>
 800240e:	601c      	str	r4, [r3, #0]
 8002410:	605d      	str	r5, [r3, #4]
 8002412:	9800      	ldr	r0, [sp, #0]
 8002414:	9901      	ldr	r1, [sp, #4]
 8002416:	b003      	add	sp, #12
 8002418:	bcf0      	pop	{r4, r5, r6, r7}
 800241a:	46bb      	mov	fp, r7
 800241c:	46b2      	mov	sl, r6
 800241e:	46a9      	mov	r9, r5
 8002420:	46a0      	mov	r8, r4
 8002422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002424:	4642      	mov	r2, r8
 8002426:	469b      	mov	fp, r3
 8002428:	2320      	movs	r3, #32
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	4652      	mov	r2, sl
 800242e:	40da      	lsrs	r2, r3
 8002430:	4641      	mov	r1, r8
 8002432:	0013      	movs	r3, r2
 8002434:	464a      	mov	r2, r9
 8002436:	408a      	lsls	r2, r1
 8002438:	0017      	movs	r7, r2
 800243a:	4642      	mov	r2, r8
 800243c:	431f      	orrs	r7, r3
 800243e:	4653      	mov	r3, sl
 8002440:	4093      	lsls	r3, r2
 8002442:	001e      	movs	r6, r3
 8002444:	42af      	cmp	r7, r5
 8002446:	d9c3      	bls.n	80023d0 <__udivmoddi4+0x4c>
 8002448:	2200      	movs	r2, #0
 800244a:	2300      	movs	r3, #0
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	4643      	mov	r3, r8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0d8      	beq.n	8002408 <__udivmoddi4+0x84>
 8002456:	07fb      	lsls	r3, r7, #31
 8002458:	0872      	lsrs	r2, r6, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	4646      	mov	r6, r8
 800245e:	087b      	lsrs	r3, r7, #1
 8002460:	e00e      	b.n	8002480 <__udivmoddi4+0xfc>
 8002462:	42ab      	cmp	r3, r5
 8002464:	d101      	bne.n	800246a <__udivmoddi4+0xe6>
 8002466:	42a2      	cmp	r2, r4
 8002468:	d80c      	bhi.n	8002484 <__udivmoddi4+0x100>
 800246a:	1aa4      	subs	r4, r4, r2
 800246c:	419d      	sbcs	r5, r3
 800246e:	2001      	movs	r0, #1
 8002470:	1924      	adds	r4, r4, r4
 8002472:	416d      	adcs	r5, r5
 8002474:	2100      	movs	r1, #0
 8002476:	3e01      	subs	r6, #1
 8002478:	1824      	adds	r4, r4, r0
 800247a:	414d      	adcs	r5, r1
 800247c:	2e00      	cmp	r6, #0
 800247e:	d006      	beq.n	800248e <__udivmoddi4+0x10a>
 8002480:	42ab      	cmp	r3, r5
 8002482:	d9ee      	bls.n	8002462 <__udivmoddi4+0xde>
 8002484:	3e01      	subs	r6, #1
 8002486:	1924      	adds	r4, r4, r4
 8002488:	416d      	adcs	r5, r5
 800248a:	2e00      	cmp	r6, #0
 800248c:	d1f8      	bne.n	8002480 <__udivmoddi4+0xfc>
 800248e:	9800      	ldr	r0, [sp, #0]
 8002490:	9901      	ldr	r1, [sp, #4]
 8002492:	465b      	mov	r3, fp
 8002494:	1900      	adds	r0, r0, r4
 8002496:	4169      	adcs	r1, r5
 8002498:	2b00      	cmp	r3, #0
 800249a:	db24      	blt.n	80024e6 <__udivmoddi4+0x162>
 800249c:	002b      	movs	r3, r5
 800249e:	465a      	mov	r2, fp
 80024a0:	4644      	mov	r4, r8
 80024a2:	40d3      	lsrs	r3, r2
 80024a4:	002a      	movs	r2, r5
 80024a6:	40e2      	lsrs	r2, r4
 80024a8:	001c      	movs	r4, r3
 80024aa:	465b      	mov	r3, fp
 80024ac:	0015      	movs	r5, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db2a      	blt.n	8002508 <__udivmoddi4+0x184>
 80024b2:	0026      	movs	r6, r4
 80024b4:	409e      	lsls	r6, r3
 80024b6:	0033      	movs	r3, r6
 80024b8:	0026      	movs	r6, r4
 80024ba:	4647      	mov	r7, r8
 80024bc:	40be      	lsls	r6, r7
 80024be:	0032      	movs	r2, r6
 80024c0:	1a80      	subs	r0, r0, r2
 80024c2:	4199      	sbcs	r1, r3
 80024c4:	9000      	str	r0, [sp, #0]
 80024c6:	9101      	str	r1, [sp, #4]
 80024c8:	e79e      	b.n	8002408 <__udivmoddi4+0x84>
 80024ca:	42a3      	cmp	r3, r4
 80024cc:	d8bc      	bhi.n	8002448 <__udivmoddi4+0xc4>
 80024ce:	e782      	b.n	80023d6 <__udivmoddi4+0x52>
 80024d0:	4642      	mov	r2, r8
 80024d2:	2320      	movs	r3, #32
 80024d4:	2100      	movs	r1, #0
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	2200      	movs	r2, #0
 80024da:	9100      	str	r1, [sp, #0]
 80024dc:	9201      	str	r2, [sp, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	40da      	lsrs	r2, r3
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	e785      	b.n	80023f2 <__udivmoddi4+0x6e>
 80024e6:	4642      	mov	r2, r8
 80024e8:	2320      	movs	r3, #32
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	002a      	movs	r2, r5
 80024ee:	4646      	mov	r6, r8
 80024f0:	409a      	lsls	r2, r3
 80024f2:	0023      	movs	r3, r4
 80024f4:	40f3      	lsrs	r3, r6
 80024f6:	4644      	mov	r4, r8
 80024f8:	4313      	orrs	r3, r2
 80024fa:	002a      	movs	r2, r5
 80024fc:	40e2      	lsrs	r2, r4
 80024fe:	001c      	movs	r4, r3
 8002500:	465b      	mov	r3, fp
 8002502:	0015      	movs	r5, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	dad4      	bge.n	80024b2 <__udivmoddi4+0x12e>
 8002508:	4642      	mov	r2, r8
 800250a:	002f      	movs	r7, r5
 800250c:	2320      	movs	r3, #32
 800250e:	0026      	movs	r6, r4
 8002510:	4097      	lsls	r7, r2
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	40de      	lsrs	r6, r3
 8002516:	003b      	movs	r3, r7
 8002518:	4333      	orrs	r3, r6
 800251a:	e7cd      	b.n	80024b8 <__udivmoddi4+0x134>

0800251c <__clzdi2>:
 800251c:	b510      	push	{r4, lr}
 800251e:	2900      	cmp	r1, #0
 8002520:	d103      	bne.n	800252a <__clzdi2+0xe>
 8002522:	f000 f807 	bl	8002534 <__clzsi2>
 8002526:	3020      	adds	r0, #32
 8002528:	e002      	b.n	8002530 <__clzdi2+0x14>
 800252a:	0008      	movs	r0, r1
 800252c:	f000 f802 	bl	8002534 <__clzsi2>
 8002530:	bd10      	pop	{r4, pc}
 8002532:	46c0      	nop			; (mov r8, r8)

08002534 <__clzsi2>:
 8002534:	211c      	movs	r1, #28
 8002536:	2301      	movs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	4298      	cmp	r0, r3
 800253c:	d301      	bcc.n	8002542 <__clzsi2+0xe>
 800253e:	0c00      	lsrs	r0, r0, #16
 8002540:	3910      	subs	r1, #16
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	4298      	cmp	r0, r3
 8002546:	d301      	bcc.n	800254c <__clzsi2+0x18>
 8002548:	0a00      	lsrs	r0, r0, #8
 800254a:	3908      	subs	r1, #8
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	4298      	cmp	r0, r3
 8002550:	d301      	bcc.n	8002556 <__clzsi2+0x22>
 8002552:	0900      	lsrs	r0, r0, #4
 8002554:	3904      	subs	r1, #4
 8002556:	a202      	add	r2, pc, #8	; (adr r2, 8002560 <__clzsi2+0x2c>)
 8002558:	5c10      	ldrb	r0, [r2, r0]
 800255a:	1840      	adds	r0, r0, r1
 800255c:	4770      	bx	lr
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	02020304 	.word	0x02020304
 8002564:	01010101 	.word	0x01010101
	...

08002570 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b087      	sub	sp, #28
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <tx_application_define+0x78>)
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <tx_application_define+0x7c>)
 8002580:	481b      	ldr	r0, [pc, #108]	; (80025f0 <tx_application_define+0x80>)
 8002582:	2434      	movs	r4, #52	; 0x34
 8002584:	9400      	str	r4, [sp, #0]
 8002586:	f00f fc6d 	bl	8011e64 <_txe_byte_pool_create>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d105      	bne.n	800259a <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <tx_application_define+0x80>)
 8002590:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f839 	bl	800260c <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <tx_application_define+0x84>)
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <tx_application_define+0x88>)
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <tx_application_define+0x8c>)
 80025a4:	2434      	movs	r4, #52	; 0x34
 80025a6:	9400      	str	r4, [sp, #0]
 80025a8:	f00f fc5c 	bl	8011e64 <_txe_byte_pool_create>
 80025ac:	1e03      	subs	r3, r0, #0
 80025ae:	d105      	bne.n	80025bc <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <tx_application_define+0x8c>)
 80025b2:	60fb      	str	r3, [r7, #12]

    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f014 f908 	bl	80167cc <MX_NetXDuo_Init>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80025bc:	2390      	movs	r3, #144	; 0x90
 80025be:	025b      	lsls	r3, r3, #9
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <tx_application_define+0x90>)
 80025c2:	4910      	ldr	r1, [pc, #64]	; (8002604 <tx_application_define+0x94>)
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <tx_application_define+0x98>)
 80025c6:	2434      	movs	r4, #52	; 0x34
 80025c8:	9400      	str	r4, [sp, #0]
 80025ca:	f00f fc4b 	bl	8011e64 <_txe_byte_pool_create>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d105      	bne.n	80025de <tx_application_define+0x6e>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <tx_application_define+0x98>)
 80025d4:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0018      	movs	r0, r3
 80025da:	f014 fd75 	bl	80170c8 <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b005      	add	sp, #20
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	20000150 	.word	0x20000150
 80025ec:	08018808 	.word	0x08018808
 80025f0:	20006150 	.word	0x20006150
 80025f4:	20006184 	.word	0x20006184
 80025f8:	0801881c 	.word	0x0801881c
 80025fc:	20006584 	.word	0x20006584
 8002600:	200065b8 	.word	0x200065b8
 8002604:	08018830 	.word	0x08018830
 8002608:	200185b8 	.word	0x200185b8

0800260c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08f      	sub	sp, #60	; 0x3c
 8002610:	af08      	add	r7, sp, #32
 8002612:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	613b      	str	r3, [r7, #16]
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  char* pointer;
  if (tx_byte_allocate(byte_pool, (void**)&pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	230c      	movs	r3, #12
 8002622:	18f9      	adds	r1, r7, r3
 8002624:	6938      	ldr	r0, [r7, #16]
 8002626:	2300      	movs	r3, #0
 8002628:	f00f fba6 	bl	8011d78 <_txe_byte_allocate>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d001      	beq.n	8002634 <App_ThreadX_Init+0x28>
  {
	  return TX_POOL_ERROR;
 8002630:	2302      	movs	r3, #2
 8002632:	e024      	b.n	800267e <App_ThreadX_Init+0x72>
  }
  if (tx_thread_create(&tx_app_thread, "Main Thread", MainThread_Entry, 0, pointer, TX_APP_STACK_SIZE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4c14      	ldr	r4, [pc, #80]	; (8002688 <App_ThreadX_Init+0x7c>)
 8002638:	4914      	ldr	r1, [pc, #80]	; (800268c <App_ThreadX_Init+0x80>)
 800263a:	4815      	ldr	r0, [pc, #84]	; (8002690 <App_ThreadX_Init+0x84>)
 800263c:	22b0      	movs	r2, #176	; 0xb0
 800263e:	9206      	str	r2, [sp, #24]
 8002640:	2201      	movs	r2, #1
 8002642:	9205      	str	r2, [sp, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	9204      	str	r2, [sp, #16]
 8002648:	221e      	movs	r2, #30
 800264a:	9203      	str	r2, [sp, #12]
 800264c:	221e      	movs	r2, #30
 800264e:	9202      	str	r2, [sp, #8]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	9201      	str	r2, [sp, #4]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2300      	movs	r3, #0
 800265a:	0022      	movs	r2, r4
 800265c:	f010 f9b0 	bl	80129c0 <_txe_thread_create>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <App_ThreadX_Init+0x5c>
		  TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD, TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
	  return TX_THREAD_ERROR;
 8002664:	230e      	movs	r3, #14
 8002666:	e00a      	b.n	800267e <App_ThreadX_Init+0x72>
  if (tx_thread_create(&tx_app2_thread, "Secondary Thread", SecondaryThread_Entry, 0, pointer, TX_APP_STACK_SIZE,
		  TX_APP_SECONDARY_THREAD_PRIO, TX_APP_SECONDARY_THREAD_PREEMPTION_THRESHOLD, TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
	  return TX_THREAD_ERROR;
  }*/
  if (tx_semaphore_create(&tx_app_semaphore, "Semaphore", 0) != TX_SUCCESS)
 8002668:	490a      	ldr	r1, [pc, #40]	; (8002694 <App_ThreadX_Init+0x88>)
 800266a:	480b      	ldr	r0, [pc, #44]	; (8002698 <App_ThreadX_Init+0x8c>)
 800266c:	231c      	movs	r3, #28
 800266e:	2200      	movs	r2, #0
 8002670:	f010 f86e 	bl	8012750 <_txe_semaphore_create>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <App_ThreadX_Init+0x70>
  {
	  return TX_SEMAPHORE_ERROR;
 8002678:	230c      	movs	r3, #12
 800267a:	e000      	b.n	800267e <App_ThreadX_Init+0x72>
  }
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800267c:	697b      	ldr	r3, [r7, #20]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b007      	add	sp, #28
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	080026c5 	.word	0x080026c5
 800268c:	08018844 	.word	0x08018844
 8002690:	200185ec 	.word	0x200185ec
 8002694:	08018850 	.word	0x08018850
 8002698:	2001869c 	.word	0x2001869c

0800269c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80026a0:	f00c fdb4 	bl	800f20c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <App_Delay>:

/* USER CODE BEGIN 1 */

void App_Delay(unsigned long ticks)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	tx_thread_sleep(ticks);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f00e fcdb 	bl	8011070 <_tx_thread_sleep>
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b002      	add	sp, #8
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <MainThread_Entry>:

void MainThread_Entry(unsigned long thread_input)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//char buf[100] = {};
		//sprintf(buf, "Button: %d\n\r", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
		//HAL_UART_Transmit(&huart2, (unsigned char*)buf, sizeof(buf), 1000);
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	019b      	lsls	r3, r3, #6
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <MainThread_Entry+0x58>)
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f001 fe45 	bl	8004364 <HAL_GPIO_ReadPin>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d11a      	bne.n	8002714 <MainThread_Entry+0x50>
		//if (1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80026de:	23a0      	movs	r3, #160	; 0xa0
 80026e0:	05db      	lsls	r3, r3, #23
 80026e2:	2120      	movs	r1, #32
 80026e4:	0018      	movs	r0, r3
 80026e6:	f001 fe77 	bl	80043d8 <HAL_GPIO_TogglePin>

			USB_Device_State_Msg = START_USB_DEVICE;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <MainThread_Entry+0x5c>)
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]

			/* Send message to start device */
			if (!txSent)
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MainThread_Entry+0x60>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <MainThread_Entry+0x50>
			{
				if (tx_queue_send(&ux_app_MsgQueue, &USB_Device_State_Msg, TX_WAIT_FOREVER) != TX_SUCCESS)
 80026f8:	2301      	movs	r3, #1
 80026fa:	425a      	negs	r2, r3
 80026fc:	4908      	ldr	r1, [pc, #32]	; (8002720 <MainThread_Entry+0x5c>)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MainThread_Entry+0x64>)
 8002700:	0018      	movs	r0, r3
 8002702:	f00f ffd9 	bl	80126b8 <_txe_queue_send>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <MainThread_Entry+0x4a>
				{
					Error_Handler();
 800270a:	f000 f941 	bl	8002990 <Error_Handler>
				}
				txSent = 1;
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <MainThread_Entry+0x60>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
			}
			//if ()
		}
		App_Delay(20);
 8002714:	2014      	movs	r0, #20
 8002716:	f7ff ffc8 	bl	80026aa <App_Delay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800271a:	e7d7      	b.n	80026cc <MainThread_Entry+0x8>
 800271c:	50000800 	.word	0x50000800
 8002720:	200186b8 	.word	0x200186b8
 8002724:	200186bc 	.word	0x200186bc
 8002728:	20019604 	.word	0x20019604

0800272c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <MX_DMA_Init+0x58>)
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <MX_DMA_Init+0x58>)
 8002738:	2101      	movs	r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_DMA_Init+0x58>)
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2009      	movs	r0, #9
 8002750:	f001 f866 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002754:	2009      	movs	r0, #9
 8002756:	f001 f878 	bl	800384a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	200a      	movs	r0, #10
 8002760:	f001 f85e 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002764:	200a      	movs	r0, #10
 8002766:	f001 f870 	bl	800384a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	200b      	movs	r0, #11
 8002770:	f001 f856 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8002774:	200b      	movs	r0, #11
 8002776:	f001 f868 	bl	800384a <HAL_NVIC_EnableIRQ>

}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40021000 	.word	0x40021000

08002788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b08b      	sub	sp, #44	; 0x2c
 800278c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	2414      	movs	r4, #20
 8002790:	193b      	adds	r3, r7, r4
 8002792:	0018      	movs	r0, r3
 8002794:	2314      	movs	r3, #20
 8002796:	001a      	movs	r2, r3
 8002798:	2100      	movs	r1, #0
 800279a:	f015 ffc9 	bl	8018730 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	4b33      	ldr	r3, [pc, #204]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027a4:	2104      	movs	r1, #4
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ba:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027bc:	2120      	movs	r1, #32
 80027be:	430a      	orrs	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2220      	movs	r2, #32
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027ec:	2102      	movs	r1, #2
 80027ee:	430a      	orrs	r2, r1
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <MX_GPIO_Init+0xe8>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80027fe:	23a0      	movs	r3, #160	; 0xa0
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	2200      	movs	r2, #0
 8002804:	2120      	movs	r1, #32
 8002806:	0018      	movs	r0, r3
 8002808:	f001 fdc9 	bl	800439e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800280c:	193b      	adds	r3, r7, r4
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	0192      	lsls	r2, r2, #6
 8002812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002814:	193b      	adds	r3, r7, r4
 8002816:	2288      	movs	r2, #136	; 0x88
 8002818:	0352      	lsls	r2, r2, #13
 800281a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	193b      	adds	r3, r7, r4
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <MX_GPIO_Init+0xec>)
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f001 fb57 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800282e:	0021      	movs	r1, r4
 8002830:	187b      	adds	r3, r7, r1
 8002832:	2220      	movs	r2, #32
 8002834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002836:	187b      	adds	r3, r7, r1
 8002838:	2201      	movs	r2, #1
 800283a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	187b      	adds	r3, r7, r1
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2202      	movs	r2, #2
 8002846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002848:	187a      	adds	r2, r7, r1
 800284a:	23a0      	movs	r3, #160	; 0xa0
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f001 fb43 	bl	8003edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2007      	movs	r0, #7
 800285c:	f000 ffe0 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002860:	2007      	movs	r0, #7
 8002862:	f000 fff2 	bl	800384a <HAL_NVIC_EnableIRQ>

}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b00b      	add	sp, #44	; 0x2c
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	50000800 	.word	0x50000800

08002878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800287c:	f000 fee8 	bl	8003650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002880:	f000 f811 	bl	80028a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002884:	f7ff ff80 	bl	8002788 <MX_GPIO_Init>
  MX_DMA_Init();
 8002888:	f7ff ff50 	bl	800272c <MX_DMA_Init>
  MX_USB_DRD_FS_PCD_Init();
 800288c:	f000 fe20 	bl	80034d0 <MX_USB_DRD_FS_PCD_Init>
  MX_UCPD1_Init();
 8002890:	f000 fb94 	bl	8002fbc <MX_UCPD1_Init>
  MX_USART2_UART_Init();
 8002894:	f000 fc86 	bl	80031a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002898:	f000 fc36 	bl	8003108 <MX_USART1_UART_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 800289c:	f013 ffa3 	bl	80167e6 <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80028a0:	f7ff fefc 	bl	800269c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <main+0x2c>

080028a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a6:	b590      	push	{r4, r7, lr}
 80028a8:	b095      	sub	sp, #84	; 0x54
 80028aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ac:	2414      	movs	r4, #20
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	0018      	movs	r0, r3
 80028b2:	233c      	movs	r3, #60	; 0x3c
 80028b4:	001a      	movs	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	f015 ff3a 	bl	8018730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	0018      	movs	r0, r3
 80028c0:	2310      	movs	r3, #16
 80028c2:	001a      	movs	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	f015 ff33 	bl	8018730 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f003 fcc4 	bl	800625c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2222      	movs	r2, #34	; 0x22
 80028d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0052      	lsls	r2, r2, #1
 80028e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	03d2      	lsls	r2, r2, #15
 80028e8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2202      	movs	r2, #2
 80028fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2202      	movs	r2, #2
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2209      	movs	r2, #9
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	0292      	lsls	r2, r2, #10
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0492      	lsls	r2, r2, #18
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	05d2      	lsls	r2, r2, #23
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002928:	187b      	adds	r3, r7, r1
 800292a:	0018      	movs	r0, r3
 800292c:	f003 fce2 	bl	80062f4 <HAL_RCC_OscConfig>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d001      	beq.n	8002938 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002934:	f000 f82c 	bl	8002990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2207      	movs	r2, #7
 800293c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2202      	movs	r2, #2
 8002942:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2101      	movs	r1, #1
 8002954:	0018      	movs	r0, r3
 8002956:	f004 f82d 	bl	80069b4 <HAL_RCC_ClockConfig>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800295e:	f000 f817 	bl	8002990 <Error_Handler>
  }
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b015      	add	sp, #84	; 0x54
 8002968:	bd90      	pop	{r4, r7, pc}
	...

0800296c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800297e:	f000 fe87 	bl	8003690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40001000 	.word	0x40001000

08002990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002994:	b672      	cpsid	i
}
 8002996:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002998:	e7fe      	b.n	8002998 <Error_Handler+0x8>
	...

0800299c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_MspInit+0x44>)
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_MspInit+0x44>)
 80029a8:	2101      	movs	r1, #1
 80029aa:	430a      	orrs	r2, r1
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_MspInit+0x44>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_MspInit+0x44>)
 80029bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_MspInit+0x44>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0549      	lsls	r1, r1, #21
 80029c4:	430a      	orrs	r2, r1
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_MspInit+0x44>)
 80029ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	4013      	ands	r3, r2
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b002      	add	sp, #8
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80029ec:	232b      	movs	r3, #43	; 0x2b
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_InitTick+0xf0>)
 80029f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_InitTick+0xf0>)
 80029fa:	2110      	movs	r1, #16
 80029fc:	430a      	orrs	r2, r1
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_InitTick+0xf0>)
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	2210      	movs	r2, #16
 8002a06:	4013      	ands	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	18fa      	adds	r2, r7, r3
 8002a10:	2410      	movs	r4, #16
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0011      	movs	r1, r2
 8002a16:	0018      	movs	r0, r3
 8002a18:	f004 f976 	bl	8006d08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a28:	f004 f958 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a30:	e004      	b.n	8002a3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a32:	f004 f953 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8002a36:	0003      	movs	r3, r0
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	4926      	ldr	r1, [pc, #152]	; (8002ad8 <HAL_InitTick+0xf4>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff fb09 	bl	8002058 <__udivsi3>
 8002a46:	0003      	movs	r3, r0
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_InitTick+0xf8>)
 8002a4e:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <HAL_InitTick+0xfc>)
 8002a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_InitTick+0xf8>)
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_InitTick+0x100>)
 8002a56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_InitTick+0xf8>)
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_InitTick+0xf8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_InitTick+0xf8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_InitTick+0xf8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a70:	252b      	movs	r5, #43	; 0x2b
 8002a72:	197c      	adds	r4, r7, r5
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_InitTick+0xf8>)
 8002a76:	0018      	movs	r0, r3
 8002a78:	f004 fbac 	bl	80071d4 <HAL_TIM_Base_Init>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002a80:	197b      	adds	r3, r7, r5
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11e      	bne.n	8002ac6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a88:	197c      	adds	r4, r7, r5
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_InitTick+0xf8>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f004 fc01 	bl	8007294 <HAL_TIM_Base_Start_IT>
 8002a92:	0003      	movs	r3, r0
 8002a94:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8002a96:	197b      	adds	r3, r7, r5
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002a9e:	2011      	movs	r0, #17
 8002aa0:	f000 fed3 	bl	800384a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d809      	bhi.n	8002abe <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	0019      	movs	r1, r3
 8002ab0:	2011      	movs	r0, #17
 8002ab2:	f000 feb5 	bl	8003820 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_InitTick+0x104>)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e003      	b.n	8002ac6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8002abe:	232b      	movs	r3, #43	; 0x2b
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8002ac6:	232b      	movs	r3, #43	; 0x2b
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b00c      	add	sp, #48	; 0x30
 8002ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	000f4240 	.word	0x000f4240
 8002adc:	200186c0 	.word	0x200186c0
 8002ae0:	40001000 	.word	0x40001000
 8002ae4:	000003e7 	.word	0x000003e7
 8002ae8:	20000008 	.word	0x20000008

08002aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <NMI_Handler+0x4>

08002af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af6:	e7fe      	b.n	8002af6 <HardFault_Handler+0x4>

08002af8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	019b      	lsls	r3, r3, #6
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fc85 	bl	8004410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <USB_UCPD1_2_IRQHandler+0x18>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f001 fe84 	bl	8004820 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8002b18:	f009 fe50 	bl	800c7bc <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	200188f8 	.word	0x200188f8

08002b28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <DMA1_Channel1_IRQHandler+0x14>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f001 f866 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20018838 	.word	0x20018838

08002b40 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f001 f85a 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	20018898 	.word	0x20018898

08002b58 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f004 fbf4 	bl	8007358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	200186c0 	.word	0x200186c0

08002b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b84:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <_sbrk+0x5c>)
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <_sbrk+0x60>)
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <_sbrk+0x64>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <_sbrk+0x68>)
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d207      	bcs.n	8002bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bac:	f015 fdda 	bl	8018764 <__errno>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	425b      	negs	r3, r3
 8002bba:	e009      	b.n	8002bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	18d2      	adds	r2, r2, r3
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <_sbrk+0x64>)
 8002bcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b006      	add	sp, #24
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20024000 	.word	0x20024000
 8002bdc:	00000800 	.word	0x00000800
 8002be0:	2001870c 	.word	0x2001870c
 8002be4:	2001dc80 	.word	0x2001dc80

08002be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b7f      	cmp	r3, #127	; 0x7f
 8002c06:	d809      	bhi.n	8002c1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	231f      	movs	r3, #31
 8002c10:	401a      	ands	r2, r3
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_EnableIRQ+0x30>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	4091      	lsls	r1, r2
 8002c18:	000a      	movs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	0002      	movs	r2, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c3c:	d828      	bhi.n	8002c90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <__NVIC_SetPriority+0xd4>)
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	33c0      	adds	r3, #192	; 0xc0
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	589b      	ldr	r3, [r3, r2]
 8002c4e:	1dfa      	adds	r2, r7, #7
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	0011      	movs	r1, r2
 8002c54:	2203      	movs	r2, #3
 8002c56:	400a      	ands	r2, r1
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	21ff      	movs	r1, #255	; 0xff
 8002c5c:	4091      	lsls	r1, r2
 8002c5e:	000a      	movs	r2, r1
 8002c60:	43d2      	mvns	r2, r2
 8002c62:	401a      	ands	r2, r3
 8002c64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	2303      	movs	r3, #3
 8002c76:	4003      	ands	r3, r0
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c7c:	481f      	ldr	r0, [pc, #124]	; (8002cfc <__NVIC_SetPriority+0xd4>)
 8002c7e:	1dfb      	adds	r3, r7, #7
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	430a      	orrs	r2, r1
 8002c88:	33c0      	adds	r3, #192	; 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c8e:	e031      	b.n	8002cf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <__NVIC_SetPriority+0xd8>)
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	0019      	movs	r1, r3
 8002c98:	230f      	movs	r3, #15
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	3b08      	subs	r3, #8
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3306      	adds	r3, #6
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1dfa      	adds	r2, r7, #7
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	00d2      	lsls	r2, r2, #3
 8002cb6:	21ff      	movs	r1, #255	; 0xff
 8002cb8:	4091      	lsls	r1, r2
 8002cba:	000a      	movs	r2, r1
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	401a      	ands	r2, r3
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	4003      	ands	r3, r0
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd8:	4809      	ldr	r0, [pc, #36]	; (8002d00 <__NVIC_SetPriority+0xd8>)
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	001c      	movs	r4, r3
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	4023      	ands	r3, r4
 8002ce4:	3b08      	subs	r3, #8
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	3306      	adds	r3, #6
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	18c3      	adds	r3, r0, r3
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8002d14:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <LL_DMA_SetDataTransferDirection+0x44>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <LL_DMA_SetDataTransferDirection+0x48>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <LL_DMA_SetDataTransferDirection+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	001a      	movs	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	08018b1c 	.word	0x08018b1c
 8002d4c:	ffffbfef 	.word	0xffffbfef

08002d50 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <LL_DMA_SetMode+0x44>)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	18d3      	adds	r3, r2, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	001a      	movs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2220      	movs	r2, #32
 8002d72:	4393      	bics	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <LL_DMA_SetMode+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	18d3      	adds	r3, r2, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	001a      	movs	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	18d3      	adds	r3, r2, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
             Mode);
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	08018b1c 	.word	0x08018b1c

08002d98 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <LL_DMA_SetPeriphIncMode+0x44>)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	001a      	movs	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <LL_DMA_SetPeriphIncMode+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	18d3      	adds	r3, r2, r3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b006      	add	sp, #24
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	08018b1c 	.word	0x08018b1c

08002de0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <LL_DMA_SetMemoryIncMode+0x44>)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	18d3      	adds	r3, r2, r3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	001a      	movs	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	4393      	bics	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <LL_DMA_SetMemoryIncMode+0x44>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	18d3      	adds	r3, r2, r3
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	001a      	movs	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b006      	add	sp, #24
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	08018b1c 	.word	0x08018b1c

08002e28 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002e38:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <LL_DMA_SetPeriphSize+0x44>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	001a      	movs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	18d3      	adds	r3, r2, r3
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <LL_DMA_SetPeriphSize+0x48>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <LL_DMA_SetPeriphSize+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	18d3      	adds	r3, r2, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	001a      	movs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	18d3      	adds	r3, r2, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b006      	add	sp, #24
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	08018b1c 	.word	0x08018b1c
 8002e70:	fffffcff 	.word	0xfffffcff

08002e74 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8002e84:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <LL_DMA_SetMemorySize+0x44>)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	18d3      	adds	r3, r2, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <LL_DMA_SetMemorySize+0x48>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <LL_DMA_SetMemorySize+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	18d3      	adds	r3, r2, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b006      	add	sp, #24
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	08018b1c 	.word	0x08018b1c
 8002ebc:	fffff3ff 	.word	0xfffff3ff

08002ec0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	18d3      	adds	r3, r2, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
             Priority);
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b006      	add	sp, #24
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	08018b1c 	.word	0x08018b1c
 8002f08:	ffffcfff 	.word	0xffffcfff

08002f0c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <LL_DMA_SetPeriphRequest+0x50>)
 8002f1e:	405a      	eors	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <LL_DMA_SetPeriphRequest+0x54>)
 8002f32:	4694      	mov	ip, r2
 8002f34:	4463      	add	r3, ip
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	227f      	movs	r2, #127	; 0x7f
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	18d3      	adds	r3, r2, r3
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <LL_DMA_SetPeriphRequest+0x54>)
 8002f48:	4694      	mov	ip, r2
 8002f4a:	4463      	add	r3, ip
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b006      	add	sp, #24
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	00100080 	.word	0x00100080
 8002f60:	40020800 	.word	0x40020800

08002f64 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <LL_APB1_GRP1_EnableClock+0x28>)
 8002f6e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <LL_APB1_GRP1_EnableClock+0x28>)
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_APB1_GRP1_EnableClock+0x28>)
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000

08002f90 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8002f9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4013      	ands	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	003b      	movs	r3, r7
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	2318      	movs	r3, #24
 8002fc8:	001a      	movs	r2, r3
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f015 fbb0 	bl	8018730 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	049b      	lsls	r3, r3, #18
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ffc5 	bl	8002f64 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7ff ffd8 	bl	8002f90 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7ff ffd5 	bl	8002f90 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002fe6:	003b      	movs	r3, r7
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0212      	lsls	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002fee:	003b      	movs	r3, r7
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ff4:	003b      	movs	r3, r7
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	003b      	movs	r3, r7
 8002ffc:	4a40      	ldr	r2, [pc, #256]	; (8003100 <MX_UCPD1_Init+0x144>)
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f006 fc07 	bl	8009814 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003006:	003b      	movs	r3, r7
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800300e:	003b      	movs	r3, r7
 8003010:	2203      	movs	r2, #3
 8003012:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003014:	003b      	movs	r3, r7
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	003a      	movs	r2, r7
 800301c:	23a0      	movs	r3, #160	; 0xa0
 800301e:	05db      	lsls	r3, r3, #23
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f006 fbf6 	bl	8009814 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <MX_UCPD1_Init+0x148>)
 800302a:	223b      	movs	r2, #59	; 0x3b
 800302c:	2101      	movs	r1, #1
 800302e:	0018      	movs	r0, r3
 8003030:	f7ff ff6c 	bl	8002f0c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <MX_UCPD1_Init+0x148>)
 8003036:	2210      	movs	r2, #16
 8003038:	2101      	movs	r1, #1
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff fe62 	bl	8002d04 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <MX_UCPD1_Init+0x148>)
 8003042:	2200      	movs	r2, #0
 8003044:	2101      	movs	r1, #1
 8003046:	0018      	movs	r0, r3
 8003048:	f7ff ff3a 	bl	8002ec0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <MX_UCPD1_Init+0x148>)
 800304e:	2200      	movs	r2, #0
 8003050:	2101      	movs	r1, #1
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff fe7c 	bl	8002d50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8003058:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <MX_UCPD1_Init+0x148>)
 800305a:	2200      	movs	r2, #0
 800305c:	2101      	movs	r1, #1
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fe9a 	bl	8002d98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <MX_UCPD1_Init+0x148>)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	2101      	movs	r1, #1
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff feb8 	bl	8002de0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <MX_UCPD1_Init+0x148>)
 8003072:	2200      	movs	r2, #0
 8003074:	2101      	movs	r1, #1
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff fed6 	bl	8002e28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <MX_UCPD1_Init+0x148>)
 800307e:	2200      	movs	r2, #0
 8003080:	2101      	movs	r1, #1
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff fef6 	bl	8002e74 <LL_DMA_SetMemorySize>

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_RX);
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <MX_UCPD1_Init+0x148>)
 800308a:	223a      	movs	r2, #58	; 0x3a
 800308c:	2103      	movs	r1, #3
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff ff3c 	bl	8002f0c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <MX_UCPD1_Init+0x148>)
 8003096:	2200      	movs	r2, #0
 8003098:	2103      	movs	r1, #3
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff fe32 	bl	8002d04 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	2103      	movs	r1, #3
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff ff0a 	bl	8002ec0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	2103      	movs	r1, #3
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff fe4c 	bl	8002d50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	2103      	movs	r1, #3
 80030be:	0018      	movs	r0, r3
 80030c0:	f7ff fe6a 	bl	8002d98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	2103      	movs	r1, #3
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fe88 	bl	8002de0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	2103      	movs	r1, #3
 80030d6:	0018      	movs	r0, r3
 80030d8:	f7ff fea6 	bl	8002e28 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_UCPD1_Init+0x148>)
 80030de:	2200      	movs	r2, #0
 80030e0:	2103      	movs	r1, #3
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff fec6 	bl	8002e74 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 2);
 80030e8:	2102      	movs	r1, #2
 80030ea:	2008      	movs	r0, #8
 80030ec:	f7ff fd9c 	bl	8002c28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80030f0:	2008      	movs	r0, #8
 80030f2:	f7ff fd7f 	bl	8002bf4 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b006      	add	sp, #24
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	50000400 	.word	0x50000400
 8003104:	40020000 	.word	0x40020000

08003108 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <MX_USART1_UART_Init+0x94>)
 800310e:	4a24      	ldr	r2, [pc, #144]	; (80031a0 <MX_USART1_UART_Init+0x98>)
 8003110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003114:	22e1      	movs	r2, #225	; 0xe1
 8003116:	0252      	lsls	r2, r2, #9
 8003118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <MX_USART1_UART_Init+0x94>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <MX_USART1_UART_Init+0x94>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <MX_USART1_UART_Init+0x94>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <MX_USART1_UART_Init+0x94>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003152:	0018      	movs	r0, r3
 8003154:	f004 faf4 	bl	8007740 <HAL_UART_Init>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800315c:	f7ff fc18 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003162:	2100      	movs	r1, #0
 8003164:	0018      	movs	r0, r3
 8003166:	f006 f8af 	bl	80092c8 <HAL_UARTEx_SetTxFifoThreshold>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800316e:	f7ff fc0f 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003174:	2100      	movs	r1, #0
 8003176:	0018      	movs	r0, r3
 8003178:	f006 f8e6 	bl	8009348 <HAL_UARTEx_SetRxFifoThreshold>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003180:	f7ff fc06 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <MX_USART1_UART_Init+0x94>)
 8003186:	0018      	movs	r0, r3
 8003188:	f006 f864 	bl	8009254 <HAL_UARTEx_DisableFifoMode>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d001      	beq.n	8003194 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003190:	f7ff fbfe 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	20018710 	.word	0x20018710
 80031a0:	40013800 	.word	0x40013800

080031a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <MX_USART2_UART_Init+0x98>)
 80031ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031b0:	22e1      	movs	r2, #225	; 0xe1
 80031b2:	0252      	lsls	r2, r2, #9
 80031b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031ca:	220c      	movs	r2, #12
 80031cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f004 faa6 	bl	8007740 <HAL_UART_Init>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80031f8:	f7ff fbca 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_USART2_UART_Init+0x94>)
 80031fe:	2100      	movs	r1, #0
 8003200:	0018      	movs	r0, r3
 8003202:	f006 f861 	bl	80092c8 <HAL_UARTEx_SetTxFifoThreshold>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d001      	beq.n	800320e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800320a:	f7ff fbc1 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <MX_USART2_UART_Init+0x94>)
 8003210:	2100      	movs	r1, #0
 8003212:	0018      	movs	r0, r3
 8003214:	f006 f898 	bl	8009348 <HAL_UARTEx_SetRxFifoThreshold>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d001      	beq.n	8003220 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800321c:	f7ff fbb8 	bl	8002990 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <MX_USART2_UART_Init+0x94>)
 8003222:	0018      	movs	r0, r3
 8003224:	f006 f816 	bl	8009254 <HAL_UARTEx_DisableFifoMode>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d001      	beq.n	8003230 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800322c:	f7ff fbb0 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	200187a4 	.word	0x200187a4
 800323c:	40004400 	.word	0x40004400

08003240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b09f      	sub	sp, #124	; 0x7c
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	2364      	movs	r3, #100	; 0x64
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	0018      	movs	r0, r3
 800324e:	2314      	movs	r3, #20
 8003250:	001a      	movs	r2, r3
 8003252:	2100      	movs	r1, #0
 8003254:	f015 fa6c 	bl	8018730 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003258:	2418      	movs	r4, #24
 800325a:	193b      	adds	r3, r7, r4
 800325c:	0018      	movs	r0, r3
 800325e:	234c      	movs	r3, #76	; 0x4c
 8003260:	001a      	movs	r2, r3
 8003262:	2100      	movs	r1, #0
 8003264:	f015 fa64 	bl	8018730 <memset>
  if(uartHandle->Instance==USART1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6f      	ldr	r2, [pc, #444]	; (800342c <HAL_UART_MspInit+0x1ec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d000      	beq.n	8003274 <HAL_UART_MspInit+0x34>
 8003272:	e091      	b.n	8003398 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800327a:	193b      	adds	r3, r7, r4
 800327c:	2200      	movs	r2, #0
 800327e:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003280:	193b      	adds	r3, r7, r4
 8003282:	0018      	movs	r0, r3
 8003284:	f003 fd6a 	bl	8006d5c <HAL_RCCEx_PeriphCLKConfig>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800328c:	f7ff fb80 	bl	8002990 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003290:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	01c9      	lsls	r1, r1, #7
 800329a:	430a      	orrs	r2, r1
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
 800329e:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80032a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	01db      	lsls	r3, r3, #7
 80032a6:	4013      	ands	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ac:	4b60      	ldr	r3, [pc, #384]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80032ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b0:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80032b2:	2104      	movs	r1, #4
 80032b4:	430a      	orrs	r2, r1
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	2204      	movs	r2, #4
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032c4:	2164      	movs	r1, #100	; 0x64
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	2230      	movs	r2, #48	; 0x30
 80032ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	2202      	movs	r2, #2
 80032d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	2200      	movs	r2, #0
 80032dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80032de:	187b      	adds	r3, r7, r1
 80032e0:	2201      	movs	r2, #1
 80032e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	4a53      	ldr	r2, [pc, #332]	; (8003434 <HAL_UART_MspInit+0x1f4>)
 80032e8:	0019      	movs	r1, r3
 80032ea:	0010      	movs	r0, r2
 80032ec:	f000 fdf6 	bl	8003edc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80032f0:	4b51      	ldr	r3, [pc, #324]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 80032f2:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_UART_MspInit+0x1fc>)
 80032f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fc:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003304:	2200      	movs	r2, #0
 8003306:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003308:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003310:	2200      	movs	r2, #0
 8003312:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003314:	4b48      	ldr	r3, [pc, #288]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003316:	2200      	movs	r2, #0
 8003318:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003320:	4b45      	ldr	r3, [pc, #276]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003322:	2200      	movs	r2, #0
 8003324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003326:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003328:	0018      	movs	r0, r3
 800332a:	f000 fa9f 	bl	800386c <HAL_DMA_Init>
 800332e:	1e03      	subs	r3, r0, #0
 8003330:	d001      	beq.n	8003336 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8003332:	f7ff fb2d 	bl	8002990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 800333c:	505a      	str	r2, [r3, r1]
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_UART_MspInit+0x1f8>)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003346:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <HAL_UART_MspInit+0x204>)
 8003348:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_UART_MspInit+0x200>)
 800334c:	2233      	movs	r2, #51	; 0x33
 800334e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003352:	2210      	movs	r2, #16
 8003354:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_UART_MspInit+0x200>)
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_UART_MspInit+0x200>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003370:	2200      	movs	r2, #0
 8003372:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003376:	2200      	movs	r2, #0
 8003378:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_UART_MspInit+0x200>)
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fa75 	bl	800386c <HAL_DMA_Init>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d001      	beq.n	800338a <HAL_UART_MspInit+0x14a>
    {
      Error_Handler();
 8003386:	f7ff fb03 	bl	8002990 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_UART_MspInit+0x200>)
 800338e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_UART_MspInit+0x200>)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003396:	e044      	b.n	8003422 <HAL_UART_MspInit+0x1e2>
  else if(uartHandle->Instance==USART2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_UART_MspInit+0x208>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d13f      	bne.n	8003422 <HAL_UART_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033a2:	2118      	movs	r1, #24
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	0018      	movs	r0, r3
 80033b4:	f003 fcd2 	bl	8006d5c <HAL_RCCEx_PeriphCLKConfig>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80033bc:	f7ff fae8 	bl	8002990 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	0289      	lsls	r1, r1, #10
 80033ca:	430a      	orrs	r2, r1
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	4013      	ands	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	635a      	str	r2, [r3, #52]	; 0x34
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_UART_MspInit+0x1f0>)
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	220c      	movs	r2, #12
 80033fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	2202      	movs	r2, #2
 8003400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2201      	movs	r2, #1
 8003412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	187a      	adds	r2, r7, r1
 8003416:	23a0      	movs	r3, #160	; 0xa0
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fd5d 	bl	8003edc <HAL_GPIO_Init>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b01f      	add	sp, #124	; 0x7c
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40013800 	.word	0x40013800
 8003430:	40021000 	.word	0x40021000
 8003434:	50000800 	.word	0x50000800
 8003438:	20018838 	.word	0x20018838
 800343c:	40020008 	.word	0x40020008
 8003440:	20018898 	.word	0x20018898
 8003444:	40020030 	.word	0x40020030
 8003448:	40004400 	.word	0x40004400

0800344c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_UART_MspDeInit+0x6c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d116      	bne.n	800348c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_UART_MspDeInit+0x70>)
 8003460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_UART_MspDeInit+0x70>)
 8003464:	4916      	ldr	r1, [pc, #88]	; (80034c0 <HAL_UART_MspDeInit+0x74>)
 8003466:	400a      	ands	r2, r1
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_UART_MspDeInit+0x78>)
 800346c:	2130      	movs	r1, #48	; 0x30
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fea0 	bl	80041b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	589b      	ldr	r3, [r3, r2]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 faa2 	bl	80039c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fa9d 	bl	80039c4 <HAL_DMA_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800348a:	e010      	b.n	80034ae <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_UART_MspDeInit+0x7c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10b      	bne.n	80034ae <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_UART_MspDeInit+0x70>)
 8003498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_UART_MspDeInit+0x70>)
 800349c:	490b      	ldr	r1, [pc, #44]	; (80034cc <HAL_UART_MspDeInit+0x80>)
 800349e:	400a      	ands	r2, r1
 80034a0:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80034a2:	23a0      	movs	r3, #160	; 0xa0
 80034a4:	05db      	lsls	r3, r3, #23
 80034a6:	210c      	movs	r1, #12
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fe83 	bl	80041b4 <HAL_GPIO_DeInit>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	ffffbfff 	.word	0xffffbfff
 80034c4:	50000800 	.word	0x50000800
 80034c8:	40004400 	.word	0x40004400
 80034cc:	fffdffff 	.word	0xfffdffff

080034d0 <MX_USB_DRD_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB_DRD_FS init function */

void MX_USB_DRD_FS_PCD_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <MX_USB_DRD_FS_PCD_Init+0x68>)
 80034d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034dc:	2208      	movs	r2, #8
 80034de:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034e2:	2208      	movs	r2, #8
 80034e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034e8:	2202      	movs	r2, #2
 80034ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034ee:	2202      	movs	r2, #2
 80034f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800350c:	2200      	movs	r2, #0
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800351e:	0018      	movs	r0, r3
 8003520:	f001 f81a 	bl	8004558 <HAL_PCD_Init>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8003528:	f7ff fa32 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	200188f8 	.word	0x200188f8
 8003538:	40005c00 	.word	0x40005c00

0800353c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b099      	sub	sp, #100	; 0x64
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003544:	2414      	movs	r4, #20
 8003546:	193b      	adds	r3, r7, r4
 8003548:	0018      	movs	r0, r3
 800354a:	234c      	movs	r3, #76	; 0x4c
 800354c:	001a      	movs	r2, r3
 800354e:	2100      	movs	r1, #0
 8003550:	f015 f8ee 	bl	8018730 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <HAL_PCD_MspInit+0xb4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d143      	bne.n	80035e6 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800355e:	193b      	adds	r3, r7, r4
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	0452      	lsls	r2, r2, #17
 8003564:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003566:	193b      	adds	r3, r7, r4
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800356c:	193b      	adds	r3, r7, r4
 800356e:	0018      	movs	r0, r3
 8003570:	f003 fbf4 	bl	8006d5c <HAL_RCCEx_PeriphCLKConfig>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d001      	beq.n	800357c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8003578:	f7ff fa0a 	bl	8002990 <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 800357e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	0189      	lsls	r1, r1, #6
 8003586:	430a      	orrs	r2, r1
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	4013      	ands	r3, r2
 80035a2:	d116      	bne.n	80035d2 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 80035a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	0549      	lsls	r1, r1, #21
 80035ae:	430a      	orrs	r2, r1
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 80035b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	055b      	lsls	r3, r3, #21
 80035ba:	4013      	ands	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80035c0:	f002 fe3e 	bl	8006240 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 80035c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_PCD_MspInit+0xb8>)
 80035ca:	490b      	ldr	r1, [pc, #44]	; (80035f8 <HAL_PCD_MspInit+0xbc>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80035d0:	e001      	b.n	80035d6 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80035d2:	f002 fe35 	bl	8006240 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 2, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2102      	movs	r1, #2
 80035da:	2008      	movs	r0, #8
 80035dc:	f000 f920 	bl	8003820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80035e0:	2008      	movs	r0, #8
 80035e2:	f000 f932 	bl	800384a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b019      	add	sp, #100	; 0x64
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40005c00 	.word	0x40005c00
 80035f4:	40021000 	.word	0x40021000
 80035f8:	efffffff 	.word	0xefffffff

080035fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035fc:	480d      	ldr	r0, [pc, #52]	; (8003634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003600:	f7ff faf2 	bl	8002be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003604:	480c      	ldr	r0, [pc, #48]	; (8003638 <LoopForever+0x6>)
  ldr r1, =_edata
 8003606:	490d      	ldr	r1, [pc, #52]	; (800363c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <LoopForever+0xe>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800360c:	e002      	b.n	8003614 <LoopCopyDataInit>

0800360e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003612:	3304      	adds	r3, #4

08003614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003618:	d3f9      	bcc.n	800360e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <LoopForever+0x16>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003620:	e001      	b.n	8003626 <LoopFillZerobss>

08003622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003624:	3204      	adds	r2, #4

08003626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003628:	d3fb      	bcc.n	8003622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800362a:	f015 f8a1 	bl	8018770 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800362e:	f7ff f923 	bl	8002878 <main>

08003632 <LoopForever>:

LoopForever:
  b LoopForever
 8003632:	e7fe      	b.n	8003632 <LoopForever>
  ldr   r0, =_estack
 8003634:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800363c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8003640:	08018cdc 	.word	0x08018cdc
  ldr r2, =_sbss
 8003644:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8003648:	2001dc80 	.word	0x2001dc80

0800364c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800364c:	e7fe      	b.n	800364c <ADC1_COMP_IRQHandler>
	...

08003650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_Init+0x3c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_Init+0x3c>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800366a:	2003      	movs	r0, #3
 800366c:	f7ff f9ba 	bl	80029e4 <HAL_InitTick>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d003      	beq.n	800367c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e001      	b.n	8003680 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800367c:	f7ff f98e 	bl	800299c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b002      	add	sp, #8
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40022000 	.word	0x40022000

08003690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_IncTick+0x1c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	001a      	movs	r2, r3
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_IncTick+0x20>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	18d2      	adds	r2, r2, r3
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_IncTick+0x20>)
 80036a2:	601a      	str	r2, [r3, #0]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	20018c00 	.word	0x20018c00

080036b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_GetTick+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20018c00 	.word	0x20018c00

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3301      	adds	r3, #1
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	001a      	movs	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	f7ff ffe0 	bl	80036b4 <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	2000000c 	.word	0x2000000c

08003710 <__NVIC_EnableIRQ>:
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	0002      	movs	r2, r0
 8003718:	1dfb      	adds	r3, r7, #7
 800371a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800371c:	1dfb      	adds	r3, r7, #7
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b7f      	cmp	r3, #127	; 0x7f
 8003722:	d809      	bhi.n	8003738 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	001a      	movs	r2, r3
 800372a:	231f      	movs	r3, #31
 800372c:	401a      	ands	r2, r3
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__NVIC_EnableIRQ+0x30>)
 8003730:	2101      	movs	r1, #1
 8003732:	4091      	lsls	r1, r2
 8003734:	000a      	movs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}
 8003740:	e000e100 	.word	0xe000e100

08003744 <__NVIC_SetPriority>:
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	0002      	movs	r2, r0
 800374c:	6039      	str	r1, [r7, #0]
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b7f      	cmp	r3, #127	; 0x7f
 8003758:	d828      	bhi.n	80037ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <__NVIC_SetPriority+0xd4>)
 800375c:	1dfb      	adds	r3, r7, #7
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	b25b      	sxtb	r3, r3
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	33c0      	adds	r3, #192	; 0xc0
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	589b      	ldr	r3, [r3, r2]
 800376a:	1dfa      	adds	r2, r7, #7
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	0011      	movs	r1, r2
 8003770:	2203      	movs	r2, #3
 8003772:	400a      	ands	r2, r1
 8003774:	00d2      	lsls	r2, r2, #3
 8003776:	21ff      	movs	r1, #255	; 0xff
 8003778:	4091      	lsls	r1, r2
 800377a:	000a      	movs	r2, r1
 800377c:	43d2      	mvns	r2, r2
 800377e:	401a      	ands	r2, r3
 8003780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	22ff      	movs	r2, #255	; 0xff
 8003788:	401a      	ands	r2, r3
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	0018      	movs	r0, r3
 8003790:	2303      	movs	r3, #3
 8003792:	4003      	ands	r3, r0
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003798:	481f      	ldr	r0, [pc, #124]	; (8003818 <__NVIC_SetPriority+0xd4>)
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b25b      	sxtb	r3, r3
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	430a      	orrs	r2, r1
 80037a4:	33c0      	adds	r3, #192	; 0xc0
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	501a      	str	r2, [r3, r0]
}
 80037aa:	e031      	b.n	8003810 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <__NVIC_SetPriority+0xd8>)
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	0019      	movs	r1, r3
 80037b4:	230f      	movs	r3, #15
 80037b6:	400b      	ands	r3, r1
 80037b8:	3b08      	subs	r3, #8
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	3306      	adds	r3, #6
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	3304      	adds	r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1dfa      	adds	r2, r7, #7
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	0011      	movs	r1, r2
 80037cc:	2203      	movs	r2, #3
 80037ce:	400a      	ands	r2, r1
 80037d0:	00d2      	lsls	r2, r2, #3
 80037d2:	21ff      	movs	r1, #255	; 0xff
 80037d4:	4091      	lsls	r1, r2
 80037d6:	000a      	movs	r2, r1
 80037d8:	43d2      	mvns	r2, r2
 80037da:	401a      	ands	r2, r3
 80037dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	401a      	ands	r2, r3
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0018      	movs	r0, r3
 80037ec:	2303      	movs	r3, #3
 80037ee:	4003      	ands	r3, r0
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f4:	4809      	ldr	r0, [pc, #36]	; (800381c <__NVIC_SetPriority+0xd8>)
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	001c      	movs	r4, r3
 80037fc:	230f      	movs	r3, #15
 80037fe:	4023      	ands	r3, r4
 8003800:	3b08      	subs	r3, #8
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	430a      	orrs	r2, r1
 8003806:	3306      	adds	r3, #6
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	18c3      	adds	r3, r0, r3
 800380c:	3304      	adds	r3, #4
 800380e:	601a      	str	r2, [r3, #0]
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b003      	add	sp, #12
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	210f      	movs	r1, #15
 800382c:	187b      	adds	r3, r7, r1
 800382e:	1c02      	adds	r2, r0, #0
 8003830:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	187b      	adds	r3, r7, r1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b25b      	sxtb	r3, r3
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff ff81 	bl	8003744 <__NVIC_SetPriority>
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	0002      	movs	r2, r0
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b25b      	sxtb	r3, r3
 800385c:	0018      	movs	r0, r3
 800385e:	f7ff ff57 	bl	8003710 <__NVIC_EnableIRQ>
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e091      	b.n	80039a2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	001a      	movs	r2, r3
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_DMA_Init+0x140>)
 8003886:	429a      	cmp	r2, r3
 8003888:	d810      	bhi.n	80038ac <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <HAL_DMA_Init+0x144>)
 8003890:	4694      	mov	ip, r2
 8003892:	4463      	add	r3, ip
 8003894:	2114      	movs	r1, #20
 8003896:	0018      	movs	r0, r3
 8003898:	f7fe fbde 	bl	8002058 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_DMA_Init+0x148>)
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
 80038aa:	e00f      	b.n	80038cc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a41      	ldr	r2, [pc, #260]	; (80039b8 <HAL_DMA_Init+0x14c>)
 80038b2:	4694      	mov	ip, r2
 80038b4:	4463      	add	r3, ip
 80038b6:	2114      	movs	r1, #20
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fe fbcd 	bl	8002058 <__udivsi3>
 80038be:	0003      	movs	r3, r0
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_DMA_Init+0x150>)
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2225      	movs	r2, #37	; 0x25
 80038d0:	2102      	movs	r1, #2
 80038d2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4938      	ldr	r1, [pc, #224]	; (80039c0 <HAL_DMA_Init+0x154>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f000 fa6f 	bl	8003e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	01db      	lsls	r3, r3, #7
 800392a:	429a      	cmp	r2, r3
 800392c:	d102      	bne.n	8003934 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	217f      	movs	r1, #127	; 0x7f
 800393e:	400a      	ands	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800394a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d011      	beq.n	8003978 <HAL_DMA_Init+0x10c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d80d      	bhi.n	8003978 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 fa98 	bl	8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	e008      	b.n	800398a <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2225      	movs	r2, #37	; 0x25
 8003994:	2101      	movs	r1, #1
 8003996:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40020407 	.word	0x40020407
 80039b0:	bffdfff8 	.word	0xbffdfff8
 80039b4:	40020000 	.word	0x40020000
 80039b8:	bffdfbf8 	.word	0xbffdfbf8
 80039bc:	40020400 	.word	0x40020400
 80039c0:	ffff800f 	.word	0xffff800f

080039c4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_DMA_DeInit+0x112>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	001a      	movs	r2, r3
 80039ec:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <HAL_DMA_DeInit+0x11c>)
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d810      	bhi.n	8003a14 <HAL_DMA_DeInit+0x50>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3b      	ldr	r2, [pc, #236]	; (8003ae4 <HAL_DMA_DeInit+0x120>)
 80039f8:	4694      	mov	ip, r2
 80039fa:	4463      	add	r3, ip
 80039fc:	2114      	movs	r1, #20
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7fe fb2a 	bl	8002058 <__udivsi3>
 8003a04:	0003      	movs	r3, r0
 8003a06:	009a      	lsls	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_DMA_DeInit+0x124>)
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
 8003a12:	e00f      	b.n	8003a34 <HAL_DMA_DeInit+0x70>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_DMA_DeInit+0x128>)
 8003a1a:	4694      	mov	ip, r2
 8003a1c:	4463      	add	r3, ip
 8003a1e:	2114      	movs	r1, #20
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fe fb19 	bl	8002058 <__udivsi3>
 8003a26:	0003      	movs	r3, r0
 8003a28:	009a      	lsls	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <HAL_DMA_DeInit+0x12c>)
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	221c      	movs	r2, #28
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4091      	lsls	r1, r2
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f9d4 	bl	8003e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a68:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_DMA_DeInit+0xd0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d80c      	bhi.n	8003a94 <HAL_DMA_DeInit+0xd0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 fa09 	bl	8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a92:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2225      	movs	r2, #37	; 0x25
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	40020407 	.word	0x40020407
 8003ae4:	bffdfff8 	.word	0xbffdfff8
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	bffdfbf8 	.word	0xbffdfbf8
 8003af0:	40020400 	.word	0x40020400

08003af4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2317      	movs	r3, #23
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2224      	movs	r2, #36	; 0x24
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA_Start_IT+0x24>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e06f      	b.n	8003bf8 <HAL_DMA_Start_IT+0x104>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2225      	movs	r2, #37	; 0x25
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d157      	bne.n	8003bdc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2225      	movs	r2, #37	; 0x25
 8003b30:	2102      	movs	r1, #2
 8003b32:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f919 	bl	8003d88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	210e      	movs	r1, #14
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e00f      	b.n	8003b90 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	210a      	movs	r1, #10
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	025b      	lsls	r3, r3, #9
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d008      	beq.n	8003bb0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba8:	2180      	movs	r1, #128	; 0x80
 8003baa:	0049      	lsls	r1, r1, #1
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0049      	lsls	r1, r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e00a      	b.n	8003bf2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2224      	movs	r2, #36	; 0x24
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003bea:	2317      	movs	r3, #23
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003bf2:	2317      	movs	r3, #23
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b006      	add	sp, #24
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	221c      	movs	r2, #28
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2204      	movs	r2, #4
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d026      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x7a>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4013      	ands	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d107      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	221c      	movs	r2, #28
 8003c56:	401a      	ands	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2104      	movs	r1, #4
 8003c5e:	4091      	lsls	r1, r2
 8003c60:	000a      	movs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d100      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x6e>
 8003c6c:	e080      	b.n	8003d70 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	0010      	movs	r0, r2
 8003c76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003c78:	e07a      	b.n	8003d70 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	221c      	movs	r2, #28
 8003c80:	4013      	ands	r3, r2
 8003c82:	2202      	movs	r2, #2
 8003c84:	409a      	lsls	r2, r3
 8003c86:	0013      	movs	r3, r2
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d03c      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x108>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2202      	movs	r2, #2
 8003c92:	4013      	ands	r3, r2
 8003c94:	d038      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d10b      	bne.n	8003cba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	210a      	movs	r1, #10
 8003cae:	438a      	bics	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2225      	movs	r2, #37	; 0x25
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <HAL_DMA_IRQHandler+0x17c>)
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d909      	bls.n	8003cda <HAL_DMA_IRQHandler+0xda>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	221c      	movs	r2, #28
 8003ccc:	401a      	ands	r2, r3
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_DMA_IRQHandler+0x180>)
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4091      	lsls	r1, r2
 8003cd4:	000a      	movs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e008      	b.n	8003cec <HAL_DMA_IRQHandler+0xec>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	221c      	movs	r2, #28
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_DMA_IRQHandler+0x184>)
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4091      	lsls	r1, r2
 8003ce8:	000a      	movs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d039      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	0010      	movs	r0, r2
 8003d04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d06:	e033      	b.n	8003d70 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	221c      	movs	r2, #28
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2208      	movs	r2, #8
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d02a      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x172>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	4013      	ands	r3, r2
 8003d22:	d026      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	210e      	movs	r1, #14
 8003d30:	438a      	bics	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	221c      	movs	r2, #28
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2101      	movs	r1, #1
 8003d42:	4091      	lsls	r1, r2
 8003d44:	000a      	movs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2225      	movs	r2, #37	; 0x25
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	0010      	movs	r0, r2
 8003d6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46c0      	nop			; (mov r8, r8)
}
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	40020080 	.word	0x40020080
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020000 	.word	0x40020000

08003d88 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003db0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	221c      	movs	r2, #28
 8003db8:	401a      	ands	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4091      	lsls	r1, r2
 8003dc2:	000a      	movs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d108      	bne.n	8003de8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003de6:	e007      	b.n	8003df8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b004      	add	sp, #16
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d814      	bhi.n	8003e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003e1e:	189a      	adds	r2, r3, r2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	001a      	movs	r2, r3
 8003e2a:	23ff      	movs	r3, #255	; 0xff
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	3b08      	subs	r3, #8
 8003e30:	2114      	movs	r1, #20
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fe f910 	bl	8002058 <__udivsi3>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e014      	b.n	8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003e48:	189a      	adds	r2, r3, r2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	001a      	movs	r2, r3
 8003e54:	23ff      	movs	r3, #255	; 0xff
 8003e56:	4013      	ands	r3, r2
 8003e58:	3b08      	subs	r3, #8
 8003e5a:	2114      	movs	r1, #20
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fe f8fb 	bl	8002058 <__udivsi3>
 8003e62:	0003      	movs	r3, r0
 8003e64:	3307      	adds	r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003e6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	221f      	movs	r2, #31
 8003e72:	4013      	ands	r3, r2
 8003e74:	2201      	movs	r2, #1
 8003e76:	409a      	lsls	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b004      	add	sp, #16
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40020407 	.word	0x40020407
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	4002081c 	.word	0x4002081c
 8003e90:	40020880 	.word	0x40020880

08003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	227f      	movs	r2, #127	; 0x7f
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003eaa:	4694      	mov	ip, r2
 8003eac:	4463      	add	r3, ip
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003eba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	1000823f 	.word	0x1000823f
 8003ed8:	40020940 	.word	0x40020940

08003edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eea:	e14d      	b.n	8004188 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4091      	lsls	r1, r2
 8003ef6:	000a      	movs	r2, r1
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d100      	bne.n	8003f04 <HAL_GPIO_Init+0x28>
 8003f02:	e13e      	b.n	8004182 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d005      	beq.n	8003f1c <HAL_GPIO_Init+0x40>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d130      	bne.n	8003f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	0013      	movs	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f52:	2201      	movs	r2, #1
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
 8003f58:	0013      	movs	r3, r2
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	2201      	movs	r2, #1
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	0013      	movs	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2203      	movs	r2, #3
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d017      	beq.n	8003fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d123      	bne.n	800400e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	0092      	lsls	r2, r2, #2
 8003fd0:	58d3      	ldr	r3, [r2, r3]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4013      	ands	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2107      	movs	r1, #7
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	08da      	lsrs	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	6939      	ldr	r1, [r7, #16]
 800400c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	43da      	mvns	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2203      	movs	r2, #3
 800402c:	401a      	ands	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	409a      	lsls	r2, r3
 8004034:	0013      	movs	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	23c0      	movs	r3, #192	; 0xc0
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	4013      	ands	r3, r2
 800404c:	d100      	bne.n	8004050 <HAL_GPIO_Init+0x174>
 800404e:	e098      	b.n	8004182 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004050:	4a53      	ldr	r2, [pc, #332]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3318      	adds	r3, #24
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	589b      	ldr	r3, [r3, r2]
 800405c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2203      	movs	r2, #3
 8004062:	4013      	ands	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	220f      	movs	r2, #15
 8004068:	409a      	lsls	r2, r3
 800406a:	0013      	movs	r3, r2
 800406c:	43da      	mvns	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	23a0      	movs	r3, #160	; 0xa0
 8004078:	05db      	lsls	r3, r3, #23
 800407a:	429a      	cmp	r2, r3
 800407c:	d019      	beq.n	80040b2 <HAL_GPIO_Init+0x1d6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a48      	ldr	r2, [pc, #288]	; (80041a4 <HAL_GPIO_Init+0x2c8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_GPIO_Init+0x1d2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <HAL_GPIO_Init+0x2cc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00d      	beq.n	80040aa <HAL_GPIO_Init+0x1ce>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a46      	ldr	r2, [pc, #280]	; (80041ac <HAL_GPIO_Init+0x2d0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <HAL_GPIO_Init+0x1ca>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_GPIO_Init+0x2d4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_GPIO_Init+0x1c6>
 800409e:	2304      	movs	r3, #4
 80040a0:	e008      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040a2:	2305      	movs	r3, #5
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040a6:	2303      	movs	r3, #3
 80040a8:	e004      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x1d8>
 80040b2:	2300      	movs	r3, #0
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	2103      	movs	r1, #3
 80040b8:	400a      	ands	r2, r1
 80040ba:	00d2      	lsls	r2, r2, #3
 80040bc:	4093      	lsls	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80040c4:	4936      	ldr	r1, [pc, #216]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	3318      	adds	r3, #24
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d2:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43da      	mvns	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	035b      	lsls	r3, r3, #13
 80040ea:	4013      	ands	r3, r2
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43da      	mvns	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	039b      	lsls	r3, r3, #14
 8004114:	4013      	ands	r3, r2
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 8004128:	2384      	movs	r3, #132	; 0x84
 800412a:	58d3      	ldr	r3, [r2, r3]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	43da      	mvns	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	029b      	lsls	r3, r3, #10
 8004140:	4013      	ands	r3, r2
 8004142:	d003      	beq.n	800414c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800414c:	4914      	ldr	r1, [pc, #80]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 800414e:	2284      	movs	r2, #132	; 0x84
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	58d3      	ldr	r3, [r2, r3]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43da      	mvns	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	4013      	ands	r3, r2
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <HAL_GPIO_Init+0x2c4>)
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3301      	adds	r3, #1
 8004186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	40da      	lsrs	r2, r3
 8004190:	1e13      	subs	r3, r2, #0
 8004192:	d000      	beq.n	8004196 <HAL_GPIO_Init+0x2ba>
 8004194:	e6aa      	b.n	8003eec <HAL_GPIO_Init+0x10>
  }
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b006      	add	sp, #24
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021800 	.word	0x40021800
 80041a4:	50000400 	.word	0x50000400
 80041a8:	50000800 	.word	0x50000800
 80041ac:	50000c00 	.word	0x50000c00
 80041b0:	50001000 	.word	0x50001000

080041b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041c2:	e0ba      	b.n	800433a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041c4:	2201      	movs	r2, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	409a      	lsls	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d100      	bne.n	80041d8 <HAL_GPIO_DeInit+0x24>
 80041d6:	e0ad      	b.n	8004334 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3318      	adds	r3, #24
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	589b      	ldr	r3, [r3, r2]
 80041e4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2203      	movs	r2, #3
 80041ea:	4013      	ands	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	220f      	movs	r2, #15
 80041f0:	409a      	lsls	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	23a0      	movs	r3, #160	; 0xa0
 80041fc:	05db      	lsls	r3, r3, #23
 80041fe:	429a      	cmp	r2, r3
 8004200:	d019      	beq.n	8004236 <HAL_GPIO_DeInit+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a53      	ldr	r2, [pc, #332]	; (8004354 <HAL_GPIO_DeInit+0x1a0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_GPIO_DeInit+0x7e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_GPIO_DeInit+0x1a4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00d      	beq.n	800422e <HAL_GPIO_DeInit+0x7a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a51      	ldr	r2, [pc, #324]	; (800435c <HAL_GPIO_DeInit+0x1a8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <HAL_GPIO_DeInit+0x76>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a50      	ldr	r2, [pc, #320]	; (8004360 <HAL_GPIO_DeInit+0x1ac>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_GPIO_DeInit+0x72>
 8004222:	2304      	movs	r3, #4
 8004224:	e008      	b.n	8004238 <HAL_GPIO_DeInit+0x84>
 8004226:	2305      	movs	r3, #5
 8004228:	e006      	b.n	8004238 <HAL_GPIO_DeInit+0x84>
 800422a:	2303      	movs	r3, #3
 800422c:	e004      	b.n	8004238 <HAL_GPIO_DeInit+0x84>
 800422e:	2302      	movs	r3, #2
 8004230:	e002      	b.n	8004238 <HAL_GPIO_DeInit+0x84>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_GPIO_DeInit+0x84>
 8004236:	2300      	movs	r3, #0
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	2103      	movs	r1, #3
 800423c:	400a      	ands	r2, r1
 800423e:	00d2      	lsls	r2, r2, #3
 8004240:	4093      	lsls	r3, r2
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d136      	bne.n	80042b6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004248:	4a41      	ldr	r2, [pc, #260]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	58d3      	ldr	r3, [r2, r3]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	43d2      	mvns	r2, r2
 8004252:	493f      	ldr	r1, [pc, #252]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 8004254:	4013      	ands	r3, r2
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800425a:	4a3d      	ldr	r2, [pc, #244]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 800425c:	2384      	movs	r3, #132	; 0x84
 800425e:	58d3      	ldr	r3, [r2, r3]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	43d2      	mvns	r2, r2
 8004264:	493a      	ldr	r1, [pc, #232]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 8004266:	4013      	ands	r3, r2
 8004268:	2284      	movs	r2, #132	; 0x84
 800426a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43d9      	mvns	r1, r3
 8004274:	4b36      	ldr	r3, [pc, #216]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 8004276:	400a      	ands	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800427a:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	43d9      	mvns	r1, r3
 8004282:	4b33      	ldr	r3, [pc, #204]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 8004284:	400a      	ands	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2203      	movs	r2, #3
 800428c:	4013      	ands	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	220f      	movs	r2, #15
 8004292:	409a      	lsls	r2, r3
 8004294:	0013      	movs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004298:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	3318      	adds	r3, #24
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	589a      	ldr	r2, [r3, r2]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	43d9      	mvns	r1, r3
 80042a8:	4829      	ldr	r0, [pc, #164]	; (8004350 <HAL_GPIO_DeInit+0x19c>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	400a      	ands	r2, r1
 80042b0:	3318      	adds	r3, #24
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2103      	movs	r1, #3
 80042c0:	4099      	lsls	r1, r3
 80042c2:	000b      	movs	r3, r1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	58d3      	ldr	r3, [r2, r3]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	2107      	movs	r1, #7
 80042da:	400a      	ands	r2, r1
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	210f      	movs	r1, #15
 80042e0:	4091      	lsls	r1, r2
 80042e2:	000a      	movs	r2, r1
 80042e4:	43d1      	mvns	r1, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	08d2      	lsrs	r2, r2, #3
 80042ea:	4019      	ands	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3208      	adds	r2, #8
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	0052      	lsls	r2, r2, #1
 80042fc:	2103      	movs	r1, #3
 80042fe:	4091      	lsls	r1, r2
 8004300:	000a      	movs	r2, r1
 8004302:	43d2      	mvns	r2, r2
 8004304:	401a      	ands	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2101      	movs	r1, #1
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4091      	lsls	r1, r2
 8004314:	000a      	movs	r2, r1
 8004316:	43d2      	mvns	r2, r2
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	0052      	lsls	r2, r2, #1
 8004326:	2103      	movs	r1, #3
 8004328:	4091      	lsls	r1, r2
 800432a:	000a      	movs	r2, r1
 800432c:	43d2      	mvns	r2, r2
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3301      	adds	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	40da      	lsrs	r2, r3
 8004340:	1e13      	subs	r3, r2, #0
 8004342:	d000      	beq.n	8004346 <HAL_GPIO_DeInit+0x192>
 8004344:	e73e      	b.n	80041c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b006      	add	sp, #24
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021800 	.word	0x40021800
 8004354:	50000400 	.word	0x50000400
 8004358:	50000800 	.word	0x50000800
 800435c:	50000c00 	.word	0x50000c00
 8004360:	50001000 	.word	0x50001000

08004364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	000a      	movs	r2, r1
 800436e:	1cbb      	adds	r3, r7, #2
 8004370:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	1cba      	adds	r2, r7, #2
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	4013      	ands	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e003      	b.n	8004390 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004388:	230f      	movs	r3, #15
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004390:	230f      	movs	r3, #15
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	781b      	ldrb	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	0008      	movs	r0, r1
 80043a8:	0011      	movs	r1, r2
 80043aa:	1cbb      	adds	r3, r7, #2
 80043ac:	1c02      	adds	r2, r0, #0
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	1c7b      	adds	r3, r7, #1
 80043b2:	1c0a      	adds	r2, r1, #0
 80043b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b6:	1c7b      	adds	r3, r7, #1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043be:	1cbb      	adds	r3, r7, #2
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c6:	e003      	b.n	80043d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c8:	1cbb      	adds	r3, r7, #2
 80043ca:	881a      	ldrh	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	000a      	movs	r2, r1
 80043e2:	1cbb      	adds	r3, r7, #2
 80043e4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ec:	1cbb      	adds	r3, r7, #2
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	1cb9      	adds	r1, r7, #2
 80043fc:	8809      	ldrh	r1, [r1, #0]
 80043fe:	400b      	ands	r3, r1
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	0002      	movs	r2, r0
 8004418:	1dbb      	adds	r3, r7, #6
 800441a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	1dba      	adds	r2, r7, #6
 8004422:	8812      	ldrh	r2, [r2, #0]
 8004424:	4013      	ands	r3, r2
 8004426:	d008      	beq.n	800443a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800442a:	1dba      	adds	r2, r7, #6
 800442c:	8812      	ldrh	r2, [r2, #0]
 800442e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004430:	1dbb      	adds	r3, r7, #6
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	0018      	movs	r0, r3
 8004436:	f000 f815 	bl	8004464 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	1dba      	adds	r2, r7, #6
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	4013      	ands	r3, r2
 8004444:	d008      	beq.n	8004458 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004448:	1dba      	adds	r2, r7, #6
 800444a:	8812      	ldrh	r2, [r2, #0]
 800444c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800444e:	1dbb      	adds	r3, r7, #6
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	0018      	movs	r0, r3
 8004454:	f000 f810 	bl	8004478 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021800 	.word	0x40021800

08004464 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	0002      	movs	r2, r0
 800446c:	1dbb      	adds	r3, r7, #6
 800446e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	0002      	movs	r2, r0
 8004480:	1dbb      	adds	r3, r7, #6
 8004482:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	000a      	movs	r2, r1
 8004496:	1cbb      	adds	r3, r7, #2
 8004498:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800449a:	230a      	movs	r3, #10
 800449c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800449e:	e002      	b.n	80044a6 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80044ac:	1cbb      	adds	r3, r7, #2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4a06      	ldr	r2, [pc, #24]	; (80044cc <PCD_GET_EP_RX_CNT+0x40>)
 80044b4:	4694      	mov	ip, r2
 80044b6:	4463      	add	r3, ip
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	b29b      	uxth	r3, r3
 80044be:	059b      	lsls	r3, r3, #22
 80044c0:	0d9b      	lsrs	r3, r3, #22
 80044c2:	b29b      	uxth	r3, r3
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40009800 	.word	0x40009800

080044d0 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	000a      	movs	r2, r1
 80044da:	1cbb      	adds	r3, r7, #2
 80044dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80044de:	230a      	movs	r3, #10
 80044e0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80044e2:	e002      	b.n	80044ea <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f9      	bne.n	80044e4 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80044f0:	1cbb      	adds	r3, r7, #2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4a06      	ldr	r2, [pc, #24]	; (8004510 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80044f8:	4694      	mov	ip, r2
 80044fa:	4463      	add	r3, ip
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	b29b      	uxth	r3, r3
 8004502:	059b      	lsls	r3, r3, #22
 8004504:	0d9b      	lsrs	r3, r3, #22
 8004506:	b29b      	uxth	r3, r3
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40009800 	.word	0x40009800

08004514 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	000a      	movs	r2, r1
 800451e:	1cbb      	adds	r3, r7, #2
 8004520:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8004522:	230a      	movs	r3, #10
 8004524:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004526:	e002      	b.n	800452e <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b01      	subs	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f9      	bne.n	8004528 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004534:	1cbb      	adds	r3, r7, #2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4a06      	ldr	r2, [pc, #24]	; (8004554 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800453c:	4694      	mov	ip, r2
 800453e:	4463      	add	r3, ip
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b29b      	uxth	r3, r3
 8004546:	059b      	lsls	r3, r3, #22
 8004548:	0d9b      	lsrs	r3, r3, #22
 800454a:	b29b      	uxth	r3, r3
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b004      	add	sp, #16
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40009800 	.word	0x40009800

08004558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b08f      	sub	sp, #60	; 0x3c
 800455c:	af0a      	add	r7, sp, #40	; 0x28
 800455e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e10a      	b.n	8004780 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a86      	ldr	r2, [pc, #536]	; (8004788 <HAL_PCD_Init+0x230>)
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	23af      	movs	r3, #175	; 0xaf
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	2100      	movs	r1, #0
 800457e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f7fe ffda 	bl	800353c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a7f      	ldr	r2, [pc, #508]	; (8004788 <HAL_PCD_Init+0x230>)
 800458c:	2103      	movs	r1, #3
 800458e:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0018      	movs	r0, r3
 800459c:	f005 fa1e 	bl	80099dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a0:	230f      	movs	r3, #15
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e05b      	b.n	8004662 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045aa:	240f      	movs	r4, #15
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	203d      	movs	r0, #61	; 0x3d
 80045b4:	0013      	movs	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	18cb      	adds	r3, r1, r3
 80045be:	181b      	adds	r3, r3, r0
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	203c      	movs	r0, #60	; 0x3c
 80045cc:	0013      	movs	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	18cb      	adds	r3, r1, r3
 80045d6:	181b      	adds	r3, r3, r0
 80045d8:	193a      	adds	r2, r7, r4
 80045da:	7812      	ldrb	r2, [r2, #0]
 80045dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045de:	0025      	movs	r5, r4
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	197b      	adds	r3, r7, r5
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b29c      	uxth	r4, r3
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	2048      	movs	r0, #72	; 0x48
 80045ee:	0013      	movs	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	18cb      	adds	r3, r1, r3
 80045f8:	181b      	adds	r3, r3, r0
 80045fa:	1c22      	adds	r2, r4, #0
 80045fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045fe:	197b      	adds	r3, r7, r5
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	203f      	movs	r0, #63	; 0x3f
 8004606:	0013      	movs	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	189b      	adds	r3, r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	18cb      	adds	r3, r1, r3
 8004610:	181b      	adds	r3, r3, r0
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004616:	197b      	adds	r3, r7, r5
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	0013      	movs	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	189b      	adds	r3, r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	18cb      	adds	r3, r1, r3
 8004626:	334c      	adds	r3, #76	; 0x4c
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800462c:	197b      	adds	r3, r7, r5
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	0013      	movs	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	189b      	adds	r3, r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	18cb      	adds	r3, r1, r3
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004642:	197b      	adds	r3, r7, r5
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	0013      	movs	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	189b      	adds	r3, r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	18cb      	adds	r3, r1, r3
 8004652:	3354      	adds	r3, #84	; 0x54
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004658:	197b      	adds	r3, r7, r5
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	197b      	adds	r3, r7, r5
 800465e:	3201      	adds	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	210f      	movs	r1, #15
 8004664:	187b      	adds	r3, r7, r1
 8004666:	781a      	ldrb	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d39c      	bcc.n	80045aa <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e056      	b.n	8004726 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004678:	240f      	movs	r4, #15
 800467a:	193b      	adds	r3, r7, r4
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	237e      	movs	r3, #126	; 0x7e
 8004682:	33ff      	adds	r3, #255	; 0xff
 8004684:	0019      	movs	r1, r3
 8004686:	0013      	movs	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	189b      	adds	r3, r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	18c3      	adds	r3, r0, r3
 8004690:	185b      	adds	r3, r3, r1
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004696:	193b      	adds	r3, r7, r4
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	23be      	movs	r3, #190	; 0xbe
 800469e:	0059      	lsls	r1, r3, #1
 80046a0:	0013      	movs	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	18c3      	adds	r3, r0, r3
 80046aa:	185b      	adds	r3, r3, r1
 80046ac:	193a      	adds	r2, r7, r4
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046b2:	193b      	adds	r3, r7, r4
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	33ff      	adds	r3, #255	; 0xff
 80046bc:	0019      	movs	r1, r3
 80046be:	0013      	movs	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	18c3      	adds	r3, r0, r3
 80046c8:	185b      	adds	r3, r3, r1
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046ce:	193b      	adds	r3, r7, r4
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	23c6      	movs	r3, #198	; 0xc6
 80046d6:	0059      	lsls	r1, r3, #1
 80046d8:	0013      	movs	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	18c3      	adds	r3, r0, r3
 80046e2:	185b      	adds	r3, r3, r1
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	23c8      	movs	r3, #200	; 0xc8
 80046f0:	0059      	lsls	r1, r3, #1
 80046f2:	0013      	movs	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	18c3      	adds	r3, r0, r3
 80046fc:	185b      	adds	r3, r3, r1
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004702:	193b      	adds	r3, r7, r4
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	23ca      	movs	r3, #202	; 0xca
 800470a:	0059      	lsls	r1, r3, #1
 800470c:	0013      	movs	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	189b      	adds	r3, r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	18c3      	adds	r3, r0, r3
 8004716:	185b      	adds	r3, r3, r1
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800471c:	193b      	adds	r3, r7, r4
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	193b      	adds	r3, r7, r4
 8004722:	3201      	adds	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	230f      	movs	r3, #15
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781a      	ldrb	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d3a1      	bcc.n	8004678 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681c      	ldr	r4, [r3, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	466b      	mov	r3, sp
 800473c:	001a      	movs	r2, r3
 800473e:	0003      	movs	r3, r0
 8004740:	3310      	adds	r3, #16
 8004742:	cb62      	ldmia	r3!, {r1, r5, r6}
 8004744:	c262      	stmia	r2!, {r1, r5, r6}
 8004746:	cb62      	ldmia	r3!, {r1, r5, r6}
 8004748:	c262      	stmia	r2!, {r1, r5, r6}
 800474a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800474c:	c262      	stmia	r2!, {r1, r5, r6}
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	6841      	ldr	r1, [r0, #4]
 8004754:	6882      	ldr	r2, [r0, #8]
 8004756:	68c3      	ldr	r3, [r0, #12]
 8004758:	0020      	movs	r0, r4
 800475a:	f005 f971 	bl	8009a40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2238      	movs	r2, #56	; 0x38
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_PCD_Init+0x230>)
 800476a:	2101      	movs	r1, #1
 800476c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d103      	bne.n	800477e <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f001 fd33 	bl	80061e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b005      	add	sp, #20
 8004786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004788:	000002bd 	.word	0x000002bd

0800478c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	23af      	movs	r3, #175	; 0xaf
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_PCD_Start+0x18>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e014      	b.n	80047ce <HAL_PCD_Start+0x42>
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	23af      	movs	r3, #175	; 0xaf
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	2101      	movs	r1, #1
 80047ac:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f005 f8fe 	bl	80099b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0018      	movs	r0, r3
 80047be:	f007 f846 	bl	800b84e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	23af      	movs	r3, #175	; 0xaf
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	2100      	movs	r1, #0
 80047ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	23af      	movs	r3, #175	; 0xaf
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	5cd3      	ldrb	r3, [r2, r3]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_PCD_Stop+0x18>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e014      	b.n	8004818 <HAL_PCD_Stop+0x42>
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	23af      	movs	r3, #175	; 0xaf
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	2101      	movs	r1, #1
 80047f6:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f005 f8ed 	bl	80099dc <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0018      	movs	r0, r3
 8004808:	f007 f832 	bl	800b870 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	23af      	movs	r3, #175	; 0xaf
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	2100      	movs	r1, #0
 8004814:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	f007 f831 	bl	800b894 <USB_ReadInterrupts>
 8004832:	0003      	movs	r3, r0
 8004834:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8004836:	4a7c      	ldr	r2, [pc, #496]	; (8004a28 <HAL_PCD_IRQHandler+0x208>)
 8004838:	23a0      	movs	r3, #160	; 0xa0
 800483a:	58d3      	ldr	r3, [r2, r3]
 800483c:	2204      	movs	r2, #4
 800483e:	4013      	ands	r3, r2
 8004840:	d100      	bne.n	8004844 <HAL_PCD_IRQHandler+0x24>
 8004842:	e0ed      	b.n	8004a20 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4013      	ands	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 fbb7 	bl	8004fc4 <PCD_EP_ISR_Handler>

    return;
 8004856:	e0e4      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4013      	ands	r3, r2
 8004860:	d011      	beq.n	8004886 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	496f      	ldr	r1, [pc, #444]	; (8004a2c <HAL_PCD_IRQHandler+0x20c>)
 800486e:	400a      	ands	r2, r1
 8004870:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0018      	movs	r0, r3
 8004876:	f011 fbff 	bl	8016078 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2100      	movs	r1, #0
 800487e:	0018      	movs	r0, r3
 8004880:	f000 f8fc 	bl	8004a7c <HAL_PCD_SetAddress>

    return;
 8004884:	e0cd      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	01db      	lsls	r3, r3, #7
 800488c:	4013      	ands	r3, r2
 800488e:	d008      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4965      	ldr	r1, [pc, #404]	; (8004a30 <HAL_PCD_IRQHandler+0x210>)
 800489c:	400a      	ands	r2, r1
 800489e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80048a0:	e0bf      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	4013      	ands	r3, r2
 80048aa:	d008      	beq.n	80048be <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	495f      	ldr	r1, [pc, #380]	; (8004a34 <HAL_PCD_IRQHandler+0x214>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80048bc:	e0b1      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	4013      	ands	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2104      	movs	r1, #4
 80048d4:	438a      	bics	r2, r1
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2108      	movs	r1, #8
 80048e4:	438a      	bics	r2, r1
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	23bd      	movs	r3, #189	; 0xbd
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	5cd3      	ldrb	r3, [r2, r3]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d109      	bne.n	8004908 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	23bd      	movs	r3, #189	; 0xbd
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	2100      	movs	r1, #0
 80048fc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2100      	movs	r1, #0
 8004902:	0018      	movs	r0, r3
 8004904:	f001 fc90 	bl	8006228 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0018      	movs	r0, r3
 800490c:	f000 f8ae 	bl	8004a6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4947      	ldr	r1, [pc, #284]	; (8004a38 <HAL_PCD_IRQHandler+0x218>)
 800491c:	400a      	ands	r2, r1
 800491e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004920:	e07f      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4013      	ands	r3, r2
 800492a:	d01c      	beq.n	8004966 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2108      	movs	r1, #8
 8004938:	430a      	orrs	r2, r1
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	493d      	ldr	r1, [pc, #244]	; (8004a3c <HAL_PCD_IRQHandler+0x21c>)
 8004948:	400a      	ands	r2, r1
 800494a:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2104      	movs	r1, #4
 8004958:	430a      	orrs	r2, r1
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f87c 	bl	8004a5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004964:	e05d      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	4013      	ands	r3, r2
 800496c:	d038      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4931      	ldr	r1, [pc, #196]	; (8004a40 <HAL_PCD_IRQHandler+0x220>)
 800497a:	400a      	ands	r2, r1
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	23bd      	movs	r3, #189	; 0xbd
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d125      	bne.n	80049d6 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2104      	movs	r1, #4
 8004996:	430a      	orrs	r2, r1
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2108      	movs	r1, #8
 80049a6:	430a      	orrs	r2, r1
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	23bd      	movs	r3, #189	; 0xbd
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	2101      	movs	r1, #1
 80049b2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	4013      	ands	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	23be      	movs	r3, #190	; 0xbe
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2101      	movs	r1, #1
 80049ce:	0018      	movs	r0, r3
 80049d0:	f001 fc2a 	bl	8006228 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80049d4:	e025      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 f83f 	bl	8004a5c <HAL_PCD_SuspendCallback>
    return;
 80049de:	e020      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00c      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4913      	ldr	r1, [pc, #76]	; (8004a44 <HAL_PCD_IRQHandler+0x224>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f825 	bl	8004a4c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a02:	e00e      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	490b      	ldr	r1, [pc, #44]	; (8004a48 <HAL_PCD_IRQHandler+0x228>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004a1e:	e000      	b.n	8004a22 <HAL_PCD_IRQHandler+0x202>
    return;
 8004a20:	46c0      	nop			; (mov r8, r8)
  }
}
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b004      	add	sp, #16
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	0000fbff 	.word	0x0000fbff
 8004a30:	0000bfff 	.word	0x0000bfff
 8004a34:	0000dfff 	.word	0x0000dfff
 8004a38:	0000efff 	.word	0x0000efff
 8004a3c:	0000f7ff 	.word	0x0000f7ff
 8004a40:	0000ff7f 	.word	0x0000ff7f
 8004a44:	0000fdff 	.word	0x0000fdff
 8004a48:	0000feff 	.word	0x0000feff

08004a4c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	000a      	movs	r2, r1
 8004a86:	1cfb      	adds	r3, r7, #3
 8004a88:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	23af      	movs	r3, #175	; 0xaf
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	5cd3      	ldrb	r3, [r2, r3]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_PCD_SetAddress+0x1e>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e017      	b.n	8004aca <HAL_PCD_SetAddress+0x4e>
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	23af      	movs	r3, #175	; 0xaf
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1cfa      	adds	r2, r7, #3
 8004aa8:	2138      	movs	r1, #56	; 0x38
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	1cfb      	adds	r3, r7, #3
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	0010      	movs	r0, r2
 8004aba:	f006 feb5 	bl	800b828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	23af      	movs	r3, #175	; 0xaf
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b002      	add	sp, #8
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ad2:	b590      	push	{r4, r7, lr}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	000c      	movs	r4, r1
 8004adc:	0010      	movs	r0, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	1cfb      	adds	r3, r7, #3
 8004ae2:	1c22      	adds	r2, r4, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	003b      	movs	r3, r7
 8004ae8:	1c02      	adds	r2, r0, #0
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	1cbb      	adds	r3, r7, #2
 8004aee:	1c0a      	adds	r2, r1, #0
 8004af0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004af2:	230b      	movs	r3, #11
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004afa:	1cfb      	adds	r3, r7, #3
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da10      	bge.n	8004b26 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b04:	1cfb      	adds	r3, r7, #3
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2207      	movs	r2, #7
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	0013      	movs	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	3338      	adds	r3, #56	; 0x38
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	18d3      	adds	r3, r2, r3
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	705a      	strb	r2, [r3, #1]
 8004b24:	e010      	b.n	8004b48 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b26:	1cfb      	adds	r3, r7, #3
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2207      	movs	r2, #7
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	0013      	movs	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	3379      	adds	r3, #121	; 0x79
 8004b38:	33ff      	adds	r3, #255	; 0xff
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	18d3      	adds	r3, r2, r3
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b48:	1cfb      	adds	r3, r7, #3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b56:	003b      	movs	r3, r7
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1cba      	adds	r2, r7, #2
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b78:	1cbb      	adds	r3, r7, #2
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d102      	bne.n	8004b86 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	23af      	movs	r3, #175	; 0xaf
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_PCD_EP_Open+0xc4>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e013      	b.n	8004bbe <HAL_PCD_EP_Open+0xec>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	23af      	movs	r3, #175	; 0xaf
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f004 ff73 	bl	8009a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	23af      	movs	r3, #175	; 0xaf
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bb8:	230b      	movs	r3, #11
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b005      	add	sp, #20
 8004bc4:	bd90      	pop	{r4, r7, pc}

08004bc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	000a      	movs	r2, r1
 8004bd0:	1cfb      	adds	r3, r7, #3
 8004bd2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd4:	1cfb      	adds	r3, r7, #3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da10      	bge.n	8004c00 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bde:	1cfb      	adds	r3, r7, #3
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2207      	movs	r2, #7
 8004be4:	401a      	ands	r2, r3
 8004be6:	0013      	movs	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	3338      	adds	r3, #56	; 0x38
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	18d3      	adds	r3, r2, r3
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	705a      	strb	r2, [r3, #1]
 8004bfe:	e010      	b.n	8004c22 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c00:	1cfb      	adds	r3, r7, #3
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2207      	movs	r2, #7
 8004c06:	401a      	ands	r2, r3
 8004c08:	0013      	movs	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3379      	adds	r3, #121	; 0x79
 8004c12:	33ff      	adds	r3, #255	; 0xff
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	3304      	adds	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c22:	1cfb      	adds	r3, r7, #3
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2207      	movs	r2, #7
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	23af      	movs	r3, #175	; 0xaf
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_EP_Close+0x7a>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e011      	b.n	8004c64 <HAL_PCD_EP_Close+0x9e>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	23af      	movs	r3, #175	; 0xaf
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	2101      	movs	r1, #1
 8004c48:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	0011      	movs	r1, r2
 8004c52:	0018      	movs	r0, r3
 8004c54:	f005 fa62 	bl	800a11c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	23af      	movs	r3, #175	; 0xaf
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	2100      	movs	r1, #0
 8004c60:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	0018      	movs	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b004      	add	sp, #16
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	200b      	movs	r0, #11
 8004c7a:	183b      	adds	r3, r7, r0
 8004c7c:	1c0a      	adds	r2, r1, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	0001      	movs	r1, r0
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2207      	movs	r2, #7
 8004c88:	401a      	ands	r2, r3
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	3379      	adds	r3, #121	; 0x79
 8004c94:	33ff      	adds	r3, #255	; 0xff
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	18d3      	adds	r3, r2, r3
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2207      	movs	r2, #7
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2207      	movs	r2, #7
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d107      	bne.n	8004cde <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	0011      	movs	r1, r2
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f005 fb86 	bl	800a3e8 <USB_EPStartXfer>
 8004cdc:	e006      	b.n	8004cec <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	0011      	movs	r1, r2
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f005 fb7e 	bl	800a3e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b006      	add	sp, #24
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	000a      	movs	r2, r1
 8004d00:	1cfb      	adds	r3, r7, #3
 8004d02:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d04:	1cfb      	adds	r3, r7, #3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2207      	movs	r2, #7
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	23cc      	movs	r3, #204	; 0xcc
 8004d10:	0059      	lsls	r1, r3, #1
 8004d12:	0013      	movs	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	18c3      	adds	r3, r0, r3
 8004d1c:	185b      	adds	r3, r3, r1
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	200b      	movs	r0, #11
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	1c0a      	adds	r2, r1, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2207      	movs	r2, #7
 8004d42:	401a      	ands	r2, r3
 8004d44:	0013      	movs	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	3338      	adds	r3, #56	; 0x38
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	3304      	adds	r3, #4
 8004d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2224      	movs	r2, #36	; 0x24
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2207      	movs	r2, #7
 8004d82:	4013      	ands	r3, r2
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	d107      	bne.n	8004da4 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f005 fb23 	bl	800a3e8 <USB_EPStartXfer>
 8004da2:	e006      	b.n	8004db2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	0011      	movs	r1, r2
 8004dac:	0018      	movs	r0, r3
 8004dae:	f005 fb1b 	bl	800a3e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b006      	add	sp, #24
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	000a      	movs	r2, r1
 8004dc6:	1cfb      	adds	r3, r7, #3
 8004dc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dca:	1cfb      	adds	r3, r7, #3
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2207      	movs	r2, #7
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d901      	bls.n	8004dde <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e048      	b.n	8004e70 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dde:	1cfb      	adds	r3, r7, #3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da10      	bge.n	8004e0a <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de8:	1cfb      	adds	r3, r7, #3
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2207      	movs	r2, #7
 8004dee:	401a      	ands	r2, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	189b      	adds	r3, r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	3338      	adds	r3, #56	; 0x38
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	3304      	adds	r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	705a      	strb	r2, [r3, #1]
 8004e08:	e00e      	b.n	8004e28 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e0a:	1cfb      	adds	r3, r7, #3
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	0013      	movs	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	3379      	adds	r3, #121	; 0x79
 8004e18:	33ff      	adds	r3, #255	; 0xff
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	18d3      	adds	r3, r2, r3
 8004e1e:	3304      	adds	r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2e:	1cfb      	adds	r3, r7, #3
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2207      	movs	r2, #7
 8004e34:	4013      	ands	r3, r2
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	23af      	movs	r3, #175	; 0xaf
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	5cd3      	ldrb	r3, [r2, r3]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_PCD_EP_SetStall+0x90>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e011      	b.n	8004e70 <HAL_PCD_EP_SetStall+0xb4>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	23af      	movs	r3, #175	; 0xaf
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	2101      	movs	r1, #1
 8004e54:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	0011      	movs	r1, r2
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f006 fb96 	bl	800b590 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	23af      	movs	r3, #175	; 0xaf
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b004      	add	sp, #16
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	000a      	movs	r2, r1
 8004e82:	1cfb      	adds	r3, r7, #3
 8004e84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e86:	1cfb      	adds	r3, r7, #3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	220f      	movs	r2, #15
 8004e8c:	401a      	ands	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d901      	bls.n	8004e9a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e04a      	b.n	8004f30 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e9a:	1cfb      	adds	r3, r7, #3
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	da10      	bge.n	8004ec6 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea4:	1cfb      	adds	r3, r7, #3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	401a      	ands	r2, r3
 8004eac:	0013      	movs	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	189b      	adds	r3, r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3338      	adds	r3, #56	; 0x38
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	3304      	adds	r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	705a      	strb	r2, [r3, #1]
 8004ec4:	e010      	b.n	8004ee8 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec6:	1cfb      	adds	r3, r7, #3
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2207      	movs	r2, #7
 8004ecc:	401a      	ands	r2, r3
 8004ece:	0013      	movs	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	3379      	adds	r3, #121	; 0x79
 8004ed8:	33ff      	adds	r3, #255	; 0xff
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	3304      	adds	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eee:	1cfb      	adds	r3, r7, #3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	23af      	movs	r3, #175	; 0xaf
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	5cd3      	ldrb	r3, [r2, r3]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_PCD_EP_ClrStall+0x94>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e011      	b.n	8004f30 <HAL_PCD_EP_ClrStall+0xb8>
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	23af      	movs	r3, #175	; 0xaf
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	2101      	movs	r1, #1
 8004f14:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	0011      	movs	r1, r2
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f006 fb78 	bl	800b614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	23af      	movs	r3, #175	; 0xaf
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b004      	add	sp, #16
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	000a      	movs	r2, r1
 8004f42:	1cfb      	adds	r3, r7, #3
 8004f44:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f46:	1cfb      	adds	r3, r7, #3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da0d      	bge.n	8004f6c <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f50:	1cfb      	adds	r3, r7, #3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2207      	movs	r2, #7
 8004f56:	401a      	ands	r2, r3
 8004f58:	0013      	movs	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	3338      	adds	r3, #56	; 0x38
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	18d3      	adds	r3, r2, r3
 8004f66:	3304      	adds	r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e00d      	b.n	8004f88 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f6c:	1cfb      	adds	r3, r7, #3
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2207      	movs	r2, #7
 8004f72:	401a      	ands	r2, r3
 8004f74:	0013      	movs	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	189b      	adds	r3, r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3379      	adds	r3, #121	; 0x79
 8004f7e:	33ff      	adds	r3, #255	; 0xff
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	3304      	adds	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	250b      	movs	r5, #11
 8004f8e:	197c      	adds	r4, r7, r5
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	0011      	movs	r1, r2
 8004f94:	0018      	movs	r0, r3
 8004f96:	f006 fbcf 	bl	800b738 <USB_EPStopXfer>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	7023      	strb	r3, [r4, #0]

  return ret;
 8004f9e:	197b      	adds	r3, r7, r5
 8004fa0:	781b      	ldrb	r3, [r3, #0]
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bdb0      	pop	{r4, r5, r7, pc}

08004faa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	000a      	movs	r2, r1
 8004fb4:	1cfb      	adds	r3, r7, #3
 8004fb6:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b002      	add	sp, #8
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004fc4:	b5b0      	push	{r4, r5, r7, lr}
 8004fc6:	b08e      	sub	sp, #56	; 0x38
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fcc:	f000 fb90 	bl	80056f0 <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	202a      	movs	r0, #42	; 0x2a
 8004fd8:	183b      	adds	r3, r7, r0
 8004fda:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8004fdc:	183b      	adds	r3, r7, r0
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	2429      	movs	r4, #41	; 0x29
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	400a      	ands	r2, r1
 8004fea:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004fec:	193b      	adds	r3, r7, r4
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d000      	beq.n	8004ff6 <PCD_EP_ISR_Handler+0x32>
 8004ff4:	e136      	b.n	8005264 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	2210      	movs	r2, #16
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d143      	bne.n	8005088 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4acb      	ldr	r2, [pc, #812]	; (8005334 <PCD_EP_ISR_Handler+0x370>)
 8005008:	4013      	ands	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	0209      	lsls	r1, r1, #8
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	333c      	adds	r3, #60	; 0x3c
 800501e:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4ac4      	ldr	r2, [pc, #784]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 8005028:	4694      	mov	ip, r2
 800502a:	4463      	add	r3, ip
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	059b      	lsls	r3, r3, #22
 8005032:	0d9a      	lsrs	r2, r3, #22
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	18d2      	adds	r2, r2, r3
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2100      	movs	r1, #0
 800504a:	0018      	movs	r0, r3
 800504c:	f010 fee2 	bl	8015e14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2238      	movs	r2, #56	; 0x38
 8005054:	5c9b      	ldrb	r3, [r3, r2]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d100      	bne.n	800505e <PCD_EP_ISR_Handler+0x9a>
 800505c:	e348      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d000      	beq.n	8005068 <PCD_EP_ISR_Handler+0xa4>
 8005066:	e343      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2238      	movs	r2, #56	; 0x38
 800506c:	5c9b      	ldrb	r3, [r3, r2]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	4252      	negs	r2, r2
 8005074:	4313      	orrs	r3, r2
 8005076:	b2da      	uxtb	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2238      	movs	r2, #56	; 0x38
 8005082:	2100      	movs	r1, #0
 8005084:	5499      	strb	r1, [r3, r2]
 8005086:	e333      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	337d      	adds	r3, #125	; 0x7d
 800508c:	33ff      	adds	r3, #255	; 0xff
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	2126      	movs	r1, #38	; 0x26
 8005098:	187b      	adds	r3, r7, r1
 800509a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800509c:	187b      	adds	r3, r7, r1
 800509e:	881a      	ldrh	r2, [r3, #0]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	4013      	ands	r3, r2
 80050a6:	d02a      	beq.n	80050fe <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	0019      	movs	r1, r3
 80050b4:	0010      	movs	r0, r2
 80050b6:	f7ff f9e9 	bl	800448c <PCD_GET_EP_RX_CNT>
 80050ba:	0003      	movs	r3, r0
 80050bc:	001a      	movs	r2, r3
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	22b1      	movs	r2, #177	; 0xb1
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	1899      	adds	r1, r3, r2
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f006 fc5e 	bl	800b998 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a96      	ldr	r2, [pc, #600]	; (800533c <PCD_EP_ISR_Handler+0x378>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f010 fe08 	bl	8015d0c <HAL_PCD_SetupStageCallback>
 80050fc:	e2f8      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80050fe:	2326      	movs	r3, #38	; 0x26
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	2200      	movs	r2, #0
 8005104:	5e9b      	ldrsh	r3, [r3, r2]
 8005106:	2b00      	cmp	r3, #0
 8005108:	db00      	blt.n	800510c <PCD_EP_ISR_Handler+0x148>
 800510a:	e2f1      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a8a      	ldr	r2, [pc, #552]	; (800533c <PCD_EP_ISR_Handler+0x378>)
 8005114:	4013      	ands	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	0019      	movs	r1, r3
 8005130:	0010      	movs	r0, r2
 8005132:	f7ff f9ab 	bl	800448c <PCD_GET_EP_RX_CNT>
 8005136:	0003      	movs	r3, r0
 8005138:	001a      	movs	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01a      	beq.n	800517c <PCD_EP_ISR_Handler+0x1b8>
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	6959      	ldr	r1, [r3, #20]
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800515e:	b29b      	uxth	r3, r3
 8005160:	f006 fc1a 	bl	800b998 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	18d2      	adds	r2, r2, r3
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	0018      	movs	r0, r3
 8005178:	f010 fef4 	bl	8015f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2126      	movs	r1, #38	; 0x26
 8005184:	187b      	adds	r3, r7, r1
 8005186:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005188:	187b      	adds	r3, r7, r1
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	4013      	ands	r3, r2
 8005192:	d000      	beq.n	8005196 <PCD_EP_ISR_Handler+0x1d2>
 8005194:	e2ac      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
 8005196:	187b      	adds	r3, r7, r1
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	23c0      	movs	r3, #192	; 0xc0
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	401a      	ands	r2, r3
 80051a0:	23c0      	movs	r3, #192	; 0xc0
 80051a2:	019b      	lsls	r3, r3, #6
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d100      	bne.n	80051aa <PCD_EP_ISR_Handler+0x1e6>
 80051a8:	e2a2      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80051aa:	4b63      	ldr	r3, [pc, #396]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	4b62      	ldr	r3, [pc, #392]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051b0:	0412      	lsls	r2, r2, #16
 80051b2:	0c12      	lsrs	r2, r2, #16
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b3e      	cmp	r3, #62	; 0x3e
 80051bc:	d916      	bls.n	80051ec <PCD_EP_ISR_Handler+0x228>
 80051be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	221f      	movs	r2, #31
 80051cc:	4013      	ands	r3, r2
 80051ce:	d102      	bne.n	80051d6 <PCD_EP_ISR_Handler+0x212>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	4b58      	ldr	r3, [pc, #352]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	069b      	lsls	r3, r3, #26
 80051de:	431a      	orrs	r2, r3
 80051e0:	4b55      	ldr	r3, [pc, #340]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	0609      	lsls	r1, r1, #24
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e024      	b.n	8005236 <PCD_EP_ISR_Handler+0x272>
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <PCD_EP_ISR_Handler+0x24c>
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4b4f      	ldr	r3, [pc, #316]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 80051fa:	4951      	ldr	r1, [pc, #324]	; (8005340 <PCD_EP_ISR_Handler+0x37c>)
 80051fc:	400a      	ands	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	4b4d      	ldr	r3, [pc, #308]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	4b4c      	ldr	r3, [pc, #304]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	0609      	lsls	r1, r1, #24
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	e012      	b.n	8005236 <PCD_EP_ISR_Handler+0x272>
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2201      	movs	r2, #1
 800521e:	4013      	ands	r3, r2
 8005220:	d002      	beq.n	8005228 <PCD_EP_ISR_Handler+0x264>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3301      	adds	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	4b43      	ldr	r3, [pc, #268]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	069a      	lsls	r2, r3, #26
 8005230:	4b41      	ldr	r3, [pc, #260]	; (8005338 <PCD_EP_ISR_Handler+0x374>)
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a41      	ldr	r2, [pc, #260]	; (8005344 <PCD_EP_ISR_Handler+0x380>)
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	0152      	lsls	r2, r2, #5
 8005248:	4053      	eors	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	0192      	lsls	r2, r2, #6
 8005252:	4053      	eors	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	493a      	ldr	r1, [pc, #232]	; (8005348 <PCD_EP_ISR_Handler+0x384>)
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e245      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	001a      	movs	r2, r3
 800526a:	2129      	movs	r1, #41	; 0x29
 800526c:	187b      	adds	r3, r7, r1
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	2026      	movs	r0, #38	; 0x26
 8005278:	183b      	adds	r3, r7, r0
 800527a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800527c:	183b      	adds	r3, r7, r0
 800527e:	2200      	movs	r2, #0
 8005280:	5e9b      	ldrsh	r3, [r3, r2]
 8005282:	2b00      	cmp	r3, #0
 8005284:	db00      	blt.n	8005288 <PCD_EP_ISR_Handler+0x2c4>
 8005286:	e0e4      	b.n	8005452 <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	001a      	movs	r2, r3
 800528e:	187b      	adds	r3, r7, r1
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	18d3      	adds	r3, r2, r3
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a28      	ldr	r2, [pc, #160]	; (800533c <PCD_EP_ISR_Handler+0x378>)
 800529a:	4013      	ands	r3, r2
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	001a      	movs	r2, r3
 80052a4:	0008      	movs	r0, r1
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	0013      	movs	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	3379      	adds	r3, #121	; 0x79
 80052c4:	33ff      	adds	r3, #255	; 0xff
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	3304      	adds	r3, #4
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	7a9b      	ldrb	r3, [r3, #10]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11d      	bne.n	8005312 <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	252c      	movs	r5, #44	; 0x2c
 80052e2:	197c      	adds	r4, r7, r5
 80052e4:	0019      	movs	r1, r3
 80052e6:	0010      	movs	r0, r2
 80052e8:	f7ff f8d0 	bl	800448c <PCD_GET_EP_RX_CNT>
 80052ec:	0003      	movs	r3, r0
 80052ee:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 80052f0:	002c      	movs	r4, r5
 80052f2:	193b      	adds	r3, r7, r4
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d100      	bne.n	80052fc <PCD_EP_ISR_Handler+0x338>
 80052fa:	e082      	b.n	8005402 <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	6959      	ldr	r1, [r3, #20]
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	889a      	ldrh	r2, [r3, #4]
 8005308:	193b      	adds	r3, r7, r4
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	f006 fb44 	bl	800b998 <USB_ReadPMA>
 8005310:	e077      	b.n	8005402 <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	78db      	ldrb	r3, [r3, #3]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d118      	bne.n	800534c <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800531a:	232c      	movs	r3, #44	; 0x2c
 800531c:	18fc      	adds	r4, r7, r3
 800531e:	2326      	movs	r3, #38	; 0x26
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f9ef 	bl	800570c <HAL_PCD_EP_DB_Receive>
 800532e:	0003      	movs	r3, r0
 8005330:	8023      	strh	r3, [r4, #0]
 8005332:	e066      	b.n	8005402 <PCD_EP_ISR_Handler+0x43e>
 8005334:	07ff8f0f 	.word	0x07ff8f0f
 8005338:	40009800 	.word	0x40009800
 800533c:	07ff0f8f 	.word	0x07ff0f8f
 8005340:	83ffffff 	.word	0x83ffffff
 8005344:	07ffbf8f 	.word	0x07ffbf8f
 8005348:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	001a      	movs	r2, r3
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	18d3      	adds	r3, r2, r3
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4adb      	ldr	r2, [pc, #876]	; (80056cc <PCD_EP_ISR_Handler+0x708>)
 800535e:	4013      	ands	r3, r2
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	001a      	movs	r2, r3
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	18d3      	adds	r3, r2, r3
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	49d7      	ldr	r1, [pc, #860]	; (80056d0 <PCD_EP_ISR_Handler+0x70c>)
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	001a      	movs	r2, r3
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	4013      	ands	r3, r2
 800538e:	d01c      	beq.n	80053ca <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	252c      	movs	r5, #44	; 0x2c
 800539c:	197c      	adds	r4, r7, r5
 800539e:	0019      	movs	r1, r3
 80053a0:	0010      	movs	r0, r2
 80053a2:	f7ff f895 	bl	80044d0 <PCD_GET_EP_DBUF0_CNT>
 80053a6:	0003      	movs	r3, r0
 80053a8:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80053aa:	002c      	movs	r4, r5
 80053ac:	193b      	adds	r3, r7, r4
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d026      	beq.n	8005402 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	6959      	ldr	r1, [r3, #20]
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	88da      	ldrh	r2, [r3, #6]
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	f006 fae8 	bl	800b998 <USB_ReadPMA>
 80053c8:	e01b      	b.n	8005402 <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	252c      	movs	r5, #44	; 0x2c
 80053d6:	197c      	adds	r4, r7, r5
 80053d8:	0019      	movs	r1, r3
 80053da:	0010      	movs	r0, r2
 80053dc:	f7ff f89a 	bl	8004514 <PCD_GET_EP_DBUF1_CNT>
 80053e0:	0003      	movs	r3, r0
 80053e2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80053e4:	002c      	movs	r4, r5
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	891a      	ldrh	r2, [r3, #8]
 80053fa:	193b      	adds	r3, r7, r4
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	f006 facb 	bl	800b998 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	187b      	adds	r3, r7, r1
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	18d2      	adds	r2, r2, r3
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	187b      	adds	r3, r7, r1
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	18d2      	adds	r2, r2, r3
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <PCD_EP_ISR_Handler+0x470>
 8005428:	187b      	adds	r3, r7, r1
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d207      	bcs.n	8005444 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0011      	movs	r1, r2
 800543c:	0018      	movs	r0, r3
 800543e:	f010 fd91 	bl	8015f64 <HAL_PCD_DataOutStageCallback>
 8005442:	e006      	b.n	8005452 <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f004 ffcb 	bl	800a3e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8005452:	2026      	movs	r0, #38	; 0x26
 8005454:	183b      	adds	r3, r7, r0
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	2280      	movs	r2, #128	; 0x80
 800545a:	4013      	ands	r3, r2
 800545c:	d100      	bne.n	8005460 <PCD_EP_ISR_Handler+0x49c>
 800545e:	e147      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8005460:	2129      	movs	r1, #41	; 0x29
 8005462:	187b      	adds	r3, r7, r1
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	0013      	movs	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	189b      	adds	r3, r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	3338      	adds	r3, #56	; 0x38
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	18d3      	adds	r3, r2, r3
 8005474:	3304      	adds	r3, #4
 8005476:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	001a      	movs	r2, r3
 800547e:	187b      	adds	r3, r7, r1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a92      	ldr	r2, [pc, #584]	; (80056d4 <PCD_EP_ISR_Handler+0x710>)
 800548a:	4013      	ands	r3, r2
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	001a      	movs	r2, r3
 8005494:	187b      	adds	r3, r7, r1
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	18d3      	adds	r3, r2, r3
 800549c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	0209      	lsls	r1, r1, #8
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d000      	beq.n	80054b0 <PCD_EP_ISR_Handler+0x4ec>
 80054ae:	e0c3      	b.n	8005638 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	7a9b      	ldrb	r3, [r3, #10]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d100      	bne.n	80054c0 <PCD_EP_ISR_Handler+0x4fc>
 80054be:	e0b3      	b.n	8005628 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054c0:	183b      	adds	r3, r7, r0
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2240      	movs	r2, #64	; 0x40
 80054c6:	4013      	ands	r3, r2
 80054c8:	d057      	beq.n	800557a <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d131      	bne.n	8005536 <PCD_EP_ISR_Handler+0x572>
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4a7f      	ldr	r2, [pc, #508]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80054da:	4694      	mov	ip, r2
 80054dc:	4463      	add	r3, ip
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	497c      	ldr	r1, [pc, #496]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80054e8:	468c      	mov	ip, r1
 80054ea:	4463      	add	r3, ip
 80054ec:	0412      	lsls	r2, r2, #16
 80054ee:	0c12      	lsrs	r2, r2, #16
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4a77      	ldr	r2, [pc, #476]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80054fa:	4694      	mov	ip, r2
 80054fc:	4463      	add	r3, ip
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4974      	ldr	r1, [pc, #464]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005508:	468c      	mov	ip, r1
 800550a:	4463      	add	r3, ip
 800550c:	4973      	ldr	r1, [pc, #460]	; (80056dc <PCD_EP_ISR_Handler+0x718>)
 800550e:	400a      	ands	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4a6f      	ldr	r2, [pc, #444]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 800551a:	4694      	mov	ip, r2
 800551c:	4463      	add	r3, ip
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	496c      	ldr	r1, [pc, #432]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005528:	468c      	mov	ip, r1
 800552a:	4463      	add	r3, ip
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	0609      	lsls	r1, r1, #24
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e078      	b.n	8005628 <PCD_EP_ISR_Handler+0x664>
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d174      	bne.n	8005628 <PCD_EP_ISR_Handler+0x664>
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4a64      	ldr	r2, [pc, #400]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005546:	4694      	mov	ip, r2
 8005548:	4463      	add	r3, ip
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4961      	ldr	r1, [pc, #388]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005554:	468c      	mov	ip, r1
 8005556:	4463      	add	r3, ip
 8005558:	0412      	lsls	r2, r2, #16
 800555a:	0c12      	lsrs	r2, r2, #16
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4a5c      	ldr	r2, [pc, #368]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005566:	189a      	adds	r2, r3, r2
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	495a      	ldr	r1, [pc, #360]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005570:	468c      	mov	ip, r1
 8005572:	4463      	add	r3, ip
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e056      	b.n	8005628 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d131      	bne.n	80055e6 <PCD_EP_ISR_Handler+0x622>
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4a53      	ldr	r2, [pc, #332]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 800558a:	4694      	mov	ip, r2
 800558c:	4463      	add	r3, ip
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4950      	ldr	r1, [pc, #320]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005598:	468c      	mov	ip, r1
 800559a:	4463      	add	r3, ip
 800559c:	0412      	lsls	r2, r2, #16
 800559e:	0c12      	lsrs	r2, r2, #16
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4a4b      	ldr	r2, [pc, #300]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80055aa:	4694      	mov	ip, r2
 80055ac:	4463      	add	r3, ip
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4948      	ldr	r1, [pc, #288]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80055b8:	468c      	mov	ip, r1
 80055ba:	4463      	add	r3, ip
 80055bc:	4947      	ldr	r1, [pc, #284]	; (80056dc <PCD_EP_ISR_Handler+0x718>)
 80055be:	400a      	ands	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80055ca:	4694      	mov	ip, r2
 80055cc:	4463      	add	r3, ip
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4940      	ldr	r1, [pc, #256]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80055d8:	468c      	mov	ip, r1
 80055da:	4463      	add	r3, ip
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	0609      	lsls	r1, r1, #24
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	e020      	b.n	8005628 <PCD_EP_ISR_Handler+0x664>
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d11c      	bne.n	8005628 <PCD_EP_ISR_Handler+0x664>
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 80055f6:	4694      	mov	ip, r2
 80055f8:	4463      	add	r3, ip
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4935      	ldr	r1, [pc, #212]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005604:	468c      	mov	ip, r1
 8005606:	4463      	add	r3, ip
 8005608:	0412      	lsls	r2, r2, #16
 800560a:	0c12      	lsrs	r2, r2, #16
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005616:	189a      	adds	r2, r3, r2
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	492e      	ldr	r1, [pc, #184]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 8005620:	468c      	mov	ip, r1
 8005622:	4463      	add	r3, ip
 8005624:	6852      	ldr	r2, [r2, #4]
 8005626:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0011      	movs	r1, r2
 8005630:	0018      	movs	r0, r3
 8005632:	f010 fbef 	bl	8015e14 <HAL_PCD_DataInStageCallback>
 8005636:	e05b      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005638:	2326      	movs	r3, #38	; 0x26
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	4013      	ands	r3, r2
 8005644:	d14c      	bne.n	80056e0 <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <PCD_EP_ISR_Handler+0x714>)
 800564e:	4694      	mov	ip, r2
 8005650:	4463      	add	r3, ip
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b29a      	uxth	r2, r3
 8005658:	212e      	movs	r1, #46	; 0x2e
 800565a:	187b      	adds	r3, r7, r1
 800565c:	0592      	lsls	r2, r2, #22
 800565e:	0d92      	lsrs	r2, r2, #22
 8005660:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	187b      	adds	r3, r7, r1
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d907      	bls.n	800567e <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	187b      	adds	r3, r7, r1
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	619a      	str	r2, [r3, #24]
 800567c:	e002      	b.n	8005684 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	2200      	movs	r2, #0
 8005682:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0011      	movs	r1, r2
 8005694:	0018      	movs	r0, r3
 8005696:	f010 fbbd 	bl	8015e14 <HAL_PCD_DataInStageCallback>
 800569a:	e029      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	212e      	movs	r1, #46	; 0x2e
 80056a2:	187b      	adds	r3, r7, r1
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	18d2      	adds	r2, r2, r3
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	18d2      	adds	r2, r2, r3
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c0:	0011      	movs	r1, r2
 80056c2:	0018      	movs	r0, r3
 80056c4:	f004 fe90 	bl	800a3e8 <USB_EPStartXfer>
 80056c8:	e012      	b.n	80056f0 <PCD_EP_ISR_Handler+0x72c>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	07ff8f8f 	.word	0x07ff8f8f
 80056d0:	000080c0 	.word	0x000080c0
 80056d4:	07ff8f0f 	.word	0x07ff8f0f
 80056d8:	40009800 	.word	0x40009800
 80056dc:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056e0:	2326      	movs	r3, #38	; 0x26
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	881a      	ldrh	r2, [r3, #0]
 80056e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 f8fa 	bl	80058e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	4013      	ands	r3, r2
 80056fc:	d000      	beq.n	8005700 <PCD_EP_ISR_Handler+0x73c>
 80056fe:	e467      	b.n	8004fd0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b00e      	add	sp, #56	; 0x38
 8005708:	bdb0      	pop	{r4, r5, r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)

0800570c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	1dbb      	adds	r3, r7, #6
 8005718:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800571a:	1dbb      	adds	r3, r7, #6
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	01db      	lsls	r3, r3, #7
 8005722:	4013      	ands	r3, r2
 8005724:	d068      	beq.n	80057f8 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	251e      	movs	r5, #30
 8005732:	197c      	adds	r4, r7, r5
 8005734:	0019      	movs	r1, r3
 8005736:	0010      	movs	r0, r2
 8005738:	f7fe feca 	bl	80044d0 <PCD_GET_EP_DBUF0_CNT>
 800573c:	0003      	movs	r3, r0
 800573e:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	197b      	adds	r3, r7, r5
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d307      	bcc.n	800575c <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	197b      	adds	r3, r7, r5
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	619a      	str	r2, [r3, #24]
 800575a:	e002      	b.n	8005762 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11a      	bne.n	80057a0 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	001a      	movs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	18d3      	adds	r3, r2, r3
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a56      	ldr	r2, [pc, #344]	; (80058d4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	0192      	lsls	r2, r2, #6
 8005786:	4053      	eors	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	001a      	movs	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	18d3      	adds	r3, r2, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	494f      	ldr	r1, [pc, #316]	; (80058d8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057a0:	1dbb      	adds	r3, r7, #6
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	4013      	ands	r3, r2
 80057a8:	d015      	beq.n	80057d6 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	001a      	movs	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	18d3      	adds	r3, r2, r3
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a48      	ldr	r2, [pc, #288]	; (80058dc <HAL_PCD_EP_DB_Receive+0x1d0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	001a      	movs	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	18d3      	adds	r3, r2, r3
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4943      	ldr	r1, [pc, #268]	; (80058e0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80057d6:	241e      	movs	r4, #30
 80057d8:	193b      	adds	r3, r7, r4
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d100      	bne.n	80057e2 <HAL_PCD_EP_DB_Receive+0xd6>
 80057e0:	e071      	b.n	80058c6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	88da      	ldrh	r2, [r3, #6]
 80057ee:	193b      	adds	r3, r7, r4
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	f006 f8d1 	bl	800b998 <USB_ReadPMA>
 80057f6:	e066      	b.n	80058c6 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	251e      	movs	r5, #30
 8005804:	197c      	adds	r4, r7, r5
 8005806:	0019      	movs	r1, r3
 8005808:	0010      	movs	r0, r2
 800580a:	f7fe fe83 	bl	8004514 <PCD_GET_EP_DBUF1_CNT>
 800580e:	0003      	movs	r3, r0
 8005810:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	197b      	adds	r3, r7, r5
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d307      	bcc.n	800582e <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	197b      	adds	r3, r7, r5
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	619a      	str	r2, [r3, #24]
 800582c:	e002      	b.n	8005834 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11a      	bne.n	8005872 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	001a      	movs	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800584e:	4013      	ands	r3, r2
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	0192      	lsls	r2, r2, #6
 8005858:	4053      	eors	r3, r2
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	001a      	movs	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	18d3      	adds	r3, r2, r3
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	491a      	ldr	r1, [pc, #104]	; (80058d8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800586e:	430a      	orrs	r2, r1
 8005870:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005872:	1dbb      	adds	r3, r7, #6
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	2240      	movs	r2, #64	; 0x40
 8005878:	4013      	ands	r3, r2
 800587a:	d115      	bne.n	80058a8 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	001a      	movs	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a13      	ldr	r2, [pc, #76]	; (80058dc <HAL_PCD_EP_DB_Receive+0x1d0>)
 800588e:	4013      	ands	r3, r2
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	001a      	movs	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	18d3      	adds	r3, r2, r3
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	490f      	ldr	r1, [pc, #60]	; (80058e0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80058a8:	241e      	movs	r4, #30
 80058aa:	193b      	adds	r3, r7, r4
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	891a      	ldrh	r2, [r3, #8]
 80058be:	193b      	adds	r3, r7, r4
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f006 f869 	bl	800b998 <USB_ReadPMA>
    }
  }

  return count;
 80058c6:	231e      	movs	r3, #30
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	881b      	ldrh	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b00a      	add	sp, #40	; 0x28
 80058d2:	bdb0      	pop	{r4, r5, r7, pc}
 80058d4:	07ffbf8f 	.word	0x07ffbf8f
 80058d8:	00008080 	.word	0x00008080
 80058dc:	07ff8f8f 	.word	0x07ff8f8f
 80058e0:	000080c0 	.word	0x000080c0

080058e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	1dbb      	adds	r3, r7, #6
 80058f0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	4013      	ands	r3, r2
 80058fa:	d100      	bne.n	80058fe <HAL_PCD_EP_DB_Transmit+0x1a>
 80058fc:	e1fc      	b.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	2526      	movs	r5, #38	; 0x26
 800590a:	197c      	adds	r4, r7, r5
 800590c:	0019      	movs	r1, r3
 800590e:	0010      	movs	r0, r2
 8005910:	f7fe fdde 	bl	80044d0 <PCD_GET_EP_DBUF0_CNT>
 8005914:	0003      	movs	r3, r0
 8005916:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	197b      	adds	r3, r7, r5
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d907      	bls.n	8005934 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	197b      	adds	r3, r7, r5
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e002      	b.n	800593a <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d000      	beq.n	8005944 <HAL_PCD_EP_DB_Transmit+0x60>
 8005942:	e0d2      	b.n	8005aea <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d131      	bne.n	80059b0 <HAL_PCD_EP_DB_Transmit+0xcc>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4ae5      	ldr	r2, [pc, #916]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005954:	4694      	mov	ip, r2
 8005956:	4463      	add	r3, ip
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	49e1      	ldr	r1, [pc, #900]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005962:	468c      	mov	ip, r1
 8005964:	4463      	add	r3, ip
 8005966:	0412      	lsls	r2, r2, #16
 8005968:	0c12      	lsrs	r2, r2, #16
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4add      	ldr	r2, [pc, #884]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005974:	4694      	mov	ip, r2
 8005976:	4463      	add	r3, ip
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	49d9      	ldr	r1, [pc, #868]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005982:	468c      	mov	ip, r1
 8005984:	4463      	add	r3, ip
 8005986:	49d9      	ldr	r1, [pc, #868]	; (8005cec <HAL_PCD_EP_DB_Transmit+0x408>)
 8005988:	400a      	ands	r2, r1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4ad5      	ldr	r2, [pc, #852]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005994:	4694      	mov	ip, r2
 8005996:	4463      	add	r3, ip
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	49d1      	ldr	r1, [pc, #836]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80059a2:	468c      	mov	ip, r1
 80059a4:	4463      	add	r3, ip
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	0609      	lsls	r1, r1, #24
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e020      	b.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x10e>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d11c      	bne.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x10e>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4aca      	ldr	r2, [pc, #808]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80059c0:	4694      	mov	ip, r2
 80059c2:	4463      	add	r3, ip
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	49c6      	ldr	r1, [pc, #792]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80059ce:	468c      	mov	ip, r1
 80059d0:	4463      	add	r3, ip
 80059d2:	0412      	lsls	r2, r2, #16
 80059d4:	0c12      	lsrs	r2, r2, #16
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4ac2      	ldr	r2, [pc, #776]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80059e0:	189a      	adds	r2, r3, r2
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	49bf      	ldr	r1, [pc, #764]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80059ea:	468c      	mov	ip, r1
 80059ec:	4463      	add	r3, ip
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d131      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0x17a>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4ab9      	ldr	r2, [pc, #740]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a02:	4694      	mov	ip, r2
 8005a04:	4463      	add	r3, ip
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	49b6      	ldr	r1, [pc, #728]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a10:	468c      	mov	ip, r1
 8005a12:	4463      	add	r3, ip
 8005a14:	0412      	lsls	r2, r2, #16
 8005a16:	0c12      	lsrs	r2, r2, #16
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4ab1      	ldr	r2, [pc, #708]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a22:	4694      	mov	ip, r2
 8005a24:	4463      	add	r3, ip
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	49ae      	ldr	r1, [pc, #696]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a30:	468c      	mov	ip, r1
 8005a32:	4463      	add	r3, ip
 8005a34:	49ad      	ldr	r1, [pc, #692]	; (8005cec <HAL_PCD_EP_DB_Transmit+0x408>)
 8005a36:	400a      	ands	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4aa9      	ldr	r2, [pc, #676]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a42:	4694      	mov	ip, r2
 8005a44:	4463      	add	r3, ip
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	49a6      	ldr	r1, [pc, #664]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a50:	468c      	mov	ip, r1
 8005a52:	4463      	add	r3, ip
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	0609      	lsls	r1, r1, #24
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	e020      	b.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d11c      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4a9e      	ldr	r2, [pc, #632]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a6e:	4694      	mov	ip, r2
 8005a70:	4463      	add	r3, ip
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	499b      	ldr	r1, [pc, #620]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a7c:	468c      	mov	ip, r1
 8005a7e:	4463      	add	r3, ip
 8005a80:	0412      	lsls	r2, r2, #16
 8005a82:	0c12      	lsrs	r2, r2, #16
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4a96      	ldr	r2, [pc, #600]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a8e:	189a      	adds	r2, r3, r2
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4994      	ldr	r1, [pc, #592]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a98:	468c      	mov	ip, r1
 8005a9a:	4463      	add	r3, ip
 8005a9c:	6852      	ldr	r2, [r2, #4]
 8005a9e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f010 f9b3 	bl	8015e14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	01db      	lsls	r3, r3, #7
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d100      	bne.n	8005abc <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005aba:	e31a      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	18d3      	adds	r3, r2, r3
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a88      	ldr	r2, [pc, #544]	; (8005cf0 <HAL_PCD_EP_DB_Transmit+0x40c>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	18d3      	adds	r3, r2, r3
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae2:	4984      	ldr	r1, [pc, #528]	; (8005cf4 <HAL_PCD_EP_DB_Transmit+0x410>)
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e303      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aea:	1dbb      	adds	r3, r7, #6
 8005aec:	881a      	ldrh	r2, [r3, #0]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	4013      	ands	r3, r2
 8005af4:	d015      	beq.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	001a      	movs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	18d3      	adds	r3, r2, r3
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a7a      	ldr	r2, [pc, #488]	; (8005cf0 <HAL_PCD_EP_DB_Transmit+0x40c>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	001a      	movs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	18d3      	adds	r3, r2, r3
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	4975      	ldr	r1, [pc, #468]	; (8005cf4 <HAL_PCD_EP_DB_Transmit+0x410>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	5c9b      	ldrb	r3, [r3, r2]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d000      	beq.n	8005b2e <HAL_PCD_EP_DB_Transmit+0x24a>
 8005b2c:	e2e1      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	2126      	movs	r1, #38	; 0x26
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	18d2      	adds	r2, r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	69da      	ldr	r2, [r3, #28]
 8005b42:	187b      	adds	r3, r7, r1
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	18d2      	adds	r2, r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d309      	bcc.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	1ad2      	subs	r2, r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	621a      	str	r2, [r3, #32]
 8005b6a:	e016      	b.n	8005b9a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d108      	bne.n	8005b86 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 8005b74:	2326      	movs	r3, #38	; 0x26
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	2100      	movs	r1, #0
 8005b82:	5499      	strb	r1, [r3, r2]
 8005b84:	e009      	b.n	8005b9a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2224      	movs	r2, #36	; 0x24
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d172      	bne.n	8005c88 <HAL_PCD_EP_DB_Transmit+0x3a4>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4a4f      	ldr	r2, [pc, #316]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005baa:	4694      	mov	ip, r2
 8005bac:	4463      	add	r3, ip
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	494c      	ldr	r1, [pc, #304]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005bb8:	468c      	mov	ip, r1
 8005bba:	4463      	add	r3, ip
 8005bbc:	0412      	lsls	r2, r2, #16
 8005bbe:	0c12      	lsrs	r2, r2, #16
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc6:	d91e      	bls.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x322>
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	221f      	movs	r2, #31
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d102      	bne.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x2f8>
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4a41      	ldr	r2, [pc, #260]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005be4:	4694      	mov	ip, r2
 8005be6:	4463      	add	r3, ip
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	069b      	lsls	r3, r3, #26
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	493c      	ldr	r1, [pc, #240]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005bf8:	468c      	mov	ip, r1
 8005bfa:	4463      	add	r3, ip
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	0609      	lsls	r1, r1, #24
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e065      	b.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d121      	bne.n	8005c50 <HAL_PCD_EP_DB_Transmit+0x36c>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4a35      	ldr	r2, [pc, #212]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c14:	4694      	mov	ip, r2
 8005c16:	4463      	add	r3, ip
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4931      	ldr	r1, [pc, #196]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c22:	468c      	mov	ip, r1
 8005c24:	4463      	add	r3, ip
 8005c26:	4931      	ldr	r1, [pc, #196]	; (8005cec <HAL_PCD_EP_DB_Transmit+0x408>)
 8005c28:	400a      	ands	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c34:	4694      	mov	ip, r2
 8005c36:	4463      	add	r3, ip
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c42:	468c      	mov	ip, r1
 8005c44:	4463      	add	r3, ip
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	0609      	lsls	r1, r1, #24
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e040      	b.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d002      	beq.n	8005c64 <HAL_PCD_EP_DB_Transmit+0x380>
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	3301      	adds	r3, #1
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c6c:	4694      	mov	ip, r2
 8005c6e:	4463      	add	r3, ip
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	069a      	lsls	r2, r3, #26
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	481a      	ldr	r0, [pc, #104]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c7e:	4684      	mov	ip, r0
 8005c80:	4463      	add	r3, ip
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e024      	b.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d120      	bne.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005c98:	4694      	mov	ip, r2
 8005c9a:	4463      	add	r3, ip
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4910      	ldr	r1, [pc, #64]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005ca6:	468c      	mov	ip, r1
 8005ca8:	4463      	add	r3, ip
 8005caa:	0412      	lsls	r2, r2, #16
 8005cac:	0c12      	lsrs	r2, r2, #16
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005cb8:	4694      	mov	ip, r2
 8005cba:	4463      	add	r3, ip
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	041a      	lsls	r2, r3, #16
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4807      	ldr	r0, [pc, #28]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005cca:	4684      	mov	ip, r0
 8005ccc:	4463      	add	r3, ip
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6959      	ldr	r1, [r3, #20]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	88da      	ldrh	r2, [r3, #6]
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f005 fde3 	bl	800b8ac <USB_WritePMA>
 8005ce6:	e204      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
 8005ce8:	40009800 	.word	0x40009800
 8005cec:	83ffffff 	.word	0x83ffffff
 8005cf0:	07ff8f8f 	.word	0x07ff8f8f
 8005cf4:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2526      	movs	r5, #38	; 0x26
 8005d04:	197c      	adds	r4, r7, r5
 8005d06:	0019      	movs	r1, r3
 8005d08:	0010      	movs	r0, r2
 8005d0a:	f7fe fc03 	bl	8004514 <PCD_GET_EP_DBUF1_CNT>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	197b      	adds	r3, r7, r5
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d307      	bcc.n	8005d2e <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	197b      	adds	r3, r7, r5
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	619a      	str	r2, [r3, #24]
 8005d2c:	e002      	b.n	8005d34 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d000      	beq.n	8005d3e <HAL_PCD_EP_DB_Transmit+0x45a>
 8005d3c:	e0d2      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d131      	bne.n	8005daa <HAL_PCD_EP_DB_Transmit+0x4c6>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4acd      	ldr	r2, [pc, #820]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d4e:	4694      	mov	ip, r2
 8005d50:	4463      	add	r3, ip
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	49ca      	ldr	r1, [pc, #808]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d5c:	468c      	mov	ip, r1
 8005d5e:	4463      	add	r3, ip
 8005d60:	0412      	lsls	r2, r2, #16
 8005d62:	0c12      	lsrs	r2, r2, #16
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4ac5      	ldr	r2, [pc, #788]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d6e:	4694      	mov	ip, r2
 8005d70:	4463      	add	r3, ip
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	49c2      	ldr	r1, [pc, #776]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d7c:	468c      	mov	ip, r1
 8005d7e:	4463      	add	r3, ip
 8005d80:	49c1      	ldr	r1, [pc, #772]	; (8006088 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8005d82:	400a      	ands	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4abd      	ldr	r2, [pc, #756]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d8e:	4694      	mov	ip, r2
 8005d90:	4463      	add	r3, ip
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	49ba      	ldr	r1, [pc, #744]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d9c:	468c      	mov	ip, r1
 8005d9e:	4463      	add	r3, ip
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	0609      	lsls	r1, r1, #24
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e020      	b.n	8005dec <HAL_PCD_EP_DB_Transmit+0x508>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d11c      	bne.n	8005dec <HAL_PCD_EP_DB_Transmit+0x508>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4ab2      	ldr	r2, [pc, #712]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005dba:	4694      	mov	ip, r2
 8005dbc:	4463      	add	r3, ip
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	49af      	ldr	r1, [pc, #700]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005dc8:	468c      	mov	ip, r1
 8005dca:	4463      	add	r3, ip
 8005dcc:	0412      	lsls	r2, r2, #16
 8005dce:	0c12      	lsrs	r2, r2, #16
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4aaa      	ldr	r2, [pc, #680]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005dda:	189a      	adds	r2, r3, r2
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	49a8      	ldr	r1, [pc, #672]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005de4:	468c      	mov	ip, r1
 8005de6:	4463      	add	r3, ip
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d131      	bne.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x574>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4aa2      	ldr	r2, [pc, #648]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005dfc:	4694      	mov	ip, r2
 8005dfe:	4463      	add	r3, ip
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	499e      	ldr	r1, [pc, #632]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e0a:	468c      	mov	ip, r1
 8005e0c:	4463      	add	r3, ip
 8005e0e:	0412      	lsls	r2, r2, #16
 8005e10:	0c12      	lsrs	r2, r2, #16
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4a9a      	ldr	r2, [pc, #616]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e1c:	4694      	mov	ip, r2
 8005e1e:	4463      	add	r3, ip
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4996      	ldr	r1, [pc, #600]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e2a:	468c      	mov	ip, r1
 8005e2c:	4463      	add	r3, ip
 8005e2e:	4996      	ldr	r1, [pc, #600]	; (8006088 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8005e30:	400a      	ands	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4a92      	ldr	r2, [pc, #584]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e3c:	4694      	mov	ip, r2
 8005e3e:	4463      	add	r3, ip
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	498e      	ldr	r1, [pc, #568]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e4a:	468c      	mov	ip, r1
 8005e4c:	4463      	add	r3, ip
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	0609      	lsls	r1, r1, #24
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e020      	b.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d11c      	bne.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4a87      	ldr	r2, [pc, #540]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e68:	4694      	mov	ip, r2
 8005e6a:	4463      	add	r3, ip
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4983      	ldr	r1, [pc, #524]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e76:	468c      	mov	ip, r1
 8005e78:	4463      	add	r3, ip
 8005e7a:	0412      	lsls	r2, r2, #16
 8005e7c:	0c12      	lsrs	r2, r2, #16
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4a7f      	ldr	r2, [pc, #508]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e88:	189a      	adds	r2, r3, r2
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	497c      	ldr	r1, [pc, #496]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e92:	468c      	mov	ip, r1
 8005e94:	4463      	add	r3, ip
 8005e96:	6852      	ldr	r2, [r2, #4]
 8005e98:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	0011      	movs	r1, r2
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f00f ffb6 	bl	8015e14 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ea8:	1dbb      	adds	r3, r7, #6
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	01db      	lsls	r3, r3, #7
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d000      	beq.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x5d2>
 8005eb4:	e11d      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	001a      	movs	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a71      	ldr	r2, [pc, #452]	; (800608c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	18d3      	adds	r3, r2, r3
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	496c      	ldr	r1, [pc, #432]	; (8006090 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e106      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ee4:	1dbb      	adds	r3, r7, #6
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	01db      	lsls	r3, r3, #7
 8005eec:	4013      	ands	r3, r2
 8005eee:	d115      	bne.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a62      	ldr	r2, [pc, #392]	; (800608c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	495e      	ldr	r1, [pc, #376]	; (8006090 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	5c9b      	ldrb	r3, [r3, r2]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d000      	beq.n	8005f28 <HAL_PCD_EP_DB_Transmit+0x644>
 8005f26:	e0e4      	b.n	80060f2 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	2126      	movs	r1, #38	; 0x26
 8005f2e:	187b      	adds	r3, r7, r1
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	18d2      	adds	r2, r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	18d2      	adds	r2, r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d309      	bcc.n	8005f66 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	621a      	str	r2, [r3, #32]
 8005f64:	e016      	b.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 8005f6e:	2326      	movs	r3, #38	; 0x26
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2224      	movs	r2, #36	; 0x24
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]
 8005f7e:	e009      	b.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2224      	movs	r2, #36	; 0x24
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d000      	beq.n	8005f9e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005f9c:	e07a      	b.n	8006094 <HAL_PCD_EP_DB_Transmit+0x7b0>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4a37      	ldr	r2, [pc, #220]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005fa6:	4694      	mov	ip, r2
 8005fa8:	4463      	add	r3, ip
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4934      	ldr	r1, [pc, #208]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005fb4:	468c      	mov	ip, r1
 8005fb6:	4463      	add	r3, ip
 8005fb8:	0412      	lsls	r2, r2, #16
 8005fba:	0c12      	lsrs	r2, r2, #16
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc2:	d91e      	bls.n	8006002 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	221f      	movs	r2, #31
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d102      	bne.n	8005fd8 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4a29      	ldr	r2, [pc, #164]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005fe0:	4694      	mov	ip, r2
 8005fe2:	4463      	add	r3, ip
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	069b      	lsls	r3, r3, #26
 8005fea:	431a      	orrs	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4924      	ldr	r1, [pc, #144]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005ff4:	468c      	mov	ip, r1
 8005ff6:	4463      	add	r3, ip
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	0609      	lsls	r1, r1, #24
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	e06d      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x7fa>
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d121      	bne.n	800604c <HAL_PCD_EP_DB_Transmit+0x768>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8006010:	4694      	mov	ip, r2
 8006012:	4463      	add	r3, ip
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4919      	ldr	r1, [pc, #100]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800601e:	468c      	mov	ip, r1
 8006020:	4463      	add	r3, ip
 8006022:	4919      	ldr	r1, [pc, #100]	; (8006088 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8006024:	400a      	ands	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8006030:	4694      	mov	ip, r2
 8006032:	4463      	add	r3, ip
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4911      	ldr	r1, [pc, #68]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800603e:	468c      	mov	ip, r1
 8006040:	4463      	add	r3, ip
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	0609      	lsls	r1, r1, #24
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	e048      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x7fa>
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2201      	movs	r2, #1
 8006056:	4013      	ands	r3, r2
 8006058:	d002      	beq.n	8006060 <HAL_PCD_EP_DB_Transmit+0x77c>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3301      	adds	r3, #1
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8006068:	4694      	mov	ip, r2
 800606a:	4463      	add	r3, ip
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	069a      	lsls	r2, r3, #26
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4802      	ldr	r0, [pc, #8]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800607a:	4684      	mov	ip, r0
 800607c:	4463      	add	r3, ip
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	e02c      	b.n	80060de <HAL_PCD_EP_DB_Transmit+0x7fa>
 8006084:	40009800 	.word	0x40009800
 8006088:	83ffffff 	.word	0x83ffffff
 800608c:	07ff8f8f 	.word	0x07ff8f8f
 8006090:	0000c080 	.word	0x0000c080
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d120      	bne.n	80060de <HAL_PCD_EP_DB_Transmit+0x7fa>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_PCD_EP_DB_Transmit+0x854>)
 80060a4:	4694      	mov	ip, r2
 80060a6:	4463      	add	r3, ip
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4921      	ldr	r1, [pc, #132]	; (8006138 <HAL_PCD_EP_DB_Transmit+0x854>)
 80060b2:	468c      	mov	ip, r1
 80060b4:	4463      	add	r3, ip
 80060b6:	0412      	lsls	r2, r2, #16
 80060b8:	0c12      	lsrs	r2, r2, #16
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_PCD_EP_DB_Transmit+0x854>)
 80060c4:	4694      	mov	ip, r2
 80060c6:	4463      	add	r3, ip
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	041a      	lsls	r2, r3, #16
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4818      	ldr	r0, [pc, #96]	; (8006138 <HAL_PCD_EP_DB_Transmit+0x854>)
 80060d6:	4684      	mov	ip, r0
 80060d8:	4463      	add	r3, ip
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6959      	ldr	r1, [r3, #20]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	891a      	ldrh	r2, [r3, #8]
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f005 fbdd 	bl	800b8ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	001a      	movs	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a0e      	ldr	r2, [pc, #56]	; (800613c <HAL_PCD_EP_DB_Transmit+0x858>)
 8006104:	4013      	ands	r3, r2
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	2210      	movs	r2, #16
 800610c:	4053      	eors	r3, r2
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	2220      	movs	r2, #32
 8006114:	4053      	eors	r3, r2
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	001a      	movs	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	18d3      	adds	r3, r2, r3
 8006126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006128:	4905      	ldr	r1, [pc, #20]	; (8006140 <HAL_PCD_EP_DB_Transmit+0x85c>)
 800612a:	430a      	orrs	r2, r1
 800612c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b00e      	add	sp, #56	; 0x38
 8006136:	bdb0      	pop	{r4, r5, r7, pc}
 8006138:	40009800 	.word	0x40009800
 800613c:	07ff8fbf 	.word	0x07ff8fbf
 8006140:	00008080 	.word	0x00008080

08006144 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	0008      	movs	r0, r1
 800614e:	0011      	movs	r1, r2
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	240a      	movs	r4, #10
 8006154:	193b      	adds	r3, r7, r4
 8006156:	1c02      	adds	r2, r0, #0
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	2308      	movs	r3, #8
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	1c0a      	adds	r2, r1, #0
 8006160:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006162:	0021      	movs	r1, r4
 8006164:	187b      	adds	r3, r7, r1
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	4013      	ands	r3, r2
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006172:	187b      	adds	r3, r7, r1
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	2207      	movs	r2, #7
 8006178:	401a      	ands	r2, r3
 800617a:	0013      	movs	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	189b      	adds	r3, r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	3338      	adds	r3, #56	; 0x38
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	18d3      	adds	r3, r2, r3
 8006188:	3304      	adds	r3, #4
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e00c      	b.n	80061a8 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800618e:	230a      	movs	r3, #10
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	0013      	movs	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	189b      	adds	r3, r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	3379      	adds	r3, #121	; 0x79
 800619e:	33ff      	adds	r3, #255	; 0xff
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	18d3      	adds	r3, r2, r3
 80061a4:	3304      	adds	r3, #4
 80061a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061a8:	2308      	movs	r3, #8
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	809a      	strh	r2, [r3, #4]
 80061c0:	e00b      	b.n	80061da <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2201      	movs	r2, #1
 80061c6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0c1b      	lsrs	r3, r3, #16
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	0018      	movs	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	b007      	add	sp, #28
 80061e2:	bd90      	pop	{r4, r7, pc}

080061e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	23bf      	movs	r3, #191	; 0xbf
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	2101      	movs	r1, #1
 80061fa:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	23bd      	movs	r3, #189	; 0xbd
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	2100      	movs	r1, #0
 8006204:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	2201      	movs	r2, #1
 800620c:	431a      	orrs	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	2202      	movs	r2, #2
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b004      	add	sp, #16
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	000a      	movs	r2, r1
 8006232:	1cfb      	adds	r3, r7, #3
 8006234:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b002      	add	sp, #8
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <HAL_PWREx_EnableVddUSB+0x18>)
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <HAL_PWREx_EnableVddUSB+0x18>)
 800624a:	2180      	movs	r1, #128	; 0x80
 800624c:	00c9      	lsls	r1, r1, #3
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
}
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40007000 	.word	0x40007000

0800625c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006264:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a19      	ldr	r2, [pc, #100]	; (80062d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800626a:	4013      	ands	r3, r2
 800626c:	0019      	movs	r1, r3
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	429a      	cmp	r2, r3
 800627e:	d11f      	bne.n	80062c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	0013      	movs	r3, r2
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	189b      	adds	r3, r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4912      	ldr	r1, [pc, #72]	; (80062d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800628e:	0018      	movs	r0, r3
 8006290:	f7fb fee2 	bl	8002058 <__udivsi3>
 8006294:	0003      	movs	r3, r0
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800629a:	e008      	b.n	80062ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e001      	b.n	80062ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e009      	b.n	80062c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	401a      	ands	r2, r3
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	429a      	cmp	r2, r3
 80062be:	d0ed      	beq.n	800629c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b004      	add	sp, #16
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	40007000 	.word	0x40007000
 80062d0:	fffff9ff 	.word	0xfffff9ff
 80062d4:	20000004 	.word	0x20000004
 80062d8:	000f4240 	.word	0x000f4240

080062dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80062e0:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	23e0      	movs	r3, #224	; 0xe0
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	4013      	ands	r3, r2
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000

080062f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f000 fb50 	bl	80069a8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	4013      	ands	r3, r2
 8006310:	d100      	bne.n	8006314 <HAL_RCC_OscConfig+0x20>
 8006312:	e07c      	b.n	800640e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006314:	4bc3      	ldr	r3, [pc, #780]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2238      	movs	r2, #56	; 0x38
 800631a:	4013      	ands	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631e:	4bc1      	ldr	r3, [pc, #772]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2203      	movs	r2, #3
 8006324:	4013      	ands	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2b10      	cmp	r3, #16
 800632c:	d102      	bne.n	8006334 <HAL_RCC_OscConfig+0x40>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d002      	beq.n	800633a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d10b      	bne.n	8006352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633a:	4bba      	ldr	r3, [pc, #744]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	4013      	ands	r3, r2
 8006344:	d062      	beq.n	800640c <HAL_RCC_OscConfig+0x118>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d15e      	bne.n	800640c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e32a      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	025b      	lsls	r3, r3, #9
 800635a:	429a      	cmp	r2, r3
 800635c:	d107      	bne.n	800636e <HAL_RCC_OscConfig+0x7a>
 800635e:	4bb1      	ldr	r3, [pc, #708]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4bb0      	ldr	r3, [pc, #704]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	0249      	lsls	r1, r1, #9
 8006368:	430a      	orrs	r2, r1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e020      	b.n	80063b0 <HAL_RCC_OscConfig+0xbc>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	23a0      	movs	r3, #160	; 0xa0
 8006374:	02db      	lsls	r3, r3, #11
 8006376:	429a      	cmp	r2, r3
 8006378:	d10e      	bne.n	8006398 <HAL_RCC_OscConfig+0xa4>
 800637a:	4baa      	ldr	r3, [pc, #680]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4ba9      	ldr	r3, [pc, #676]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006380:	2180      	movs	r1, #128	; 0x80
 8006382:	02c9      	lsls	r1, r1, #11
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	4ba6      	ldr	r3, [pc, #664]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4ba5      	ldr	r3, [pc, #660]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800638e:	2180      	movs	r1, #128	; 0x80
 8006390:	0249      	lsls	r1, r1, #9
 8006392:	430a      	orrs	r2, r1
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e00b      	b.n	80063b0 <HAL_RCC_OscConfig+0xbc>
 8006398:	4ba2      	ldr	r3, [pc, #648]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	4ba1      	ldr	r3, [pc, #644]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800639e:	49a2      	ldr	r1, [pc, #648]	; (8006628 <HAL_RCC_OscConfig+0x334>)
 80063a0:	400a      	ands	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	4b9f      	ldr	r3, [pc, #636]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b9e      	ldr	r3, [pc, #632]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80063aa:	49a0      	ldr	r1, [pc, #640]	; (800662c <HAL_RCC_OscConfig+0x338>)
 80063ac:	400a      	ands	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d014      	beq.n	80063e2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd f97c 	bl	80036b4 <HAL_GetTick>
 80063bc:	0003      	movs	r3, r0
 80063be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c2:	f7fd f977 	bl	80036b4 <HAL_GetTick>
 80063c6:	0002      	movs	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b64      	cmp	r3, #100	; 0x64
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e2e9      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d4:	4b93      	ldr	r3, [pc, #588]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	029b      	lsls	r3, r3, #10
 80063dc:	4013      	ands	r3, r2
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0xce>
 80063e0:	e015      	b.n	800640e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e2:	f7fd f967 	bl	80036b4 <HAL_GetTick>
 80063e6:	0003      	movs	r3, r0
 80063e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063ec:	f7fd f962 	bl	80036b4 <HAL_GetTick>
 80063f0:	0002      	movs	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b64      	cmp	r3, #100	; 0x64
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e2d4      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063fe:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	4013      	ands	r3, r2
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0xf8>
 800640a:	e000      	b.n	800640e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2202      	movs	r2, #2
 8006414:	4013      	ands	r3, r2
 8006416:	d100      	bne.n	800641a <HAL_RCC_OscConfig+0x126>
 8006418:	e099      	b.n	800654e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800641a:	4b82      	ldr	r3, [pc, #520]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	2238      	movs	r2, #56	; 0x38
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006424:	4b7f      	ldr	r3, [pc, #508]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2203      	movs	r2, #3
 800642a:	4013      	ands	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b10      	cmp	r3, #16
 8006432:	d102      	bne.n	800643a <HAL_RCC_OscConfig+0x146>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d002      	beq.n	8006440 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d135      	bne.n	80064ac <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006440:	4b78      	ldr	r3, [pc, #480]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4013      	ands	r3, r2
 800644a:	d005      	beq.n	8006458 <HAL_RCC_OscConfig+0x164>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e2a7      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006458:	4b72      	ldr	r3, [pc, #456]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a74      	ldr	r2, [pc, #464]	; (8006630 <HAL_RCC_OscConfig+0x33c>)
 800645e:	4013      	ands	r3, r2
 8006460:	0019      	movs	r1, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	021a      	lsls	r2, r3, #8
 8006468:	4b6e      	ldr	r3, [pc, #440]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006474:	4b6b      	ldr	r3, [pc, #428]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a6e      	ldr	r2, [pc, #440]	; (8006634 <HAL_RCC_OscConfig+0x340>)
 800647a:	4013      	ands	r3, r2
 800647c:	0019      	movs	r1, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	0adb      	lsrs	r3, r3, #11
 800648e:	2207      	movs	r2, #7
 8006490:	4013      	ands	r3, r2
 8006492:	4a69      	ldr	r2, [pc, #420]	; (8006638 <HAL_RCC_OscConfig+0x344>)
 8006494:	40da      	lsrs	r2, r3
 8006496:	4b69      	ldr	r3, [pc, #420]	; (800663c <HAL_RCC_OscConfig+0x348>)
 8006498:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800649a:	4b69      	ldr	r3, [pc, #420]	; (8006640 <HAL_RCC_OscConfig+0x34c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	0018      	movs	r0, r3
 80064a0:	f7fc faa0 	bl	80029e4 <HAL_InitTick>
 80064a4:	1e03      	subs	r3, r0, #0
 80064a6:	d051      	beq.n	800654c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e27d      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d030      	beq.n	8006516 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80064b4:	4b5b      	ldr	r3, [pc, #364]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5e      	ldr	r2, [pc, #376]	; (8006634 <HAL_RCC_OscConfig+0x340>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	0019      	movs	r1, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	4b58      	ldr	r3, [pc, #352]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80064c8:	4b56      	ldr	r3, [pc, #344]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b55      	ldr	r3, [pc, #340]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	0049      	lsls	r1, r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fd f8ed 	bl	80036b4 <HAL_GetTick>
 80064da:	0003      	movs	r3, r0
 80064dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e0:	f7fd f8e8 	bl	80036b4 <HAL_GetTick>
 80064e4:	0002      	movs	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e25a      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f2:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4013      	ands	r3, r2
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fe:	4b49      	ldr	r3, [pc, #292]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4a4b      	ldr	r2, [pc, #300]	; (8006630 <HAL_RCC_OscConfig+0x33c>)
 8006504:	4013      	ands	r3, r2
 8006506:	0019      	movs	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	021a      	lsls	r2, r3, #8
 800650e:	4b45      	ldr	r3, [pc, #276]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	e01b      	b.n	800654e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006516:	4b43      	ldr	r3, [pc, #268]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b42      	ldr	r3, [pc, #264]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800651c:	4949      	ldr	r1, [pc, #292]	; (8006644 <HAL_RCC_OscConfig+0x350>)
 800651e:	400a      	ands	r2, r1
 8006520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006522:	f7fd f8c7 	bl	80036b4 <HAL_GetTick>
 8006526:	0003      	movs	r3, r0
 8006528:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800652c:	f7fd f8c2 	bl	80036b4 <HAL_GetTick>
 8006530:	0002      	movs	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e234      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800653e:	4b39      	ldr	r3, [pc, #228]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2380      	movs	r3, #128	; 0x80
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4013      	ands	r3, r2
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x238>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800654c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2208      	movs	r2, #8
 8006554:	4013      	ands	r3, r2
 8006556:	d047      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006558:	4b32      	ldr	r3, [pc, #200]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2238      	movs	r2, #56	; 0x38
 800655e:	4013      	ands	r3, r2
 8006560:	2b18      	cmp	r3, #24
 8006562:	d10a      	bne.n	800657a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006564:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006568:	2202      	movs	r2, #2
 800656a:	4013      	ands	r3, r2
 800656c:	d03c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2f4>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d138      	bne.n	80065e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e216      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d019      	beq.n	80065b6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006582:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006586:	4b27      	ldr	r3, [pc, #156]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 8006588:	2101      	movs	r1, #1
 800658a:	430a      	orrs	r2, r1
 800658c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fd f891 	bl	80036b4 <HAL_GetTick>
 8006592:	0003      	movs	r3, r0
 8006594:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006598:	f7fd f88c 	bl	80036b4 <HAL_GetTick>
 800659c:	0002      	movs	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1fe      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065aa:	4b1e      	ldr	r3, [pc, #120]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80065ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ae:	2202      	movs	r2, #2
 80065b0:	4013      	ands	r3, r2
 80065b2:	d0f1      	beq.n	8006598 <HAL_RCC_OscConfig+0x2a4>
 80065b4:	e018      	b.n	80065e8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80065b6:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80065b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065ba:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80065bc:	2101      	movs	r1, #1
 80065be:	438a      	bics	r2, r1
 80065c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7fd f877 	bl	80036b4 <HAL_GetTick>
 80065c6:	0003      	movs	r3, r0
 80065c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065cc:	f7fd f872 	bl	80036b4 <HAL_GetTick>
 80065d0:	0002      	movs	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e1e4      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	2202      	movs	r2, #2
 80065e4:	4013      	ands	r3, r2
 80065e6:	d1f1      	bne.n	80065cc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2204      	movs	r2, #4
 80065ee:	4013      	ands	r3, r2
 80065f0:	d100      	bne.n	80065f4 <HAL_RCC_OscConfig+0x300>
 80065f2:	e0c7      	b.n	8006784 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065f4:	231f      	movs	r3, #31
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2238      	movs	r2, #56	; 0x38
 8006602:	4013      	ands	r3, r2
 8006604:	2b20      	cmp	r3, #32
 8006606:	d11f      	bne.n	8006648 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCC_OscConfig+0x330>)
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	2202      	movs	r2, #2
 800660e:	4013      	ands	r3, r2
 8006610:	d100      	bne.n	8006614 <HAL_RCC_OscConfig+0x320>
 8006612:	e0b7      	b.n	8006784 <HAL_RCC_OscConfig+0x490>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d000      	beq.n	800661e <HAL_RCC_OscConfig+0x32a>
 800661c:	e0b2      	b.n	8006784 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e1c2      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	40021000 	.word	0x40021000
 8006628:	fffeffff 	.word	0xfffeffff
 800662c:	fffbffff 	.word	0xfffbffff
 8006630:	ffff80ff 	.word	0xffff80ff
 8006634:	ffffc7ff 	.word	0xffffc7ff
 8006638:	00f42400 	.word	0x00f42400
 800663c:	20000004 	.word	0x20000004
 8006640:	20000008 	.word	0x20000008
 8006644:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006648:	4bb5      	ldr	r3, [pc, #724]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800664a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	055b      	lsls	r3, r3, #21
 8006650:	4013      	ands	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_RCC_OscConfig+0x364>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x366>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d011      	beq.n	8006682 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800665e:	4bb0      	ldr	r3, [pc, #704]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006662:	4baf      	ldr	r3, [pc, #700]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	0549      	lsls	r1, r1, #21
 8006668:	430a      	orrs	r2, r1
 800666a:	63da      	str	r2, [r3, #60]	; 0x3c
 800666c:	4bac      	ldr	r3, [pc, #688]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800666e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	055b      	lsls	r3, r3, #21
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800667a:	231f      	movs	r3, #31
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006682:	4ba8      	ldr	r3, [pc, #672]	; (8006924 <HAL_RCC_OscConfig+0x630>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4013      	ands	r3, r2
 800668c:	d11a      	bne.n	80066c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800668e:	4ba5      	ldr	r3, [pc, #660]	; (8006924 <HAL_RCC_OscConfig+0x630>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4ba4      	ldr	r3, [pc, #656]	; (8006924 <HAL_RCC_OscConfig+0x630>)
 8006694:	2180      	movs	r1, #128	; 0x80
 8006696:	0049      	lsls	r1, r1, #1
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800669c:	f7fd f80a 	bl	80036b4 <HAL_GetTick>
 80066a0:	0003      	movs	r3, r0
 80066a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a6:	f7fd f805 	bl	80036b4 <HAL_GetTick>
 80066aa:	0002      	movs	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e177      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066b8:	4b9a      	ldr	r3, [pc, #616]	; (8006924 <HAL_RCC_OscConfig+0x630>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d106      	bne.n	80066da <HAL_RCC_OscConfig+0x3e6>
 80066cc:	4b94      	ldr	r3, [pc, #592]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066d0:	4b93      	ldr	r3, [pc, #588]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066d2:	2101      	movs	r1, #1
 80066d4:	430a      	orrs	r2, r1
 80066d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80066d8:	e01c      	b.n	8006714 <HAL_RCC_OscConfig+0x420>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d10c      	bne.n	80066fc <HAL_RCC_OscConfig+0x408>
 80066e2:	4b8f      	ldr	r3, [pc, #572]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066e6:	4b8e      	ldr	r3, [pc, #568]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066e8:	2104      	movs	r1, #4
 80066ea:	430a      	orrs	r2, r1
 80066ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80066ee:	4b8c      	ldr	r3, [pc, #560]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066f2:	4b8b      	ldr	r3, [pc, #556]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066f4:	2101      	movs	r1, #1
 80066f6:	430a      	orrs	r2, r1
 80066f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80066fa:	e00b      	b.n	8006714 <HAL_RCC_OscConfig+0x420>
 80066fc:	4b88      	ldr	r3, [pc, #544]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80066fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006700:	4b87      	ldr	r3, [pc, #540]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006702:	2101      	movs	r1, #1
 8006704:	438a      	bics	r2, r1
 8006706:	65da      	str	r2, [r3, #92]	; 0x5c
 8006708:	4b85      	ldr	r3, [pc, #532]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800670a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800670c:	4b84      	ldr	r3, [pc, #528]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800670e:	2104      	movs	r1, #4
 8006710:	438a      	bics	r2, r1
 8006712:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d014      	beq.n	8006746 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc ffca 	bl	80036b4 <HAL_GetTick>
 8006720:	0003      	movs	r3, r0
 8006722:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006724:	e009      	b.n	800673a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fc ffc5 	bl	80036b4 <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	4a7d      	ldr	r2, [pc, #500]	; (8006928 <HAL_RCC_OscConfig+0x634>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e136      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673a:	4b79      	ldr	r3, [pc, #484]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800673c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673e:	2202      	movs	r2, #2
 8006740:	4013      	ands	r3, r2
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x432>
 8006744:	e013      	b.n	800676e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7fc ffb5 	bl	80036b4 <HAL_GetTick>
 800674a:	0003      	movs	r3, r0
 800674c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800674e:	e009      	b.n	8006764 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006750:	f7fc ffb0 	bl	80036b4 <HAL_GetTick>
 8006754:	0002      	movs	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	4a73      	ldr	r2, [pc, #460]	; (8006928 <HAL_RCC_OscConfig+0x634>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e121      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006764:	4b6e      	ldr	r3, [pc, #440]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	2202      	movs	r2, #2
 800676a:	4013      	ands	r3, r2
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800676e:	231f      	movs	r3, #31
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d105      	bne.n	8006784 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006778:	4b69      	ldr	r3, [pc, #420]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800677a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677c:	4b68      	ldr	r3, [pc, #416]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800677e:	496b      	ldr	r1, [pc, #428]	; (800692c <HAL_RCC_OscConfig+0x638>)
 8006780:	400a      	ands	r2, r1
 8006782:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2220      	movs	r2, #32
 800678a:	4013      	ands	r3, r2
 800678c:	d039      	beq.n	8006802 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01b      	beq.n	80067ce <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006796:	4b62      	ldr	r3, [pc, #392]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b61      	ldr	r3, [pc, #388]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800679c:	2180      	movs	r1, #128	; 0x80
 800679e:	03c9      	lsls	r1, r1, #15
 80067a0:	430a      	orrs	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fc ff86 	bl	80036b4 <HAL_GetTick>
 80067a8:	0003      	movs	r3, r0
 80067aa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ae:	f7fc ff81 	bl	80036b4 <HAL_GetTick>
 80067b2:	0002      	movs	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0f3      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80067c0:	4b57      	ldr	r3, [pc, #348]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	4013      	ands	r3, r2
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x4ba>
 80067cc:	e019      	b.n	8006802 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067ce:	4b54      	ldr	r3, [pc, #336]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b53      	ldr	r3, [pc, #332]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80067d4:	4956      	ldr	r1, [pc, #344]	; (8006930 <HAL_RCC_OscConfig+0x63c>)
 80067d6:	400a      	ands	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067da:	f7fc ff6b 	bl	80036b4 <HAL_GetTick>
 80067de:	0003      	movs	r3, r0
 80067e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e4:	f7fc ff66 	bl	80036b4 <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e0d8      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	4013      	ands	r3, r2
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d100      	bne.n	800680c <HAL_RCC_OscConfig+0x518>
 800680a:	e0cc      	b.n	80069a6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800680c:	4b44      	ldr	r3, [pc, #272]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2238      	movs	r2, #56	; 0x38
 8006812:	4013      	ands	r3, r2
 8006814:	2b10      	cmp	r3, #16
 8006816:	d100      	bne.n	800681a <HAL_RCC_OscConfig+0x526>
 8006818:	e07b      	b.n	8006912 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d156      	bne.n	80068d0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006822:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006828:	4942      	ldr	r1, [pc, #264]	; (8006934 <HAL_RCC_OscConfig+0x640>)
 800682a:	400a      	ands	r2, r1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fc ff41 	bl	80036b4 <HAL_GetTick>
 8006832:	0003      	movs	r3, r0
 8006834:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006838:	f7fc ff3c 	bl	80036b4 <HAL_GetTick>
 800683c:	0002      	movs	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e0ae      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684a:	4b35      	ldr	r3, [pc, #212]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	049b      	lsls	r3, r3, #18
 8006852:	4013      	ands	r3, r2
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006856:	4b32      	ldr	r3, [pc, #200]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4a37      	ldr	r2, [pc, #220]	; (8006938 <HAL_RCC_OscConfig+0x644>)
 800685c:	4013      	ands	r3, r2
 800685e:	0019      	movs	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	431a      	orrs	r2, r3
 8006884:	4b26      	ldr	r3, [pc, #152]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006886:	430a      	orrs	r2, r1
 8006888:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800688a:	4b25      	ldr	r3, [pc, #148]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	0449      	lsls	r1, r1, #17
 8006894:	430a      	orrs	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006898:	4b21      	ldr	r3, [pc, #132]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	0549      	lsls	r1, r1, #21
 80068a2:	430a      	orrs	r2, r1
 80068a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a6:	f7fc ff05 	bl	80036b4 <HAL_GetTick>
 80068aa:	0003      	movs	r3, r0
 80068ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fc ff00 	bl	80036b4 <HAL_GetTick>
 80068b4:	0002      	movs	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e072      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	2380      	movs	r3, #128	; 0x80
 80068c8:	049b      	lsls	r3, r3, #18
 80068ca:	4013      	ands	r3, r2
 80068cc:	d0f0      	beq.n	80068b0 <HAL_RCC_OscConfig+0x5bc>
 80068ce:	e06a      	b.n	80069a6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b13      	ldr	r3, [pc, #76]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b12      	ldr	r3, [pc, #72]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80068d6:	4917      	ldr	r1, [pc, #92]	; (8006934 <HAL_RCC_OscConfig+0x640>)
 80068d8:	400a      	ands	r2, r1
 80068da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fc feea 	bl	80036b4 <HAL_GetTick>
 80068e0:	0003      	movs	r3, r0
 80068e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e6:	f7fc fee5 	bl	80036b4 <HAL_GetTick>
 80068ea:	0002      	movs	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e057      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	049b      	lsls	r3, r3, #18
 8006900:	4013      	ands	r3, r2
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_RCC_OscConfig+0x62c>)
 800690a:	490c      	ldr	r1, [pc, #48]	; (800693c <HAL_RCC_OscConfig+0x648>)
 800690c:	400a      	ands	r2, r1
 800690e:	60da      	str	r2, [r3, #12]
 8006910:	e049      	b.n	80069a6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d112      	bne.n	8006940 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e044      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
 8006928:	00001388 	.word	0x00001388
 800692c:	efffffff 	.word	0xefffffff
 8006930:	ffbfffff 	.word	0xffbfffff
 8006934:	feffffff 	.word	0xfeffffff
 8006938:	11c1808c 	.word	0x11c1808c
 800693c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <HAL_RCC_OscConfig+0x6bc>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2203      	movs	r2, #3
 800694a:	401a      	ands	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	429a      	cmp	r2, r3
 8006952:	d126      	bne.n	80069a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2270      	movs	r2, #112	; 0x70
 8006958:	401a      	ands	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d11f      	bne.n	80069a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	23fe      	movs	r3, #254	; 0xfe
 8006966:	01db      	lsls	r3, r3, #7
 8006968:	401a      	ands	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d116      	bne.n	80069a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	23f8      	movs	r3, #248	; 0xf8
 8006978:	039b      	lsls	r3, r3, #14
 800697a:	401a      	ands	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d10e      	bne.n	80069a2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	23e0      	movs	r3, #224	; 0xe0
 8006988:	051b      	lsls	r3, r3, #20
 800698a:	401a      	ands	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d106      	bne.n	80069a2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	0f5b      	lsrs	r3, r3, #29
 8006998:	075a      	lsls	r2, r3, #29
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800699e:	429a      	cmp	r2, r3
 80069a0:	d001      	beq.n	80069a6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b008      	add	sp, #32
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40021000 	.word	0x40021000

080069b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0e9      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069c8:	4b76      	ldr	r3, [pc, #472]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2207      	movs	r2, #7
 80069ce:	4013      	ands	r3, r2
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d91e      	bls.n	8006a14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b73      	ldr	r3, [pc, #460]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2207      	movs	r2, #7
 80069dc:	4393      	bics	r3, r2
 80069de:	0019      	movs	r1, r3
 80069e0:	4b70      	ldr	r3, [pc, #448]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069e8:	f7fc fe64 	bl	80036b4 <HAL_GetTick>
 80069ec:	0003      	movs	r3, r0
 80069ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069f0:	e009      	b.n	8006a06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f2:	f7fc fe5f 	bl	80036b4 <HAL_GetTick>
 80069f6:	0002      	movs	r2, r0
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	4a6a      	ldr	r2, [pc, #424]	; (8006ba8 <HAL_RCC_ClockConfig+0x1f4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e0ca      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a06:	4b67      	ldr	r3, [pc, #412]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2207      	movs	r2, #7
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d1ee      	bne.n	80069f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d015      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2204      	movs	r2, #4
 8006a24:	4013      	ands	r3, r2
 8006a26:	d006      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	4b5f      	ldr	r3, [pc, #380]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a2e:	21e0      	movs	r1, #224	; 0xe0
 8006a30:	01c9      	lsls	r1, r1, #7
 8006a32:	430a      	orrs	r2, r1
 8006a34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a36:	4b5d      	ldr	r3, [pc, #372]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	4a5d      	ldr	r2, [pc, #372]	; (8006bb0 <HAL_RCC_ClockConfig+0x1fc>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	0019      	movs	r1, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	4b59      	ldr	r3, [pc, #356]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4013      	ands	r3, r2
 8006a52:	d057      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a5c:	4b53      	ldr	r3, [pc, #332]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	4013      	ands	r3, r2
 8006a66:	d12b      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e097      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a74:	4b4d      	ldr	r3, [pc, #308]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	049b      	lsls	r3, r3, #18
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d11f      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e08b      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d107      	bne.n	8006a9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8c:	4b47      	ldr	r3, [pc, #284]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4013      	ands	r3, r2
 8006a96:	d113      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e07f      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aa4:	4b41      	ldr	r3, [pc, #260]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e074      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab2:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	4013      	ands	r3, r2
 8006aba:	d101      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e06d      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ac0:	4b3a      	ldr	r3, [pc, #232]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	4393      	bics	r3, r2
 8006ac8:	0019      	movs	r1, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	4b37      	ldr	r3, [pc, #220]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad4:	f7fc fdee 	bl	80036b4 <HAL_GetTick>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006adc:	e009      	b.n	8006af2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ade:	f7fc fde9 	bl	80036b4 <HAL_GetTick>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	4a2f      	ldr	r2, [pc, #188]	; (8006ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e054      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2238      	movs	r2, #56	; 0x38
 8006af8:	401a      	ands	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d1ec      	bne.n	8006ade <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2207      	movs	r2, #7
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d21e      	bcs.n	8006b50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2207      	movs	r2, #7
 8006b18:	4393      	bics	r3, r2
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b24:	f7fc fdc6 	bl	80036b4 <HAL_GetTick>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b2c:	e009      	b.n	8006b42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2e:	f7fc fdc1 	bl	80036b4 <HAL_GetTick>
 8006b32:	0002      	movs	r2, r0
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e02c      	b.n	8006b9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2207      	movs	r2, #7
 8006b48:	4013      	ands	r3, r2
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d1ee      	bne.n	8006b2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2204      	movs	r2, #4
 8006b56:	4013      	ands	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <HAL_RCC_ClockConfig+0x200>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	0019      	movs	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006b6e:	f000 f829 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8006b72:	0001      	movs	r1, r0
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HAL_RCC_ClockConfig+0x1f8>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	401a      	ands	r2, r3
 8006b7e:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <HAL_RCC_ClockConfig+0x204>)
 8006b80:	0092      	lsls	r2, r2, #2
 8006b82:	58d3      	ldr	r3, [r2, r3]
 8006b84:	221f      	movs	r2, #31
 8006b86:	4013      	ands	r3, r2
 8006b88:	000a      	movs	r2, r1
 8006b8a:	40da      	lsrs	r2, r3
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_RCC_ClockConfig+0x208>)
 8006b8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_RCC_ClockConfig+0x20c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7fb ff25 	bl	80029e4 <HAL_InitTick>
 8006b9a:	0003      	movs	r3, r0
}
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b004      	add	sp, #16
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40022000 	.word	0x40022000
 8006ba8:	00001388 	.word	0x00001388
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	fffff0ff 	.word	0xfffff0ff
 8006bb4:	ffff8fff 	.word	0xffff8fff
 8006bb8:	08018abc 	.word	0x08018abc
 8006bbc:	20000004 	.word	0x20000004
 8006bc0:	20000008 	.word	0x20000008

08006bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bca:	4b3c      	ldr	r3, [pc, #240]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2238      	movs	r2, #56	; 0x38
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006bd4:	4b39      	ldr	r3, [pc, #228]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	0adb      	lsrs	r3, r3, #11
 8006bda:	2207      	movs	r2, #7
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2201      	movs	r2, #1
 8006be0:	409a      	lsls	r2, r3
 8006be2:	0013      	movs	r3, r2
 8006be4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	4835      	ldr	r0, [pc, #212]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bea:	f7fb fa35 	bl	8002058 <__udivsi3>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e05d      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf4:	4b31      	ldr	r3, [pc, #196]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2238      	movs	r2, #56	; 0x38
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d102      	bne.n	8006c06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c00:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	e054      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c06:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2238      	movs	r2, #56	; 0x38
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d138      	bne.n	8006c84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006c12:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	2203      	movs	r2, #3
 8006c18:	4013      	ands	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c1c:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	2207      	movs	r2, #7
 8006c24:	4013      	ands	r3, r2
 8006c26:	3301      	adds	r3, #1
 8006c28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d10d      	bne.n	8006c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	4824      	ldr	r0, [pc, #144]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006c34:	f7fb fa10 	bl	8002058 <__udivsi3>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	0a1b      	lsrs	r3, r3, #8
 8006c42:	227f      	movs	r2, #127	; 0x7f
 8006c44:	4013      	ands	r3, r2
 8006c46:	434b      	muls	r3, r1
 8006c48:	617b      	str	r3, [r7, #20]
        break;
 8006c4a:	e00d      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	481c      	ldr	r0, [pc, #112]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c50:	f7fb fa02 	bl	8002058 <__udivsi3>
 8006c54:	0003      	movs	r3, r0
 8006c56:	0019      	movs	r1, r3
 8006c58:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	227f      	movs	r2, #127	; 0x7f
 8006c60:	4013      	ands	r3, r2
 8006c62:	434b      	muls	r3, r1
 8006c64:	617b      	str	r3, [r7, #20]
        break;
 8006c66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	0f5b      	lsrs	r3, r3, #29
 8006c6e:	2207      	movs	r2, #7
 8006c70:	4013      	ands	r3, r2
 8006c72:	3301      	adds	r3, #1
 8006c74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	6978      	ldr	r0, [r7, #20]
 8006c7a:	f7fb f9ed 	bl	8002058 <__udivsi3>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	e015      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2238      	movs	r2, #56	; 0x38
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d103      	bne.n	8006c98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e00b      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006c98:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2238      	movs	r2, #56	; 0x38
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b18      	cmp	r3, #24
 8006ca2:	d103      	bne.n	8006cac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006ca4:	23fa      	movs	r3, #250	; 0xfa
 8006ca6:	01db      	lsls	r3, r3, #7
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	e001      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006cb0:	693b      	ldr	r3, [r7, #16]
}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b006      	add	sp, #24
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	00f42400 	.word	0x00f42400
 8006cc4:	007a1200 	.word	0x007a1200

08006cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ccc:	4b02      	ldr	r3, [pc, #8]	; (8006cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006cce:	681b      	ldr	r3, [r3, #0]
}
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	20000004 	.word	0x20000004

08006cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cdc:	b5b0      	push	{r4, r5, r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006ce0:	f7ff fff2 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006ce4:	0004      	movs	r4, r0
 8006ce6:	f7ff faf9 	bl	80062dc <LL_RCC_GetAPB1Prescaler>
 8006cea:	0003      	movs	r3, r0
 8006cec:	0b1a      	lsrs	r2, r3, #12
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	58d3      	ldr	r3, [r2, r3]
 8006cf4:	221f      	movs	r2, #31
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	40dc      	lsrs	r4, r3
 8006cfa:	0023      	movs	r3, r4
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bdb0      	pop	{r4, r5, r7, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	08018afc 	.word	0x08018afc

08006d08 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <HAL_RCC_GetClockConfig+0x4c>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	401a      	ands	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <HAL_RCC_GetClockConfig+0x4c>)
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	23f0      	movs	r3, #240	; 0xf0
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	401a      	ands	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <HAL_RCC_GetClockConfig+0x4c>)
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	23e0      	movs	r3, #224	; 0xe0
 8006d38:	01db      	lsls	r3, r3, #7
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetClockConfig+0x50>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2207      	movs	r2, #7
 8006d46:	401a      	ands	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	601a      	str	r2, [r3, #0]
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40022000 	.word	0x40022000

08006d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006d64:	2313      	movs	r3, #19
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d6c:	2312      	movs	r3, #18
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	029b      	lsls	r3, r3, #10
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d100      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006d80:	e0ad      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d82:	2011      	movs	r0, #17
 8006d84:	183b      	adds	r3, r7, r0
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d8a:	4b47      	ldr	r3, [pc, #284]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	055b      	lsls	r3, r3, #21
 8006d92:	4013      	ands	r3, r2
 8006d94:	d110      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d96:	4b44      	ldr	r3, [pc, #272]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d9a:	4b43      	ldr	r3, [pc, #268]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	0549      	lsls	r1, r1, #21
 8006da0:	430a      	orrs	r2, r1
 8006da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006da4:	4b40      	ldr	r3, [pc, #256]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	055b      	lsls	r3, r3, #21
 8006dac:	4013      	ands	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006db2:	183b      	adds	r3, r7, r0
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006db8:	4b3c      	ldr	r3, [pc, #240]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	0049      	lsls	r1, r1, #1
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dc6:	f7fc fc75 	bl	80036b4 <HAL_GetTick>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dce:	e00b      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd0:	f7fc fc70 	bl	80036b4 <HAL_GetTick>
 8006dd4:	0002      	movs	r2, r0
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d904      	bls.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006dde:	2313      	movs	r3, #19
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	2203      	movs	r2, #3
 8006de4:	701a      	strb	r2, [r3, #0]
        break;
 8006de6:	e005      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006de8:	4b30      	ldr	r3, [pc, #192]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4013      	ands	r3, r2
 8006df2:	d0ed      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006df4:	2313      	movs	r3, #19
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d15e      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006dfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e02:	23c0      	movs	r3, #192	; 0xc0
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4013      	ands	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d019      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d014      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e24:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e28:	4b1f      	ldr	r3, [pc, #124]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	0249      	lsls	r1, r1, #9
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e36:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e38:	491e      	ldr	r1, [pc, #120]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006e3a:	400a      	ands	r2, r1
 8006e3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e3e:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2201      	movs	r2, #1
 8006e48:	4013      	ands	r3, r2
 8006e4a:	d016      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fc fc32 	bl	80036b4 <HAL_GetTick>
 8006e50:	0003      	movs	r3, r0
 8006e52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e54:	e00c      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fc fc2d 	bl	80036b4 <HAL_GetTick>
 8006e5a:	0002      	movs	r2, r0
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d904      	bls.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006e66:	2313      	movs	r3, #19
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	701a      	strb	r2, [r3, #0]
            break;
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	2202      	movs	r2, #2
 8006e76:	4013      	ands	r3, r2
 8006e78:	d0ed      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006e7a:	2313      	movs	r3, #19
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006e94:	430a      	orrs	r2, r1
 8006e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e98:	e016      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e9a:	2312      	movs	r3, #18
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	2213      	movs	r2, #19
 8006ea0:	18ba      	adds	r2, r7, r2
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e00f      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	40007000 	.word	0x40007000
 8006eb0:	fffffcff 	.word	0xfffffcff
 8006eb4:	fffeffff 	.word	0xfffeffff
 8006eb8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	2312      	movs	r3, #18
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	2213      	movs	r2, #19
 8006ec2:	18ba      	adds	r2, r7, r2
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ec8:	2311      	movs	r3, #17
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed2:	4bb6      	ldr	r3, [pc, #728]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed6:	4bb5      	ldr	r3, [pc, #724]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed8:	49b5      	ldr	r1, [pc, #724]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006eda:	400a      	ands	r2, r1
 8006edc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d009      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ee8:	4bb0      	ldr	r3, [pc, #704]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	2203      	movs	r2, #3
 8006eee:	4393      	bics	r3, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	4bad      	ldr	r3, [pc, #692]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2202      	movs	r2, #2
 8006f02:	4013      	ands	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f06:	4ba9      	ldr	r3, [pc, #676]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	220c      	movs	r2, #12
 8006f0c:	4393      	bics	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	4ba5      	ldr	r3, [pc, #660]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f16:	430a      	orrs	r2, r1
 8006f18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	4013      	ands	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f24:	4ba1      	ldr	r3, [pc, #644]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f28:	2230      	movs	r2, #48	; 0x30
 8006f2a:	4393      	bics	r3, r2
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	4b9e      	ldr	r3, [pc, #632]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f34:	430a      	orrs	r2, r1
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2210      	movs	r2, #16
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f42:	4b9a      	ldr	r3, [pc, #616]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	4a9b      	ldr	r2, [pc, #620]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	4b96      	ldr	r3, [pc, #600]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f52:	430a      	orrs	r2, r1
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	015b      	lsls	r3, r3, #5
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d009      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006f62:	4b92      	ldr	r3, [pc, #584]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	4a94      	ldr	r2, [pc, #592]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695a      	ldr	r2, [r3, #20]
 8006f70:	4b8e      	ldr	r3, [pc, #568]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f72:	430a      	orrs	r2, r1
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4013      	ands	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f82:	4b8a      	ldr	r3, [pc, #552]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	4a8d      	ldr	r2, [pc, #564]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f90:	4b86      	ldr	r3, [pc, #536]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f92:	430a      	orrs	r2, r1
 8006f94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fa2:	4b82      	ldr	r3, [pc, #520]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	4a86      	ldr	r2, [pc, #536]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	0019      	movs	r1, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	4b7e      	ldr	r3, [pc, #504]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fc0:	4b7a      	ldr	r3, [pc, #488]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	4a7f      	ldr	r2, [pc, #508]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	0019      	movs	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	4b77      	ldr	r3, [pc, #476]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2240      	movs	r2, #64	; 0x40
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fde:	4b73      	ldr	r3, [pc, #460]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	4a79      	ldr	r2, [pc, #484]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	4b6f      	ldr	r3, [pc, #444]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	2380      	movs	r3, #128	; 0x80
 8006ff8:	01db      	lsls	r3, r3, #7
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d015      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffe:	4b6b      	ldr	r3, [pc, #428]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	0899      	lsrs	r1, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700a:	4b68      	ldr	r3, [pc, #416]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800700c:	430a      	orrs	r2, r1
 800700e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	05db      	lsls	r3, r3, #23
 8007018:	429a      	cmp	r2, r3
 800701a:	d106      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800701c:	4b63      	ldr	r3, [pc, #396]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	4b62      	ldr	r3, [pc, #392]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	0249      	lsls	r1, r1, #9
 8007026:	430a      	orrs	r2, r1
 8007028:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	4013      	ands	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007036:	4b5d      	ldr	r3, [pc, #372]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	2240      	movs	r2, #64	; 0x40
 800703c:	4393      	bics	r3, r2
 800703e:	0019      	movs	r1, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007044:	4b59      	ldr	r3, [pc, #356]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007046:	430a      	orrs	r2, r1
 8007048:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	039b      	lsls	r3, r3, #14
 8007052:	4013      	ands	r3, r2
 8007054:	d016      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007056:	4b55      	ldr	r3, [pc, #340]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705a:	4a5c      	ldr	r2, [pc, #368]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800705c:	4013      	ands	r3, r2
 800705e:	0019      	movs	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007064:	4b51      	ldr	r3, [pc, #324]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007066:	430a      	orrs	r2, r1
 8007068:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706e:	2380      	movs	r3, #128	; 0x80
 8007070:	03db      	lsls	r3, r3, #15
 8007072:	429a      	cmp	r2, r3
 8007074:	d106      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007076:	4b4d      	ldr	r3, [pc, #308]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	4b4c      	ldr	r3, [pc, #304]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800707c:	2180      	movs	r1, #128	; 0x80
 800707e:	0449      	lsls	r1, r1, #17
 8007080:	430a      	orrs	r2, r1
 8007082:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	03db      	lsls	r3, r3, #15
 800708c:	4013      	ands	r3, r2
 800708e:	d016      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007090:	4b46      	ldr	r3, [pc, #280]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	4a4e      	ldr	r2, [pc, #312]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007096:	4013      	ands	r3, r2
 8007098:	0019      	movs	r1, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709e:	4b43      	ldr	r3, [pc, #268]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070a0:	430a      	orrs	r2, r1
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	045b      	lsls	r3, r3, #17
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d106      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80070b0:	4b3e      	ldr	r3, [pc, #248]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	4b3d      	ldr	r3, [pc, #244]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	0449      	lsls	r1, r1, #17
 80070ba:	430a      	orrs	r2, r1
 80070bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	4013      	ands	r3, r2
 80070c8:	d014      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80070ca:	4b38      	ldr	r3, [pc, #224]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	2203      	movs	r2, #3
 80070d0:	4393      	bics	r3, r2
 80070d2:	0019      	movs	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	4b34      	ldr	r3, [pc, #208]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070da:	430a      	orrs	r2, r1
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d106      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80070e6:	4b31      	ldr	r3, [pc, #196]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	4b30      	ldr	r3, [pc, #192]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	0249      	lsls	r1, r1, #9
 80070f0:	430a      	orrs	r2, r1
 80070f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	4013      	ands	r3, r2
 80070fe:	d014      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007100:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	220c      	movs	r2, #12
 8007106:	4393      	bics	r3, r2
 8007108:	0019      	movs	r1, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710e:	4b27      	ldr	r3, [pc, #156]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007110:	430a      	orrs	r2, r1
 8007112:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b04      	cmp	r3, #4
 800711a:	d106      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800711c:	4b23      	ldr	r3, [pc, #140]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	4b22      	ldr	r3, [pc, #136]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	0249      	lsls	r1, r1, #9
 8007126:	430a      	orrs	r2, r1
 8007128:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	2380      	movs	r3, #128	; 0x80
 8007130:	045b      	lsls	r3, r3, #17
 8007132:	4013      	ands	r3, r2
 8007134:	d016      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800713c:	4013      	ands	r3, r2
 800713e:	0019      	movs	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007146:	430a      	orrs	r2, r1
 8007148:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714e:	2380      	movs	r3, #128	; 0x80
 8007150:	019b      	lsls	r3, r3, #6
 8007152:	429a      	cmp	r2, r3
 8007154:	d106      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800715c:	2180      	movs	r1, #128	; 0x80
 800715e:	0449      	lsls	r1, r1, #17
 8007160:	430a      	orrs	r2, r1
 8007162:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	049b      	lsls	r3, r3, #18
 800716c:	4013      	ands	r3, r2
 800716e:	d016      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007170:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007176:	4013      	ands	r3, r2
 8007178:	0019      	movs	r1, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007180:	430a      	orrs	r2, r1
 8007182:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	429a      	cmp	r2, r3
 800718e:	d106      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	0449      	lsls	r1, r1, #17
 800719a:	430a      	orrs	r2, r1
 800719c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800719e:	2312      	movs	r3, #18
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	781b      	ldrb	r3, [r3, #0]
}
 80071a4:	0018      	movs	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b006      	add	sp, #24
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40021000 	.word	0x40021000
 80071b0:	efffffff 	.word	0xefffffff
 80071b4:	fffff3ff 	.word	0xfffff3ff
 80071b8:	fffffcff 	.word	0xfffffcff
 80071bc:	fff3ffff 	.word	0xfff3ffff
 80071c0:	ffcfffff 	.word	0xffcfffff
 80071c4:	ffffcfff 	.word	0xffffcfff
 80071c8:	ffff3fff 	.word	0xffff3fff
 80071cc:	ffbfffff 	.word	0xffbfffff
 80071d0:	feffffff 	.word	0xfeffffff

080071d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e04a      	b.n	800727c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	223d      	movs	r2, #61	; 0x3d
 80071ea:	5c9b      	ldrb	r3, [r3, r2]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	223c      	movs	r2, #60	; 0x3c
 80071f6:	2100      	movs	r1, #0
 80071f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 f841 	bl	8007284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	223d      	movs	r2, #61	; 0x3d
 8007206:	2102      	movs	r1, #2
 8007208:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3304      	adds	r3, #4
 8007212:	0019      	movs	r1, r3
 8007214:	0010      	movs	r0, r2
 8007216:	f000 f9f1 	bl	80075fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2248      	movs	r2, #72	; 0x48
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	223e      	movs	r2, #62	; 0x3e
 8007226:	2101      	movs	r1, #1
 8007228:	5499      	strb	r1, [r3, r2]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	223f      	movs	r2, #63	; 0x3f
 800722e:	2101      	movs	r1, #1
 8007230:	5499      	strb	r1, [r3, r2]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2240      	movs	r2, #64	; 0x40
 8007236:	2101      	movs	r1, #1
 8007238:	5499      	strb	r1, [r3, r2]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2241      	movs	r2, #65	; 0x41
 800723e:	2101      	movs	r1, #1
 8007240:	5499      	strb	r1, [r3, r2]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2242      	movs	r2, #66	; 0x42
 8007246:	2101      	movs	r1, #1
 8007248:	5499      	strb	r1, [r3, r2]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2243      	movs	r2, #67	; 0x43
 800724e:	2101      	movs	r1, #1
 8007250:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2244      	movs	r2, #68	; 0x44
 8007256:	2101      	movs	r1, #1
 8007258:	5499      	strb	r1, [r3, r2]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2245      	movs	r2, #69	; 0x45
 800725e:	2101      	movs	r1, #1
 8007260:	5499      	strb	r1, [r3, r2]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2246      	movs	r2, #70	; 0x46
 8007266:	2101      	movs	r1, #1
 8007268:	5499      	strb	r1, [r3, r2]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2247      	movs	r2, #71	; 0x47
 800726e:	2101      	movs	r1, #1
 8007270:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	223d      	movs	r2, #61	; 0x3d
 8007276:	2101      	movs	r1, #1
 8007278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	0018      	movs	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	b002      	add	sp, #8
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b002      	add	sp, #8
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	223d      	movs	r2, #61	; 0x3d
 80072a0:	5c9b      	ldrb	r3, [r3, r2]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d001      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e047      	b.n	800733c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223d      	movs	r2, #61	; 0x3d
 80072b0:	2102      	movs	r1, #2
 80072b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2101      	movs	r1, #1
 80072c0:	430a      	orrs	r2, r1
 80072c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <HAL_TIM_Base_Start_IT+0xb0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d014      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0x64>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	2380      	movs	r3, #128	; 0x80
 80072d4:	05db      	lsls	r3, r3, #23
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d00e      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0x64>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <HAL_TIM_Base_Start_IT+0xb4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0x64>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a18      	ldr	r2, [pc, #96]	; (800734c <HAL_TIM_Base_Start_IT+0xb8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0x64>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a17      	ldr	r2, [pc, #92]	; (8007350 <HAL_TIM_Base_Start_IT+0xbc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d116      	bne.n	8007326 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <HAL_TIM_Base_Start_IT+0xc0>)
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b06      	cmp	r3, #6
 8007308:	d016      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0xa4>
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	025b      	lsls	r3, r3, #9
 8007310:	429a      	cmp	r2, r3
 8007312:	d011      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2101      	movs	r1, #1
 8007320:	430a      	orrs	r2, r1
 8007322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007324:	e008      	b.n	8007338 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2101      	movs	r1, #1
 8007332:	430a      	orrs	r2, r1
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e000      	b.n	800733a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007338:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	0018      	movs	r0, r3
 800733e:	46bd      	mov	sp, r7
 8007340:	b004      	add	sp, #16
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40014000 	.word	0x40014000
 8007354:	00010007 	.word	0x00010007

08007358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2202      	movs	r2, #2
 8007368:	4013      	ands	r3, r2
 800736a:	2b02      	cmp	r3, #2
 800736c:	d124      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	4013      	ands	r3, r2
 8007378:	2b02      	cmp	r3, #2
 800737a:	d11d      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2203      	movs	r2, #3
 8007382:	4252      	negs	r2, r2
 8007384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2203      	movs	r2, #3
 8007394:	4013      	ands	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f916 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 80073a0:	e007      	b.n	80073b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f000 f909 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0018      	movs	r0, r3
 80073ae:	f000 f915 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2204      	movs	r2, #4
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d125      	bne.n	8007412 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2204      	movs	r2, #4
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d11e      	bne.n	8007412 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2205      	movs	r2, #5
 80073da:	4252      	negs	r2, r2
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	23c0      	movs	r3, #192	; 0xc0
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4013      	ands	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 f8e9 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 80073fa:	e007      	b.n	800740c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 f8dc 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0018      	movs	r0, r3
 8007408:	f000 f8e8 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2208      	movs	r2, #8
 800741a:	4013      	ands	r3, r2
 800741c:	2b08      	cmp	r3, #8
 800741e:	d124      	bne.n	800746a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2208      	movs	r2, #8
 8007428:	4013      	ands	r3, r2
 800742a:	2b08      	cmp	r3, #8
 800742c:	d11d      	bne.n	800746a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2209      	movs	r2, #9
 8007434:	4252      	negs	r2, r2
 8007436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2204      	movs	r2, #4
 800743c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	2203      	movs	r2, #3
 8007446:	4013      	ands	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 f8bd 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8007452:	e007      	b.n	8007464 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	0018      	movs	r0, r3
 8007458:	f000 f8b0 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	0018      	movs	r0, r3
 8007460:	f000 f8bc 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2210      	movs	r2, #16
 8007472:	4013      	ands	r3, r2
 8007474:	2b10      	cmp	r3, #16
 8007476:	d125      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2210      	movs	r2, #16
 8007480:	4013      	ands	r3, r2
 8007482:	2b10      	cmp	r3, #16
 8007484:	d11e      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2211      	movs	r2, #17
 800748c:	4252      	negs	r2, r2
 800748e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2208      	movs	r2, #8
 8007494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	23c0      	movs	r3, #192	; 0xc0
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4013      	ands	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 f890 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 80074ac:	e007      	b.n	80074be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	0018      	movs	r0, r3
 80074b2:	f000 f883 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0018      	movs	r0, r3
 80074ba:	f000 f88f 	bl	80075dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	2201      	movs	r2, #1
 80074cc:	4013      	ands	r3, r2
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10f      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	4013      	ands	r3, r2
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d108      	bne.n	80074f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2202      	movs	r2, #2
 80074e6:	4252      	negs	r2, r2
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7fb fa3d 	bl	800296c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b80      	cmp	r3, #128	; 0x80
 80074fe:	d10f      	bne.n	8007520 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	4013      	ands	r3, r2
 800750a:	2b80      	cmp	r3, #128	; 0x80
 800750c:	d108      	bne.n	8007520 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2281      	movs	r2, #129	; 0x81
 8007514:	4252      	negs	r2, r2
 8007516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	0018      	movs	r0, r3
 800751c:	f000 f900 	bl	8007720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	401a      	ands	r2, r3
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	429a      	cmp	r2, r3
 8007532:	d10e      	bne.n	8007552 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2280      	movs	r2, #128	; 0x80
 800753c:	4013      	ands	r3, r2
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d107      	bne.n	8007552 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <HAL_TIM_IRQHandler+0x260>)
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 f8ef 	bl	8007730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2240      	movs	r2, #64	; 0x40
 800755a:	4013      	ands	r3, r2
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d10f      	bne.n	8007580 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	4013      	ands	r3, r2
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d108      	bne.n	8007580 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2241      	movs	r2, #65	; 0x41
 8007574:	4252      	negs	r2, r2
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	0018      	movs	r0, r3
 800757c:	f000 f836 	bl	80075ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	2220      	movs	r2, #32
 8007588:	4013      	ands	r3, r2
 800758a:	2b20      	cmp	r3, #32
 800758c:	d10f      	bne.n	80075ae <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	4013      	ands	r3, r2
 8007598:	2b20      	cmp	r3, #32
 800759a:	d108      	bne.n	80075ae <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2221      	movs	r2, #33	; 0x21
 80075a2:	4252      	negs	r2, r2
 80075a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f8b1 	bl	8007710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b002      	add	sp, #8
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	fffffeff 	.word	0xfffffeff

080075bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c4:	46c0      	nop			; (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b002      	add	sp, #8
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b002      	add	sp, #8
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b002      	add	sp, #8
 80075fa:	bd80      	pop	{r7, pc}

080075fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a38      	ldr	r2, [pc, #224]	; (80076f0 <TIM_Base_SetConfig+0xf4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00c      	beq.n	800762e <TIM_Base_SetConfig+0x32>
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	05db      	lsls	r3, r3, #23
 800761a:	429a      	cmp	r2, r3
 800761c:	d007      	beq.n	800762e <TIM_Base_SetConfig+0x32>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a34      	ldr	r2, [pc, #208]	; (80076f4 <TIM_Base_SetConfig+0xf8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d003      	beq.n	800762e <TIM_Base_SetConfig+0x32>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a33      	ldr	r2, [pc, #204]	; (80076f8 <TIM_Base_SetConfig+0xfc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d108      	bne.n	8007640 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2270      	movs	r2, #112	; 0x70
 8007632:	4393      	bics	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2b      	ldr	r2, [pc, #172]	; (80076f0 <TIM_Base_SetConfig+0xf4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01c      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	2380      	movs	r3, #128	; 0x80
 800764c:	05db      	lsls	r3, r3, #23
 800764e:	429a      	cmp	r2, r3
 8007650:	d017      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <TIM_Base_SetConfig+0xf8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <TIM_Base_SetConfig+0xfc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a25      	ldr	r2, [pc, #148]	; (80076fc <TIM_Base_SetConfig+0x100>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a24      	ldr	r2, [pc, #144]	; (8007700 <TIM_Base_SetConfig+0x104>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a23      	ldr	r2, [pc, #140]	; (8007704 <TIM_Base_SetConfig+0x108>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_Base_SetConfig+0x86>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a22      	ldr	r2, [pc, #136]	; (8007708 <TIM_Base_SetConfig+0x10c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d108      	bne.n	8007694 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a21      	ldr	r2, [pc, #132]	; (800770c <TIM_Base_SetConfig+0x110>)
 8007686:	4013      	ands	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	4393      	bics	r3, r2
 800769a:	001a      	movs	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <TIM_Base_SetConfig+0xf4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0xde>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <TIM_Base_SetConfig+0x104>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0xde>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <TIM_Base_SetConfig+0x108>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0xde>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <TIM_Base_SetConfig+0x10c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d103      	bne.n	80076e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	615a      	str	r2, [r3, #20]
}
 80076e8:	46c0      	nop			; (mov r8, r8)
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b004      	add	sp, #16
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40002000 	.word	0x40002000
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800
 800770c:	fffffcff 	.word	0xfffffcff

08007710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b002      	add	sp, #8
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007728:	46c0      	nop			; (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	b002      	add	sp, #8
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007738:	46c0      	nop			; (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	b002      	add	sp, #8
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e046      	b.n	80077e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2288      	movs	r2, #136	; 0x88
 8007756:	589b      	ldr	r3, [r3, r2]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2284      	movs	r2, #132	; 0x84
 8007760:	2100      	movs	r1, #0
 8007762:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	0018      	movs	r0, r3
 8007768:	f7fb fd6a 	bl	8003240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2288      	movs	r2, #136	; 0x88
 8007770:	2124      	movs	r1, #36	; 0x24
 8007772:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2101      	movs	r1, #1
 8007780:	438a      	bics	r2, r1
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	0018      	movs	r0, r3
 8007788:	f000 f97c 	bl	8007a84 <UART_SetConfig>
 800778c:	0003      	movs	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e024      	b.n	80077e0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	0018      	movs	r0, r3
 80077a2:	f000 fcc5 	bl	8008130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	490d      	ldr	r1, [pc, #52]	; (80077e8 <HAL_UART_Init+0xa8>)
 80077b2:	400a      	ands	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	212a      	movs	r1, #42	; 0x2a
 80077c2:	438a      	bics	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2101      	movs	r1, #1
 80077d2:	430a      	orrs	r2, r1
 80077d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 fd5d 	bl	8008298 <UART_CheckIdleState>
 80077de:	0003      	movs	r3, r0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	ffffb7ff 	.word	0xffffb7ff

080077ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e032      	b.n	8007864 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2288      	movs	r2, #136	; 0x88
 8007802:	2124      	movs	r1, #36	; 0x24
 8007804:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2101      	movs	r1, #1
 8007812:	438a      	bics	r2, r1
 8007814:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2200      	movs	r2, #0
 800782c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0018      	movs	r0, r3
 8007832:	f7fb fe0b 	bl	800344c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2290      	movs	r2, #144	; 0x90
 800783a:	2100      	movs	r1, #0
 800783c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2288      	movs	r2, #136	; 0x88
 8007842:	2100      	movs	r1, #0
 8007844:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	228c      	movs	r2, #140	; 0x8c
 800784a:	2100      	movs	r1, #0
 800784c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2284      	movs	r2, #132	; 0x84
 800785e:	2100      	movs	r1, #0
 8007860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	0018      	movs	r0, r3
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	1dbb      	adds	r3, r7, #6
 8007878:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	228c      	movs	r2, #140	; 0x8c
 800787e:	589b      	ldr	r3, [r3, r2]
 8007880:	2b20      	cmp	r3, #32
 8007882:	d14f      	bne.n	8007924 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_UART_Receive_IT+0x26>
 800788a:	1dbb      	adds	r3, r7, #6
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e047      	b.n	8007926 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	015b      	lsls	r3, r3, #5
 800789e:	429a      	cmp	r2, r3
 80078a0:	d109      	bne.n	80078b6 <HAL_UART_Receive_IT+0x4a>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2201      	movs	r2, #1
 80078ae:	4013      	ands	r3, r2
 80078b0:	d001      	beq.n	80078b6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e037      	b.n	8007926 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <HAL_UART_Receive_IT+0xc4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d025      	beq.n	8007912 <HAL_UART_Receive_IT+0xa6>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <HAL_UART_Receive_IT+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d020      	beq.n	8007912 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	2380      	movs	r3, #128	; 0x80
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	4013      	ands	r3, r2
 80078dc:	d019      	beq.n	8007912 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078de:	f3ef 8310 	mrs	r3, PRIMASK
 80078e2:	613b      	str	r3, [r7, #16]
  return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	2301      	movs	r3, #1
 80078ea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f383 8810 	msr	PRIMASK, r3
}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2180      	movs	r1, #128	; 0x80
 8007900:	04c9      	lsls	r1, r1, #19
 8007902:	430a      	orrs	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f383 8810 	msr	PRIMASK, r3
}
 8007910:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007912:	1dbb      	adds	r3, r7, #6
 8007914:	881a      	ldrh	r2, [r3, #0]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 fdd2 	bl	80084c4 <UART_Start_Receive_IT>
 8007920:	0003      	movs	r3, r0
 8007922:	e000      	b.n	8007926 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007924:	2302      	movs	r3, #2
  }
}
 8007926:	0018      	movs	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	b008      	add	sp, #32
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	40008000 	.word	0x40008000
 8007934:	40008400 	.word	0x40008400

08007938 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	1dbb      	adds	r3, r7, #6
 8007944:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2288      	movs	r2, #136	; 0x88
 800794a:	589b      	ldr	r3, [r3, r2]
 800794c:	2b20      	cmp	r3, #32
 800794e:	d000      	beq.n	8007952 <HAL_UART_Transmit_DMA+0x1a>
 8007950:	e079      	b.n	8007a46 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_UART_Transmit_DMA+0x28>
 8007958:	1dbb      	adds	r3, r7, #6
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e071      	b.n	8007a48 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	015b      	lsls	r3, r3, #5
 800796c:	429a      	cmp	r2, r3
 800796e:	d109      	bne.n	8007984 <HAL_UART_Transmit_DMA+0x4c>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2201      	movs	r2, #1
 800797c:	4013      	ands	r3, r2
 800797e:	d001      	beq.n	8007984 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e061      	b.n	8007a48 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	1dba      	adds	r2, r7, #6
 800798e:	2154      	movs	r1, #84	; 0x54
 8007990:	8812      	ldrh	r2, [r2, #0]
 8007992:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1dba      	adds	r2, r7, #6
 8007998:	2156      	movs	r1, #86	; 0x56
 800799a:	8812      	ldrh	r2, [r2, #0]
 800799c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2290      	movs	r2, #144	; 0x90
 80079a2:	2100      	movs	r1, #0
 80079a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2288      	movs	r2, #136	; 0x88
 80079aa:	2121      	movs	r1, #33	; 0x21
 80079ac:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d028      	beq.n	8007a08 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ba:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <HAL_UART_Transmit_DMA+0x118>)
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c2:	4a24      	ldr	r2, [pc, #144]	; (8007a54 <HAL_UART_Transmit_DMA+0x11c>)
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ca:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <HAL_UART_Transmit_DMA+0x120>)
 80079cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d2:	2200      	movs	r2, #0
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	0019      	movs	r1, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3328      	adds	r3, #40	; 0x28
 80079e6:	001a      	movs	r2, r3
 80079e8:	1dbb      	adds	r3, r7, #6
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	f7fc f882 	bl	8003af4 <HAL_DMA_Start_IT>
 80079f0:	1e03      	subs	r3, r0, #0
 80079f2:	d009      	beq.n	8007a08 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2290      	movs	r2, #144	; 0x90
 80079f8:	2110      	movs	r1, #16
 80079fa:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2288      	movs	r2, #136	; 0x88
 8007a00:	2120      	movs	r1, #32
 8007a02:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e01f      	b.n	8007a48 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2240      	movs	r2, #64	; 0x40
 8007a0e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a10:	f3ef 8310 	mrs	r3, PRIMASK
 8007a14:	613b      	str	r3, [r7, #16]
  return(result);
 8007a16:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a18:	61fb      	str	r3, [r7, #28]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f383 8810 	msr	PRIMASK, r3
}
 8007a24:	46c0      	nop			; (mov r8, r8)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f383 8810 	msr	PRIMASK, r3
}
 8007a40:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e000      	b.n	8007a48 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007a46:	2302      	movs	r3, #2
  }
}
 8007a48:	0018      	movs	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b008      	add	sp, #32
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08008859 	.word	0x08008859
 8007a54:	080088f1 	.word	0x080088f1
 8007a58:	0800890f 	.word	0x0800890f

08007a5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b002      	add	sp, #8
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	000a      	movs	r2, r1
 8007a76:	1cbb      	adds	r3, r7, #2
 8007a78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b002      	add	sp, #8
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	b5b0      	push	{r4, r5, r7, lr}
 8007a86:	b090      	sub	sp, #64	; 0x40
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8c:	231a      	movs	r3, #26
 8007a8e:	2220      	movs	r2, #32
 8007a90:	189b      	adds	r3, r3, r2
 8007a92:	19db      	adds	r3, r3, r7
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4ac1      	ldr	r2, [pc, #772]	; (8007dbc <UART_SetConfig+0x338>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	0019      	movs	r1, r3
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4abc      	ldr	r2, [pc, #752]	; (8007dc0 <UART_SetConfig+0x33c>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	68d9      	ldr	r1, [r3, #12]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	0003      	movs	r3, r0
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4ab6      	ldr	r2, [pc, #728]	; (8007dc4 <UART_SetConfig+0x340>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d009      	beq.n	8007b04 <UART_SetConfig+0x80>
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4ab4      	ldr	r2, [pc, #720]	; (8007dc8 <UART_SetConfig+0x344>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d004      	beq.n	8007b04 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b00:	4313      	orrs	r3, r2
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	4ab0      	ldr	r2, [pc, #704]	; (8007dcc <UART_SetConfig+0x348>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	0019      	movs	r1, r3
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	430b      	orrs	r3, r1
 8007b18:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	220f      	movs	r2, #15
 8007b22:	4393      	bics	r3, r2
 8007b24:	0018      	movs	r0, r3
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	0003      	movs	r3, r0
 8007b30:	430b      	orrs	r3, r1
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4aa5      	ldr	r2, [pc, #660]	; (8007dd0 <UART_SetConfig+0x34c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d131      	bne.n	8007ba2 <UART_SetConfig+0x11e>
 8007b3e:	4ba5      	ldr	r3, [pc, #660]	; (8007dd4 <UART_SetConfig+0x350>)
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	2203      	movs	r2, #3
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d01d      	beq.n	8007b86 <UART_SetConfig+0x102>
 8007b4a:	d823      	bhi.n	8007b94 <UART_SetConfig+0x110>
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d00c      	beq.n	8007b6a <UART_SetConfig+0xe6>
 8007b50:	d820      	bhi.n	8007b94 <UART_SetConfig+0x110>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <UART_SetConfig+0xd8>
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d00e      	beq.n	8007b78 <UART_SetConfig+0xf4>
 8007b5a:	e01b      	b.n	8007b94 <UART_SetConfig+0x110>
 8007b5c:	231b      	movs	r3, #27
 8007b5e:	2220      	movs	r2, #32
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	19db      	adds	r3, r3, r7
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e154      	b.n	8007e14 <UART_SetConfig+0x390>
 8007b6a:	231b      	movs	r3, #27
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	19db      	adds	r3, r3, r7
 8007b72:	2202      	movs	r2, #2
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e14d      	b.n	8007e14 <UART_SetConfig+0x390>
 8007b78:	231b      	movs	r3, #27
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	189b      	adds	r3, r3, r2
 8007b7e:	19db      	adds	r3, r3, r7
 8007b80:	2204      	movs	r2, #4
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e146      	b.n	8007e14 <UART_SetConfig+0x390>
 8007b86:	231b      	movs	r3, #27
 8007b88:	2220      	movs	r2, #32
 8007b8a:	189b      	adds	r3, r3, r2
 8007b8c:	19db      	adds	r3, r3, r7
 8007b8e:	2208      	movs	r2, #8
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e13f      	b.n	8007e14 <UART_SetConfig+0x390>
 8007b94:	231b      	movs	r3, #27
 8007b96:	2220      	movs	r2, #32
 8007b98:	189b      	adds	r3, r3, r2
 8007b9a:	19db      	adds	r3, r3, r7
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e138      	b.n	8007e14 <UART_SetConfig+0x390>
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a8c      	ldr	r2, [pc, #560]	; (8007dd8 <UART_SetConfig+0x354>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d131      	bne.n	8007c10 <UART_SetConfig+0x18c>
 8007bac:	4b89      	ldr	r3, [pc, #548]	; (8007dd4 <UART_SetConfig+0x350>)
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	220c      	movs	r2, #12
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	d01d      	beq.n	8007bf4 <UART_SetConfig+0x170>
 8007bb8:	d823      	bhi.n	8007c02 <UART_SetConfig+0x17e>
 8007bba:	2b08      	cmp	r3, #8
 8007bbc:	d00c      	beq.n	8007bd8 <UART_SetConfig+0x154>
 8007bbe:	d820      	bhi.n	8007c02 <UART_SetConfig+0x17e>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <UART_SetConfig+0x146>
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d00e      	beq.n	8007be6 <UART_SetConfig+0x162>
 8007bc8:	e01b      	b.n	8007c02 <UART_SetConfig+0x17e>
 8007bca:	231b      	movs	r3, #27
 8007bcc:	2220      	movs	r2, #32
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	19db      	adds	r3, r3, r7
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e11d      	b.n	8007e14 <UART_SetConfig+0x390>
 8007bd8:	231b      	movs	r3, #27
 8007bda:	2220      	movs	r2, #32
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	19db      	adds	r3, r3, r7
 8007be0:	2202      	movs	r2, #2
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e116      	b.n	8007e14 <UART_SetConfig+0x390>
 8007be6:	231b      	movs	r3, #27
 8007be8:	2220      	movs	r2, #32
 8007bea:	189b      	adds	r3, r3, r2
 8007bec:	19db      	adds	r3, r3, r7
 8007bee:	2204      	movs	r2, #4
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e10f      	b.n	8007e14 <UART_SetConfig+0x390>
 8007bf4:	231b      	movs	r3, #27
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	189b      	adds	r3, r3, r2
 8007bfa:	19db      	adds	r3, r3, r7
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e108      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c02:	231b      	movs	r3, #27
 8007c04:	2220      	movs	r2, #32
 8007c06:	189b      	adds	r3, r3, r2
 8007c08:	19db      	adds	r3, r3, r7
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e101      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a71      	ldr	r2, [pc, #452]	; (8007ddc <UART_SetConfig+0x358>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d131      	bne.n	8007c7e <UART_SetConfig+0x1fa>
 8007c1a:	4b6e      	ldr	r3, [pc, #440]	; (8007dd4 <UART_SetConfig+0x350>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	2230      	movs	r2, #48	; 0x30
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d01d      	beq.n	8007c62 <UART_SetConfig+0x1de>
 8007c26:	d823      	bhi.n	8007c70 <UART_SetConfig+0x1ec>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d00c      	beq.n	8007c46 <UART_SetConfig+0x1c2>
 8007c2c:	d820      	bhi.n	8007c70 <UART_SetConfig+0x1ec>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <UART_SetConfig+0x1b4>
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d00e      	beq.n	8007c54 <UART_SetConfig+0x1d0>
 8007c36:	e01b      	b.n	8007c70 <UART_SetConfig+0x1ec>
 8007c38:	231b      	movs	r3, #27
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	189b      	adds	r3, r3, r2
 8007c3e:	19db      	adds	r3, r3, r7
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e0e6      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c46:	231b      	movs	r3, #27
 8007c48:	2220      	movs	r2, #32
 8007c4a:	189b      	adds	r3, r3, r2
 8007c4c:	19db      	adds	r3, r3, r7
 8007c4e:	2202      	movs	r2, #2
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	e0df      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c54:	231b      	movs	r3, #27
 8007c56:	2220      	movs	r2, #32
 8007c58:	189b      	adds	r3, r3, r2
 8007c5a:	19db      	adds	r3, r3, r7
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	701a      	strb	r2, [r3, #0]
 8007c60:	e0d8      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c62:	231b      	movs	r3, #27
 8007c64:	2220      	movs	r2, #32
 8007c66:	189b      	adds	r3, r3, r2
 8007c68:	19db      	adds	r3, r3, r7
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e0d1      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c70:	231b      	movs	r3, #27
 8007c72:	2220      	movs	r2, #32
 8007c74:	189b      	adds	r3, r3, r2
 8007c76:	19db      	adds	r3, r3, r7
 8007c78:	2210      	movs	r2, #16
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e0ca      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a57      	ldr	r2, [pc, #348]	; (8007de0 <UART_SetConfig+0x35c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d106      	bne.n	8007c96 <UART_SetConfig+0x212>
 8007c88:	231b      	movs	r3, #27
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	189b      	adds	r3, r3, r2
 8007c8e:	19db      	adds	r3, r3, r7
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	e0be      	b.n	8007e14 <UART_SetConfig+0x390>
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a52      	ldr	r2, [pc, #328]	; (8007de4 <UART_SetConfig+0x360>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d106      	bne.n	8007cae <UART_SetConfig+0x22a>
 8007ca0:	231b      	movs	r3, #27
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	189b      	adds	r3, r3, r2
 8007ca6:	19db      	adds	r3, r3, r7
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e0b2      	b.n	8007e14 <UART_SetConfig+0x390>
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a4d      	ldr	r2, [pc, #308]	; (8007de8 <UART_SetConfig+0x364>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d106      	bne.n	8007cc6 <UART_SetConfig+0x242>
 8007cb8:	231b      	movs	r3, #27
 8007cba:	2220      	movs	r2, #32
 8007cbc:	189b      	adds	r3, r3, r2
 8007cbe:	19db      	adds	r3, r3, r7
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	e0a6      	b.n	8007e14 <UART_SetConfig+0x390>
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3e      	ldr	r2, [pc, #248]	; (8007dc4 <UART_SetConfig+0x340>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d13e      	bne.n	8007d4e <UART_SetConfig+0x2ca>
 8007cd0:	4b40      	ldr	r3, [pc, #256]	; (8007dd4 <UART_SetConfig+0x350>)
 8007cd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd4:	23c0      	movs	r3, #192	; 0xc0
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	4013      	ands	r3, r2
 8007cda:	22c0      	movs	r2, #192	; 0xc0
 8007cdc:	0112      	lsls	r2, r2, #4
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d027      	beq.n	8007d32 <UART_SetConfig+0x2ae>
 8007ce2:	22c0      	movs	r2, #192	; 0xc0
 8007ce4:	0112      	lsls	r2, r2, #4
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d82a      	bhi.n	8007d40 <UART_SetConfig+0x2bc>
 8007cea:	2280      	movs	r2, #128	; 0x80
 8007cec:	0112      	lsls	r2, r2, #4
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d011      	beq.n	8007d16 <UART_SetConfig+0x292>
 8007cf2:	2280      	movs	r2, #128	; 0x80
 8007cf4:	0112      	lsls	r2, r2, #4
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d822      	bhi.n	8007d40 <UART_SetConfig+0x2bc>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <UART_SetConfig+0x284>
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	00d2      	lsls	r2, r2, #3
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d00e      	beq.n	8007d24 <UART_SetConfig+0x2a0>
 8007d06:	e01b      	b.n	8007d40 <UART_SetConfig+0x2bc>
 8007d08:	231b      	movs	r3, #27
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	189b      	adds	r3, r3, r2
 8007d0e:	19db      	adds	r3, r3, r7
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e07e      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d16:	231b      	movs	r3, #27
 8007d18:	2220      	movs	r2, #32
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	19db      	adds	r3, r3, r7
 8007d1e:	2202      	movs	r2, #2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e077      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d24:	231b      	movs	r3, #27
 8007d26:	2220      	movs	r2, #32
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	19db      	adds	r3, r3, r7
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e070      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d32:	231b      	movs	r3, #27
 8007d34:	2220      	movs	r2, #32
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	19db      	adds	r3, r3, r7
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	e069      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d40:	231b      	movs	r3, #27
 8007d42:	2220      	movs	r2, #32
 8007d44:	189b      	adds	r3, r3, r2
 8007d46:	19db      	adds	r3, r3, r7
 8007d48:	2210      	movs	r2, #16
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e062      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <UART_SetConfig+0x344>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d157      	bne.n	8007e08 <UART_SetConfig+0x384>
 8007d58:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <UART_SetConfig+0x350>)
 8007d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d5c:	23c0      	movs	r3, #192	; 0xc0
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4013      	ands	r3, r2
 8007d62:	22c0      	movs	r2, #192	; 0xc0
 8007d64:	0092      	lsls	r2, r2, #2
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d040      	beq.n	8007dec <UART_SetConfig+0x368>
 8007d6a:	22c0      	movs	r2, #192	; 0xc0
 8007d6c:	0092      	lsls	r2, r2, #2
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d843      	bhi.n	8007dfa <UART_SetConfig+0x376>
 8007d72:	2280      	movs	r2, #128	; 0x80
 8007d74:	0092      	lsls	r2, r2, #2
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d011      	beq.n	8007d9e <UART_SetConfig+0x31a>
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	0092      	lsls	r2, r2, #2
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d83b      	bhi.n	8007dfa <UART_SetConfig+0x376>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <UART_SetConfig+0x30c>
 8007d86:	2280      	movs	r2, #128	; 0x80
 8007d88:	0052      	lsls	r2, r2, #1
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00e      	beq.n	8007dac <UART_SetConfig+0x328>
 8007d8e:	e034      	b.n	8007dfa <UART_SetConfig+0x376>
 8007d90:	231b      	movs	r3, #27
 8007d92:	2220      	movs	r2, #32
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	19db      	adds	r3, r3, r7
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e03a      	b.n	8007e14 <UART_SetConfig+0x390>
 8007d9e:	231b      	movs	r3, #27
 8007da0:	2220      	movs	r2, #32
 8007da2:	189b      	adds	r3, r3, r2
 8007da4:	19db      	adds	r3, r3, r7
 8007da6:	2202      	movs	r2, #2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e033      	b.n	8007e14 <UART_SetConfig+0x390>
 8007dac:	231b      	movs	r3, #27
 8007dae:	2220      	movs	r2, #32
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	19db      	adds	r3, r3, r7
 8007db4:	2204      	movs	r2, #4
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e02c      	b.n	8007e14 <UART_SetConfig+0x390>
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	cfff69f3 	.word	0xcfff69f3
 8007dc0:	ffffcfff 	.word	0xffffcfff
 8007dc4:	40008000 	.word	0x40008000
 8007dc8:	40008400 	.word	0x40008400
 8007dcc:	11fff4ff 	.word	0x11fff4ff
 8007dd0:	40013800 	.word	0x40013800
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40004400 	.word	0x40004400
 8007ddc:	40004800 	.word	0x40004800
 8007de0:	40004c00 	.word	0x40004c00
 8007de4:	40005000 	.word	0x40005000
 8007de8:	40013c00 	.word	0x40013c00
 8007dec:	231b      	movs	r3, #27
 8007dee:	2220      	movs	r2, #32
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	19db      	adds	r3, r3, r7
 8007df4:	2208      	movs	r2, #8
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	e00c      	b.n	8007e14 <UART_SetConfig+0x390>
 8007dfa:	231b      	movs	r3, #27
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	19db      	adds	r3, r3, r7
 8007e02:	2210      	movs	r2, #16
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e005      	b.n	8007e14 <UART_SetConfig+0x390>
 8007e08:	231b      	movs	r3, #27
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	189b      	adds	r3, r3, r2
 8007e0e:	19db      	adds	r3, r3, r7
 8007e10:	2210      	movs	r2, #16
 8007e12:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4ac1      	ldr	r2, [pc, #772]	; (8008120 <UART_SetConfig+0x69c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d005      	beq.n	8007e2a <UART_SetConfig+0x3a6>
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4ac0      	ldr	r2, [pc, #768]	; (8008124 <UART_SetConfig+0x6a0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d000      	beq.n	8007e2a <UART_SetConfig+0x3a6>
 8007e28:	e093      	b.n	8007f52 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e2a:	231b      	movs	r3, #27
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	189b      	adds	r3, r3, r2
 8007e30:	19db      	adds	r3, r3, r7
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d015      	beq.n	8007e64 <UART_SetConfig+0x3e0>
 8007e38:	dc18      	bgt.n	8007e6c <UART_SetConfig+0x3e8>
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d00d      	beq.n	8007e5a <UART_SetConfig+0x3d6>
 8007e3e:	dc15      	bgt.n	8007e6c <UART_SetConfig+0x3e8>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <UART_SetConfig+0x3c6>
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d005      	beq.n	8007e54 <UART_SetConfig+0x3d0>
 8007e48:	e010      	b.n	8007e6c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e4a:	f7fe ff47 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8007e4e:	0003      	movs	r3, r0
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e52:	e014      	b.n	8007e7e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e54:	4bb4      	ldr	r3, [pc, #720]	; (8008128 <UART_SetConfig+0x6a4>)
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e58:	e011      	b.n	8007e7e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e5a:	f7fe feb3 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e62:	e00c      	b.n	8007e7e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e64:	2380      	movs	r3, #128	; 0x80
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6a:	e008      	b.n	8007e7e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007e70:	231a      	movs	r3, #26
 8007e72:	2220      	movs	r2, #32
 8007e74:	189b      	adds	r3, r3, r2
 8007e76:	19db      	adds	r3, r3, r7
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
        break;
 8007e7c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d100      	bne.n	8007e86 <UART_SetConfig+0x402>
 8007e84:	e135      	b.n	80080f2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e8a:	4ba8      	ldr	r3, [pc, #672]	; (800812c <UART_SetConfig+0x6a8>)
 8007e8c:	0052      	lsls	r2, r2, #1
 8007e8e:	5ad3      	ldrh	r3, [r2, r3]
 8007e90:	0019      	movs	r1, r3
 8007e92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e94:	f7fa f8e0 	bl	8002058 <__udivsi3>
 8007e98:	0003      	movs	r3, r0
 8007e9a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	0013      	movs	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d305      	bcc.n	8007eb8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d906      	bls.n	8007ec6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007eb8:	231a      	movs	r3, #26
 8007eba:	2220      	movs	r2, #32
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	19db      	adds	r3, r3, r7
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e044      	b.n	8007f50 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed2:	4b96      	ldr	r3, [pc, #600]	; (800812c <UART_SetConfig+0x6a8>)
 8007ed4:	0052      	lsls	r2, r2, #1
 8007ed6:	5ad3      	ldrh	r3, [r2, r3]
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	69b8      	ldr	r0, [r7, #24]
 8007ee4:	69f9      	ldr	r1, [r7, #28]
 8007ee6:	f7fa fa2d 	bl	8002344 <__aeabi_uldivmod>
 8007eea:	0002      	movs	r2, r0
 8007eec:	000b      	movs	r3, r1
 8007eee:	0e11      	lsrs	r1, r2, #24
 8007ef0:	021d      	lsls	r5, r3, #8
 8007ef2:	430d      	orrs	r5, r1
 8007ef4:	0214      	lsls	r4, r2, #8
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	085b      	lsrs	r3, r3, #1
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68b8      	ldr	r0, [r7, #8]
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	1900      	adds	r0, r0, r4
 8007f08:	4169      	adcs	r1, r5
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	2300      	movs	r3, #0
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f7fa fa14 	bl	8002344 <__aeabi_uldivmod>
 8007f1c:	0002      	movs	r2, r0
 8007f1e:	000b      	movs	r3, r1
 8007f20:	0013      	movs	r3, r2
 8007f22:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f26:	23c0      	movs	r3, #192	; 0xc0
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d309      	bcc.n	8007f42 <UART_SetConfig+0x4be>
 8007f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	035b      	lsls	r3, r3, #13
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d204      	bcs.n	8007f42 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e006      	b.n	8007f50 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007f42:	231a      	movs	r3, #26
 8007f44:	2220      	movs	r2, #32
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007f4e:	e0d0      	b.n	80080f2 <UART_SetConfig+0x66e>
 8007f50:	e0cf      	b.n	80080f2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	2380      	movs	r3, #128	; 0x80
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d000      	beq.n	8007f60 <UART_SetConfig+0x4dc>
 8007f5e:	e070      	b.n	8008042 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007f60:	231b      	movs	r3, #27
 8007f62:	2220      	movs	r2, #32
 8007f64:	189b      	adds	r3, r3, r2
 8007f66:	19db      	adds	r3, r3, r7
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d015      	beq.n	8007f9a <UART_SetConfig+0x516>
 8007f6e:	dc18      	bgt.n	8007fa2 <UART_SetConfig+0x51e>
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d00d      	beq.n	8007f90 <UART_SetConfig+0x50c>
 8007f74:	dc15      	bgt.n	8007fa2 <UART_SetConfig+0x51e>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <UART_SetConfig+0x4fc>
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d005      	beq.n	8007f8a <UART_SetConfig+0x506>
 8007f7e:	e010      	b.n	8007fa2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f80:	f7fe feac 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8007f84:	0003      	movs	r3, r0
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f88:	e014      	b.n	8007fb4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8a:	4b67      	ldr	r3, [pc, #412]	; (8008128 <UART_SetConfig+0x6a4>)
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8e:	e011      	b.n	8007fb4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f90:	f7fe fe18 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8007f94:	0003      	movs	r3, r0
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f98:	e00c      	b.n	8007fb4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	2380      	movs	r3, #128	; 0x80
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fa0:	e008      	b.n	8007fb4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007fa6:	231a      	movs	r3, #26
 8007fa8:	2220      	movs	r2, #32
 8007faa:	189b      	adds	r3, r3, r2
 8007fac:	19db      	adds	r3, r3, r7
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
        break;
 8007fb2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d100      	bne.n	8007fbc <UART_SetConfig+0x538>
 8007fba:	e09a      	b.n	80080f2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fc0:	4b5a      	ldr	r3, [pc, #360]	; (800812c <UART_SetConfig+0x6a8>)
 8007fc2:	0052      	lsls	r2, r2, #1
 8007fc4:	5ad3      	ldrh	r3, [r2, r3]
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007fca:	f7fa f845 	bl	8002058 <__udivsi3>
 8007fce:	0003      	movs	r3, r0
 8007fd0:	005a      	lsls	r2, r3, #1
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	085b      	lsrs	r3, r3, #1
 8007fd8:	18d2      	adds	r2, r2, r3
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	0019      	movs	r1, r3
 8007fe0:	0010      	movs	r0, r2
 8007fe2:	f7fa f839 	bl	8002058 <__udivsi3>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d921      	bls.n	8008034 <UART_SetConfig+0x5b0>
 8007ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	025b      	lsls	r3, r3, #9
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d21c      	bcs.n	8008034 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	200e      	movs	r0, #14
 8008000:	2420      	movs	r4, #32
 8008002:	1903      	adds	r3, r0, r4
 8008004:	19db      	adds	r3, r3, r7
 8008006:	210f      	movs	r1, #15
 8008008:	438a      	bics	r2, r1
 800800a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	b29b      	uxth	r3, r3
 8008012:	2207      	movs	r2, #7
 8008014:	4013      	ands	r3, r2
 8008016:	b299      	uxth	r1, r3
 8008018:	1903      	adds	r3, r0, r4
 800801a:	19db      	adds	r3, r3, r7
 800801c:	1902      	adds	r2, r0, r4
 800801e:	19d2      	adds	r2, r2, r7
 8008020:	8812      	ldrh	r2, [r2, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	1902      	adds	r2, r0, r4
 800802c:	19d2      	adds	r2, r2, r7
 800802e:	8812      	ldrh	r2, [r2, #0]
 8008030:	60da      	str	r2, [r3, #12]
 8008032:	e05e      	b.n	80080f2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008034:	231a      	movs	r3, #26
 8008036:	2220      	movs	r2, #32
 8008038:	189b      	adds	r3, r3, r2
 800803a:	19db      	adds	r3, r3, r7
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	e057      	b.n	80080f2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008042:	231b      	movs	r3, #27
 8008044:	2220      	movs	r2, #32
 8008046:	189b      	adds	r3, r3, r2
 8008048:	19db      	adds	r3, r3, r7
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b08      	cmp	r3, #8
 800804e:	d015      	beq.n	800807c <UART_SetConfig+0x5f8>
 8008050:	dc18      	bgt.n	8008084 <UART_SetConfig+0x600>
 8008052:	2b04      	cmp	r3, #4
 8008054:	d00d      	beq.n	8008072 <UART_SetConfig+0x5ee>
 8008056:	dc15      	bgt.n	8008084 <UART_SetConfig+0x600>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <UART_SetConfig+0x5de>
 800805c:	2b02      	cmp	r3, #2
 800805e:	d005      	beq.n	800806c <UART_SetConfig+0x5e8>
 8008060:	e010      	b.n	8008084 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008062:	f7fe fe3b 	bl	8006cdc <HAL_RCC_GetPCLK1Freq>
 8008066:	0003      	movs	r3, r0
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800806a:	e014      	b.n	8008096 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800806c:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <UART_SetConfig+0x6a4>)
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008070:	e011      	b.n	8008096 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008072:	f7fe fda7 	bl	8006bc4 <HAL_RCC_GetSysClockFreq>
 8008076:	0003      	movs	r3, r0
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800807a:	e00c      	b.n	8008096 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008082:	e008      	b.n	8008096 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008088:	231a      	movs	r3, #26
 800808a:	2220      	movs	r2, #32
 800808c:	189b      	adds	r3, r3, r2
 800808e:	19db      	adds	r3, r3, r7
 8008090:	2201      	movs	r2, #1
 8008092:	701a      	strb	r2, [r3, #0]
        break;
 8008094:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d02a      	beq.n	80080f2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a0:	4b22      	ldr	r3, [pc, #136]	; (800812c <UART_SetConfig+0x6a8>)
 80080a2:	0052      	lsls	r2, r2, #1
 80080a4:	5ad3      	ldrh	r3, [r2, r3]
 80080a6:	0019      	movs	r1, r3
 80080a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80080aa:	f7f9 ffd5 	bl	8002058 <__udivsi3>
 80080ae:	0003      	movs	r3, r0
 80080b0:	001a      	movs	r2, r3
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	18d2      	adds	r2, r2, r3
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	0019      	movs	r1, r3
 80080c0:	0010      	movs	r0, r2
 80080c2:	f7f9 ffc9 	bl	8002058 <__udivsi3>
 80080c6:	0003      	movs	r3, r0
 80080c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d90a      	bls.n	80080e6 <UART_SetConfig+0x662>
 80080d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d2:	2380      	movs	r3, #128	; 0x80
 80080d4:	025b      	lsls	r3, r3, #9
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d205      	bcs.n	80080e6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60da      	str	r2, [r3, #12]
 80080e4:	e005      	b.n	80080f2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80080e6:	231a      	movs	r3, #26
 80080e8:	2220      	movs	r2, #32
 80080ea:	189b      	adds	r3, r3, r2
 80080ec:	19db      	adds	r3, r3, r7
 80080ee:	2201      	movs	r2, #1
 80080f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	226a      	movs	r2, #106	; 0x6a
 80080f6:	2101      	movs	r1, #1
 80080f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	2268      	movs	r2, #104	; 0x68
 80080fe:	2101      	movs	r1, #1
 8008100:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	2200      	movs	r2, #0
 8008106:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800810e:	231a      	movs	r3, #26
 8008110:	2220      	movs	r2, #32
 8008112:	189b      	adds	r3, r3, r2
 8008114:	19db      	adds	r3, r3, r7
 8008116:	781b      	ldrb	r3, [r3, #0]
}
 8008118:	0018      	movs	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	b010      	add	sp, #64	; 0x40
 800811e:	bdb0      	pop	{r4, r5, r7, pc}
 8008120:	40008000 	.word	0x40008000
 8008124:	40008400 	.word	0x40008400
 8008128:	00f42400 	.word	0x00f42400
 800812c:	08018b24 	.word	0x08018b24

08008130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	2201      	movs	r2, #1
 800813e:	4013      	ands	r3, r2
 8008140:	d00b      	beq.n	800815a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a4a      	ldr	r2, [pc, #296]	; (8008274 <UART_AdvFeatureConfig+0x144>)
 800814a:	4013      	ands	r3, r2
 800814c:	0019      	movs	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	2202      	movs	r2, #2
 8008160:	4013      	ands	r3, r2
 8008162:	d00b      	beq.n	800817c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4a43      	ldr	r2, [pc, #268]	; (8008278 <UART_AdvFeatureConfig+0x148>)
 800816c:	4013      	ands	r3, r2
 800816e:	0019      	movs	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	2204      	movs	r2, #4
 8008182:	4013      	ands	r3, r2
 8008184:	d00b      	beq.n	800819e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a3b      	ldr	r2, [pc, #236]	; (800827c <UART_AdvFeatureConfig+0x14c>)
 800818e:	4013      	ands	r3, r2
 8008190:	0019      	movs	r1, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a2:	2208      	movs	r2, #8
 80081a4:	4013      	ands	r3, r2
 80081a6:	d00b      	beq.n	80081c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4a34      	ldr	r2, [pc, #208]	; (8008280 <UART_AdvFeatureConfig+0x150>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	0019      	movs	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	2210      	movs	r2, #16
 80081c6:	4013      	ands	r3, r2
 80081c8:	d00b      	beq.n	80081e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	4a2c      	ldr	r2, [pc, #176]	; (8008284 <UART_AdvFeatureConfig+0x154>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	0019      	movs	r1, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	2220      	movs	r2, #32
 80081e8:	4013      	ands	r3, r2
 80081ea:	d00b      	beq.n	8008204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	4a25      	ldr	r2, [pc, #148]	; (8008288 <UART_AdvFeatureConfig+0x158>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	0019      	movs	r1, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	4013      	ands	r3, r2
 800820c:	d01d      	beq.n	800824a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	4a1d      	ldr	r2, [pc, #116]	; (800828c <UART_AdvFeatureConfig+0x15c>)
 8008216:	4013      	ands	r3, r2
 8008218:	0019      	movs	r1, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800822a:	2380      	movs	r3, #128	; 0x80
 800822c:	035b      	lsls	r3, r3, #13
 800822e:	429a      	cmp	r2, r3
 8008230:	d10b      	bne.n	800824a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a15      	ldr	r2, [pc, #84]	; (8008290 <UART_AdvFeatureConfig+0x160>)
 800823a:	4013      	ands	r3, r2
 800823c:	0019      	movs	r1, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	2280      	movs	r2, #128	; 0x80
 8008250:	4013      	ands	r3, r2
 8008252:	d00b      	beq.n	800826c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4a0e      	ldr	r2, [pc, #56]	; (8008294 <UART_AdvFeatureConfig+0x164>)
 800825c:	4013      	ands	r3, r2
 800825e:	0019      	movs	r1, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	605a      	str	r2, [r3, #4]
  }
}
 800826c:	46c0      	nop			; (mov r8, r8)
 800826e:	46bd      	mov	sp, r7
 8008270:	b002      	add	sp, #8
 8008272:	bd80      	pop	{r7, pc}
 8008274:	fffdffff 	.word	0xfffdffff
 8008278:	fffeffff 	.word	0xfffeffff
 800827c:	fffbffff 	.word	0xfffbffff
 8008280:	ffff7fff 	.word	0xffff7fff
 8008284:	ffffefff 	.word	0xffffefff
 8008288:	ffffdfff 	.word	0xffffdfff
 800828c:	ffefffff 	.word	0xffefffff
 8008290:	ff9fffff 	.word	0xff9fffff
 8008294:	fff7ffff 	.word	0xfff7ffff

08008298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2290      	movs	r2, #144	; 0x90
 80082a4:	2100      	movs	r1, #0
 80082a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082a8:	f7fb fa04 	bl	80036b4 <HAL_GetTick>
 80082ac:	0003      	movs	r3, r0
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2208      	movs	r2, #8
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d10c      	bne.n	80082d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	0391      	lsls	r1, r2, #14
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <UART_CheckIdleState+0x98>)
 80082c8:	9200      	str	r2, [sp, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f000 f832 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 80082d0:	1e03      	subs	r3, r0, #0
 80082d2:	d001      	beq.n	80082d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e026      	b.n	8008326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2204      	movs	r2, #4
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d10c      	bne.n	8008300 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2280      	movs	r2, #128	; 0x80
 80082ea:	03d1      	lsls	r1, r2, #15
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <UART_CheckIdleState+0x98>)
 80082f0:	9200      	str	r2, [sp, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f000 f81e 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 80082f8:	1e03      	subs	r3, r0, #0
 80082fa:	d001      	beq.n	8008300 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e012      	b.n	8008326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2288      	movs	r2, #136	; 0x88
 8008304:	2120      	movs	r1, #32
 8008306:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	228c      	movs	r2, #140	; 0x8c
 800830c:	2120      	movs	r1, #32
 800830e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2284      	movs	r2, #132	; 0x84
 8008320:	2100      	movs	r1, #0
 8008322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	0018      	movs	r0, r3
 8008328:	46bd      	mov	sp, r7
 800832a:	b004      	add	sp, #16
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	01ffffff 	.word	0x01ffffff

08008334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b094      	sub	sp, #80	; 0x50
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	1dfb      	adds	r3, r7, #7
 8008342:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008344:	e0a7      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008348:	3301      	adds	r3, #1
 800834a:	d100      	bne.n	800834e <UART_WaitOnFlagUntilTimeout+0x1a>
 800834c:	e0a3      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834e:	f7fb f9b1 	bl	80036b4 <HAL_GetTick>
 8008352:	0002      	movs	r2, r0
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <UART_WaitOnFlagUntilTimeout+0x30>
 800835e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008360:	2b00      	cmp	r3, #0
 8008362:	d13f      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008364:	f3ef 8310 	mrs	r3, PRIMASK
 8008368:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800836c:	647b      	str	r3, [r7, #68]	; 0x44
 800836e:	2301      	movs	r3, #1
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	f383 8810 	msr	PRIMASK, r3
}
 8008378:	46c0      	nop			; (mov r8, r8)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	494e      	ldr	r1, [pc, #312]	; (80084c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008386:	400a      	ands	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800838c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	f383 8810 	msr	PRIMASK, r3
}
 8008394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008396:	f3ef 8310 	mrs	r3, PRIMASK
 800839a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	643b      	str	r3, [r7, #64]	; 0x40
 80083a0:	2301      	movs	r3, #1
 80083a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	f383 8810 	msr	PRIMASK, r3
}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2101      	movs	r1, #1
 80083b8:	438a      	bics	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2288      	movs	r2, #136	; 0x88
 80083cc:	2120      	movs	r1, #32
 80083ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	228c      	movs	r2, #140	; 0x8c
 80083d4:	2120      	movs	r1, #32
 80083d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2284      	movs	r2, #132	; 0x84
 80083dc:	2100      	movs	r1, #0
 80083de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e069      	b.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2204      	movs	r2, #4
 80083ec:	4013      	ands	r3, r2
 80083ee:	d052      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	401a      	ands	r2, r3
 80083fc:	2380      	movs	r3, #128	; 0x80
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	429a      	cmp	r2, r3
 8008402:	d148      	bne.n	8008496 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	0112      	lsls	r2, r2, #4
 800840c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840e:	f3ef 8310 	mrs	r3, PRIMASK
 8008412:	613b      	str	r3, [r7, #16]
  return(result);
 8008414:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008418:	2301      	movs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f383 8810 	msr	PRIMASK, r3
}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4924      	ldr	r1, [pc, #144]	; (80084c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008430:	400a      	ands	r2, r1
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f383 8810 	msr	PRIMASK, r3
}
 800843e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008440:	f3ef 8310 	mrs	r3, PRIMASK
 8008444:	61fb      	str	r3, [r7, #28]
  return(result);
 8008446:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008448:	64bb      	str	r3, [r7, #72]	; 0x48
 800844a:	2301      	movs	r3, #1
 800844c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	f383 8810 	msr	PRIMASK, r3
}
 8008454:	46c0      	nop			; (mov r8, r8)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2101      	movs	r1, #1
 8008462:	438a      	bics	r2, r1
 8008464:	609a      	str	r2, [r3, #8]
 8008466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	f383 8810 	msr	PRIMASK, r3
}
 8008470:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2288      	movs	r2, #136	; 0x88
 8008476:	2120      	movs	r1, #32
 8008478:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	228c      	movs	r2, #140	; 0x8c
 800847e:	2120      	movs	r1, #32
 8008480:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2290      	movs	r2, #144	; 0x90
 8008486:	2120      	movs	r1, #32
 8008488:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2284      	movs	r2, #132	; 0x84
 800848e:	2100      	movs	r1, #0
 8008490:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e010      	b.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	425a      	negs	r2, r3
 80084a6:	4153      	adcs	r3, r2
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	001a      	movs	r2, r3
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d100      	bne.n	80084b6 <UART_WaitOnFlagUntilTimeout+0x182>
 80084b4:	e747      	b.n	8008346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	0018      	movs	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b014      	add	sp, #80	; 0x50
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	fffffe5f 	.word	0xfffffe5f

080084c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b098      	sub	sp, #96	; 0x60
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	1dbb      	adds	r3, r7, #6
 80084d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	1dba      	adds	r2, r7, #6
 80084dc:	215c      	movs	r1, #92	; 0x5c
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1dba      	adds	r2, r7, #6
 80084e6:	215e      	movs	r1, #94	; 0x5e
 80084e8:	8812      	ldrh	r2, [r2, #0]
 80084ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	2380      	movs	r3, #128	; 0x80
 80084f8:	015b      	lsls	r3, r3, #5
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d10d      	bne.n	800851a <UART_Start_Receive_IT+0x56>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <UART_Start_Receive_IT+0x4c>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2260      	movs	r2, #96	; 0x60
 800850a:	497b      	ldr	r1, [pc, #492]	; (80086f8 <UART_Start_Receive_IT+0x234>)
 800850c:	5299      	strh	r1, [r3, r2]
 800850e:	e02e      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2260      	movs	r2, #96	; 0x60
 8008514:	21ff      	movs	r1, #255	; 0xff
 8008516:	5299      	strh	r1, [r3, r2]
 8008518:	e029      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <UART_Start_Receive_IT+0x7a>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <UART_Start_Receive_IT+0x70>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2260      	movs	r2, #96	; 0x60
 800852e:	21ff      	movs	r1, #255	; 0xff
 8008530:	5299      	strh	r1, [r3, r2]
 8008532:	e01c      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2260      	movs	r2, #96	; 0x60
 8008538:	217f      	movs	r1, #127	; 0x7f
 800853a:	5299      	strh	r1, [r3, r2]
 800853c:	e017      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	2380      	movs	r3, #128	; 0x80
 8008544:	055b      	lsls	r3, r3, #21
 8008546:	429a      	cmp	r2, r3
 8008548:	d10d      	bne.n	8008566 <UART_Start_Receive_IT+0xa2>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <UART_Start_Receive_IT+0x98>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2260      	movs	r2, #96	; 0x60
 8008556:	217f      	movs	r1, #127	; 0x7f
 8008558:	5299      	strh	r1, [r3, r2]
 800855a:	e008      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2260      	movs	r2, #96	; 0x60
 8008560:	213f      	movs	r1, #63	; 0x3f
 8008562:	5299      	strh	r1, [r3, r2]
 8008564:	e003      	b.n	800856e <UART_Start_Receive_IT+0xaa>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2260      	movs	r2, #96	; 0x60
 800856a:	2100      	movs	r1, #0
 800856c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2290      	movs	r2, #144	; 0x90
 8008572:	2100      	movs	r1, #0
 8008574:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	228c      	movs	r2, #140	; 0x8c
 800857a:	2122      	movs	r1, #34	; 0x22
 800857c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857e:	f3ef 8310 	mrs	r3, PRIMASK
 8008582:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008584:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008588:	2301      	movs	r3, #1
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2101      	movs	r1, #1
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	059b      	lsls	r3, r3, #22
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d150      	bne.n	800865e <UART_Start_Receive_IT+0x19a>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2268      	movs	r2, #104	; 0x68
 80085c0:	5a9b      	ldrh	r3, [r3, r2]
 80085c2:	1dba      	adds	r2, r7, #6
 80085c4:	8812      	ldrh	r2, [r2, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d349      	bcc.n	800865e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	2380      	movs	r3, #128	; 0x80
 80085d0:	015b      	lsls	r3, r3, #5
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d107      	bne.n	80085e6 <UART_Start_Receive_IT+0x122>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d103      	bne.n	80085e6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4a46      	ldr	r2, [pc, #280]	; (80086fc <UART_Start_Receive_IT+0x238>)
 80085e2:	675a      	str	r2, [r3, #116]	; 0x74
 80085e4:	e002      	b.n	80085ec <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a45      	ldr	r2, [pc, #276]	; (8008700 <UART_Start_Receive_IT+0x23c>)
 80085ea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d019      	beq.n	8008628 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f4:	f3ef 8310 	mrs	r3, PRIMASK
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80085fe:	2301      	movs	r3, #1
 8008600:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	f383 8810 	msr	PRIMASK, r3
}
 8008608:	46c0      	nop			; (mov r8, r8)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2180      	movs	r1, #128	; 0x80
 8008616:	0049      	lsls	r1, r1, #1
 8008618:	430a      	orrs	r2, r1
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008622:	f383 8810 	msr	PRIMASK, r3
}
 8008626:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008628:	f3ef 8310 	mrs	r3, PRIMASK
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008630:	657b      	str	r3, [r7, #84]	; 0x54
 8008632:	2301      	movs	r3, #1
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	f383 8810 	msr	PRIMASK, r3
}
 800863c:	46c0      	nop			; (mov r8, r8)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	0549      	lsls	r1, r1, #21
 800864c:	430a      	orrs	r2, r1
 800864e:	609a      	str	r2, [r3, #8]
 8008650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	e047      	b.n	80086ee <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	2380      	movs	r3, #128	; 0x80
 8008664:	015b      	lsls	r3, r3, #5
 8008666:	429a      	cmp	r2, r3
 8008668:	d107      	bne.n	800867a <UART_Start_Receive_IT+0x1b6>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4a23      	ldr	r2, [pc, #140]	; (8008704 <UART_Start_Receive_IT+0x240>)
 8008676:	675a      	str	r2, [r3, #116]	; 0x74
 8008678:	e002      	b.n	8008680 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a22      	ldr	r2, [pc, #136]	; (8008708 <UART_Start_Receive_IT+0x244>)
 800867e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d019      	beq.n	80086bc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008688:	f3ef 8310 	mrs	r3, PRIMASK
 800868c:	61fb      	str	r3, [r7, #28]
  return(result);
 800868e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008692:	2301      	movs	r3, #1
 8008694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	46c0      	nop			; (mov r8, r8)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2190      	movs	r1, #144	; 0x90
 80086aa:	0049      	lsls	r1, r1, #1
 80086ac:	430a      	orrs	r2, r1
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	f383 8810 	msr	PRIMASK, r3
}
 80086ba:	e018      	b.n	80086ee <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086bc:	f3ef 8310 	mrs	r3, PRIMASK
 80086c0:	613b      	str	r3, [r7, #16]
  return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086c4:	653b      	str	r3, [r7, #80]	; 0x50
 80086c6:	2301      	movs	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2120      	movs	r1, #32
 80086de:	430a      	orrs	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	0018      	movs	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b018      	add	sp, #96	; 0x60
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	000001ff 	.word	0x000001ff
 80086fc:	08008f69 	.word	0x08008f69
 8008700:	08008c7d 	.word	0x08008c7d
 8008704:	08008b09 	.word	0x08008b09
 8008708:	08008995 	.word	0x08008995

0800870c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008714:	f3ef 8310 	mrs	r3, PRIMASK
 8008718:	60bb      	str	r3, [r7, #8]
  return(result);
 800871a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
 800871e:	2301      	movs	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f383 8810 	msr	PRIMASK, r3
}
 8008728:	46c0      	nop			; (mov r8, r8)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	21c0      	movs	r1, #192	; 0xc0
 8008736:	438a      	bics	r2, r1
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f383 8810 	msr	PRIMASK, r3
}
 8008744:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008746:	f3ef 8310 	mrs	r3, PRIMASK
 800874a:	617b      	str	r3, [r7, #20]
  return(result);
 800874c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800874e:	623b      	str	r3, [r7, #32]
 8008750:	2301      	movs	r3, #1
 8008752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	f383 8810 	msr	PRIMASK, r3
}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4908      	ldr	r1, [pc, #32]	; (8008788 <UART_EndTxTransfer+0x7c>)
 8008768:	400a      	ands	r2, r1
 800876a:	609a      	str	r2, [r3, #8]
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f383 8810 	msr	PRIMASK, r3
}
 8008776:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2288      	movs	r2, #136	; 0x88
 800877c:	2120      	movs	r1, #32
 800877e:	5099      	str	r1, [r3, r2]
}
 8008780:	46c0      	nop			; (mov r8, r8)
 8008782:	46bd      	mov	sp, r7
 8008784:	b00a      	add	sp, #40	; 0x28
 8008786:	bd80      	pop	{r7, pc}
 8008788:	ff7fffff 	.word	0xff7fffff

0800878c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	; 0x38
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008794:	f3ef 8310 	mrs	r3, PRIMASK
 8008798:	617b      	str	r3, [r7, #20]
  return(result);
 800879a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
 800879e:	2301      	movs	r3, #1
 80087a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	46c0      	nop			; (mov r8, r8)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4926      	ldr	r1, [pc, #152]	; (8008850 <UART_EndRxTransfer+0xc4>)
 80087b6:	400a      	ands	r2, r1
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	f383 8810 	msr	PRIMASK, r3
}
 80087c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ca:	623b      	str	r3, [r7, #32]
  return(result);
 80087cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ce:	633b      	str	r3, [r7, #48]	; 0x30
 80087d0:	2301      	movs	r3, #1
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	f383 8810 	msr	PRIMASK, r3
}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	491b      	ldr	r1, [pc, #108]	; (8008854 <UART_EndRxTransfer+0xc8>)
 80087e8:	400a      	ands	r2, r1
 80087ea:	609a      	str	r2, [r3, #8]
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	f383 8810 	msr	PRIMASK, r3
}
 80087f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d118      	bne.n	8008832 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008800:	f3ef 8310 	mrs	r3, PRIMASK
 8008804:	60bb      	str	r3, [r7, #8]
  return(result);
 8008806:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800880a:	2301      	movs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f383 8810 	msr	PRIMASK, r3
}
 8008814:	46c0      	nop			; (mov r8, r8)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2110      	movs	r1, #16
 8008822:	438a      	bics	r2, r1
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f383 8810 	msr	PRIMASK, r3
}
 8008830:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	228c      	movs	r2, #140	; 0x8c
 8008836:	2120      	movs	r1, #32
 8008838:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008846:	46c0      	nop			; (mov r8, r8)
 8008848:	46bd      	mov	sp, r7
 800884a:	b00e      	add	sp, #56	; 0x38
 800884c:	bd80      	pop	{r7, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	fffffedf 	.word	0xfffffedf
 8008854:	effffffe 	.word	0xeffffffe

08008858 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08c      	sub	sp, #48	; 0x30
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2220      	movs	r2, #32
 800886e:	4013      	ands	r3, r2
 8008870:	d135      	bne.n	80088de <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	2256      	movs	r2, #86	; 0x56
 8008876:	2100      	movs	r1, #0
 8008878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800887a:	f3ef 8310 	mrs	r3, PRIMASK
 800887e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008880:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
 8008884:	2301      	movs	r3, #1
 8008886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f383 8810 	msr	PRIMASK, r3
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2180      	movs	r1, #128	; 0x80
 800889c:	438a      	bics	r2, r1
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f383 8810 	msr	PRIMASK, r3
}
 80088aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ac:	f3ef 8310 	mrs	r3, PRIMASK
 80088b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80088b2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
 80088b6:	2301      	movs	r3, #1
 80088b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f383 8810 	msr	PRIMASK, r3
}
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2140      	movs	r1, #64	; 0x40
 80088ce:	430a      	orrs	r2, r1
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	f383 8810 	msr	PRIMASK, r3
}
 80088dc:	e004      	b.n	80088e8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	0018      	movs	r0, r3
 80088e2:	f00e fed1 	bl	8017688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	46c0      	nop			; (mov r8, r8)
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b00c      	add	sp, #48	; 0x30
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff f8ab 	bl	8007a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	46bd      	mov	sp, r7
 800890a:	b004      	add	sp, #16
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b086      	sub	sp, #24
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2288      	movs	r2, #136	; 0x88
 8008920:	589b      	ldr	r3, [r3, r2]
 8008922:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	228c      	movs	r2, #140	; 0x8c
 8008928:	589b      	ldr	r3, [r3, r2]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2280      	movs	r2, #128	; 0x80
 8008934:	4013      	ands	r3, r2
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	d10a      	bne.n	8008950 <UART_DMAError+0x42>
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b21      	cmp	r3, #33	; 0x21
 800893e:	d107      	bne.n	8008950 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2256      	movs	r2, #86	; 0x56
 8008944:	2100      	movs	r1, #0
 8008946:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	0018      	movs	r0, r3
 800894c:	f7ff fede 	bl	800870c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2240      	movs	r2, #64	; 0x40
 8008958:	4013      	ands	r3, r2
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d10a      	bne.n	8008974 <UART_DMAError+0x66>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2b22      	cmp	r3, #34	; 0x22
 8008962:	d107      	bne.n	8008974 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	225e      	movs	r2, #94	; 0x5e
 8008968:	2100      	movs	r1, #0
 800896a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff ff0c 	bl	800878c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2290      	movs	r2, #144	; 0x90
 8008978:	589b      	ldr	r3, [r3, r2]
 800897a:	2210      	movs	r2, #16
 800897c:	431a      	orrs	r2, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2190      	movs	r1, #144	; 0x90
 8008982:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	0018      	movs	r0, r3
 8008988:	f00e fec8 	bl	801771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898c:	46c0      	nop			; (mov r8, r8)
 800898e:	46bd      	mov	sp, r7
 8008990:	b006      	add	sp, #24
 8008992:	bd80      	pop	{r7, pc}

08008994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b090      	sub	sp, #64	; 0x40
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800899c:	203e      	movs	r0, #62	; 0x3e
 800899e:	183b      	adds	r3, r7, r0
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	2160      	movs	r1, #96	; 0x60
 80089a4:	5a52      	ldrh	r2, [r2, r1]
 80089a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	228c      	movs	r2, #140	; 0x8c
 80089ac:	589b      	ldr	r3, [r3, r2]
 80089ae:	2b22      	cmp	r3, #34	; 0x22
 80089b0:	d000      	beq.n	80089b4 <UART_RxISR_8BIT+0x20>
 80089b2:	e09a      	b.n	8008aea <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ba:	213c      	movs	r1, #60	; 0x3c
 80089bc:	187b      	adds	r3, r7, r1
 80089be:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089c0:	187b      	adds	r3, r7, r1
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	183b      	adds	r3, r7, r0
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	b2d9      	uxtb	r1, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d0:	400a      	ands	r2, r1
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	225e      	movs	r2, #94	; 0x5e
 80089e4:	5a9b      	ldrh	r3, [r3, r2]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b299      	uxth	r1, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	225e      	movs	r2, #94	; 0x5e
 80089f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	225e      	movs	r2, #94	; 0x5e
 80089f6:	5a9b      	ldrh	r3, [r3, r2]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d000      	beq.n	8008a00 <UART_RxISR_8BIT+0x6c>
 80089fe:	e07c      	b.n	8008afa <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a00:	f3ef 8310 	mrs	r3, PRIMASK
 8008a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a06:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f383 8810 	msr	PRIMASK, r3
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4938      	ldr	r1, [pc, #224]	; (8008b04 <UART_RxISR_8BIT+0x170>)
 8008a22:	400a      	ands	r2, r1
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	f383 8810 	msr	PRIMASK, r3
}
 8008a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a32:	f3ef 8310 	mrs	r3, PRIMASK
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	f383 8810 	msr	PRIMASK, r3
}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2101      	movs	r1, #1
 8008a54:	438a      	bics	r2, r1
 8008a56:	609a      	str	r2, [r3, #8]
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	f383 8810 	msr	PRIMASK, r3
}
 8008a62:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	228c      	movs	r2, #140	; 0x8c
 8008a68:	2120      	movs	r1, #32
 8008a6a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d12f      	bne.n	8008ae0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a86:	f3ef 8310 	mrs	r3, PRIMASK
 8008a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a8c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a90:	2301      	movs	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f383 8810 	msr	PRIMASK, r3
}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2110      	movs	r1, #16
 8008aa8:	438a      	bics	r2, r1
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f383 8810 	msr	PRIMASK, r3
}
 8008ab6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	2210      	movs	r2, #16
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d103      	bne.n	8008ace <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2210      	movs	r2, #16
 8008acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	225c      	movs	r2, #92	; 0x5c
 8008ad2:	5a9a      	ldrh	r2, [r3, r2]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7fe ffc7 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ade:	e00c      	b.n	8008afa <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f00e fde4 	bl	80176b0 <HAL_UART_RxCpltCallback>
}
 8008ae8:	e007      	b.n	8008afa <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699a      	ldr	r2, [r3, #24]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2108      	movs	r1, #8
 8008af6:	430a      	orrs	r2, r1
 8008af8:	619a      	str	r2, [r3, #24]
}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b010      	add	sp, #64	; 0x40
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	fffffedf 	.word	0xfffffedf

08008b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b090      	sub	sp, #64	; 0x40
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b10:	203e      	movs	r0, #62	; 0x3e
 8008b12:	183b      	adds	r3, r7, r0
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	2160      	movs	r1, #96	; 0x60
 8008b18:	5a52      	ldrh	r2, [r2, r1]
 8008b1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	228c      	movs	r2, #140	; 0x8c
 8008b20:	589b      	ldr	r3, [r3, r2]
 8008b22:	2b22      	cmp	r3, #34	; 0x22
 8008b24:	d000      	beq.n	8008b28 <UART_RxISR_16BIT+0x20>
 8008b26:	e09a      	b.n	8008c5e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b2e:	213c      	movs	r1, #60	; 0x3c
 8008b30:	187b      	adds	r3, r7, r1
 8008b32:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b38:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b3a:	187b      	adds	r3, r7, r1
 8008b3c:	183a      	adds	r2, r7, r0
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	8812      	ldrh	r2, [r2, #0]
 8008b42:	4013      	ands	r3, r2
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	225e      	movs	r2, #94	; 0x5e
 8008b58:	5a9b      	ldrh	r3, [r3, r2]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b299      	uxth	r1, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	225e      	movs	r2, #94	; 0x5e
 8008b64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	225e      	movs	r2, #94	; 0x5e
 8008b6a:	5a9b      	ldrh	r3, [r3, r2]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d000      	beq.n	8008b74 <UART_RxISR_16BIT+0x6c>
 8008b72:	e07c      	b.n	8008c6e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b74:	f3ef 8310 	mrs	r3, PRIMASK
 8008b78:	617b      	str	r3, [r7, #20]
  return(result);
 8008b7a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	2301      	movs	r3, #1
 8008b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	f383 8810 	msr	PRIMASK, r3
}
 8008b88:	46c0      	nop			; (mov r8, r8)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4938      	ldr	r1, [pc, #224]	; (8008c78 <UART_RxISR_16BIT+0x170>)
 8008b96:	400a      	ands	r2, r1
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f383 8810 	msr	PRIMASK, r3
}
 8008ba4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8008baa:	623b      	str	r3, [r7, #32]
  return(result);
 8008bac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	633b      	str	r3, [r7, #48]	; 0x30
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	f383 8810 	msr	PRIMASK, r3
}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	438a      	bics	r2, r1
 8008bca:	609a      	str	r2, [r3, #8]
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	f383 8810 	msr	PRIMASK, r3
}
 8008bd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	228c      	movs	r2, #140	; 0x8c
 8008bdc:	2120      	movs	r1, #32
 8008bde:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d12f      	bne.n	8008c54 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c00:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c04:	2301      	movs	r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f383 8810 	msr	PRIMASK, r3
}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2110      	movs	r1, #16
 8008c1c:	438a      	bics	r2, r1
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f383 8810 	msr	PRIMASK, r3
}
 8008c2a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	2210      	movs	r2, #16
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d103      	bne.n	8008c42 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2210      	movs	r2, #16
 8008c40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	225c      	movs	r2, #92	; 0x5c
 8008c46:	5a9a      	ldrh	r2, [r3, r2]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7fe ff0d 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c52:	e00c      	b.n	8008c6e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	0018      	movs	r0, r3
 8008c58:	f00e fd2a 	bl	80176b0 <HAL_UART_RxCpltCallback>
}
 8008c5c:	e007      	b.n	8008c6e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699a      	ldr	r2, [r3, #24]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2108      	movs	r1, #8
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	619a      	str	r2, [r3, #24]
}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b010      	add	sp, #64	; 0x40
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	fffffedf 	.word	0xfffffedf

08008c7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b09c      	sub	sp, #112	; 0x70
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c84:	236a      	movs	r3, #106	; 0x6a
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	2160      	movs	r1, #96	; 0x60
 8008c8c:	5a52      	ldrh	r2, [r2, r1]
 8008c8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	228c      	movs	r2, #140	; 0x8c
 8008cac:	589b      	ldr	r3, [r3, r2]
 8008cae:	2b22      	cmp	r3, #34	; 0x22
 8008cb0:	d000      	beq.n	8008cb4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008cb2:	e144      	b.n	8008f3e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cb4:	235e      	movs	r3, #94	; 0x5e
 8008cb6:	18fb      	adds	r3, r7, r3
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	2168      	movs	r1, #104	; 0x68
 8008cbc:	5a52      	ldrh	r2, [r2, r1]
 8008cbe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cc0:	e0eb      	b.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc8:	215c      	movs	r1, #92	; 0x5c
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	236a      	movs	r3, #106	; 0x6a
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b2d9      	uxtb	r1, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce0:	400a      	ands	r2, r1
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	225e      	movs	r2, #94	; 0x5e
 8008cf4:	5a9b      	ldrh	r3, [r3, r2]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	225e      	movs	r2, #94	; 0x5e
 8008d00:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0c:	2207      	movs	r2, #7
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d049      	beq.n	8008da6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	2201      	movs	r2, #1
 8008d16:	4013      	ands	r3, r2
 8008d18:	d010      	beq.n	8008d3c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008d1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d1c:	2380      	movs	r3, #128	; 0x80
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4013      	ands	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2290      	movs	r2, #144	; 0x90
 8008d30:	589b      	ldr	r3, [r3, r2]
 8008d32:	2201      	movs	r2, #1
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2190      	movs	r1, #144	; 0x90
 8008d3a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	2202      	movs	r2, #2
 8008d40:	4013      	ands	r3, r2
 8008d42:	d00f      	beq.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d46:	2201      	movs	r2, #1
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d00b      	beq.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2202      	movs	r2, #2
 8008d52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2290      	movs	r2, #144	; 0x90
 8008d58:	589b      	ldr	r3, [r3, r2]
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2190      	movs	r1, #144	; 0x90
 8008d62:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d66:	2204      	movs	r2, #4
 8008d68:	4013      	ands	r3, r2
 8008d6a:	d00f      	beq.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x110>
 8008d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4013      	ands	r3, r2
 8008d72:	d00b      	beq.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2204      	movs	r2, #4
 8008d7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2290      	movs	r2, #144	; 0x90
 8008d80:	589b      	ldr	r3, [r3, r2]
 8008d82:	2202      	movs	r2, #2
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2190      	movs	r1, #144	; 0x90
 8008d8a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2290      	movs	r2, #144	; 0x90
 8008d90:	589b      	ldr	r3, [r3, r2]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f00e fcbf 	bl	801771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2290      	movs	r2, #144	; 0x90
 8008da2:	2100      	movs	r1, #0
 8008da4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	225e      	movs	r2, #94	; 0x5e
 8008daa:	5a9b      	ldrh	r3, [r3, r2]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d173      	bne.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db2:	f3ef 8310 	mrs	r3, PRIMASK
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dba:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f383 8810 	msr	PRIMASK, r3
}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4961      	ldr	r1, [pc, #388]	; (8008f58 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008dd4:	400a      	ands	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	f383 8810 	msr	PRIMASK, r3
}
 8008de2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de4:	f3ef 8310 	mrs	r3, PRIMASK
 8008de8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dec:	657b      	str	r3, [r7, #84]	; 0x54
 8008dee:	2301      	movs	r3, #1
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	f383 8810 	msr	PRIMASK, r3
}
 8008df8:	46c0      	nop			; (mov r8, r8)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4955      	ldr	r1, [pc, #340]	; (8008f5c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8008e06:	400a      	ands	r2, r1
 8008e08:	609a      	str	r2, [r3, #8]
 8008e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	f383 8810 	msr	PRIMASK, r3
}
 8008e14:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	228c      	movs	r2, #140	; 0x8c
 8008e1a:	2120      	movs	r1, #32
 8008e1c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d12f      	bne.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e38:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3c:	623b      	str	r3, [r7, #32]
  return(result);
 8008e3e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e40:	653b      	str	r3, [r7, #80]	; 0x50
 8008e42:	2301      	movs	r3, #1
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	f383 8810 	msr	PRIMASK, r3
}
 8008e4c:	46c0      	nop			; (mov r8, r8)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2110      	movs	r1, #16
 8008e5a:	438a      	bics	r2, r1
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	f383 8810 	msr	PRIMASK, r3
}
 8008e68:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	2210      	movs	r2, #16
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	d103      	bne.n	8008e80 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2210      	movs	r2, #16
 8008e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	225c      	movs	r2, #92	; 0x5c
 8008e84:	5a9a      	ldrh	r2, [r3, r2]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	0011      	movs	r1, r2
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7fe fdee 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
 8008e90:	e003      	b.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	0018      	movs	r0, r3
 8008e96:	f00e fc0b 	bl	80176b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e9a:	235e      	movs	r3, #94	; 0x5e
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d004      	beq.n	8008eae <UART_RxISR_8BIT_FIFOEN+0x232>
 8008ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	d000      	beq.n	8008eae <UART_RxISR_8BIT_FIFOEN+0x232>
 8008eac:	e709      	b.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008eae:	204e      	movs	r0, #78	; 0x4e
 8008eb0:	183b      	adds	r3, r7, r0
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	215e      	movs	r1, #94	; 0x5e
 8008eb6:	5a52      	ldrh	r2, [r2, r1]
 8008eb8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eba:	0001      	movs	r1, r0
 8008ebc:	187b      	adds	r3, r7, r1
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d044      	beq.n	8008f4e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2268      	movs	r2, #104	; 0x68
 8008ec8:	5a9b      	ldrh	r3, [r3, r2]
 8008eca:	187a      	adds	r2, r7, r1
 8008ecc:	8812      	ldrh	r2, [r2, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d23d      	bcs.n	8008f4e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008edc:	2301      	movs	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f383 8810 	msr	PRIMASK, r3
}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	491b      	ldr	r1, [pc, #108]	; (8008f60 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8008ef4:	400a      	ands	r2, r1
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f383 8810 	msr	PRIMASK, r3
}
 8008f02:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a17      	ldr	r2, [pc, #92]	; (8008f64 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8008f08:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f10:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f12:	647b      	str	r3, [r7, #68]	; 0x44
 8008f14:	2301      	movs	r3, #1
 8008f16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	f383 8810 	msr	PRIMASK, r3
}
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2120      	movs	r1, #32
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f383 8810 	msr	PRIMASK, r3
}
 8008f3a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f3c:	e007      	b.n	8008f4e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2108      	movs	r1, #8
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	46c0      	nop			; (mov r8, r8)
 8008f50:	46bd      	mov	sp, r7
 8008f52:	b01c      	add	sp, #112	; 0x70
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	fffffeff 	.word	0xfffffeff
 8008f5c:	effffffe 	.word	0xeffffffe
 8008f60:	efffffff 	.word	0xefffffff
 8008f64:	08008995 	.word	0x08008995

08008f68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b09e      	sub	sp, #120	; 0x78
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f70:	2372      	movs	r3, #114	; 0x72
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	2160      	movs	r1, #96	; 0x60
 8008f78:	5a52      	ldrh	r2, [r2, r1]
 8008f7a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	228c      	movs	r2, #140	; 0x8c
 8008f98:	589b      	ldr	r3, [r3, r2]
 8008f9a:	2b22      	cmp	r3, #34	; 0x22
 8008f9c:	d000      	beq.n	8008fa0 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008f9e:	e144      	b.n	800922a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fa0:	2366      	movs	r3, #102	; 0x66
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	2168      	movs	r1, #104	; 0x68
 8008fa8:	5a52      	ldrh	r2, [r2, r1]
 8008faa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fac:	e0eb      	b.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb4:	2164      	movs	r1, #100	; 0x64
 8008fb6:	187b      	adds	r3, r7, r1
 8008fb8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbe:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	2272      	movs	r2, #114	; 0x72
 8008fc4:	18ba      	adds	r2, r7, r2
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	8812      	ldrh	r2, [r2, #0]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	1c9a      	adds	r2, r3, #2
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	225e      	movs	r2, #94	; 0x5e
 8008fe0:	5a9b      	ldrh	r3, [r3, r2]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b299      	uxth	r1, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	225e      	movs	r2, #94	; 0x5e
 8008fec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff8:	2207      	movs	r2, #7
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	d049      	beq.n	8009092 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009000:	2201      	movs	r2, #1
 8009002:	4013      	ands	r3, r2
 8009004:	d010      	beq.n	8009028 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8009006:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	4013      	ands	r3, r2
 800900e:	d00b      	beq.n	8009028 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2290      	movs	r2, #144	; 0x90
 800901c:	589b      	ldr	r3, [r3, r2]
 800901e:	2201      	movs	r2, #1
 8009020:	431a      	orrs	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2190      	movs	r1, #144	; 0x90
 8009026:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800902a:	2202      	movs	r2, #2
 800902c:	4013      	ands	r3, r2
 800902e:	d00f      	beq.n	8009050 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8009030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009032:	2201      	movs	r2, #1
 8009034:	4013      	ands	r3, r2
 8009036:	d00b      	beq.n	8009050 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2202      	movs	r2, #2
 800903e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2290      	movs	r2, #144	; 0x90
 8009044:	589b      	ldr	r3, [r3, r2]
 8009046:	2204      	movs	r2, #4
 8009048:	431a      	orrs	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2190      	movs	r1, #144	; 0x90
 800904e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009052:	2204      	movs	r2, #4
 8009054:	4013      	ands	r3, r2
 8009056:	d00f      	beq.n	8009078 <UART_RxISR_16BIT_FIFOEN+0x110>
 8009058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800905a:	2201      	movs	r2, #1
 800905c:	4013      	ands	r3, r2
 800905e:	d00b      	beq.n	8009078 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2204      	movs	r2, #4
 8009066:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2290      	movs	r2, #144	; 0x90
 800906c:	589b      	ldr	r3, [r3, r2]
 800906e:	2202      	movs	r2, #2
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2190      	movs	r1, #144	; 0x90
 8009076:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2290      	movs	r2, #144	; 0x90
 800907c:	589b      	ldr	r3, [r3, r2]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0018      	movs	r0, r3
 8009086:	f00e fb49 	bl	801771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2290      	movs	r2, #144	; 0x90
 800908e:	2100      	movs	r1, #0
 8009090:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	225e      	movs	r2, #94	; 0x5e
 8009096:	5a9b      	ldrh	r3, [r3, r2]
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d173      	bne.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800909e:	f3ef 8310 	mrs	r3, PRIMASK
 80090a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090a8:	2301      	movs	r3, #1
 80090aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ae:	f383 8810 	msr	PRIMASK, r3
}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4961      	ldr	r1, [pc, #388]	; (8009244 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80090c0:	400a      	ands	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	f383 8810 	msr	PRIMASK, r3
}
 80090ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090d0:	f3ef 8310 	mrs	r3, PRIMASK
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80090d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80090da:	2301      	movs	r3, #1
 80090dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e0:	f383 8810 	msr	PRIMASK, r3
}
 80090e4:	46c0      	nop			; (mov r8, r8)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4955      	ldr	r1, [pc, #340]	; (8009248 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80090f2:	400a      	ands	r2, r1
 80090f4:	609a      	str	r2, [r3, #8]
 80090f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fc:	f383 8810 	msr	PRIMASK, r3
}
 8009100:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	228c      	movs	r2, #140	; 0x8c
 8009106:	2120      	movs	r1, #32
 8009108:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d12f      	bne.n	800917e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009124:	f3ef 8310 	mrs	r3, PRIMASK
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912c:	657b      	str	r3, [r7, #84]	; 0x54
 800912e:	2301      	movs	r3, #1
 8009130:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	f383 8810 	msr	PRIMASK, r3
}
 8009138:	46c0      	nop			; (mov r8, r8)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2110      	movs	r1, #16
 8009146:	438a      	bics	r2, r1
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800914c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	f383 8810 	msr	PRIMASK, r3
}
 8009154:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	2210      	movs	r2, #16
 800915e:	4013      	ands	r3, r2
 8009160:	2b10      	cmp	r3, #16
 8009162:	d103      	bne.n	800916c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2210      	movs	r2, #16
 800916a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	225c      	movs	r2, #92	; 0x5c
 8009170:	5a9a      	ldrh	r2, [r3, r2]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	0011      	movs	r1, r2
 8009176:	0018      	movs	r0, r3
 8009178:	f7fe fc78 	bl	8007a6c <HAL_UARTEx_RxEventCallback>
 800917c:	e003      	b.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	0018      	movs	r0, r3
 8009182:	f00e fa95 	bl	80176b0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	2366      	movs	r3, #102	; 0x66
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <UART_RxISR_16BIT_FIFOEN+0x232>
 8009190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009192:	2220      	movs	r2, #32
 8009194:	4013      	ands	r3, r2
 8009196:	d000      	beq.n	800919a <UART_RxISR_16BIT_FIFOEN+0x232>
 8009198:	e709      	b.n	8008fae <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800919a:	2052      	movs	r0, #82	; 0x52
 800919c:	183b      	adds	r3, r7, r0
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	215e      	movs	r1, #94	; 0x5e
 80091a2:	5a52      	ldrh	r2, [r2, r1]
 80091a4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091a6:	0001      	movs	r1, r0
 80091a8:	187b      	adds	r3, r7, r1
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d044      	beq.n	800923a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2268      	movs	r2, #104	; 0x68
 80091b4:	5a9b      	ldrh	r3, [r3, r2]
 80091b6:	187a      	adds	r2, r7, r1
 80091b8:	8812      	ldrh	r2, [r2, #0]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d23d      	bcs.n	800923a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091be:	f3ef 8310 	mrs	r3, PRIMASK
 80091c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c8:	2301      	movs	r3, #1
 80091ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f383 8810 	msr	PRIMASK, r3
}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	491b      	ldr	r1, [pc, #108]	; (800924c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80091e0:	400a      	ands	r2, r1
 80091e2:	609a      	str	r2, [r3, #8]
 80091e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f383 8810 	msr	PRIMASK, r3
}
 80091ee:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a17      	ldr	r2, [pc, #92]	; (8009250 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80091f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f6:	f3ef 8310 	mrs	r3, PRIMASK
 80091fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80091fc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009200:	2301      	movs	r3, #1
 8009202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f383 8810 	msr	PRIMASK, r3
}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2120      	movs	r1, #32
 8009218:	430a      	orrs	r2, r1
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800921e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	f383 8810 	msr	PRIMASK, r3
}
 8009226:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009228:	e007      	b.n	800923a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699a      	ldr	r2, [r3, #24]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2108      	movs	r1, #8
 8009236:	430a      	orrs	r2, r1
 8009238:	619a      	str	r2, [r3, #24]
}
 800923a:	46c0      	nop			; (mov r8, r8)
 800923c:	46bd      	mov	sp, r7
 800923e:	b01e      	add	sp, #120	; 0x78
 8009240:	bd80      	pop	{r7, pc}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	fffffeff 	.word	0xfffffeff
 8009248:	effffffe 	.word	0xeffffffe
 800924c:	efffffff 	.word	0xefffffff
 8009250:	08008b09 	.word	0x08008b09

08009254 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2284      	movs	r2, #132	; 0x84
 8009260:	5c9b      	ldrb	r3, [r3, r2]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UARTEx_DisableFifoMode+0x16>
 8009266:	2302      	movs	r3, #2
 8009268:	e027      	b.n	80092ba <HAL_UARTEx_DisableFifoMode+0x66>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2284      	movs	r2, #132	; 0x84
 800926e:	2101      	movs	r1, #1
 8009270:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2288      	movs	r2, #136	; 0x88
 8009276:	2124      	movs	r1, #36	; 0x24
 8009278:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2101      	movs	r1, #1
 800928e:	438a      	bics	r2, r1
 8009290:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009296:	4013      	ands	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2288      	movs	r2, #136	; 0x88
 80092ac:	2120      	movs	r1, #32
 80092ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2284      	movs	r2, #132	; 0x84
 80092b4:	2100      	movs	r1, #0
 80092b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	0018      	movs	r0, r3
 80092bc:	46bd      	mov	sp, r7
 80092be:	b004      	add	sp, #16
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	dfffffff 	.word	0xdfffffff

080092c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2284      	movs	r2, #132	; 0x84
 80092d6:	5c9b      	ldrb	r3, [r3, r2]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e02e      	b.n	800933e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2284      	movs	r2, #132	; 0x84
 80092e4:	2101      	movs	r1, #1
 80092e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2288      	movs	r2, #136	; 0x88
 80092ec:	2124      	movs	r1, #36	; 0x24
 80092ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2101      	movs	r1, #1
 8009304:	438a      	bics	r2, r1
 8009306:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	08d9      	lsrs	r1, r3, #3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	0018      	movs	r0, r3
 8009320:	f000 f854 	bl	80093cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2288      	movs	r2, #136	; 0x88
 8009330:	2120      	movs	r1, #32
 8009332:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2284      	movs	r2, #132	; 0x84
 8009338:	2100      	movs	r1, #0
 800933a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	0018      	movs	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	b004      	add	sp, #16
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2284      	movs	r2, #132	; 0x84
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800935c:	2302      	movs	r3, #2
 800935e:	e02f      	b.n	80093c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2284      	movs	r2, #132	; 0x84
 8009364:	2101      	movs	r1, #1
 8009366:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2288      	movs	r2, #136	; 0x88
 800936c:	2124      	movs	r1, #36	; 0x24
 800936e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2101      	movs	r1, #1
 8009384:	438a      	bics	r2, r1
 8009386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	4a0e      	ldr	r2, [pc, #56]	; (80093c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009390:	4013      	ands	r3, r2
 8009392:	0019      	movs	r1, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	0018      	movs	r0, r3
 80093a2:	f000 f813 	bl	80093cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2288      	movs	r2, #136	; 0x88
 80093b2:	2120      	movs	r1, #32
 80093b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2284      	movs	r2, #132	; 0x84
 80093ba:	2100      	movs	r1, #0
 80093bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	0018      	movs	r0, r3
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b004      	add	sp, #16
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	f1ffffff 	.word	0xf1ffffff

080093cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d108      	bne.n	80093ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	226a      	movs	r2, #106	; 0x6a
 80093e0:	2101      	movs	r1, #1
 80093e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2268      	movs	r2, #104	; 0x68
 80093e8:	2101      	movs	r1, #1
 80093ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093ec:	e043      	b.n	8009476 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093ee:	260f      	movs	r6, #15
 80093f0:	19bb      	adds	r3, r7, r6
 80093f2:	2208      	movs	r2, #8
 80093f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093f6:	200e      	movs	r0, #14
 80093f8:	183b      	adds	r3, r7, r0
 80093fa:	2208      	movs	r2, #8
 80093fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	0e5b      	lsrs	r3, r3, #25
 8009406:	b2da      	uxtb	r2, r3
 8009408:	240d      	movs	r4, #13
 800940a:	193b      	adds	r3, r7, r4
 800940c:	2107      	movs	r1, #7
 800940e:	400a      	ands	r2, r1
 8009410:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2da      	uxtb	r2, r3
 800941c:	250c      	movs	r5, #12
 800941e:	197b      	adds	r3, r7, r5
 8009420:	2107      	movs	r1, #7
 8009422:	400a      	ands	r2, r1
 8009424:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009426:	183b      	adds	r3, r7, r0
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	197a      	adds	r2, r7, r5
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	4914      	ldr	r1, [pc, #80]	; (8009480 <UARTEx_SetNbDataToProcess+0xb4>)
 8009430:	5c8a      	ldrb	r2, [r1, r2]
 8009432:	435a      	muls	r2, r3
 8009434:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009436:	197b      	adds	r3, r7, r5
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4a12      	ldr	r2, [pc, #72]	; (8009484 <UARTEx_SetNbDataToProcess+0xb8>)
 800943c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800943e:	0019      	movs	r1, r3
 8009440:	f7f8 fe94 	bl	800216c <__divsi3>
 8009444:	0003      	movs	r3, r0
 8009446:	b299      	uxth	r1, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	226a      	movs	r2, #106	; 0x6a
 800944c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800944e:	19bb      	adds	r3, r7, r6
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	193a      	adds	r2, r7, r4
 8009454:	7812      	ldrb	r2, [r2, #0]
 8009456:	490a      	ldr	r1, [pc, #40]	; (8009480 <UARTEx_SetNbDataToProcess+0xb4>)
 8009458:	5c8a      	ldrb	r2, [r1, r2]
 800945a:	435a      	muls	r2, r3
 800945c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800945e:	193b      	adds	r3, r7, r4
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4a08      	ldr	r2, [pc, #32]	; (8009484 <UARTEx_SetNbDataToProcess+0xb8>)
 8009464:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009466:	0019      	movs	r1, r3
 8009468:	f7f8 fe80 	bl	800216c <__divsi3>
 800946c:	0003      	movs	r3, r0
 800946e:	b299      	uxth	r1, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2268      	movs	r2, #104	; 0x68
 8009474:	5299      	strh	r1, [r3, r2]
}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	46bd      	mov	sp, r7
 800947a:	b005      	add	sp, #20
 800947c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	08018b3c 	.word	0x08018b3c
 8009484:	08018b44 	.word	0x08018b44

08009488 <LL_DMA_ConfigTransfer>:
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8009498:	4a0c      	ldr	r2, [pc, #48]	; (80094cc <LL_DMA_ConfigTransfer+0x44>)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	18d3      	adds	r3, r2, r3
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	001a      	movs	r2, r3
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	18d3      	adds	r3, r2, r3
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a09      	ldr	r2, [pc, #36]	; (80094d0 <LL_DMA_ConfigTransfer+0x48>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	0019      	movs	r1, r3
 80094ae:	4a07      	ldr	r2, [pc, #28]	; (80094cc <LL_DMA_ConfigTransfer+0x44>)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	18d3      	adds	r3, r2, r3
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	001a      	movs	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	18d3      	adds	r3, r2, r3
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	430a      	orrs	r2, r1
 80094c0:	601a      	str	r2, [r3, #0]
}
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b006      	add	sp, #24
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	08018b4c 	.word	0x08018b4c
 80094d0:	ffff800f 	.word	0xffff800f

080094d4 <LL_DMA_SetDataLength>:
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80094e4:	4a0b      	ldr	r2, [pc, #44]	; (8009514 <LL_DMA_SetDataLength+0x40>)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	18d3      	adds	r3, r2, r3
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	001a      	movs	r2, r3
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	18d3      	adds	r3, r2, r3
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	0c1b      	lsrs	r3, r3, #16
 80094f6:	0419      	lsls	r1, r3, #16
 80094f8:	4a06      	ldr	r2, [pc, #24]	; (8009514 <LL_DMA_SetDataLength+0x40>)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	001a      	movs	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	18d3      	adds	r3, r2, r3
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	430a      	orrs	r2, r1
 800950a:	605a      	str	r2, [r3, #4]
}
 800950c:	46c0      	nop			; (mov r8, r8)
 800950e:	46bd      	mov	sp, r7
 8009510:	b006      	add	sp, #24
 8009512:	bd80      	pop	{r7, pc}
 8009514:	08018b4c 	.word	0x08018b4c

08009518 <LL_DMA_SetMemoryAddress>:
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8009528:	4a06      	ldr	r2, [pc, #24]	; (8009544 <LL_DMA_SetMemoryAddress+0x2c>)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	18d3      	adds	r3, r2, r3
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	001a      	movs	r2, r3
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]
}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	46bd      	mov	sp, r7
 800953e:	b006      	add	sp, #24
 8009540:	bd80      	pop	{r7, pc}
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	08018b4c 	.word	0x08018b4c

08009548 <LL_DMA_SetPeriphAddress>:
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8009558:	4a06      	ldr	r2, [pc, #24]	; (8009574 <LL_DMA_SetPeriphAddress+0x2c>)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	001a      	movs	r2, r3
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	18d3      	adds	r3, r2, r3
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	609a      	str	r2, [r3, #8]
}
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	46bd      	mov	sp, r7
 800956e:	b006      	add	sp, #24
 8009570:	bd80      	pop	{r7, pc}
 8009572:	46c0      	nop			; (mov r8, r8)
 8009574:	08018b4c 	.word	0x08018b4c

08009578 <LL_DMA_SetPeriphRequest>:
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	0a9b      	lsrs	r3, r3, #10
 8009588:	4a0f      	ldr	r2, [pc, #60]	; (80095c8 <LL_DMA_SetPeriphRequest+0x50>)
 800958a:	405a      	eors	r2, r3
 800958c:	0013      	movs	r3, r2
 800958e:	00db      	lsls	r3, r3, #3
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4a0b      	ldr	r2, [pc, #44]	; (80095cc <LL_DMA_SetPeriphRequest+0x54>)
 800959e:	4694      	mov	ip, r2
 80095a0:	4463      	add	r3, ip
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	227f      	movs	r2, #127	; 0x7f
 80095a6:	4393      	bics	r3, r2
 80095a8:	0019      	movs	r1, r3
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	18d3      	adds	r3, r2, r3
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a06      	ldr	r2, [pc, #24]	; (80095cc <LL_DMA_SetPeriphRequest+0x54>)
 80095b4:	4694      	mov	ip, r2
 80095b6:	4463      	add	r3, ip
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	46bd      	mov	sp, r7
 80095c2:	b006      	add	sp, #24
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	00100080 	.word	0x00100080
 80095cc:	40020800 	.word	0x40020800

080095d0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80095e4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 80095ea:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80095f0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80095f6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80095fc:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8009602:	431a      	orrs	r2, r3
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff ff3d 	bl	8009488 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	0018      	movs	r0, r3
 8009618:	f7ff ff7e 	bl	8009518 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	0018      	movs	r0, r3
 8009626:	f7ff ff8f 	bl	8009548 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1a      	ldr	r2, [r3, #32]
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0018      	movs	r0, r3
 8009634:	f7ff ff4e 	bl	80094d4 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	0018      	movs	r0, r3
 8009642:	f7ff ff99 	bl	8009578 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 8009646:	2300      	movs	r3, #0
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b004      	add	sp, #16
 800964e:	bd80      	pop	{r7, pc}

08009650 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	629a      	str	r2, [r3, #40]	; 0x28
}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	46bd      	mov	sp, r7
 800969e:	b002      	add	sp, #8
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6819      	ldr	r1, [r3, #0]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	435b      	muls	r3, r3
 80096b6:	001a      	movs	r2, r3
 80096b8:	0013      	movs	r3, r2
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	189b      	adds	r3, r3, r2
 80096be:	43db      	mvns	r3, r3
 80096c0:	400b      	ands	r3, r1
 80096c2:	001a      	movs	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	435b      	muls	r3, r3
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	434b      	muls	r3, r1
 80096cc:	431a      	orrs	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b004      	add	sp, #16
 80096d8:	bd80      	pop	{r7, pc}

080096da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	43d2      	mvns	r2, r2
 80096ee:	401a      	ands	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	434b      	muls	r3, r1
 80096f6:	431a      	orrs	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	605a      	str	r2, [r3, #4]
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	46bd      	mov	sp, r7
 8009700:	b004      	add	sp, #16
 8009702:	bd80      	pop	{r7, pc}

08009704 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6899      	ldr	r1, [r3, #8]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	435b      	muls	r3, r3
 8009718:	001a      	movs	r2, r3
 800971a:	0013      	movs	r3, r2
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	189b      	adds	r3, r3, r2
 8009720:	43db      	mvns	r3, r3
 8009722:	400b      	ands	r3, r1
 8009724:	001a      	movs	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	435b      	muls	r3, r3
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	434b      	muls	r3, r1
 800972e:	431a      	orrs	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	609a      	str	r2, [r3, #8]
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b004      	add	sp, #16
 800973a:	bd80      	pop	{r7, pc}

0800973c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68d9      	ldr	r1, [r3, #12]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	435b      	muls	r3, r3
 8009750:	001a      	movs	r2, r3
 8009752:	0013      	movs	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	189b      	adds	r3, r3, r2
 8009758:	43db      	mvns	r3, r3
 800975a:	400b      	ands	r3, r1
 800975c:	001a      	movs	r2, r3
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	435b      	muls	r3, r3
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	434b      	muls	r3, r1
 8009766:	431a      	orrs	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	60da      	str	r2, [r3, #12]
}
 800976c:	46c0      	nop			; (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b004      	add	sp, #16
 8009772:	bd80      	pop	{r7, pc}

08009774 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a19      	ldr	r1, [r3, #32]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	435b      	muls	r3, r3
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	4353      	muls	r3, r2
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	435a      	muls	r2, r3
 8009790:	0013      	movs	r3, r2
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	43db      	mvns	r3, r3
 8009798:	400b      	ands	r3, r1
 800979a:	001a      	movs	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	435b      	muls	r3, r3
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	434b      	muls	r3, r1
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	434b      	muls	r3, r1
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	434b      	muls	r3, r1
 80097ac:	431a      	orrs	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b004      	add	sp, #16
 80097b8:	bd80      	pop	{r7, pc}

080097ba <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	0a1b      	lsrs	r3, r3, #8
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	0a12      	lsrs	r2, r2, #8
 80097d2:	4353      	muls	r3, r2
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	0a12      	lsrs	r2, r2, #8
 80097d8:	4353      	muls	r3, r2
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	0a12      	lsrs	r2, r2, #8
 80097de:	435a      	muls	r2, r3
 80097e0:	0013      	movs	r3, r2
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	43db      	mvns	r3, r3
 80097e8:	400b      	ands	r3, r1
 80097ea:	001a      	movs	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	0a1b      	lsrs	r3, r3, #8
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	0a09      	lsrs	r1, r1, #8
 80097f4:	434b      	muls	r3, r1
 80097f6:	68b9      	ldr	r1, [r7, #8]
 80097f8:	0a09      	lsrs	r1, r1, #8
 80097fa:	434b      	muls	r3, r1
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	0a09      	lsrs	r1, r1, #8
 8009800:	434b      	muls	r3, r1
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	434b      	muls	r3, r1
 8009806:	431a      	orrs	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	b004      	add	sp, #16
 8009812:	bd80      	pop	{r7, pc}

08009814 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009822:	e047      	b.n	80098b4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2101      	movs	r1, #1
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4091      	lsls	r1, r2
 800982e:	000a      	movs	r2, r1
 8009830:	4013      	ands	r3, r2
 8009832:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d039      	beq.n	80098ae <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d003      	beq.n	800984a <LL_GPIO_Init+0x36>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d10d      	bne.n	8009866 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	689a      	ldr	r2, [r3, #8]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	0018      	movs	r0, r3
 8009854:	f7ff ff56 	bl	8009704 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	0018      	movs	r0, r3
 8009862:	f7ff ff3a 	bl	80096da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	691a      	ldr	r2, [r3, #16]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	0018      	movs	r0, r3
 8009870:	f7ff ff64 	bl	800973c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b02      	cmp	r3, #2
 800987a:	d111      	bne.n	80098a0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2bff      	cmp	r3, #255	; 0xff
 8009880:	d807      	bhi.n	8009892 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	695a      	ldr	r2, [r3, #20]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	0018      	movs	r0, r3
 800988c:	f7ff ff72 	bl	8009774 <LL_GPIO_SetAFPin_0_7>
 8009890:	e006      	b.n	80098a0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	695a      	ldr	r2, [r3, #20]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	0018      	movs	r0, r3
 800989c:	f7ff ff8d 	bl	80097ba <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0018      	movs	r0, r3
 80098aa:	f7ff fefa 	bl	80096a2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	40da      	lsrs	r2, r3
 80098bc:	1e13      	subs	r3, r2, #0
 80098be:	d1b1      	bne.n	8009824 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b004      	add	sp, #16
 80098c8:	bd80      	pop	{r7, pc}

080098ca <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	085a      	lsrs	r2, r3, #1
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	601a      	str	r2, [r3, #0]
}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b002      	add	sp, #8
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <LL_APB1_GRP1_EnableClock>:
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <LL_APB1_GRP1_EnableClock+0x28>)
 80098f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80098f4:	4b06      	ldr	r3, [pc, #24]	; (8009910 <LL_APB1_GRP1_EnableClock+0x28>)
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <LL_APB1_GRP1_EnableClock+0x28>)
 80098fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4013      	ands	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	46c0      	nop			; (mov r8, r8)
 800990a:	46bd      	mov	sp, r7
 800990c:	b004      	add	sp, #16
 800990e:	bd80      	pop	{r7, pc}
 8009910:	40021000 	.word	0x40021000

08009914 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a16      	ldr	r2, [pc, #88]	; (800997c <LL_UCPD_Init+0x68>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d104      	bne.n	8009930 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8009926:	2380      	movs	r3, #128	; 0x80
 8009928:	049b      	lsls	r3, r3, #18
 800992a:	0018      	movs	r0, r3
 800992c:	f7ff ffdc 	bl	80098e8 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a13      	ldr	r2, [pc, #76]	; (8009980 <LL_UCPD_Init+0x6c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d104      	bne.n	8009942 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8009938:	2380      	movs	r3, #128	; 0x80
 800993a:	04db      	lsls	r3, r3, #19
 800993c:	0018      	movs	r0, r3
 800993e:	f7ff ffd3 	bl	80098e8 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	0018      	movs	r0, r3
 8009946:	f7ff ffc0 	bl	80098ca <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <LL_UCPD_Init+0x70>)
 8009950:	401a      	ands	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6819      	ldr	r1, [r3, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	02db      	lsls	r3, r3, #11
 800995c:	4319      	orrs	r1, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	019b      	lsls	r3, r3, #6
 8009964:	4319      	orrs	r1, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	430b      	orrs	r3, r1
 800996c:	431a      	orrs	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8009972:	2300      	movs	r3, #0
}
 8009974:	0018      	movs	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	b002      	add	sp, #8
 800997a:	bd80      	pop	{r7, pc}
 800997c:	4000a000 	.word	0x4000a000
 8009980:	4000a400 	.word	0x4000a400
 8009984:	fff10000 	.word	0xfff10000

08009988 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	0292      	lsls	r2, r2, #10
 8009996:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2207      	movs	r2, #7
 800999c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2210      	movs	r2, #16
 80099a2:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	220d      	movs	r2, #13
 80099a8:	60da      	str	r2, [r3, #12]
}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b002      	add	sp, #8
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <USB_EnableGlobalInt+0x24>)
 80099c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	0018      	movs	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b004      	add	sp, #16
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	0000bf80 	.word	0x0000bf80

080099dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099e4:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <USB_DisableGlobalInt+0x24>)
 80099e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	43d2      	mvns	r2, r2
 80099f0:	401a      	ands	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	0018      	movs	r0, r3
 80099fa:	46bd      	mov	sp, r7
 80099fc:	b004      	add	sp, #16
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0000bf80 	.word	0x0000bf80

08009a04 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	000a      	movs	r2, r1
 8009a0e:	1cfb      	adds	r3, r7, #3
 8009a10:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8009a12:	1cfb      	adds	r3, r7, #3
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	085a      	lsrs	r2, r3, #1
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	641a      	str	r2, [r3, #64]	; 0x40
 8009a26:	e006      	b.n	8009a36 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	2280      	movs	r2, #128	; 0x80
 8009a2e:	0612      	lsls	r2, r2, #24
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009a40:	b084      	sub	sp, #16
 8009a42:	b590      	push	{r4, r7, lr}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	2004      	movs	r0, #4
 8009a4c:	2410      	movs	r4, #16
 8009a4e:	1900      	adds	r0, r0, r4
 8009a50:	2408      	movs	r4, #8
 8009a52:	46a4      	mov	ip, r4
 8009a54:	44bc      	add	ip, r7
 8009a56:	4460      	add	r0, ip
 8009a58:	6001      	str	r1, [r0, #0]
 8009a5a:	6042      	str	r2, [r0, #4]
 8009a5c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	2201      	movs	r2, #1
 8009a6a:	4393      	bics	r3, r2
 8009a6c:	001a      	movs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2100      	movs	r1, #0
 8009a76:	0018      	movs	r0, r3
 8009a78:	f7ff ffc4 	bl	8009a04 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b003      	add	sp, #12
 8009a8a:	bc90      	pop	{r4, r7}
 8009a8c:	bc08      	pop	{r3}
 8009a8e:	b004      	add	sp, #16
 8009a90:	4718      	bx	r3
	...

08009a94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b09e      	sub	sp, #120	; 0x78
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a9e:	2377      	movs	r3, #119	; 0x77
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	18d3      	adds	r3, r2, r3
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4ad8      	ldr	r2, [pc, #864]	; (8009e14 <USB_ActivateEndpoint+0x380>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	78db      	ldrb	r3, [r3, #3]
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d00e      	beq.n	8009ade <USB_ActivateEndpoint+0x4a>
 8009ac0:	dc19      	bgt.n	8009af6 <USB_ActivateEndpoint+0x62>
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d01c      	beq.n	8009b00 <USB_ActivateEndpoint+0x6c>
 8009ac6:	dc16      	bgt.n	8009af6 <USB_ActivateEndpoint+0x62>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <USB_ActivateEndpoint+0x3e>
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d00c      	beq.n	8009aea <USB_ActivateEndpoint+0x56>
 8009ad0:	e011      	b.n	8009af6 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ad4:	2280      	movs	r2, #128	; 0x80
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8009adc:	e011      	b.n	8009b02 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ae0:	22c0      	movs	r2, #192	; 0xc0
 8009ae2:	00d2      	lsls	r2, r2, #3
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8009ae8:	e00b      	b.n	8009b02 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aec:	2280      	movs	r2, #128	; 0x80
 8009aee:	00d2      	lsls	r2, r2, #3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8009af4:	e005      	b.n	8009b02 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8009af6:	2377      	movs	r3, #119	; 0x77
 8009af8:	18fb      	adds	r3, r7, r3
 8009afa:	2201      	movs	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
      break;
 8009afe:	e000      	b.n	8009b02 <USB_ActivateEndpoint+0x6e>
      break;
 8009b00:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	18d3      	adds	r3, r2, r3
 8009b0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009b0e:	49c2      	ldr	r1, [pc, #776]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009b10:	430a      	orrs	r2, r1
 8009b12:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	18d3      	adds	r3, r2, r3
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4abe      	ldr	r2, [pc, #760]	; (8009e1c <USB_ActivateEndpoint+0x388>)
 8009b22:	4013      	ands	r3, r2
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	18d3      	adds	r3, r2, r3
 8009b36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b38:	49b7      	ldr	r1, [pc, #732]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	7a9b      	ldrb	r3, [r3, #10]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d000      	beq.n	8009b48 <USB_ActivateEndpoint+0xb4>
 8009b46:	e177      	b.n	8009e38 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d06e      	beq.n	8009c2e <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	4ab2      	ldr	r2, [pc, #712]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009b58:	4694      	mov	ip, r2
 8009b5a:	4463      	add	r3, ip
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	49ae      	ldr	r1, [pc, #696]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009b66:	468c      	mov	ip, r1
 8009b68:	4463      	add	r3, ip
 8009b6a:	0c12      	lsrs	r2, r2, #16
 8009b6c:	0412      	lsls	r2, r2, #16
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	00db      	lsls	r3, r3, #3
 8009b76:	4aaa      	ldr	r2, [pc, #680]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009b78:	4694      	mov	ip, r2
 8009b7a:	4463      	add	r3, ip
 8009b7c:	6819      	ldr	r1, [r3, #0]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	889b      	ldrh	r3, [r3, #4]
 8009b82:	089b      	lsrs	r3, r3, #2
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	009a      	lsls	r2, r3, #2
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	48a4      	ldr	r0, [pc, #656]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009b90:	4684      	mov	ip, r0
 8009b92:	4463      	add	r3, ip
 8009b94:	430a      	orrs	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2240      	movs	r2, #64	; 0x40
 8009baa:	4013      	ands	r3, r2
 8009bac:	d011      	beq.n	8009bd2 <USB_ActivateEndpoint+0x13e>
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a98      	ldr	r2, [pc, #608]	; (8009e1c <USB_ActivateEndpoint+0x388>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	18d3      	adds	r3, r2, r3
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	4995      	ldr	r1, [pc, #596]	; (8009e24 <USB_ActivateEndpoint+0x390>)
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d016      	beq.n	8009c08 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	18d3      	adds	r3, r2, r3
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a90      	ldr	r2, [pc, #576]	; (8009e28 <USB_ActivateEndpoint+0x394>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	4053      	eors	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	18d3      	adds	r3, r2, r3
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4985      	ldr	r1, [pc, #532]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009c02:	430a      	orrs	r2, r1
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	e270      	b.n	800a0ea <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	18d3      	adds	r3, r2, r3
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a84      	ldr	r2, [pc, #528]	; (8009e28 <USB_ActivateEndpoint+0x394>)
 8009c16:	4013      	ands	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	497c      	ldr	r1, [pc, #496]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	e25d      	b.n	800a0ea <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4a7a      	ldr	r2, [pc, #488]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c36:	4694      	mov	ip, r2
 8009c38:	4463      	add	r3, ip
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	4977      	ldr	r1, [pc, #476]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c44:	468c      	mov	ip, r1
 8009c46:	4463      	add	r3, ip
 8009c48:	0c12      	lsrs	r2, r2, #16
 8009c4a:	0412      	lsls	r2, r2, #16
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	4a72      	ldr	r2, [pc, #456]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c56:	4694      	mov	ip, r2
 8009c58:	4463      	add	r3, ip
 8009c5a:	6859      	ldr	r1, [r3, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	889b      	ldrh	r3, [r3, #4]
 8009c60:	089b      	lsrs	r3, r3, #2
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	009a      	lsls	r2, r3, #2
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	486c      	ldr	r0, [pc, #432]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c6e:	4684      	mov	ip, r0
 8009c70:	4463      	add	r3, ip
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4a68      	ldr	r2, [pc, #416]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c7e:	4694      	mov	ip, r2
 8009c80:	4463      	add	r3, ip
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4965      	ldr	r1, [pc, #404]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009c8c:	468c      	mov	ip, r1
 8009c8e:	4463      	add	r3, ip
 8009c90:	0412      	lsls	r2, r2, #16
 8009c92:	0c12      	lsrs	r2, r2, #16
 8009c94:	605a      	str	r2, [r3, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c9c:	d920      	bls.n	8009ce0 <USB_ActivateEndpoint+0x24c>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	221f      	movs	r2, #31
 8009cac:	4013      	ands	r3, r2
 8009cae:	d102      	bne.n	8009cb6 <USB_ActivateEndpoint+0x222>
 8009cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	4a58      	ldr	r2, [pc, #352]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009cbe:	4694      	mov	ip, r2
 8009cc0:	4463      	add	r3, ip
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	069b      	lsls	r3, r3, #26
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	4953      	ldr	r1, [pc, #332]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009cd2:	468c      	mov	ip, r1
 8009cd4:	4463      	add	r3, ip
 8009cd6:	2180      	movs	r1, #128	; 0x80
 8009cd8:	0609      	lsls	r1, r1, #24
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	e042      	b.n	8009d66 <USB_ActivateEndpoint+0x2d2>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d121      	bne.n	8009d2c <USB_ActivateEndpoint+0x298>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4a4c      	ldr	r2, [pc, #304]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009cf0:	4694      	mov	ip, r2
 8009cf2:	4463      	add	r3, ip
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	4948      	ldr	r1, [pc, #288]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009cfe:	468c      	mov	ip, r1
 8009d00:	4463      	add	r3, ip
 8009d02:	494a      	ldr	r1, [pc, #296]	; (8009e2c <USB_ActivateEndpoint+0x398>)
 8009d04:	400a      	ands	r2, r1
 8009d06:	605a      	str	r2, [r3, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	4a44      	ldr	r2, [pc, #272]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009d10:	4694      	mov	ip, r2
 8009d12:	4463      	add	r3, ip
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	4940      	ldr	r1, [pc, #256]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009d1e:	468c      	mov	ip, r1
 8009d20:	4463      	add	r3, ip
 8009d22:	2180      	movs	r1, #128	; 0x80
 8009d24:	0609      	lsls	r1, r1, #24
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
 8009d2a:	e01c      	b.n	8009d66 <USB_ActivateEndpoint+0x2d2>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	085b      	lsrs	r3, r3, #1
 8009d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	d002      	beq.n	8009d44 <USB_ActivateEndpoint+0x2b0>
 8009d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d40:	3301      	adds	r3, #1
 8009d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	4a35      	ldr	r2, [pc, #212]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009d4c:	4694      	mov	ip, r2
 8009d4e:	4463      	add	r3, ip
 8009d50:	6859      	ldr	r1, [r3, #4]
 8009d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d54:	069a      	lsls	r2, r3, #26
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	4830      	ldr	r0, [pc, #192]	; (8009e20 <USB_ActivateEndpoint+0x38c>)
 8009d5e:	4684      	mov	ip, r0
 8009d60:	4463      	add	r3, ip
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	18d3      	adds	r3, r2, r3
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d76:	2380      	movs	r3, #128	; 0x80
 8009d78:	01db      	lsls	r3, r3, #7
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	d011      	beq.n	8009da2 <USB_ActivateEndpoint+0x30e>
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	18d3      	adds	r3, r2, r3
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a24      	ldr	r2, [pc, #144]	; (8009e1c <USB_ActivateEndpoint+0x388>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	18d3      	adds	r3, r2, r3
 8009d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d9c:	4924      	ldr	r1, [pc, #144]	; (8009e30 <USB_ActivateEndpoint+0x39c>)
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d11c      	bne.n	8009de4 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	18d3      	adds	r3, r2, r3
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1f      	ldr	r2, [pc, #124]	; (8009e34 <USB_ActivateEndpoint+0x3a0>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	2280      	movs	r2, #128	; 0x80
 8009dc0:	0152      	lsls	r2, r2, #5
 8009dc2:	4053      	eors	r3, r2
 8009dc4:	61fb      	str	r3, [r7, #28]
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2280      	movs	r2, #128	; 0x80
 8009dca:	0192      	lsls	r2, r2, #6
 8009dcc:	4053      	eors	r3, r2
 8009dce:	61fb      	str	r3, [r7, #28]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	18d3      	adds	r3, r2, r3
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	490e      	ldr	r1, [pc, #56]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009dde:	430a      	orrs	r2, r1
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e182      	b.n	800a0ea <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	18d3      	adds	r3, r2, r3
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <USB_ActivateEndpoint+0x3a0>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	623b      	str	r3, [r7, #32]
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2280      	movs	r2, #128	; 0x80
 8009dfa:	0192      	lsls	r2, r2, #6
 8009dfc:	4053      	eors	r3, r2
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	18d3      	adds	r3, r2, r3
 8009e0a:	6a3a      	ldr	r2, [r7, #32]
 8009e0c:	4902      	ldr	r1, [pc, #8]	; (8009e18 <USB_ActivateEndpoint+0x384>)
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e16a      	b.n	800a0ea <USB_ActivateEndpoint+0x656>
 8009e14:	07ff898f 	.word	0x07ff898f
 8009e18:	00008080 	.word	0x00008080
 8009e1c:	07ff8f8f 	.word	0x07ff8f8f
 8009e20:	40009800 	.word	0x40009800
 8009e24:	000080c0 	.word	0x000080c0
 8009e28:	07ff8fbf 	.word	0x07ff8fbf
 8009e2c:	83ffffff 	.word	0x83ffffff
 8009e30:	0000c080 	.word	0x0000c080
 8009e34:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d112      	bne.n	8009e66 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	18d3      	adds	r3, r2, r3
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4aaa      	ldr	r2, [pc, #680]	; (800a0f8 <USB_ActivateEndpoint+0x664>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	663b      	str	r3, [r7, #96]	; 0x60
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	18d3      	adds	r3, r2, r3
 8009e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e5e:	49a7      	ldr	r1, [pc, #668]	; (800a0fc <USB_ActivateEndpoint+0x668>)
 8009e60:	430a      	orrs	r2, r1
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	e011      	b.n	8009e8a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	18d3      	adds	r3, r2, r3
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4aa3      	ldr	r2, [pc, #652]	; (800a100 <USB_ActivateEndpoint+0x66c>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	667b      	str	r3, [r7, #100]	; 0x64
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	18d3      	adds	r3, r2, r3
 8009e82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e84:	499f      	ldr	r1, [pc, #636]	; (800a104 <USB_ActivateEndpoint+0x670>)
 8009e86:	430a      	orrs	r2, r1
 8009e88:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4a9d      	ldr	r2, [pc, #628]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009e92:	4694      	mov	ip, r2
 8009e94:	4463      	add	r3, ip
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	499a      	ldr	r1, [pc, #616]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009ea0:	468c      	mov	ip, r1
 8009ea2:	4463      	add	r3, ip
 8009ea4:	0c12      	lsrs	r2, r2, #16
 8009ea6:	0412      	lsls	r2, r2, #16
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4a95      	ldr	r2, [pc, #596]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009eb2:	4694      	mov	ip, r2
 8009eb4:	4463      	add	r3, ip
 8009eb6:	6819      	ldr	r1, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	88db      	ldrh	r3, [r3, #6]
 8009ebc:	089b      	lsrs	r3, r3, #2
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	009a      	lsls	r2, r3, #2
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	488f      	ldr	r0, [pc, #572]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009eca:	4684      	mov	ip, r0
 8009ecc:	4463      	add	r3, ip
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	4a8b      	ldr	r2, [pc, #556]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009eda:	4694      	mov	ip, r2
 8009edc:	4463      	add	r3, ip
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	4988      	ldr	r1, [pc, #544]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009ee8:	468c      	mov	ip, r1
 8009eea:	4463      	add	r3, ip
 8009eec:	0c12      	lsrs	r2, r2, #16
 8009eee:	0412      	lsls	r2, r2, #16
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4a83      	ldr	r2, [pc, #524]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009efa:	4694      	mov	ip, r2
 8009efc:	4463      	add	r3, ip
 8009efe:	6859      	ldr	r1, [r3, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	891b      	ldrh	r3, [r3, #8]
 8009f04:	089b      	lsrs	r3, r3, #2
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	009a      	lsls	r2, r3, #2
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	487d      	ldr	r0, [pc, #500]	; (800a108 <USB_ActivateEndpoint+0x674>)
 8009f12:	4684      	mov	ip, r0
 8009f14:	4463      	add	r3, ip
 8009f16:	430a      	orrs	r2, r1
 8009f18:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	785b      	ldrb	r3, [r3, #1]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d169      	bne.n	8009ff6 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f32:	2380      	movs	r3, #128	; 0x80
 8009f34:	01db      	lsls	r3, r3, #7
 8009f36:	4013      	ands	r3, r2
 8009f38:	d011      	beq.n	8009f5e <USB_ActivateEndpoint+0x4ca>
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	18d3      	adds	r3, r2, r3
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a6c      	ldr	r2, [pc, #432]	; (800a0f8 <USB_ActivateEndpoint+0x664>)
 8009f48:	4013      	ands	r3, r2
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f58:	496c      	ldr	r1, [pc, #432]	; (800a10c <USB_ActivateEndpoint+0x678>)
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	18d3      	adds	r3, r2, r3
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	2240      	movs	r2, #64	; 0x40
 8009f70:	4013      	ands	r3, r2
 8009f72:	d011      	beq.n	8009f98 <USB_ActivateEndpoint+0x504>
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	18d3      	adds	r3, r2, r3
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a5d      	ldr	r2, [pc, #372]	; (800a0f8 <USB_ActivateEndpoint+0x664>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	637b      	str	r3, [r7, #52]	; 0x34
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	18d3      	adds	r3, r2, r3
 8009f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f92:	495f      	ldr	r1, [pc, #380]	; (800a110 <USB_ActivateEndpoint+0x67c>)
 8009f94:	430a      	orrs	r2, r1
 8009f96:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	18d3      	adds	r3, r2, r3
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a5b      	ldr	r2, [pc, #364]	; (800a114 <USB_ActivateEndpoint+0x680>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	2280      	movs	r2, #128	; 0x80
 8009fae:	0152      	lsls	r2, r2, #5
 8009fb0:	4053      	eors	r3, r2
 8009fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	2280      	movs	r2, #128	; 0x80
 8009fb8:	0192      	lsls	r2, r2, #6
 8009fba:	4053      	eors	r3, r2
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	18d3      	adds	r3, r2, r3
 8009fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fca:	494e      	ldr	r1, [pc, #312]	; (800a104 <USB_ActivateEndpoint+0x670>)
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	18d3      	adds	r3, r2, r3
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a4e      	ldr	r2, [pc, #312]	; (800a118 <USB_ActivateEndpoint+0x684>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	18d3      	adds	r3, r2, r3
 8009fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fee:	4945      	ldr	r1, [pc, #276]	; (800a104 <USB_ActivateEndpoint+0x670>)
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e079      	b.n	800a0ea <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	18d3      	adds	r3, r2, r3
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	01db      	lsls	r3, r3, #7
 800a00a:	4013      	ands	r3, r2
 800a00c:	d011      	beq.n	800a032 <USB_ActivateEndpoint+0x59e>
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	18d3      	adds	r3, r2, r3
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a37      	ldr	r2, [pc, #220]	; (800a0f8 <USB_ActivateEndpoint+0x664>)
 800a01c:	4013      	ands	r3, r2
 800a01e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	18d3      	adds	r3, r2, r3
 800a02a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a02c:	4937      	ldr	r1, [pc, #220]	; (800a10c <USB_ActivateEndpoint+0x678>)
 800a02e:	430a      	orrs	r2, r1
 800a030:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	18d3      	adds	r3, r2, r3
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	657b      	str	r3, [r7, #84]	; 0x54
 800a040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a042:	2240      	movs	r2, #64	; 0x40
 800a044:	4013      	ands	r3, r2
 800a046:	d011      	beq.n	800a06c <USB_ActivateEndpoint+0x5d8>
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	18d3      	adds	r3, r2, r3
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a28      	ldr	r2, [pc, #160]	; (800a0f8 <USB_ActivateEndpoint+0x664>)
 800a056:	4013      	ands	r3, r2
 800a058:	653b      	str	r3, [r7, #80]	; 0x50
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	18d3      	adds	r3, r2, r3
 800a064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a066:	492a      	ldr	r1, [pc, #168]	; (800a110 <USB_ActivateEndpoint+0x67c>)
 800a068:	430a      	orrs	r2, r1
 800a06a:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	78db      	ldrb	r3, [r3, #3]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d016      	beq.n	800a0a2 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	18d3      	adds	r3, r2, r3
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a25      	ldr	r2, [pc, #148]	; (800a118 <USB_ActivateEndpoint+0x684>)
 800a082:	4013      	ands	r3, r2
 800a084:	64bb      	str	r3, [r7, #72]	; 0x48
 800a086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a088:	2220      	movs	r2, #32
 800a08a:	4053      	eors	r3, r2
 800a08c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	18d3      	adds	r3, r2, r3
 800a098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a09a:	491a      	ldr	r1, [pc, #104]	; (800a104 <USB_ActivateEndpoint+0x670>)
 800a09c:	430a      	orrs	r2, r1
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	e011      	b.n	800a0c6 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	18d3      	adds	r3, r2, r3
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a1a      	ldr	r2, [pc, #104]	; (800a118 <USB_ActivateEndpoint+0x684>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	18d3      	adds	r3, r2, r3
 800a0be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c0:	4910      	ldr	r1, [pc, #64]	; (800a104 <USB_ActivateEndpoint+0x670>)
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	18d3      	adds	r3, r2, r3
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a10      	ldr	r2, [pc, #64]	; (800a114 <USB_ActivateEndpoint+0x680>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	18d3      	adds	r3, r2, r3
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e4:	4907      	ldr	r1, [pc, #28]	; (800a104 <USB_ActivateEndpoint+0x670>)
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a0ea:	2377      	movs	r3, #119	; 0x77
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	781b      	ldrb	r3, [r3, #0]
}
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b01e      	add	sp, #120	; 0x78
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	07ff8f8f 	.word	0x07ff8f8f
 800a0fc:	00008180 	.word	0x00008180
 800a100:	07ff8e8f 	.word	0x07ff8e8f
 800a104:	00008080 	.word	0x00008080
 800a108:	40009800 	.word	0x40009800
 800a10c:	0000c080 	.word	0x0000c080
 800a110:	000080c0 	.word	0x000080c0
 800a114:	07ffbf8f 	.word	0x07ffbf8f
 800a118:	07ff8fbf 	.word	0x07ff8fbf

0800a11c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b096      	sub	sp, #88	; 0x58
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	7a9b      	ldrb	r3, [r3, #10]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d164      	bne.n	800a1f8 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	785b      	ldrb	r3, [r3, #1]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d02f      	beq.n	800a196 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	18d3      	adds	r3, r2, r3
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	613b      	str	r3, [r7, #16]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2240      	movs	r2, #64	; 0x40
 800a148:	4013      	ands	r3, r2
 800a14a:	d011      	beq.n	800a170 <USB_DeactivateEndpoint+0x54>
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	18d3      	adds	r3, r2, r3
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a9d      	ldr	r2, [pc, #628]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a15a:	4013      	ands	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	18d3      	adds	r3, r2, r3
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	499a      	ldr	r1, [pc, #616]	; (800a3d4 <USB_DeactivateEndpoint+0x2b8>)
 800a16c:	430a      	orrs	r2, r1
 800a16e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	18d3      	adds	r3, r2, r3
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a96      	ldr	r2, [pc, #600]	; (800a3d8 <USB_DeactivateEndpoint+0x2bc>)
 800a17e:	4013      	ands	r3, r2
 800a180:	60bb      	str	r3, [r7, #8]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	4993      	ldr	r1, [pc, #588]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a190:	430a      	orrs	r2, r1
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e117      	b.n	800a3c6 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	18d3      	adds	r3, r2, r3
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	2380      	movs	r3, #128	; 0x80
 800a1a8:	01db      	lsls	r3, r3, #7
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	d011      	beq.n	800a1d2 <USB_DeactivateEndpoint+0xb6>
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	18d3      	adds	r3, r2, r3
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a85      	ldr	r2, [pc, #532]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	18d3      	adds	r3, r2, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4984      	ldr	r1, [pc, #528]	; (800a3e0 <USB_DeactivateEndpoint+0x2c4>)
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	18d3      	adds	r3, r2, r3
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a81      	ldr	r2, [pc, #516]	; (800a3e4 <USB_DeactivateEndpoint+0x2c8>)
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	18d3      	adds	r3, r2, r3
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	497a      	ldr	r1, [pc, #488]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e0e6      	b.n	800a3c6 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	785b      	ldrb	r3, [r3, #1]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d171      	bne.n	800a2e4 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	18d3      	adds	r3, r2, r3
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a20e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a210:	2380      	movs	r3, #128	; 0x80
 800a212:	01db      	lsls	r3, r3, #7
 800a214:	4013      	ands	r3, r2
 800a216:	d011      	beq.n	800a23c <USB_DeactivateEndpoint+0x120>
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a6a      	ldr	r2, [pc, #424]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a226:	4013      	ands	r3, r2
 800a228:	637b      	str	r3, [r7, #52]	; 0x34
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	18d3      	adds	r3, r2, r3
 800a234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a236:	496a      	ldr	r1, [pc, #424]	; (800a3e0 <USB_DeactivateEndpoint+0x2c4>)
 800a238:	430a      	orrs	r2, r1
 800a23a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	18d3      	adds	r3, r2, r3
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	633b      	str	r3, [r7, #48]	; 0x30
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	2240      	movs	r2, #64	; 0x40
 800a24e:	4013      	ands	r3, r2
 800a250:	d011      	beq.n	800a276 <USB_DeactivateEndpoint+0x15a>
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	18d3      	adds	r3, r2, r3
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a5c      	ldr	r2, [pc, #368]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a260:	4013      	ands	r3, r2
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a270:	4958      	ldr	r1, [pc, #352]	; (800a3d4 <USB_DeactivateEndpoint+0x2b8>)
 800a272:	430a      	orrs	r2, r1
 800a274:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	18d3      	adds	r3, r2, r3
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a53      	ldr	r2, [pc, #332]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a284:	4013      	ands	r3, r2
 800a286:	62bb      	str	r3, [r7, #40]	; 0x28
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	18d3      	adds	r3, r2, r3
 800a292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a294:	494f      	ldr	r1, [pc, #316]	; (800a3d4 <USB_DeactivateEndpoint+0x2b8>)
 800a296:	430a      	orrs	r2, r1
 800a298:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a4f      	ldr	r2, [pc, #316]	; (800a3e4 <USB_DeactivateEndpoint+0x2c8>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	18d3      	adds	r3, r2, r3
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b8:	4948      	ldr	r1, [pc, #288]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	18d3      	adds	r3, r2, r3
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a43      	ldr	r2, [pc, #268]	; (800a3d8 <USB_DeactivateEndpoint+0x2bc>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	623b      	str	r3, [r7, #32]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	18d3      	adds	r3, r2, r3
 800a2da:	6a3a      	ldr	r2, [r7, #32]
 800a2dc:	493f      	ldr	r1, [pc, #252]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	e070      	b.n	800a3c6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	18d3      	adds	r3, r2, r3
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	657b      	str	r3, [r7, #84]	; 0x54
 800a2f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2f4:	2380      	movs	r3, #128	; 0x80
 800a2f6:	01db      	lsls	r3, r3, #7
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	d011      	beq.n	800a320 <USB_DeactivateEndpoint+0x204>
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	18d3      	adds	r3, r2, r3
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a31      	ldr	r2, [pc, #196]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	653b      	str	r3, [r7, #80]	; 0x50
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	18d3      	adds	r3, r2, r3
 800a318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a31a:	4931      	ldr	r1, [pc, #196]	; (800a3e0 <USB_DeactivateEndpoint+0x2c4>)
 800a31c:	430a      	orrs	r2, r1
 800a31e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	18d3      	adds	r3, r2, r3
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a330:	2240      	movs	r2, #64	; 0x40
 800a332:	4013      	ands	r3, r2
 800a334:	d011      	beq.n	800a35a <USB_DeactivateEndpoint+0x23e>
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	18d3      	adds	r3, r2, r3
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a23      	ldr	r2, [pc, #140]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a344:	4013      	ands	r3, r2
 800a346:	64bb      	str	r3, [r7, #72]	; 0x48
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	18d3      	adds	r3, r2, r3
 800a352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a354:	491f      	ldr	r1, [pc, #124]	; (800a3d4 <USB_DeactivateEndpoint+0x2b8>)
 800a356:	430a      	orrs	r2, r1
 800a358:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	18d3      	adds	r3, r2, r3
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1a      	ldr	r2, [pc, #104]	; (800a3d0 <USB_DeactivateEndpoint+0x2b4>)
 800a368:	4013      	ands	r3, r2
 800a36a:	647b      	str	r3, [r7, #68]	; 0x44
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	18d3      	adds	r3, r2, r3
 800a376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a378:	4919      	ldr	r1, [pc, #100]	; (800a3e0 <USB_DeactivateEndpoint+0x2c4>)
 800a37a:	430a      	orrs	r2, r1
 800a37c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	18d3      	adds	r3, r2, r3
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a13      	ldr	r2, [pc, #76]	; (800a3d8 <USB_DeactivateEndpoint+0x2bc>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a39c:	490f      	ldr	r1, [pc, #60]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	18d3      	adds	r3, r2, r3
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a0d      	ldr	r2, [pc, #52]	; (800a3e4 <USB_DeactivateEndpoint+0x2c8>)
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	18d3      	adds	r3, r2, r3
 800a3be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c0:	4906      	ldr	r1, [pc, #24]	; (800a3dc <USB_DeactivateEndpoint+0x2c0>)
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	b016      	add	sp, #88	; 0x58
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	07ff8f8f 	.word	0x07ff8f8f
 800a3d4:	000080c0 	.word	0x000080c0
 800a3d8:	07ff8fbf 	.word	0x07ff8fbf
 800a3dc:	00008080 	.word	0x00008080
 800a3e0:	0000c080 	.word	0x0000c080
 800a3e4:	07ffbf8f 	.word	0x07ffbf8f

0800a3e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b097      	sub	sp, #92	; 0x5c
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d001      	beq.n	800a3fe <USB_EPStartXfer+0x16>
 800a3fa:	f000 fd24 	bl	800ae46 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	429a      	cmp	r2, r3
 800a408:	d903      	bls.n	800a412 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	657b      	str	r3, [r7, #84]	; 0x54
 800a410:	e002      	b.n	800a418 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	7a9b      	ldrb	r3, [r3, #10]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d12b      	bne.n	800a478 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	6959      	ldr	r1, [r3, #20]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	889a      	ldrh	r2, [r3, #4]
 800a428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 fa3d 	bl	800b8ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4ade      	ldr	r2, [pc, #888]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a43a:	4694      	mov	ip, r2
 800a43c:	4463      	add	r3, ip
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	49db      	ldr	r1, [pc, #876]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a448:	468c      	mov	ip, r1
 800a44a:	4463      	add	r3, ip
 800a44c:	0412      	lsls	r2, r2, #16
 800a44e:	0c12      	lsrs	r2, r2, #16
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	4ad6      	ldr	r2, [pc, #856]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a45a:	4694      	mov	ip, r2
 800a45c:	4463      	add	r3, ip
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a462:	041a      	lsls	r2, r3, #16
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	48d2      	ldr	r0, [pc, #840]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a46c:	4684      	mov	ip, r0
 800a46e:	4463      	add	r3, ip
 800a470:	430a      	orrs	r2, r1
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	f000 fccb 	bl	800ae0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	78db      	ldrb	r3, [r3, #3]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d000      	beq.n	800a482 <USB_EPStartXfer+0x9a>
 800a480:	e35e      	b.n	800ab40 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6a1a      	ldr	r2, [r3, #32]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d800      	bhi.n	800a490 <USB_EPStartXfer+0xa8>
 800a48e:	e309      	b.n	800aaa4 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	18d3      	adds	r3, r2, r3
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4ac6      	ldr	r2, [pc, #792]	; (800a7b8 <USB_EPStartXfer+0x3d0>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	18d3      	adds	r3, r2, r3
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	49c3      	ldr	r1, [pc, #780]	; (800a7bc <USB_EPStartXfer+0x3d4>)
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	6a1a      	ldr	r2, [r3, #32]
 800a4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	18d3      	adds	r3, r2, r3
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2240      	movs	r2, #64	; 0x40
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	d100      	bne.n	800a4d4 <USB_EPStartXfer+0xec>
 800a4d2:	e177      	b.n	800a7c4 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	785b      	ldrb	r3, [r3, #1]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d172      	bne.n	800a5c2 <USB_EPStartXfer+0x1da>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	4ab4      	ldr	r2, [pc, #720]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a4e4:	4694      	mov	ip, r2
 800a4e6:	4463      	add	r3, ip
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	49b0      	ldr	r1, [pc, #704]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a4f2:	468c      	mov	ip, r1
 800a4f4:	4463      	add	r3, ip
 800a4f6:	0412      	lsls	r2, r2, #16
 800a4f8:	0c12      	lsrs	r2, r2, #16
 800a4fa:	605a      	str	r2, [r3, #4]
 800a4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a500:	d91e      	bls.n	800a540 <USB_EPStartXfer+0x158>
 800a502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a504:	095b      	lsrs	r3, r3, #5
 800a506:	653b      	str	r3, [r7, #80]	; 0x50
 800a508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a50a:	221f      	movs	r2, #31
 800a50c:	4013      	ands	r3, r2
 800a50e:	d102      	bne.n	800a516 <USB_EPStartXfer+0x12e>
 800a510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a512:	3b01      	subs	r3, #1
 800a514:	653b      	str	r3, [r7, #80]	; 0x50
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4aa5      	ldr	r2, [pc, #660]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a51e:	4694      	mov	ip, r2
 800a520:	4463      	add	r3, ip
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a526:	069b      	lsls	r3, r3, #26
 800a528:	431a      	orrs	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	49a0      	ldr	r1, [pc, #640]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a532:	468c      	mov	ip, r1
 800a534:	4463      	add	r3, ip
 800a536:	2180      	movs	r1, #128	; 0x80
 800a538:	0609      	lsls	r1, r1, #24
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
 800a53e:	e065      	b.n	800a60c <USB_EPStartXfer+0x224>
 800a540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a542:	2b00      	cmp	r3, #0
 800a544:	d121      	bne.n	800a58a <USB_EPStartXfer+0x1a2>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	4a99      	ldr	r2, [pc, #612]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a54e:	4694      	mov	ip, r2
 800a550:	4463      	add	r3, ip
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	4996      	ldr	r1, [pc, #600]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a55c:	468c      	mov	ip, r1
 800a55e:	4463      	add	r3, ip
 800a560:	4997      	ldr	r1, [pc, #604]	; (800a7c0 <USB_EPStartXfer+0x3d8>)
 800a562:	400a      	ands	r2, r1
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	4a91      	ldr	r2, [pc, #580]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a56e:	4694      	mov	ip, r2
 800a570:	4463      	add	r3, ip
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	498e      	ldr	r1, [pc, #568]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a57c:	468c      	mov	ip, r1
 800a57e:	4463      	add	r3, ip
 800a580:	2180      	movs	r1, #128	; 0x80
 800a582:	0609      	lsls	r1, r1, #24
 800a584:	430a      	orrs	r2, r1
 800a586:	605a      	str	r2, [r3, #4]
 800a588:	e040      	b.n	800a60c <USB_EPStartXfer+0x224>
 800a58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	653b      	str	r3, [r7, #80]	; 0x50
 800a590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a592:	2201      	movs	r2, #1
 800a594:	4013      	ands	r3, r2
 800a596:	d002      	beq.n	800a59e <USB_EPStartXfer+0x1b6>
 800a598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59a:	3301      	adds	r3, #1
 800a59c:	653b      	str	r3, [r7, #80]	; 0x50
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4a83      	ldr	r2, [pc, #524]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a5a6:	4694      	mov	ip, r2
 800a5a8:	4463      	add	r3, ip
 800a5aa:	6859      	ldr	r1, [r3, #4]
 800a5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ae:	069a      	lsls	r2, r3, #26
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	487f      	ldr	r0, [pc, #508]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a5b8:	4684      	mov	ip, r0
 800a5ba:	4463      	add	r3, ip
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
 800a5c0:	e024      	b.n	800a60c <USB_EPStartXfer+0x224>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d120      	bne.n	800a60c <USB_EPStartXfer+0x224>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4a78      	ldr	r2, [pc, #480]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a5d2:	4694      	mov	ip, r2
 800a5d4:	4463      	add	r3, ip
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4975      	ldr	r1, [pc, #468]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a5e0:	468c      	mov	ip, r1
 800a5e2:	4463      	add	r3, ip
 800a5e4:	0412      	lsls	r2, r2, #16
 800a5e6:	0c12      	lsrs	r2, r2, #16
 800a5e8:	605a      	str	r2, [r3, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	4a70      	ldr	r2, [pc, #448]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a5f2:	4694      	mov	ip, r2
 800a5f4:	4463      	add	r3, ip
 800a5f6:	6859      	ldr	r1, [r3, #4]
 800a5f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fa:	041a      	lsls	r2, r3, #16
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	486c      	ldr	r0, [pc, #432]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a604:	4684      	mov	ip, r0
 800a606:	4463      	add	r3, ip
 800a608:	430a      	orrs	r2, r1
 800a60a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800a60c:	201a      	movs	r0, #26
 800a60e:	183b      	adds	r3, r7, r0
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	8912      	ldrh	r2, [r2, #8]
 800a614:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6959      	ldr	r1, [r3, #20]
 800a61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61c:	b29c      	uxth	r4, r3
 800a61e:	183b      	adds	r3, r7, r0
 800a620:	881a      	ldrh	r2, [r3, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	0023      	movs	r3, r4
 800a626:	f001 f941 	bl	800b8ac <USB_WritePMA>
            ep->xfer_buff += len;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	695a      	ldr	r2, [r3, #20]
 800a62e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a630:	18d2      	adds	r2, r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6a1a      	ldr	r2, [r3, #32]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d906      	bls.n	800a650 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a648:	1ad2      	subs	r2, r2, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	621a      	str	r2, [r3, #32]
 800a64e:	e005      	b.n	800a65c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d172      	bne.n	800a74a <USB_EPStartXfer+0x362>
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00db      	lsls	r3, r3, #3
 800a66a:	4a52      	ldr	r2, [pc, #328]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a66c:	4694      	mov	ip, r2
 800a66e:	4463      	add	r3, ip
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	494e      	ldr	r1, [pc, #312]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a67a:	468c      	mov	ip, r1
 800a67c:	4463      	add	r3, ip
 800a67e:	0412      	lsls	r2, r2, #16
 800a680:	0c12      	lsrs	r2, r2, #16
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a686:	2b3e      	cmp	r3, #62	; 0x3e
 800a688:	d91e      	bls.n	800a6c8 <USB_EPStartXfer+0x2e0>
 800a68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68c:	095b      	lsrs	r3, r3, #5
 800a68e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a692:	221f      	movs	r2, #31
 800a694:	4013      	ands	r3, r2
 800a696:	d102      	bne.n	800a69e <USB_EPStartXfer+0x2b6>
 800a698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a69a:	3b01      	subs	r3, #1
 800a69c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4a43      	ldr	r2, [pc, #268]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a6a6:	4694      	mov	ip, r2
 800a6a8:	4463      	add	r3, ip
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ae:	069b      	lsls	r3, r3, #26
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	493e      	ldr	r1, [pc, #248]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a6ba:	468c      	mov	ip, r1
 800a6bc:	4463      	add	r3, ip
 800a6be:	2180      	movs	r1, #128	; 0x80
 800a6c0:	0609      	lsls	r1, r1, #24
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	e065      	b.n	800a794 <USB_EPStartXfer+0x3ac>
 800a6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d121      	bne.n	800a712 <USB_EPStartXfer+0x32a>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4a37      	ldr	r2, [pc, #220]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a6d6:	4694      	mov	ip, r2
 800a6d8:	4463      	add	r3, ip
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4934      	ldr	r1, [pc, #208]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a6e4:	468c      	mov	ip, r1
 800a6e6:	4463      	add	r3, ip
 800a6e8:	4935      	ldr	r1, [pc, #212]	; (800a7c0 <USB_EPStartXfer+0x3d8>)
 800a6ea:	400a      	ands	r2, r1
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a6f6:	4694      	mov	ip, r2
 800a6f8:	4463      	add	r3, ip
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	492c      	ldr	r1, [pc, #176]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a704:	468c      	mov	ip, r1
 800a706:	4463      	add	r3, ip
 800a708:	2180      	movs	r1, #128	; 0x80
 800a70a:	0609      	lsls	r1, r1, #24
 800a70c:	430a      	orrs	r2, r1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e040      	b.n	800a794 <USB_EPStartXfer+0x3ac>
 800a712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a714:	085b      	lsrs	r3, r3, #1
 800a716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71a:	2201      	movs	r2, #1
 800a71c:	4013      	ands	r3, r2
 800a71e:	d002      	beq.n	800a726 <USB_EPStartXfer+0x33e>
 800a720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a722:	3301      	adds	r3, #1
 800a724:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	4a21      	ldr	r2, [pc, #132]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a72e:	4694      	mov	ip, r2
 800a730:	4463      	add	r3, ip
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a736:	069a      	lsls	r2, r3, #26
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	481d      	ldr	r0, [pc, #116]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a740:	4684      	mov	ip, r0
 800a742:	4463      	add	r3, ip
 800a744:	430a      	orrs	r2, r1
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e024      	b.n	800a794 <USB_EPStartXfer+0x3ac>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d120      	bne.n	800a794 <USB_EPStartXfer+0x3ac>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	4a16      	ldr	r2, [pc, #88]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a75a:	4694      	mov	ip, r2
 800a75c:	4463      	add	r3, ip
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	4913      	ldr	r1, [pc, #76]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a768:	468c      	mov	ip, r1
 800a76a:	4463      	add	r3, ip
 800a76c:	0412      	lsls	r2, r2, #16
 800a76e:	0c12      	lsrs	r2, r2, #16
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	4a0e      	ldr	r2, [pc, #56]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a77a:	4694      	mov	ip, r2
 800a77c:	4463      	add	r3, ip
 800a77e:	6819      	ldr	r1, [r3, #0]
 800a780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a782:	041a      	lsls	r2, r3, #16
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	480a      	ldr	r0, [pc, #40]	; (800a7b4 <USB_EPStartXfer+0x3cc>)
 800a78c:	4684      	mov	ip, r0
 800a78e:	4463      	add	r3, ip
 800a790:	430a      	orrs	r2, r1
 800a792:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a794:	201a      	movs	r0, #26
 800a796:	183b      	adds	r3, r7, r0
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	88d2      	ldrh	r2, [r2, #6]
 800a79c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	6959      	ldr	r1, [r3, #20]
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a4:	b29c      	uxth	r4, r3
 800a7a6:	183b      	adds	r3, r7, r0
 800a7a8:	881a      	ldrh	r2, [r3, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	0023      	movs	r3, r4
 800a7ae:	f001 f87d 	bl	800b8ac <USB_WritePMA>
 800a7b2:	e32c      	b.n	800ae0e <USB_EPStartXfer+0xa26>
 800a7b4:	40009800 	.word	0x40009800
 800a7b8:	07ff8f8f 	.word	0x07ff8f8f
 800a7bc:	00008180 	.word	0x00008180
 800a7c0:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d172      	bne.n	800a8b2 <USB_EPStartXfer+0x4ca>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	4ad7      	ldr	r2, [pc, #860]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a7d4:	4694      	mov	ip, r2
 800a7d6:	4463      	add	r3, ip
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	49d3      	ldr	r1, [pc, #844]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a7e2:	468c      	mov	ip, r1
 800a7e4:	4463      	add	r3, ip
 800a7e6:	0412      	lsls	r2, r2, #16
 800a7e8:	0c12      	lsrs	r2, r2, #16
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f0:	d91e      	bls.n	800a830 <USB_EPStartXfer+0x448>
 800a7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f4:	095b      	lsrs	r3, r3, #5
 800a7f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7fa:	221f      	movs	r2, #31
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	d102      	bne.n	800a806 <USB_EPStartXfer+0x41e>
 800a800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a802:	3b01      	subs	r3, #1
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	4ac8      	ldr	r2, [pc, #800]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a80e:	4694      	mov	ip, r2
 800a810:	4463      	add	r3, ip
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a816:	069b      	lsls	r3, r3, #26
 800a818:	431a      	orrs	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	49c3      	ldr	r1, [pc, #780]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a822:	468c      	mov	ip, r1
 800a824:	4463      	add	r3, ip
 800a826:	2180      	movs	r1, #128	; 0x80
 800a828:	0609      	lsls	r1, r1, #24
 800a82a:	430a      	orrs	r2, r1
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e065      	b.n	800a8fc <USB_EPStartXfer+0x514>
 800a830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a832:	2b00      	cmp	r3, #0
 800a834:	d121      	bne.n	800a87a <USB_EPStartXfer+0x492>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	4abc      	ldr	r2, [pc, #752]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a83e:	4694      	mov	ip, r2
 800a840:	4463      	add	r3, ip
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	00db      	lsls	r3, r3, #3
 800a84a:	49b9      	ldr	r1, [pc, #740]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a84c:	468c      	mov	ip, r1
 800a84e:	4463      	add	r3, ip
 800a850:	49b8      	ldr	r1, [pc, #736]	; (800ab34 <USB_EPStartXfer+0x74c>)
 800a852:	400a      	ands	r2, r1
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4ab4      	ldr	r2, [pc, #720]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a85e:	4694      	mov	ip, r2
 800a860:	4463      	add	r3, ip
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	49b1      	ldr	r1, [pc, #708]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a86c:	468c      	mov	ip, r1
 800a86e:	4463      	add	r3, ip
 800a870:	2180      	movs	r1, #128	; 0x80
 800a872:	0609      	lsls	r1, r1, #24
 800a874:	430a      	orrs	r2, r1
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	e040      	b.n	800a8fc <USB_EPStartXfer+0x514>
 800a87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a87c:	085b      	lsrs	r3, r3, #1
 800a87e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a882:	2201      	movs	r2, #1
 800a884:	4013      	ands	r3, r2
 800a886:	d002      	beq.n	800a88e <USB_EPStartXfer+0x4a6>
 800a888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88a:	3301      	adds	r3, #1
 800a88c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4aa6      	ldr	r2, [pc, #664]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a896:	4694      	mov	ip, r2
 800a898:	4463      	add	r3, ip
 800a89a:	6819      	ldr	r1, [r3, #0]
 800a89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a89e:	069a      	lsls	r2, r3, #26
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	48a2      	ldr	r0, [pc, #648]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a8a8:	4684      	mov	ip, r0
 800a8aa:	4463      	add	r3, ip
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e024      	b.n	800a8fc <USB_EPStartXfer+0x514>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d120      	bne.n	800a8fc <USB_EPStartXfer+0x514>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	4a9b      	ldr	r2, [pc, #620]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a8c2:	4694      	mov	ip, r2
 800a8c4:	4463      	add	r3, ip
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	4998      	ldr	r1, [pc, #608]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a8d0:	468c      	mov	ip, r1
 800a8d2:	4463      	add	r3, ip
 800a8d4:	0412      	lsls	r2, r2, #16
 800a8d6:	0c12      	lsrs	r2, r2, #16
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	4a93      	ldr	r2, [pc, #588]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a8e2:	4694      	mov	ip, r2
 800a8e4:	4463      	add	r3, ip
 800a8e6:	6819      	ldr	r1, [r3, #0]
 800a8e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ea:	041a      	lsls	r2, r3, #16
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	488f      	ldr	r0, [pc, #572]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a8f4:	4684      	mov	ip, r0
 800a8f6:	4463      	add	r3, ip
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a8fc:	201a      	movs	r0, #26
 800a8fe:	183b      	adds	r3, r7, r0
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	88d2      	ldrh	r2, [r2, #6]
 800a904:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	6959      	ldr	r1, [r3, #20]
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	b29c      	uxth	r4, r3
 800a90e:	183b      	adds	r3, r7, r0
 800a910:	881a      	ldrh	r2, [r3, #0]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	0023      	movs	r3, r4
 800a916:	f000 ffc9 	bl	800b8ac <USB_WritePMA>
            ep->xfer_buff += len;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	695a      	ldr	r2, [r3, #20]
 800a91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a920:	18d2      	adds	r2, r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	6a1a      	ldr	r2, [r3, #32]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d906      	bls.n	800a940 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6a1a      	ldr	r2, [r3, #32]
 800a936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a938:	1ad2      	subs	r2, r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	621a      	str	r2, [r3, #32]
 800a93e:	e005      	b.n	800a94c <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2200      	movs	r2, #0
 800a94a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d172      	bne.n	800aa3a <USB_EPStartXfer+0x652>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	4a75      	ldr	r2, [pc, #468]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a95c:	4694      	mov	ip, r2
 800a95e:	4463      	add	r3, ip
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	4971      	ldr	r1, [pc, #452]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a96a:	468c      	mov	ip, r1
 800a96c:	4463      	add	r3, ip
 800a96e:	0412      	lsls	r2, r2, #16
 800a970:	0c12      	lsrs	r2, r2, #16
 800a972:	605a      	str	r2, [r3, #4]
 800a974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a976:	2b3e      	cmp	r3, #62	; 0x3e
 800a978:	d91e      	bls.n	800a9b8 <USB_EPStartXfer+0x5d0>
 800a97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97c:	095b      	lsrs	r3, r3, #5
 800a97e:	647b      	str	r3, [r7, #68]	; 0x44
 800a980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a982:	221f      	movs	r2, #31
 800a984:	4013      	ands	r3, r2
 800a986:	d102      	bne.n	800a98e <USB_EPStartXfer+0x5a6>
 800a988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98a:	3b01      	subs	r3, #1
 800a98c:	647b      	str	r3, [r7, #68]	; 0x44
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	4a66      	ldr	r2, [pc, #408]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a996:	4694      	mov	ip, r2
 800a998:	4463      	add	r3, ip
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99e:	069b      	lsls	r3, r3, #26
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	00db      	lsls	r3, r3, #3
 800a9a8:	4961      	ldr	r1, [pc, #388]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a9aa:	468c      	mov	ip, r1
 800a9ac:	4463      	add	r3, ip
 800a9ae:	2180      	movs	r1, #128	; 0x80
 800a9b0:	0609      	lsls	r1, r1, #24
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e065      	b.n	800aa84 <USB_EPStartXfer+0x69c>
 800a9b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d121      	bne.n	800aa02 <USB_EPStartXfer+0x61a>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	4a5a      	ldr	r2, [pc, #360]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a9c6:	4694      	mov	ip, r2
 800a9c8:	4463      	add	r3, ip
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	4957      	ldr	r1, [pc, #348]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a9d4:	468c      	mov	ip, r1
 800a9d6:	4463      	add	r3, ip
 800a9d8:	4956      	ldr	r1, [pc, #344]	; (800ab34 <USB_EPStartXfer+0x74c>)
 800a9da:	400a      	ands	r2, r1
 800a9dc:	605a      	str	r2, [r3, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4a52      	ldr	r2, [pc, #328]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a9e6:	4694      	mov	ip, r2
 800a9e8:	4463      	add	r3, ip
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	494f      	ldr	r1, [pc, #316]	; (800ab30 <USB_EPStartXfer+0x748>)
 800a9f4:	468c      	mov	ip, r1
 800a9f6:	4463      	add	r3, ip
 800a9f8:	2180      	movs	r1, #128	; 0x80
 800a9fa:	0609      	lsls	r1, r1, #24
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	605a      	str	r2, [r3, #4]
 800aa00:	e040      	b.n	800aa84 <USB_EPStartXfer+0x69c>
 800aa02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	647b      	str	r3, [r7, #68]	; 0x44
 800aa08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	d002      	beq.n	800aa16 <USB_EPStartXfer+0x62e>
 800aa10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa12:	3301      	adds	r3, #1
 800aa14:	647b      	str	r3, [r7, #68]	; 0x44
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	4a44      	ldr	r2, [pc, #272]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa1e:	4694      	mov	ip, r2
 800aa20:	4463      	add	r3, ip
 800aa22:	6859      	ldr	r1, [r3, #4]
 800aa24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa26:	069a      	lsls	r2, r3, #26
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	4840      	ldr	r0, [pc, #256]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa30:	4684      	mov	ip, r0
 800aa32:	4463      	add	r3, ip
 800aa34:	430a      	orrs	r2, r1
 800aa36:	605a      	str	r2, [r3, #4]
 800aa38:	e024      	b.n	800aa84 <USB_EPStartXfer+0x69c>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d120      	bne.n	800aa84 <USB_EPStartXfer+0x69c>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	4a39      	ldr	r2, [pc, #228]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa4a:	4694      	mov	ip, r2
 800aa4c:	4463      	add	r3, ip
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	4936      	ldr	r1, [pc, #216]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa58:	468c      	mov	ip, r1
 800aa5a:	4463      	add	r3, ip
 800aa5c:	0412      	lsls	r2, r2, #16
 800aa5e:	0c12      	lsrs	r2, r2, #16
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	4a31      	ldr	r2, [pc, #196]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa6a:	4694      	mov	ip, r2
 800aa6c:	4463      	add	r3, ip
 800aa6e:	6859      	ldr	r1, [r3, #4]
 800aa70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa72:	041a      	lsls	r2, r3, #16
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	482d      	ldr	r0, [pc, #180]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aa7c:	4684      	mov	ip, r0
 800aa7e:	4463      	add	r3, ip
 800aa80:	430a      	orrs	r2, r1
 800aa82:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800aa84:	201a      	movs	r0, #26
 800aa86:	183b      	adds	r3, r7, r0
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	8912      	ldrh	r2, [r2, #8]
 800aa8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6959      	ldr	r1, [r3, #20]
 800aa92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa94:	b29c      	uxth	r4, r3
 800aa96:	183b      	adds	r3, r7, r0
 800aa98:	881a      	ldrh	r2, [r3, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	0023      	movs	r3, r4
 800aa9e:	f000 ff05 	bl	800b8ac <USB_WritePMA>
 800aaa2:	e1b4      	b.n	800ae0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	18d3      	adds	r3, r2, r3
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a20      	ldr	r2, [pc, #128]	; (800ab38 <USB_EPStartXfer+0x750>)
 800aab8:	4013      	ands	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	18d3      	adds	r3, r2, r3
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	491c      	ldr	r1, [pc, #112]	; (800ab3c <USB_EPStartXfer+0x754>)
 800aaca:	430a      	orrs	r2, r1
 800aacc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	4a16      	ldr	r2, [pc, #88]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	4913      	ldr	r1, [pc, #76]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aae4:	468c      	mov	ip, r1
 800aae6:	4463      	add	r3, ip
 800aae8:	0412      	lsls	r2, r2, #16
 800aaea:	0c12      	lsrs	r2, r2, #16
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4a0e      	ldr	r2, [pc, #56]	; (800ab30 <USB_EPStartXfer+0x748>)
 800aaf6:	4694      	mov	ip, r2
 800aaf8:	4463      	add	r3, ip
 800aafa:	6819      	ldr	r1, [r3, #0]
 800aafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aafe:	041a      	lsls	r2, r3, #16
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	480a      	ldr	r0, [pc, #40]	; (800ab30 <USB_EPStartXfer+0x748>)
 800ab08:	4684      	mov	ip, r0
 800ab0a:	4463      	add	r3, ip
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ab10:	201a      	movs	r0, #26
 800ab12:	183b      	adds	r3, r7, r0
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	88d2      	ldrh	r2, [r2, #6]
 800ab18:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6959      	ldr	r1, [r3, #20]
 800ab1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab20:	b29c      	uxth	r4, r3
 800ab22:	183b      	adds	r3, r7, r0
 800ab24:	881a      	ldrh	r2, [r3, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	0023      	movs	r3, r4
 800ab2a:	f000 febf 	bl	800b8ac <USB_WritePMA>
 800ab2e:	e16e      	b.n	800ae0e <USB_EPStartXfer+0xa26>
 800ab30:	40009800 	.word	0x40009800
 800ab34:	83ffffff 	.word	0x83ffffff
 800ab38:	07ff8e8f 	.word	0x07ff8e8f
 800ab3c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	6a1a      	ldr	r2, [r3, #32]
 800ab44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	18d3      	adds	r3, r2, r3
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2240      	movs	r2, #64	; 0x40
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	d100      	bne.n	800ab60 <USB_EPStartXfer+0x778>
 800ab5e:	e0ab      	b.n	800acb8 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d172      	bne.n	800ac4e <USB_EPStartXfer+0x866>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	4adc      	ldr	r2, [pc, #880]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ab70:	4694      	mov	ip, r2
 800ab72:	4463      	add	r3, ip
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	49d8      	ldr	r1, [pc, #864]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ab7e:	468c      	mov	ip, r1
 800ab80:	4463      	add	r3, ip
 800ab82:	0412      	lsls	r2, r2, #16
 800ab84:	0c12      	lsrs	r2, r2, #16
 800ab86:	605a      	str	r2, [r3, #4]
 800ab88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8a:	2b3e      	cmp	r3, #62	; 0x3e
 800ab8c:	d91e      	bls.n	800abcc <USB_EPStartXfer+0x7e4>
 800ab8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab90:	095b      	lsrs	r3, r3, #5
 800ab92:	643b      	str	r3, [r7, #64]	; 0x40
 800ab94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab96:	221f      	movs	r2, #31
 800ab98:	4013      	ands	r3, r2
 800ab9a:	d102      	bne.n	800aba2 <USB_EPStartXfer+0x7ba>
 800ab9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	643b      	str	r3, [r7, #64]	; 0x40
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	4acd      	ldr	r2, [pc, #820]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800abaa:	4694      	mov	ip, r2
 800abac:	4463      	add	r3, ip
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb2:	069b      	lsls	r3, r3, #26
 800abb4:	431a      	orrs	r2, r3
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	49c8      	ldr	r1, [pc, #800]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800abbe:	468c      	mov	ip, r1
 800abc0:	4463      	add	r3, ip
 800abc2:	2180      	movs	r1, #128	; 0x80
 800abc4:	0609      	lsls	r1, r1, #24
 800abc6:	430a      	orrs	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
 800abca:	e065      	b.n	800ac98 <USB_EPStartXfer+0x8b0>
 800abcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d121      	bne.n	800ac16 <USB_EPStartXfer+0x82e>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	4ac1      	ldr	r2, [pc, #772]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800abda:	4694      	mov	ip, r2
 800abdc:	4463      	add	r3, ip
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	49be      	ldr	r1, [pc, #760]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800abe8:	468c      	mov	ip, r1
 800abea:	4463      	add	r3, ip
 800abec:	49bd      	ldr	r1, [pc, #756]	; (800aee4 <USB_EPStartXfer+0xafc>)
 800abee:	400a      	ands	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	4ab9      	ldr	r2, [pc, #740]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800abfa:	4694      	mov	ip, r2
 800abfc:	4463      	add	r3, ip
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	49b6      	ldr	r1, [pc, #728]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac08:	468c      	mov	ip, r1
 800ac0a:	4463      	add	r3, ip
 800ac0c:	2180      	movs	r1, #128	; 0x80
 800ac0e:	0609      	lsls	r1, r1, #24
 800ac10:	430a      	orrs	r2, r1
 800ac12:	605a      	str	r2, [r3, #4]
 800ac14:	e040      	b.n	800ac98 <USB_EPStartXfer+0x8b0>
 800ac16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4013      	ands	r3, r2
 800ac22:	d002      	beq.n	800ac2a <USB_EPStartXfer+0x842>
 800ac24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac26:	3301      	adds	r3, #1
 800ac28:	643b      	str	r3, [r7, #64]	; 0x40
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4aab      	ldr	r2, [pc, #684]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac32:	4694      	mov	ip, r2
 800ac34:	4463      	add	r3, ip
 800ac36:	6859      	ldr	r1, [r3, #4]
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	069a      	lsls	r2, r3, #26
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	00db      	lsls	r3, r3, #3
 800ac42:	48a7      	ldr	r0, [pc, #668]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac44:	4684      	mov	ip, r0
 800ac46:	4463      	add	r3, ip
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	605a      	str	r2, [r3, #4]
 800ac4c:	e024      	b.n	800ac98 <USB_EPStartXfer+0x8b0>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d120      	bne.n	800ac98 <USB_EPStartXfer+0x8b0>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4aa0      	ldr	r2, [pc, #640]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac5e:	4694      	mov	ip, r2
 800ac60:	4463      	add	r3, ip
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	499d      	ldr	r1, [pc, #628]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac6c:	468c      	mov	ip, r1
 800ac6e:	4463      	add	r3, ip
 800ac70:	0412      	lsls	r2, r2, #16
 800ac72:	0c12      	lsrs	r2, r2, #16
 800ac74:	605a      	str	r2, [r3, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	4a98      	ldr	r2, [pc, #608]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac7e:	4694      	mov	ip, r2
 800ac80:	4463      	add	r3, ip
 800ac82:	6859      	ldr	r1, [r3, #4]
 800ac84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac86:	041a      	lsls	r2, r3, #16
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	4894      	ldr	r0, [pc, #592]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ac90:	4684      	mov	ip, r0
 800ac92:	4463      	add	r3, ip
 800ac94:	430a      	orrs	r2, r1
 800ac96:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ac98:	201a      	movs	r0, #26
 800ac9a:	183b      	adds	r3, r7, r0
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	8912      	ldrh	r2, [r2, #8]
 800aca0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	6959      	ldr	r1, [r3, #20]
 800aca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aca8:	b29c      	uxth	r4, r3
 800acaa:	183b      	adds	r3, r7, r0
 800acac:	881a      	ldrh	r2, [r3, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	0023      	movs	r3, r4
 800acb2:	f000 fdfb 	bl	800b8ac <USB_WritePMA>
 800acb6:	e0aa      	b.n	800ae0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	785b      	ldrb	r3, [r3, #1]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d172      	bne.n	800ada6 <USB_EPStartXfer+0x9be>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	4a86      	ldr	r2, [pc, #536]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800acc8:	4694      	mov	ip, r2
 800acca:	4463      	add	r3, ip
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	4982      	ldr	r1, [pc, #520]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800acd6:	468c      	mov	ip, r1
 800acd8:	4463      	add	r3, ip
 800acda:	0412      	lsls	r2, r2, #16
 800acdc:	0c12      	lsrs	r2, r2, #16
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace2:	2b3e      	cmp	r3, #62	; 0x3e
 800ace4:	d91e      	bls.n	800ad24 <USB_EPStartXfer+0x93c>
 800ace6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace8:	095b      	lsrs	r3, r3, #5
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acee:	221f      	movs	r2, #31
 800acf0:	4013      	ands	r3, r2
 800acf2:	d102      	bne.n	800acfa <USB_EPStartXfer+0x912>
 800acf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf6:	3b01      	subs	r3, #1
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	4a77      	ldr	r2, [pc, #476]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad02:	4694      	mov	ip, r2
 800ad04:	4463      	add	r3, ip
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0a:	069b      	lsls	r3, r3, #26
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4972      	ldr	r1, [pc, #456]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad16:	468c      	mov	ip, r1
 800ad18:	4463      	add	r3, ip
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	0609      	lsls	r1, r1, #24
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e065      	b.n	800adf0 <USB_EPStartXfer+0xa08>
 800ad24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d121      	bne.n	800ad6e <USB_EPStartXfer+0x986>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	4a6b      	ldr	r2, [pc, #428]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad32:	4694      	mov	ip, r2
 800ad34:	4463      	add	r3, ip
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	4968      	ldr	r1, [pc, #416]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad40:	468c      	mov	ip, r1
 800ad42:	4463      	add	r3, ip
 800ad44:	4967      	ldr	r1, [pc, #412]	; (800aee4 <USB_EPStartXfer+0xafc>)
 800ad46:	400a      	ands	r2, r1
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	4a63      	ldr	r2, [pc, #396]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad52:	4694      	mov	ip, r2
 800ad54:	4463      	add	r3, ip
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	00db      	lsls	r3, r3, #3
 800ad5e:	4960      	ldr	r1, [pc, #384]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad60:	468c      	mov	ip, r1
 800ad62:	4463      	add	r3, ip
 800ad64:	2180      	movs	r1, #128	; 0x80
 800ad66:	0609      	lsls	r1, r1, #24
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	e040      	b.n	800adf0 <USB_EPStartXfer+0xa08>
 800ad6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad76:	2201      	movs	r2, #1
 800ad78:	4013      	ands	r3, r2
 800ad7a:	d002      	beq.n	800ad82 <USB_EPStartXfer+0x99a>
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	3301      	adds	r3, #1
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4a55      	ldr	r2, [pc, #340]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad8a:	4694      	mov	ip, r2
 800ad8c:	4463      	add	r3, ip
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad92:	069a      	lsls	r2, r3, #26
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	4851      	ldr	r0, [pc, #324]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ad9c:	4684      	mov	ip, r0
 800ad9e:	4463      	add	r3, ip
 800ada0:	430a      	orrs	r2, r1
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e024      	b.n	800adf0 <USB_EPStartXfer+0xa08>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d120      	bne.n	800adf0 <USB_EPStartXfer+0xa08>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	4a4a      	ldr	r2, [pc, #296]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800adb6:	4694      	mov	ip, r2
 800adb8:	4463      	add	r3, ip
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	4947      	ldr	r1, [pc, #284]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800adc4:	468c      	mov	ip, r1
 800adc6:	4463      	add	r3, ip
 800adc8:	0412      	lsls	r2, r2, #16
 800adca:	0c12      	lsrs	r2, r2, #16
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4a42      	ldr	r2, [pc, #264]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800add6:	4694      	mov	ip, r2
 800add8:	4463      	add	r3, ip
 800adda:	6819      	ldr	r1, [r3, #0]
 800addc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adde:	041a      	lsls	r2, r3, #16
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	483e      	ldr	r0, [pc, #248]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ade8:	4684      	mov	ip, r0
 800adea:	4463      	add	r3, ip
 800adec:	430a      	orrs	r2, r1
 800adee:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adf0:	201a      	movs	r0, #26
 800adf2:	183b      	adds	r3, r7, r0
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	88d2      	ldrh	r2, [r2, #6]
 800adf8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6959      	ldr	r1, [r3, #20]
 800adfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae00:	b29c      	uxth	r4, r3
 800ae02:	183b      	adds	r3, r7, r0
 800ae04:	881a      	ldrh	r2, [r3, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	0023      	movs	r3, r4
 800ae0a:	f000 fd4f 	bl	800b8ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	18d3      	adds	r3, r2, r3
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a33      	ldr	r2, [pc, #204]	; (800aee8 <USB_EPStartXfer+0xb00>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2210      	movs	r2, #16
 800ae24:	4053      	eors	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	4053      	eors	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	18d3      	adds	r3, r2, r3
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	492b      	ldr	r1, [pc, #172]	; (800aeec <USB_EPStartXfer+0xb04>)
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	f000 fb97 	bl	800b574 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	7a9b      	ldrb	r3, [r3, #10]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d000      	beq.n	800ae50 <USB_EPStartXfer+0xa68>
 800ae4e:	e090      	b.n	800af72 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d909      	bls.n	800ae70 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	699a      	ldr	r2, [r3, #24]
 800ae66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	619a      	str	r2, [r3, #24]
 800ae6e:	e005      	b.n	800ae7c <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	00db      	lsls	r3, r3, #3
 800ae82:	4a17      	ldr	r2, [pc, #92]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ae84:	4694      	mov	ip, r2
 800ae86:	4463      	add	r3, ip
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4913      	ldr	r1, [pc, #76]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800ae92:	468c      	mov	ip, r1
 800ae94:	4463      	add	r3, ip
 800ae96:	0412      	lsls	r2, r2, #16
 800ae98:	0c12      	lsrs	r2, r2, #16
 800ae9a:	605a      	str	r2, [r3, #4]
 800ae9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae9e:	2b3e      	cmp	r3, #62	; 0x3e
 800aea0:	d926      	bls.n	800aef0 <USB_EPStartXfer+0xb08>
 800aea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aea4:	095b      	lsrs	r3, r3, #5
 800aea6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeaa:	221f      	movs	r2, #31
 800aeac:	4013      	ands	r3, r2
 800aeae:	d102      	bne.n	800aeb6 <USB_EPStartXfer+0xace>
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	4a08      	ldr	r2, [pc, #32]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800aebe:	4694      	mov	ip, r2
 800aec0:	4463      	add	r3, ip
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	069b      	lsls	r3, r3, #26
 800aec8:	431a      	orrs	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4903      	ldr	r1, [pc, #12]	; (800aee0 <USB_EPStartXfer+0xaf8>)
 800aed2:	468c      	mov	ip, r1
 800aed4:	4463      	add	r3, ip
 800aed6:	2180      	movs	r1, #128	; 0x80
 800aed8:	0609      	lsls	r1, r1, #24
 800aeda:	430a      	orrs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]
 800aede:	e32d      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800aee0:	40009800 	.word	0x40009800
 800aee4:	83ffffff 	.word	0x83ffffff
 800aee8:	07ff8fbf 	.word	0x07ff8fbf
 800aeec:	00008080 	.word	0x00008080
 800aef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d121      	bne.n	800af3a <USB_EPStartXfer+0xb52>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	4ae0      	ldr	r2, [pc, #896]	; (800b280 <USB_EPStartXfer+0xe98>)
 800aefe:	4694      	mov	ip, r2
 800af00:	4463      	add	r3, ip
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	00db      	lsls	r3, r3, #3
 800af0a:	49dd      	ldr	r1, [pc, #884]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af0c:	468c      	mov	ip, r1
 800af0e:	4463      	add	r3, ip
 800af10:	49dc      	ldr	r1, [pc, #880]	; (800b284 <USB_EPStartXfer+0xe9c>)
 800af12:	400a      	ands	r2, r1
 800af14:	605a      	str	r2, [r3, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	4ad8      	ldr	r2, [pc, #864]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af1e:	4694      	mov	ip, r2
 800af20:	4463      	add	r3, ip
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	49d5      	ldr	r1, [pc, #852]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af2c:	468c      	mov	ip, r1
 800af2e:	4463      	add	r3, ip
 800af30:	2180      	movs	r1, #128	; 0x80
 800af32:	0609      	lsls	r1, r1, #24
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
 800af38:	e300      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800af3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3c:	085b      	lsrs	r3, r3, #1
 800af3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af42:	2201      	movs	r2, #1
 800af44:	4013      	ands	r3, r2
 800af46:	d002      	beq.n	800af4e <USB_EPStartXfer+0xb66>
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	3301      	adds	r3, #1
 800af4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4aca      	ldr	r2, [pc, #808]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af56:	4694      	mov	ip, r2
 800af58:	4463      	add	r3, ip
 800af5a:	6859      	ldr	r1, [r3, #4]
 800af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5e:	069a      	lsls	r2, r3, #26
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	48c6      	ldr	r0, [pc, #792]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af68:	4684      	mov	ip, r0
 800af6a:	4463      	add	r3, ip
 800af6c:	430a      	orrs	r2, r1
 800af6e:	605a      	str	r2, [r3, #4]
 800af70:	e2e4      	b.n	800b53c <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	78db      	ldrb	r3, [r3, #3]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d000      	beq.n	800af7c <USB_EPStartXfer+0xb94>
 800af7a:	e189      	b.n	800b290 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	785b      	ldrb	r3, [r3, #1]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d000      	beq.n	800af86 <USB_EPStartXfer+0xb9e>
 800af84:	e078      	b.n	800b078 <USB_EPStartXfer+0xc90>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	4abc      	ldr	r2, [pc, #752]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af8e:	4694      	mov	ip, r2
 800af90:	4463      	add	r3, ip
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	49b9      	ldr	r1, [pc, #740]	; (800b280 <USB_EPStartXfer+0xe98>)
 800af9c:	468c      	mov	ip, r1
 800af9e:	4463      	add	r3, ip
 800afa0:	0412      	lsls	r2, r2, #16
 800afa2:	0c12      	lsrs	r2, r2, #16
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	2b3e      	cmp	r3, #62	; 0x3e
 800afac:	d920      	bls.n	800aff0 <USB_EPStartXfer+0xc08>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	095b      	lsrs	r3, r3, #5
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	221f      	movs	r2, #31
 800afbc:	4013      	ands	r3, r2
 800afbe:	d102      	bne.n	800afc6 <USB_EPStartXfer+0xbde>
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	3b01      	subs	r3, #1
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	00db      	lsls	r3, r3, #3
 800afcc:	4aac      	ldr	r2, [pc, #688]	; (800b280 <USB_EPStartXfer+0xe98>)
 800afce:	4694      	mov	ip, r2
 800afd0:	4463      	add	r3, ip
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd6:	069b      	lsls	r3, r3, #26
 800afd8:	431a      	orrs	r2, r3
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	49a7      	ldr	r1, [pc, #668]	; (800b280 <USB_EPStartXfer+0xe98>)
 800afe2:	468c      	mov	ip, r1
 800afe4:	4463      	add	r3, ip
 800afe6:	2180      	movs	r1, #128	; 0x80
 800afe8:	0609      	lsls	r1, r1, #24
 800afea:	430a      	orrs	r2, r1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e069      	b.n	800b0c4 <USB_EPStartXfer+0xcdc>
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d121      	bne.n	800b03c <USB_EPStartXfer+0xc54>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	00db      	lsls	r3, r3, #3
 800affe:	4aa0      	ldr	r2, [pc, #640]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b000:	4694      	mov	ip, r2
 800b002:	4463      	add	r3, ip
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	499c      	ldr	r1, [pc, #624]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b00e:	468c      	mov	ip, r1
 800b010:	4463      	add	r3, ip
 800b012:	499c      	ldr	r1, [pc, #624]	; (800b284 <USB_EPStartXfer+0xe9c>)
 800b014:	400a      	ands	r2, r1
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4a98      	ldr	r2, [pc, #608]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b020:	4694      	mov	ip, r2
 800b022:	4463      	add	r3, ip
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4994      	ldr	r1, [pc, #592]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b02e:	468c      	mov	ip, r1
 800b030:	4463      	add	r3, ip
 800b032:	2180      	movs	r1, #128	; 0x80
 800b034:	0609      	lsls	r1, r1, #24
 800b036:	430a      	orrs	r2, r1
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e043      	b.n	800b0c4 <USB_EPStartXfer+0xcdc>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	085b      	lsrs	r3, r3, #1
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	2201      	movs	r2, #1
 800b04a:	4013      	ands	r3, r2
 800b04c:	d002      	beq.n	800b054 <USB_EPStartXfer+0xc6c>
 800b04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b050:	3301      	adds	r3, #1
 800b052:	637b      	str	r3, [r7, #52]	; 0x34
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	00db      	lsls	r3, r3, #3
 800b05a:	4a89      	ldr	r2, [pc, #548]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b05c:	4694      	mov	ip, r2
 800b05e:	4463      	add	r3, ip
 800b060:	6819      	ldr	r1, [r3, #0]
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b064:	069a      	lsls	r2, r3, #26
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	4884      	ldr	r0, [pc, #528]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b06e:	4684      	mov	ip, r0
 800b070:	4463      	add	r3, ip
 800b072:	430a      	orrs	r2, r1
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	e025      	b.n	800b0c4 <USB_EPStartXfer+0xcdc>
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d121      	bne.n	800b0c4 <USB_EPStartXfer+0xcdc>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	4a7e      	ldr	r2, [pc, #504]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b088:	4694      	mov	ip, r2
 800b08a:	4463      	add	r3, ip
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	497a      	ldr	r1, [pc, #488]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b096:	468c      	mov	ip, r1
 800b098:	4463      	add	r3, ip
 800b09a:	0412      	lsls	r2, r2, #16
 800b09c:	0c12      	lsrs	r2, r2, #16
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	4a76      	ldr	r2, [pc, #472]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b0a8:	4694      	mov	ip, r2
 800b0aa:	4463      	add	r3, ip
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	041a      	lsls	r2, r3, #16
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	4871      	ldr	r0, [pc, #452]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b0bc:	4684      	mov	ip, r0
 800b0be:	4463      	add	r3, ip
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d000      	beq.n	800b0ce <USB_EPStartXfer+0xce6>
 800b0cc:	e078      	b.n	800b1c0 <USB_EPStartXfer+0xdd8>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	4a6a      	ldr	r2, [pc, #424]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b0d6:	4694      	mov	ip, r2
 800b0d8:	4463      	add	r3, ip
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	4967      	ldr	r1, [pc, #412]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b0e4:	468c      	mov	ip, r1
 800b0e6:	4463      	add	r3, ip
 800b0e8:	0412      	lsls	r2, r2, #16
 800b0ea:	0c12      	lsrs	r2, r2, #16
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b0f4:	d920      	bls.n	800b138 <USB_EPStartXfer+0xd50>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	095b      	lsrs	r3, r3, #5
 800b0fc:	633b      	str	r3, [r7, #48]	; 0x30
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	221f      	movs	r2, #31
 800b104:	4013      	ands	r3, r2
 800b106:	d102      	bne.n	800b10e <USB_EPStartXfer+0xd26>
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	3b01      	subs	r3, #1
 800b10c:	633b      	str	r3, [r7, #48]	; 0x30
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4a5a      	ldr	r2, [pc, #360]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b116:	4694      	mov	ip, r2
 800b118:	4463      	add	r3, ip
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	069b      	lsls	r3, r3, #26
 800b120:	431a      	orrs	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	4955      	ldr	r1, [pc, #340]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b12a:	468c      	mov	ip, r1
 800b12c:	4463      	add	r3, ip
 800b12e:	2180      	movs	r1, #128	; 0x80
 800b130:	0609      	lsls	r1, r1, #24
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	e069      	b.n	800b20c <USB_EPStartXfer+0xe24>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d121      	bne.n	800b184 <USB_EPStartXfer+0xd9c>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4a4e      	ldr	r2, [pc, #312]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b148:	4694      	mov	ip, r2
 800b14a:	4463      	add	r3, ip
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	494a      	ldr	r1, [pc, #296]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b156:	468c      	mov	ip, r1
 800b158:	4463      	add	r3, ip
 800b15a:	494a      	ldr	r1, [pc, #296]	; (800b284 <USB_EPStartXfer+0xe9c>)
 800b15c:	400a      	ands	r2, r1
 800b15e:	605a      	str	r2, [r3, #4]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	4a46      	ldr	r2, [pc, #280]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b168:	4694      	mov	ip, r2
 800b16a:	4463      	add	r3, ip
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	4942      	ldr	r1, [pc, #264]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b176:	468c      	mov	ip, r1
 800b178:	4463      	add	r3, ip
 800b17a:	2180      	movs	r1, #128	; 0x80
 800b17c:	0609      	lsls	r1, r1, #24
 800b17e:	430a      	orrs	r2, r1
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	e043      	b.n	800b20c <USB_EPStartXfer+0xe24>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	085b      	lsrs	r3, r3, #1
 800b18a:	633b      	str	r3, [r7, #48]	; 0x30
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2201      	movs	r2, #1
 800b192:	4013      	ands	r3, r2
 800b194:	d002      	beq.n	800b19c <USB_EPStartXfer+0xdb4>
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	3301      	adds	r3, #1
 800b19a:	633b      	str	r3, [r7, #48]	; 0x30
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	00db      	lsls	r3, r3, #3
 800b1a2:	4a37      	ldr	r2, [pc, #220]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b1a4:	4694      	mov	ip, r2
 800b1a6:	4463      	add	r3, ip
 800b1a8:	6859      	ldr	r1, [r3, #4]
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	069a      	lsls	r2, r3, #26
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	4832      	ldr	r0, [pc, #200]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b1b6:	4684      	mov	ip, r0
 800b1b8:	4463      	add	r3, ip
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
 800b1be:	e025      	b.n	800b20c <USB_EPStartXfer+0xe24>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d121      	bne.n	800b20c <USB_EPStartXfer+0xe24>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	00db      	lsls	r3, r3, #3
 800b1ce:	4a2c      	ldr	r2, [pc, #176]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b1d0:	4694      	mov	ip, r2
 800b1d2:	4463      	add	r3, ip
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	4928      	ldr	r1, [pc, #160]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b1de:	468c      	mov	ip, r1
 800b1e0:	4463      	add	r3, ip
 800b1e2:	0412      	lsls	r2, r2, #16
 800b1e4:	0c12      	lsrs	r2, r2, #16
 800b1e6:	605a      	str	r2, [r3, #4]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4a24      	ldr	r2, [pc, #144]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b1f0:	4694      	mov	ip, r2
 800b1f2:	4463      	add	r3, ip
 800b1f4:	6859      	ldr	r1, [r3, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	041a      	lsls	r2, r3, #16
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	481f      	ldr	r0, [pc, #124]	; (800b280 <USB_EPStartXfer+0xe98>)
 800b204:	4684      	mov	ip, r0
 800b206:	4463      	add	r3, ip
 800b208:	430a      	orrs	r2, r1
 800b20a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d100      	bne.n	800b216 <USB_EPStartXfer+0xe2e>
 800b214:	e192      	b.n	800b53c <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	18d3      	adds	r3, r2, r3
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	2126      	movs	r1, #38	; 0x26
 800b224:	187b      	adds	r3, r7, r1
 800b226:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b228:	187b      	adds	r3, r7, r1
 800b22a:	881a      	ldrh	r2, [r3, #0]
 800b22c:	2380      	movs	r3, #128	; 0x80
 800b22e:	01db      	lsls	r3, r3, #7
 800b230:	4013      	ands	r3, r2
 800b232:	d004      	beq.n	800b23e <USB_EPStartXfer+0xe56>
 800b234:	187b      	adds	r3, r7, r1
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	2240      	movs	r2, #64	; 0x40
 800b23a:	4013      	ands	r3, r2
 800b23c:	d10d      	bne.n	800b25a <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b23e:	2126      	movs	r1, #38	; 0x26
 800b240:	187b      	adds	r3, r7, r1
 800b242:	881a      	ldrh	r2, [r3, #0]
 800b244:	2380      	movs	r3, #128	; 0x80
 800b246:	01db      	lsls	r3, r3, #7
 800b248:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b24a:	d000      	beq.n	800b24e <USB_EPStartXfer+0xe66>
 800b24c:	e176      	b.n	800b53c <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b24e:	187b      	adds	r3, r7, r1
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	2240      	movs	r2, #64	; 0x40
 800b254:	4013      	ands	r3, r2
 800b256:	d000      	beq.n	800b25a <USB_EPStartXfer+0xe72>
 800b258:	e170      	b.n	800b53c <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	18d3      	adds	r3, r2, r3
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a08      	ldr	r2, [pc, #32]	; (800b288 <USB_EPStartXfer+0xea0>)
 800b268:	4013      	ands	r3, r2
 800b26a:	623b      	str	r3, [r7, #32]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	18d3      	adds	r3, r2, r3
 800b276:	6a3a      	ldr	r2, [r7, #32]
 800b278:	4904      	ldr	r1, [pc, #16]	; (800b28c <USB_EPStartXfer+0xea4>)
 800b27a:	430a      	orrs	r2, r1
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	e15d      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800b280:	40009800 	.word	0x40009800
 800b284:	83ffffff 	.word	0x83ffffff
 800b288:	07ff8f8f 	.word	0x07ff8f8f
 800b28c:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	78db      	ldrb	r3, [r3, #3]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d000      	beq.n	800b29a <USB_EPStartXfer+0xeb2>
 800b298:	e14e      	b.n	800b538 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d909      	bls.n	800b2ba <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	699a      	ldr	r2, [r3, #24]
 800b2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2b2:	1ad2      	subs	r2, r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	619a      	str	r2, [r3, #24]
 800b2b8:	e005      	b.n	800b2c6 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d172      	bne.n	800b3b4 <USB_EPStartXfer+0xfcc>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	4aaa      	ldr	r2, [pc, #680]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b2d6:	4694      	mov	ip, r2
 800b2d8:	4463      	add	r3, ip
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	49a7      	ldr	r1, [pc, #668]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b2e4:	468c      	mov	ip, r1
 800b2e6:	4463      	add	r3, ip
 800b2e8:	0412      	lsls	r2, r2, #16
 800b2ea:	0c12      	lsrs	r2, r2, #16
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2f0:	2b3e      	cmp	r3, #62	; 0x3e
 800b2f2:	d91e      	bls.n	800b332 <USB_EPStartXfer+0xf4a>
 800b2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2f6:	095b      	lsrs	r3, r3, #5
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2fc:	221f      	movs	r2, #31
 800b2fe:	4013      	ands	r3, r2
 800b300:	d102      	bne.n	800b308 <USB_EPStartXfer+0xf20>
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	3b01      	subs	r3, #1
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	4a9c      	ldr	r2, [pc, #624]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b310:	4694      	mov	ip, r2
 800b312:	4463      	add	r3, ip
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b318:	069b      	lsls	r3, r3, #26
 800b31a:	431a      	orrs	r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	4997      	ldr	r1, [pc, #604]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b324:	468c      	mov	ip, r1
 800b326:	4463      	add	r3, ip
 800b328:	2180      	movs	r1, #128	; 0x80
 800b32a:	0609      	lsls	r1, r1, #24
 800b32c:	430a      	orrs	r2, r1
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	e065      	b.n	800b3fe <USB_EPStartXfer+0x1016>
 800b332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b334:	2b00      	cmp	r3, #0
 800b336:	d121      	bne.n	800b37c <USB_EPStartXfer+0xf94>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	4a90      	ldr	r2, [pc, #576]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b340:	4694      	mov	ip, r2
 800b342:	4463      	add	r3, ip
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	498c      	ldr	r1, [pc, #560]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b34e:	468c      	mov	ip, r1
 800b350:	4463      	add	r3, ip
 800b352:	498c      	ldr	r1, [pc, #560]	; (800b584 <USB_EPStartXfer+0x119c>)
 800b354:	400a      	ands	r2, r1
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	4a88      	ldr	r2, [pc, #544]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b360:	4694      	mov	ip, r2
 800b362:	4463      	add	r3, ip
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	4984      	ldr	r1, [pc, #528]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b36e:	468c      	mov	ip, r1
 800b370:	4463      	add	r3, ip
 800b372:	2180      	movs	r1, #128	; 0x80
 800b374:	0609      	lsls	r1, r1, #24
 800b376:	430a      	orrs	r2, r1
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e040      	b.n	800b3fe <USB_EPStartXfer+0x1016>
 800b37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b37e:	085b      	lsrs	r3, r3, #1
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b384:	2201      	movs	r2, #1
 800b386:	4013      	ands	r3, r2
 800b388:	d002      	beq.n	800b390 <USB_EPStartXfer+0xfa8>
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	3301      	adds	r3, #1
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	00db      	lsls	r3, r3, #3
 800b396:	4a7a      	ldr	r2, [pc, #488]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b398:	4694      	mov	ip, r2
 800b39a:	4463      	add	r3, ip
 800b39c:	6819      	ldr	r1, [r3, #0]
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	069a      	lsls	r2, r3, #26
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4875      	ldr	r0, [pc, #468]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b3aa:	4684      	mov	ip, r0
 800b3ac:	4463      	add	r3, ip
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e024      	b.n	800b3fe <USB_EPStartXfer+0x1016>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d120      	bne.n	800b3fe <USB_EPStartXfer+0x1016>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	00db      	lsls	r3, r3, #3
 800b3c2:	4a6f      	ldr	r2, [pc, #444]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b3c4:	4694      	mov	ip, r2
 800b3c6:	4463      	add	r3, ip
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	496b      	ldr	r1, [pc, #428]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b3d2:	468c      	mov	ip, r1
 800b3d4:	4463      	add	r3, ip
 800b3d6:	0412      	lsls	r2, r2, #16
 800b3d8:	0c12      	lsrs	r2, r2, #16
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4a67      	ldr	r2, [pc, #412]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b3e4:	4694      	mov	ip, r2
 800b3e6:	4463      	add	r3, ip
 800b3e8:	6819      	ldr	r1, [r3, #0]
 800b3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3ec:	041a      	lsls	r2, r3, #16
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	4862      	ldr	r0, [pc, #392]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b3f6:	4684      	mov	ip, r0
 800b3f8:	4463      	add	r3, ip
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	785b      	ldrb	r3, [r3, #1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d172      	bne.n	800b4ec <USB_EPStartXfer+0x1104>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	00db      	lsls	r3, r3, #3
 800b40c:	4a5c      	ldr	r2, [pc, #368]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b40e:	4694      	mov	ip, r2
 800b410:	4463      	add	r3, ip
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	4959      	ldr	r1, [pc, #356]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b41c:	468c      	mov	ip, r1
 800b41e:	4463      	add	r3, ip
 800b420:	0412      	lsls	r2, r2, #16
 800b422:	0c12      	lsrs	r2, r2, #16
 800b424:	605a      	str	r2, [r3, #4]
 800b426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b428:	2b3e      	cmp	r3, #62	; 0x3e
 800b42a:	d91e      	bls.n	800b46a <USB_EPStartXfer+0x1082>
 800b42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	62bb      	str	r3, [r7, #40]	; 0x28
 800b432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b434:	221f      	movs	r2, #31
 800b436:	4013      	ands	r3, r2
 800b438:	d102      	bne.n	800b440 <USB_EPStartXfer+0x1058>
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	3b01      	subs	r3, #1
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	00db      	lsls	r3, r3, #3
 800b446:	4a4e      	ldr	r2, [pc, #312]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b448:	4694      	mov	ip, r2
 800b44a:	4463      	add	r3, ip
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b450:	069b      	lsls	r3, r3, #26
 800b452:	431a      	orrs	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	4949      	ldr	r1, [pc, #292]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b45c:	468c      	mov	ip, r1
 800b45e:	4463      	add	r3, ip
 800b460:	2180      	movs	r1, #128	; 0x80
 800b462:	0609      	lsls	r1, r1, #24
 800b464:	430a      	orrs	r2, r1
 800b466:	605a      	str	r2, [r3, #4]
 800b468:	e068      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800b46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d121      	bne.n	800b4b4 <USB_EPStartXfer+0x10cc>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	4a42      	ldr	r2, [pc, #264]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b478:	4694      	mov	ip, r2
 800b47a:	4463      	add	r3, ip
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	493e      	ldr	r1, [pc, #248]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b486:	468c      	mov	ip, r1
 800b488:	4463      	add	r3, ip
 800b48a:	493e      	ldr	r1, [pc, #248]	; (800b584 <USB_EPStartXfer+0x119c>)
 800b48c:	400a      	ands	r2, r1
 800b48e:	605a      	str	r2, [r3, #4]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	4a3a      	ldr	r2, [pc, #232]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b498:	4694      	mov	ip, r2
 800b49a:	4463      	add	r3, ip
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	4936      	ldr	r1, [pc, #216]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b4a6:	468c      	mov	ip, r1
 800b4a8:	4463      	add	r3, ip
 800b4aa:	2180      	movs	r1, #128	; 0x80
 800b4ac:	0609      	lsls	r1, r1, #24
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
 800b4b2:	e043      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800b4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4b6:	085b      	lsrs	r3, r3, #1
 800b4b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4013      	ands	r3, r2
 800b4c0:	d002      	beq.n	800b4c8 <USB_EPStartXfer+0x10e0>
 800b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4a2c      	ldr	r2, [pc, #176]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b4d0:	4694      	mov	ip, r2
 800b4d2:	4463      	add	r3, ip
 800b4d4:	6859      	ldr	r1, [r3, #4]
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	069a      	lsls	r2, r3, #26
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	4827      	ldr	r0, [pc, #156]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b4e2:	4684      	mov	ip, r0
 800b4e4:	4463      	add	r3, ip
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	605a      	str	r2, [r3, #4]
 800b4ea:	e027      	b.n	800b53c <USB_EPStartXfer+0x1154>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	785b      	ldrb	r3, [r3, #1]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d123      	bne.n	800b53c <USB_EPStartXfer+0x1154>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	4a21      	ldr	r2, [pc, #132]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b4fc:	4694      	mov	ip, r2
 800b4fe:	4463      	add	r3, ip
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	491d      	ldr	r1, [pc, #116]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b50a:	468c      	mov	ip, r1
 800b50c:	4463      	add	r3, ip
 800b50e:	0412      	lsls	r2, r2, #16
 800b510:	0c12      	lsrs	r2, r2, #16
 800b512:	605a      	str	r2, [r3, #4]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	4a19      	ldr	r2, [pc, #100]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b51c:	4694      	mov	ip, r2
 800b51e:	4463      	add	r3, ip
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b524:	041a      	lsls	r2, r3, #16
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	4814      	ldr	r0, [pc, #80]	; (800b580 <USB_EPStartXfer+0x1198>)
 800b52e:	4684      	mov	ip, r0
 800b530:	4463      	add	r3, ip
 800b532:	430a      	orrs	r2, r1
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	e001      	b.n	800b53c <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e01c      	b.n	800b576 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	18d3      	adds	r3, r2, r3
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a0f      	ldr	r2, [pc, #60]	; (800b588 <USB_EPStartXfer+0x11a0>)
 800b54a:	4013      	ands	r3, r2
 800b54c:	61fb      	str	r3, [r7, #28]
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	2280      	movs	r2, #128	; 0x80
 800b552:	0152      	lsls	r2, r2, #5
 800b554:	4053      	eors	r3, r2
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	2280      	movs	r2, #128	; 0x80
 800b55c:	0192      	lsls	r2, r2, #6
 800b55e:	4053      	eors	r3, r2
 800b560:	61fb      	str	r3, [r7, #28]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	18d3      	adds	r3, r2, r3
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	4907      	ldr	r1, [pc, #28]	; (800b58c <USB_EPStartXfer+0x11a4>)
 800b570:	430a      	orrs	r2, r1
 800b572:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	0018      	movs	r0, r3
 800b578:	46bd      	mov	sp, r7
 800b57a:	b017      	add	sp, #92	; 0x5c
 800b57c:	bd90      	pop	{r4, r7, pc}
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	40009800 	.word	0x40009800
 800b584:	83ffffff 	.word	0x83ffffff
 800b588:	07ffbf8f 	.word	0x07ffbf8f
 800b58c:	00008080 	.word	0x00008080

0800b590 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d016      	beq.n	800b5d0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	18d3      	adds	r3, r2, r3
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a16      	ldr	r2, [pc, #88]	; (800b608 <USB_EPSetStall+0x78>)
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	60bb      	str	r3, [r7, #8]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2210      	movs	r2, #16
 800b5b8:	4053      	eors	r3, r2
 800b5ba:	60bb      	str	r3, [r7, #8]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	18d3      	adds	r3, r2, r3
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	4910      	ldr	r1, [pc, #64]	; (800b60c <USB_EPSetStall+0x7c>)
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e016      	b.n	800b5fe <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	18d3      	adds	r3, r2, r3
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a0c      	ldr	r2, [pc, #48]	; (800b610 <USB_EPSetStall+0x80>)
 800b5de:	4013      	ands	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2280      	movs	r2, #128	; 0x80
 800b5e6:	0152      	lsls	r2, r2, #5
 800b5e8:	4053      	eors	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	18d3      	adds	r3, r2, r3
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4904      	ldr	r1, [pc, #16]	; (800b60c <USB_EPSetStall+0x7c>)
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	0018      	movs	r0, r3
 800b602:	46bd      	mov	sp, r7
 800b604:	b004      	add	sp, #16
 800b606:	bd80      	pop	{r7, pc}
 800b608:	07ff8fbf 	.word	0x07ff8fbf
 800b60c:	00008080 	.word	0x00008080
 800b610:	07ffbf8f 	.word	0x07ffbf8f

0800b614 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	7a9b      	ldrb	r3, [r3, #10]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d000      	beq.n	800b628 <USB_EPClearStall+0x14>
 800b626:	e075      	b.n	800b714 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	785b      	ldrb	r3, [r3, #1]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d037      	beq.n	800b6a0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	18d3      	adds	r3, r2, r3
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2240      	movs	r2, #64	; 0x40
 800b642:	4013      	ands	r3, r2
 800b644:	d011      	beq.n	800b66a <USB_EPClearStall+0x56>
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	18d3      	adds	r3, r2, r3
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a33      	ldr	r2, [pc, #204]	; (800b720 <USB_EPClearStall+0x10c>)
 800b654:	4013      	ands	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	18d3      	adds	r3, r2, r3
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	492f      	ldr	r1, [pc, #188]	; (800b724 <USB_EPClearStall+0x110>)
 800b666:	430a      	orrs	r2, r1
 800b668:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	78db      	ldrb	r3, [r3, #3]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d050      	beq.n	800b714 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	18d3      	adds	r3, r2, r3
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a2a      	ldr	r2, [pc, #168]	; (800b728 <USB_EPClearStall+0x114>)
 800b680:	4013      	ands	r3, r2
 800b682:	60bb      	str	r3, [r7, #8]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2220      	movs	r2, #32
 800b688:	4053      	eors	r3, r2
 800b68a:	60bb      	str	r3, [r7, #8]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	18d3      	adds	r3, r2, r3
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	4924      	ldr	r1, [pc, #144]	; (800b72c <USB_EPClearStall+0x118>)
 800b69a:	430a      	orrs	r2, r1
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	e039      	b.n	800b714 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	18d3      	adds	r3, r2, r3
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	2380      	movs	r3, #128	; 0x80
 800b6b2:	01db      	lsls	r3, r3, #7
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	d011      	beq.n	800b6dc <USB_EPClearStall+0xc8>
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	18d3      	adds	r3, r2, r3
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a16      	ldr	r2, [pc, #88]	; (800b720 <USB_EPClearStall+0x10c>)
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	61bb      	str	r3, [r7, #24]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	18d3      	adds	r3, r2, r3
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	4916      	ldr	r1, [pc, #88]	; (800b730 <USB_EPClearStall+0x11c>)
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	18d3      	adds	r3, r2, r3
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a12      	ldr	r2, [pc, #72]	; (800b734 <USB_EPClearStall+0x120>)
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2280      	movs	r2, #128	; 0x80
 800b6f2:	0152      	lsls	r2, r2, #5
 800b6f4:	4053      	eors	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2280      	movs	r2, #128	; 0x80
 800b6fc:	0192      	lsls	r2, r2, #6
 800b6fe:	4053      	eors	r3, r2
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	4907      	ldr	r1, [pc, #28]	; (800b72c <USB_EPClearStall+0x118>)
 800b710:	430a      	orrs	r2, r1
 800b712:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	0018      	movs	r0, r3
 800b718:	46bd      	mov	sp, r7
 800b71a:	b008      	add	sp, #32
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	46c0      	nop			; (mov r8, r8)
 800b720:	07ff8f8f 	.word	0x07ff8f8f
 800b724:	000080c0 	.word	0x000080c0
 800b728:	07ff8fbf 	.word	0x07ff8fbf
 800b72c:	00008080 	.word	0x00008080
 800b730:	0000c080 	.word	0x0000c080
 800b734:	07ffbf8f 	.word	0x07ffbf8f

0800b738 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	785b      	ldrb	r3, [r3, #1]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d131      	bne.n	800b7ae <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	7a9b      	ldrb	r3, [r3, #10]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d15f      	bne.n	800b812 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	78db      	ldrb	r3, [r3, #3]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d016      	beq.n	800b788 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	18d3      	adds	r3, r2, r3
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a2d      	ldr	r2, [pc, #180]	; (800b81c <USB_EPStopXfer+0xe4>)
 800b768:	4013      	ands	r3, r2
 800b76a:	60bb      	str	r3, [r7, #8]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2220      	movs	r2, #32
 800b770:	4053      	eors	r3, r2
 800b772:	60bb      	str	r3, [r7, #8]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	18d3      	adds	r3, r2, r3
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4927      	ldr	r1, [pc, #156]	; (800b820 <USB_EPStopXfer+0xe8>)
 800b782:	430a      	orrs	r2, r1
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	e044      	b.n	800b812 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	18d3      	adds	r3, r2, r3
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a21      	ldr	r2, [pc, #132]	; (800b81c <USB_EPStopXfer+0xe4>)
 800b796:	4013      	ands	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	18d3      	adds	r3, r2, r3
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	491e      	ldr	r1, [pc, #120]	; (800b820 <USB_EPStopXfer+0xe8>)
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	e031      	b.n	800b812 <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	7a9b      	ldrb	r3, [r3, #10]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d12d      	bne.n	800b812 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	78db      	ldrb	r3, [r3, #3]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d017      	beq.n	800b7ee <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	18d3      	adds	r3, r2, r3
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a16      	ldr	r2, [pc, #88]	; (800b824 <USB_EPStopXfer+0xec>)
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	613b      	str	r3, [r7, #16]
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2280      	movs	r2, #128	; 0x80
 800b7d4:	0192      	lsls	r2, r2, #6
 800b7d6:	4053      	eors	r3, r2
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	18d3      	adds	r3, r2, r3
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	490e      	ldr	r1, [pc, #56]	; (800b820 <USB_EPStopXfer+0xe8>)
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e011      	b.n	800b812 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	18d3      	adds	r3, r2, r3
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a0a      	ldr	r2, [pc, #40]	; (800b824 <USB_EPStopXfer+0xec>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	18d3      	adds	r3, r2, r3
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	4904      	ldr	r1, [pc, #16]	; (800b820 <USB_EPStopXfer+0xe8>)
 800b80e:	430a      	orrs	r2, r1
 800b810:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	0018      	movs	r0, r3
 800b816:	46bd      	mov	sp, r7
 800b818:	b006      	add	sp, #24
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	07ff8fbf 	.word	0x07ff8fbf
 800b820:	00008080 	.word	0x00008080
 800b824:	07ffbf8f 	.word	0x07ffbf8f

0800b828 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	000a      	movs	r2, r1
 800b832:	1cfb      	adds	r3, r7, #3
 800b834:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b836:	1cfb      	adds	r3, r7, #3
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d102      	bne.n	800b844 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2280      	movs	r2, #128	; 0x80
 800b842:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	0018      	movs	r0, r3
 800b848:	46bd      	mov	sp, r7
 800b84a:	b002      	add	sp, #8
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85a:	2280      	movs	r2, #128	; 0x80
 800b85c:	0212      	lsls	r2, r2, #8
 800b85e:	431a      	orrs	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b002      	add	sp, #8
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87c:	4a04      	ldr	r2, [pc, #16]	; (800b890 <USB_DevDisconnect+0x20>)
 800b87e:	401a      	ands	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	0018      	movs	r0, r3
 800b888:	46bd      	mov	sp, r7
 800b88a:	b002      	add	sp, #8
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	ffff7fff 	.word	0xffff7fff

0800b894 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
}
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	b004      	add	sp, #16
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	0019      	movs	r1, r3
 800b8b8:	1dbb      	adds	r3, r7, #6
 800b8ba:	801a      	strh	r2, [r3, #0]
 800b8bc:	1d3b      	adds	r3, r7, #4
 800b8be:	1c0a      	adds	r2, r1, #0
 800b8c0:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800b8c2:	1d3b      	adds	r3, r7, #4
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	3303      	adds	r3, #3
 800b8c8:	089b      	lsrs	r3, r3, #2
 800b8ca:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800b8cc:	2016      	movs	r0, #22
 800b8ce:	183b      	adds	r3, r7, r0
 800b8d0:	1d3a      	adds	r2, r7, #4
 800b8d2:	8812      	ldrh	r2, [r2, #0]
 800b8d4:	2103      	movs	r1, #3
 800b8d6:	400a      	ands	r2, r1
 800b8d8:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800b8de:	183b      	adds	r3, r7, r0
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <USB_WritePMA+0x40>
  {
    NbWords--;
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800b8ec:	1dbb      	adds	r3, r7, #6
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	4a28      	ldr	r2, [pc, #160]	; (800b994 <USB_WritePMA+0xe8>)
 800b8f2:	4694      	mov	ip, r2
 800b8f4:	4463      	add	r3, ip
 800b8f6:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	623b      	str	r3, [r7, #32]
 800b8fc:	e01f      	b.n	800b93e <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	781a      	ldrb	r2, [r3, #0]
 800b902:	7859      	ldrb	r1, [r3, #1]
 800b904:	0209      	lsls	r1, r1, #8
 800b906:	430a      	orrs	r2, r1
 800b908:	7899      	ldrb	r1, [r3, #2]
 800b90a:	0409      	lsls	r1, r1, #16
 800b90c:	430a      	orrs	r2, r1
 800b90e:	78db      	ldrb	r3, [r3, #3]
 800b910:	061b      	lsls	r3, r3, #24
 800b912:	4313      	orrs	r3, r2
 800b914:	001a      	movs	r2, r3
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	3304      	adds	r3, #4
 800b91e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	3301      	adds	r3, #1
 800b924:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3301      	adds	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3301      	adds	r3, #1
 800b930:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	3301      	adds	r3, #1
 800b936:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800b938:	6a3b      	ldr	r3, [r7, #32]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1dc      	bne.n	800b8fe <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800b944:	2316      	movs	r3, #22
 800b946:	18fb      	adds	r3, r7, r3
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d01e      	beq.n	800b98c <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	001a      	movs	r2, r3
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	00db      	lsls	r3, r3, #3
 800b95c:	409a      	lsls	r2, r3
 800b95e:	0013      	movs	r3, r2
 800b960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b962:	4313      	orrs	r3, r2
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	3301      	adds	r3, #1
 800b96a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	3301      	adds	r3, #1
 800b970:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800b972:	2116      	movs	r1, #22
 800b974:	187b      	adds	r3, r7, r1
 800b976:	881a      	ldrh	r2, [r3, #0]
 800b978:	187b      	adds	r3, r7, r1
 800b97a:	3a01      	subs	r2, #1
 800b97c:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800b97e:	187b      	adds	r3, r7, r1
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e5      	bne.n	800b952 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98a:	601a      	str	r2, [r3, #0]
  }
}
 800b98c:	46c0      	nop			; (mov r8, r8)
 800b98e:	46bd      	mov	sp, r7
 800b990:	b00a      	add	sp, #40	; 0x28
 800b992:	bd80      	pop	{r7, pc}
 800b994:	40009800 	.word	0x40009800

0800b998 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b998:	b590      	push	{r4, r7, lr}
 800b99a:	b08b      	sub	sp, #44	; 0x2c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	0019      	movs	r1, r3
 800b9a4:	1dbb      	adds	r3, r7, #6
 800b9a6:	801a      	strh	r2, [r3, #0]
 800b9a8:	1d3b      	adds	r3, r7, #4
 800b9aa:	1c0a      	adds	r2, r1, #0
 800b9ac:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800b9ae:	1d3b      	adds	r3, r7, #4
 800b9b0:	881b      	ldrh	r3, [r3, #0]
 800b9b2:	3303      	adds	r3, #3
 800b9b4:	089b      	lsrs	r3, r3, #2
 800b9b6:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800b9b8:	201a      	movs	r0, #26
 800b9ba:	183b      	adds	r3, r7, r0
 800b9bc:	1d3a      	adds	r2, r7, #4
 800b9be:	8812      	ldrh	r2, [r2, #0]
 800b9c0:	2103      	movs	r1, #3
 800b9c2:	400a      	ands	r2, r1
 800b9c4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800b9ca:	1dbb      	adds	r3, r7, #6
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	4a39      	ldr	r2, [pc, #228]	; (800bab4 <USB_ReadPMA+0x11c>)
 800b9d0:	4694      	mov	ip, r2
 800b9d2:	4463      	add	r3, ip
 800b9d4:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800b9d6:	183b      	adds	r3, r7, r0
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e8:	e03c      	b.n	800ba64 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	21ff      	movs	r1, #255	; 0xff
 800b9f2:	4011      	ands	r1, r2
 800b9f4:	000c      	movs	r4, r1
 800b9f6:	7819      	ldrb	r1, [r3, #0]
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	4001      	ands	r1, r0
 800b9fc:	1c08      	adds	r0, r1, #0
 800b9fe:	1c21      	adds	r1, r4, #0
 800ba00:	4301      	orrs	r1, r0
 800ba02:	7019      	strb	r1, [r3, #0]
 800ba04:	0a11      	lsrs	r1, r2, #8
 800ba06:	20ff      	movs	r0, #255	; 0xff
 800ba08:	4001      	ands	r1, r0
 800ba0a:	000c      	movs	r4, r1
 800ba0c:	7859      	ldrb	r1, [r3, #1]
 800ba0e:	2000      	movs	r0, #0
 800ba10:	4001      	ands	r1, r0
 800ba12:	1c08      	adds	r0, r1, #0
 800ba14:	1c21      	adds	r1, r4, #0
 800ba16:	4301      	orrs	r1, r0
 800ba18:	7059      	strb	r1, [r3, #1]
 800ba1a:	0c11      	lsrs	r1, r2, #16
 800ba1c:	20ff      	movs	r0, #255	; 0xff
 800ba1e:	4001      	ands	r1, r0
 800ba20:	000c      	movs	r4, r1
 800ba22:	7899      	ldrb	r1, [r3, #2]
 800ba24:	2000      	movs	r0, #0
 800ba26:	4001      	ands	r1, r0
 800ba28:	1c08      	adds	r0, r1, #0
 800ba2a:	1c21      	adds	r1, r4, #0
 800ba2c:	4301      	orrs	r1, r0
 800ba2e:	7099      	strb	r1, [r3, #2]
 800ba30:	0e10      	lsrs	r0, r2, #24
 800ba32:	78da      	ldrb	r2, [r3, #3]
 800ba34:	2100      	movs	r1, #0
 800ba36:	400a      	ands	r2, r1
 800ba38:	1c11      	adds	r1, r2, #0
 800ba3a:	1c02      	adds	r2, r0, #0
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	3304      	adds	r3, #4
 800ba44:	623b      	str	r3, [r7, #32]
    pBuf++;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	3301      	adds	r3, #1
 800ba56:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	3b01      	subs	r3, #1
 800ba62:	627b      	str	r3, [r7, #36]	; 0x24
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1bf      	bne.n	800b9ea <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800ba6a:	231a      	movs	r3, #26
 800ba6c:	18fb      	adds	r3, r7, r3
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01b      	beq.n	800baac <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	00db      	lsls	r3, r3, #3
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	40da      	lsrs	r2, r3
 800ba84:	0013      	movs	r3, r2
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	701a      	strb	r2, [r3, #0]
      count++;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	3301      	adds	r3, #1
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	3301      	adds	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800ba98:	211a      	movs	r1, #26
 800ba9a:	187b      	adds	r3, r7, r1
 800ba9c:	881a      	ldrh	r2, [r3, #0]
 800ba9e:	187b      	adds	r3, r7, r1
 800baa0:	3a01      	subs	r2, #1
 800baa2:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800baa4:	187b      	adds	r3, r7, r1
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e6      	bne.n	800ba7a <USB_ReadPMA+0xe2>
  }
}
 800baac:	46c0      	nop			; (mov r8, r8)
 800baae:	46bd      	mov	sp, r7
 800bab0:	b00b      	add	sp, #44	; 0x2c
 800bab2:	bd90      	pop	{r4, r7, pc}
 800bab4:	40009800 	.word	0x40009800

0800bab8 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800bab8:	b590      	push	{r4, r7, lr}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	0004      	movs	r4, r0
 800bac0:	0008      	movs	r0, r1
 800bac2:	0011      	movs	r1, r2
 800bac4:	603b      	str	r3, [r7, #0]
 800bac6:	1dfb      	adds	r3, r7, #7
 800bac8:	1c22      	adds	r2, r4, #0
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	1dbb      	adds	r3, r7, #6
 800bace:	1c02      	adds	r2, r0, #0
 800bad0:	701a      	strb	r2, [r3, #0]
 800bad2:	1d7b      	adds	r3, r7, #5
 800bad4:	1c0a      	adds	r2, r1, #0
 800bad6:	701a      	strb	r2, [r3, #0]

  TRACER_EMB_UnLock();

  TRACER_EMB_SendData();
#else
  return;
 800bad8:	46c0      	nop			; (mov r8, r8)
#endif /* _TRACE */
}
 800bada:	46bd      	mov	sp, r7
 800badc:	b003      	add	sp, #12
 800bade:	bd90      	pop	{r4, r7, pc}

0800bae0 <__NVIC_EnableIRQ>:
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	0002      	movs	r2, r0
 800bae8:	1dfb      	adds	r3, r7, #7
 800baea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800baec:	1dfb      	adds	r3, r7, #7
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b7f      	cmp	r3, #127	; 0x7f
 800baf2:	d809      	bhi.n	800bb08 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800baf4:	1dfb      	adds	r3, r7, #7
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	001a      	movs	r2, r3
 800bafa:	231f      	movs	r3, #31
 800bafc:	401a      	ands	r2, r3
 800bafe:	4b04      	ldr	r3, [pc, #16]	; (800bb10 <__NVIC_EnableIRQ+0x30>)
 800bb00:	2101      	movs	r1, #1
 800bb02:	4091      	lsls	r1, r2
 800bb04:	000a      	movs	r2, r1
 800bb06:	601a      	str	r2, [r3, #0]
}
 800bb08:	46c0      	nop			; (mov r8, r8)
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	e000e100 	.word	0xe000e100

0800bb14 <__NVIC_SetPriority>:
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	0002      	movs	r2, r0
 800bb1c:	6039      	str	r1, [r7, #0]
 800bb1e:	1dfb      	adds	r3, r7, #7
 800bb20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bb22:	1dfb      	adds	r3, r7, #7
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b7f      	cmp	r3, #127	; 0x7f
 800bb28:	d828      	bhi.n	800bb7c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bb2a:	4a2f      	ldr	r2, [pc, #188]	; (800bbe8 <__NVIC_SetPriority+0xd4>)
 800bb2c:	1dfb      	adds	r3, r7, #7
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	b25b      	sxtb	r3, r3
 800bb32:	089b      	lsrs	r3, r3, #2
 800bb34:	33c0      	adds	r3, #192	; 0xc0
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	589b      	ldr	r3, [r3, r2]
 800bb3a:	1dfa      	adds	r2, r7, #7
 800bb3c:	7812      	ldrb	r2, [r2, #0]
 800bb3e:	0011      	movs	r1, r2
 800bb40:	2203      	movs	r2, #3
 800bb42:	400a      	ands	r2, r1
 800bb44:	00d2      	lsls	r2, r2, #3
 800bb46:	21ff      	movs	r1, #255	; 0xff
 800bb48:	4091      	lsls	r1, r2
 800bb4a:	000a      	movs	r2, r1
 800bb4c:	43d2      	mvns	r2, r2
 800bb4e:	401a      	ands	r2, r3
 800bb50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	019b      	lsls	r3, r3, #6
 800bb56:	22ff      	movs	r2, #255	; 0xff
 800bb58:	401a      	ands	r2, r3
 800bb5a:	1dfb      	adds	r3, r7, #7
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	0018      	movs	r0, r3
 800bb60:	2303      	movs	r3, #3
 800bb62:	4003      	ands	r3, r0
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bb68:	481f      	ldr	r0, [pc, #124]	; (800bbe8 <__NVIC_SetPriority+0xd4>)
 800bb6a:	1dfb      	adds	r3, r7, #7
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	b25b      	sxtb	r3, r3
 800bb70:	089b      	lsrs	r3, r3, #2
 800bb72:	430a      	orrs	r2, r1
 800bb74:	33c0      	adds	r3, #192	; 0xc0
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	501a      	str	r2, [r3, r0]
}
 800bb7a:	e031      	b.n	800bbe0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bb7c:	4a1b      	ldr	r2, [pc, #108]	; (800bbec <__NVIC_SetPriority+0xd8>)
 800bb7e:	1dfb      	adds	r3, r7, #7
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	0019      	movs	r1, r3
 800bb84:	230f      	movs	r3, #15
 800bb86:	400b      	ands	r3, r1
 800bb88:	3b08      	subs	r3, #8
 800bb8a:	089b      	lsrs	r3, r3, #2
 800bb8c:	3306      	adds	r3, #6
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	18d3      	adds	r3, r2, r3
 800bb92:	3304      	adds	r3, #4
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	1dfa      	adds	r2, r7, #7
 800bb98:	7812      	ldrb	r2, [r2, #0]
 800bb9a:	0011      	movs	r1, r2
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	400a      	ands	r2, r1
 800bba0:	00d2      	lsls	r2, r2, #3
 800bba2:	21ff      	movs	r1, #255	; 0xff
 800bba4:	4091      	lsls	r1, r2
 800bba6:	000a      	movs	r2, r1
 800bba8:	43d2      	mvns	r2, r2
 800bbaa:	401a      	ands	r2, r3
 800bbac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	019b      	lsls	r3, r3, #6
 800bbb2:	22ff      	movs	r2, #255	; 0xff
 800bbb4:	401a      	ands	r2, r3
 800bbb6:	1dfb      	adds	r3, r7, #7
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	0018      	movs	r0, r3
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	4003      	ands	r3, r0
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bbc4:	4809      	ldr	r0, [pc, #36]	; (800bbec <__NVIC_SetPriority+0xd8>)
 800bbc6:	1dfb      	adds	r3, r7, #7
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	001c      	movs	r4, r3
 800bbcc:	230f      	movs	r3, #15
 800bbce:	4023      	ands	r3, r4
 800bbd0:	3b08      	subs	r3, #8
 800bbd2:	089b      	lsrs	r3, r3, #2
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	3306      	adds	r3, #6
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	18c3      	adds	r3, r0, r3
 800bbdc:	3304      	adds	r3, #4
 800bbde:	601a      	str	r2, [r3, #0]
}
 800bbe0:	46c0      	nop			; (mov r8, r8)
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	b003      	add	sp, #12
 800bbe6:	bd90      	pop	{r4, r7, pc}
 800bbe8:	e000e100 	.word	0xe000e100
 800bbec:	e000ed00 	.word	0xe000ed00

0800bbf0 <LL_UCPD_Enable>:
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2280      	movs	r2, #128	; 0x80
 800bbfe:	0612      	lsls	r2, r2, #24
 800bc00:	431a      	orrs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	46c0      	nop			; (mov r8, r8)
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b002      	add	sp, #8
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a05      	ldr	r2, [pc, #20]	; (800bc34 <LL_UCPD_SetRxOrderSet+0x24>)
 800bc20:	401a      	ands	r2, r3
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	431a      	orrs	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
}
 800bc2a:	46c0      	nop			; (mov r8, r8)
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	b002      	add	sp, #8
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	46c0      	nop			; (mov r8, r8)
 800bc34:	e00fffff 	.word	0xe00fffff

0800bc38 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	4a05      	ldr	r2, [pc, #20]	; (800bc5c <LL_UCPD_SetccEnable+0x24>)
 800bc48:	401a      	ands	r2, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	60da      	str	r2, [r3, #12]
}
 800bc52:	46c0      	nop			; (mov r8, r8)
 800bc54:	46bd      	mov	sp, r7
 800bc56:	b002      	add	sp, #8
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	fffff3ff 	.word	0xfffff3ff

0800bc60 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	2280      	movs	r2, #128	; 0x80
 800bc6e:	0212      	lsls	r2, r2, #8
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	611a      	str	r2, [r3, #16]
}
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b082      	sub	sp, #8
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	2280      	movs	r2, #128	; 0x80
 800bc8c:	01d2      	lsls	r2, r2, #7
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	611a      	str	r2, [r3, #16]
}
 800bc94:	46c0      	nop			; (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc9e:	b08b      	sub	sp, #44	; 0x2c
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	607a      	str	r2, [r7, #4]
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	240f      	movs	r4, #15
 800bcaa:	193b      	adds	r3, r7, r4
 800bcac:	1c02      	adds	r2, r0, #0
 800bcae:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800bcb0:	193b      	adds	r3, r7, r4
 800bcb2:	781a      	ldrb	r2, [r3, #0]
 800bcb4:	0013      	movs	r3, r2
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	189b      	adds	r3, r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4a65      	ldr	r2, [pc, #404]	; (800be54 <CAD_Init+0x1b8>)
 800bcbe:	189b      	adds	r3, r3, r2
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800bcc2:	193b      	adds	r3, r7, r4
 800bcc4:	781a      	ldrb	r2, [r3, #0]
 800bcc6:	4964      	ldr	r1, [pc, #400]	; (800be58 <CAD_Init+0x1bc>)
 800bcc8:	0013      	movs	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	1a9b      	subs	r3, r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	18cb      	adds	r3, r1, r3
 800bcd2:	3310      	adds	r3, #16
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800bcd8:	193b      	adds	r3, r7, r4
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	495e      	ldr	r1, [pc, #376]	; (800be58 <CAD_Init+0x1bc>)
 800bcde:	0013      	movs	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	18cb      	adds	r3, r1, r3
 800bce8:	330c      	adds	r3, #12
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800bcee:	193b      	adds	r3, r7, r4
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	4959      	ldr	r1, [pc, #356]	; (800be58 <CAD_Init+0x1bc>)
 800bcf4:	0013      	movs	r3, r2
 800bcf6:	00db      	lsls	r3, r3, #3
 800bcf8:	1a9b      	subs	r3, r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	18cb      	adds	r3, r1, r3
 800bcfe:	330c      	adds	r3, #12
 800bd00:	6819      	ldr	r1, [r3, #0]
 800bd02:	193b      	adds	r3, r7, r4
 800bd04:	781a      	ldrb	r2, [r3, #0]
 800bd06:	4854      	ldr	r0, [pc, #336]	; (800be58 <CAD_Init+0x1bc>)
 800bd08:	0013      	movs	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	1a9b      	subs	r3, r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	18c3      	adds	r3, r0, r3
 800bd12:	3310      	adds	r3, #16
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	794a      	ldrb	r2, [r1, #5]
 800bd18:	0612      	lsls	r2, r2, #24
 800bd1a:	0f92      	lsrs	r2, r2, #30
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	2103      	movs	r1, #3
 800bd20:	400a      	ands	r2, r1
 800bd22:	0010      	movs	r0, r2
 800bd24:	789a      	ldrb	r2, [r3, #2]
 800bd26:	2103      	movs	r1, #3
 800bd28:	438a      	bics	r2, r1
 800bd2a:	1c11      	adds	r1, r2, #0
 800bd2c:	1c02      	adds	r2, r0, #0
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800bd32:	193b      	adds	r3, r7, r4
 800bd34:	781a      	ldrb	r2, [r3, #0]
 800bd36:	4948      	ldr	r1, [pc, #288]	; (800be58 <CAD_Init+0x1bc>)
 800bd38:	0013      	movs	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	18cb      	adds	r3, r1, r3
 800bd42:	3310      	adds	r3, #16
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	789a      	ldrb	r2, [r3, #2]
 800bd48:	210c      	movs	r1, #12
 800bd4a:	438a      	bics	r2, r1
 800bd4c:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	220c      	movs	r2, #12
 800bd52:	2100      	movs	r1, #0
 800bd54:	0018      	movs	r0, r3
 800bd56:	f00c fceb 	bl	8018730 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800bd5a:	193b      	adds	r3, r7, r4
 800bd5c:	781a      	ldrb	r2, [r3, #0]
 800bd5e:	493e      	ldr	r1, [pc, #248]	; (800be58 <CAD_Init+0x1bc>)
 800bd60:	0013      	movs	r3, r2
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	18cb      	adds	r3, r1, r3
 800bd6a:	332c      	adds	r3, #44	; 0x2c
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800bd70:	0025      	movs	r5, r4
 800bd72:	193b      	adds	r3, r7, r4
 800bd74:	781c      	ldrb	r4, [r3, #0]
 800bd76:	197b      	adds	r3, r7, r5
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f000 fbb4 	bl	800c4e8 <USBPD_HW_GetUSPDInstance>
 800bd80:	0001      	movs	r1, r0
 800bd82:	4a35      	ldr	r2, [pc, #212]	; (800be58 <CAD_Init+0x1bc>)
 800bd84:	0023      	movs	r3, r4
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	1b1b      	subs	r3, r3, r4
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800bd8e:	2614      	movs	r6, #20
 800bd90:	19bb      	adds	r3, r7, r6
 800bd92:	0018      	movs	r0, r3
 800bd94:	f7fd fdf8 	bl	8009988 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800bd98:	002c      	movs	r4, r5
 800bd9a:	193b      	adds	r3, r7, r4
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	492e      	ldr	r1, [pc, #184]	; (800be58 <CAD_Init+0x1bc>)
 800bda0:	0013      	movs	r3, r2
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	1a9b      	subs	r3, r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	585b      	ldr	r3, [r3, r1]
 800bdaa:	19ba      	adds	r2, r7, r6
 800bdac:	0011      	movs	r1, r2
 800bdae:	0018      	movs	r0, r3
 800bdb0:	f7fd fdb0 	bl	8009914 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800bdb4:	193b      	adds	r3, r7, r4
 800bdb6:	781a      	ldrb	r2, [r3, #0]
 800bdb8:	4927      	ldr	r1, [pc, #156]	; (800be58 <CAD_Init+0x1bc>)
 800bdba:	0013      	movs	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	1a9b      	subs	r3, r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	585b      	ldr	r3, [r3, r1]
 800bdc4:	22f8      	movs	r2, #248	; 0xf8
 800bdc6:	0452      	lsls	r2, r2, #17
 800bdc8:	0011      	movs	r1, r2
 800bdca:	0018      	movs	r0, r3
 800bdcc:	f7ff ff20 	bl	800bc10 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800bdd0:	193b      	adds	r3, r7, r4
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	4920      	ldr	r1, [pc, #128]	; (800be58 <CAD_Init+0x1bc>)
 800bdd6:	0013      	movs	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	1a9b      	subs	r3, r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	585b      	ldr	r3, [r3, r1]
 800bde0:	22c0      	movs	r2, #192	; 0xc0
 800bde2:	0112      	lsls	r2, r2, #4
 800bde4:	0011      	movs	r1, r2
 800bde6:	0018      	movs	r0, r3
 800bde8:	f7ff ff26 	bl	800bc38 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800bdec:	193b      	adds	r3, r7, r4
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f00b f91c 	bl	801702e <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800bdf6:	193b      	adds	r3, r7, r4
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	4917      	ldr	r1, [pc, #92]	; (800be58 <CAD_Init+0x1bc>)
 800bdfc:	0013      	movs	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	1a9b      	subs	r3, r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	585b      	ldr	r3, [r3, r1]
 800be06:	0018      	movs	r0, r3
 800be08:	f7ff fef2 	bl	800bbf0 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800be0c:	193b      	adds	r3, r7, r4
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	0018      	movs	r0, r3
 800be12:	f001 fc35 	bl	800d680 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	4a10      	ldr	r2, [pc, #64]	; (800be5c <CAD_Init+0x1c0>)
 800be1a:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800be1c:	193b      	adds	r3, r7, r4
 800be1e:	781a      	ldrb	r2, [r3, #0]
 800be20:	490d      	ldr	r1, [pc, #52]	; (800be58 <CAD_Init+0x1bc>)
 800be22:	0013      	movs	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	18cb      	adds	r3, r1, r3
 800be2c:	330c      	adds	r3, #12
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	795b      	ldrb	r3, [r3, #5]
 800be32:	06db      	lsls	r3, r3, #27
 800be34:	0fdb      	lsrs	r3, r3, #31
 800be36:	b2da      	uxtb	r2, r3
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	01d0      	lsls	r0, r2, #7
 800be3c:	785a      	ldrb	r2, [r3, #1]
 800be3e:	217f      	movs	r1, #127	; 0x7f
 800be40:	400a      	ands	r2, r1
 800be42:	1c11      	adds	r1, r2, #0
 800be44:	1c02      	adds	r2, r0, #0
 800be46:	430a      	orrs	r2, r1
 800be48:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800be4a:	46c0      	nop			; (mov r8, r8)
 800be4c:	46bd      	mov	sp, r7
 800be4e:	b00b      	add	sp, #44	; 0x2c
 800be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	20018c04 	.word	0x20018c04
 800be58:	20018c1c 	.word	0x20018c1c
 800be5c:	0800beb5 	.word	0x0800beb5

0800be60 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	0002      	movs	r2, r0
 800be68:	1dfb      	adds	r3, r7, #7
 800be6a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800be6c:	1dfb      	adds	r3, r7, #7
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	0018      	movs	r0, r3
 800be72:	f001 fcb5 	bl	800d7e0 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800be76:	1dfb      	adds	r3, r7, #7
 800be78:	7819      	ldrb	r1, [r3, #0]
 800be7a:	4a0c      	ldr	r2, [pc, #48]	; (800beac <CAD_Enter_ErrorRecovery+0x4c>)
 800be7c:	000b      	movs	r3, r1
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	185b      	adds	r3, r3, r1
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	5c99      	ldrb	r1, [r3, r2]
 800be86:	2080      	movs	r0, #128	; 0x80
 800be88:	4240      	negs	r0, r0
 800be8a:	4301      	orrs	r1, r0
 800be8c:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800be8e:	1dfb      	adds	r3, r7, #7
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	4907      	ldr	r1, [pc, #28]	; (800beb0 <CAD_Enter_ErrorRecovery+0x50>)
 800be94:	0013      	movs	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	1a9b      	subs	r3, r3, r2
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	18cb      	adds	r3, r1, r3
 800be9e:	332c      	adds	r3, #44	; 0x2c
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4798      	blx	r3
}
 800bea4:	46c0      	nop			; (mov r8, r8)
 800bea6:	46bd      	mov	sp, r7
 800bea8:	b002      	add	sp, #8
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20018c04 	.word	0x20018c04
 800beb0:	20018c1c 	.word	0x20018c1c

0800beb4 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60b9      	str	r1, [r7, #8]
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	210f      	movs	r1, #15
 800bec0:	187b      	adds	r3, r7, r1
 800bec2:	1c02      	adds	r2, r0, #0
 800bec4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800bec6:	187b      	adds	r3, r7, r1
 800bec8:	781a      	ldrb	r2, [r3, #0]
 800beca:	0013      	movs	r3, r2
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	189b      	adds	r3, r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <CAD_StateMachine_SNK+0x8c>)
 800bed4:	189b      	adds	r3, r3, r2
 800bed6:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800bed8:	2302      	movs	r3, #2
 800beda:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	069b      	lsls	r3, r3, #26
 800bee2:	0edb      	lsrs	r3, r3, #27
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d019      	beq.n	800bf1e <CAD_StateMachine_SNK+0x6a>
 800beea:	dc23      	bgt.n	800bf34 <CAD_StateMachine_SNK+0x80>
 800beec:	2b01      	cmp	r3, #1
 800beee:	d002      	beq.n	800bef6 <CAD_StateMachine_SNK+0x42>
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d009      	beq.n	800bf08 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 800bef4:	e01e      	b.n	800bf34 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 800bef6:	230f      	movs	r3, #15
 800bef8:	18fb      	adds	r3, r7, r3
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	0018      	movs	r0, r3
 800befe:	f000 f98b 	bl	800c218 <ManageStateDetached_SNK>
 800bf02:	0003      	movs	r3, r0
 800bf04:	617b      	str	r3, [r7, #20]
      break;
 800bf06:	e016      	b.n	800bf36 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	68b9      	ldr	r1, [r7, #8]
 800bf0c:	230f      	movs	r3, #15
 800bf0e:	18fb      	adds	r3, r7, r3
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	0018      	movs	r0, r3
 800bf14:	f000 f9d2 	bl	800c2bc <ManageStateAttachedWait_SNK>
 800bf18:	0003      	movs	r3, r0
 800bf1a:	617b      	str	r3, [r7, #20]
      break;
 800bf1c:	e00b      	b.n	800bf36 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	230f      	movs	r3, #15
 800bf24:	18fb      	adds	r3, r7, r3
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f000 fa55 	bl	800c3d8 <ManageStateAttached_SNK>
 800bf2e:	0003      	movs	r3, r0
 800bf30:	617b      	str	r3, [r7, #20]
      break;
 800bf32:	e000      	b.n	800bf36 <CAD_StateMachine_SNK+0x82>
      break;
 800bf34:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800bf36:	697b      	ldr	r3, [r7, #20]
}
 800bf38:	0018      	movs	r0, r3
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	b006      	add	sp, #24
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	20018c04 	.word	0x20018c04

0800bf44 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	210f      	movs	r1, #15
 800bf50:	187b      	adds	r3, r7, r1
 800bf52:	1c02      	adds	r2, r0, #0
 800bf54:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800bf56:	187b      	adds	r3, r7, r1
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	0013      	movs	r3, r2
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	189b      	adds	r3, r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a5d      	ldr	r2, [pc, #372]	; (800c0d8 <CAD_StateMachine+0x194>)
 800bf64:	189b      	adds	r3, r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	4959      	ldr	r1, [pc, #356]	; (800c0dc <CAD_StateMachine+0x198>)
 800bf78:	0013      	movs	r3, r2
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	18cb      	adds	r3, r1, r3
 800bf82:	3310      	adds	r3, #16
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2210      	movs	r2, #16
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <CAD_StateMachine+0x52>
  {
    return _timing;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	e09c      	b.n	800c0d0 <CAD_StateMachine+0x18c>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	227f      	movs	r2, #127	; 0x7f
 800bf9c:	4393      	bics	r3, r2
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <CAD_StateMachine+0x7a>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	781a      	ldrb	r2, [r3, #0]
 800bfa8:	217f      	movs	r1, #127	; 0x7f
 800bfaa:	400a      	ands	r2, r1
 800bfac:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	785a      	ldrb	r2, [r3, #1]
 800bfb2:	213e      	movs	r1, #62	; 0x3e
 800bfb4:	438a      	bics	r2, r1
 800bfb6:	1c11      	adds	r1, r2, #0
 800bfb8:	2218      	movs	r2, #24
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	069b      	lsls	r3, r3, #26
 800bfc4:	0edb      	lsrs	r3, r3, #27
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b0d      	cmp	r3, #13
 800bfca:	d05c      	beq.n	800c086 <CAD_StateMachine+0x142>
 800bfcc:	dc72      	bgt.n	800c0b4 <CAD_StateMachine+0x170>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <CAD_StateMachine+0x94>
 800bfd2:	2b0c      	cmp	r3, #12
 800bfd4:	d02b      	beq.n	800c02e <CAD_StateMachine+0xea>
 800bfd6:	e06d      	b.n	800c0b4 <CAD_StateMachine+0x170>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800bfd8:	240f      	movs	r4, #15
 800bfda:	193b      	adds	r3, r7, r4
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	493f      	ldr	r1, [pc, #252]	; (800c0dc <CAD_StateMachine+0x198>)
 800bfe0:	0013      	movs	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	1a9b      	subs	r3, r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	585b      	ldr	r3, [r3, r1]
 800bfea:	0018      	movs	r0, r3
 800bfec:	f7ff fe38 	bl	800bc60 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800bff0:	193b      	adds	r3, r7, r4
 800bff2:	781a      	ldrb	r2, [r3, #0]
 800bff4:	4939      	ldr	r1, [pc, #228]	; (800c0dc <CAD_StateMachine+0x198>)
 800bff6:	0013      	movs	r3, r2
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	1a9b      	subs	r3, r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	585b      	ldr	r3, [r3, r1]
 800c000:	0018      	movs	r0, r3
 800c002:	f7ff fe3c 	bl	800bc7e <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      if (0 == PortNum)
 800c006:	193b      	adds	r3, r7, r4
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <CAD_StateMachine+0xd8>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800c00e:	2102      	movs	r1, #2
 800c010:	2008      	movs	r0, #8
 800c012:	f7ff fd7f 	bl	800bb14 <__NVIC_SetPriority>
 800c016:	2008      	movs	r0, #8
 800c018:	f7ff fd62 	bl	800bae0 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	785a      	ldrb	r2, [r3, #1]
 800c020:	213e      	movs	r1, #62	; 0x3e
 800c022:	438a      	bics	r2, r1
 800c024:	1c11      	adds	r1, r2, #0
 800c026:	2202      	movs	r2, #2
 800c028:	430a      	orrs	r2, r1
 800c02a:	705a      	strb	r2, [r3, #1]
      break;
 800c02c:	e04f      	b.n	800c0ce <CAD_StateMachine+0x18a>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800c02e:	240f      	movs	r4, #15
 800c030:	193b      	adds	r3, r7, r4
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	0018      	movs	r0, r3
 800c036:	f001 fbd3 	bl	800d7e0 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800c03a:	193b      	adds	r3, r7, r4
 800c03c:	781a      	ldrb	r2, [r3, #0]
 800c03e:	4927      	ldr	r1, [pc, #156]	; (800c0dc <CAD_StateMachine+0x198>)
 800c040:	0013      	movs	r3, r2
 800c042:	00db      	lsls	r3, r3, #3
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	18cb      	adds	r3, r1, r3
 800c04a:	3334      	adds	r3, #52	; 0x34
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	2103      	movs	r1, #3
 800c05c:	438a      	bics	r2, r1
 800c05e:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	2201      	movs	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800c066:	f7f7 fb25 	bl	80036b4 <HAL_GetTick>
 800c06a:	0002      	movs	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800c070:	231a      	movs	r3, #26
 800c072:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	785a      	ldrb	r2, [r3, #1]
 800c078:	213e      	movs	r1, #62	; 0x3e
 800c07a:	438a      	bics	r2, r1
 800c07c:	1c11      	adds	r1, r2, #0
 800c07e:	221a      	movs	r2, #26
 800c080:	430a      	orrs	r2, r1
 800c082:	705a      	strb	r2, [r3, #1]
      break;
 800c084:	e023      	b.n	800c0ce <CAD_StateMachine+0x18a>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800c086:	f7f7 fb15 	bl	80036b4 <HAL_GetTick>
 800c08a:	0002      	movs	r2, r0
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b1a      	cmp	r3, #26
 800c094:	d91a      	bls.n	800c0cc <CAD_StateMachine+0x188>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800c096:	230f      	movs	r3, #15
 800c098:	18fb      	adds	r3, r7, r3
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	0018      	movs	r0, r3
 800c09e:	f001 faef 	bl	800d680 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	785a      	ldrb	r2, [r3, #1]
 800c0a6:	213e      	movs	r1, #62	; 0x3e
 800c0a8:	438a      	bics	r2, r1
 800c0aa:	1c11      	adds	r1, r2, #0
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c0b2:	e00b      	b.n	800c0cc <CAD_StateMachine+0x188>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	687c      	ldr	r4, [r7, #4]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	220f      	movs	r2, #15
 800c0be:	18ba      	adds	r2, r7, r2
 800c0c0:	7810      	ldrb	r0, [r2, #0]
 800c0c2:	0022      	movs	r2, r4
 800c0c4:	4798      	blx	r3
 800c0c6:	0003      	movs	r3, r0
 800c0c8:	617b      	str	r3, [r7, #20]
      break;
 800c0ca:	e000      	b.n	800c0ce <CAD_StateMachine+0x18a>
      break;
 800c0cc:	46c0      	nop			; (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800c0ce:	697b      	ldr	r3, [r7, #20]
}
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	b007      	add	sp, #28
 800c0d6:	bd90      	pop	{r4, r7, pc}
 800c0d8:	20018c04 	.word	0x20018c04
 800c0dc:	20018c1c 	.word	0x20018c1c

0800c0e0 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	0002      	movs	r2, r0
 800c0e8:	1dfb      	adds	r3, r7, #7
 800c0ea:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c0ec:	1dfb      	adds	r3, r7, #7
 800c0ee:	781a      	ldrb	r2, [r3, #0]
 800c0f0:	0013      	movs	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4a45      	ldr	r2, [pc, #276]	; (800c210 <CAD_Check_HW_SNK+0x130>)
 800c0fa:	189b      	adds	r3, r3, r2
 800c0fc:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800c0fe:	1dfb      	adds	r3, r7, #7
 800c100:	781a      	ldrb	r2, [r3, #0]
 800c102:	4944      	ldr	r1, [pc, #272]	; (800c214 <CAD_Check_HW_SNK+0x134>)
 800c104:	0013      	movs	r3, r2
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	1a9b      	subs	r3, r3, r2
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	585b      	ldr	r3, [r3, r1]
 800c10e:	695a      	ldr	r2, [r3, #20]
 800c110:	23c0      	movs	r3, #192	; 0xc0
 800c112:	029b      	lsls	r3, r3, #10
 800c114:	4013      	ands	r3, r2
 800c116:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800c118:	1dfb      	adds	r3, r7, #7
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	493d      	ldr	r1, [pc, #244]	; (800c214 <CAD_Check_HW_SNK+0x134>)
 800c11e:	0013      	movs	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	1a9b      	subs	r3, r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	585b      	ldr	r3, [r3, r1]
 800c128:	695a      	ldr	r2, [r3, #20]
 800c12a:	23c0      	movs	r3, #192	; 0xc0
 800c12c:	031b      	lsls	r3, r3, #12
 800c12e:	4013      	ands	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	2103      	movs	r1, #3
 800c138:	438a      	bics	r2, r1
 800c13a:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	781a      	ldrb	r2, [r3, #0]
 800c140:	211c      	movs	r1, #28
 800c142:	438a      	bics	r2, r1
 800c144:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02c      	beq.n	800c1a6 <CAD_Check_HW_SNK+0xc6>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d129      	bne.n	800c1a6 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	781a      	ldrb	r2, [r3, #0]
 800c156:	211c      	movs	r1, #28
 800c158:	438a      	bics	r2, r1
 800c15a:	1c11      	adds	r1, r2, #0
 800c15c:	2204      	movs	r2, #4
 800c15e:	430a      	orrs	r2, r1
 800c160:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	781a      	ldrb	r2, [r3, #0]
 800c166:	2103      	movs	r1, #3
 800c168:	438a      	bics	r2, r1
 800c16a:	1c11      	adds	r1, r2, #0
 800c16c:	2201      	movs	r2, #1
 800c16e:	430a      	orrs	r2, r1
 800c170:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	0c18      	lsrs	r0, r3, #16
 800c176:	1dfb      	adds	r3, r7, #7
 800c178:	781a      	ldrb	r2, [r3, #0]
 800c17a:	4926      	ldr	r1, [pc, #152]	; (800c214 <CAD_Check_HW_SNK+0x134>)
 800c17c:	0013      	movs	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	1a9b      	subs	r3, r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	18cb      	adds	r3, r1, r3
 800c186:	3310      	adds	r3, #16
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	1c01      	adds	r1, r0, #0
 800c18c:	2203      	movs	r2, #3
 800c18e:	400a      	ands	r2, r1
 800c190:	b2d2      	uxtb	r2, r2
 800c192:	2103      	movs	r1, #3
 800c194:	400a      	ands	r2, r1
 800c196:	0090      	lsls	r0, r2, #2
 800c198:	789a      	ldrb	r2, [r3, #2]
 800c19a:	210c      	movs	r1, #12
 800c19c:	438a      	bics	r2, r1
 800c19e:	1c11      	adds	r1, r2, #0
 800c1a0:	1c02      	adds	r2, r0, #0
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d12c      	bne.n	800c206 <CAD_Check_HW_SNK+0x126>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d029      	beq.n	800c206 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	781a      	ldrb	r2, [r3, #0]
 800c1b6:	211c      	movs	r1, #28
 800c1b8:	438a      	bics	r2, r1
 800c1ba:	1c11      	adds	r1, r2, #0
 800c1bc:	2204      	movs	r2, #4
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	2103      	movs	r1, #3
 800c1c8:	438a      	bics	r2, r1
 800c1ca:	1c11      	adds	r1, r2, #0
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	0c98      	lsrs	r0, r3, #18
 800c1d6:	1dfb      	adds	r3, r7, #7
 800c1d8:	781a      	ldrb	r2, [r3, #0]
 800c1da:	490e      	ldr	r1, [pc, #56]	; (800c214 <CAD_Check_HW_SNK+0x134>)
 800c1dc:	0013      	movs	r3, r2
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	1a9b      	subs	r3, r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	18cb      	adds	r3, r1, r3
 800c1e6:	3310      	adds	r3, #16
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	1c01      	adds	r1, r0, #0
 800c1ec:	2203      	movs	r2, #3
 800c1ee:	400a      	ands	r2, r1
 800c1f0:	b2d2      	uxtb	r2, r2
 800c1f2:	2103      	movs	r1, #3
 800c1f4:	400a      	ands	r2, r1
 800c1f6:	0090      	lsls	r0, r2, #2
 800c1f8:	789a      	ldrb	r2, [r3, #2]
 800c1fa:	210c      	movs	r1, #12
 800c1fc:	438a      	bics	r2, r1
 800c1fe:	1c11      	adds	r1, r2, #0
 800c200:	1c02      	adds	r2, r0, #0
 800c202:	430a      	orrs	r2, r1
 800c204:	709a      	strb	r2, [r3, #2]
  }
}
 800c206:	46c0      	nop			; (mov r8, r8)
 800c208:	46bd      	mov	sp, r7
 800c20a:	b006      	add	sp, #24
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	46c0      	nop			; (mov r8, r8)
 800c210:	20018c04 	.word	0x20018c04
 800c214:	20018c1c 	.word	0x20018c1c

0800c218 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	0002      	movs	r2, r0
 800c220:	1dfb      	adds	r3, r7, #7
 800c222:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c224:	1dfb      	adds	r3, r7, #7
 800c226:	781a      	ldrb	r2, [r3, #0]
 800c228:	0013      	movs	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	189b      	adds	r3, r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4a21      	ldr	r2, [pc, #132]	; (800c2b8 <ManageStateDetached_SNK+0xa0>)
 800c232:	189b      	adds	r3, r3, r2
 800c234:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c236:	2302      	movs	r3, #2
 800c238:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800c23a:	1dfb      	adds	r3, r7, #7
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	0018      	movs	r0, r3
 800c240:	f7ff ff4e 	bl	800c0e0 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	221c      	movs	r2, #28
 800c24a:	4013      	ands	r3, r2
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d103      	bne.n	800c25a <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800c252:	2301      	movs	r3, #1
 800c254:	425b      	negs	r3, r3
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e029      	b.n	800c2ae <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800c25a:	f7f7 fa2b 	bl	80036b4 <HAL_GetTick>
 800c25e:	0002      	movs	r2, r0
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	785a      	ldrb	r2, [r3, #1]
 800c268:	213e      	movs	r1, #62	; 0x3e
 800c26a:	438a      	bics	r2, r1
 800c26c:	1c11      	adds	r1, r2, #0
 800c26e:	2204      	movs	r2, #4
 800c270:	430a      	orrs	r2, r1
 800c272:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800c274:	2001      	movs	r0, #1
 800c276:	f7f7 fa27 	bl	80036c8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800c27a:	1dfb      	adds	r3, r7, #7
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	0018      	movs	r0, r3
 800c280:	f7ff ff2e 	bl	800c0e0 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	221c      	movs	r2, #28
 800c28a:	4013      	ands	r3, r2
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d108      	bne.n	800c2a4 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	785a      	ldrb	r2, [r3, #1]
 800c296:	213e      	movs	r1, #62	; 0x3e
 800c298:	438a      	bics	r2, r1
 800c29a:	1c11      	adds	r1, r2, #0
 800c29c:	2202      	movs	r2, #2
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	705a      	strb	r2, [r3, #1]
 800c2a2:	e004      	b.n	800c2ae <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800c2a4:	1dfb      	adds	r3, r7, #7
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	f00a fed1 	bl	8017050 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
}
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	b004      	add	sp, #16
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20018c04 	.word	0x20018c04

0800c2bc <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c2bc:	b590      	push	{r4, r7, lr}
 800c2be:	b089      	sub	sp, #36	; 0x24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]
 800c2c6:	240f      	movs	r4, #15
 800c2c8:	193b      	adds	r3, r7, r4
 800c2ca:	1c02      	adds	r2, r0, #0
 800c2cc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c2ce:	193b      	adds	r3, r7, r4
 800c2d0:	781a      	ldrb	r2, [r3, #0]
 800c2d2:	0013      	movs	r3, r2
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4a3e      	ldr	r2, [pc, #248]	; (800c3d4 <ManageStateAttachedWait_SNK+0x118>)
 800c2dc:	189b      	adds	r3, r3, r2
 800c2de:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800c2e4:	f7f7 f9e6 	bl	80036b4 <HAL_GetTick>
 800c2e8:	0002      	movs	r2, r0
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800c2f2:	193b      	adds	r3, r7, r4
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f7ff fef2 	bl	800c0e0 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800c2fc:	69bb      	ldr	r3, [r7, #24]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	221c      	movs	r2, #28
 800c302:	4013      	ands	r3, r2
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b04      	cmp	r3, #4
 800c308:	d130      	bne.n	800c36c <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b78      	cmp	r3, #120	; 0x78
 800c30e:	d927      	bls.n	800c360 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800c310:	193b      	adds	r3, r7, r4
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2101      	movs	r1, #1
 800c316:	0018      	movs	r0, r3
 800c318:	f00a fc70 	bl	8016bfc <USBPD_PWR_IF_GetVBUSStatus>
 800c31c:	0003      	movs	r3, r0
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d11e      	bne.n	800c360 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	079b      	lsls	r3, r3, #30
 800c328:	0f9b      	lsrs	r3, r3, #30
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	001a      	movs	r2, r3
 800c32e:	193b      	adds	r3, r7, r4
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	0011      	movs	r1, r2
 800c334:	0018      	movs	r0, r3
 800c336:	f001 faf5 	bl	800d924 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	785a      	ldrb	r2, [r3, #1]
 800c33e:	213e      	movs	r1, #62	; 0x3e
 800c340:	438a      	bics	r2, r1
 800c342:	1c11      	adds	r1, r2, #0
 800c344:	2206      	movs	r2, #6
 800c346:	430a      	orrs	r2, r1
 800c348:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2202      	movs	r2, #2
 800c34e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	079b      	lsls	r3, r3, #30
 800c356:	0f9b      	lsrs	r3, r3, #30
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	001a      	movs	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	2120      	movs	r1, #32
 800c366:	438a      	bics	r2, r1
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	e02e      	b.n	800c3ca <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2220      	movs	r2, #32
 800c372:	4013      	ands	r3, r2
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10c      	bne.n	800c394 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800c37a:	f7f7 f99b 	bl	80036b4 <HAL_GetTick>
 800c37e:	0002      	movs	r2, r0
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	781a      	ldrb	r2, [r3, #0]
 800c388:	2120      	movs	r1, #32
 800c38a:	430a      	orrs	r2, r1
 800c38c:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800c38e:	230c      	movs	r3, #12
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	e01a      	b.n	800c3ca <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800c394:	f7f7 f98e 	bl	80036b4 <HAL_GetTick>
 800c398:	0002      	movs	r2, r0
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	2b0c      	cmp	r3, #12
 800c3a2:	d912      	bls.n	800c3ca <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	781a      	ldrb	r2, [r3, #0]
 800c3a8:	2120      	movs	r1, #32
 800c3aa:	438a      	bics	r2, r1
 800c3ac:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	785a      	ldrb	r2, [r3, #1]
 800c3b2:	213e      	movs	r1, #62	; 0x3e
 800c3b4:	438a      	bics	r2, r1
 800c3b6:	1c11      	adds	r1, r2, #0
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800c3be:	230f      	movs	r3, #15
 800c3c0:	18fb      	adds	r3, r7, r3
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	0018      	movs	r0, r3
 800c3c6:	f00a fe54 	bl	8017072 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800c3ca:	69fb      	ldr	r3, [r7, #28]
}
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b009      	add	sp, #36	; 0x24
 800c3d2:	bd90      	pop	{r4, r7, pc}
 800c3d4:	20018c04 	.word	0x20018c04

0800c3d8 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c3d8:	b590      	push	{r4, r7, lr}
 800c3da:	b089      	sub	sp, #36	; 0x24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	210f      	movs	r1, #15
 800c3e4:	187b      	adds	r3, r7, r1
 800c3e6:	1c02      	adds	r2, r0, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c3ea:	0008      	movs	r0, r1
 800c3ec:	183b      	adds	r3, r7, r0
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	0013      	movs	r3, r2
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	189b      	adds	r3, r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4a2e      	ldr	r2, [pc, #184]	; (800c4b4 <ManageStateAttached_SNK+0xdc>)
 800c3fa:	189b      	adds	r3, r3, r2
 800c3fc:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c3fe:	2302      	movs	r3, #2
 800c400:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800c406:	183b      	adds	r3, r7, r0
 800c408:	781a      	ldrb	r2, [r3, #0]
 800c40a:	492b      	ldr	r1, [pc, #172]	; (800c4b8 <ManageStateAttached_SNK+0xe0>)
 800c40c:	0013      	movs	r3, r2
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	1a9b      	subs	r3, r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	18cb      	adds	r3, r1, r3
 800c416:	3334      	adds	r3, #52	; 0x34
 800c418:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d10c      	bne.n	800c438 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800c41e:	183b      	adds	r3, r7, r0
 800c420:	781a      	ldrb	r2, [r3, #0]
 800c422:	4925      	ldr	r1, [pc, #148]	; (800c4b8 <ManageStateAttached_SNK+0xe0>)
 800c424:	0013      	movs	r3, r2
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	1a9b      	subs	r3, r3, r2
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	585b      	ldr	r3, [r3, r1]
 800c42e:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800c430:	23c0      	movs	r3, #192	; 0xc0
 800c432:	029b      	lsls	r3, r3, #10
 800c434:	4013      	ands	r3, r2
 800c436:	e00c      	b.n	800c452 <ManageStateAttached_SNK+0x7a>
 800c438:	230f      	movs	r3, #15
 800c43a:	18fb      	adds	r3, r7, r3
 800c43c:	781a      	ldrb	r2, [r3, #0]
 800c43e:	491e      	ldr	r1, [pc, #120]	; (800c4b8 <ManageStateAttached_SNK+0xe0>)
 800c440:	0013      	movs	r3, r2
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	1a9b      	subs	r3, r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	585b      	ldr	r3, [r3, r1]
 800c44a:	695a      	ldr	r2, [r3, #20]
 800c44c:	23c0      	movs	r3, #192	; 0xc0
 800c44e:	031b      	lsls	r3, r3, #12
 800c450:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800c452:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800c454:	240f      	movs	r4, #15
 800c456:	193b      	adds	r3, r7, r4
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2102      	movs	r1, #2
 800c45c:	0018      	movs	r0, r3
 800c45e:	f00a fbcd 	bl	8016bfc <USBPD_PWR_IF_GetVBUSStatus>
 800c462:	0003      	movs	r3, r0
 800c464:	2b01      	cmp	r3, #1
 800c466:	d11e      	bne.n	800c4a6 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d11a      	bne.n	800c4a6 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800c470:	193b      	adds	r3, r7, r4
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	0018      	movs	r0, r3
 800c476:	f001 fbb7 	bl	800dbe8 <HW_SignalDetachment>
    /* restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	781a      	ldrb	r2, [r3, #0]
 800c47e:	211c      	movs	r1, #28
 800c480:	438a      	bics	r2, r1
 800c482:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	785a      	ldrb	r2, [r3, #1]
 800c488:	213e      	movs	r1, #62	; 0x3e
 800c48a:	438a      	bics	r2, r1
 800c48c:	1c11      	adds	r1, r2, #0
 800c48e:	2202      	movs	r2, #2
 800c490:	430a      	orrs	r2, r1
 800c492:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	2201      	movs	r2, #1
 800c498:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61fb      	str	r3, [r7, #28]
 800c4a4:	e001      	b.n	800c4aa <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800c4a6:	230a      	movs	r3, #10
 800c4a8:	61fb      	str	r3, [r7, #28]
  }

  return _timing;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
}
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	b009      	add	sp, #36	; 0x24
 800c4b2:	bd90      	pop	{r4, r7, pc}
 800c4b4:	20018c04 	.word	0x20018c04
 800c4b8:	20018c1c 	.word	0x20018c1c

0800c4bc <LL_AHB1_GRP1_EnableClock>:
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800c4c4:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c4c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c4c8:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	430a      	orrs	r2, r1
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c4d0:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c4da:	68fb      	ldr	r3, [r7, #12]
}
 800c4dc:	46c0      	nop			; (mov r8, r8)
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	b004      	add	sp, #16
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	40021000 	.word	0x40021000

0800c4e8 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	0002      	movs	r2, r0
 800c4f0:	1dfb      	adds	r3, r7, #7
 800c4f2:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	b002      	add	sp, #8
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	4000a000 	.word	0x4000a000

0800c504 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800c504:	b590      	push	{r4, r7, lr}
 800c506:	b08f      	sub	sp, #60	; 0x3c
 800c508:	af00      	add	r7, sp, #0
 800c50a:	0002      	movs	r2, r0
 800c50c:	1dfb      	adds	r3, r7, #7
 800c50e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800c510:	240c      	movs	r4, #12
 800c512:	193b      	adds	r3, r7, r4
 800c514:	0018      	movs	r0, r3
 800c516:	f7fd f89b 	bl	8009650 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800c51a:	193b      	adds	r3, r7, r4
 800c51c:	2200      	movs	r2, #0
 800c51e:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800c520:	193b      	adds	r3, r7, r4
 800c522:	2200      	movs	r2, #0
 800c524:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800c526:	193b      	adds	r3, r7, r4
 800c528:	2200      	movs	r2, #0
 800c52a:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800c52c:	193b      	adds	r3, r7, r4
 800c52e:	2280      	movs	r2, #128	; 0x80
 800c530:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c532:	193b      	adds	r3, r7, r4
 800c534:	2200      	movs	r2, #0
 800c536:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c538:	193b      	adds	r3, r7, r4
 800c53a:	2200      	movs	r2, #0
 800c53c:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800c53e:	193b      	adds	r3, r7, r4
 800c540:	2200      	movs	r2, #0
 800c542:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800c544:	193b      	adds	r3, r7, r4
 800c546:	2200      	movs	r2, #0
 800c548:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800c54a:	193b      	adds	r3, r7, r4
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800c550:	193b      	adds	r3, r7, r4
 800c552:	2280      	movs	r2, #128	; 0x80
 800c554:	0192      	lsls	r2, r2, #6
 800c556:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800c558:	1dfb      	adds	r3, r7, #7
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10c      	bne.n	800c57a <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800c560:	2001      	movs	r0, #1
 800c562:	f7ff ffab 	bl	800c4bc <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800c566:	193b      	adds	r3, r7, r4
 800c568:	223a      	movs	r2, #58	; 0x3a
 800c56a:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800c56c:	193b      	adds	r3, r7, r4
 800c56e:	4806      	ldr	r0, [pc, #24]	; (800c588 <USBPD_HW_Init_DMARxInstance+0x84>)
 800c570:	001a      	movs	r2, r3
 800c572:	2103      	movs	r1, #3
 800c574:	f7fd f82c 	bl	80095d0 <LL_DMA_Init>
      break;
 800c578:	e000      	b.n	800c57c <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800c57a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800c57c:	4b03      	ldr	r3, [pc, #12]	; (800c58c <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800c57e:	0018      	movs	r0, r3
 800c580:	46bd      	mov	sp, r7
 800c582:	b00f      	add	sp, #60	; 0x3c
 800c584:	bd90      	pop	{r4, r7, pc}
 800c586:	46c0      	nop			; (mov r8, r8)
 800c588:	40020000 	.word	0x40020000
 800c58c:	40020044 	.word	0x40020044

0800c590 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	0002      	movs	r2, r0
 800c598:	1dfb      	adds	r3, r7, #7
 800c59a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800c59c:	46c0      	nop			; (mov r8, r8)
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b002      	add	sp, #8
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b08f      	sub	sp, #60	; 0x3c
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	0002      	movs	r2, r0
 800c5ac:	1dfb      	adds	r3, r7, #7
 800c5ae:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800c5b0:	240c      	movs	r4, #12
 800c5b2:	193b      	adds	r3, r7, r4
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f7fd f84b 	bl	8009650 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800c5ba:	193b      	adds	r3, r7, r4
 800c5bc:	2210      	movs	r2, #16
 800c5be:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800c5c0:	193b      	adds	r3, r7, r4
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800c5c6:	193b      	adds	r3, r7, r4
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800c5cc:	193b      	adds	r3, r7, r4
 800c5ce:	2280      	movs	r2, #128	; 0x80
 800c5d0:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c5d2:	193b      	adds	r3, r7, r4
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c5d8:	193b      	adds	r3, r7, r4
 800c5da:	2200      	movs	r2, #0
 800c5dc:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800c5de:	193b      	adds	r3, r7, r4
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800c5e4:	193b      	adds	r3, r7, r4
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800c5ea:	193b      	adds	r3, r7, r4
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800c5f0:	1dfb      	adds	r3, r7, #7
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d110      	bne.n	800c61a <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	f7ff ff5f 	bl	800c4bc <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800c5fe:	193b      	adds	r3, r7, r4
 800c600:	223b      	movs	r2, #59	; 0x3b
 800c602:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800c604:	193b      	adds	r3, r7, r4
 800c606:	2280      	movs	r2, #128	; 0x80
 800c608:	0152      	lsls	r2, r2, #5
 800c60a:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800c60c:	193b      	adds	r3, r7, r4
 800c60e:	4806      	ldr	r0, [pc, #24]	; (800c628 <USBPD_HW_Init_DMATxInstance+0x84>)
 800c610:	001a      	movs	r2, r3
 800c612:	2101      	movs	r1, #1
 800c614:	f7fc ffdc 	bl	80095d0 <LL_DMA_Init>
      break;
 800c618:	e000      	b.n	800c61c <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800c61a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800c61c:	4b03      	ldr	r3, [pc, #12]	; (800c62c <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800c61e:	0018      	movs	r0, r3
 800c620:	46bd      	mov	sp, r7
 800c622:	b00f      	add	sp, #60	; 0x3c
 800c624:	bd90      	pop	{r4, r7, pc}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	40020000 	.word	0x40020000
 800c62c:	4002001c 	.word	0x4002001c

0800c630 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	0002      	movs	r2, r0
 800c638:	1dfb      	adds	r3, r7, #7
 800c63a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800c63c:	46c0      	nop			; (mov r8, r8)
 800c63e:	46bd      	mov	sp, r7
 800c640:	b002      	add	sp, #8
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	0002      	movs	r2, r0
 800c64c:	1dfb      	adds	r3, r7, #7
 800c64e:	701a      	strb	r2, [r3, #0]
 800c650:	1dbb      	adds	r3, r7, #6
 800c652:	1c0a      	adds	r2, r1, #0
 800c654:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800c656:	46c0      	nop			; (mov r8, r8)
  }
}
 800c658:	46c0      	nop			; (mov r8, r8)
 800c65a:	46bd      	mov	sp, r7
 800c65c:	b002      	add	sp, #8
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	2280      	movs	r2, #128	; 0x80
 800c66e:	0212      	lsls	r2, r2, #8
 800c670:	431a      	orrs	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	619a      	str	r2, [r3, #24]
}
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	46bd      	mov	sp, r7
 800c67a:	b002      	add	sp, #8
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	2280      	movs	r2, #128	; 0x80
 800c68c:	01d2      	lsls	r2, r2, #7
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	619a      	str	r2, [r3, #24]
}
 800c694:	46c0      	nop			; (mov r8, r8)
 800c696:	46bd      	mov	sp, r7
 800c698:	b002      	add	sp, #8
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	2280      	movs	r2, #128	; 0x80
 800c6aa:	0152      	lsls	r2, r2, #5
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	619a      	str	r2, [r3, #24]
}
 800c6b2:	46c0      	nop			; (mov r8, r8)
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	2280      	movs	r2, #128	; 0x80
 800c6c8:	0112      	lsls	r2, r2, #4
 800c6ca:	431a      	orrs	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	619a      	str	r2, [r3, #24]
}
 800c6d0:	46c0      	nop			; (mov r8, r8)
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	b002      	add	sp, #8
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	2280      	movs	r2, #128	; 0x80
 800c6e6:	00d2      	lsls	r2, r2, #3
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	619a      	str	r2, [r3, #24]
}
 800c6ee:	46c0      	nop			; (mov r8, r8)
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	b002      	add	sp, #8
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	2280      	movs	r2, #128	; 0x80
 800c704:	0092      	lsls	r2, r2, #2
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	619a      	str	r2, [r3, #24]
}
 800c70c:	46c0      	nop			; (mov r8, r8)
 800c70e:	46bd      	mov	sp, r7
 800c710:	b002      	add	sp, #8
 800c712:	bd80      	pop	{r7, pc}

0800c714 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2240      	movs	r2, #64	; 0x40
 800c722:	431a      	orrs	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	619a      	str	r2, [r3, #24]
}
 800c728:	46c0      	nop			; (mov r8, r8)
 800c72a:	46bd      	mov	sp, r7
 800c72c:	b002      	add	sp, #8
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	2220      	movs	r2, #32
 800c73e:	431a      	orrs	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	619a      	str	r2, [r3, #24]
}
 800c744:	46c0      	nop			; (mov r8, r8)
 800c746:	46bd      	mov	sp, r7
 800c748:	b002      	add	sp, #8
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	2210      	movs	r2, #16
 800c75a:	431a      	orrs	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	619a      	str	r2, [r3, #24]
}
 800c760:	46c0      	nop			; (mov r8, r8)
 800c762:	46bd      	mov	sp, r7
 800c764:	b002      	add	sp, #8
 800c766:	bd80      	pop	{r7, pc}

0800c768 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	2208      	movs	r2, #8
 800c776:	431a      	orrs	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	619a      	str	r2, [r3, #24]
}
 800c77c:	46c0      	nop			; (mov r8, r8)
 800c77e:	46bd      	mov	sp, r7
 800c780:	b002      	add	sp, #8
 800c782:	bd80      	pop	{r7, pc}

0800c784 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2204      	movs	r2, #4
 800c792:	431a      	orrs	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	619a      	str	r2, [r3, #24]
}
 800c798:	46c0      	nop			; (mov r8, r8)
 800c79a:	46bd      	mov	sp, r7
 800c79c:	b002      	add	sp, #8
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	619a      	str	r2, [r3, #24]
}
 800c7b4:	46c0      	nop			; (mov r8, r8)
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	b002      	add	sp, #8
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	f000 f803 	bl	800c7cc <PORTx_IRQHandler>
}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	0002      	movs	r2, r0
 800c7d4:	1dfb      	adds	r3, r7, #7
 800c7d6:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800c7d8:	1dfb      	adds	r3, r7, #7
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	49d1      	ldr	r1, [pc, #836]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c7de:	0013      	movs	r3, r2
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	1a9b      	subs	r3, r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	585b      	ldr	r3, [r3, r1]
 800c7e8:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	d100      	bne.n	800c7fc <PORTx_IRQHandler+0x30>
 800c7fa:	e1b5      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2202      	movs	r2, #2
 800c800:	4013      	ands	r3, r2
 800c802:	d02c      	beq.n	800c85e <PORTx_IRQHandler+0x92>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	0018      	movs	r0, r3
 800c808:	f7ff ffca 	bl	800c7a0 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800c80c:	1dfb      	adds	r3, r7, #7
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	49c4      	ldr	r1, [pc, #784]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c812:	0013      	movs	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	1a9b      	subs	r3, r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	18cb      	adds	r3, r1, r3
 800c81c:	3304      	adds	r3, #4
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6819      	ldr	r1, [r3, #0]
 800c822:	1dfb      	adds	r3, r7, #7
 800c824:	781a      	ldrb	r2, [r3, #0]
 800c826:	48bf      	ldr	r0, [pc, #764]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c828:	0013      	movs	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	18c3      	adds	r3, r0, r3
 800c832:	3304      	adds	r3, #4
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2201      	movs	r2, #1
 800c838:	4391      	bics	r1, r2
 800c83a:	000a      	movs	r2, r1
 800c83c:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800c83e:	1dfb      	adds	r3, r7, #7
 800c840:	781a      	ldrb	r2, [r3, #0]
 800c842:	49b8      	ldr	r1, [pc, #736]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c844:	0013      	movs	r3, r2
 800c846:	00db      	lsls	r3, r3, #3
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	18cb      	adds	r3, r1, r3
 800c84e:	3314      	adds	r3, #20
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	1dfa      	adds	r2, r7, #7
 800c854:	7812      	ldrb	r2, [r2, #0]
 800c856:	2101      	movs	r1, #1
 800c858:	0010      	movs	r0, r2
 800c85a:	4798      	blx	r3
      return;
 800c85c:	e184      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2204      	movs	r2, #4
 800c862:	4013      	ands	r3, r2
 800c864:	d02c      	beq.n	800c8c0 <PORTx_IRQHandler+0xf4>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	0018      	movs	r0, r3
 800c86a:	f7ff ff8b 	bl	800c784 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800c86e:	1dfb      	adds	r3, r7, #7
 800c870:	781a      	ldrb	r2, [r3, #0]
 800c872:	49ac      	ldr	r1, [pc, #688]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c874:	0013      	movs	r3, r2
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	1a9b      	subs	r3, r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	18cb      	adds	r3, r1, r3
 800c87e:	3304      	adds	r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6819      	ldr	r1, [r3, #0]
 800c884:	1dfb      	adds	r3, r7, #7
 800c886:	781a      	ldrb	r2, [r3, #0]
 800c888:	48a6      	ldr	r0, [pc, #664]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c88a:	0013      	movs	r3, r2
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	1a9b      	subs	r3, r3, r2
 800c890:	00db      	lsls	r3, r3, #3
 800c892:	18c3      	adds	r3, r0, r3
 800c894:	3304      	adds	r3, #4
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2201      	movs	r2, #1
 800c89a:	4391      	bics	r1, r2
 800c89c:	000a      	movs	r2, r1
 800c89e:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800c8a0:	1dfb      	adds	r3, r7, #7
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	499f      	ldr	r1, [pc, #636]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c8a6:	0013      	movs	r3, r2
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	18cb      	adds	r3, r1, r3
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	1dfa      	adds	r2, r7, #7
 800c8b6:	7812      	ldrb	r2, [r2, #0]
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	0010      	movs	r0, r2
 800c8bc:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800c8be:	e153      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2208      	movs	r2, #8
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	d02c      	beq.n	800c922 <PORTx_IRQHandler+0x156>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	0018      	movs	r0, r3
 800c8cc:	f7ff ff4c 	bl	800c768 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800c8d0:	1dfb      	adds	r3, r7, #7
 800c8d2:	781a      	ldrb	r2, [r3, #0]
 800c8d4:	4993      	ldr	r1, [pc, #588]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c8d6:	0013      	movs	r3, r2
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	1a9b      	subs	r3, r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	18cb      	adds	r3, r1, r3
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6819      	ldr	r1, [r3, #0]
 800c8e6:	1dfb      	adds	r3, r7, #7
 800c8e8:	781a      	ldrb	r2, [r3, #0]
 800c8ea:	488e      	ldr	r0, [pc, #568]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c8ec:	0013      	movs	r3, r2
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	1a9b      	subs	r3, r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	18c3      	adds	r3, r0, r3
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	4391      	bics	r1, r2
 800c8fe:	000a      	movs	r2, r1
 800c900:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800c902:	1dfb      	adds	r3, r7, #7
 800c904:	781a      	ldrb	r2, [r3, #0]
 800c906:	4987      	ldr	r1, [pc, #540]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c908:	0013      	movs	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	1a9b      	subs	r3, r3, r2
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	18cb      	adds	r3, r1, r3
 800c912:	3314      	adds	r3, #20
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	1dfa      	adds	r2, r7, #7
 800c918:	7812      	ldrb	r2, [r2, #0]
 800c91a:	2102      	movs	r1, #2
 800c91c:	0010      	movs	r0, r2
 800c91e:	4798      	blx	r3
      return;
 800c920:	e122      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* HRSTDISC : the sent of the hrad reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2210      	movs	r2, #16
 800c926:	4013      	ands	r3, r2
 800c928:	d004      	beq.n	800c934 <PORTx_IRQHandler+0x168>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7ff ff0d 	bl	800c74c <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800c932:	e119      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2220      	movs	r2, #32
 800c938:	4013      	ands	r3, r2
 800c93a:	d013      	beq.n	800c964 <PORTx_IRQHandler+0x198>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	0018      	movs	r0, r3
 800c940:	f7ff fef6 	bl	800c730 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800c944:	1dfb      	adds	r3, r7, #7
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	4976      	ldr	r1, [pc, #472]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c94a:	0013      	movs	r3, r2
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	18cb      	adds	r3, r1, r3
 800c954:	3324      	adds	r3, #36	; 0x24
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	1dfa      	adds	r2, r7, #7
 800c95a:	7812      	ldrb	r2, [r2, #0]
 800c95c:	2105      	movs	r1, #5
 800c95e:	0010      	movs	r0, r2
 800c960:	4798      	blx	r3
      return;
 800c962:	e101      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2240      	movs	r2, #64	; 0x40
 800c968:	4013      	ands	r3, r2
 800c96a:	d004      	beq.n	800c976 <PORTx_IRQHandler+0x1aa>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	0018      	movs	r0, r3
 800c970:	f7ff fed0 	bl	800c714 <LL_UCPD_ClearFlag_TxUND>
      return;
 800c974:	e0f8      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800c976:	68ba      	ldr	r2, [r7, #8]
 800c978:	2380      	movs	r3, #128	; 0x80
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4013      	ands	r3, r2
 800c97e:	d017      	beq.n	800c9b0 <PORTx_IRQHandler+0x1e4>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c984:	2b05      	cmp	r3, #5
 800c986:	d10e      	bne.n	800c9a6 <PORTx_IRQHandler+0x1da>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800c988:	1dfb      	adds	r3, r7, #7
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	4965      	ldr	r1, [pc, #404]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c98e:	0013      	movs	r3, r2
 800c990:	00db      	lsls	r3, r3, #3
 800c992:	1a9b      	subs	r3, r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	18cb      	adds	r3, r1, r3
 800c998:	331c      	adds	r3, #28
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	1dfa      	adds	r2, r7, #7
 800c99e:	7812      	ldrb	r2, [r2, #0]
 800c9a0:	2106      	movs	r1, #6
 800c9a2:	0010      	movs	r0, r2
 800c9a4:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f7ff fea4 	bl	800c6f6 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      return;
 800c9ae:	e0db      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	2380      	movs	r3, #128	; 0x80
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	d013      	beq.n	800c9e2 <PORTx_IRQHandler+0x216>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800c9ba:	1dfb      	adds	r3, r7, #7
 800c9bc:	781a      	ldrb	r2, [r3, #0]
 800c9be:	4959      	ldr	r1, [pc, #356]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800c9c0:	0013      	movs	r3, r2
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	1a9b      	subs	r3, r3, r2
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	18cb      	adds	r3, r1, r3
 800c9ca:	331c      	adds	r3, #28
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	1dfa      	adds	r2, r7, #7
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	2105      	movs	r1, #5
 800c9d4:	0010      	movs	r0, r2
 800c9d6:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f7ff fe7c 	bl	800c6d8 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800c9e0:	e0c2      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	2380      	movs	r3, #128	; 0x80
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <PORTx_IRQHandler+0x234>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag[PortNum] = 1;
 800c9ec:	1dfb      	adds	r3, r7, #7
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	4a4d      	ldr	r2, [pc, #308]	; (800cb28 <PORTx_IRQHandler+0x35c>)
 800c9f2:	2101      	movs	r1, #1
 800c9f4:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	f7ff fe5e 	bl	800c6ba <LL_UCPD_ClearFlag_RxOvr>
      return;
 800c9fe:	e0b3      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	2380      	movs	r3, #128	; 0x80
 800ca04:	015b      	lsls	r3, r3, #5
 800ca06:	4013      	ands	r3, r2
 800ca08:	d100      	bne.n	800ca0c <PORTx_IRQHandler+0x240>
 800ca0a:	e08f      	b.n	800cb2c <PORTx_IRQHandler+0x360>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	0018      	movs	r0, r3
 800ca10:	f7ff fe44 	bl	800c69c <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800ca14:	1dfb      	adds	r3, r7, #7
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	4942      	ldr	r1, [pc, #264]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca1a:	0013      	movs	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	1a9b      	subs	r3, r3, r2
 800ca20:	00db      	lsls	r3, r3, #3
 800ca22:	18cb      	adds	r3, r1, r3
 800ca24:	3308      	adds	r3, #8
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6819      	ldr	r1, [r3, #0]
 800ca2a:	1dfb      	adds	r3, r7, #7
 800ca2c:	781a      	ldrb	r2, [r3, #0]
 800ca2e:	483d      	ldr	r0, [pc, #244]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca30:	0013      	movs	r3, r2
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	1a9b      	subs	r3, r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	18c3      	adds	r3, r0, r3
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4391      	bics	r1, r2
 800ca42:	000a      	movs	r2, r1
 800ca44:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800ca46:	46c0      	nop			; (mov r8, r8)
 800ca48:	1dfb      	adds	r3, r7, #7
 800ca4a:	781a      	ldrb	r2, [r3, #0]
 800ca4c:	4935      	ldr	r1, [pc, #212]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca4e:	0013      	movs	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	1a9b      	subs	r3, r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	18cb      	adds	r3, r1, r3
 800ca58:	3308      	adds	r3, #8
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4013      	ands	r3, r2
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d0f0      	beq.n	800ca48 <PORTx_IRQHandler+0x27c>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800ca66:	1dfb      	adds	r3, r7, #7
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	492e      	ldr	r1, [pc, #184]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca6c:	0013      	movs	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	18cb      	adds	r3, r1, r3
 800ca76:	3330      	adds	r3, #48	; 0x30
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	1dfb      	adds	r3, r7, #7
 800ca7c:	781a      	ldrb	r2, [r3, #0]
 800ca7e:	4929      	ldr	r1, [pc, #164]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca80:	0013      	movs	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	1a9b      	subs	r3, r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	18cb      	adds	r3, r1, r3
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	0002      	movs	r2, r0
 800ca90:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800ca92:	1dfb      	adds	r3, r7, #7
 800ca94:	781a      	ldrb	r2, [r3, #0]
 800ca96:	4923      	ldr	r1, [pc, #140]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800ca98:	0013      	movs	r3, r2
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	18cb      	adds	r3, r1, r3
 800caa2:	3308      	adds	r3, #8
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2284      	movs	r2, #132	; 0x84
 800caa8:	0052      	lsls	r2, r2, #1
 800caaa:	605a      	str	r2, [r3, #4]

      /* enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800caac:	1dfb      	adds	r3, r7, #7
 800caae:	781a      	ldrb	r2, [r3, #0]
 800cab0:	491c      	ldr	r1, [pc, #112]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800cab2:	0013      	movs	r3, r2
 800cab4:	00db      	lsls	r3, r3, #3
 800cab6:	1a9b      	subs	r3, r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	18cb      	adds	r3, r1, r3
 800cabc:	3308      	adds	r3, #8
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6819      	ldr	r1, [r3, #0]
 800cac2:	1dfb      	adds	r3, r7, #7
 800cac4:	781a      	ldrb	r2, [r3, #0]
 800cac6:	4817      	ldr	r0, [pc, #92]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800cac8:	0013      	movs	r3, r2
 800caca:	00db      	lsls	r3, r3, #3
 800cacc:	1a9b      	subs	r3, r3, r2
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	18c3      	adds	r3, r0, r3
 800cad2:	3308      	adds	r3, #8
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2201      	movs	r2, #1
 800cad8:	430a      	orrs	r2, r1
 800cada:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	2380      	movs	r3, #128	; 0x80
 800cae0:	019b      	lsls	r3, r3, #6
 800cae2:	4013      	ands	r3, r2
 800cae4:	d117      	bne.n	800cb16 <PORTx_IRQHandler+0x34a>
 800cae6:	1dfb      	adds	r3, r7, #7
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	4a0f      	ldr	r2, [pc, #60]	; (800cb28 <PORTx_IRQHandler+0x35c>)
 800caec:	5cd3      	ldrb	r3, [r2, r3]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d111      	bne.n	800cb16 <PORTx_IRQHandler+0x34a>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800caf2:	1dfb      	adds	r3, r7, #7
 800caf4:	781a      	ldrb	r2, [r3, #0]
 800caf6:	490b      	ldr	r1, [pc, #44]	; (800cb24 <PORTx_IRQHandler+0x358>)
 800caf8:	0013      	movs	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	18cb      	adds	r3, r1, r3
 800cb02:	3320      	adds	r3, #32
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0a:	2107      	movs	r1, #7
 800cb0c:	4019      	ands	r1, r3
 800cb0e:	1dfb      	adds	r3, r7, #7
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	0018      	movs	r0, r3
 800cb14:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800cb16:	1dfb      	adds	r3, r7, #7
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	4a03      	ldr	r2, [pc, #12]	; (800cb28 <PORTx_IRQHandler+0x35c>)
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	54d1      	strb	r1, [r2, r3]
      return;
 800cb20:	e022      	b.n	800cb68 <PORTx_IRQHandler+0x39c>
 800cb22:	46c0      	nop			; (mov r8, r8)
 800cb24:	20018c1c 	.word	0x20018c1c
 800cb28:	20018c10 	.word	0x20018c10
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	2380      	movs	r3, #128	; 0x80
 800cb30:	01db      	lsls	r3, r3, #7
 800cb32:	4013      	ands	r3, r2
 800cb34:	d104      	bne.n	800cb40 <PORTx_IRQHandler+0x374>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	2380      	movs	r3, #128	; 0x80
 800cb3a:	021b      	lsls	r3, r3, #8
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	d013      	beq.n	800cb68 <PORTx_IRQHandler+0x39c>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	0018      	movs	r0, r3
 800cb44:	f7ff fd9b 	bl	800c67e <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f7ff fd88 	bl	800c660 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800cb50:	1dfb      	adds	r3, r7, #7
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	4906      	ldr	r1, [pc, #24]	; (800cb70 <PORTx_IRQHandler+0x3a4>)
 800cb56:	0013      	movs	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	18cb      	adds	r3, r1, r3
 800cb60:	332c      	adds	r3, #44	; 0x2c
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800cb66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	b004      	add	sp, #16
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	20018c1c 	.word	0x20018c1c

0800cb74 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	240f      	movs	r4, #15
 800cb82:	193b      	adds	r3, r7, r4
 800cb84:	1c02      	adds	r2, r0, #0
 800cb86:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800cb88:	193b      	adds	r3, r7, r4
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	6919      	ldr	r1, [r3, #16]
 800cb90:	4830      	ldr	r0, [pc, #192]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cb92:	0013      	movs	r3, r2
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	1a9b      	subs	r3, r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	18c3      	adds	r3, r0, r3
 800cb9c:	3314      	adds	r3, #20
 800cb9e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800cba0:	193b      	adds	r3, r7, r4
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	68d9      	ldr	r1, [r3, #12]
 800cba8:	482a      	ldr	r0, [pc, #168]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cbaa:	0013      	movs	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	1a9b      	subs	r3, r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	18c3      	adds	r3, r0, r3
 800cbb4:	3318      	adds	r3, #24
 800cbb6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800cbb8:	193b      	adds	r3, r7, r4
 800cbba:	781a      	ldrb	r2, [r3, #0]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	6859      	ldr	r1, [r3, #4]
 800cbc0:	4824      	ldr	r0, [pc, #144]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cbc2:	0013      	movs	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	18c3      	adds	r3, r0, r3
 800cbcc:	331c      	adds	r3, #28
 800cbce:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800cbd0:	193b      	adds	r3, r7, r4
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	491f      	ldr	r1, [pc, #124]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cbd6:	0013      	movs	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	18cb      	adds	r3, r1, r3
 800cbe0:	3320      	adds	r3, #32
 800cbe2:	4a1d      	ldr	r2, [pc, #116]	; (800cc58 <USBPD_PHY_Init+0xe4>)
 800cbe4:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800cbe6:	193b      	adds	r3, r7, r4
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	6899      	ldr	r1, [r3, #8]
 800cbee:	4819      	ldr	r0, [pc, #100]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cbf0:	0013      	movs	r3, r2
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	1a9b      	subs	r3, r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	18c3      	adds	r3, r0, r3
 800cbfa:	3324      	adds	r3, #36	; 0x24
 800cbfc:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800cbfe:	193b      	adds	r3, r7, r4
 800cc00:	781a      	ldrb	r2, [r3, #0]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	6959      	ldr	r1, [r3, #20]
 800cc06:	4813      	ldr	r0, [pc, #76]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cc08:	0013      	movs	r3, r2
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	1a9b      	subs	r3, r3, r2
 800cc0e:	00db      	lsls	r3, r3, #3
 800cc10:	18c3      	adds	r3, r0, r3
 800cc12:	3328      	adds	r3, #40	; 0x28
 800cc14:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800cc16:	193b      	adds	r3, r7, r4
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	490e      	ldr	r1, [pc, #56]	; (800cc54 <USBPD_PHY_Init+0xe0>)
 800cc1c:	0013      	movs	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	18cb      	adds	r3, r1, r3
 800cc26:	3330      	adds	r3, #48	; 0x30
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800cc2c:	193b      	adds	r3, r7, r4
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	4a0a      	ldr	r2, [pc, #40]	; (800cc5c <USBPD_PHY_Init+0xe8>)
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	18d3      	adds	r3, r2, r3
 800cc36:	3304      	adds	r3, #4
 800cc38:	6a3a      	ldr	r2, [r7, #32]
 800cc3a:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800cc3c:	193b      	adds	r3, r7, r4
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <USBPD_PHY_Init+0xe8>)
 800cc46:	00d2      	lsls	r2, r2, #3
 800cc48:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	b005      	add	sp, #20
 800cc52:	bd90      	pop	{r4, r7, pc}
 800cc54:	20018c1c 	.word	0x20018c1c
 800cc58:	0800cdbd 	.word	0x0800cdbd
 800cc5c:	20018c14 	.word	0x20018c14

0800cc60 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	0002      	movs	r2, r0
 800cc68:	1dfb      	adds	r3, r7, #7
 800cc6a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800cc6e:	0018      	movs	r0, r3
 800cc70:	46bd      	mov	sp, r7
 800cc72:	b002      	add	sp, #8
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	00000389 	.word	0x00000389

0800cc7c <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	0002      	movs	r2, r0
 800cc84:	1dfb      	adds	r3, r7, #7
 800cc86:	701a      	strb	r2, [r3, #0]
  return 30u;
 800cc88:	231e      	movs	r3, #30
}
 800cc8a:	0018      	movs	r0, r3
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	b002      	add	sp, #8
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b082      	sub	sp, #8
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	0002      	movs	r2, r0
 800cc9a:	1dfb      	adds	r3, r7, #7
 800cc9c:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800cc9e:	46c0      	nop			; (mov r8, r8)
 800cca0:	46bd      	mov	sp, r7
 800cca2:	b002      	add	sp, #8
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	0002      	movs	r2, r0
 800ccae:	1dfb      	adds	r3, r7, #7
 800ccb0:	701a      	strb	r2, [r3, #0]
 800ccb2:	1dbb      	adds	r3, r7, #6
 800ccb4:	1c0a      	adds	r2, r1, #0
 800ccb6:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800ccb8:	1dbb      	adds	r3, r7, #6
 800ccba:	7819      	ldrb	r1, [r3, #0]
 800ccbc:	1dfb      	adds	r3, r7, #7
 800ccbe:	7818      	ldrb	r0, [r3, #0]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f000 f805 	bl	800ccd2 <USBPD_PHY_SendMessage>
 800ccc8:	0003      	movs	r3, r0
}
 800ccca:	0018      	movs	r0, r3
 800cccc:	46bd      	mov	sp, r7
 800ccce:	b002      	add	sp, #8
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800ccd2:	b590      	push	{r4, r7, lr}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	0004      	movs	r4, r0
 800ccda:	0008      	movs	r0, r1
 800ccdc:	603a      	str	r2, [r7, #0]
 800ccde:	0019      	movs	r1, r3
 800cce0:	1dfb      	adds	r3, r7, #7
 800cce2:	1c22      	adds	r2, r4, #0
 800cce4:	701a      	strb	r2, [r3, #0]
 800cce6:	1dbb      	adds	r3, r7, #6
 800cce8:	1c02      	adds	r2, r0, #0
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	1d3b      	adds	r3, r7, #4
 800ccee:	1c0a      	adds	r2, r1, #0
 800ccf0:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800ccf2:	1d3b      	adds	r3, r7, #4
 800ccf4:	881c      	ldrh	r4, [r3, #0]
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	1dbb      	adds	r3, r7, #6
 800ccfa:	7819      	ldrb	r1, [r3, #0]
 800ccfc:	1dfb      	adds	r3, r7, #7
 800ccfe:	7818      	ldrb	r0, [r3, #0]
 800cd00:	0023      	movs	r3, r4
 800cd02:	f000 fadb 	bl	800d2bc <USBPD_HW_IF_SendBuffer>
 800cd06:	0003      	movs	r3, r0
}
 800cd08:	0018      	movs	r0, r3
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	b003      	add	sp, #12
 800cd0e:	bd90      	pop	{r4, r7, pc}

0800cd10 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	0002      	movs	r2, r0
 800cd18:	1dfb      	adds	r3, r7, #7
 800cd1a:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800cd1c:	1dfb      	adds	r3, r7, #7
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	0018      	movs	r0, r3
 800cd22:	f000 fbc7 	bl	800d4b4 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	0018      	movs	r0, r3
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	b002      	add	sp, #8
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	0002      	movs	r2, r0
 800cd38:	1dfb      	adds	r3, r7, #7
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	1dbb      	adds	r3, r7, #6
 800cd3e:	1c0a      	adds	r2, r1, #0
 800cd40:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800cd42:	1dbb      	adds	r3, r7, #6
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b07      	cmp	r3, #7
 800cd48:	d104      	bne.n	800cd54 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800cd4a:	1dfb      	adds	r3, r7, #7
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	0018      	movs	r0, r3
 800cd50:	f000 fa7c 	bl	800d24c <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	0018      	movs	r0, r3
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	b002      	add	sp, #8
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	0002      	movs	r2, r0
 800cd66:	1dfb      	adds	r3, r7, #7
 800cd68:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800cd6a:	1dfb      	adds	r3, r7, #7
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f000 ffc8 	bl	800dd04 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800cd74:	0003      	movs	r3, r0
}
 800cd76:	0018      	movs	r0, r3
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	b002      	add	sp, #8
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	0002      	movs	r2, r0
 800cd86:	1dfb      	adds	r3, r7, #7
 800cd88:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800cd8a:	1dfb      	adds	r3, r7, #7
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	0018      	movs	r0, r3
 800cd90:	f000 fd98 	bl	800d8c4 <USBPD_HW_IF_EnableRX>
}
 800cd94:	46c0      	nop			; (mov r8, r8)
 800cd96:	46bd      	mov	sp, r7
 800cd98:	b002      	add	sp, #8
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	0002      	movs	r2, r0
 800cda4:	1dfb      	adds	r3, r7, #7
 800cda6:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800cda8:	1dfb      	adds	r3, r7, #7
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	0018      	movs	r0, r3
 800cdae:	f000 fda1 	bl	800d8f4 <USBPD_HW_IF_DisableRX>
}
 800cdb2:	46c0      	nop			; (mov r8, r8)
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	b002      	add	sp, #8
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800cdbc:	b590      	push	{r4, r7, lr}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	0002      	movs	r2, r0
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	1dfb      	adds	r3, r7, #7
 800cdc8:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800cdca:	2008      	movs	r0, #8
 800cdcc:	183b      	adds	r3, r7, r0
 800cdce:	4a2e      	ldr	r2, [pc, #184]	; (800ce88 <PHY_Rx_Completed+0xcc>)
 800cdd0:	6811      	ldr	r1, [r2, #0]
 800cdd2:	6019      	str	r1, [r3, #0]
 800cdd4:	8892      	ldrh	r2, [r2, #4]
 800cdd6:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800cdd8:	240f      	movs	r4, #15
 800cdda:	193b      	adds	r3, r7, r4
 800cddc:	1839      	adds	r1, r7, r0
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	188a      	adds	r2, r1, r2
 800cde2:	7812      	ldrb	r2, [r2, #0]
 800cde4:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800cde6:	193b      	adds	r3, r7, r4
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	dc02      	bgt.n	800cdf4 <PHY_Rx_Completed+0x38>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	da1d      	bge.n	800ce2e <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800cdf2:	e040      	b.n	800ce76 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800cdf4:	2b06      	cmp	r3, #6
 800cdf6:	d13e      	bne.n	800ce76 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800cdf8:	1dfb      	adds	r3, r7, #7
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	4a23      	ldr	r2, [pc, #140]	; (800ce8c <PHY_Rx_Completed+0xd0>)
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	18d3      	adds	r3, r2, r3
 800ce02:	3304      	adds	r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	221e      	movs	r2, #30
 800ce08:	4013      	ands	r3, r2
 800ce0a:	2b1e      	cmp	r3, #30
 800ce0c:	d135      	bne.n	800ce7a <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800ce0e:	1dfb      	adds	r3, r7, #7
 800ce10:	781a      	ldrb	r2, [r3, #0]
 800ce12:	491f      	ldr	r1, [pc, #124]	; (800ce90 <PHY_Rx_Completed+0xd4>)
 800ce14:	0013      	movs	r3, r2
 800ce16:	00db      	lsls	r3, r3, #3
 800ce18:	1a9b      	subs	r3, r3, r2
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	18cb      	adds	r3, r1, r3
 800ce1e:	331c      	adds	r3, #28
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	1dfa      	adds	r2, r7, #7
 800ce24:	7812      	ldrb	r2, [r2, #0]
 800ce26:	2106      	movs	r1, #6
 800ce28:	0010      	movs	r0, r2
 800ce2a:	4798      	blx	r3
      break;
 800ce2c:	e025      	b.n	800ce7a <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800ce2e:	240f      	movs	r4, #15
 800ce30:	193b      	adds	r3, r7, r4
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2201      	movs	r2, #1
 800ce36:	409a      	lsls	r2, r3
 800ce38:	0013      	movs	r3, r2
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	1dfb      	adds	r3, r7, #7
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	4a12      	ldr	r2, [pc, #72]	; (800ce8c <PHY_Rx_Completed+0xd0>)
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	18d3      	adds	r3, r2, r3
 800ce48:	3304      	adds	r3, #4
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	193a      	adds	r2, r7, r4
 800ce4e:	7812      	ldrb	r2, [r2, #0]
 800ce50:	2101      	movs	r1, #1
 800ce52:	4091      	lsls	r1, r2
 800ce54:	000a      	movs	r2, r1
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	4013      	ands	r3, r2
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	d10f      	bne.n	800ce7e <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800ce5e:	1dfb      	adds	r3, r7, #7
 800ce60:	781a      	ldrb	r2, [r3, #0]
 800ce62:	4b0a      	ldr	r3, [pc, #40]	; (800ce8c <PHY_Rx_Completed+0xd0>)
 800ce64:	00d2      	lsls	r2, r2, #3
 800ce66:	58d3      	ldr	r3, [r2, r3]
 800ce68:	193a      	adds	r2, r7, r4
 800ce6a:	7811      	ldrb	r1, [r2, #0]
 800ce6c:	1dfa      	adds	r2, r7, #7
 800ce6e:	7812      	ldrb	r2, [r2, #0]
 800ce70:	0010      	movs	r0, r2
 800ce72:	4798      	blx	r3
      break;
 800ce74:	e003      	b.n	800ce7e <PHY_Rx_Completed+0xc2>
      break;
 800ce76:	46c0      	nop			; (mov r8, r8)
 800ce78:	e002      	b.n	800ce80 <PHY_Rx_Completed+0xc4>
      break;
 800ce7a:	46c0      	nop			; (mov r8, r8)
 800ce7c:	e000      	b.n	800ce80 <PHY_Rx_Completed+0xc4>
      break;
 800ce7e:	46c0      	nop			; (mov r8, r8)
  }
}
 800ce80:	46c0      	nop			; (mov r8, r8)
 800ce82:	46bd      	mov	sp, r7
 800ce84:	b005      	add	sp, #20
 800ce86:	bd90      	pop	{r4, r7, pc}
 800ce88:	0801885c 	.word	0x0801885c
 800ce8c:	20018c14 	.word	0x20018c14
 800ce90:	20018c1c 	.word	0x20018c1c

0800ce94 <LL_AHB1_GRP1_EnableClock>:
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800ce9c:	4b07      	ldr	r3, [pc, #28]	; (800cebc <LL_AHB1_GRP1_EnableClock+0x28>)
 800ce9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <LL_AHB1_GRP1_EnableClock+0x28>)
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	430a      	orrs	r2, r1
 800cea6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <LL_AHB1_GRP1_EnableClock+0x28>)
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	4013      	ands	r3, r2
 800ceb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
}
 800ceb4:	46c0      	nop			; (mov r8, r8)
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	b004      	add	sp, #16
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	40021000 	.word	0x40021000

0800cec0 <LL_APB1_GRP1_EnableClock>:
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <LL_APB1_GRP1_EnableClock+0x28>)
 800ceca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cecc:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <LL_APB1_GRP1_EnableClock+0x28>)
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800ced4:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <LL_APB1_GRP1_EnableClock+0x28>)
 800ced6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	4013      	ands	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cede:	68fb      	ldr	r3, [r7, #12]
}
 800cee0:	46c0      	nop			; (mov r8, r8)
 800cee2:	46bd      	mov	sp, r7
 800cee4:	b004      	add	sp, #16
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	40021000 	.word	0x40021000

0800ceec <LL_APB2_GRP1_EnableClock>:
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800cef4:	4b07      	ldr	r3, [pc, #28]	; (800cf14 <LL_APB2_GRP1_EnableClock+0x28>)
 800cef6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <LL_APB2_GRP1_EnableClock+0x28>)
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800cf00:	4b04      	ldr	r3, [pc, #16]	; (800cf14 <LL_APB2_GRP1_EnableClock+0x28>)
 800cf02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	4013      	ands	r3, r2
 800cf08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
}
 800cf0c:	46c0      	nop			; (mov r8, r8)
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	b004      	add	sp, #16
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	40021000 	.word	0x40021000

0800cf18 <LL_UCPD_Enable>:
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2280      	movs	r2, #128	; 0x80
 800cf26:	0612      	lsls	r2, r2, #24
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	601a      	str	r2, [r3, #0]
}
 800cf2e:	46c0      	nop			; (mov r8, r8)
 800cf30:	46bd      	mov	sp, r7
 800cf32:	b002      	add	sp, #8
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <LL_UCPD_Disable>:
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	085a      	lsrs	r2, r3, #1
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	601a      	str	r2, [r3, #0]
}
 800cf4a:	46c0      	nop			; (mov r8, r8)
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	b002      	add	sp, #8
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	4a03      	ldr	r2, [pc, #12]	; (800cf70 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800cf62:	401a      	ands	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60da      	str	r2, [r3, #12]
}
 800cf68:	46c0      	nop			; (mov r8, r8)
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	b002      	add	sp, #8
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	ffdfffff 	.word	0xffdfffff

0800cf74 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	2280      	movs	r2, #128	; 0x80
 800cf82:	0392      	lsls	r2, r2, #14
 800cf84:	431a      	orrs	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	60da      	str	r2, [r3, #12]
}
 800cf8a:	46c0      	nop			; (mov r8, r8)
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	b002      	add	sp, #8
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	4a03      	ldr	r2, [pc, #12]	; (800cfb0 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800cfa2:	401a      	ands	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	60da      	str	r2, [r3, #12]
}
 800cfa8:	46c0      	nop			; (mov r8, r8)
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	b002      	add	sp, #8
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	ffefffff 	.word	0xffefffff

0800cfb4 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	2280      	movs	r2, #128	; 0x80
 800cfc2:	0352      	lsls	r2, r2, #13
 800cfc4:	431a      	orrs	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	60da      	str	r2, [r3, #12]
}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <LL_UCPD_FRSDetectionEnable>:
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	2280      	movs	r2, #128	; 0x80
 800cfe0:	0252      	lsls	r2, r2, #9
 800cfe2:	431a      	orrs	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	60da      	str	r2, [r3, #12]
}
 800cfe8:	46c0      	nop			; (mov r8, r8)
 800cfea:	46bd      	mov	sp, r7
 800cfec:	b002      	add	sp, #8
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <LL_UCPD_FRSDetectionDisable>:
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	4a03      	ldr	r2, [pc, #12]	; (800d00c <LL_UCPD_FRSDetectionDisable+0x1c>)
 800cffe:	401a      	ands	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
}
 800d004:	46c0      	nop			; (mov r8, r8)
 800d006:	46bd      	mov	sp, r7
 800d008:	b002      	add	sp, #8
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	fffeffff 	.word	0xfffeffff

0800d010 <LL_UCPD_SetccEnable>:
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	4a05      	ldr	r2, [pc, #20]	; (800d034 <LL_UCPD_SetccEnable+0x24>)
 800d020:	401a      	ands	r2, r3
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	431a      	orrs	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	60da      	str	r2, [r3, #12]
}
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	46bd      	mov	sp, r7
 800d02e:	b002      	add	sp, #8
 800d030:	bd80      	pop	{r7, pc}
 800d032:	46c0      	nop			; (mov r8, r8)
 800d034:	fffff3ff 	.word	0xfffff3ff

0800d038 <LL_UCPD_SetSNKRole>:
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	2280      	movs	r2, #128	; 0x80
 800d046:	0092      	lsls	r2, r2, #2
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	60da      	str	r2, [r3, #12]
}
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	46bd      	mov	sp, r7
 800d052:	b002      	add	sp, #8
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <LL_UCPD_SetSRCRole>:
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	4a03      	ldr	r2, [pc, #12]	; (800d074 <LL_UCPD_SetSRCRole+0x1c>)
 800d066:	401a      	ands	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60da      	str	r2, [r3, #12]
}
 800d06c:	46c0      	nop			; (mov r8, r8)
 800d06e:	46bd      	mov	sp, r7
 800d070:	b002      	add	sp, #8
 800d072:	bd80      	pop	{r7, pc}
 800d074:	fffffdff 	.word	0xfffffdff

0800d078 <LL_UCPD_SetRpResistor>:
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	4a05      	ldr	r2, [pc, #20]	; (800d09c <LL_UCPD_SetRpResistor+0x24>)
 800d088:	401a      	ands	r2, r3
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	431a      	orrs	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60da      	str	r2, [r3, #12]
}
 800d092:	46c0      	nop			; (mov r8, r8)
 800d094:	46bd      	mov	sp, r7
 800d096:	b002      	add	sp, #8
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	46c0      	nop			; (mov r8, r8)
 800d09c:	fffffe7f 	.word	0xfffffe7f

0800d0a0 <LL_UCPD_SetCCPin>:
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	2240      	movs	r2, #64	; 0x40
 800d0b0:	4393      	bics	r3, r2
 800d0b2:	001a      	movs	r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	60da      	str	r2, [r3, #12]
}
 800d0bc:	46c0      	nop			; (mov r8, r8)
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	b002      	add	sp, #8
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <LL_UCPD_RxEnable>:
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	60da      	str	r2, [r3, #12]
}
 800d0d8:	46c0      	nop			; (mov r8, r8)
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	b002      	add	sp, #8
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <LL_UCPD_RxDisable>:
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	4393      	bics	r3, r2
 800d0f0:	001a      	movs	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	60da      	str	r2, [r3, #12]
}
 800d0f6:	46c0      	nop			; (mov r8, r8)
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	b002      	add	sp, #8
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <LL_UCPD_SetRxMode>:
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	2210      	movs	r2, #16
 800d10e:	4393      	bics	r3, r2
 800d110:	001a      	movs	r2, r3
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	431a      	orrs	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	60da      	str	r2, [r3, #12]
}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b002      	add	sp, #8
 800d120:	bd80      	pop	{r7, pc}

0800d122 <LL_UCPD_SendHardReset>:
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	2208      	movs	r2, #8
 800d130:	431a      	orrs	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60da      	str	r2, [r3, #12]
}
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	46bd      	mov	sp, r7
 800d13a:	b002      	add	sp, #8
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <LL_UCPD_SendMessage>:
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	2204      	movs	r2, #4
 800d14c:	431a      	orrs	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60da      	str	r2, [r3, #12]
}
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	46bd      	mov	sp, r7
 800d156:	b002      	add	sp, #8
 800d158:	bd80      	pop	{r7, pc}

0800d15a <LL_UCPD_SetTxMode>:
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	2203      	movs	r2, #3
 800d16a:	4393      	bics	r3, r2
 800d16c:	001a      	movs	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	431a      	orrs	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	60da      	str	r2, [r3, #12]
}
 800d176:	46c0      	nop			; (mov r8, r8)
 800d178:	46bd      	mov	sp, r7
 800d17a:	b002      	add	sp, #8
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2280      	movs	r2, #128	; 0x80
 800d18c:	05d2      	lsls	r2, r2, #23
 800d18e:	431a      	orrs	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	601a      	str	r2, [r3, #0]
}
 800d194:	46c0      	nop			; (mov r8, r8)
 800d196:	46bd      	mov	sp, r7
 800d198:	b002      	add	sp, #8
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a03      	ldr	r2, [pc, #12]	; (800d1b8 <LL_UCPD_RxDMADisable+0x1c>)
 800d1aa:	401a      	ands	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	601a      	str	r2, [r3, #0]
}
 800d1b0:	46c0      	nop			; (mov r8, r8)
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	bfffffff 	.word	0xbfffffff

0800d1bc <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2280      	movs	r2, #128	; 0x80
 800d1ca:	0592      	lsls	r2, r2, #22
 800d1cc:	431a      	orrs	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	601a      	str	r2, [r3, #0]
}
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	b002      	add	sp, #8
 800d1d8:	bd80      	pop	{r7, pc}
	...

0800d1dc <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a03      	ldr	r2, [pc, #12]	; (800d1f8 <LL_UCPD_TxDMADisable+0x1c>)
 800d1ea:	401a      	ands	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	601a      	str	r2, [r3, #0]
}
 800d1f0:	46c0      	nop			; (mov r8, r8)
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	b002      	add	sp, #8
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	dfffffff 	.word	0xdfffffff

0800d1fc <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	61da      	str	r2, [r3, #28]
}
 800d20c:	46c0      	nop			; (mov r8, r8)
 800d20e:	46bd      	mov	sp, r7
 800d210:	b002      	add	sp, #8
 800d212:	bd80      	pop	{r7, pc}

0800d214 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	621a      	str	r2, [r3, #32]
}
 800d224:	46c0      	nop			; (mov r8, r8)
 800d226:	46bd      	mov	sp, r7
 800d228:	b002      	add	sp, #8
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800d230:	2380      	movs	r3, #128	; 0x80
 800d232:	055b      	lsls	r3, r3, #21
 800d234:	0018      	movs	r0, r3
 800d236:	f7ff fe43 	bl	800cec0 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800d23a:	2380      	movs	r3, #128	; 0x80
 800d23c:	015b      	lsls	r3, r3, #5
 800d23e:	0018      	movs	r0, r3
 800d240:	f7ff fe28 	bl	800ce94 <LL_AHB1_GRP1_EnableClock>
}
 800d244:	46c0      	nop			; (mov r8, r8)
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	0002      	movs	r2, r0
 800d254:	1dfb      	adds	r3, r7, #7
 800d256:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800d258:	1dfb      	adds	r3, r7, #7
 800d25a:	781a      	ldrb	r2, [r3, #0]
 800d25c:	4916      	ldr	r1, [pc, #88]	; (800d2b8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d25e:	0013      	movs	r3, r2
 800d260:	00db      	lsls	r3, r3, #3
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	585b      	ldr	r3, [r3, r1]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	2207      	movs	r2, #7
 800d26c:	4393      	bics	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800d270:	1dfb      	adds	r3, r7, #7
 800d272:	781a      	ldrb	r2, [r3, #0]
 800d274:	4910      	ldr	r1, [pc, #64]	; (800d2b8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d276:	0013      	movs	r3, r2
 800d278:	00db      	lsls	r3, r3, #3
 800d27a:	1a9b      	subs	r3, r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	585b      	ldr	r3, [r3, r1]
 800d280:	0018      	movs	r0, r3
 800d282:	f7ff fe58 	bl	800cf36 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800d286:	1dfb      	adds	r3, r7, #7
 800d288:	781a      	ldrb	r2, [r3, #0]
 800d28a:	490b      	ldr	r1, [pc, #44]	; (800d2b8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d28c:	0013      	movs	r3, r2
 800d28e:	00db      	lsls	r3, r3, #3
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	585b      	ldr	r3, [r3, r1]
 800d296:	0018      	movs	r0, r3
 800d298:	f7ff fe3e 	bl	800cf18 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800d29c:	1dfb      	adds	r3, r7, #7
 800d29e:	781a      	ldrb	r2, [r3, #0]
 800d2a0:	4905      	ldr	r1, [pc, #20]	; (800d2b8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d2a2:	0013      	movs	r3, r2
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	00db      	lsls	r3, r3, #3
 800d2aa:	585b      	ldr	r3, [r3, r1]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	60da      	str	r2, [r3, #12]
}
 800d2b0:	46c0      	nop			; (mov r8, r8)
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	b004      	add	sp, #16
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20018c1c 	.word	0x20018c1c

0800d2bc <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800d2bc:	b590      	push	{r4, r7, lr}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60ba      	str	r2, [r7, #8]
 800d2c4:	607b      	str	r3, [r7, #4]
 800d2c6:	240f      	movs	r4, #15
 800d2c8:	193b      	adds	r3, r7, r4
 800d2ca:	1c02      	adds	r2, r0, #0
 800d2cc:	701a      	strb	r2, [r3, #0]
 800d2ce:	200e      	movs	r0, #14
 800d2d0:	183b      	adds	r3, r7, r0
 800d2d2:	1c0a      	adds	r2, r1, #0
 800d2d4:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800d2d6:	2317      	movs	r3, #23
 800d2d8:	18fb      	adds	r3, r7, r3
 800d2da:	2200      	movs	r2, #0
 800d2dc:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800d2de:	183b      	adds	r3, r7, r0
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b05      	cmp	r3, #5
 800d2e4:	d10b      	bne.n	800d2fe <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800d2e6:	193b      	adds	r3, r7, r4
 800d2e8:	781a      	ldrb	r2, [r3, #0]
 800d2ea:	496d      	ldr	r1, [pc, #436]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d2ec:	0013      	movs	r3, r2
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	585b      	ldr	r3, [r3, r1]
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f7ff ff13 	bl	800d122 <LL_UCPD_SendHardReset>
 800d2fc:	e0c9      	b.n	800d492 <USBPD_HW_IF_SendBuffer+0x1d6>
  }
  else
  {
    switch (Type)
 800d2fe:	230e      	movs	r3, #14
 800d300:	18fb      	adds	r3, r7, r3
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b07      	cmp	r3, #7
 800d306:	d871      	bhi.n	800d3ec <USBPD_HW_IF_SendBuffer+0x130>
 800d308:	009a      	lsls	r2, r3, #2
 800d30a:	4b66      	ldr	r3, [pc, #408]	; (800d4a4 <USBPD_HW_IF_SendBuffer+0x1e8>)
 800d30c:	18d3      	adds	r3, r2, r3
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	469f      	mov	pc, r3
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800d312:	240f      	movs	r4, #15
 800d314:	193b      	adds	r3, r7, r4
 800d316:	781a      	ldrb	r2, [r3, #0]
 800d318:	4961      	ldr	r1, [pc, #388]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d31a:	0013      	movs	r3, r2
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	585b      	ldr	r3, [r3, r1]
 800d324:	4a60      	ldr	r2, [pc, #384]	; (800d4a8 <USBPD_HW_IF_SendBuffer+0x1ec>)
 800d326:	0011      	movs	r1, r2
 800d328:	0018      	movs	r0, r3
 800d32a:	f7ff ff67 	bl	800d1fc <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d32e:	193b      	adds	r3, r7, r4
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	495b      	ldr	r1, [pc, #364]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d334:	0013      	movs	r3, r2
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	1a9b      	subs	r3, r3, r2
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	585b      	ldr	r3, [r3, r1]
 800d33e:	2100      	movs	r1, #0
 800d340:	0018      	movs	r0, r3
 800d342:	f7ff ff0a 	bl	800d15a <LL_UCPD_SetTxMode>
        break;
 800d346:	e056      	b.n	800d3f6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800d348:	240f      	movs	r4, #15
 800d34a:	193b      	adds	r3, r7, r4
 800d34c:	781a      	ldrb	r2, [r3, #0]
 800d34e:	4954      	ldr	r1, [pc, #336]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d350:	0013      	movs	r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	1a9b      	subs	r3, r3, r2
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	585b      	ldr	r3, [r3, r1]
 800d35a:	4a54      	ldr	r2, [pc, #336]	; (800d4ac <USBPD_HW_IF_SendBuffer+0x1f0>)
 800d35c:	0011      	movs	r1, r2
 800d35e:	0018      	movs	r0, r3
 800d360:	f7ff ff4c 	bl	800d1fc <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d364:	193b      	adds	r3, r7, r4
 800d366:	781a      	ldrb	r2, [r3, #0]
 800d368:	494d      	ldr	r1, [pc, #308]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d36a:	0013      	movs	r3, r2
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	1a9b      	subs	r3, r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	585b      	ldr	r3, [r3, r1]
 800d374:	2100      	movs	r1, #0
 800d376:	0018      	movs	r0, r3
 800d378:	f7ff feef 	bl	800d15a <LL_UCPD_SetTxMode>
        break;
 800d37c:	e03b      	b.n	800d3f6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800d37e:	240f      	movs	r4, #15
 800d380:	193b      	adds	r3, r7, r4
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	4946      	ldr	r1, [pc, #280]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d386:	0013      	movs	r3, r2
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	585b      	ldr	r3, [r3, r1]
 800d390:	4a47      	ldr	r2, [pc, #284]	; (800d4b0 <USBPD_HW_IF_SendBuffer+0x1f4>)
 800d392:	0011      	movs	r1, r2
 800d394:	0018      	movs	r0, r3
 800d396:	f7ff ff31 	bl	800d1fc <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d39a:	193b      	adds	r3, r7, r4
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	4940      	ldr	r1, [pc, #256]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d3a0:	0013      	movs	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	1a9b      	subs	r3, r3, r2
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	585b      	ldr	r3, [r3, r1]
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f7ff fed4 	bl	800d15a <LL_UCPD_SetTxMode>
        break;
 800d3b2:	e020      	b.n	800d3f6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800d3b4:	230f      	movs	r3, #15
 800d3b6:	18fb      	adds	r3, r7, r3
 800d3b8:	781a      	ldrb	r2, [r3, #0]
 800d3ba:	4939      	ldr	r1, [pc, #228]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d3bc:	0013      	movs	r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	585b      	ldr	r3, [r3, r1]
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	0018      	movs	r0, r3
 800d3ca:	f7ff fec6 	bl	800d15a <LL_UCPD_SetTxMode>
        break;
 800d3ce:	e012      	b.n	800d3f6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800d3d0:	230f      	movs	r3, #15
 800d3d2:	18fb      	adds	r3, r7, r3
 800d3d4:	781a      	ldrb	r2, [r3, #0]
 800d3d6:	4932      	ldr	r1, [pc, #200]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d3d8:	0013      	movs	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	1a9b      	subs	r3, r3, r2
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	585b      	ldr	r3, [r3, r1]
 800d3e2:	2102      	movs	r1, #2
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	f7ff feb8 	bl	800d15a <LL_UCPD_SetTxMode>
        break;
 800d3ea:	e004      	b.n	800d3f6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      default :
        _status = USBPD_ERROR;
 800d3ec:	2317      	movs	r3, #23
 800d3ee:	18fb      	adds	r3, r7, r3
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	701a      	strb	r2, [r3, #0]
        break;
 800d3f4:	46c0      	nop			; (mov r8, r8)
    }

    if (USBPD_OK == _status)
 800d3f6:	2317      	movs	r3, #23
 800d3f8:	18fb      	adds	r3, r7, r3
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d148      	bne.n	800d492 <USBPD_HW_IF_SendBuffer+0x1d6>
    {
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800d400:	240f      	movs	r4, #15
 800d402:	193b      	adds	r3, r7, r4
 800d404:	781a      	ldrb	r2, [r3, #0]
 800d406:	4926      	ldr	r1, [pc, #152]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d408:	0013      	movs	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	1a9b      	subs	r3, r3, r2
 800d40e:	00db      	lsls	r3, r3, #3
 800d410:	18cb      	adds	r3, r1, r3
 800d412:	3304      	adds	r3, #4
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800d41a:	193b      	adds	r3, r7, r4
 800d41c:	781a      	ldrb	r2, [r3, #0]
 800d41e:	4920      	ldr	r1, [pc, #128]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d420:	0013      	movs	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	1a9b      	subs	r3, r3, r2
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	18cb      	adds	r3, r1, r3
 800d42a:	3304      	adds	r3, #4
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800d432:	193b      	adds	r3, r7, r4
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	491a      	ldr	r1, [pc, #104]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d438:	0013      	movs	r3, r2
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	1a9b      	subs	r3, r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	18cb      	adds	r3, r1, r3
 800d442:	3304      	adds	r3, #4
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6819      	ldr	r1, [r3, #0]
 800d448:	193b      	adds	r3, r7, r4
 800d44a:	781a      	ldrb	r2, [r3, #0]
 800d44c:	4814      	ldr	r0, [pc, #80]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d44e:	0013      	movs	r3, r2
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	1a9b      	subs	r3, r3, r2
 800d454:	00db      	lsls	r3, r3, #3
 800d456:	18c3      	adds	r3, r0, r3
 800d458:	3304      	adds	r3, #4
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2201      	movs	r2, #1
 800d45e:	430a      	orrs	r2, r1
 800d460:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800d462:	193b      	adds	r3, r7, r4
 800d464:	781a      	ldrb	r2, [r3, #0]
 800d466:	490e      	ldr	r1, [pc, #56]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d468:	0013      	movs	r3, r2
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	1a9b      	subs	r3, r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	585b      	ldr	r3, [r3, r1]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	0011      	movs	r1, r2
 800d476:	0018      	movs	r0, r3
 800d478:	f7ff fecc 	bl	800d214 <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800d47c:	193b      	adds	r3, r7, r4
 800d47e:	781a      	ldrb	r2, [r3, #0]
 800d480:	4907      	ldr	r1, [pc, #28]	; (800d4a0 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d482:	0013      	movs	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	1a9b      	subs	r3, r3, r2
 800d488:	00db      	lsls	r3, r3, #3
 800d48a:	585b      	ldr	r3, [r3, r1]
 800d48c:	0018      	movs	r0, r3
 800d48e:	f7ff fe56 	bl	800d13e <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800d492:	2317      	movs	r3, #23
 800d494:	18fb      	adds	r3, r7, r3
 800d496:	781b      	ldrb	r3, [r3, #0]
}
 800d498:	0018      	movs	r0, r3
 800d49a:	46bd      	mov	sp, r7
 800d49c:	b007      	add	sp, #28
 800d49e:	bd90      	pop	{r4, r7, pc}
 800d4a0:	20018c1c 	.word	0x20018c1c
 800d4a4:	08018b54 	.word	0x08018b54
 800d4a8:	0008e318 	.word	0x0008e318
 800d4ac:	00031b18 	.word	0x00031b18
 800d4b0:	000360d8 	.word	0x000360d8

0800d4b4 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	0002      	movs	r2, r0
 800d4bc:	1dfb      	adds	r3, r7, #7
 800d4be:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800d4c0:	1dfb      	adds	r3, r7, #7
 800d4c2:	781a      	ldrb	r2, [r3, #0]
 800d4c4:	490c      	ldr	r1, [pc, #48]	; (800d4f8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800d4c6:	0013      	movs	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	1a9b      	subs	r3, r3, r2
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	585b      	ldr	r3, [r3, r1]
 800d4d0:	2102      	movs	r1, #2
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	f7ff fe41 	bl	800d15a <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800d4d8:	1dfb      	adds	r3, r7, #7
 800d4da:	781a      	ldrb	r2, [r3, #0]
 800d4dc:	4906      	ldr	r1, [pc, #24]	; (800d4f8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800d4de:	0013      	movs	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	585b      	ldr	r3, [r3, r1]
 800d4e8:	0018      	movs	r0, r3
 800d4ea:	f7ff fe28 	bl	800d13e <LL_UCPD_SendMessage>
}
 800d4ee:	46c0      	nop			; (mov r8, r8)
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	b002      	add	sp, #8
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	46c0      	nop			; (mov r8, r8)
 800d4f8:	20018c1c 	.word	0x20018c1c

0800d4fc <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	0002      	movs	r2, r0
 800d504:	1dfb      	adds	r3, r7, #7
 800d506:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800d508:	2001      	movs	r0, #1
 800d50a:	f7ff fcef 	bl	800ceec <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800d50e:	1dfb      	adds	r3, r7, #7
 800d510:	781a      	ldrb	r2, [r3, #0]
 800d512:	4953      	ldr	r1, [pc, #332]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d514:	0013      	movs	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	1a9b      	subs	r3, r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	18cb      	adds	r3, r1, r3
 800d51e:	3310      	adds	r3, #16
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	789b      	ldrb	r3, [r3, #2]
 800d524:	079b      	lsls	r3, r3, #30
 800d526:	0f9b      	lsrs	r3, r3, #30
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d021      	beq.n	800d572 <USBPDM1_AssertRp+0x76>
 800d52e:	dc2f      	bgt.n	800d590 <USBPDM1_AssertRp+0x94>
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <USBPDM1_AssertRp+0x3e>
 800d534:	2b01      	cmp	r3, #1
 800d536:	d00d      	beq.n	800d554 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800d538:	e02a      	b.n	800d590 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800d53a:	1dfb      	adds	r3, r7, #7
 800d53c:	781a      	ldrb	r2, [r3, #0]
 800d53e:	4948      	ldr	r1, [pc, #288]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d540:	0013      	movs	r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	585b      	ldr	r3, [r3, r1]
 800d54a:	2180      	movs	r1, #128	; 0x80
 800d54c:	0018      	movs	r0, r3
 800d54e:	f7ff fd93 	bl	800d078 <LL_UCPD_SetRpResistor>
      break;
 800d552:	e01e      	b.n	800d592 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800d554:	1dfb      	adds	r3, r7, #7
 800d556:	781a      	ldrb	r2, [r3, #0]
 800d558:	4941      	ldr	r1, [pc, #260]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d55a:	0013      	movs	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	1a9b      	subs	r3, r3, r2
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	585b      	ldr	r3, [r3, r1]
 800d564:	2280      	movs	r2, #128	; 0x80
 800d566:	0052      	lsls	r2, r2, #1
 800d568:	0011      	movs	r1, r2
 800d56a:	0018      	movs	r0, r3
 800d56c:	f7ff fd84 	bl	800d078 <LL_UCPD_SetRpResistor>
      break;
 800d570:	e00f      	b.n	800d592 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800d572:	1dfb      	adds	r3, r7, #7
 800d574:	781a      	ldrb	r2, [r3, #0]
 800d576:	493a      	ldr	r1, [pc, #232]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d578:	0013      	movs	r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	1a9b      	subs	r3, r3, r2
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	585b      	ldr	r3, [r3, r1]
 800d582:	22c0      	movs	r2, #192	; 0xc0
 800d584:	0052      	lsls	r2, r2, #1
 800d586:	0011      	movs	r1, r2
 800d588:	0018      	movs	r0, r3
 800d58a:	f7ff fd75 	bl	800d078 <LL_UCPD_SetRpResistor>
      break;
 800d58e:	e000      	b.n	800d592 <USBPDM1_AssertRp+0x96>
      break;
 800d590:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800d592:	1dfb      	adds	r3, r7, #7
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	4932      	ldr	r1, [pc, #200]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d598:	0013      	movs	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	1a9b      	subs	r3, r3, r2
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	585b      	ldr	r3, [r3, r1]
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	0018      	movs	r0, r3
 800d5a6:	f7ff fd33 	bl	800d010 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800d5aa:	1dfb      	adds	r3, r7, #7
 800d5ac:	781a      	ldrb	r2, [r3, #0]
 800d5ae:	492c      	ldr	r1, [pc, #176]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d5b0:	0013      	movs	r3, r2
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	585b      	ldr	r3, [r3, r1]
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f7ff fd4c 	bl	800d058 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800d5c0:	1dfb      	adds	r3, r7, #7
 800d5c2:	781a      	ldrb	r2, [r3, #0]
 800d5c4:	4926      	ldr	r1, [pc, #152]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d5c6:	0013      	movs	r3, r2
 800d5c8:	00db      	lsls	r3, r3, #3
 800d5ca:	1a9b      	subs	r3, r3, r2
 800d5cc:	00db      	lsls	r3, r3, #3
 800d5ce:	18cb      	adds	r3, r1, r3
 800d5d0:	3334      	adds	r3, #52	; 0x34
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10e      	bne.n	800d5f6 <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800d5d8:	1dfb      	adds	r3, r7, #7
 800d5da:	781a      	ldrb	r2, [r3, #0]
 800d5dc:	4920      	ldr	r1, [pc, #128]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d5de:	0013      	movs	r3, r2
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	1a9b      	subs	r3, r3, r2
 800d5e4:	00db      	lsls	r3, r3, #3
 800d5e6:	585b      	ldr	r3, [r3, r1]
 800d5e8:	22c0      	movs	r2, #192	; 0xc0
 800d5ea:	0112      	lsls	r2, r2, #4
 800d5ec:	0011      	movs	r1, r2
 800d5ee:	0018      	movs	r0, r3
 800d5f0:	f7ff fd0e 	bl	800d010 <LL_UCPD_SetccEnable>
 800d5f4:	e01b      	b.n	800d62e <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800d5f6:	1dfb      	adds	r3, r7, #7
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	4919      	ldr	r1, [pc, #100]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d5fc:	0013      	movs	r3, r2
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	1a9b      	subs	r3, r3, r2
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800d606:	1dfb      	adds	r3, r7, #7
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	4915      	ldr	r1, [pc, #84]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d60c:	0013      	movs	r3, r2
 800d60e:	00db      	lsls	r3, r3, #3
 800d610:	1a9b      	subs	r3, r3, r2
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	18cb      	adds	r3, r1, r3
 800d616:	3334      	adds	r3, #52	; 0x34
 800d618:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d102      	bne.n	800d624 <USBPDM1_AssertRp+0x128>
 800d61e:	2380      	movs	r3, #128	; 0x80
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	e001      	b.n	800d628 <USBPDM1_AssertRp+0x12c>
 800d624:	2380      	movs	r3, #128	; 0x80
 800d626:	011b      	lsls	r3, r3, #4
 800d628:	0019      	movs	r1, r3
 800d62a:	f7ff fcf1 	bl	800d010 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800d62e:	4b0d      	ldr	r3, [pc, #52]	; (800d664 <USBPDM1_AssertRp+0x168>)
 800d630:	6819      	ldr	r1, [r3, #0]
 800d632:	1dfb      	adds	r3, r7, #7
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	480a      	ldr	r0, [pc, #40]	; (800d660 <USBPDM1_AssertRp+0x164>)
 800d638:	0013      	movs	r3, r2
 800d63a:	00db      	lsls	r3, r3, #3
 800d63c:	1a9b      	subs	r3, r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	581b      	ldr	r3, [r3, r0]
 800d642:	4a09      	ldr	r2, [pc, #36]	; (800d668 <USBPDM1_AssertRp+0x16c>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d102      	bne.n	800d64e <USBPDM1_AssertRp+0x152>
 800d648:	2380      	movs	r3, #128	; 0x80
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	e001      	b.n	800d652 <USBPDM1_AssertRp+0x156>
 800d64e:	2380      	movs	r3, #128	; 0x80
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	4a04      	ldr	r2, [pc, #16]	; (800d664 <USBPDM1_AssertRp+0x168>)
 800d654:	430b      	orrs	r3, r1
 800d656:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 800d658:	46c0      	nop			; (mov r8, r8)
 800d65a:	46bd      	mov	sp, r7
 800d65c:	b002      	add	sp, #8
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20018c1c 	.word	0x20018c1c
 800d664:	40010000 	.word	0x40010000
 800d668:	4000a000 	.word	0x4000a000

0800d66c <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	0002      	movs	r2, r0
 800d674:	1dfb      	adds	r3, r7, #7
 800d676:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800d678:	46c0      	nop			; (mov r8, r8)
 800d67a:	46bd      	mov	sp, r7
 800d67c:	b002      	add	sp, #8
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	0002      	movs	r2, r0
 800d688:	1dfb      	adds	r3, r7, #7
 800d68a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800d68c:	1dfb      	adds	r3, r7, #7
 800d68e:	781a      	ldrb	r2, [r3, #0]
 800d690:	494b      	ldr	r1, [pc, #300]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d692:	0013      	movs	r3, r2
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	00db      	lsls	r3, r3, #3
 800d69a:	585b      	ldr	r3, [r3, r1]
 800d69c:	0018      	movs	r0, r3
 800d69e:	f7ff fc69 	bl	800cf74 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800d6a2:	1dfb      	adds	r3, r7, #7
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	4946      	ldr	r1, [pc, #280]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d6a8:	0013      	movs	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	1a9b      	subs	r3, r3, r2
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	585b      	ldr	r3, [r3, r1]
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	f7ff fc7e 	bl	800cfb4 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	f7ff fc17 	bl	800ceec <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800d6be:	1dfb      	adds	r3, r7, #7
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	493f      	ldr	r1, [pc, #252]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d6c4:	0013      	movs	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	1a9b      	subs	r3, r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	585b      	ldr	r3, [r3, r1]
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f7ff fc9d 	bl	800d010 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800d6d6:	1dfb      	adds	r3, r7, #7
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	4939      	ldr	r1, [pc, #228]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d6dc:	0013      	movs	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	585b      	ldr	r3, [r3, r1]
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f7ff fca6 	bl	800d038 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800d6ec:	1dfb      	adds	r3, r7, #7
 800d6ee:	781a      	ldrb	r2, [r3, #0]
 800d6f0:	4933      	ldr	r1, [pc, #204]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d6f2:	0013      	movs	r3, r2
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	1a9b      	subs	r3, r3, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	18cb      	adds	r3, r1, r3
 800d6fc:	3334      	adds	r3, #52	; 0x34
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10e      	bne.n	800d722 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800d704:	1dfb      	adds	r3, r7, #7
 800d706:	781a      	ldrb	r2, [r3, #0]
 800d708:	492d      	ldr	r1, [pc, #180]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d70a:	0013      	movs	r3, r2
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	585b      	ldr	r3, [r3, r1]
 800d714:	22c0      	movs	r2, #192	; 0xc0
 800d716:	0112      	lsls	r2, r2, #4
 800d718:	0011      	movs	r1, r2
 800d71a:	0018      	movs	r0, r3
 800d71c:	f7ff fc78 	bl	800d010 <LL_UCPD_SetccEnable>
 800d720:	e01b      	b.n	800d75a <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800d722:	1dfb      	adds	r3, r7, #7
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	4926      	ldr	r1, [pc, #152]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d728:	0013      	movs	r3, r2
 800d72a:	00db      	lsls	r3, r3, #3
 800d72c:	1a9b      	subs	r3, r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800d732:	1dfb      	adds	r3, r7, #7
 800d734:	781a      	ldrb	r2, [r3, #0]
 800d736:	4922      	ldr	r1, [pc, #136]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d738:	0013      	movs	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	1a9b      	subs	r3, r3, r2
 800d73e:	00db      	lsls	r3, r3, #3
 800d740:	18cb      	adds	r3, r1, r3
 800d742:	3334      	adds	r3, #52	; 0x34
 800d744:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800d746:	2b01      	cmp	r3, #1
 800d748:	d102      	bne.n	800d750 <USBPDM1_AssertRd+0xd0>
 800d74a:	2380      	movs	r3, #128	; 0x80
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	e001      	b.n	800d754 <USBPDM1_AssertRd+0xd4>
 800d750:	2380      	movs	r3, #128	; 0x80
 800d752:	011b      	lsls	r3, r3, #4
 800d754:	0019      	movs	r1, r3
 800d756:	f7ff fc5b 	bl	800d010 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800d75a:	4b1a      	ldr	r3, [pc, #104]	; (800d7c4 <USBPDM1_AssertRd+0x144>)
 800d75c:	6819      	ldr	r1, [r3, #0]
 800d75e:	1dfb      	adds	r3, r7, #7
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	4817      	ldr	r0, [pc, #92]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d764:	0013      	movs	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	1a9b      	subs	r3, r3, r2
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	581b      	ldr	r3, [r3, r0]
 800d76e:	4a16      	ldr	r2, [pc, #88]	; (800d7c8 <USBPDM1_AssertRd+0x148>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d102      	bne.n	800d77a <USBPDM1_AssertRd+0xfa>
 800d774:	2380      	movs	r3, #128	; 0x80
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	e001      	b.n	800d77e <USBPDM1_AssertRd+0xfe>
 800d77a:	2380      	movs	r3, #128	; 0x80
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	4a11      	ldr	r2, [pc, #68]	; (800d7c4 <USBPDM1_AssertRd+0x144>)
 800d780:	430b      	orrs	r3, r1
 800d782:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800d784:	2001      	movs	r0, #1
 800d786:	f7f5 ff9f 	bl	80036c8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800d78a:	1dfb      	adds	r3, r7, #7
 800d78c:	781a      	ldrb	r2, [r3, #0]
 800d78e:	490c      	ldr	r1, [pc, #48]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d790:	0013      	movs	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	1a9b      	subs	r3, r3, r2
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	585b      	ldr	r3, [r3, r1]
 800d79a:	0018      	movs	r0, r3
 800d79c:	f7ff fbda 	bl	800cf54 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800d7a0:	1dfb      	adds	r3, r7, #7
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	4906      	ldr	r1, [pc, #24]	; (800d7c0 <USBPDM1_AssertRd+0x140>)
 800d7a6:	0013      	movs	r3, r2
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	585b      	ldr	r3, [r3, r1]
 800d7b0:	0018      	movs	r0, r3
 800d7b2:	f7ff fbef 	bl	800cf94 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 800d7b6:	46c0      	nop			; (mov r8, r8)
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	b002      	add	sp, #8
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	20018c1c 	.word	0x20018c1c
 800d7c4:	40010000 	.word	0x40010000
 800d7c8:	4000a000 	.word	0x4000a000

0800d7cc <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	0002      	movs	r2, r0
 800d7d4:	1dfb      	adds	r3, r7, #7
 800d7d6:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800d7d8:	46c0      	nop			; (mov r8, r8)
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	b002      	add	sp, #8
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	0002      	movs	r2, r0
 800d7e8:	1dfb      	adds	r3, r7, #7
 800d7ea:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	f7ff fb7d 	bl	800ceec <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800d7f2:	1dfb      	adds	r3, r7, #7
 800d7f4:	781a      	ldrb	r2, [r3, #0]
 800d7f6:	4930      	ldr	r1, [pc, #192]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d7f8:	0013      	movs	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	585b      	ldr	r3, [r3, r1]
 800d802:	0018      	movs	r0, r3
 800d804:	f7ff fc28 	bl	800d058 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800d808:	1dfb      	adds	r3, r7, #7
 800d80a:	781a      	ldrb	r2, [r3, #0]
 800d80c:	492a      	ldr	r1, [pc, #168]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d80e:	0013      	movs	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	1a9b      	subs	r3, r3, r2
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	585b      	ldr	r3, [r3, r1]
 800d818:	2100      	movs	r1, #0
 800d81a:	0018      	movs	r0, r3
 800d81c:	f7ff fc2c 	bl	800d078 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	781a      	ldrb	r2, [r3, #0]
 800d824:	4924      	ldr	r1, [pc, #144]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d826:	0013      	movs	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	1a9b      	subs	r3, r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	585b      	ldr	r3, [r3, r1]
 800d830:	2100      	movs	r1, #0
 800d832:	0018      	movs	r0, r3
 800d834:	f7ff fbec 	bl	800d010 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800d838:	4b20      	ldr	r3, [pc, #128]	; (800d8bc <USBPDM1_EnterErrorRecovery+0xdc>)
 800d83a:	6819      	ldr	r1, [r3, #0]
 800d83c:	1dfb      	adds	r3, r7, #7
 800d83e:	781a      	ldrb	r2, [r3, #0]
 800d840:	481d      	ldr	r0, [pc, #116]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d842:	0013      	movs	r3, r2
 800d844:	00db      	lsls	r3, r3, #3
 800d846:	1a9b      	subs	r3, r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	581b      	ldr	r3, [r3, r0]
 800d84c:	4a1c      	ldr	r2, [pc, #112]	; (800d8c0 <USBPDM1_EnterErrorRecovery+0xe0>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d102      	bne.n	800d858 <USBPDM1_EnterErrorRecovery+0x78>
 800d852:	2380      	movs	r3, #128	; 0x80
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	e001      	b.n	800d85c <USBPDM1_EnterErrorRecovery+0x7c>
 800d858:	2380      	movs	r3, #128	; 0x80
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	4a17      	ldr	r2, [pc, #92]	; (800d8bc <USBPDM1_EnterErrorRecovery+0xdc>)
 800d85e:	430b      	orrs	r3, r1
 800d860:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800d862:	1dfb      	adds	r3, r7, #7
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	4914      	ldr	r1, [pc, #80]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d868:	0013      	movs	r3, r2
 800d86a:	00db      	lsls	r3, r3, #3
 800d86c:	1a9b      	subs	r3, r3, r2
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	585b      	ldr	r3, [r3, r1]
 800d872:	0018      	movs	r0, r3
 800d874:	f7ff fc34 	bl	800d0e0 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800d878:	1dfb      	adds	r3, r7, #7
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	490e      	ldr	r1, [pc, #56]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d87e:	0013      	movs	r3, r2
 800d880:	00db      	lsls	r3, r3, #3
 800d882:	1a9b      	subs	r3, r3, r2
 800d884:	00db      	lsls	r3, r3, #3
 800d886:	18cb      	adds	r3, r1, r3
 800d888:	330c      	adds	r3, #12
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	7a1b      	ldrb	r3, [r3, #8]
 800d88e:	2202      	movs	r2, #2
 800d890:	4013      	ands	r3, r2
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00a      	beq.n	800d8ae <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800d898:	1dfb      	adds	r3, r7, #7
 800d89a:	781a      	ldrb	r2, [r3, #0]
 800d89c:	4906      	ldr	r1, [pc, #24]	; (800d8b8 <USBPDM1_EnterErrorRecovery+0xd8>)
 800d89e:	0013      	movs	r3, r2
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	1a9b      	subs	r3, r3, r2
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	585b      	ldr	r3, [r3, r1]
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f7ff fba1 	bl	800cff0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	b002      	add	sp, #8
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	20018c1c 	.word	0x20018c1c
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	4000a000 	.word	0x4000a000

0800d8c4 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	0002      	movs	r2, r0
 800d8cc:	1dfb      	adds	r3, r7, #7
 800d8ce:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800d8d0:	1dfb      	adds	r3, r7, #7
 800d8d2:	781a      	ldrb	r2, [r3, #0]
 800d8d4:	4906      	ldr	r1, [pc, #24]	; (800d8f0 <USBPD_HW_IF_EnableRX+0x2c>)
 800d8d6:	0013      	movs	r3, r2
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	1a9b      	subs	r3, r3, r2
 800d8dc:	00db      	lsls	r3, r3, #3
 800d8de:	585b      	ldr	r3, [r3, r1]
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	f7ff fbef 	bl	800d0c4 <LL_UCPD_RxEnable>
}
 800d8e6:	46c0      	nop			; (mov r8, r8)
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	b002      	add	sp, #8
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	20018c1c 	.word	0x20018c1c

0800d8f4 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	0002      	movs	r2, r0
 800d8fc:	1dfb      	adds	r3, r7, #7
 800d8fe:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800d900:	1dfb      	adds	r3, r7, #7
 800d902:	781a      	ldrb	r2, [r3, #0]
 800d904:	4906      	ldr	r1, [pc, #24]	; (800d920 <USBPD_HW_IF_DisableRX+0x2c>)
 800d906:	0013      	movs	r3, r2
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	585b      	ldr	r3, [r3, r1]
 800d910:	0018      	movs	r0, r3
 800d912:	f7ff fbe5 	bl	800d0e0 <LL_UCPD_RxDisable>
}
 800d916:	46c0      	nop			; (mov r8, r8)
 800d918:	46bd      	mov	sp, r7
 800d91a:	b002      	add	sp, #8
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	20018c1c 	.word	0x20018c1c

0800d924 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800d924:	b590      	push	{r4, r7, lr}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	0002      	movs	r2, r0
 800d92c:	6039      	str	r1, [r7, #0]
 800d92e:	1dfb      	adds	r3, r7, #7
 800d930:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800d932:	f000 fc05 	bl	800e140 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800d936:	1dfb      	adds	r3, r7, #7
 800d938:	781c      	ldrb	r4, [r3, #0]
 800d93a:	1dfb      	adds	r3, r7, #7
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	0018      	movs	r0, r3
 800d940:	f7fe fe30 	bl	800c5a4 <USBPD_HW_Init_DMATxInstance>
 800d944:	0001      	movs	r1, r0
 800d946:	4aa6      	ldr	r2, [pc, #664]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d948:	0023      	movs	r3, r4
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	1b1b      	subs	r3, r3, r4
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	18d3      	adds	r3, r2, r3
 800d952:	3304      	adds	r3, #4
 800d954:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800d956:	1dfb      	adds	r3, r7, #7
 800d958:	781c      	ldrb	r4, [r3, #0]
 800d95a:	1dfb      	adds	r3, r7, #7
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	0018      	movs	r0, r3
 800d960:	f7fe fdd0 	bl	800c504 <USBPD_HW_Init_DMARxInstance>
 800d964:	0001      	movs	r1, r0
 800d966:	4a9e      	ldr	r2, [pc, #632]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d968:	0023      	movs	r3, r4
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	1b1b      	subs	r3, r3, r4
 800d96e:	00db      	lsls	r3, r3, #3
 800d970:	18d3      	adds	r3, r2, r3
 800d972:	3308      	adds	r3, #8
 800d974:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800d976:	1dfb      	adds	r3, r7, #7
 800d978:	781a      	ldrb	r2, [r3, #0]
 800d97a:	4999      	ldr	r1, [pc, #612]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d97c:	0013      	movs	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	1a9b      	subs	r3, r3, r2
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	585b      	ldr	r3, [r3, r1]
 800d986:	3330      	adds	r3, #48	; 0x30
 800d988:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800d98a:	1dfb      	adds	r3, r7, #7
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	4994      	ldr	r1, [pc, #592]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d990:	0013      	movs	r3, r2
 800d992:	00db      	lsls	r3, r3, #3
 800d994:	1a9b      	subs	r3, r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	18cb      	adds	r3, r1, r3
 800d99a:	3308      	adds	r3, #8
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800d9a2:	1dfb      	adds	r3, r7, #7
 800d9a4:	781a      	ldrb	r2, [r3, #0]
 800d9a6:	498e      	ldr	r1, [pc, #568]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d9a8:	0013      	movs	r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	1a9b      	subs	r3, r3, r2
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	18cb      	adds	r3, r1, r3
 800d9b2:	3330      	adds	r3, #48	; 0x30
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	1dfb      	adds	r3, r7, #7
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	4989      	ldr	r1, [pc, #548]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d9bc:	0013      	movs	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	1a9b      	subs	r3, r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	18cb      	adds	r3, r1, r3
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	0002      	movs	r2, r0
 800d9cc:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800d9ce:	1dfb      	adds	r3, r7, #7
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	4983      	ldr	r1, [pc, #524]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d9d4:	0013      	movs	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	00db      	lsls	r3, r3, #3
 800d9dc:	18cb      	adds	r3, r1, r3
 800d9de:	3308      	adds	r3, #8
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2284      	movs	r2, #132	; 0x84
 800d9e4:	0052      	lsls	r2, r2, #1
 800d9e6:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800d9e8:	1dfb      	adds	r3, r7, #7
 800d9ea:	781a      	ldrb	r2, [r3, #0]
 800d9ec:	497c      	ldr	r1, [pc, #496]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800d9ee:	0013      	movs	r3, r2
 800d9f0:	00db      	lsls	r3, r3, #3
 800d9f2:	1a9b      	subs	r3, r3, r2
 800d9f4:	00db      	lsls	r3, r3, #3
 800d9f6:	18cb      	adds	r3, r1, r3
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	6819      	ldr	r1, [r3, #0]
 800d9fe:	1dfb      	adds	r3, r7, #7
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	4877      	ldr	r0, [pc, #476]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da04:	0013      	movs	r3, r2
 800da06:	00db      	lsls	r3, r3, #3
 800da08:	1a9b      	subs	r3, r3, r2
 800da0a:	00db      	lsls	r3, r3, #3
 800da0c:	18c3      	adds	r3, r0, r3
 800da0e:	3308      	adds	r3, #8
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2201      	movs	r2, #1
 800da14:	430a      	orrs	r2, r1
 800da16:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800da18:	1dfb      	adds	r3, r7, #7
 800da1a:	781a      	ldrb	r2, [r3, #0]
 800da1c:	4970      	ldr	r1, [pc, #448]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da1e:	0013      	movs	r3, r2
 800da20:	00db      	lsls	r3, r3, #3
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	585b      	ldr	r3, [r3, r1]
 800da28:	3324      	adds	r3, #36	; 0x24
 800da2a:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800da2c:	1dfb      	adds	r3, r7, #7
 800da2e:	781a      	ldrb	r2, [r3, #0]
 800da30:	496b      	ldr	r1, [pc, #428]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da32:	0013      	movs	r3, r2
 800da34:	00db      	lsls	r3, r3, #3
 800da36:	1a9b      	subs	r3, r3, r2
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	18cb      	adds	r3, r1, r3
 800da3c:	3304      	adds	r3, #4
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800da44:	1dfb      	adds	r3, r7, #7
 800da46:	781a      	ldrb	r2, [r3, #0]
 800da48:	4965      	ldr	r1, [pc, #404]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da4a:	0013      	movs	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	1a9b      	subs	r3, r3, r2
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	585b      	ldr	r3, [r3, r1]
 800da54:	6919      	ldr	r1, [r3, #16]
 800da56:	1dfb      	adds	r3, r7, #7
 800da58:	781a      	ldrb	r2, [r3, #0]
 800da5a:	4861      	ldr	r0, [pc, #388]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da5c:	0013      	movs	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	1a9b      	subs	r3, r3, r2
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	581b      	ldr	r3, [r3, r0]
 800da66:	4a5f      	ldr	r2, [pc, #380]	; (800dbe4 <HW_SignalAttachement+0x2c0>)
 800da68:	430a      	orrs	r2, r1
 800da6a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800da6c:	1dfb      	adds	r3, r7, #7
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	495b      	ldr	r1, [pc, #364]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da72:	0013      	movs	r3, r2
 800da74:	00db      	lsls	r3, r3, #3
 800da76:	1a9b      	subs	r3, r3, r2
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	18cb      	adds	r3, r1, r3
 800da7c:	3334      	adds	r3, #52	; 0x34
 800da7e:	683a      	ldr	r2, [r7, #0]
 800da80:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800da82:	1dfb      	adds	r3, r7, #7
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	4956      	ldr	r1, [pc, #344]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da88:	0013      	movs	r3, r2
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	1a9b      	subs	r3, r3, r2
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	5858      	ldr	r0, [r3, r1]
 800da92:	1dfb      	adds	r3, r7, #7
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	4952      	ldr	r1, [pc, #328]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800da98:	0013      	movs	r3, r2
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	00db      	lsls	r3, r3, #3
 800daa0:	18cb      	adds	r3, r1, r3
 800daa2:	3334      	adds	r3, #52	; 0x34
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d101      	bne.n	800daae <HW_SignalAttachement+0x18a>
 800daaa:	2300      	movs	r3, #0
 800daac:	e000      	b.n	800dab0 <HW_SignalAttachement+0x18c>
 800daae:	2340      	movs	r3, #64	; 0x40
 800dab0:	0019      	movs	r1, r3
 800dab2:	f7ff faf5 	bl	800d0a0 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800dab6:	1dfb      	adds	r3, r7, #7
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	4949      	ldr	r1, [pc, #292]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800dabc:	0013      	movs	r3, r2
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	1a9b      	subs	r3, r3, r2
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	18cb      	adds	r3, r1, r3
 800dac6:	330c      	adds	r3, #12
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	7a1b      	ldrb	r3, [r3, #8]
 800dacc:	2202      	movs	r2, #2
 800dace:	4013      	ands	r3, r2
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d034      	beq.n	800db40 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800dad6:	1dfb      	adds	r3, r7, #7
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	4941      	ldr	r1, [pc, #260]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800dadc:	0013      	movs	r3, r2
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	1a9b      	subs	r3, r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	18cb      	adds	r3, r1, r3
 800dae6:	3334      	adds	r3, #52	; 0x34
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d101      	bne.n	800daf2 <HW_SignalAttachement+0x1ce>
 800daee:	2301      	movs	r3, #1
 800daf0:	e000      	b.n	800daf4 <HW_SignalAttachement+0x1d0>
 800daf2:	2302      	movs	r3, #2
 800daf4:	1dfa      	adds	r2, r7, #7
 800daf6:	7812      	ldrb	r2, [r2, #0]
 800daf8:	0019      	movs	r1, r3
 800dafa:	0010      	movs	r0, r2
 800dafc:	f7fe fda2 	bl	800c644 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800db00:	1dfb      	adds	r3, r7, #7
 800db02:	781a      	ldrb	r2, [r3, #0]
 800db04:	4936      	ldr	r1, [pc, #216]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db06:	0013      	movs	r3, r2
 800db08:	00db      	lsls	r3, r3, #3
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	585b      	ldr	r3, [r3, r1]
 800db10:	0018      	movs	r0, r3
 800db12:	f7ff fa5e 	bl	800cfd2 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800db16:	1dfb      	adds	r3, r7, #7
 800db18:	781a      	ldrb	r2, [r3, #0]
 800db1a:	4931      	ldr	r1, [pc, #196]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db1c:	0013      	movs	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	585b      	ldr	r3, [r3, r1]
 800db26:	6919      	ldr	r1, [r3, #16]
 800db28:	1dfb      	adds	r3, r7, #7
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	482c      	ldr	r0, [pc, #176]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db2e:	0013      	movs	r3, r2
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	1a9b      	subs	r3, r3, r2
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	581b      	ldr	r3, [r3, r0]
 800db38:	2280      	movs	r2, #128	; 0x80
 800db3a:	0352      	lsls	r2, r2, #13
 800db3c:	430a      	orrs	r2, r1
 800db3e:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 800db40:	1dfb      	adds	r3, r7, #7
 800db42:	781a      	ldrb	r2, [r3, #0]
 800db44:	4926      	ldr	r1, [pc, #152]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db46:	0013      	movs	r3, r2
 800db48:	00db      	lsls	r3, r3, #3
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	18cb      	adds	r3, r1, r3
 800db50:	3334      	adds	r3, #52	; 0x34
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d10e      	bne.n	800db76 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 800db58:	1dfb      	adds	r3, r7, #7
 800db5a:	781a      	ldrb	r2, [r3, #0]
 800db5c:	4920      	ldr	r1, [pc, #128]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db5e:	0013      	movs	r3, r2
 800db60:	00db      	lsls	r3, r3, #3
 800db62:	1a9b      	subs	r3, r3, r2
 800db64:	00db      	lsls	r3, r3, #3
 800db66:	585b      	ldr	r3, [r3, r1]
 800db68:	2280      	movs	r2, #128	; 0x80
 800db6a:	00d2      	lsls	r2, r2, #3
 800db6c:	0011      	movs	r1, r2
 800db6e:	0018      	movs	r0, r3
 800db70:	f7ff fa4e 	bl	800d010 <LL_UCPD_SetccEnable>
 800db74:	e00d      	b.n	800db92 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800db76:	1dfb      	adds	r3, r7, #7
 800db78:	781a      	ldrb	r2, [r3, #0]
 800db7a:	4919      	ldr	r1, [pc, #100]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db7c:	0013      	movs	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	1a9b      	subs	r3, r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	585b      	ldr	r3, [r3, r1]
 800db86:	2280      	movs	r2, #128	; 0x80
 800db88:	0112      	lsls	r2, r2, #4
 800db8a:	0011      	movs	r1, r2
 800db8c:	0018      	movs	r0, r3
 800db8e:	f7ff fa3f 	bl	800d010 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800db92:	1dfb      	adds	r3, r7, #7
 800db94:	781a      	ldrb	r2, [r3, #0]
 800db96:	4912      	ldr	r1, [pc, #72]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800db98:	0013      	movs	r3, r2
 800db9a:	00db      	lsls	r3, r3, #3
 800db9c:	1a9b      	subs	r3, r3, r2
 800db9e:	00db      	lsls	r3, r3, #3
 800dba0:	585b      	ldr	r3, [r3, r1]
 800dba2:	2100      	movs	r1, #0
 800dba4:	0018      	movs	r0, r3
 800dba6:	f7ff faaa 	bl	800d0fe <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800dbaa:	1dfb      	adds	r3, r7, #7
 800dbac:	781a      	ldrb	r2, [r3, #0]
 800dbae:	490c      	ldr	r1, [pc, #48]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800dbb0:	0013      	movs	r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	1a9b      	subs	r3, r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	585b      	ldr	r3, [r3, r1]
 800dbba:	0018      	movs	r0, r3
 800dbbc:	f7ff fadf 	bl	800d17e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800dbc0:	1dfb      	adds	r3, r7, #7
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	4906      	ldr	r1, [pc, #24]	; (800dbe0 <HW_SignalAttachement+0x2bc>)
 800dbc6:	0013      	movs	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	1a9b      	subs	r3, r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	585b      	ldr	r3, [r3, r1]
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	f7ff faf3 	bl	800d1bc <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800dbd6:	46c0      	nop			; (mov r8, r8)
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	b005      	add	sp, #20
 800dbdc:	bd90      	pop	{r4, r7, pc}
 800dbde:	46c0      	nop			; (mov r8, r8)
 800dbe0:	20018c1c 	.word	0x20018c1c
 800dbe4:	00001e7e 	.word	0x00001e7e

0800dbe8 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	0002      	movs	r2, r0
 800dbf0:	1dfb      	adds	r3, r7, #7
 800dbf2:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800dbf4:	1dfb      	adds	r3, r7, #7
 800dbf6:	781a      	ldrb	r2, [r3, #0]
 800dbf8:	4941      	ldr	r1, [pc, #260]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dbfa:	0013      	movs	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	1a9b      	subs	r3, r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	585b      	ldr	r3, [r3, r1]
 800dc04:	0018      	movs	r0, r3
 800dc06:	f7ff fac9 	bl	800d19c <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800dc0a:	1dfb      	adds	r3, r7, #7
 800dc0c:	781a      	ldrb	r2, [r3, #0]
 800dc0e:	493c      	ldr	r1, [pc, #240]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dc10:	0013      	movs	r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	585b      	ldr	r3, [r3, r1]
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f7ff fade 	bl	800d1dc <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800dc20:	1dfb      	adds	r3, r7, #7
 800dc22:	781a      	ldrb	r2, [r3, #0]
 800dc24:	4936      	ldr	r1, [pc, #216]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dc26:	0013      	movs	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	1a9b      	subs	r3, r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	585b      	ldr	r3, [r3, r1]
 800dc30:	0018      	movs	r0, r3
 800dc32:	f7ff fa55 	bl	800d0e0 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800dc36:	1dfb      	adds	r3, r7, #7
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	4931      	ldr	r1, [pc, #196]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dc3c:	0013      	movs	r3, r2
 800dc3e:	00db      	lsls	r3, r3, #3
 800dc40:	1a9b      	subs	r3, r3, r2
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	585b      	ldr	r3, [r3, r1]
 800dc46:	22c0      	movs	r2, #192	; 0xc0
 800dc48:	0212      	lsls	r2, r2, #8
 800dc4a:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800dc4c:	1dfb      	adds	r3, r7, #7
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	0018      	movs	r0, r3
 800dc52:	f7fe fced 	bl	800c630 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800dc56:	1dfb      	adds	r3, r7, #7
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	0018      	movs	r0, r3
 800dc5c:	f7fe fc98 	bl	800c590 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800dc60:	1dfb      	adds	r3, r7, #7
 800dc62:	781a      	ldrb	r2, [r3, #0]
 800dc64:	4926      	ldr	r1, [pc, #152]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dc66:	0013      	movs	r3, r2
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	585b      	ldr	r3, [r3, r1]
 800dc70:	22c0      	movs	r2, #192	; 0xc0
 800dc72:	0112      	lsls	r2, r2, #4
 800dc74:	0011      	movs	r1, r2
 800dc76:	0018      	movs	r0, r3
 800dc78:	f7ff f9ca 	bl	800d010 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800dc7c:	1dfb      	adds	r3, r7, #7
 800dc7e:	781a      	ldrb	r2, [r3, #0]
 800dc80:	491f      	ldr	r1, [pc, #124]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dc82:	0013      	movs	r3, r2
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	1a9b      	subs	r3, r3, r2
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	18cb      	adds	r3, r1, r3
 800dc8c:	3310      	adds	r3, #16
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2204      	movs	r2, #4
 800dc94:	4013      	ands	r3, r2
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d104      	bne.n	800dca6 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800dc9c:	1dfb      	adds	r3, r7, #7
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	0018      	movs	r0, r3
 800dca2:	f009 f9e6 	bl	8017072 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800dca6:	1dfb      	adds	r3, r7, #7
 800dca8:	781a      	ldrb	r2, [r3, #0]
 800dcaa:	4915      	ldr	r1, [pc, #84]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dcac:	0013      	movs	r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	1a9b      	subs	r3, r3, r2
 800dcb2:	00db      	lsls	r3, r3, #3
 800dcb4:	18cb      	adds	r3, r1, r3
 800dcb6:	330c      	adds	r3, #12
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	7a1b      	ldrb	r3, [r3, #8]
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00a      	beq.n	800dcdc <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800dcc6:	1dfb      	adds	r3, r7, #7
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	490d      	ldr	r1, [pc, #52]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dccc:	0013      	movs	r3, r2
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	1a9b      	subs	r3, r3, r2
 800dcd2:	00db      	lsls	r3, r3, #3
 800dcd4:	585b      	ldr	r3, [r3, r1]
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f7ff f98a 	bl	800cff0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800dcdc:	1dfb      	adds	r3, r7, #7
 800dcde:	781a      	ldrb	r2, [r3, #0]
 800dce0:	4907      	ldr	r1, [pc, #28]	; (800dd00 <HW_SignalDetachment+0x118>)
 800dce2:	0013      	movs	r3, r2
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	1a9b      	subs	r3, r3, r2
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	18cb      	adds	r3, r1, r3
 800dcec:	3334      	adds	r3, #52	; 0x34
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800dcf2:	f000 fac5 	bl	800e280 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800dcf6:	46c0      	nop			; (mov r8, r8)
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	b002      	add	sp, #8
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	46c0      	nop			; (mov r8, r8)
 800dd00:	20018c1c 	.word	0x20018c1c

0800dd04 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
}

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	0002      	movs	r2, r0
 800dd0c:	1dfb      	adds	r3, r7, #7
 800dd0e:	701a      	strb	r2, [r3, #0]
  switch (Ports[PortNum].CCx)
 800dd10:	1dfb      	adds	r3, r7, #7
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	491c      	ldr	r1, [pc, #112]	; (800dd88 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800dd16:	0013      	movs	r3, r2
 800dd18:	00db      	lsls	r3, r3, #3
 800dd1a:	1a9b      	subs	r3, r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	18cb      	adds	r3, r1, r3
 800dd20:	3334      	adds	r3, #52	; 0x34
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d002      	beq.n	800dd2e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d012      	beq.n	800dd52 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800dd2c:	e026      	b.n	800dd7c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800dd2e:	1dfb      	adds	r3, r7, #7
 800dd30:	781a      	ldrb	r2, [r3, #0]
 800dd32:	4915      	ldr	r1, [pc, #84]	; (800dd88 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800dd34:	0013      	movs	r3, r2
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	585b      	ldr	r3, [r3, r1]
 800dd3e:	695a      	ldr	r2, [r3, #20]
 800dd40:	23c0      	movs	r3, #192	; 0xc0
 800dd42:	029b      	lsls	r3, r3, #10
 800dd44:	401a      	ands	r2, r3
 800dd46:	23c0      	movs	r3, #192	; 0xc0
 800dd48:	029b      	lsls	r3, r3, #10
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d113      	bne.n	800dd76 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e015      	b.n	800dd7e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800dd52:	1dfb      	adds	r3, r7, #7
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	490c      	ldr	r1, [pc, #48]	; (800dd88 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800dd58:	0013      	movs	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	00db      	lsls	r3, r3, #3
 800dd60:	585b      	ldr	r3, [r3, r1]
 800dd62:	695a      	ldr	r2, [r3, #20]
 800dd64:	23c0      	movs	r3, #192	; 0xc0
 800dd66:	031b      	lsls	r3, r3, #12
 800dd68:	401a      	ands	r2, r3
 800dd6a:	23c0      	movs	r3, #192	; 0xc0
 800dd6c:	031b      	lsls	r3, r3, #12
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d103      	bne.n	800dd7a <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e003      	b.n	800dd7e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800dd76:	46c0      	nop			; (mov r8, r8)
 800dd78:	e000      	b.n	800dd7c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800dd7a:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	0018      	movs	r0, r3
 800dd80:	46bd      	mov	sp, r7
 800dd82:	b002      	add	sp, #8
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	46c0      	nop			; (mov r8, r8)
 800dd88:	20018c1c 	.word	0x20018c1c

0800dd8c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	0002      	movs	r2, r0
 800dd94:	1dfb      	adds	r3, r7, #7
 800dd96:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800dd98:	1dfb      	adds	r3, r7, #7
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	220c      	movs	r2, #12
 800dd9e:	18ba      	adds	r2, r7, r2
 800dda0:	0011      	movs	r1, r2
 800dda2:	0018      	movs	r0, r3
 800dda4:	f009 f977 	bl	8017096 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	b29b      	uxth	r3, r3
}
 800ddac:	0018      	movs	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b004      	add	sp, #16
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <LL_APB2_GRP1_EnableClock>:
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800ddbc:	4b07      	ldr	r3, [pc, #28]	; (800dddc <LL_APB2_GRP1_EnableClock+0x28>)
 800ddbe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ddc0:	4b06      	ldr	r3, [pc, #24]	; (800dddc <LL_APB2_GRP1_EnableClock+0x28>)
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	430a      	orrs	r2, r1
 800ddc6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800ddc8:	4b04      	ldr	r3, [pc, #16]	; (800dddc <LL_APB2_GRP1_EnableClock+0x28>)
 800ddca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	4013      	ands	r3, r2
 800ddd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
}
 800ddd4:	46c0      	nop			; (mov r8, r8)
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	b004      	add	sp, #16
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	40021000 	.word	0x40021000

0800dde0 <LL_APB2_GRP1_DisableClock>:
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800dde8:	4b05      	ldr	r3, [pc, #20]	; (800de00 <LL_APB2_GRP1_DisableClock+0x20>)
 800ddea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	43d9      	mvns	r1, r3
 800ddf0:	4b03      	ldr	r3, [pc, #12]	; (800de00 <LL_APB2_GRP1_DisableClock+0x20>)
 800ddf2:	400a      	ands	r2, r1
 800ddf4:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ddf6:	46c0      	nop			; (mov r8, r8)
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	b002      	add	sp, #8
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	40021000 	.word	0x40021000

0800de04 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2201      	movs	r2, #1
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	601a      	str	r2, [r3, #0]
}
 800de18:	46c0      	nop			; (mov r8, r8)
 800de1a:	46bd      	mov	sp, r7
 800de1c:	b002      	add	sp, #8
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2270      	movs	r2, #112	; 0x70
 800de30:	4393      	bics	r3, r2
 800de32:	001a      	movs	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	431a      	orrs	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	601a      	str	r2, [r3, #0]
}
 800de3c:	46c0      	nop			; (mov r8, r8)
 800de3e:	46bd      	mov	sp, r7
 800de40:	b002      	add	sp, #8
 800de42:	bd80      	pop	{r7, pc}

0800de44 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	629a      	str	r2, [r3, #40]	; 0x28
}
 800de54:	46c0      	nop			; (mov r8, r8)
 800de56:	46bd      	mov	sp, r7
 800de58:	b002      	add	sp, #8
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800de68:	0018      	movs	r0, r3
 800de6a:	46bd      	mov	sp, r7
 800de6c:	b002      	add	sp, #8
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800de80:	46c0      	nop			; (mov r8, r8)
 800de82:	46bd      	mov	sp, r7
 800de84:	b002      	add	sp, #8
 800de86:	bd80      	pop	{r7, pc}

0800de88 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d02c      	beq.n	800def4 <LL_TIM_OC_SetMode+0x6c>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b04      	cmp	r3, #4
 800de9e:	d027      	beq.n	800def0 <LL_TIM_OC_SetMode+0x68>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2b10      	cmp	r3, #16
 800dea4:	d022      	beq.n	800deec <LL_TIM_OC_SetMode+0x64>
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2b40      	cmp	r3, #64	; 0x40
 800deaa:	d01d      	beq.n	800dee8 <LL_TIM_OC_SetMode+0x60>
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	2380      	movs	r3, #128	; 0x80
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d016      	beq.n	800dee4 <LL_TIM_OC_SetMode+0x5c>
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	2380      	movs	r3, #128	; 0x80
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	429a      	cmp	r2, r3
 800debe:	d00f      	beq.n	800dee0 <LL_TIM_OC_SetMode+0x58>
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	2380      	movs	r3, #128	; 0x80
 800dec4:	015b      	lsls	r3, r3, #5
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d008      	beq.n	800dedc <LL_TIM_OC_SetMode+0x54>
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	025b      	lsls	r3, r3, #9
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d101      	bne.n	800ded8 <LL_TIM_OC_SetMode+0x50>
 800ded4:	2307      	movs	r3, #7
 800ded6:	e00e      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800ded8:	2308      	movs	r3, #8
 800deda:	e00c      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800dedc:	2306      	movs	r3, #6
 800dede:	e00a      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800dee0:	2305      	movs	r3, #5
 800dee2:	e008      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800dee4:	2304      	movs	r3, #4
 800dee6:	e006      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800dee8:	2303      	movs	r3, #3
 800deea:	e004      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800deec:	2302      	movs	r3, #2
 800deee:	e002      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800def0:	2301      	movs	r3, #1
 800def2:	e000      	b.n	800def6 <LL_TIM_OC_SetMode+0x6e>
 800def4:	2300      	movs	r3, #0
 800def6:	2017      	movs	r0, #23
 800def8:	183a      	adds	r2, r7, r0
 800defa:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3318      	adds	r3, #24
 800df00:	0019      	movs	r1, r3
 800df02:	183b      	adds	r3, r7, r0
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	4a0e      	ldr	r2, [pc, #56]	; (800df40 <LL_TIM_OC_SetMode+0xb8>)
 800df08:	5cd3      	ldrb	r3, [r2, r3]
 800df0a:	18cb      	adds	r3, r1, r3
 800df0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	183a      	adds	r2, r7, r0
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	490b      	ldr	r1, [pc, #44]	; (800df44 <LL_TIM_OC_SetMode+0xbc>)
 800df18:	5c8a      	ldrb	r2, [r1, r2]
 800df1a:	0011      	movs	r1, r2
 800df1c:	4a0a      	ldr	r2, [pc, #40]	; (800df48 <LL_TIM_OC_SetMode+0xc0>)
 800df1e:	408a      	lsls	r2, r1
 800df20:	43d2      	mvns	r2, r2
 800df22:	401a      	ands	r2, r3
 800df24:	183b      	adds	r3, r7, r0
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	4906      	ldr	r1, [pc, #24]	; (800df44 <LL_TIM_OC_SetMode+0xbc>)
 800df2a:	5ccb      	ldrb	r3, [r1, r3]
 800df2c:	0019      	movs	r1, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	408b      	lsls	r3, r1
 800df32:	431a      	orrs	r2, r3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	601a      	str	r2, [r3, #0]
}
 800df38:	46c0      	nop			; (mov r8, r8)
 800df3a:	46bd      	mov	sp, r7
 800df3c:	b006      	add	sp, #24
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	08018b74 	.word	0x08018b74
 800df44:	08018b80 	.word	0x08018b80
 800df48:	00010073 	.word	0x00010073

0800df4c <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d02c      	beq.n	800dfb8 <LL_TIM_OC_SetPolarity+0x6c>
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b04      	cmp	r3, #4
 800df62:	d027      	beq.n	800dfb4 <LL_TIM_OC_SetPolarity+0x68>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b10      	cmp	r3, #16
 800df68:	d022      	beq.n	800dfb0 <LL_TIM_OC_SetPolarity+0x64>
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b40      	cmp	r3, #64	; 0x40
 800df6e:	d01d      	beq.n	800dfac <LL_TIM_OC_SetPolarity+0x60>
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	2380      	movs	r3, #128	; 0x80
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	429a      	cmp	r2, r3
 800df78:	d016      	beq.n	800dfa8 <LL_TIM_OC_SetPolarity+0x5c>
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	2380      	movs	r3, #128	; 0x80
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	429a      	cmp	r2, r3
 800df82:	d00f      	beq.n	800dfa4 <LL_TIM_OC_SetPolarity+0x58>
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	2380      	movs	r3, #128	; 0x80
 800df88:	015b      	lsls	r3, r3, #5
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d008      	beq.n	800dfa0 <LL_TIM_OC_SetPolarity+0x54>
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	2380      	movs	r3, #128	; 0x80
 800df92:	025b      	lsls	r3, r3, #9
 800df94:	429a      	cmp	r2, r3
 800df96:	d101      	bne.n	800df9c <LL_TIM_OC_SetPolarity+0x50>
 800df98:	2307      	movs	r3, #7
 800df9a:	e00e      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800df9c:	2308      	movs	r3, #8
 800df9e:	e00c      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfa0:	2306      	movs	r3, #6
 800dfa2:	e00a      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfa4:	2305      	movs	r3, #5
 800dfa6:	e008      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfa8:	2304      	movs	r3, #4
 800dfaa:	e006      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfac:	2303      	movs	r3, #3
 800dfae:	e004      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	e002      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <LL_TIM_OC_SetPolarity+0x6e>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	2017      	movs	r0, #23
 800dfbc:	183a      	adds	r2, r7, r0
 800dfbe:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	183a      	adds	r2, r7, r0
 800dfc6:	7812      	ldrb	r2, [r2, #0]
 800dfc8:	490a      	ldr	r1, [pc, #40]	; (800dff4 <LL_TIM_OC_SetPolarity+0xa8>)
 800dfca:	5c8a      	ldrb	r2, [r1, r2]
 800dfcc:	0011      	movs	r1, r2
 800dfce:	2202      	movs	r2, #2
 800dfd0:	408a      	lsls	r2, r1
 800dfd2:	43d2      	mvns	r2, r2
 800dfd4:	401a      	ands	r2, r3
 800dfd6:	183b      	adds	r3, r7, r0
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	4906      	ldr	r1, [pc, #24]	; (800dff4 <LL_TIM_OC_SetPolarity+0xa8>)
 800dfdc:	5ccb      	ldrb	r3, [r1, r3]
 800dfde:	0019      	movs	r1, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	408b      	lsls	r3, r1
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	621a      	str	r2, [r3, #32]
}
 800dfea:	46c0      	nop			; (mov r8, r8)
 800dfec:	46bd      	mov	sp, r7
 800dfee:	b006      	add	sp, #24
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	46c0      	nop			; (mov r8, r8)
 800dff4:	08018b8c 	.word	0x08018b8c

0800dff8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e008:	46c0      	nop			; (mov r8, r8)
 800e00a:	46bd      	mov	sp, r7
 800e00c:	b002      	add	sp, #8
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e020:	46c0      	nop			; (mov r8, r8)
 800e022:	46bd      	mov	sp, r7
 800e024:	b002      	add	sp, #8
 800e026:	bd80      	pop	{r7, pc}

0800e028 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e038:	46c0      	nop			; (mov r8, r8)
 800e03a:	46bd      	mov	sp, r7
 800e03c:	b002      	add	sp, #8
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e050:	46c0      	nop			; (mov r8, r8)
 800e052:	46bd      	mov	sp, r7
 800e054:	b002      	add	sp, #8
 800e056:	bd80      	pop	{r7, pc}

0800e058 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2203      	movs	r2, #3
 800e064:	4252      	negs	r2, r2
 800e066:	611a      	str	r2, [r3, #16]
}
 800e068:	46c0      	nop			; (mov r8, r8)
 800e06a:	46bd      	mov	sp, r7
 800e06c:	b002      	add	sp, #8
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	2202      	movs	r2, #2
 800e07e:	4013      	ands	r3, r2
 800e080:	2b02      	cmp	r3, #2
 800e082:	d101      	bne.n	800e088 <LL_TIM_IsActiveFlag_CC1+0x18>
 800e084:	2301      	movs	r3, #1
 800e086:	e000      	b.n	800e08a <LL_TIM_IsActiveFlag_CC1+0x1a>
 800e088:	2300      	movs	r3, #0
}
 800e08a:	0018      	movs	r0, r3
 800e08c:	46bd      	mov	sp, r7
 800e08e:	b002      	add	sp, #8
 800e090:	bd80      	pop	{r7, pc}

0800e092 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2205      	movs	r2, #5
 800e09e:	4252      	negs	r2, r2
 800e0a0:	611a      	str	r2, [r3, #16]
}
 800e0a2:	46c0      	nop			; (mov r8, r8)
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	b002      	add	sp, #8
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b082      	sub	sp, #8
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	2204      	movs	r2, #4
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	2b04      	cmp	r3, #4
 800e0bc:	d101      	bne.n	800e0c2 <LL_TIM_IsActiveFlag_CC2+0x18>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e000      	b.n	800e0c4 <LL_TIM_IsActiveFlag_CC2+0x1a>
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	0018      	movs	r0, r3
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	b002      	add	sp, #8
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2209      	movs	r2, #9
 800e0d8:	4252      	negs	r2, r2
 800e0da:	611a      	str	r2, [r3, #16]
}
 800e0dc:	46c0      	nop			; (mov r8, r8)
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	b002      	add	sp, #8
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	2208      	movs	r2, #8
 800e0f2:	4013      	ands	r3, r2
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d101      	bne.n	800e0fc <LL_TIM_IsActiveFlag_CC3+0x18>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e000      	b.n	800e0fe <LL_TIM_IsActiveFlag_CC3+0x1a>
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	0018      	movs	r0, r3
 800e100:	46bd      	mov	sp, r7
 800e102:	b002      	add	sp, #8
 800e104:	bd80      	pop	{r7, pc}

0800e106 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2211      	movs	r2, #17
 800e112:	4252      	negs	r2, r2
 800e114:	611a      	str	r2, [r3, #16]
}
 800e116:	46c0      	nop			; (mov r8, r8)
 800e118:	46bd      	mov	sp, r7
 800e11a:	b002      	add	sp, #8
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b082      	sub	sp, #8
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	2210      	movs	r2, #16
 800e12c:	4013      	ands	r3, r2
 800e12e:	2b10      	cmp	r3, #16
 800e130:	d101      	bne.n	800e136 <LL_TIM_IsActiveFlag_CC4+0x18>
 800e132:	2301      	movs	r3, #1
 800e134:	e000      	b.n	800e138 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800e136:	2300      	movs	r3, #0
}
 800e138:	0018      	movs	r0, r3
 800e13a:	46bd      	mov	sp, r7
 800e13c:	b002      	add	sp, #8
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800e140:	b5b0      	push	{r4, r5, r7, lr}
 800e142:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800e144:	4b48      	ldr	r3, [pc, #288]	; (800e268 <USBPD_TIM_Init+0x128>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	b25b      	sxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d000      	beq.n	800e150 <USBPD_TIM_Init+0x10>
 800e14e:	e07e      	b.n	800e24e <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 800e150:	2380      	movs	r3, #128	; 0x80
 800e152:	011b      	lsls	r3, r3, #4
 800e154:	0018      	movs	r0, r3
 800e156:	f7ff fe2d 	bl	800ddb4 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800e15a:	4b44      	ldr	r3, [pc, #272]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e15c:	2100      	movs	r1, #0
 800e15e:	0018      	movs	r0, r3
 800e160:	f7ff fe5e 	bl	800de20 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800e164:	4b42      	ldr	r3, [pc, #264]	; (800e270 <USBPD_TIM_Init+0x130>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a42      	ldr	r2, [pc, #264]	; (800e274 <USBPD_TIM_Init+0x134>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d90b      	bls.n	800e186 <USBPD_TIM_Init+0x46>
 800e16e:	4b40      	ldr	r3, [pc, #256]	; (800e270 <USBPD_TIM_Init+0x130>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a41      	ldr	r2, [pc, #260]	; (800e278 <USBPD_TIM_Init+0x138>)
 800e174:	4694      	mov	ip, r2
 800e176:	4463      	add	r3, ip
 800e178:	4940      	ldr	r1, [pc, #256]	; (800e27c <USBPD_TIM_Init+0x13c>)
 800e17a:	0018      	movs	r0, r3
 800e17c:	f7f3 ff6c 	bl	8002058 <__udivsi3>
 800e180:	0003      	movs	r3, r0
 800e182:	3b01      	subs	r3, #1
 800e184:	e000      	b.n	800e188 <USBPD_TIM_Init+0x48>
 800e186:	2300      	movs	r3, #0
 800e188:	4a38      	ldr	r2, [pc, #224]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e18a:	0019      	movs	r1, r3
 800e18c:	0010      	movs	r0, r2
 800e18e:	f7ff fe59 	bl	800de44 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800e192:	4b37      	ldr	r3, [pc, #220]	; (800e270 <USBPD_TIM_Init+0x130>)
 800e194:	681c      	ldr	r4, [r3, #0]
 800e196:	4b35      	ldr	r3, [pc, #212]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e198:	0018      	movs	r0, r3
 800e19a:	f7ff fe5f 	bl	800de5c <LL_TIM_GetPrescaler>
 800e19e:	0003      	movs	r3, r0
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	0019      	movs	r1, r3
 800e1a4:	0020      	movs	r0, r4
 800e1a6:	f7f3 ff57 	bl	8002058 <__udivsi3>
 800e1aa:	0003      	movs	r3, r0
 800e1ac:	2b63      	cmp	r3, #99	; 0x63
 800e1ae:	d910      	bls.n	800e1d2 <USBPD_TIM_Init+0x92>
 800e1b0:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <USBPD_TIM_Init+0x130>)
 800e1b2:	681c      	ldr	r4, [r3, #0]
 800e1b4:	4b2d      	ldr	r3, [pc, #180]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e1b6:	0018      	movs	r0, r3
 800e1b8:	f7ff fe50 	bl	800de5c <LL_TIM_GetPrescaler>
 800e1bc:	0003      	movs	r3, r0
 800e1be:	3301      	adds	r3, #1
 800e1c0:	2264      	movs	r2, #100	; 0x64
 800e1c2:	4353      	muls	r3, r2
 800e1c4:	0019      	movs	r1, r3
 800e1c6:	0020      	movs	r0, r4
 800e1c8:	f7f3 ff46 	bl	8002058 <__udivsi3>
 800e1cc:	0003      	movs	r3, r0
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <USBPD_TIM_Init+0x94>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	4a25      	ldr	r2, [pc, #148]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e1d6:	0019      	movs	r1, r3
 800e1d8:	0010      	movs	r0, r2
 800e1da:	f7ff fe49 	bl	800de70 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 800e1de:	4b23      	ldr	r3, [pc, #140]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e1e0:	2230      	movs	r2, #48	; 0x30
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	f7ff fe4f 	bl	800de88 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 800e1ea:	4b20      	ldr	r3, [pc, #128]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e1ec:	2230      	movs	r2, #48	; 0x30
 800e1ee:	2110      	movs	r1, #16
 800e1f0:	0018      	movs	r0, r3
 800e1f2:	f7ff fe49 	bl	800de88 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 800e1f6:	2380      	movs	r3, #128	; 0x80
 800e1f8:	005b      	lsls	r3, r3, #1
 800e1fa:	481c      	ldr	r0, [pc, #112]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e1fc:	2230      	movs	r2, #48	; 0x30
 800e1fe:	0019      	movs	r1, r3
 800e200:	f7ff fe42 	bl	800de88 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 800e204:	2380      	movs	r3, #128	; 0x80
 800e206:	015b      	lsls	r3, r3, #5
 800e208:	4818      	ldr	r0, [pc, #96]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e20a:	2230      	movs	r2, #48	; 0x30
 800e20c:	0019      	movs	r1, r3
 800e20e:	f7ff fe3b 	bl	800de88 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800e212:	4b16      	ldr	r3, [pc, #88]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e214:	2200      	movs	r2, #0
 800e216:	2101      	movs	r1, #1
 800e218:	0018      	movs	r0, r3
 800e21a:	f7ff fe97 	bl	800df4c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e220:	2200      	movs	r2, #0
 800e222:	2110      	movs	r1, #16
 800e224:	0018      	movs	r0, r3
 800e226:	f7ff fe91 	bl	800df4c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800e22a:	2380      	movs	r3, #128	; 0x80
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	480f      	ldr	r0, [pc, #60]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e230:	2200      	movs	r2, #0
 800e232:	0019      	movs	r1, r3
 800e234:	f7ff fe8a 	bl	800df4c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800e238:	2380      	movs	r3, #128	; 0x80
 800e23a:	015b      	lsls	r3, r3, #5
 800e23c:	480b      	ldr	r0, [pc, #44]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e23e:	2200      	movs	r2, #0
 800e240:	0019      	movs	r1, r3
 800e242:	f7ff fe83 	bl	800df4c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 800e246:	4b09      	ldr	r3, [pc, #36]	; (800e26c <USBPD_TIM_Init+0x12c>)
 800e248:	0018      	movs	r0, r3
 800e24a:	f7ff fddb 	bl	800de04 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 800e24e:	4b06      	ldr	r3, [pc, #24]	; (800e268 <USBPD_TIM_Init+0x128>)
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	b25b      	sxtb	r3, r3
 800e254:	b2db      	uxtb	r3, r3
 800e256:	3301      	adds	r3, #1
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	b25a      	sxtb	r2, r3
 800e25c:	4b02      	ldr	r3, [pc, #8]	; (800e268 <USBPD_TIM_Init+0x128>)
 800e25e:	701a      	strb	r2, [r3, #0]
}
 800e260:	46c0      	nop			; (mov r8, r8)
 800e262:	46bd      	mov	sp, r7
 800e264:	bdb0      	pop	{r4, r5, r7, pc}
 800e266:	46c0      	nop			; (mov r8, r8)
 800e268:	20018c54 	.word	0x20018c54
 800e26c:	40012c00 	.word	0x40012c00
 800e270:	20000004 	.word	0x20000004
 800e274:	000f423f 	.word	0x000f423f
 800e278:	0007a120 	.word	0x0007a120
 800e27c:	000f4240 	.word	0x000f4240

0800e280 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
  timer_initcounter--;
 800e284:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <USBPD_TIM_DeInit+0x30>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	b25b      	sxtb	r3, r3
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	3b01      	subs	r3, #1
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	b25a      	sxtb	r2, r3
 800e292:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <USBPD_TIM_DeInit+0x30>)
 800e294:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 800e296:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <USBPD_TIM_DeInit+0x30>)
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	b25b      	sxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d104      	bne.n	800e2aa <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 800e2a0:	2380      	movs	r3, #128	; 0x80
 800e2a2:	011b      	lsls	r3, r3, #4
 800e2a4:	0018      	movs	r0, r3
 800e2a6:	f7ff fd9b 	bl	800dde0 <LL_APB2_GRP1_DisableClock>
  }
}
 800e2aa:	46c0      	nop			; (mov r8, r8)
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	20018c54 	.word	0x20018c54

0800e2b4 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	0002      	movs	r2, r0
 800e2bc:	6039      	str	r1, [r7, #0]
 800e2be:	1dfb      	adds	r3, r7, #7
 800e2c0:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 800e2c2:	1dfb      	adds	r3, r7, #7
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b03      	cmp	r3, #3
 800e2c8:	d044      	beq.n	800e354 <USBPD_TIM_Start+0xa0>
 800e2ca:	dc57      	bgt.n	800e37c <USBPD_TIM_Start+0xc8>
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d02d      	beq.n	800e32c <USBPD_TIM_Start+0x78>
 800e2d0:	dc54      	bgt.n	800e37c <USBPD_TIM_Start+0xc8>
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <USBPD_TIM_Start+0x28>
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d014      	beq.n	800e304 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 800e2da:	e04f      	b.n	800e37c <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 800e2dc:	4b2a      	ldr	r3, [pc, #168]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e2de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	18d3      	adds	r3, r2, r3
 800e2e4:	4929      	ldr	r1, [pc, #164]	; (800e38c <USBPD_TIM_Start+0xd8>)
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	f7f3 ff3c 	bl	8002164 <__aeabi_uidivmod>
 800e2ec:	000b      	movs	r3, r1
 800e2ee:	001a      	movs	r2, r3
 800e2f0:	4b25      	ldr	r3, [pc, #148]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e2f2:	0011      	movs	r1, r2
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f7ff fe7f 	bl	800dff8 <LL_TIM_OC_SetCompareCH1>
 800e2fa:	4b23      	ldr	r3, [pc, #140]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f7ff feab 	bl	800e058 <LL_TIM_ClearFlag_CC1>
      break;
 800e302:	e03c      	b.n	800e37e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 800e304:	4b20      	ldr	r3, [pc, #128]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	18d3      	adds	r3, r2, r3
 800e30c:	491f      	ldr	r1, [pc, #124]	; (800e38c <USBPD_TIM_Start+0xd8>)
 800e30e:	0018      	movs	r0, r3
 800e310:	f7f3 ff28 	bl	8002164 <__aeabi_uidivmod>
 800e314:	000b      	movs	r3, r1
 800e316:	001a      	movs	r2, r3
 800e318:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e31a:	0011      	movs	r1, r2
 800e31c:	0018      	movs	r0, r3
 800e31e:	f7ff fe77 	bl	800e010 <LL_TIM_OC_SetCompareCH2>
 800e322:	4b19      	ldr	r3, [pc, #100]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e324:	0018      	movs	r0, r3
 800e326:	f7ff feb4 	bl	800e092 <LL_TIM_ClearFlag_CC2>
      break;
 800e32a:	e028      	b.n	800e37e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 800e32c:	4b16      	ldr	r3, [pc, #88]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e32e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	18d3      	adds	r3, r2, r3
 800e334:	4915      	ldr	r1, [pc, #84]	; (800e38c <USBPD_TIM_Start+0xd8>)
 800e336:	0018      	movs	r0, r3
 800e338:	f7f3 ff14 	bl	8002164 <__aeabi_uidivmod>
 800e33c:	000b      	movs	r3, r1
 800e33e:	001a      	movs	r2, r3
 800e340:	4b11      	ldr	r3, [pc, #68]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e342:	0011      	movs	r1, r2
 800e344:	0018      	movs	r0, r3
 800e346:	f7ff fe6f 	bl	800e028 <LL_TIM_OC_SetCompareCH3>
 800e34a:	4b0f      	ldr	r3, [pc, #60]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e34c:	0018      	movs	r0, r3
 800e34e:	f7ff febd 	bl	800e0cc <LL_TIM_ClearFlag_CC3>
      break;
 800e352:	e014      	b.n	800e37e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 800e354:	4b0c      	ldr	r3, [pc, #48]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	18d3      	adds	r3, r2, r3
 800e35c:	490b      	ldr	r1, [pc, #44]	; (800e38c <USBPD_TIM_Start+0xd8>)
 800e35e:	0018      	movs	r0, r3
 800e360:	f7f3 ff00 	bl	8002164 <__aeabi_uidivmod>
 800e364:	000b      	movs	r3, r1
 800e366:	001a      	movs	r2, r3
 800e368:	4b07      	ldr	r3, [pc, #28]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e36a:	0011      	movs	r1, r2
 800e36c:	0018      	movs	r0, r3
 800e36e:	f7ff fe67 	bl	800e040 <LL_TIM_OC_SetCompareCH4>
 800e372:	4b05      	ldr	r3, [pc, #20]	; (800e388 <USBPD_TIM_Start+0xd4>)
 800e374:	0018      	movs	r0, r3
 800e376:	f7ff fec6 	bl	800e106 <LL_TIM_ClearFlag_CC4>
      break;
 800e37a:	e000      	b.n	800e37e <USBPD_TIM_Start+0xca>
      break;
 800e37c:	46c0      	nop			; (mov r8, r8)
  }
}
 800e37e:	46c0      	nop			; (mov r8, r8)
 800e380:	46bd      	mov	sp, r7
 800e382:	b002      	add	sp, #8
 800e384:	bd80      	pop	{r7, pc}
 800e386:	46c0      	nop			; (mov r8, r8)
 800e388:	40012c00 	.word	0x40012c00
 800e38c:	00002710 	.word	0x00002710

0800e390 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	0002      	movs	r2, r0
 800e398:	1dfb      	adds	r3, r7, #7
 800e39a:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 800e39c:	2301      	movs	r3, #1
 800e39e:	60fb      	str	r3, [r7, #12]
  switch (Id)
 800e3a0:	1dfb      	adds	r3, r7, #7
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	d01d      	beq.n	800e3e4 <USBPD_TIM_IsExpired+0x54>
 800e3a8:	dc23      	bgt.n	800e3f2 <USBPD_TIM_IsExpired+0x62>
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d013      	beq.n	800e3d6 <USBPD_TIM_IsExpired+0x46>
 800e3ae:	dc20      	bgt.n	800e3f2 <USBPD_TIM_IsExpired+0x62>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <USBPD_TIM_IsExpired+0x2a>
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d007      	beq.n	800e3c8 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 800e3b8:	e01b      	b.n	800e3f2 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 800e3ba:	4b11      	ldr	r3, [pc, #68]	; (800e400 <USBPD_TIM_IsExpired+0x70>)
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f7ff fe57 	bl	800e070 <LL_TIM_IsActiveFlag_CC1>
 800e3c2:	0003      	movs	r3, r0
 800e3c4:	60fb      	str	r3, [r7, #12]
      break;
 800e3c6:	e015      	b.n	800e3f4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 800e3c8:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <USBPD_TIM_IsExpired+0x70>)
 800e3ca:	0018      	movs	r0, r3
 800e3cc:	f7ff fe6d 	bl	800e0aa <LL_TIM_IsActiveFlag_CC2>
 800e3d0:	0003      	movs	r3, r0
 800e3d2:	60fb      	str	r3, [r7, #12]
      break;
 800e3d4:	e00e      	b.n	800e3f4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <USBPD_TIM_IsExpired+0x70>)
 800e3d8:	0018      	movs	r0, r3
 800e3da:	f7ff fe83 	bl	800e0e4 <LL_TIM_IsActiveFlag_CC3>
 800e3de:	0003      	movs	r3, r0
 800e3e0:	60fb      	str	r3, [r7, #12]
      break;
 800e3e2:	e007      	b.n	800e3f4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 800e3e4:	4b06      	ldr	r3, [pc, #24]	; (800e400 <USBPD_TIM_IsExpired+0x70>)
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	f7ff fe99 	bl	800e11e <LL_TIM_IsActiveFlag_CC4>
 800e3ec:	0003      	movs	r3, r0
 800e3ee:	60fb      	str	r3, [r7, #12]
      break;
 800e3f0:	e000      	b.n	800e3f4 <USBPD_TIM_IsExpired+0x64>
      break;
 800e3f2:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
}
 800e3f6:	0018      	movs	r0, r3
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	b004      	add	sp, #16
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	46c0      	nop			; (mov r8, r8)
 800e400:	40012c00 	.word	0x40012c00

0800e404 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b094      	sub	sp, #80	; 0x50
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	3303      	adds	r3, #3
 800e416:	2203      	movs	r2, #3
 800e418:	4393      	bics	r3, r2
 800e41a:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e41c:	f3ef 8310 	mrs	r3, PRIMASK
 800e420:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e422:	b672      	cpsid	i
    return(primask_value);
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800e426:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e428:	4b56      	ldr	r3, [pc, #344]	; (800e584 <_tx_byte_allocate+0x180>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800e42e:	2300      	movs	r3, #0
 800e430:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e436:	621a      	str	r2, [r3, #32]
 800e438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e43a:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	f383 8810 	msr	PRIMASK, r3
}
 800e442:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	0011      	movs	r1, r2
 800e44a:	0018      	movs	r0, r3
 800e44c:	f000 f9c0 	bl	800e7d0 <_tx_byte_pool_search>
 800e450:	0003      	movs	r3, r0
 800e452:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e454:	f3ef 8310 	mrs	r3, PRIMASK
 800e458:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e45a:	b672      	cpsid	i
    return(primask_value);
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800e45e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800e466:	2301      	movs	r3, #1
 800e468:	647b      	str	r3, [r7, #68]	; 0x44
 800e46a:	e006      	b.n	800e47a <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6a1b      	ldr	r3, [r3, #32]
 800e470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e472:	429a      	cmp	r2, r3
 800e474:	d101      	bne.n	800e47a <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800e476:	2301      	movs	r3, #1
 800e478:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 800e47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d0d8      	beq.n	800e432 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e484:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800e486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d008      	beq.n	800e49e <_tx_byte_allocate+0x9a>
 800e48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e48e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e490:	6a3b      	ldr	r3, [r7, #32]
 800e492:	f383 8810 	msr	PRIMASK, r3
}
 800e496:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800e498:	2300      	movs	r3, #0
 800e49a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e49c:	e06d      	b.n	800e57a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d062      	beq.n	800e56a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800e4a4:	4b38      	ldr	r3, [pc, #224]	; (800e588 <_tx_byte_allocate+0x184>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d007      	beq.n	800e4bc <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	f383 8810 	msr	PRIMASK, r3
}
 800e4ba:	e05e      	b.n	800e57a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800e4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4be:	4a33      	ldr	r2, [pc, #204]	; (800e58c <_tx_byte_allocate+0x188>)
 800e4c0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800e4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800e4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800e4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800e4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d6:	22ac      	movs	r2, #172	; 0xac
 800e4d8:	589b      	ldr	r3, [r3, r2]
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4de:	21ac      	movs	r1, #172	; 0xac
 800e4e0:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e6:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800e4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d109      	bne.n	800e50c <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4fc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e502:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e508:	675a      	str	r2, [r3, #116]	; 0x74
 800e50a:	e011      	b.n	800e530 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e510:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e516:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e51c:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e522:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e528:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e52e:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800e530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e532:	2209      	movs	r2, #9
 800e534:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e538:	2201      	movs	r2, #1
 800e53a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e542:	4b11      	ldr	r3, [pc, #68]	; (800e588 <_tx_byte_allocate+0x184>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <_tx_byte_allocate+0x184>)
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e54e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	f383 8810 	msr	PRIMASK, r3
}
 800e556:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e55a:	0018      	movs	r0, r3
 800e55c:	f002 ffac 	bl	80114b8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800e560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e562:	2284      	movs	r2, #132	; 0x84
 800e564:	589b      	ldr	r3, [r3, r2]
 800e566:	64bb      	str	r3, [r7, #72]	; 0x48
 800e568:	e007      	b.n	800e57a <_tx_byte_allocate+0x176>
 800e56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e56c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f383 8810 	msr	PRIMASK, r3
}
 800e574:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800e576:	2310      	movs	r3, #16
 800e578:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800e57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e57c:	0018      	movs	r0, r3
 800e57e:	46bd      	mov	sp, r7
 800e580:	b014      	add	sp, #80	; 0x50
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20018c90 	.word	0x20018c90
 800e588:	20018d28 	.word	0x20018d28
 800e58c:	0800e591 	.word	0x0800e591

0800e590 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b08c      	sub	sp, #48	; 0x30
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e59a:	f3ef 8310 	mrs	r3, PRIMASK
 800e59e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e5a0:	b672      	cpsid	i
    return(primask_value);
 800e5a2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800e5a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e5aa:	4b32      	ldr	r3, [pc, #200]	; (800e674 <_tx_byte_pool_cleanup+0xe4>)
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d157      	bne.n	800e660 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	22ac      	movs	r2, #172	; 0xac
 800e5b4:	589b      	ldr	r3, [r3, r2]
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d151      	bne.n	800e660 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d04b      	beq.n	800e660 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a2a      	ldr	r2, [pc, #168]	; (800e678 <_tx_byte_pool_cleanup+0xe8>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d146      	bne.n	800e660 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d042      	beq.n	800e660 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e4:	1e5a      	subs	r2, r3, #1
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ee:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d103      	bne.n	800e5fe <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	625a      	str	r2, [r3, #36]	; 0x24
 800e5fc:	e013      	b.n	800e626 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e602:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e608:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	6a3a      	ldr	r2, [r7, #32]
 800e614:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d102      	bne.n	800e626 <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	6a3a      	ldr	r2, [r7, #32]
 800e624:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e62a:	2b09      	cmp	r3, #9
 800e62c:	d118      	bne.n	800e660 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2284      	movs	r2, #132	; 0x84
 800e632:	2110      	movs	r1, #16
 800e634:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e636:	4b11      	ldr	r3, [pc, #68]	; (800e67c <_tx_byte_pool_cleanup+0xec>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <_tx_byte_pool_cleanup+0xec>)
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	f383 8810 	msr	PRIMASK, r3
}
 800e64a:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	0018      	movs	r0, r3
 800e650:	f002 fe32 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e654:	f3ef 8310 	mrs	r3, PRIMASK
 800e658:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e65a:	b672      	cpsid	i
    return(primask_value);
 800e65c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e65e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f383 8810 	msr	PRIMASK, r3
}
 800e66a:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e66c:	46c0      	nop			; (mov r8, r8)
 800e66e:	46bd      	mov	sp, r7
 800e670:	b00c      	add	sp, #48	; 0x30
 800e672:	bd80      	pop	{r7, pc}
 800e674:	0800e591 	.word	0x0800e591
 800e678:	42595445 	.word	0x42595445
 800e67c:	20018d28 	.word	0x20018d28

0800e680 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b092      	sub	sp, #72	; 0x48
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	647b      	str	r3, [r7, #68]	; 0x44
 800e692:	233f      	movs	r3, #63	; 0x3f
 800e694:	18fb      	adds	r3, r7, r3
 800e696:	2200      	movs	r2, #0
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	2334      	movs	r3, #52	; 0x34
 800e69c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e69e:	2300      	movs	r3, #0
 800e6a0:	643b      	str	r3, [r7, #64]	; 0x40
 800e6a2:	e009      	b.n	800e6b8 <_tx_byte_pool_create+0x38>
 800e6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a6:	1c5a      	adds	r2, r3, #1
 800e6a8:	647a      	str	r2, [r7, #68]	; 0x44
 800e6aa:	223f      	movs	r2, #63	; 0x3f
 800e6ac:	18ba      	adds	r2, r7, r2
 800e6ae:	7812      	ldrb	r2, [r2, #0]
 800e6b0:	701a      	strb	r2, [r3, #0]
 800e6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d3f1      	bcc.n	800e6a4 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2203      	movs	r2, #3
 800e6c4:	4393      	bics	r3, r2
 800e6c6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	3b08      	subs	r3, #8
 800e6ea:	001a      	movs	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800e6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	18d3      	adds	r3, r2, r3
 800e700:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800e702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e704:	3b04      	subs	r3, #4
 800e706:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e714:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800e716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e718:	3b04      	subs	r3, #4
 800e71a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800e71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800e72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e732:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800e738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73a:	3304      	adds	r3, #4
 800e73c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800e73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e740:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	4a1e      	ldr	r2, [pc, #120]	; (800e7c0 <_tx_byte_pool_create+0x140>)
 800e746:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e74e:	f3ef 8310 	mrs	r3, PRIMASK
 800e752:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e754:	b672      	cpsid	i
    return(primask_value);
 800e756:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800e758:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	4a19      	ldr	r2, [pc, #100]	; (800e7c4 <_tx_byte_pool_create+0x144>)
 800e75e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800e760:	4b19      	ldr	r3, [pc, #100]	; (800e7c8 <_tx_byte_pool_create+0x148>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d109      	bne.n	800e77c <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800e768:	4b18      	ldr	r3, [pc, #96]	; (800e7cc <_tx_byte_pool_create+0x14c>)
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	631a      	str	r2, [r3, #48]	; 0x30
 800e77a:	e011      	b.n	800e7a0 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800e77c:	4b13      	ldr	r3, [pc, #76]	; (800e7cc <_tx_byte_pool_create+0x14c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e786:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800e788:	6a3b      	ldr	r3, [r7, #32]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	69fa      	ldr	r2, [r7, #28]
 800e798:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6a3a      	ldr	r2, [r7, #32]
 800e79e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800e7a0:	4b09      	ldr	r3, [pc, #36]	; (800e7c8 <_tx_byte_pool_create+0x148>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	4b08      	ldr	r3, [pc, #32]	; (800e7c8 <_tx_byte_pool_create+0x148>)
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	f383 8810 	msr	PRIMASK, r3
}
 800e7b4:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	0018      	movs	r0, r3
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	b012      	add	sp, #72	; 0x48
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	ffffeeee 	.word	0xffffeeee
 800e7c4:	42595445 	.word	0x42595445
 800e7c8:	20018c84 	.word	0x20018c84
 800e7cc:	20018c80 	.word	0x20018c80

0800e7d0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b094      	sub	sp, #80	; 0x50
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e7de:	f3ef 8310 	mrs	r3, PRIMASK
 800e7e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e7e4:	b672      	cpsid	i
    return(primask_value);
 800e7e6:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800e7e8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	689a      	ldr	r2, [r3, #8]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	3b02      	subs	r3, #2
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	18d3      	adds	r3, r2, r3
 800e7f8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d308      	bcc.n	800e814 <_tx_byte_pool_search+0x44>
 800e802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e804:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	f383 8810 	msr	PRIMASK, r3
}
 800e80c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	64bb      	str	r3, [r7, #72]	; 0x48
 800e812:	e0db      	b.n	800e9cc <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e814:	4b70      	ldr	r3, [pc, #448]	; (800e9d8 <_tx_byte_pool_search+0x208>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e81e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	3301      	adds	r3, #1
 800e82c:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 800e82e:	2300      	movs	r3, #0
 800e830:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e834:	3304      	adds	r3, #4
 800e836:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a66      	ldr	r2, [pc, #408]	; (800e9dc <_tx_byte_pool_search+0x20c>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d143      	bne.n	800e8ce <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800e846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d104      	bne.n	800e856 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e850:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800e852:	2301      	movs	r3, #1
 800e854:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800e860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800e868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e86a:	3b08      	subs	r3, #8
 800e86c:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800e86e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	429a      	cmp	r2, r3
 800e874:	d255      	bcs.n	800e922 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800e876:	2300      	movs	r3, #0
 800e878:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	3304      	adds	r3, #4
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a54      	ldr	r2, [pc, #336]	; (800e9dc <_tx_byte_pool_search+0x20c>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d113      	bne.n	800e8b6 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	1e5a      	subs	r2, r3, #1
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d114      	bne.n	800e8d8 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8b2:	615a      	str	r2, [r3, #20]
 800e8b4:	e010      	b.n	800e8d8 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800e8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d008      	beq.n	800e8d8 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 800e8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e8cc:	e004      	b.n	800e8d8 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8d0:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800e8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d002      	beq.n	800e8e4 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 800e8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	f383 8810 	msr	PRIMASK, r3
}
 800e8ee:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e8f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e8f6:	b672      	cpsid	i
    return(primask_value);
 800e8f8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800e8fa:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a1b      	ldr	r3, [r3, #32]
 800e900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e902:	429a      	cmp	r2, r3
 800e904:	d009      	beq.n	800e91a <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	695b      	ldr	r3, [r3, #20]
 800e90a:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	3301      	adds	r3, #1
 800e912:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e918:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800e91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d188      	bne.n	800e832 <_tx_byte_pool_search+0x62>
 800e920:	e000      	b.n	800e924 <_tx_byte_pool_search+0x154>
                    break;
 800e922:	46c0      	nop			; (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800e924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e926:	2b00      	cmp	r3, #0
 800e928:	d048      	beq.n	800e9bc <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800e92a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	2b13      	cmp	r3, #19
 800e932:	d91e      	bls.n	800e972 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	3308      	adds	r3, #8
 800e938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e93a:	18d3      	adds	r3, r2, r3
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e944:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e950:	3304      	adds	r3, #4
 800e952:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e956:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	4a20      	ldr	r2, [pc, #128]	; (800e9dc <_tx_byte_pool_search+0x20c>)
 800e95c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e96c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e974:	3304      	adds	r3, #4
 800e976:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689a      	ldr	r2, [r3, #8]
 800e986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	3b08      	subs	r3, #8
 800e98c:	001a      	movs	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e998:	429a      	cmp	r2, r3
 800e99a:	d105      	bne.n	800e9a8 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99e:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	615a      	str	r2, [r3, #20]
 800e9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f383 8810 	msr	PRIMASK, r3
}
 800e9b2:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800e9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9b6:	3308      	adds	r3, #8
 800e9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9ba:	e007      	b.n	800e9cc <_tx_byte_pool_search+0x1fc>
 800e9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	f383 8810 	msr	PRIMASK, r3
}
 800e9c6:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800e9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e9ce:	0018      	movs	r0, r3
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	b014      	add	sp, #80	; 0x50
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	46c0      	nop			; (mov r8, r8)
 800e9d8:	20018c90 	.word	0x20018c90
 800e9dc:	ffffeeee 	.word	0xffffeeee

0800e9e0 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08c      	sub	sp, #48	; 0x30
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800e9ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e9f0:	b672      	cpsid	i
    return(primask_value);
 800e9f2:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800e9f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e9fa:	4b37      	ldr	r3, [pc, #220]	; (800ead8 <_tx_event_flags_cleanup+0xf8>)
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d161      	bne.n	800eac4 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	22ac      	movs	r2, #172	; 0xac
 800ea04:	589b      	ldr	r3, [r3, r2]
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d15b      	bne.n	800eac4 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea10:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d055      	beq.n	800eac4 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a2f      	ldr	r2, [pc, #188]	; (800eadc <_tx_event_flags_cleanup+0xfc>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d150      	bne.n	800eac4 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	695b      	ldr	r3, [r3, #20]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d04c      	beq.n	800eac4 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ea30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea32:	695b      	ldr	r3, [r3, #20]
 800ea34:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d020      	beq.n	800ea84 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	3b01      	subs	r3, #1
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800ea48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	2200      	movs	r2, #0
 800ea58:	611a      	str	r2, [r3, #16]
 800ea5a:	e016      	b.n	800ea8a <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea60:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea66:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	69ba      	ldr	r2, [r7, #24]
 800ea6c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	69fa      	ldr	r2, [r7, #28]
 800ea72:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800ea74:	6a3a      	ldr	r2, [r7, #32]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d106      	bne.n	800ea8a <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800ea7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	611a      	str	r2, [r3, #16]
 800ea82:	e002      	b.n	800ea8a <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800ea84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea86:	2201      	movs	r2, #1
 800ea88:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea8e:	2b07      	cmp	r3, #7
 800ea90:	d118      	bne.n	800eac4 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2284      	movs	r2, #132	; 0x84
 800ea96:	2107      	movs	r1, #7
 800ea98:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ea9a:	4b11      	ldr	r3, [pc, #68]	; (800eae0 <_tx_event_flags_cleanup+0x100>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	1c5a      	adds	r2, r3, #1
 800eaa0:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <_tx_event_flags_cleanup+0x100>)
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f383 8810 	msr	PRIMASK, r3
}
 800eaae:	46c0      	nop			; (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	0018      	movs	r0, r3
 800eab4:	f002 fc00 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eab8:	f3ef 8310 	mrs	r3, PRIMASK
 800eabc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eabe:	b672      	cpsid	i
    return(primask_value);
 800eac0:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800eac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	f383 8810 	msr	PRIMASK, r3
}
 800eace:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ead0:	46c0      	nop			; (mov r8, r8)
 800ead2:	46bd      	mov	sp, r7
 800ead4:	b00c      	add	sp, #48	; 0x30
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	0800e9e1 	.word	0x0800e9e1
 800eadc:	4456444e 	.word	0x4456444e
 800eae0:	20018d28 	.word	0x20018d28

0800eae4 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08c      	sub	sp, #48	; 0x30
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaf2:	2327      	movs	r3, #39	; 0x27
 800eaf4:	18fb      	adds	r3, r7, r3
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	2324      	movs	r3, #36	; 0x24
 800eafc:	623b      	str	r3, [r7, #32]
 800eafe:	2300      	movs	r3, #0
 800eb00:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb02:	e009      	b.n	800eb18 <_tx_event_flags_create+0x34>
 800eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb0a:	2227      	movs	r2, #39	; 0x27
 800eb0c:	18ba      	adds	r2, r7, r2
 800eb0e:	7812      	ldrb	r2, [r2, #0]
 800eb10:	701a      	strb	r2, [r3, #0]
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	3301      	adds	r3, #1
 800eb16:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb1a:	6a3b      	ldr	r3, [r7, #32]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d3f1      	bcc.n	800eb04 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eb26:	f3ef 8310 	mrs	r3, PRIMASK
 800eb2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eb2c:	b672      	cpsid	i
    return(primask_value);
 800eb2e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800eb30:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	4a18      	ldr	r2, [pc, #96]	; (800eb98 <_tx_event_flags_create+0xb4>)
 800eb36:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800eb38:	4b18      	ldr	r3, [pc, #96]	; (800eb9c <_tx_event_flags_create+0xb8>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d109      	bne.n	800eb54 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800eb40:	4b17      	ldr	r3, [pc, #92]	; (800eba0 <_tx_event_flags_create+0xbc>)
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	61da      	str	r2, [r3, #28]
 800eb52:	e011      	b.n	800eb78 <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800eb54:	4b12      	ldr	r3, [pc, #72]	; (800eba0 <_tx_event_flags_create+0xbc>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800eb78:	4b08      	ldr	r3, [pc, #32]	; (800eb9c <_tx_event_flags_create+0xb8>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	4b07      	ldr	r3, [pc, #28]	; (800eb9c <_tx_event_flags_create+0xb8>)
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f383 8810 	msr	PRIMASK, r3
}
 800eb8c:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	0018      	movs	r0, r3
 800eb92:	46bd      	mov	sp, r7
 800eb94:	b00c      	add	sp, #48	; 0x30
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	4456444e 	.word	0x4456444e
 800eb9c:	20018c6c 	.word	0x20018c6c
 800eba0:	20018c68 	.word	0x20018c68

0800eba4 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b094      	sub	sp, #80	; 0x50
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ebb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebb6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ebb8:	b672      	cpsid	i
    return(primask_value);
 800ebba:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800ebbc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2202      	movs	r2, #2
 800ebc8:	4013      	ands	r3, r2
 800ebca:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6a1b      	ldr	r3, [r3, #32]
 800ebd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800ebd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d004      	beq.n	800ebe2 <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebda:	43da      	mvns	r2, r3
 800ebdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebde:	4013      	ands	r3, r2
 800ebe0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d10a      	bne.n	800ebfe <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ebe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	4013      	ands	r3, r2
 800ebee:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800ebf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d006      	beq.n	800ec06 <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	643b      	str	r3, [r7, #64]	; 0x40
 800ebfc:	e003      	b.n	800ec06 <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800ebfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	4013      	ands	r3, r2
 800ec04:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800ec06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d029      	beq.n	800ec60 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec10:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2201      	movs	r2, #1
 800ec16:	4013      	ands	r3, r2
 800ec18:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d11c      	bne.n	800ec5a <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	695b      	ldr	r3, [r3, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	691b      	ldr	r3, [r3, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800ec34:	2301      	movs	r3, #1
 800ec36:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800ec38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d106      	bne.n	800ec4c <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a1a      	ldr	r2, [r3, #32]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	621a      	str	r2, [r3, #32]
 800ec4a:	e006      	b.n	800ec5a <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	43d2      	mvns	r2, r2
 800ec54:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec5e:	e06f      	b.n	800ed40 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ec60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d06a      	beq.n	800ed3c <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ec66:	4b3c      	ldr	r3, [pc, #240]	; (800ed58 <_tx_event_flags_get+0x1b4>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800ec6e:	2307      	movs	r3, #7
 800ec70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec72:	e065      	b.n	800ed40 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800ec74:	4b39      	ldr	r3, [pc, #228]	; (800ed5c <_tx_event_flags_get+0x1b8>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	4a38      	ldr	r2, [pc, #224]	; (800ed60 <_tx_event_flags_get+0x1bc>)
 800ec7e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800ec80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	2180      	movs	r1, #128	; 0x80
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	22ac      	movs	r2, #172	; 0xac
 800ec9e:	589b      	ldr	r3, [r3, r2]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	21ac      	movs	r1, #172	; 0xac
 800eca6:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	695b      	ldr	r3, [r3, #20]
 800ecac:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ecae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d109      	bne.n	800ecc8 <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb8:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecbe:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecc4:	675a      	str	r2, [r3, #116]	; 0x74
 800ecc6:	e011      	b.n	800ecec <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ecce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecd2:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecd8:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecde:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ece4:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecea:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	2207      	movs	r2, #7
 800ecfa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	2201      	movs	r2, #1
 800ed00:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed06:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ed08:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <_tx_event_flags_get+0x1b4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <_tx_event_flags_get+0x1b4>)
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed14:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f383 8810 	msr	PRIMASK, r3
}
 800ed1c:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	0018      	movs	r0, r3
 800ed22:	f002 fbc9 	bl	80114b8 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ed26:	f3ef 8310 	mrs	r3, PRIMASK
 800ed2a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ed2c:	b672      	cpsid	i
    return(primask_value);
 800ed2e:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800ed30:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	2284      	movs	r2, #132	; 0x84
 800ed36:	589b      	ldr	r3, [r3, r2]
 800ed38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed3a:	e001      	b.n	800ed40 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800ed3c:	2307      	movs	r3, #7
 800ed3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed42:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	f383 8810 	msr	PRIMASK, r3
}
 800ed4a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800ed4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ed4e:	0018      	movs	r0, r3
 800ed50:	46bd      	mov	sp, r7
 800ed52:	b014      	add	sp, #80	; 0x50
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	46c0      	nop			; (mov r8, r8)
 800ed58:	20018d28 	.word	0x20018d28
 800ed5c:	20018c90 	.word	0x20018c90
 800ed60:	0800e9e1 	.word	0x0800e9e1

0800ed64 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800ed64:	b590      	push	{r4, r7, lr}
 800ed66:	b0a3      	sub	sp, #140	; 0x8c
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ed70:	f3ef 8310 	mrs	r3, PRIMASK
 800ed74:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ed76:	b672      	cpsid	i
    return(primask_value);
 800ed78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800ed7a:	2284      	movs	r2, #132	; 0x84
 800ed7c:	18ba      	adds	r2, r7, r2
 800ed7e:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2202      	movs	r2, #2
 800ed84:	4013      	ands	r3, r2
 800ed86:	d024      	beq.n	800edd2 <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	695b      	ldr	r3, [r3, #20]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d005      	beq.n	800eda0 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800eda0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d107      	bne.n	800edb6 <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6a1a      	ldr	r2, [r3, #32]
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	43db      	mvns	r3, r3
 800edae:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	621a      	str	r2, [r3, #32]
 800edb4:	e005      	b.n	800edc2 <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	68ba      	ldr	r2, [r7, #8]
 800edbc:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	609a      	str	r2, [r3, #8]
 800edc2:	2384      	movs	r3, #132	; 0x84
 800edc4:	18fb      	adds	r3, r7, r3
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edcc:	f383 8810 	msr	PRIMASK, r3
}
 800edd0:	e1ce      	b.n	800f170 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	689a      	ldr	r2, [r3, #8]
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6a1b      	ldr	r3, [r3, #32]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d006      	beq.n	800edf4 <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	43d2      	mvns	r2, r2
 800edee:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800edf4:	2300      	movs	r3, #0
 800edf6:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d100      	bne.n	800ee08 <_tx_event_flags_set+0xa4>
 800ee06:	e19f      	b.n	800f148 <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800ee08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d16c      	bne.n	800eee8 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	2280      	movs	r2, #128	; 0x80
 800ee14:	18b9      	adds	r1, r7, r2
 800ee16:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800ee1e:	18bb      	adds	r3, r7, r2
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee24:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800ee26:	18bb      	adds	r3, r7, r2
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2280      	movs	r2, #128	; 0x80
 800ee2c:	589b      	ldr	r3, [r3, r2]
 800ee2e:	657b      	str	r3, [r7, #84]	; 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800ee30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee32:	2202      	movs	r2, #2
 800ee34:	4013      	ands	r3, r2
 800ee36:	653b      	str	r3, [r7, #80]	; 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800ee38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	d10a      	bne.n	800ee54 <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800ee3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee42:	4013      	ands	r3, r2
 800ee44:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800ee46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d006      	beq.n	800ee5c <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800ee4e:	2300      	movs	r3, #0
 800ee50:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee52:	e003      	b.n	800ee5c <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800ee54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee58:	4013      	ands	r3, r2
 800ee5a:	66bb      	str	r3, [r7, #104]	; 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800ee5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d100      	bne.n	800ee64 <_tx_event_flags_set+0x100>
 800ee62:	e178      	b.n	800f156 <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800ee64:	2301      	movs	r3, #1
 800ee66:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800ee68:	2380      	movs	r3, #128	; 0x80
 800ee6a:	18fb      	adds	r3, r7, r3
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee70:	64fb      	str	r3, [r7, #76]	; 0x4c
                    *suspend_info_ptr =  current_event_flags;
 800ee72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee76:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800ee78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800ee80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d106      	bne.n	800ee94 <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee8c:	43d2      	mvns	r2, r2
 800ee8e:	401a      	ands	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eea0:	2080      	movs	r0, #128	; 0x80
 800eea2:	183b      	adds	r3, r7, r0
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2200      	movs	r2, #0
 800eea8:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800eeaa:	183b      	adds	r3, r7, r0
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2284      	movs	r2, #132	; 0x84
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800eeb4:	4bb1      	ldr	r3, [pc, #708]	; (800f17c <_tx_event_flags_set+0x418>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	4bb0      	ldr	r3, [pc, #704]	; (800f17c <_tx_event_flags_set+0x418>)
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	2484      	movs	r4, #132	; 0x84
 800eec0:	193b      	adds	r3, r7, r4
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	f383 8810 	msr	PRIMASK, r3
}
 800eecc:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800eece:	183b      	adds	r3, r7, r0
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	0018      	movs	r0, r3
 800eed4:	f002 f9f0 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eed8:	f3ef 8310 	mrs	r3, PRIMASK
 800eedc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800eede:	b672      	cpsid	i
    return(primask_value);
 800eee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800eee2:	193a      	adds	r2, r7, r4
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	e136      	b.n	800f156 <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 800eeee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eef0:	2280      	movs	r2, #128	; 0x80
 800eef2:	18ba      	adds	r2, r7, r2
 800eef4:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 800ef00:	2300      	movs	r3, #0
 800ef02:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800ef0a:	4b9c      	ldr	r3, [pc, #624]	; (800f17c <_tx_event_flags_set+0x418>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	4b9a      	ldr	r3, [pc, #616]	; (800f17c <_tx_event_flags_set+0x418>)
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	2284      	movs	r2, #132	; 0x84
 800ef16:	18bb      	adds	r3, r7, r2
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	f383 8810 	msr	PRIMASK, r3
}
 800ef22:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ef24:	f3ef 8310 	mrs	r3, PRIMASK
 800ef28:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ef2a:	b672      	cpsid	i
    return(primask_value);
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800ef2e:	18ba      	adds	r2, r7, r2
 800ef30:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00e      	beq.n	800ef58 <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800ef40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef42:	2280      	movs	r2, #128	; 0x80
 800ef44:	18ba      	adds	r2, r7, r2
 800ef46:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	695b      	ldr	r3, [r3, #20]
 800ef4c:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef54:	4313      	orrs	r3, r2
 800ef56:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800ef58:	2280      	movs	r2, #128	; 0x80
 800ef5a:	18bb      	adds	r3, r7, r2
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef60:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800ef62:	18bb      	adds	r3, r7, r2
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef68:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800ef6a:	18bb      	adds	r3, r7, r2
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2280      	movs	r2, #128	; 0x80
 800ef70:	589b      	ldr	r3, [r3, r2]
 800ef72:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800ef74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef76:	2202      	movs	r2, #2
 800ef78:	4013      	ands	r3, r2
 800ef7a:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800ef7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d10a      	bne.n	800ef98 <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800ef82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef86:	4013      	ands	r3, r2
 800ef88:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800ef8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d006      	beq.n	800efa0 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800ef92:	2300      	movs	r3, #0
 800ef94:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef96:	e003      	b.n	800efa0 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800ef98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef9c:	4013      	ands	r3, r2
 800ef9e:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800efa0:	2380      	movs	r3, #128	; 0x80
 800efa2:	18fb      	adds	r3, r7, r3
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa8:	2b07      	cmp	r3, #7
 800efaa:	d001      	beq.n	800efb0 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800efac:	2301      	movs	r3, #1
 800efae:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800efb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d069      	beq.n	800f08a <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800efb6:	2301      	movs	r3, #1
 800efb8:	667b      	str	r3, [r7, #100]	; 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800efba:	2280      	movs	r2, #128	; 0x80
 800efbc:	18bb      	adds	r3, r7, r2
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efc2:	2b07      	cmp	r3, #7
 800efc4:	d11e      	bne.n	800f004 <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800efc6:	18bb      	adds	r3, r7, r2
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efcc:	64fb      	str	r3, [r7, #76]	; 0x4c
                            *suspend_info_ptr =  current_event_flags;
 800efce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800efd2:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800efd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd6:	2201      	movs	r2, #1
 800efd8:	4013      	ands	r3, r2
 800efda:	64bb      	str	r3, [r7, #72]	; 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800efdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d106      	bne.n	800eff0 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efe8:	43d2      	mvns	r2, r2
 800efea:	401a      	ands	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eff0:	2180      	movs	r1, #128	; 0x80
 800eff2:	187b      	adds	r3, r7, r1
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2200      	movs	r2, #0
 800eff8:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800effa:	187b      	adds	r3, r7, r1
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2284      	movs	r2, #132	; 0x84
 800f000:	2100      	movs	r1, #0
 800f002:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800f004:	2280      	movs	r2, #128	; 0x80
 800f006:	18bb      	adds	r3, r7, r2
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f00c:	18ba      	adds	r2, r7, r2
 800f00e:	6812      	ldr	r2, [r2, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d102      	bne.n	800f01a <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800f014:	2300      	movs	r3, #0
 800f016:	677b      	str	r3, [r7, #116]	; 0x74
 800f018:	e017      	b.n	800f04a <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800f01a:	2180      	movs	r1, #128	; 0x80
 800f01c:	187b      	adds	r3, r7, r1
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f022:	647b      	str	r3, [r7, #68]	; 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f024:	187b      	adds	r3, r7, r1
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f02a:	643b      	str	r3, [r7, #64]	; 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f02e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f030:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f036:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800f038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f03a:	187b      	adds	r3, r7, r1
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d103      	bne.n	800f04a <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800f042:	187b      	adds	r3, r7, r1
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f048:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	1e5a      	subs	r2, r3, #1
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800f054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10b      	bne.n	800f072 <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800f05a:	2280      	movs	r2, #128	; 0x80
 800f05c:	18bb      	adds	r3, r7, r2
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 800f062:	18bb      	adds	r3, r7, r2
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	67bb      	str	r3, [r7, #120]	; 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800f068:	18bb      	adds	r3, r7, r2
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2200      	movs	r2, #0
 800f06e:	671a      	str	r2, [r3, #112]	; 0x70
 800f070:	e00b      	b.n	800f08a <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800f072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f074:	2180      	movs	r1, #128	; 0x80
 800f076:	187a      	adds	r2, r7, r1
 800f078:	6812      	ldr	r2, [r2, #0]
 800f07a:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800f07c:	187b      	adds	r3, r7, r1
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2200      	movs	r2, #0
 800f082:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800f084:	187b      	adds	r3, r7, r1
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800f08a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f08c:	2280      	movs	r2, #128	; 0x80
 800f08e:	18ba      	adds	r2, r7, r2
 800f090:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800f092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f094:	3b01      	subs	r3, #1
 800f096:	673b      	str	r3, [r7, #112]	; 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800f098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d000      	beq.n	800f0a0 <_tx_event_flags_set+0x33c>
 800f09e:	e739      	b.n	800ef14 <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f0a4:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00a      	beq.n	800f0c4 <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	689a      	ldr	r2, [r3, #8]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6a1b      	ldr	r3, [r3, #32]
 800f0b6:	43db      	mvns	r3, r3
 800f0b8:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	621a      	str	r2, [r3, #32]
 800f0c4:	2384      	movs	r3, #132	; 0x84
 800f0c6:	18fb      	adds	r3, r7, r3
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	f383 8810 	msr	PRIMASK, r3
}
 800f0d2:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800f0d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0d6:	2280      	movs	r2, #128	; 0x80
 800f0d8:	18ba      	adds	r2, r7, r2
 800f0da:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800f0dc:	e021      	b.n	800f122 <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f0de:	2180      	movs	r1, #128	; 0x80
 800f0e0:	187b      	adds	r3, r7, r1
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f0e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f0ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f0ee:	b672      	cpsid	i
    return(primask_value);
 800f0f0:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800f0f2:	2084      	movs	r0, #132	; 0x84
 800f0f4:	183a      	adds	r2, r7, r0
 800f0f6:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800f0f8:	4b20      	ldr	r3, [pc, #128]	; (800f17c <_tx_event_flags_set+0x418>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	4b1f      	ldr	r3, [pc, #124]	; (800f17c <_tx_event_flags_set+0x418>)
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	183b      	adds	r3, r7, r0
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	f383 8810 	msr	PRIMASK, r3
}
 800f10e:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800f110:	000c      	movs	r4, r1
 800f112:	187b      	adds	r3, r7, r1
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	0018      	movs	r0, r3
 800f118:	f002 f8ce 	bl	80112b8 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800f11c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f11e:	193a      	adds	r2, r7, r4
 800f120:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800f122:	2380      	movs	r3, #128	; 0x80
 800f124:	18fb      	adds	r3, r7, r3
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1d8      	bne.n	800f0de <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f12c:	f3ef 8310 	mrs	r3, PRIMASK
 800f130:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f132:	b672      	cpsid	i
    return(primask_value);
 800f134:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800f136:	2284      	movs	r2, #132	; 0x84
 800f138:	18ba      	adds	r2, r7, r2
 800f13a:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800f13c:	4b0f      	ldr	r3, [pc, #60]	; (800f17c <_tx_event_flags_set+0x418>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	1e5a      	subs	r2, r3, #1
 800f142:	4b0e      	ldr	r3, [pc, #56]	; (800f17c <_tx_event_flags_set+0x418>)
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	e006      	b.n	800f156 <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d002      	beq.n	800f156 <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	60da      	str	r2, [r3, #12]
 800f156:	2384      	movs	r3, #132	; 0x84
 800f158:	18fb      	adds	r3, r7, r3
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	f383 8810 	msr	PRIMASK, r3
}
 800f164:	46c0      	nop			; (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800f166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d101      	bne.n	800f170 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800f16c:	f002 f86c 	bl	8011248 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800f170:	2300      	movs	r3, #0
}
 800f172:	0018      	movs	r0, r3
 800f174:	46bd      	mov	sp, r7
 800f176:	b023      	add	sp, #140	; 0x8c
 800f178:	bd90      	pop	{r4, r7, pc}
 800f17a:	46c0      	nop			; (mov r8, r8)
 800f17c:	20018d28 	.word	0x20018d28

0800f180 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800f184:	f001 fe6e 	bl	8010e64 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800f188:	f002 fbc8 	bl	801191c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800f18c:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <_tx_initialize_high_level+0x5c>)
 800f18e:	2200      	movs	r2, #0
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	4b13      	ldr	r3, [pc, #76]	; (800f1e0 <_tx_initialize_high_level+0x60>)
 800f194:	2200      	movs	r2, #0
 800f196:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800f198:	4b12      	ldr	r3, [pc, #72]	; (800f1e4 <_tx_initialize_high_level+0x64>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	4b12      	ldr	r3, [pc, #72]	; (800f1e8 <_tx_initialize_high_level+0x68>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <_tx_initialize_high_level+0x6c>)
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	4b11      	ldr	r3, [pc, #68]	; (800f1f0 <_tx_initialize_high_level+0x70>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800f1b0:	4b10      	ldr	r3, [pc, #64]	; (800f1f4 <_tx_initialize_high_level+0x74>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <_tx_initialize_high_level+0x78>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <_tx_initialize_high_level+0x7c>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	4b0f      	ldr	r3, [pc, #60]	; (800f200 <_tx_initialize_high_level+0x80>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800f1c8:	4b0e      	ldr	r3, [pc, #56]	; (800f204 <_tx_initialize_high_level+0x84>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	4b0e      	ldr	r3, [pc, #56]	; (800f208 <_tx_initialize_high_level+0x88>)
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	601a      	str	r2, [r3, #0]
#endif
}
 800f1d4:	46c0      	nop			; (mov r8, r8)
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	46c0      	nop			; (mov r8, r8)
 800f1dc:	20018c58 	.word	0x20018c58
 800f1e0:	20018c5c 	.word	0x20018c5c
 800f1e4:	20018c60 	.word	0x20018c60
 800f1e8:	20018c64 	.word	0x20018c64
 800f1ec:	20018c68 	.word	0x20018c68
 800f1f0:	20018c6c 	.word	0x20018c6c
 800f1f4:	20018c78 	.word	0x20018c78
 800f1f8:	20018c7c 	.word	0x20018c7c
 800f1fc:	20018c80 	.word	0x20018c80
 800f200:	20018c84 	.word	0x20018c84
 800f204:	20018c70 	.word	0x20018c70
 800f208:	20018c74 	.word	0x20018c74

0800f20c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800f210:	4b10      	ldr	r3, [pc, #64]	; (800f254 <_tx_initialize_kernel_enter+0x48>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a10      	ldr	r2, [pc, #64]	; (800f258 <_tx_initialize_kernel_enter+0x4c>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d00b      	beq.n	800f232 <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f21a:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <_tx_initialize_kernel_enter+0x48>)
 800f21c:	4a0f      	ldr	r2, [pc, #60]	; (800f25c <_tx_initialize_kernel_enter+0x50>)
 800f21e:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f220:	f7f0 ff76 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800f224:	f7ff ffac 	bl	800f180 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f228:	4b0d      	ldr	r3, [pc, #52]	; (800f260 <_tx_initialize_kernel_enter+0x54>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	4b0c      	ldr	r3, [pc, #48]	; (800f260 <_tx_initialize_kernel_enter+0x54>)
 800f230:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f232:	4b08      	ldr	r3, [pc, #32]	; (800f254 <_tx_initialize_kernel_enter+0x48>)
 800f234:	4a09      	ldr	r2, [pc, #36]	; (800f25c <_tx_initialize_kernel_enter+0x50>)
 800f236:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f238:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <_tx_initialize_kernel_enter+0x58>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	0018      	movs	r0, r3
 800f23e:	f7f3 f997 	bl	8002570 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f242:	4b04      	ldr	r3, [pc, #16]	; (800f254 <_tx_initialize_kernel_enter+0x48>)
 800f244:	2200      	movs	r2, #0
 800f246:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f248:	f7f0 ffaa 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f24c:	46c0      	nop			; (mov r8, r8)
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	46c0      	nop			; (mov r8, r8)
 800f254:	20000010 	.word	0x20000010
 800f258:	f0f0f0f1 	.word	0xf0f0f0f1
 800f25c:	f0f0f0f0 	.word	0xf0f0f0f0
 800f260:	20018d28 	.word	0x20018d28
 800f264:	20018c88 	.word	0x20018c88

0800f268 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08c      	sub	sp, #48	; 0x30
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f272:	f3ef 8310 	mrs	r3, PRIMASK
 800f276:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f278:	b672      	cpsid	i
    return(primask_value);
 800f27a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f282:	4b32      	ldr	r3, [pc, #200]	; (800f34c <_tx_mutex_cleanup+0xe4>)
 800f284:	429a      	cmp	r2, r3
 800f286:	d157      	bne.n	800f338 <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	22ac      	movs	r2, #172	; 0xac
 800f28c:	589b      	ldr	r3, [r3, r2]
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	429a      	cmp	r2, r3
 800f292:	d151      	bne.n	800f338 <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d04b      	beq.n	800f338 <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a2a      	ldr	r2, [pc, #168]	; (800f350 <_tx_mutex_cleanup+0xe8>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d146      	bne.n	800f338 <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d042      	beq.n	800f338 <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	69db      	ldr	r3, [r3, #28]
 800f2bc:	1e5a      	subs	r2, r3, #1
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c4:	69db      	ldr	r3, [r3, #28]
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d103      	bne.n	800f2d6 <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	619a      	str	r2, [r3, #24]
 800f2d4:	e013      	b.n	800f2fe <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2da:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2e0:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	69fa      	ldr	r2, [r7, #28]
 800f2e6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	6a3a      	ldr	r2, [r7, #32]
 800f2ec:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f0:	699b      	ldr	r3, [r3, #24]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d102      	bne.n	800f2fe <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	6a3a      	ldr	r2, [r7, #32]
 800f2fc:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f302:	2b0d      	cmp	r3, #13
 800f304:	d118      	bne.n	800f338 <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2284      	movs	r2, #132	; 0x84
 800f30a:	211d      	movs	r1, #29
 800f30c:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f30e:	4b11      	ldr	r3, [pc, #68]	; (800f354 <_tx_mutex_cleanup+0xec>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	1c5a      	adds	r2, r3, #1
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <_tx_mutex_cleanup+0xec>)
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	f383 8810 	msr	PRIMASK, r3
}
 800f322:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	0018      	movs	r0, r3
 800f328:	f001 ffc6 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f32c:	f3ef 8310 	mrs	r3, PRIMASK
 800f330:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f332:	b672      	cpsid	i
    return(primask_value);
 800f334:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f336:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f383 8810 	msr	PRIMASK, r3
}
 800f342:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f344:	46c0      	nop			; (mov r8, r8)
 800f346:	46bd      	mov	sp, r7
 800f348:	b00c      	add	sp, #48	; 0x30
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	0800f269 	.word	0x0800f269
 800f350:	4d555445 	.word	0x4d555445
 800f354:	20018d28 	.word	0x20018d28

0800f358 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f360:	f3ef 8310 	mrs	r3, PRIMASK
 800f364:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f366:	b672      	cpsid	i
    return(primask_value);
 800f368:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f36a:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f36c:	4b1a      	ldr	r3, [pc, #104]	; (800f3d8 <_tx_mutex_thread_release+0x80>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	1c5a      	adds	r2, r3, #1
 800f372:	4b19      	ldr	r3, [pc, #100]	; (800f3d8 <_tx_mutex_thread_release+0x80>)
 800f374:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	22a4      	movs	r2, #164	; 0xa4
 800f37a:	589b      	ldr	r3, [r3, r2]
 800f37c:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d016      	beq.n	800f3b2 <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	2201      	movs	r2, #1
 800f388:	609a      	str	r2, [r3, #8]
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f383 8810 	msr	PRIMASK, r3
}
 800f394:	46c0      	nop			; (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	0018      	movs	r0, r3
 800f39a:	f000 fb9f 	bl	800fadc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f39e:	f3ef 8310 	mrs	r3, PRIMASK
 800f3a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f3a4:	b672      	cpsid	i
    return(primask_value);
 800f3a6:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f3a8:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	22a4      	movs	r2, #164	; 0xa4
 800f3ae:	589b      	ldr	r3, [r3, r2]
 800f3b0:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1de      	bne.n	800f376 <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f3b8:	4b07      	ldr	r3, [pc, #28]	; (800f3d8 <_tx_mutex_thread_release+0x80>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	1e5a      	subs	r2, r3, #1
 800f3be:	4b06      	ldr	r3, [pc, #24]	; (800f3d8 <_tx_mutex_thread_release+0x80>)
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	f383 8810 	msr	PRIMASK, r3
}
 800f3cc:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f3ce:	46c0      	nop			; (mov r8, r8)
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	b008      	add	sp, #32
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	46c0      	nop			; (mov r8, r8)
 800f3d8:	20018d28 	.word	0x20018d28

0800f3dc <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08e      	sub	sp, #56	; 0x38
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ec:	232f      	movs	r3, #47	; 0x2f
 800f3ee:	18fb      	adds	r3, r7, r3
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	2334      	movs	r3, #52	; 0x34
 800f3f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	633b      	str	r3, [r7, #48]	; 0x30
 800f3fc:	e009      	b.n	800f412 <_tx_mutex_create+0x36>
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	637a      	str	r2, [r7, #52]	; 0x34
 800f404:	222f      	movs	r2, #47	; 0x2f
 800f406:	18ba      	adds	r2, r7, r2
 800f408:	7812      	ldrb	r2, [r2, #0]
 800f40a:	701a      	strb	r2, [r3, #0]
 800f40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40e:	3301      	adds	r3, #1
 800f410:	633b      	str	r3, [r7, #48]	; 0x30
 800f412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	429a      	cmp	r2, r3
 800f418:	d3f1      	bcc.n	800f3fe <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f426:	f3ef 8310 	mrs	r3, PRIMASK
 800f42a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f42c:	b672      	cpsid	i
    return(primask_value);
 800f42e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f430:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	4a1a      	ldr	r2, [pc, #104]	; (800f4a0 <_tx_mutex_create+0xc4>)
 800f436:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f438:	4b1a      	ldr	r3, [pc, #104]	; (800f4a4 <_tx_mutex_create+0xc8>)
 800f43a:	4a1b      	ldr	r2, [pc, #108]	; (800f4a8 <_tx_mutex_create+0xcc>)
 800f43c:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f43e:	4b1b      	ldr	r3, [pc, #108]	; (800f4ac <_tx_mutex_create+0xd0>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d109      	bne.n	800f45a <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f446:	4b1a      	ldr	r3, [pc, #104]	; (800f4b0 <_tx_mutex_create+0xd4>)
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	625a      	str	r2, [r3, #36]	; 0x24
 800f458:	e011      	b.n	800f47e <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f45a:	4b15      	ldr	r3, [pc, #84]	; (800f4b0 <_tx_mutex_create+0xd4>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f460:	6a3b      	ldr	r3, [r7, #32]
 800f462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f464:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	69fa      	ldr	r2, [r7, #28]
 800f476:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6a3a      	ldr	r2, [r7, #32]
 800f47c:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f47e:	4b0b      	ldr	r3, [pc, #44]	; (800f4ac <_tx_mutex_create+0xd0>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <_tx_mutex_create+0xd0>)
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	f383 8810 	msr	PRIMASK, r3
}
 800f492:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f494:	2300      	movs	r3, #0
}
 800f496:	0018      	movs	r0, r3
 800f498:	46bd      	mov	sp, r7
 800f49a:	b00e      	add	sp, #56	; 0x38
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	4d555445 	.word	0x4d555445
 800f4a4:	20018d2c 	.word	0x20018d2c
 800f4a8:	0800f359 	.word	0x0800f359
 800f4ac:	20018c74 	.word	0x20018c74
 800f4b0:	20018c70 	.word	0x20018c70

0800f4b4 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b092      	sub	sp, #72	; 0x48
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800f4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f4c2:	b672      	cpsid	i
    return(primask_value);
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800f4c6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800f4ce:	4b48      	ldr	r3, [pc, #288]	; (800f5f0 <_tx_mutex_delete+0x13c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	1e5a      	subs	r2, r3, #1
 800f4d4:	4b46      	ldr	r3, [pc, #280]	; (800f5f0 <_tx_mutex_delete+0x13c>)
 800f4d6:	601a      	str	r2, [r3, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f4d8:	4b45      	ldr	r3, [pc, #276]	; (800f5f0 <_tx_mutex_delete+0x13c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d103      	bne.n	800f4e8 <_tx_mutex_delete+0x34>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800f4e0:	4b44      	ldr	r3, [pc, #272]	; (800f5f4 <_tx_mutex_delete+0x140>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	601a      	str	r2, [r3, #0]
 800f4e6:	e013      	b.n	800f510 <_tx_mutex_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f2:	637b      	str	r3, [r7, #52]	; 0x34
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4f8:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800f4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4fe:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800f500:	4b3c      	ldr	r3, [pc, #240]	; (800f5f4 <_tx_mutex_delete+0x140>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	429a      	cmp	r2, r3
 800f508:	d102      	bne.n	800f510 <_tx_mutex_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800f50a:	4b3a      	ldr	r3, [pc, #232]	; (800f5f4 <_tx_mutex_delete+0x140>)
 800f50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f50e:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f510:	4b39      	ldr	r3, [pc, #228]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	4b38      	ldr	r3, [pc, #224]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f518:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	643b      	str	r3, [r7, #64]	; 0x40
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	69db      	ldr	r3, [r3, #28]
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d012      	beq.n	800f564 <_tx_mutex_delete+0xb0>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	609a      	str	r2, [r3, #8]
 800f544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f546:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f548:	6a3b      	ldr	r3, [r7, #32]
 800f54a:	f383 8810 	msr	PRIMASK, r3
}
 800f54e:	46c0      	nop			; (mov r8, r8)
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	0018      	movs	r0, r3
 800f554:	f000 fac2 	bl	800fadc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f558:	f3ef 8310 	mrs	r3, PRIMASK
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f55e:	b672      	cpsid	i
    return(primask_value);
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800f562:	647b      	str	r3, [r7, #68]	; 0x44
 800f564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f566:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	f383 8810 	msr	PRIMASK, r3
}
 800f56e:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800f570:	e023      	b.n	800f5ba <_tx_mutex_delete+0x106>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800f572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f574:	3b01      	subs	r3, #1
 800f576:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f578:	f3ef 8310 	mrs	r3, PRIMASK
 800f57c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f57e:	b672      	cpsid	i
    return(primask_value);
 800f580:	697b      	ldr	r3, [r7, #20]

        /* Lockout interrupts.  */
        TX_DISABLE
 800f582:	647b      	str	r3, [r7, #68]	; 0x44

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f586:	2200      	movs	r2, #0
 800f588:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f58c:	2284      	movs	r2, #132	; 0x84
 800f58e:	2101      	movs	r1, #1
 800f590:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f596:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f598:	4b17      	ldr	r3, [pc, #92]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	4b16      	ldr	r3, [pc, #88]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	f383 8810 	msr	PRIMASK, r3
}
 800f5ac:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5b0:	0018      	movs	r0, r3
 800f5b2:	f001 fe81 	bl	80112b8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b8:	643b      	str	r3, [r7, #64]	; 0x40
    while (suspended_count != ((ULONG) 0))
 800f5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1d8      	bne.n	800f572 <_tx_mutex_delete+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800f5c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f5c6:	b672      	cpsid	i
    return(primask_value);
 800f5c8:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f5ca:	647b      	str	r3, [r7, #68]	; 0x44

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	1e5a      	subs	r2, r3, #1
 800f5d2:	4b09      	ldr	r3, [pc, #36]	; (800f5f8 <_tx_mutex_delete+0x144>)
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f383 8810 	msr	PRIMASK, r3
}
 800f5e0:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f5e2:	f001 fe31 	bl	8011248 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	0018      	movs	r0, r3
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	b012      	add	sp, #72	; 0x48
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	20018c74 	.word	0x20018c74
 800f5f4:	20018c70 	.word	0x20018c70
 800f5f8:	20018d28 	.word	0x20018d28

0800f5fc <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b090      	sub	sp, #64	; 0x40
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f606:	f3ef 8310 	mrs	r3, PRIMASK
 800f60a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f60c:	b672      	cpsid	i
    return(primask_value);
 800f60e:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f610:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f612:	4b7b      	ldr	r3, [pc, #492]	; (800f800 <_tx_mutex_get+0x204>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d144      	bne.n	800f6aa <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f62a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d032      	beq.n	800f698 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	691b      	ldr	r3, [r3, #16]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d106      	bne.n	800f648 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800f63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2220      	movs	r2, #32
 800f646:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800f648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f64a:	22a4      	movs	r2, #164	; 0xa4
 800f64c:	589b      	ldr	r3, [r3, r2]
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00f      	beq.n	800f676 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800f656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65a:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800f662:	6a3b      	ldr	r3, [r7, #32]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a3a      	ldr	r2, [r7, #32]
 800f66c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f672:	62da      	str	r2, [r3, #44]	; 0x2c
 800f674:	e009      	b.n	800f68a <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800f676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f678:	21a4      	movs	r1, #164	; 0xa4
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800f68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f68c:	22a0      	movs	r2, #160	; 0xa0
 800f68e:	589b      	ldr	r3, [r3, r2]
 800f690:	1c5a      	adds	r2, r3, #1
 800f692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f694:	21a0      	movs	r1, #160	; 0xa0
 800f696:	505a      	str	r2, [r3, r1]
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f69c:	69bb      	ldr	r3, [r7, #24]
 800f69e:	f383 8810 	msr	PRIMASK, r3
}
 800f6a2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6a8:	e0a4      	b.n	800f7f4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d10d      	bne.n	800f6d0 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	609a      	str	r2, [r3, #8]
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f383 8810 	msr	PRIMASK, r3
}
 800f6c8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6ce:	e091      	b.n	800f7f4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d100      	bne.n	800f6d8 <_tx_mutex_get+0xdc>
 800f6d6:	e085      	b.n	800f7e4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f6d8:	4b4a      	ldr	r3, [pc, #296]	; (800f804 <_tx_mutex_get+0x208>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d008      	beq.n	800f6f2 <_tx_mutex_get+0xf6>
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	f383 8810 	msr	PRIMASK, r3
}
 800f6ea:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800f6ec:	231d      	movs	r3, #29
 800f6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6f0:	e080      	b.n	800f7f4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800f6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fa:	4a43      	ldr	r2, [pc, #268]	; (800f808 <_tx_mutex_get+0x20c>)
 800f6fc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800f6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f706:	22ac      	movs	r2, #172	; 0xac
 800f708:	589b      	ldr	r3, [r3, r2]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f70e:	21ac      	movs	r1, #172	; 0xac
 800f710:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	69db      	ldr	r3, [r3, #28]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d109      	bne.n	800f72e <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f71e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f724:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f72a:	675a      	str	r2, [r3, #116]	; 0x74
 800f72c:	e011      	b.n	800f752 <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f738:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f73e:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f744:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f74a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f750:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800f75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75e:	220d      	movs	r2, #13
 800f760:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f764:	2201      	movs	r2, #1
 800f766:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f76e:	4b25      	ldr	r3, [pc, #148]	; (800f804 <_tx_mutex_get+0x208>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	1c5a      	adds	r2, r3, #1
 800f774:	4b23      	ldr	r3, [pc, #140]	; (800f804 <_tx_mutex_get+0x208>)
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f383 8810 	msr	PRIMASK, r3
}
 800f782:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d122      	bne.n	800f7d2 <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	429a      	cmp	r2, r3
 800f796:	d903      	bls.n	800f7a0 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800f798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	219c      	movs	r1, #156	; 0x9c
 800f7a8:	585b      	ldr	r3, [r3, r1]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d204      	bcs.n	800f7b8 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800f7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b4:	219c      	movs	r1, #156	; 0x9c
 800f7b6:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d906      	bls.n	800f7d2 <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800f7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	0011      	movs	r1, r2
 800f7cc:	0018      	movs	r0, r3
 800f7ce:	f000 f8cb 	bl	800f968 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d4:	0018      	movs	r0, r3
 800f7d6:	f001 fe6f 	bl	80114b8 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7dc:	2284      	movs	r2, #132	; 0x84
 800f7de:	589b      	ldr	r3, [r3, r2]
 800f7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7e2:	e007      	b.n	800f7f4 <_tx_mutex_get+0x1f8>
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	f383 8810 	msr	PRIMASK, r3
}
 800f7ee:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800f7f0:	231d      	movs	r3, #29
 800f7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 800f7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	b010      	add	sp, #64	; 0x40
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	46c0      	nop			; (mov r8, r8)
 800f800:	20018c90 	.word	0x20018c90
 800f804:	20018d28 	.word	0x20018d28
 800f808:	0800f269 	.word	0x0800f269

0800f80c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b090      	sub	sp, #64	; 0x40
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f814:	f3ef 8310 	mrs	r3, PRIMASK
 800f818:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f81a:	b672      	cpsid	i
    return(primask_value);
 800f81c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	69db      	ldr	r3, [r3, #28]
 800f824:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800f826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d805      	bhi.n	800f838 <_tx_mutex_prioritize+0x2c>
 800f82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	f383 8810 	msr	PRIMASK, r3
}
 800f836:	e090      	b.n	800f95a <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d114      	bne.n	800f868 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f848:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f852:	429a      	cmp	r2, r3
 800f854:	d202      	bcs.n	800f85c <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f85a:	619a      	str	r2, [r3, #24]
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	f383 8810 	msr	PRIMASK, r3
}
 800f866:	e078      	b.n	800f95a <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	699b      	ldr	r3, [r3, #24]
 800f86c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f876:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800f878:	4b3a      	ldr	r3, [pc, #232]	; (800f964 <_tx_mutex_prioritize+0x158>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	1c5a      	adds	r2, r3, #1
 800f87e:	4b39      	ldr	r3, [pc, #228]	; (800f964 <_tx_mutex_prioritize+0x158>)
 800f880:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800f882:	2300      	movs	r3, #0
 800f884:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800f886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88e:	429a      	cmp	r2, r3
 800f890:	d201      	bcs.n	800f896 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	637b      	str	r3, [r7, #52]	; 0x34
 800f896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f898:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f383 8810 	msr	PRIMASK, r3
}
 800f8a0:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800f8a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f8a8:	b672      	cpsid	i
    return(primask_value);
 800f8aa:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800f8ac:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d002      	beq.n	800f8be <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8bc:	e006      	b.n	800f8cc <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	69db      	ldr	r3, [r3, #28]
 800f8c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d001      	beq.n	800f8cc <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d103      	bne.n	800f8da <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8d8:	e00c      	b.n	800f8f4 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	699b      	ldr	r3, [r3, #24]
 800f8de:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	69db      	ldr	r3, [r3, #28]
 800f8e4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ee:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 800f8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d1c4      	bne.n	800f886 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800f8fc:	4b19      	ldr	r3, [pc, #100]	; (800f964 <_tx_mutex_prioritize+0x158>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	1e5a      	subs	r2, r3, #1
 800f902:	4b18      	ldr	r3, [pc, #96]	; (800f964 <_tx_mutex_prioritize+0x158>)
 800f904:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800f906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d01d      	beq.n	800f94a <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f912:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f918:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	6a3a      	ldr	r2, [r7, #32]
 800f91e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f920:	6a3b      	ldr	r3, [r7, #32]
 800f922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f924:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f92a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800f92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f930:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	6a3a      	ldr	r2, [r7, #32]
 800f936:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f93c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f942:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f948:	619a      	str	r2, [r3, #24]
 800f94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	f383 8810 	msr	PRIMASK, r3
}
 800f954:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f956:	f001 fc77 	bl	8011248 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800f95a:	2300      	movs	r3, #0
#endif
}
 800f95c:	0018      	movs	r0, r3
 800f95e:	46bd      	mov	sp, r7
 800f960:	b010      	add	sp, #64	; 0x40
 800f962:	bd80      	pop	{r7, pc}
 800f964:	20018d28 	.word	0x20018d28

0800f968 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08e      	sub	sp, #56	; 0x38
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f972:	f3ef 8310 	mrs	r3, PRIMASK
 800f976:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f978:	b672      	cpsid	i
    return(primask_value);
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800f97c:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f982:	2b00      	cmp	r3, #0
 800f984:	d017      	beq.n	800f9b6 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2298      	movs	r2, #152	; 0x98
 800f990:	589b      	ldr	r3, [r3, r2]
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	429a      	cmp	r2, r3
 800f996:	d905      	bls.n	800f9a4 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2298      	movs	r2, #152	; 0x98
 800f99c:	589a      	ldr	r2, [r3, r2]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	63da      	str	r2, [r3, #60]	; 0x3c
 800f9a2:	e002      	b.n	800f9aa <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	683a      	ldr	r2, [r7, #0]
 800f9a8:	63da      	str	r2, [r3, #60]	; 0x3c
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	f383 8810 	msr	PRIMASK, r3
}
 800f9b4:	e087      	b.n	800fac6 <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800f9b6:	4b46      	ldr	r3, [pc, #280]	; (800fad0 <_tx_mutex_priority_change+0x168>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800f9c2:	4b44      	ldr	r3, [pc, #272]	; (800fad4 <_tx_mutex_priority_change+0x16c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	1c9a      	adds	r2, r3, #2
 800f9c8:	4b42      	ldr	r3, [pc, #264]	; (800fad4 <_tx_mutex_priority_change+0x16c>)
 800f9ca:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	220e      	movs	r2, #14
 800f9d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	64da      	str	r2, [r3, #76]	; 0x4c
 800f9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	f383 8810 	msr	PRIMASK, r3
}
 800f9e8:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	0018      	movs	r0, r3
 800f9ee:	f001 fd63 	bl	80114b8 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f9f2:	f3ef 8310 	mrs	r3, PRIMASK
 800f9f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f9f8:	b672      	cpsid	i
    return(primask_value);
 800f9fa:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800f9fc:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	683a      	ldr	r2, [r7, #0]
 800fa02:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2298      	movs	r2, #152	; 0x98
 800fa08:	589b      	ldr	r3, [r3, r2]
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d905      	bls.n	800fa1c <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2298      	movs	r2, #152	; 0x98
 800fa14:	589a      	ldr	r2, [r3, r2]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	63da      	str	r2, [r3, #60]	; 0x3c
 800fa1a:	e002      	b.n	800fa22 <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	63da      	str	r2, [r3, #60]	; 0x3c
 800fa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa24:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f383 8810 	msr	PRIMASK, r3
}
 800fa2c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	0018      	movs	r0, r3
 800fa32:	f001 fc41 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fa36:	f3ef 8310 	mrs	r3, PRIMASK
 800fa3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fa3c:	b672      	cpsid	i
    return(primask_value);
 800fa3e:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800fa40:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800fa42:	4b23      	ldr	r3, [pc, #140]	; (800fad0 <_tx_mutex_priority_change+0x168>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d034      	beq.n	800faba <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d130      	bne.n	800faba <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d811      	bhi.n	800fa88 <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d126      	bne.n	800faba <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800fa6c:	4b18      	ldr	r3, [pc, #96]	; (800fad0 <_tx_mutex_priority_change+0x168>)
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800fa72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d21f      	bcs.n	800faba <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7e:	4b16      	ldr	r3, [pc, #88]	; (800fad8 <_tx_mutex_priority_change+0x170>)
 800fa80:	0092      	lsls	r2, r2, #2
 800fa82:	6879      	ldr	r1, [r7, #4]
 800fa84:	50d1      	str	r1, [r2, r3]
 800fa86:	e018      	b.n	800faba <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d212      	bcs.n	800faba <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d80c      	bhi.n	800faba <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800faa0:	4b0b      	ldr	r3, [pc, #44]	; (800fad0 <_tx_mutex_priority_change+0x168>)
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800faa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d205      	bcs.n	800faba <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fab2:	4b09      	ldr	r3, [pc, #36]	; (800fad8 <_tx_mutex_priority_change+0x170>)
 800fab4:	0092      	lsls	r2, r2, #2
 800fab6:	6879      	ldr	r1, [r7, #4]
 800fab8:	50d1      	str	r1, [r2, r3]
 800faba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fabc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f383 8810 	msr	PRIMASK, r3
}
 800fac4:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800fac6:	46c0      	nop			; (mov r8, r8)
 800fac8:	46bd      	mov	sp, r7
 800faca:	b00e      	add	sp, #56	; 0x38
 800facc:	bd80      	pop	{r7, pc}
 800face:	46c0      	nop			; (mov r8, r8)
 800fad0:	20018c94 	.word	0x20018c94
 800fad4:	20018d28 	.word	0x20018d28
 800fad8:	20018ca8 	.word	0x20018ca8

0800fadc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b0a0      	sub	sp, #128	; 0x80
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800fae4:	2320      	movs	r3, #32
 800fae6:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fae8:	f3ef 8310 	mrs	r3, PRIMASK
 800faec:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 800faee:	b672      	cpsid	i
    return(primask_value);
 800faf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800faf2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d100      	bne.n	800fafe <_tx_mutex_put+0x22>
 800fafc:	e1c5      	b.n	800fe8a <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800fb04:	4bb4      	ldr	r3, [pc, #720]	; (800fdd8 <_tx_mutex_put+0x2fc>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d00b      	beq.n	800fb2c <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800fb14:	4bb1      	ldr	r3, [pc, #708]	; (800fddc <_tx_mutex_put+0x300>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d107      	bne.n	800fb2c <_tx_mutex_put+0x50>
 800fb1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb1e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb22:	f383 8810 	msr	PRIMASK, r3
}
 800fb26:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800fb28:	231e      	movs	r3, #30
 800fb2a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800fb2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb2e:	2b20      	cmp	r3, #32
 800fb30:	d000      	beq.n	800fb34 <_tx_mutex_put+0x58>
 800fb32:	e1b2      	b.n	800fe9a <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	1e5a      	subs	r2, r3, #1
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d008      	beq.n	800fb58 <_tx_mutex_put+0x7c>
 800fb46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb48:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb4c:	f383 8810 	msr	PRIMASK, r3
}
 800fb50:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800fb52:	2300      	movs	r3, #0
 800fb54:	673b      	str	r3, [r7, #112]	; 0x70
 800fb56:	e1a0      	b.n	800fe9a <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800fb58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d108      	bne.n	800fb70 <_tx_mutex_put+0x94>
 800fb5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb60:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb64:	f383 8810 	msr	PRIMASK, r3
}
 800fb68:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	673b      	str	r3, [r7, #112]	; 0x70
 800fb6e:	e194      	b.n	800fe9a <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800fb70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb72:	22a0      	movs	r2, #160	; 0xa0
 800fb74:	589b      	ldr	r3, [r3, r2]
 800fb76:	1e5a      	subs	r2, r3, #1
 800fb78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb7a:	21a0      	movs	r1, #160	; 0xa0
 800fb7c:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800fb7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb80:	22a0      	movs	r2, #160	; 0xa0
 800fb82:	589b      	ldr	r3, [r3, r2]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d104      	bne.n	800fb92 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800fb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb8a:	22a4      	movs	r2, #164	; 0xa4
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	5099      	str	r1, [r3, r2]
 800fb90:	e015      	b.n	800fbbe <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb96:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800fb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fba2:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800fba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fba6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fba8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800fbaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbac:	22a4      	movs	r2, #164	; 0xa4
 800fbae:	589b      	ldr	r3, [r3, r2]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d103      	bne.n	800fbbe <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800fbb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbb8:	21a4      	movs	r1, #164	; 0xa4
 800fbba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbbc:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	699b      	ldr	r3, [r3, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10e      	bne.n	800fbe4 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d10a      	bne.n	800fbe4 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	60da      	str	r2, [r3, #12]
 800fbd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbd6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbda:	f383 8810 	msr	PRIMASK, r3
}
 800fbde:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800fbe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbe6:	2b20      	cmp	r3, #32
 800fbe8:	d000      	beq.n	800fbec <_tx_mutex_put+0x110>
 800fbea:	e156      	b.n	800fe9a <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800fbec:	2300      	movs	r3, #0
 800fbee:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800fbf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbf2:	2294      	movs	r2, #148	; 0x94
 800fbf4:	589b      	ldr	r3, [r3, r2]
 800fbf6:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d140      	bne.n	800fc82 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fc00:	4b76      	ldr	r3, [pc, #472]	; (800fddc <_tx_mutex_put+0x300>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	4b75      	ldr	r3, [pc, #468]	; (800fddc <_tx_mutex_put+0x300>)
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc0c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	f383 8810 	msr	PRIMASK, r3
}
 800fc14:	46c0      	nop			; (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fc16:	2320      	movs	r3, #32
 800fc18:	66bb      	str	r3, [r7, #104]	; 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fc1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc1c:	22a4      	movs	r2, #164	; 0xa4
 800fc1e:	589b      	ldr	r3, [r3, r2]
 800fc20:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800fc22:	e016      	b.n	800fc52 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800fc24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d107      	bne.n	800fc3c <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800fc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d902      	bls.n	800fc3c <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800fc36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc3a:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800fc3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc40:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800fc42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc44:	22a4      	movs	r2, #164	; 0xa4
 800fc46:	589b      	ldr	r3, [r3, r2]
 800fc48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d101      	bne.n	800fc52 <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800fc52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1e5      	bne.n	800fc24 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fc58:	f3ef 8310 	mrs	r3, PRIMASK
 800fc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fc5e:	b672      	cpsid	i
    return(primask_value);
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fc62:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fc64:	4b5d      	ldr	r3, [pc, #372]	; (800fddc <_tx_mutex_put+0x300>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	1e5a      	subs	r2, r3, #1
 800fc6a:	4b5c      	ldr	r3, [pc, #368]	; (800fddc <_tx_mutex_put+0x300>)
 800fc6c:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800fc6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc70:	219c      	movs	r1, #156	; 0x9c
 800fc72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc74:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800fc76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d201      	bcs.n	800fc82 <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800fc7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc80:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	69db      	ldr	r3, [r3, #28]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d91d      	bls.n	800fcc6 <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d119      	bne.n	800fcc6 <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800fc92:	4b52      	ldr	r3, [pc, #328]	; (800fddc <_tx_mutex_put+0x300>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	4b50      	ldr	r3, [pc, #320]	; (800fddc <_tx_mutex_put+0x300>)
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc9e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	f383 8810 	msr	PRIMASK, r3
}
 800fca6:	46c0      	nop			; (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	0018      	movs	r0, r3
 800fcac:	f7ff fdae 	bl	800f80c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800fcb4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fcb6:	b672      	cpsid	i
    return(primask_value);
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800fcba:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800fcbc:	4b47      	ldr	r3, [pc, #284]	; (800fddc <_tx_mutex_put+0x300>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	1e5a      	subs	r2, r3, #1
 800fcc2:	4b46      	ldr	r3, [pc, #280]	; (800fddc <_tx_mutex_put+0x300>)
 800fcc4:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	699b      	ldr	r3, [r3, #24]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d133      	bne.n	800fd36 <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fcce:	4b43      	ldr	r3, [pc, #268]	; (800fddc <_tx_mutex_put+0x300>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	4b41      	ldr	r3, [pc, #260]	; (800fddc <_tx_mutex_put+0x300>)
 800fcd6:	601a      	str	r2, [r3, #0]
 800fcd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcda:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fcdc:	6a3b      	ldr	r3, [r7, #32]
 800fcde:	f383 8810 	msr	PRIMASK, r3
}
 800fce2:	46c0      	nop			; (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2220      	movs	r2, #32
 800fce8:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d006      	beq.n	800fd04 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fcfc:	0011      	movs	r1, r2
 800fcfe:	0018      	movs	r0, r3
 800fd00:	f7ff fe32 	bl	800f968 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fd04:	f3ef 8310 	mrs	r3, PRIMASK
 800fd08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fd0a:	b672      	cpsid	i
    return(primask_value);
 800fd0c:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800fd0e:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fd10:	4b32      	ldr	r3, [pc, #200]	; (800fddc <_tx_mutex_put+0x300>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	1e5a      	subs	r2, r3, #1
 800fd16:	4b31      	ldr	r3, [pc, #196]	; (800fddc <_tx_mutex_put+0x300>)
 800fd18:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	60da      	str	r2, [r3, #12]
 800fd20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	f383 8810 	msr	PRIMASK, r3
}
 800fd2a:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800fd2c:	f001 fa8c 	bl	8011248 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800fd30:	2300      	movs	r3, #0
 800fd32:	673b      	str	r3, [r7, #112]	; 0x70
 800fd34:	e0b1      	b.n	800fe9a <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d109      	bne.n	800fd58 <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800fd4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2220      	movs	r2, #32
 800fd56:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800fd58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd5a:	22a0      	movs	r2, #160	; 0xa0
 800fd5c:	589b      	ldr	r3, [r3, r2]
 800fd5e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800fd60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10a      	bne.n	800fd7c <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800fd66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd68:	21a4      	movs	r1, #164	; 0xa4
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	631a      	str	r2, [r3, #48]	; 0x30
 800fd7a:	e012      	b.n	800fda2 <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800fd7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd7e:	22a4      	movs	r2, #164	; 0xa4
 800fd80:	589b      	ldr	r3, [r3, r2]
 800fd82:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800fd84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd88:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800fd8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800fd90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd9a:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fda0:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800fda2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fda4:	1c5a      	adds	r2, r3, #1
 800fda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fda8:	21a0      	movs	r1, #160	; 0xa0
 800fdaa:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fdb6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	1e5a      	subs	r2, r3, #1
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	69db      	ldr	r3, [r3, #28]
 800fdc6:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800fdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d108      	bne.n	800fde0 <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	619a      	str	r2, [r3, #24]
 800fdd4:	e013      	b.n	800fdfe <_tx_mutex_put+0x322>
 800fdd6:	46c0      	nop			; (mov r8, r8)
 800fdd8:	20018c90 	.word	0x20018c90
 800fddc:	20018d28 	.word	0x20018d28
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800fde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fde2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fde4:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdea:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800fdec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf0:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fdf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdf6:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800fdf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdfc:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fdfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe00:	2200      	movs	r2, #0
 800fe02:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800fe04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe06:	2284      	movs	r2, #132	; 0x84
 800fe08:	2100      	movs	r1, #0
 800fe0a:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fe0c:	4b25      	ldr	r3, [pc, #148]	; (800fea4 <_tx_mutex_put+0x3c8>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	4b24      	ldr	r3, [pc, #144]	; (800fea4 <_tx_mutex_put+0x3c8>)
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe18:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f383 8810 	msr	PRIMASK, r3
}
 800fe20:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	691b      	ldr	r3, [r3, #16]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d128      	bne.n	800fe7c <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d019      	beq.n	800fe66 <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	0018      	movs	r0, r3
 800fe36:	f7ff fce9 	bl	800f80c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe3a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe40:	b672      	cpsid	i
    return(primask_value);
 800fe42:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800fe44:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 800fe4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800fe52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	629a      	str	r2, [r3, #40]	; 0x28
 800fe5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f383 8810 	msr	PRIMASK, r3
}
 800fe64:	46c0      	nop			; (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800fe66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d005      	beq.n	800fe7c <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800fe70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe74:	0011      	movs	r1, r2
 800fe76:	0018      	movs	r0, r3
 800fe78:	f7ff fd76 	bl	800f968 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800fe7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe7e:	0018      	movs	r0, r3
 800fe80:	f001 fa1a 	bl	80112b8 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800fe84:	2300      	movs	r3, #0
 800fe86:	673b      	str	r3, [r7, #112]	; 0x70
 800fe88:	e007      	b.n	800fe9a <_tx_mutex_put+0x3be>
 800fe8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fe8c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	f383 8810 	msr	PRIMASK, r3
}
 800fe94:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800fe96:	231e      	movs	r3, #30
 800fe98:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 800fe9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800fe9c:	0018      	movs	r0, r3
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	b020      	add	sp, #128	; 0x80
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	20018d28 	.word	0x20018d28

0800fea8 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b08c      	sub	sp, #48	; 0x30
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800feb2:	f3ef 8310 	mrs	r3, PRIMASK
 800feb6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800feb8:	b672      	cpsid	i
    return(primask_value);
 800feba:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800febc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800fec2:	4b37      	ldr	r3, [pc, #220]	; (800ffa0 <_tx_queue_cleanup+0xf8>)
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d160      	bne.n	800ff8a <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	22ac      	movs	r2, #172	; 0xac
 800fecc:	589b      	ldr	r3, [r3, r2]
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d15a      	bne.n	800ff8a <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d054      	beq.n	800ff8a <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800fee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a2f      	ldr	r2, [pc, #188]	; (800ffa4 <_tx_queue_cleanup+0xfc>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d14f      	bne.n	800ff8a <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800feea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d04b      	beq.n	800ff8a <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800fef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	1e5a      	subs	r2, r3, #1
 800fefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff00:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800ff02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff06:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d103      	bne.n	800ff16 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	2200      	movs	r2, #0
 800ff12:	629a      	str	r2, [r3, #40]	; 0x28
 800ff14:	e013      	b.n	800ff3e <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff1a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff20:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	69fa      	ldr	r2, [r7, #28]
 800ff26:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	6a3a      	ldr	r2, [r7, #32]
 800ff2c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800ff2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d102      	bne.n	800ff3e <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	6a3a      	ldr	r2, [r7, #32]
 800ff3c:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff42:	2b05      	cmp	r3, #5
 800ff44:	d121      	bne.n	800ff8a <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800ff46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d004      	beq.n	800ff58 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2284      	movs	r2, #132	; 0x84
 800ff52:	210b      	movs	r1, #11
 800ff54:	5099      	str	r1, [r3, r2]
 800ff56:	e003      	b.n	800ff60 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2284      	movs	r2, #132	; 0x84
 800ff5c:	210a      	movs	r1, #10
 800ff5e:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ff60:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <_tx_queue_cleanup+0x100>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	4b10      	ldr	r3, [pc, #64]	; (800ffa8 <_tx_queue_cleanup+0x100>)
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	f383 8810 	msr	PRIMASK, r3
}
 800ff74:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	0018      	movs	r0, r3
 800ff7a:	f001 f99d 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff82:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff84:	b672      	cpsid	i
    return(primask_value);
 800ff86:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ff88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f383 8810 	msr	PRIMASK, r3
}
 800ff94:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ff96:	46c0      	nop			; (mov r8, r8)
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	b00c      	add	sp, #48	; 0x30
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	46c0      	nop			; (mov r8, r8)
 800ffa0:	0800fea9 	.word	0x0800fea9
 800ffa4:	51554555 	.word	0x51554555
 800ffa8:	20018d28 	.word	0x20018d28

0800ffac <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b090      	sub	sp, #64	; 0x40
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffbe:	2337      	movs	r3, #55	; 0x37
 800ffc0:	18fb      	adds	r3, r7, r3
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	701a      	strb	r2, [r3, #0]
 800ffc6:	2338      	movs	r3, #56	; 0x38
 800ffc8:	633b      	str	r3, [r7, #48]	; 0x30
 800ffca:	2300      	movs	r3, #0
 800ffcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffce:	e009      	b.n	800ffe4 <_tx_queue_create+0x38>
 800ffd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd2:	1c5a      	adds	r2, r3, #1
 800ffd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ffd6:	2237      	movs	r2, #55	; 0x37
 800ffd8:	18ba      	adds	r2, r7, r2
 800ffda:	7812      	ldrb	r2, [r2, #0]
 800ffdc:	701a      	strb	r2, [r3, #0]
 800ffde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d3f1      	bcc.n	800ffd0 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	0019      	movs	r1, r3
 800fffe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010000:	f7f2 f82a 	bl	8002058 <__udivsi3>
 8010004:	0003      	movs	r3, r0
 8010006:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8010008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4353      	muls	r3, r2
 801000e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	699a      	ldr	r2, [r3, #24]
 801001a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	18d2      	adds	r2, r2, r3
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	683a      	ldr	r2, [r7, #0]
 801002e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010034:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801003a:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801003c:	f3ef 8310 	mrs	r3, PRIMASK
 8010040:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010042:	b672      	cpsid	i
    return(primask_value);
 8010044:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8010046:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4a19      	ldr	r2, [pc, #100]	; (80100b0 <_tx_queue_create+0x104>)
 801004c:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 801004e:	4b19      	ldr	r3, [pc, #100]	; (80100b4 <_tx_queue_create+0x108>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d109      	bne.n	801006a <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8010056:	4b18      	ldr	r3, [pc, #96]	; (80100b8 <_tx_queue_create+0x10c>)
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	635a      	str	r2, [r3, #52]	; 0x34
 8010068:	e011      	b.n	801008e <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 801006a:	4b13      	ldr	r3, [pc, #76]	; (80100b8 <_tx_queue_create+0x10c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010074:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	68fa      	ldr	r2, [r7, #12]
 8010080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	69fa      	ldr	r2, [r7, #28]
 8010086:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6a3a      	ldr	r2, [r7, #32]
 801008c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 801008e:	4b09      	ldr	r3, [pc, #36]	; (80100b4 <_tx_queue_create+0x108>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <_tx_queue_create+0x108>)
 8010096:	601a      	str	r2, [r3, #0]
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	f383 8810 	msr	PRIMASK, r3
}
 80100a2:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80100a4:	2300      	movs	r3, #0
}
 80100a6:	0018      	movs	r0, r3
 80100a8:	46bd      	mov	sp, r7
 80100aa:	b010      	add	sp, #64	; 0x40
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	46c0      	nop			; (mov r8, r8)
 80100b0:	51554555 	.word	0x51554555
 80100b4:	20018c64 	.word	0x20018c64
 80100b8:	20018c60 	.word	0x20018c60

080100bc <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b094      	sub	sp, #80	; 0x50
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80100c8:	2300      	movs	r3, #0
 80100ca:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80100cc:	f3ef 8310 	mrs	r3, PRIMASK
 80100d0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80100d2:	b672      	cpsid	i
    return(primask_value);
 80100d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80100d6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100dc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d100      	bne.n	80100e8 <_tx_queue_receive+0x2c>
 80100e6:	e137      	b.n	8010358 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80100e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d13c      	bne.n	8010168 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80100fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010100:	1d13      	adds	r3, r2, #4
 8010102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010106:	1d19      	adds	r1, r3, #4
 8010108:	64b9      	str	r1, [r7, #72]	; 0x48
 801010a:	6812      	ldr	r2, [r2, #0]
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010110:	2b01      	cmp	r3, #1
 8010112:	d90e      	bls.n	8010132 <_tx_queue_receive+0x76>
 8010114:	e007      	b.n	8010126 <_tx_queue_receive+0x6a>
 8010116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010118:	1d13      	adds	r3, r2, #4
 801011a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801011c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801011e:	1d19      	adds	r1, r3, #4
 8010120:	64b9      	str	r1, [r7, #72]	; 0x48
 8010122:	6812      	ldr	r2, [r2, #0]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010128:	3b01      	subs	r3, #1
 801012a:	647b      	str	r3, [r7, #68]	; 0x44
 801012c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1f1      	bne.n	8010116 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	69db      	ldr	r3, [r3, #28]
 8010136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010138:	429a      	cmp	r2, r3
 801013a:	d102      	bne.n	8010142 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010146:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	695b      	ldr	r3, [r3, #20]
 801014c:	1c5a      	adds	r2, r3, #1
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	1e5a      	subs	r2, r3, #1
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	611a      	str	r2, [r3, #16]
 801015c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801015e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	f383 8810 	msr	PRIMASK, r3
}
 8010166:	e166      	b.n	8010436 <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	2280      	movs	r2, #128	; 0x80
 8010172:	589b      	ldr	r3, [r3, r2]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d154      	bne.n	8010222 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801017c:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801018a:	1d13      	adds	r3, r2, #4
 801018c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801018e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010190:	1d19      	adds	r1, r3, #4
 8010192:	64b9      	str	r1, [r7, #72]	; 0x48
 8010194:	6812      	ldr	r2, [r2, #0]
 8010196:	601a      	str	r2, [r3, #0]
 8010198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801019a:	2b01      	cmp	r3, #1
 801019c:	d90e      	bls.n	80101bc <_tx_queue_receive+0x100>
 801019e:	e007      	b.n	80101b0 <_tx_queue_receive+0xf4>
 80101a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101a2:	1d13      	adds	r3, r2, #4
 80101a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101a8:	1d19      	adds	r1, r3, #4
 80101aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80101ac:	6812      	ldr	r2, [r2, #0]
 80101ae:	601a      	str	r2, [r3, #0]
 80101b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101b2:	3b01      	subs	r3, #1
 80101b4:	647b      	str	r3, [r7, #68]	; 0x44
 80101b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1f1      	bne.n	80101a0 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80101bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101be:	3b01      	subs	r3, #1
 80101c0:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d103      	bne.n	80101d0 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	629a      	str	r2, [r3, #40]	; 0x28
 80101ce:	e00e      	b.n	80101ee <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80101d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d4:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101da:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80101dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101e6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ec:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101f2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80101f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f6:	2200      	movs	r2, #0
 80101f8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80101fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fc:	2284      	movs	r2, #132	; 0x84
 80101fe:	2100      	movs	r1, #0
 8010200:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010202:	4b8f      	ldr	r3, [pc, #572]	; (8010440 <_tx_queue_receive+0x384>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	4b8d      	ldr	r3, [pc, #564]	; (8010440 <_tx_queue_receive+0x384>)
 801020a:	601a      	str	r2, [r3, #0]
 801020c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010210:	6a3b      	ldr	r3, [r7, #32]
 8010212:	f383 8810 	msr	PRIMASK, r3
}
 8010216:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021a:	0018      	movs	r0, r3
 801021c:	f001 f84c 	bl	80112b8 <_tx_thread_system_resume>
 8010220:	e109      	b.n	8010436 <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6a1b      	ldr	r3, [r3, #32]
 8010226:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010234:	1d13      	adds	r3, r2, #4
 8010236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801023a:	1d19      	adds	r1, r3, #4
 801023c:	64b9      	str	r1, [r7, #72]	; 0x48
 801023e:	6812      	ldr	r2, [r2, #0]
 8010240:	601a      	str	r2, [r3, #0]
 8010242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010244:	2b01      	cmp	r3, #1
 8010246:	d90e      	bls.n	8010266 <_tx_queue_receive+0x1aa>
 8010248:	e007      	b.n	801025a <_tx_queue_receive+0x19e>
 801024a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801024c:	1d13      	adds	r3, r2, #4
 801024e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010252:	1d19      	adds	r1, r3, #4
 8010254:	64b9      	str	r1, [r7, #72]	; 0x48
 8010256:	6812      	ldr	r2, [r2, #0]
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801025c:	3b01      	subs	r3, #1
 801025e:	647b      	str	r3, [r7, #68]	; 0x44
 8010260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1f1      	bne.n	801024a <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	69db      	ldr	r3, [r3, #28]
 801026a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801026c:	429a      	cmp	r2, r3
 801026e:	d102      	bne.n	8010276 <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	699b      	ldr	r3, [r3, #24]
 8010274:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801027a:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 801027c:	4b70      	ldr	r3, [pc, #448]	; (8010440 <_tx_queue_receive+0x384>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	1c5a      	adds	r2, r3, #1
 8010282:	4b6f      	ldr	r3, [pc, #444]	; (8010440 <_tx_queue_receive+0x384>)
 8010284:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8010286:	4b6e      	ldr	r3, [pc, #440]	; (8010440 <_tx_queue_receive+0x384>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	1e5a      	subs	r2, r3, #1
 801028c:	4b6c      	ldr	r3, [pc, #432]	; (8010440 <_tx_queue_receive+0x384>)
 801028e:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010294:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029a:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80102a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102a4:	1d13      	adds	r3, r2, #4
 80102a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102aa:	1d19      	adds	r1, r3, #4
 80102ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80102ae:	6812      	ldr	r2, [r2, #0]
 80102b0:	601a      	str	r2, [r3, #0]
 80102b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d90e      	bls.n	80102d6 <_tx_queue_receive+0x21a>
 80102b8:	e007      	b.n	80102ca <_tx_queue_receive+0x20e>
 80102ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102bc:	1d13      	adds	r3, r2, #4
 80102be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c2:	1d19      	adds	r1, r3, #4
 80102c4:	64b9      	str	r1, [r7, #72]	; 0x48
 80102c6:	6812      	ldr	r2, [r2, #0]
 80102c8:	601a      	str	r2, [r3, #0]
 80102ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102cc:	3b01      	subs	r3, #1
 80102ce:	647b      	str	r3, [r7, #68]	; 0x44
 80102d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1f1      	bne.n	80102ba <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	69db      	ldr	r3, [r3, #28]
 80102da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102dc:	429a      	cmp	r2, r3
 80102de:	d102      	bne.n	80102e6 <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	699b      	ldr	r3, [r3, #24]
 80102e4:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102ea:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	3b01      	subs	r3, #1
 80102f6:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d103      	bne.n	8010306 <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2200      	movs	r2, #0
 8010302:	629a      	str	r2, [r3, #40]	; 0x28
 8010304:	e00e      	b.n	8010324 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030a:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010310:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010316:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801031c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 801031e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010322:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010328:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	2200      	movs	r2, #0
 801032e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010332:	2284      	movs	r2, #132	; 0x84
 8010334:	2100      	movs	r1, #0
 8010336:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010338:	4b41      	ldr	r3, [pc, #260]	; (8010440 <_tx_queue_receive+0x384>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	4b40      	ldr	r3, [pc, #256]	; (8010440 <_tx_queue_receive+0x384>)
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010344:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	f383 8810 	msr	PRIMASK, r3
}
 801034c:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 801034e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010350:	0018      	movs	r0, r3
 8010352:	f000 ffb1 	bl	80112b8 <_tx_thread_system_resume>
 8010356:	e06e      	b.n	8010436 <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d063      	beq.n	8010426 <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801035e:	4b38      	ldr	r3, [pc, #224]	; (8010440 <_tx_queue_receive+0x384>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d008      	beq.n	8010378 <_tx_queue_receive+0x2bc>
 8010366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010368:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	f383 8810 	msr	PRIMASK, r3
}
 8010370:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8010372:	230a      	movs	r3, #10
 8010374:	643b      	str	r3, [r7, #64]	; 0x40
 8010376:	e05e      	b.n	8010436 <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8010378:	4b32      	ldr	r3, [pc, #200]	; (8010444 <_tx_queue_receive+0x388>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801037e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010380:	4a31      	ldr	r2, [pc, #196]	; (8010448 <_tx_queue_receive+0x38c>)
 8010382:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8010390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010392:	2280      	movs	r2, #128	; 0x80
 8010394:	2100      	movs	r1, #0
 8010396:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8010398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039a:	22ac      	movs	r2, #172	; 0xac
 801039c:	589b      	ldr	r3, [r3, r2]
 801039e:	1c5a      	adds	r2, r3, #1
 80103a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a2:	21ac      	movs	r1, #172	; 0xac
 80103a4:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80103a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d109      	bne.n	80103c0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103b0:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103b6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80103b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103bc:	675a      	str	r2, [r3, #116]	; 0x74
 80103be:	e011      	b.n	80103e4 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c4:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80103c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ca:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80103cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80103d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103dc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80103de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103e2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80103e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80103ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ee:	2205      	movs	r2, #5
 80103f0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	2201      	movs	r2, #1
 80103f6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80103f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80103fe:	4b10      	ldr	r3, [pc, #64]	; (8010440 <_tx_queue_receive+0x384>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	1c5a      	adds	r2, r3, #1
 8010404:	4b0e      	ldr	r3, [pc, #56]	; (8010440 <_tx_queue_receive+0x384>)
 8010406:	601a      	str	r2, [r3, #0]
 8010408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	f383 8810 	msr	PRIMASK, r3
}
 8010412:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010416:	0018      	movs	r0, r3
 8010418:	f001 f84e 	bl	80114b8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 801041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041e:	2284      	movs	r2, #132	; 0x84
 8010420:	589b      	ldr	r3, [r3, r2]
 8010422:	643b      	str	r3, [r7, #64]	; 0x40
 8010424:	e007      	b.n	8010436 <_tx_queue_receive+0x37a>
 8010426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010428:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	f383 8810 	msr	PRIMASK, r3
}
 8010430:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8010432:	230a      	movs	r3, #10
 8010434:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8010436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8010438:	0018      	movs	r0, r3
 801043a:	46bd      	mov	sp, r7
 801043c:	b014      	add	sp, #80	; 0x50
 801043e:	bd80      	pop	{r7, pc}
 8010440:	20018d28 	.word	0x20018d28
 8010444:	20018c90 	.word	0x20018c90
 8010448:	0800fea9 	.word	0x0800fea9

0801044c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b094      	sub	sp, #80	; 0x50
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010458:	2300      	movs	r3, #0
 801045a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801045c:	f3ef 8310 	mrs	r3, PRIMASK
 8010460:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010462:	b672      	cpsid	i
    return(primask_value);
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8010466:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	695b      	ldr	r3, [r3, #20]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d100      	bne.n	8010478 <_tx_queue_send+0x2c>
 8010476:	e09b      	b.n	80105b0 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047a:	2b00      	cmp	r3, #0
 801047c:	d13c      	bne.n	80104f8 <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	1e5a      	subs	r2, r3, #1
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049a:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80104a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104a4:	1d13      	adds	r3, r2, #4
 80104a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104aa:	1d19      	adds	r1, r3, #4
 80104ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80104ae:	6812      	ldr	r2, [r2, #0]
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d90e      	bls.n	80104d6 <_tx_queue_send+0x8a>
 80104b8:	e007      	b.n	80104ca <_tx_queue_send+0x7e>
 80104ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104bc:	1d13      	adds	r3, r2, #4
 80104be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104c2:	1d19      	adds	r1, r3, #4
 80104c4:	64b9      	str	r1, [r7, #72]	; 0x48
 80104c6:	6812      	ldr	r2, [r2, #0]
 80104c8:	601a      	str	r2, [r3, #0]
 80104ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104cc:	3b01      	subs	r3, #1
 80104ce:	647b      	str	r3, [r7, #68]	; 0x44
 80104d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1f1      	bne.n	80104ba <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	69db      	ldr	r3, [r3, #28]
 80104da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104dc:	429a      	cmp	r2, r3
 80104de:	d102      	bne.n	80104e6 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	699b      	ldr	r3, [r3, #24]
 80104e4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104ea:	625a      	str	r2, [r3, #36]	; 0x24
 80104ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80104f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f2:	f383 8810 	msr	PRIMASK, r3
}
 80104f6:	e0ca      	b.n	801068e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80104fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010500:	3b01      	subs	r3, #1
 8010502:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010506:	2b00      	cmp	r3, #0
 8010508:	d103      	bne.n	8010512 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2200      	movs	r2, #0
 801050e:	629a      	str	r2, [r3, #40]	; 0x28
 8010510:	e012      	b.n	8010538 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 801051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801051e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010524:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801052a:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 801052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010530:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010536:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801053c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010540:	2200      	movs	r2, #0
 8010542:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801054c:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010556:	1d13      	adds	r3, r2, #4
 8010558:	64fb      	str	r3, [r7, #76]	; 0x4c
 801055a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801055c:	1d19      	adds	r1, r3, #4
 801055e:	64b9      	str	r1, [r7, #72]	; 0x48
 8010560:	6812      	ldr	r2, [r2, #0]
 8010562:	601a      	str	r2, [r3, #0]
 8010564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010566:	2b01      	cmp	r3, #1
 8010568:	d90e      	bls.n	8010588 <_tx_queue_send+0x13c>
 801056a:	e007      	b.n	801057c <_tx_queue_send+0x130>
 801056c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801056e:	1d13      	adds	r3, r2, #4
 8010570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010574:	1d19      	adds	r1, r3, #4
 8010576:	64b9      	str	r1, [r7, #72]	; 0x48
 8010578:	6812      	ldr	r2, [r2, #0]
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801057e:	3b01      	subs	r3, #1
 8010580:	647b      	str	r3, [r7, #68]	; 0x44
 8010582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1f1      	bne.n	801056c <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058a:	2284      	movs	r2, #132	; 0x84
 801058c:	2100      	movs	r1, #0
 801058e:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010590:	4b41      	ldr	r3, [pc, #260]	; (8010698 <_tx_queue_send+0x24c>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	1c5a      	adds	r2, r3, #1
 8010596:	4b40      	ldr	r3, [pc, #256]	; (8010698 <_tx_queue_send+0x24c>)
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801059c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	f383 8810 	msr	PRIMASK, r3
}
 80105a4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80105a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a8:	0018      	movs	r0, r3
 80105aa:	f000 fe85 	bl	80112b8 <_tx_thread_system_resume>
 80105ae:	e06e      	b.n	801068e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d063      	beq.n	801067e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80105b6:	4b38      	ldr	r3, [pc, #224]	; (8010698 <_tx_queue_send+0x24c>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d008      	beq.n	80105d0 <_tx_queue_send+0x184>
 80105be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	f383 8810 	msr	PRIMASK, r3
}
 80105c8:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80105ca:	230b      	movs	r3, #11
 80105cc:	643b      	str	r3, [r7, #64]	; 0x40
 80105ce:	e05e      	b.n	801068e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80105d0:	4b32      	ldr	r3, [pc, #200]	; (801069c <_tx_queue_send+0x250>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80105d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105d8:	4a31      	ldr	r2, [pc, #196]	; (80106a0 <_tx_queue_send+0x254>)
 80105da:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80105dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80105e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ea:	2280      	movs	r2, #128	; 0x80
 80105ec:	2100      	movs	r1, #0
 80105ee:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	22ac      	movs	r2, #172	; 0xac
 80105f4:	589b      	ldr	r3, [r3, r2]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	21ac      	movs	r1, #172	; 0xac
 80105fc:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80105fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010600:	2b00      	cmp	r3, #0
 8010602:	d109      	bne.n	8010618 <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010608:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801060e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010614:	675a      	str	r2, [r3, #116]	; 0x74
 8010616:	e011      	b.n	801063c <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061c:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010622:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010628:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801062a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801062e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010634:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801063a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801063c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8010644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010646:	2205      	movs	r2, #5
 8010648:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064c:	2201      	movs	r2, #1
 801064e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010656:	4b10      	ldr	r3, [pc, #64]	; (8010698 <_tx_queue_send+0x24c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	1c5a      	adds	r2, r3, #1
 801065c:	4b0e      	ldr	r3, [pc, #56]	; (8010698 <_tx_queue_send+0x24c>)
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010662:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	f383 8810 	msr	PRIMASK, r3
}
 801066a:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801066c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066e:	0018      	movs	r0, r3
 8010670:	f000 ff22 	bl	80114b8 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010676:	2284      	movs	r2, #132	; 0x84
 8010678:	589b      	ldr	r3, [r3, r2]
 801067a:	643b      	str	r3, [r7, #64]	; 0x40
 801067c:	e007      	b.n	801068e <_tx_queue_send+0x242>
 801067e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010680:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	f383 8810 	msr	PRIMASK, r3
}
 8010688:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 801068a:	230b      	movs	r3, #11
 801068c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 801068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8010690:	0018      	movs	r0, r3
 8010692:	46bd      	mov	sp, r7
 8010694:	b014      	add	sp, #80	; 0x50
 8010696:	bd80      	pop	{r7, pc}
 8010698:	20018d28 	.word	0x20018d28
 801069c:	20018c90 	.word	0x20018c90
 80106a0:	0800fea9 	.word	0x0800fea9

080106a4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b08c      	sub	sp, #48	; 0x30
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80106ae:	f3ef 8310 	mrs	r3, PRIMASK
 80106b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80106b4:	b672      	cpsid	i
    return(primask_value);
 80106b6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80106b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80106be:	4b32      	ldr	r3, [pc, #200]	; (8010788 <_tx_semaphore_cleanup+0xe4>)
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d157      	bne.n	8010774 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	22ac      	movs	r2, #172	; 0xac
 80106c8:	589b      	ldr	r3, [r3, r2]
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d151      	bne.n	8010774 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106d4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80106d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d04b      	beq.n	8010774 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a2a      	ldr	r2, [pc, #168]	; (801078c <_tx_semaphore_cleanup+0xe8>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d146      	bne.n	8010774 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d042      	beq.n	8010774 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80106f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	1e5a      	subs	r2, r3, #1
 80106fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fc:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	d103      	bne.n	8010712 <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070c:	2200      	movs	r2, #0
 801070e:	60da      	str	r2, [r3, #12]
 8010710:	e013      	b.n	801073a <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010716:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801071c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801071e:	6a3b      	ldr	r3, [r7, #32]
 8010720:	69fa      	ldr	r2, [r7, #28]
 8010722:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	6a3a      	ldr	r2, [r7, #32]
 8010728:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	429a      	cmp	r2, r3
 8010732:	d102      	bne.n	801073a <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	6a3a      	ldr	r2, [r7, #32]
 8010738:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801073e:	2b06      	cmp	r3, #6
 8010740:	d118      	bne.n	8010774 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2284      	movs	r2, #132	; 0x84
 8010746:	210d      	movs	r1, #13
 8010748:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801074a:	4b11      	ldr	r3, [pc, #68]	; (8010790 <_tx_semaphore_cleanup+0xec>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	1c5a      	adds	r2, r3, #1
 8010750:	4b0f      	ldr	r3, [pc, #60]	; (8010790 <_tx_semaphore_cleanup+0xec>)
 8010752:	601a      	str	r2, [r3, #0]
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	f383 8810 	msr	PRIMASK, r3
}
 801075e:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	0018      	movs	r0, r3
 8010764:	f000 fda8 	bl	80112b8 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010768:	f3ef 8310 	mrs	r3, PRIMASK
 801076c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801076e:	b672      	cpsid	i
    return(primask_value);
 8010770:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010776:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f383 8810 	msr	PRIMASK, r3
}
 801077e:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010780:	46c0      	nop			; (mov r8, r8)
 8010782:	46bd      	mov	sp, r7
 8010784:	b00c      	add	sp, #48	; 0x30
 8010786:	bd80      	pop	{r7, pc}
 8010788:	080106a5 	.word	0x080106a5
 801078c:	53454d41 	.word	0x53454d41
 8010790:	20018d28 	.word	0x20018d28

08010794 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08e      	sub	sp, #56	; 0x38
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	637b      	str	r3, [r7, #52]	; 0x34
 80107a4:	232f      	movs	r3, #47	; 0x2f
 80107a6:	18fb      	adds	r3, r7, r3
 80107a8:	2200      	movs	r2, #0
 80107aa:	701a      	strb	r2, [r3, #0]
 80107ac:	231c      	movs	r3, #28
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80107b0:	2300      	movs	r3, #0
 80107b2:	633b      	str	r3, [r7, #48]	; 0x30
 80107b4:	e009      	b.n	80107ca <_tx_semaphore_create+0x36>
 80107b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b8:	1c5a      	adds	r2, r3, #1
 80107ba:	637a      	str	r2, [r7, #52]	; 0x34
 80107bc:	222f      	movs	r2, #47	; 0x2f
 80107be:	18ba      	adds	r2, r7, r2
 80107c0:	7812      	ldrb	r2, [r2, #0]
 80107c2:	701a      	strb	r2, [r3, #0]
 80107c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c6:	3301      	adds	r3, #1
 80107c8:	633b      	str	r3, [r7, #48]	; 0x30
 80107ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d3f1      	bcc.n	80107b6 <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	68ba      	ldr	r2, [r7, #8]
 80107d6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107de:	f3ef 8310 	mrs	r3, PRIMASK
 80107e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80107e4:	b672      	cpsid	i
    return(primask_value);
 80107e6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80107e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	4a18      	ldr	r2, [pc, #96]	; (8010850 <_tx_semaphore_create+0xbc>)
 80107ee:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80107f0:	4b18      	ldr	r3, [pc, #96]	; (8010854 <_tx_semaphore_create+0xc0>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d109      	bne.n	801080c <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80107f8:	4b17      	ldr	r3, [pc, #92]	; (8010858 <_tx_semaphore_create+0xc4>)
 80107fa:	68fa      	ldr	r2, [r7, #12]
 80107fc:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	619a      	str	r2, [r3, #24]
 801080a:	e011      	b.n	8010830 <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801080c:	4b12      	ldr	r3, [pc, #72]	; (8010858 <_tx_semaphore_create+0xc4>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	68fa      	ldr	r2, [r7, #12]
 8010822:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	69fa      	ldr	r2, [r7, #28]
 8010828:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6a3a      	ldr	r2, [r7, #32]
 801082e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8010830:	4b08      	ldr	r3, [pc, #32]	; (8010854 <_tx_semaphore_create+0xc0>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	4b07      	ldr	r3, [pc, #28]	; (8010854 <_tx_semaphore_create+0xc0>)
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	f383 8810 	msr	PRIMASK, r3
}
 8010844:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010846:	2300      	movs	r3, #0
}
 8010848:	0018      	movs	r0, r3
 801084a:	46bd      	mov	sp, r7
 801084c:	b00e      	add	sp, #56	; 0x38
 801084e:	bd80      	pop	{r7, pc}
 8010850:	53454d41 	.word	0x53454d41
 8010854:	20018c5c 	.word	0x20018c5c
 8010858:	20018c58 	.word	0x20018c58

0801085c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b08e      	sub	sp, #56	; 0x38
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010864:	f3ef 8310 	mrs	r3, PRIMASK
 8010868:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801086a:	b672      	cpsid	i
    return(primask_value);
 801086c:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801086e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8010876:	4b3c      	ldr	r3, [pc, #240]	; (8010968 <_tx_semaphore_delete+0x10c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	1e5a      	subs	r2, r3, #1
 801087c:	4b3a      	ldr	r3, [pc, #232]	; (8010968 <_tx_semaphore_delete+0x10c>)
 801087e:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8010880:	4b39      	ldr	r3, [pc, #228]	; (8010968 <_tx_semaphore_delete+0x10c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d103      	bne.n	8010890 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8010888:	4b38      	ldr	r3, [pc, #224]	; (801096c <_tx_semaphore_delete+0x110>)
 801088a:	2200      	movs	r2, #0
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	e013      	b.n	80108b8 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	695b      	ldr	r3, [r3, #20]
 8010894:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108a6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80108a8:	4b30      	ldr	r3, [pc, #192]	; (801096c <_tx_semaphore_delete+0x110>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d102      	bne.n	80108b8 <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80108b2:	4b2e      	ldr	r3, [pc, #184]	; (801096c <_tx_semaphore_delete+0x110>)
 80108b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108b6:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80108b8:	4b2d      	ldr	r3, [pc, #180]	; (8010970 <_tx_semaphore_delete+0x114>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	4b2c      	ldr	r3, [pc, #176]	; (8010970 <_tx_semaphore_delete+0x114>)
 80108c0:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	611a      	str	r2, [r3, #16]
 80108da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	f383 8810 	msr	PRIMASK, r3
}
 80108e4:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80108e6:	e023      	b.n	8010930 <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80108e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ea:	3b01      	subs	r3, #1
 80108ec:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80108ee:	f3ef 8310 	mrs	r3, PRIMASK
 80108f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108f4:	b672      	cpsid	i
    return(primask_value);
 80108f6:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 80108f8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	2200      	movs	r2, #0
 80108fe:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8010900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010902:	2284      	movs	r2, #132	; 0x84
 8010904:	2101      	movs	r1, #1
 8010906:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801090e:	4b18      	ldr	r3, [pc, #96]	; (8010970 <_tx_semaphore_delete+0x114>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	1c5a      	adds	r2, r3, #1
 8010914:	4b16      	ldr	r3, [pc, #88]	; (8010970 <_tx_semaphore_delete+0x114>)
 8010916:	601a      	str	r2, [r3, #0]
 8010918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	f383 8810 	msr	PRIMASK, r3
}
 8010922:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010926:	0018      	movs	r0, r3
 8010928:	f000 fcc6 	bl	80112b8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801092c:	6a3b      	ldr	r3, [r7, #32]
 801092e:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8010930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1d8      	bne.n	80108e8 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010936:	f3ef 8310 	mrs	r3, PRIMASK
 801093a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801093c:	b672      	cpsid	i
    return(primask_value);
 801093e:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8010940:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010942:	4b0b      	ldr	r3, [pc, #44]	; (8010970 <_tx_semaphore_delete+0x114>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	1e5a      	subs	r2, r3, #1
 8010948:	4b09      	ldr	r3, [pc, #36]	; (8010970 <_tx_semaphore_delete+0x114>)
 801094a:	601a      	str	r2, [r3, #0]
 801094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f383 8810 	msr	PRIMASK, r3
}
 8010956:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010958:	f000 fc76 	bl	8011248 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801095c:	2300      	movs	r3, #0
}
 801095e:	0018      	movs	r0, r3
 8010960:	46bd      	mov	sp, r7
 8010962:	b00e      	add	sp, #56	; 0x38
 8010964:	bd80      	pop	{r7, pc}
 8010966:	46c0      	nop			; (mov r8, r8)
 8010968:	20018c5c 	.word	0x20018c5c
 801096c:	20018c58 	.word	0x20018c58
 8010970:	20018d28 	.word	0x20018d28

08010974 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08c      	sub	sp, #48	; 0x30
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801097e:	2300      	movs	r3, #0
 8010980:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010982:	f3ef 8310 	mrs	r3, PRIMASK
 8010986:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010988:	b672      	cpsid	i
    return(primask_value);
 801098a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801098c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00a      	beq.n	80109ac <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	1e5a      	subs	r2, r3, #1
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	609a      	str	r2, [r3, #8]
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f383 8810 	msr	PRIMASK, r3
}
 80109aa:	e069      	b.n	8010a80 <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d05e      	beq.n	8010a70 <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80109b2:	4b36      	ldr	r3, [pc, #216]	; (8010a8c <_tx_semaphore_get+0x118>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d008      	beq.n	80109cc <_tx_semaphore_get+0x58>
 80109ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	f383 8810 	msr	PRIMASK, r3
}
 80109c4:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80109c6:	230d      	movs	r3, #13
 80109c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109ca:	e059      	b.n	8010a80 <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80109cc:	4b30      	ldr	r3, [pc, #192]	; (8010a90 <_tx_semaphore_get+0x11c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d4:	4a2f      	ldr	r2, [pc, #188]	; (8010a94 <_tx_semaphore_get+0x120>)
 80109d6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80109de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e0:	22ac      	movs	r2, #172	; 0xac
 80109e2:	589b      	ldr	r3, [r3, r2]
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	21ac      	movs	r1, #172	; 0xac
 80109ea:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d109      	bne.n	8010a08 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109f8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80109fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109fe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a04:	675a      	str	r2, [r3, #116]	; 0x74
 8010a06:	e011      	b.n	8010a2c <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	6a3a      	ldr	r2, [r7, #32]
 8010a12:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a18:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	69fa      	ldr	r2, [r7, #28]
 8010a1e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a24:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a2a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	691b      	ldr	r3, [r3, #16]
 8010a30:	1c5a      	adds	r2, r3, #1
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8010a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a38:	2206      	movs	r2, #6
 8010a3a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3e:	2201      	movs	r2, #1
 8010a40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010a48:	4b10      	ldr	r3, [pc, #64]	; (8010a8c <_tx_semaphore_get+0x118>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	1c5a      	adds	r2, r3, #1
 8010a4e:	4b0f      	ldr	r3, [pc, #60]	; (8010a8c <_tx_semaphore_get+0x118>)
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f383 8810 	msr	PRIMASK, r3
}
 8010a5c:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	0018      	movs	r0, r3
 8010a62:	f000 fd29 	bl	80114b8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a68:	2284      	movs	r2, #132	; 0x84
 8010a6a:	589b      	ldr	r3, [r3, r2]
 8010a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a6e:	e007      	b.n	8010a80 <_tx_semaphore_get+0x10c>
 8010a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	f383 8810 	msr	PRIMASK, r3
}
 8010a7a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8010a7c:	230d      	movs	r3, #13
 8010a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 8010a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010a82:	0018      	movs	r0, r3
 8010a84:	46bd      	mov	sp, r7
 8010a86:	b00c      	add	sp, #48	; 0x30
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	46c0      	nop			; (mov r8, r8)
 8010a8c:	20018d28 	.word	0x20018d28
 8010a90:	20018c90 	.word	0x20018c90
 8010a94:	080106a5 	.word	0x080106a5

08010a98 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	; 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8010aa4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010aa6:	b672      	cpsid	i
    return(primask_value);
 8010aa8:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8010ab2:	6a3b      	ldr	r3, [r7, #32]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d10a      	bne.n	8010ace <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	1c5a      	adds	r2, r3, #1
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	609a      	str	r2, [r3, #8]
 8010ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f383 8810 	msr	PRIMASK, r3
}
 8010acc:	e034      	b.n	8010b38 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010ada:	6a3b      	ldr	r3, [r7, #32]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d103      	bne.n	8010ae8 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	60da      	str	r2, [r3, #12]
 8010ae6:	e00e      	b.n	8010b06 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aec:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	69ba      	ldr	r2, [r7, #24]
 8010af2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010af8:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	697a      	ldr	r2, [r7, #20]
 8010afe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	69ba      	ldr	r2, [r7, #24]
 8010b04:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a3a      	ldr	r2, [r7, #32]
 8010b0a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	2284      	movs	r2, #132	; 0x84
 8010b16:	2100      	movs	r1, #0
 8010b18:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010b1a:	4b0a      	ldr	r3, [pc, #40]	; (8010b44 <_tx_semaphore_put+0xac>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	4b08      	ldr	r3, [pc, #32]	; (8010b44 <_tx_semaphore_put+0xac>)
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f383 8810 	msr	PRIMASK, r3
}
 8010b2e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	0018      	movs	r0, r3
 8010b34:	f000 fbc0 	bl	80112b8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	0018      	movs	r0, r3
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	b00a      	add	sp, #40	; 0x28
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	46c0      	nop			; (mov r8, r8)
 8010b44:	20018d28 	.word	0x20018d28

08010b48 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b098      	sub	sp, #96	; 0x60
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
 8010b54:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8010b56:	2300      	movs	r3, #0
 8010b58:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8010b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8010b5e:	2347      	movs	r3, #71	; 0x47
 8010b60:	18fb      	adds	r3, r7, r3
 8010b62:	22ef      	movs	r2, #239	; 0xef
 8010b64:	701a      	strb	r2, [r3, #0]
 8010b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b68:	643b      	str	r3, [r7, #64]	; 0x40
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010b6e:	e009      	b.n	8010b84 <_tx_thread_create+0x3c>
 8010b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	657a      	str	r2, [r7, #84]	; 0x54
 8010b76:	2247      	movs	r2, #71	; 0x47
 8010b78:	18ba      	adds	r2, r7, r2
 8010b7a:	7812      	ldrb	r2, [r2, #0]
 8010b7c:	701a      	strb	r2, [r3, #0]
 8010b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b80:	3301      	adds	r3, #1
 8010b82:	653b      	str	r3, [r7, #80]	; 0x50
 8010b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d3f1      	bcc.n	8010b70 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b90:	233f      	movs	r3, #63	; 0x3f
 8010b92:	18fb      	adds	r3, r7, r3
 8010b94:	2200      	movs	r2, #0
 8010b96:	701a      	strb	r2, [r3, #0]
 8010b98:	23b0      	movs	r3, #176	; 0xb0
 8010b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ba0:	e009      	b.n	8010bb6 <_tx_thread_create+0x6e>
 8010ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010ba8:	223f      	movs	r2, #63	; 0x3f
 8010baa:	18ba      	adds	r2, r7, r2
 8010bac:	7812      	ldrb	r2, [r2, #0]
 8010bae:	701a      	strb	r2, [r3, #0]
 8010bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d3f1      	bcc.n	8010ba2 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	683a      	ldr	r2, [r7, #0]
 8010bce:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010bd4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bda:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010be0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2194      	movs	r1, #148	; 0x94
 8010be6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010be8:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010bee:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010bf4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	229c      	movs	r2, #156	; 0x9c
 8010bfa:	2120      	movs	r1, #32
 8010bfc:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8010bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c00:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8010c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c04:	3b01      	subs	r3, #1
 8010c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c08:	18d3      	adds	r3, r2, r3
 8010c0a:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c10:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8010c12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d007      	beq.n	8010c2a <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2298      	movs	r2, #152	; 0x98
 8010c24:	2100      	movs	r1, #0
 8010c26:	5099      	str	r1, [r3, r2]
 8010c28:	e006      	b.n	8010c38 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c2e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2198      	movs	r1, #152	; 0x98
 8010c34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c36:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2203      	movs	r2, #3
 8010c3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	4a48      	ldr	r2, [pc, #288]	; (8010d64 <_tx_thread_create+0x21c>)
 8010c42:	655a      	str	r2, [r3, #84]	; 0x54
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8010c4a:	4a47      	ldr	r2, [pc, #284]	; (8010d68 <_tx_thread_create+0x220>)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	0011      	movs	r1, r2
 8010c50:	0018      	movs	r0, r3
 8010c52:	f7ef fb05 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010c56:	f3ef 8310 	mrs	r3, PRIMASK
 8010c5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010c5c:	b672      	cpsid	i
    return(primask_value);
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8010c60:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	4a41      	ldr	r2, [pc, #260]	; (8010d6c <_tx_thread_create+0x224>)
 8010c66:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8010c68:	4b41      	ldr	r3, [pc, #260]	; (8010d70 <_tx_thread_create+0x228>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10b      	bne.n	8010c88 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8010c70:	4b40      	ldr	r3, [pc, #256]	; (8010d74 <_tx_thread_create+0x22c>)
 8010c72:	68fa      	ldr	r2, [r7, #12]
 8010c74:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2188      	movs	r1, #136	; 0x88
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	218c      	movs	r1, #140	; 0x8c
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	505a      	str	r2, [r3, r1]
 8010c86:	e016      	b.n	8010cb6 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8010c88:	4b3a      	ldr	r3, [pc, #232]	; (8010d74 <_tx_thread_create+0x22c>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8010c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c90:	228c      	movs	r2, #140	; 0x8c
 8010c92:	589b      	ldr	r3, [r3, r2]
 8010c94:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8010c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c98:	218c      	movs	r1, #140	; 0x8c
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8010c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca0:	2188      	movs	r1, #136	; 0x88
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	218c      	movs	r1, #140	; 0x8c
 8010caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cac:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2188      	movs	r1, #136	; 0x88
 8010cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cb4:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8010cb6:	4b2e      	ldr	r3, [pc, #184]	; (8010d70 <_tx_thread_create+0x228>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	4b2c      	ldr	r3, [pc, #176]	; (8010d70 <_tx_thread_create+0x228>)
 8010cbe:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010cc0:	4b2d      	ldr	r3, [pc, #180]	; (8010d78 <_tx_thread_create+0x230>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	4b2c      	ldr	r3, [pc, #176]	; (8010d78 <_tx_thread_create+0x230>)
 8010cc8:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8010cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d12a      	bne.n	8010d26 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010cd0:	f3ef 8305 	mrs	r3, IPSR
 8010cd4:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8010cd6:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010cd8:	4b28      	ldr	r3, [pc, #160]	; (8010d7c <_tx_thread_create+0x234>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	4a28      	ldr	r2, [pc, #160]	; (8010d80 <_tx_thread_create+0x238>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d90d      	bls.n	8010d00 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010ce4:	4b27      	ldr	r3, [pc, #156]	; (8010d84 <_tx_thread_create+0x23c>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d009      	beq.n	8010d04 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cf4:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8010cfe:	e001      	b.n	8010d04 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010d00:	2300      	movs	r3, #0
 8010d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	f383 8810 	msr	PRIMASK, r3
}
 8010d0e:	46c0      	nop			; (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	0018      	movs	r0, r3
 8010d14:	f000 fad0 	bl	80112b8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d01c      	beq.n	8010d58 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8010d24:	e018      	b.n	8010d58 <_tx_thread_create+0x210>
 8010d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d28:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	f383 8810 	msr	PRIMASK, r3
}
 8010d30:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d32:	f3ef 8310 	mrs	r3, PRIMASK
 8010d36:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d38:	b672      	cpsid	i
    return(primask_value);
 8010d3a:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8010d3c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8010d3e:	4b0e      	ldr	r3, [pc, #56]	; (8010d78 <_tx_thread_create+0x230>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	1e5a      	subs	r2, r3, #1
 8010d44:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <_tx_thread_create+0x230>)
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	f383 8810 	msr	PRIMASK, r3
}
 8010d52:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010d54:	f000 fa78 	bl	8011248 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	0018      	movs	r0, r3
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	b018      	add	sp, #96	; 0x60
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	46c0      	nop			; (mov r8, r8)
 8010d64:	08011865 	.word	0x08011865
 8010d68:	08010ff5 	.word	0x08010ff5
 8010d6c:	54485244 	.word	0x54485244
 8010d70:	20018c9c 	.word	0x20018c9c
 8010d74:	20018c98 	.word	0x20018c98
 8010d78:	20018d28 	.word	0x20018d28
 8010d7c:	20000010 	.word	0x20000010
 8010d80:	f0f0f0ef 	.word	0xf0f0f0ef
 8010d84:	20018c94 	.word	0x20018c94

08010d88 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d92:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d94:	b672      	cpsid	i
    return(primask_value);
 8010d96:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8010d98:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010d9a:	4b07      	ldr	r3, [pc, #28]	; (8010db8 <_tx_thread_identify+0x30>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	60bb      	str	r3, [r7, #8]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f383 8810 	msr	PRIMASK, r3
}
 8010daa:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8010dac:	68bb      	ldr	r3, [r7, #8]
}
 8010dae:	0018      	movs	r0, r3
 8010db0:	46bd      	mov	sp, r7
 8010db2:	b004      	add	sp, #16
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	46c0      	nop			; (mov r8, r8)
 8010db8:	20018c90 	.word	0x20018c90

08010dbc <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b088      	sub	sp, #32
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
 8010dc8:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010dca:	f3ef 8310 	mrs	r3, PRIMASK
 8010dce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010dd0:	b672      	cpsid	i
    return(primask_value);
 8010dd2:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8010dd4:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d003      	beq.n	8010df2 <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d003      	beq.n	8010e00 <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d004      	beq.n	8010e10 <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2294      	movs	r2, #148	; 0x94
 8010e0a:	589a      	ldr	r2, [r3, r2]
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 8010e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d004      	beq.n	8010e20 <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2298      	movs	r2, #152	; 0x98
 8010e1a:	589a      	ldr	r2, [r3, r2]
 8010e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	699a      	ldr	r2, [r3, #24]
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8010e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d004      	beq.n	8010e3e <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2288      	movs	r2, #136	; 0x88
 8010e38:	589a      	ldr	r2, [r3, r2]
 8010e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8010e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d003      	beq.n	8010e4c <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	f383 8810 	msr	PRIMASK, r3
}
 8010e56:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	0018      	movs	r0, r3
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	b008      	add	sp, #32
 8010e60:	bd80      	pop	{r7, pc}
	...

08010e64 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8010e6a:	4b28      	ldr	r3, [pc, #160]	; (8010f0c <_tx_thread_initialize+0xa8>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8010e70:	4b27      	ldr	r3, [pc, #156]	; (8010f10 <_tx_thread_initialize+0xac>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8010e76:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <_tx_thread_initialize+0xb0>)
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	230f      	movs	r3, #15
 8010e7c:	18fb      	adds	r3, r7, r3
 8010e7e:	2200      	movs	r2, #0
 8010e80:	701a      	strb	r2, [r3, #0]
 8010e82:	2304      	movs	r3, #4
 8010e84:	60bb      	str	r3, [r7, #8]
 8010e86:	2300      	movs	r3, #0
 8010e88:	61bb      	str	r3, [r7, #24]
 8010e8a:	e009      	b.n	8010ea0 <_tx_thread_initialize+0x3c>
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	61fa      	str	r2, [r7, #28]
 8010e92:	220f      	movs	r2, #15
 8010e94:	18ba      	adds	r2, r7, r2
 8010e96:	7812      	ldrb	r2, [r2, #0]
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	61bb      	str	r3, [r7, #24]
 8010ea0:	69ba      	ldr	r2, [r7, #24]
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d3f1      	bcc.n	8010e8c <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010ea8:	4b1b      	ldr	r3, [pc, #108]	; (8010f18 <_tx_thread_initialize+0xb4>)
 8010eaa:	2220      	movs	r2, #32
 8010eac:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8010eae:	4b1b      	ldr	r3, [pc, #108]	; (8010f1c <_tx_thread_initialize+0xb8>)
 8010eb0:	617b      	str	r3, [r7, #20]
 8010eb2:	1dfb      	adds	r3, r7, #7
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	701a      	strb	r2, [r3, #0]
 8010eb8:	2380      	movs	r3, #128	; 0x80
 8010eba:	603b      	str	r3, [r7, #0]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	613b      	str	r3, [r7, #16]
 8010ec0:	e008      	b.n	8010ed4 <_tx_thread_initialize+0x70>
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	617a      	str	r2, [r7, #20]
 8010ec8:	1dfa      	adds	r2, r7, #7
 8010eca:	7812      	ldrb	r2, [r2, #0]
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	613b      	str	r3, [r7, #16]
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d3f2      	bcc.n	8010ec2 <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8010edc:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <_tx_thread_initialize+0xbc>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8010ee2:	4b10      	ldr	r3, [pc, #64]	; (8010f24 <_tx_thread_initialize+0xc0>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8010ee8:	4b0f      	ldr	r3, [pc, #60]	; (8010f28 <_tx_thread_initialize+0xc4>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8010eee:	4b0f      	ldr	r3, [pc, #60]	; (8010f2c <_tx_thread_initialize+0xc8>)
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8010ef4:	4b0e      	ldr	r3, [pc, #56]	; (8010f30 <_tx_thread_initialize+0xcc>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2285      	movs	r2, #133	; 0x85
 8010efa:	0452      	lsls	r2, r2, #17
 8010efc:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 8010efe:	4b0c      	ldr	r3, [pc, #48]	; (8010f30 <_tx_thread_initialize+0xcc>)
 8010f00:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8010f02:	46c0      	nop			; (mov r8, r8)
 8010f04:	46bd      	mov	sp, r7
 8010f06:	b008      	add	sp, #32
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	46c0      	nop			; (mov r8, r8)
 8010f0c:	20018c90 	.word	0x20018c90
 8010f10:	20018c94 	.word	0x20018c94
 8010f14:	20018ca0 	.word	0x20018ca0
 8010f18:	20018ca4 	.word	0x20018ca4
 8010f1c:	20018ca8 	.word	0x20018ca8
 8010f20:	20018c98 	.word	0x20018c98
 8010f24:	20018c9c 	.word	0x20018c9c
 8010f28:	20018d28 	.word	0x20018d28
 8010f2c:	20018d2c 	.word	0x20018d2c
 8010f30:	20018d30 	.word	0x20018d30

08010f34 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08a      	sub	sp, #40	; 0x28
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f40:	f3ef 8310 	mrs	r3, PRIMASK
 8010f44:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f46:	b672      	cpsid	i
    return(primask_value);
 8010f48:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010f4a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f50:	2b03      	cmp	r3, #3
 8010f52:	d130      	bne.n	8010fb6 <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f54:	f3ef 8305 	mrs	r3, IPSR
 8010f58:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8010f5a:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010f5c:	4b21      	ldr	r3, [pc, #132]	; (8010fe4 <_tx_thread_resume+0xb0>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4313      	orrs	r3, r2
 8010f62:	4a21      	ldr	r2, [pc, #132]	; (8010fe8 <_tx_thread_resume+0xb4>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d90d      	bls.n	8010f84 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010f68:	4b20      	ldr	r3, [pc, #128]	; (8010fec <_tx_thread_resume+0xb8>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010f6e:	6a3b      	ldr	r3, [r7, #32]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d009      	beq.n	8010f88 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010f74:	6a3b      	ldr	r3, [r7, #32]
 8010f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f78:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010f7a:	6a3b      	ldr	r3, [r7, #32]
 8010f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7e:	6a3b      	ldr	r3, [r7, #32]
 8010f80:	63da      	str	r2, [r3, #60]	; 0x3c
 8010f82:	e001      	b.n	8010f88 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010f88:	4b19      	ldr	r3, [pc, #100]	; (8010ff0 <_tx_thread_resume+0xbc>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	1c5a      	adds	r2, r3, #1
 8010f8e:	4b18      	ldr	r3, [pc, #96]	; (8010ff0 <_tx_thread_resume+0xbc>)
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f383 8810 	msr	PRIMASK, r3
}
 8010f9c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	0018      	movs	r0, r3
 8010fa2:	f000 f989 	bl	80112b8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010fa6:	6a3b      	ldr	r3, [r7, #32]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d002      	beq.n	8010fb2 <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e012      	b.n	8010fdc <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d105      	bne.n	8010fca <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8010fc4:	2319      	movs	r3, #25
 8010fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc8:	e001      	b.n	8010fce <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8010fca:	2312      	movs	r3, #18
 8010fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	f383 8810 	msr	PRIMASK, r3
}
 8010fd8:	46c0      	nop			; (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fdc:	0018      	movs	r0, r3
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	b00a      	add	sp, #40	; 0x28
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	20000010 	.word	0x20000010
 8010fe8:	f0f0f0ef 	.word	0xf0f0f0ef
 8010fec:	20018c94 	.word	0x20018c94
 8010ff0:	20018d28 	.word	0x20018d28

08010ff4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010ffa:	4b1a      	ldr	r3, [pc, #104]	; (8011064 <_tx_thread_shell_entry+0x70>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011008:	0018      	movs	r0, r3
 801100a:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801100c:	4b16      	ldr	r3, [pc, #88]	; (8011068 <_tx_thread_shell_entry+0x74>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d004      	beq.n	801101e <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011014:	4b14      	ldr	r3, [pc, #80]	; (8011068 <_tx_thread_shell_entry+0x74>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	0010      	movs	r0, r2
 801101c:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801101e:	f3ef 8310 	mrs	r3, PRIMASK
 8011022:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011024:	b672      	cpsid	i
    return(primask_value);
 8011026:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8011028:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2201      	movs	r2, #1
 801102e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2201      	movs	r2, #1
 8011034:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2200      	movs	r2, #0
 801103a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801103c:	4b0b      	ldr	r3, [pc, #44]	; (801106c <_tx_thread_shell_entry+0x78>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	4b0a      	ldr	r3, [pc, #40]	; (801106c <_tx_thread_shell_entry+0x78>)
 8011044:	601a      	str	r2, [r3, #0]
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f383 8810 	msr	PRIMASK, r3
}
 8011050:	46c0      	nop			; (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	0018      	movs	r0, r3
 8011056:	f000 fa2f 	bl	80114b8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801105a:	46c0      	nop			; (mov r8, r8)
 801105c:	46bd      	mov	sp, r7
 801105e:	b004      	add	sp, #16
 8011060:	bd80      	pop	{r7, pc}
 8011062:	46c0      	nop			; (mov r8, r8)
 8011064:	20018c90 	.word	0x20018c90
 8011068:	20018d2c 	.word	0x20018d2c
 801106c:	20018d28 	.word	0x20018d28

08011070 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b08e      	sub	sp, #56	; 0x38
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011078:	f3ef 8310 	mrs	r3, PRIMASK
 801107c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 801107e:	b672      	cpsid	i
    return(primask_value);
 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011082:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011084:	4b35      	ldr	r3, [pc, #212]	; (801115c <_tx_thread_sleep+0xec>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 801108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108c:	2b00      	cmp	r3, #0
 801108e:	d108      	bne.n	80110a2 <_tx_thread_sleep+0x32>
 8011090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011092:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	f383 8810 	msr	PRIMASK, r3
}
 801109a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801109c:	2313      	movs	r3, #19
 801109e:	637b      	str	r3, [r7, #52]	; 0x34
 80110a0:	e056      	b.n	8011150 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110a2:	f3ef 8305 	mrs	r3, IPSR
 80110a6:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80110a8:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80110aa:	4b2d      	ldr	r3, [pc, #180]	; (8011160 <_tx_thread_sleep+0xf0>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4313      	orrs	r3, r2
 80110b0:	d008      	beq.n	80110c4 <_tx_thread_sleep+0x54>
 80110b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	f383 8810 	msr	PRIMASK, r3
}
 80110bc:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80110be:	2313      	movs	r3, #19
 80110c0:	637b      	str	r3, [r7, #52]	; 0x34
 80110c2:	e045      	b.n	8011150 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80110c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110c6:	4b27      	ldr	r3, [pc, #156]	; (8011164 <_tx_thread_sleep+0xf4>)
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d108      	bne.n	80110de <_tx_thread_sleep+0x6e>
 80110cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	f383 8810 	msr	PRIMASK, r3
}
 80110d6:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80110d8:	2313      	movs	r3, #19
 80110da:	637b      	str	r3, [r7, #52]	; 0x34
 80110dc:	e038      	b.n	8011150 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d108      	bne.n	80110f6 <_tx_thread_sleep+0x86>
 80110e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	f383 8810 	msr	PRIMASK, r3
}
 80110ee:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80110f0:	2300      	movs	r3, #0
 80110f2:	637b      	str	r3, [r7, #52]	; 0x34
 80110f4:	e02c      	b.n	8011150 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80110f6:	4b1c      	ldr	r3, [pc, #112]	; (8011168 <_tx_thread_sleep+0xf8>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d008      	beq.n	8011110 <_tx_thread_sleep+0xa0>
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	f383 8810 	msr	PRIMASK, r3
}
 8011108:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 801110a:	2313      	movs	r3, #19
 801110c:	637b      	str	r3, [r7, #52]	; 0x34
 801110e:	e01f      	b.n	8011150 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	2204      	movs	r2, #4
 8011114:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	2201      	movs	r2, #1
 801111a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	2284      	movs	r2, #132	; 0x84
 8011120:	2100      	movs	r1, #0
 8011122:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801112a:	4b0f      	ldr	r3, [pc, #60]	; (8011168 <_tx_thread_sleep+0xf8>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	4b0d      	ldr	r3, [pc, #52]	; (8011168 <_tx_thread_sleep+0xf8>)
 8011132:	601a      	str	r2, [r3, #0]
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f383 8810 	msr	PRIMASK, r3
}
 801113e:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011142:	0018      	movs	r0, r3
 8011144:	f000 f9b8 	bl	80114b8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114a:	2284      	movs	r2, #132	; 0x84
 801114c:	589b      	ldr	r3, [r3, r2]
 801114e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8011150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011152:	0018      	movs	r0, r3
 8011154:	46bd      	mov	sp, r7
 8011156:	b00e      	add	sp, #56	; 0x38
 8011158:	bd80      	pop	{r7, pc}
 801115a:	46c0      	nop			; (mov r8, r8)
 801115c:	20018c90 	.word	0x20018c90
 8011160:	20000010 	.word	0x20000010
 8011164:	20018dd8 	.word	0x20018dd8
 8011168:	20018d28 	.word	0x20018d28

0801116c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b08a      	sub	sp, #40	; 0x28
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011174:	f3ef 8310 	mrs	r3, PRIMASK
 8011178:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801117a:	b672      	cpsid	i
    return(primask_value);
 801117c:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801117e:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011180:	4b2e      	ldr	r3, [pc, #184]	; (801123c <_tx_thread_suspend+0xd0>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118a:	2b00      	cmp	r3, #0
 801118c:	d130      	bne.n	80111f0 <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 801118e:	2300      	movs	r3, #0
 8011190:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011192:	f3ef 8305 	mrs	r3, IPSR
 8011196:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011198:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 801119a:	4b29      	ldr	r3, [pc, #164]	; (8011240 <_tx_thread_suspend+0xd4>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4313      	orrs	r3, r2
 80111a0:	d109      	bne.n	80111b6 <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80111a2:	69fa      	ldr	r2, [r7, #28]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d105      	bne.n	80111b6 <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80111aa:	4b26      	ldr	r3, [pc, #152]	; (8011244 <_tx_thread_suspend+0xd8>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80111b2:	2314      	movs	r3, #20
 80111b4:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d133      	bne.n	8011224 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2203      	movs	r2, #3
 80111c0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2201      	movs	r2, #1
 80111c6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80111ce:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <_tx_thread_suspend+0xd8>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	4b1b      	ldr	r3, [pc, #108]	; (8011244 <_tx_thread_suspend+0xd8>)
 80111d6:	601a      	str	r2, [r3, #0]
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	f383 8810 	msr	PRIMASK, r3
}
 80111e2:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	0018      	movs	r0, r3
 80111e8:	f000 f966 	bl	80114b8 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 80111ec:	2300      	movs	r3, #0
 80111ee:	e020      	b.n	8011232 <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111f4:	2b02      	cmp	r3, #2
 80111f6:	d102      	bne.n	80111fe <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 80111f8:	2314      	movs	r3, #20
 80111fa:	627b      	str	r3, [r7, #36]	; 0x24
 80111fc:	e012      	b.n	8011224 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011202:	2b01      	cmp	r3, #1
 8011204:	d102      	bne.n	801120c <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011206:	2314      	movs	r3, #20
 8011208:	627b      	str	r3, [r7, #36]	; 0x24
 801120a:	e00b      	b.n	8011224 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011210:	2b03      	cmp	r3, #3
 8011212:	d102      	bne.n	801121a <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011214:	2300      	movs	r3, #0
 8011216:	627b      	str	r3, [r7, #36]	; 0x24
 8011218:	e004      	b.n	8011224 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2201      	movs	r2, #1
 801121e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011220:	2300      	movs	r3, #0
 8011222:	627b      	str	r3, [r7, #36]	; 0x24
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f383 8810 	msr	PRIMASK, r3
}
 801122e:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011232:	0018      	movs	r0, r3
 8011234:	46bd      	mov	sp, r7
 8011236:	b00a      	add	sp, #40	; 0x28
 8011238:	bd80      	pop	{r7, pc}
 801123a:	46c0      	nop			; (mov r8, r8)
 801123c:	20018c90 	.word	0x20018c90
 8011240:	20000010 	.word	0x20000010
 8011244:	20018d28 	.word	0x20018d28

08011248 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b088      	sub	sp, #32
 801124c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801124e:	4b16      	ldr	r3, [pc, #88]	; (80112a8 <_tx_thread_system_preempt_check+0x60>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d121      	bne.n	801129e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801125a:	4b14      	ldr	r3, [pc, #80]	; (80112ac <_tx_thread_system_preempt_check+0x64>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011260:	4b13      	ldr	r3, [pc, #76]	; (80112b0 <_tx_thread_system_preempt_check+0x68>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	429a      	cmp	r2, r3
 801126c:	d017      	beq.n	801129e <_tx_thread_system_preempt_check+0x56>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801126e:	4b11      	ldr	r3, [pc, #68]	; (80112b4 <_tx_thread_system_preempt_check+0x6c>)
 8011270:	2280      	movs	r2, #128	; 0x80
 8011272:	0552      	lsls	r2, r2, #21
 8011274:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011276:	f3ef 8305 	mrs	r3, IPSR
 801127a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801127c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10c      	bne.n	801129c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011282:	f3ef 8310 	mrs	r3, PRIMASK
 8011286:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8011288:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 801128a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801128c:	b662      	cpsie	i
}
 801128e:	46c0      	nop			; (mov r8, r8)
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f383 8810 	msr	PRIMASK, r3
}
 801129a:	46c0      	nop			; (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 801129c:	46c0      	nop			; (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801129e:	46c0      	nop			; (mov r8, r8)
 80112a0:	46bd      	mov	sp, r7
 80112a2:	b008      	add	sp, #32
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	46c0      	nop			; (mov r8, r8)
 80112a8:	20018d28 	.word	0x20018d28
 80112ac:	20018c90 	.word	0x20018c90
 80112b0:	20018c94 	.word	0x20018c94
 80112b4:	e000ed04 	.word	0xe000ed04

080112b8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b096      	sub	sp, #88	; 0x58
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112c0:	f3ef 8310 	mrs	r3, PRIMASK
 80112c4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112c6:	b672      	cpsid	i
    return(primask_value);
 80112c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80112ca:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d005      	beq.n	80112e0 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	334c      	adds	r3, #76	; 0x4c
 80112d8:	0018      	movs	r0, r3
 80112da:	f000 fc1f 	bl	8011b1c <_tx_timer_system_deactivate>
 80112de:	e002      	b.n	80112e6 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80112e6:	4b6d      	ldr	r3, [pc, #436]	; (801149c <_tx_thread_system_resume+0x1e4>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	1e5a      	subs	r2, r3, #1
 80112ec:	4b6b      	ldr	r3, [pc, #428]	; (801149c <_tx_thread_system_resume+0x1e4>)
 80112ee:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d000      	beq.n	80112fa <_tx_thread_system_resume+0x42>
 80112f8:	e084      	b.n	8011404 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d100      	bne.n	8011304 <_tx_thread_system_resume+0x4c>
 8011302:	e098      	b.n	8011436 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011308:	2b00      	cmp	r3, #0
 801130a:	d000      	beq.n	801130e <_tx_thread_system_resume+0x56>
 801130c:	e073      	b.n	80113f6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011318:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801131a:	4b61      	ldr	r3, [pc, #388]	; (80114a0 <_tx_thread_system_resume+0x1e8>)
 801131c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801131e:	0092      	lsls	r2, r2, #2
 8011320:	58d3      	ldr	r3, [r2, r3]
 8011322:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8011324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011326:	2b00      	cmp	r3, #0
 8011328:	d155      	bne.n	80113d6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801132a:	4b5d      	ldr	r3, [pc, #372]	; (80114a0 <_tx_thread_system_resume+0x1e8>)
 801132c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801132e:	0092      	lsls	r2, r2, #2
 8011330:	6879      	ldr	r1, [r7, #4]
 8011332:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011340:	2201      	movs	r2, #1
 8011342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011344:	409a      	lsls	r2, r3
 8011346:	0013      	movs	r3, r2
 8011348:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801134a:	4b56      	ldr	r3, [pc, #344]	; (80114a4 <_tx_thread_system_resume+0x1ec>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011350:	431a      	orrs	r2, r3
 8011352:	4b54      	ldr	r3, [pc, #336]	; (80114a4 <_tx_thread_system_resume+0x1ec>)
 8011354:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8011356:	4b54      	ldr	r3, [pc, #336]	; (80114a8 <_tx_thread_system_resume+0x1f0>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801135c:	429a      	cmp	r2, r3
 801135e:	d26a      	bcs.n	8011436 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011360:	4b51      	ldr	r3, [pc, #324]	; (80114a8 <_tx_thread_system_resume+0x1f0>)
 8011362:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011364:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8011366:	4b51      	ldr	r3, [pc, #324]	; (80114ac <_tx_thread_system_resume+0x1f4>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801136c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801136e:	2b00      	cmp	r3, #0
 8011370:	d103      	bne.n	801137a <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011372:	4b4e      	ldr	r3, [pc, #312]	; (80114ac <_tx_thread_system_resume+0x1f4>)
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	e05d      	b.n	8011436 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801137a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801137e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011380:	429a      	cmp	r2, r3
 8011382:	d258      	bcs.n	8011436 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8011384:	4b49      	ldr	r3, [pc, #292]	; (80114ac <_tx_thread_system_resume+0x1f4>)
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801138c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011390:	f383 8810 	msr	PRIMASK, r3
}
 8011394:	46c0      	nop			; (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011396:	4b41      	ldr	r3, [pc, #260]	; (801149c <_tx_thread_system_resume+0x1e4>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801139c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d000      	beq.n	80113a4 <_tx_thread_system_resume+0xec>
 80113a2:	e074      	b.n	801148e <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80113a4:	4b42      	ldr	r3, [pc, #264]	; (80114b0 <_tx_thread_system_resume+0x1f8>)
 80113a6:	2280      	movs	r2, #128	; 0x80
 80113a8:	0552      	lsls	r2, r2, #21
 80113aa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80113ac:	f3ef 8305 	mrs	r3, IPSR
 80113b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80113b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10c      	bne.n	80113d2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113b8:	f3ef 8310 	mrs	r3, PRIMASK
 80113bc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 80113be:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 80113c0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80113c2:	b662      	cpsie	i
}
 80113c4:	46c0      	nop			; (mov r8, r8)
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	f383 8810 	msr	PRIMASK, r3
}
 80113d0:	46c0      	nop			; (mov r8, r8)
}
 80113d2:	46c0      	nop			; (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80113d4:	e05b      	b.n	801148e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80113d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113da:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80113dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80113e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113ec:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113f2:	621a      	str	r2, [r3, #32]
 80113f4:	e01f      	b.n	8011436 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2203      	movs	r2, #3
 8011400:	631a      	str	r2, [r3, #48]	; 0x30
 8011402:	e018      	b.n	8011436 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011408:	2b01      	cmp	r3, #1
 801140a:	d014      	beq.n	8011436 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011410:	2b02      	cmp	r3, #2
 8011412:	d010      	beq.n	8011436 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011418:	2b00      	cmp	r3, #0
 801141a:	d106      	bne.n	801142a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2200      	movs	r2, #0
 8011426:	631a      	str	r2, [r3, #48]	; 0x30
 8011428:	e005      	b.n	8011436 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2203      	movs	r2, #3
 8011434:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011436:	4b1f      	ldr	r3, [pc, #124]	; (80114b4 <_tx_thread_system_resume+0x1fc>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	63bb      	str	r3, [r7, #56]	; 0x38
 801143c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801143e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	f383 8810 	msr	PRIMASK, r3
}
 8011446:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011448:	4b18      	ldr	r3, [pc, #96]	; (80114ac <_tx_thread_system_resume+0x1f4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801144e:	429a      	cmp	r2, r3
 8011450:	d020      	beq.n	8011494 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011452:	4b12      	ldr	r3, [pc, #72]	; (801149c <_tx_thread_system_resume+0x1e4>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8011458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801145a:	2b00      	cmp	r3, #0
 801145c:	d11a      	bne.n	8011494 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801145e:	4b14      	ldr	r3, [pc, #80]	; (80114b0 <_tx_thread_system_resume+0x1f8>)
 8011460:	2280      	movs	r2, #128	; 0x80
 8011462:	0552      	lsls	r2, r2, #21
 8011464:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011466:	f3ef 8305 	mrs	r3, IPSR
 801146a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801146c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801146e:	2b00      	cmp	r3, #0
 8011470:	d10f      	bne.n	8011492 <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011472:	f3ef 8310 	mrs	r3, PRIMASK
 8011476:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8011478:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 801147a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801147c:	b662      	cpsie	i
}
 801147e:	46c0      	nop			; (mov r8, r8)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	f383 8810 	msr	PRIMASK, r3
}
 801148a:	46c0      	nop			; (mov r8, r8)
}
 801148c:	e001      	b.n	8011492 <_tx_thread_system_resume+0x1da>
                                return;
 801148e:	46c0      	nop			; (mov r8, r8)
 8011490:	e000      	b.n	8011494 <_tx_thread_system_resume+0x1dc>
 8011492:	46c0      	nop			; (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011494:	46bd      	mov	sp, r7
 8011496:	b016      	add	sp, #88	; 0x58
 8011498:	bd80      	pop	{r7, pc}
 801149a:	46c0      	nop			; (mov r8, r8)
 801149c:	20018d28 	.word	0x20018d28
 80114a0:	20018ca8 	.word	0x20018ca8
 80114a4:	20018ca0 	.word	0x20018ca0
 80114a8:	20018ca4 	.word	0x20018ca4
 80114ac:	20018c94 	.word	0x20018c94
 80114b0:	e000ed04 	.word	0xe000ed04
 80114b4:	20018c90 	.word	0x20018c90

080114b8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b09c      	sub	sp, #112	; 0x70
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80114c0:	4bb9      	ldr	r3, [pc, #740]	; (80117a8 <_tx_thread_system_suspend+0x2f0>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80114c6:	f3ef 8310 	mrs	r3, PRIMASK
 80114ca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 80114cc:	b672      	cpsid	i
    return(primask_value);
 80114ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80114d0:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d111      	bne.n	80114fe <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114de:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80114e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d007      	beq.n	80114f6 <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80114e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114e8:	3301      	adds	r3, #1
 80114ea:	d004      	beq.n	80114f6 <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	334c      	adds	r3, #76	; 0x4c
 80114f0:	0018      	movs	r0, r3
 80114f2:	f000 fab5 	bl	8011a60 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	69da      	ldr	r2, [r3, #28]
 80114fa:	4bac      	ldr	r3, [pc, #688]	; (80117ac <_tx_thread_system_suspend+0x2f4>)
 80114fc:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80114fe:	4bac      	ldr	r3, [pc, #688]	; (80117b0 <_tx_thread_system_suspend+0x2f8>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	1e5a      	subs	r2, r3, #1
 8011504:	4baa      	ldr	r3, [pc, #680]	; (80117b0 <_tx_thread_system_suspend+0x2f8>)
 8011506:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150c:	2b01      	cmp	r3, #1
 801150e:	d000      	beq.n	8011512 <_tx_thread_system_suspend+0x5a>
 8011510:	e118      	b.n	8011744 <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151c:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8011524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	429a      	cmp	r2, r3
 801152a:	d016      	beq.n	801155a <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011530:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011536:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801153a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801153c:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801153e:	4b9d      	ldr	r3, [pc, #628]	; (80117b4 <_tx_thread_system_suspend+0x2fc>)
 8011540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011542:	0092      	lsls	r2, r2, #2
 8011544:	58d3      	ldr	r3, [r2, r3]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d000      	beq.n	801154e <_tx_thread_system_suspend+0x96>
 801154c:	e0c9      	b.n	80116e2 <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801154e:	4b99      	ldr	r3, [pc, #612]	; (80117b4 <_tx_thread_system_suspend+0x2fc>)
 8011550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011552:	0092      	lsls	r2, r2, #2
 8011554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011556:	50d1      	str	r1, [r2, r3]
 8011558:	e0c3      	b.n	80116e2 <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801155a:	4b96      	ldr	r3, [pc, #600]	; (80117b4 <_tx_thread_system_suspend+0x2fc>)
 801155c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801155e:	0092      	lsls	r2, r2, #2
 8011560:	2100      	movs	r1, #0
 8011562:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011564:	2201      	movs	r2, #1
 8011566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011568:	409a      	lsls	r2, r3
 801156a:	0013      	movs	r3, r2
 801156c:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801156e:	4b92      	ldr	r3, [pc, #584]	; (80117b8 <_tx_thread_system_suspend+0x300>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011574:	43d2      	mvns	r2, r2
 8011576:	401a      	ands	r2, r3
 8011578:	4b8f      	ldr	r3, [pc, #572]	; (80117b8 <_tx_thread_system_suspend+0x300>)
 801157a:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801157c:	2300      	movs	r3, #0
 801157e:	653b      	str	r3, [r7, #80]	; 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8011580:	4b8d      	ldr	r3, [pc, #564]	; (80117b8 <_tx_thread_system_suspend+0x300>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8011586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011588:	2b00      	cmp	r3, #0
 801158a:	d12b      	bne.n	80115e4 <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801158c:	4b8b      	ldr	r3, [pc, #556]	; (80117bc <_tx_thread_system_suspend+0x304>)
 801158e:	2220      	movs	r2, #32
 8011590:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011592:	4b8b      	ldr	r3, [pc, #556]	; (80117c0 <_tx_thread_system_suspend+0x308>)
 8011594:	2200      	movs	r2, #0
 8011596:	601a      	str	r2, [r3, #0]
 8011598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801159a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801159e:	f383 8810 	msr	PRIMASK, r3
}
 80115a2:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80115a4:	4b82      	ldr	r3, [pc, #520]	; (80117b0 <_tx_thread_system_suspend+0x2f8>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (combined_flags == ((ULONG) 0))
 80115aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d000      	beq.n	80115b2 <_tx_thread_system_suspend+0xfa>
 80115b0:	e0f2      	b.n	8011798 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80115b2:	4b84      	ldr	r3, [pc, #528]	; (80117c4 <_tx_thread_system_suspend+0x30c>)
 80115b4:	2280      	movs	r2, #128	; 0x80
 80115b6:	0552      	lsls	r2, r2, #21
 80115b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115ba:	f3ef 8305 	mrs	r3, IPSR
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 80115c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10c      	bne.n	80115e0 <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80115c6:	f3ef 8310 	mrs	r3, PRIMASK
 80115ca:	63bb      	str	r3, [r7, #56]	; 0x38
    return(primask_value);
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_primask_value();
 80115ce:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80115d0:	b662      	cpsie	i
}
 80115d2:	46c0      	nop			; (mov r8, r8)
 80115d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80115d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115da:	f383 8810 	msr	PRIMASK, r3
}
 80115de:	46c0      	nop			; (mov r8, r8)
}
 80115e0:	46c0      	nop			; (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80115e2:	e0d9      	b.n	8011798 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80115e4:	2300      	movs	r3, #0
 80115e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80115e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115ea:	425a      	negs	r2, r3
 80115ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115ee:	4013      	ands	r3, r2
 80115f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80115f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115f4:	2b0f      	cmp	r3, #15
 80115f6:	d80e      	bhi.n	8011616 <_tx_thread_system_suspend+0x15e>
 80115f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115fa:	2b03      	cmp	r3, #3
 80115fc:	d905      	bls.n	801160a <_tx_thread_system_suspend+0x152>
 80115fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011600:	089b      	lsrs	r3, r3, #2
 8011602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011606:	3302      	adds	r3, #2
 8011608:	66bb      	str	r3, [r7, #104]	; 0x68
 801160a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801160c:	085b      	lsrs	r3, r3, #1
 801160e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011610:	18d3      	adds	r3, r2, r3
 8011612:	66bb      	str	r3, [r7, #104]	; 0x68
 8011614:	e060      	b.n	80116d8 <_tx_thread_system_suspend+0x220>
 8011616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011618:	2bff      	cmp	r3, #255	; 0xff
 801161a:	d814      	bhi.n	8011646 <_tx_thread_system_suspend+0x18e>
 801161c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801161e:	091b      	lsrs	r3, r3, #4
 8011620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011624:	3304      	adds	r3, #4
 8011626:	66bb      	str	r3, [r7, #104]	; 0x68
 8011628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801162a:	2b03      	cmp	r3, #3
 801162c:	d905      	bls.n	801163a <_tx_thread_system_suspend+0x182>
 801162e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011630:	089b      	lsrs	r3, r3, #2
 8011632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011636:	3302      	adds	r3, #2
 8011638:	66bb      	str	r3, [r7, #104]	; 0x68
 801163a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801163c:	085b      	lsrs	r3, r3, #1
 801163e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011640:	18d3      	adds	r3, r2, r3
 8011642:	66bb      	str	r3, [r7, #104]	; 0x68
 8011644:	e048      	b.n	80116d8 <_tx_thread_system_suspend+0x220>
 8011646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	025b      	lsls	r3, r3, #9
 801164c:	429a      	cmp	r2, r3
 801164e:	d21d      	bcs.n	801168c <_tx_thread_system_suspend+0x1d4>
 8011650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011652:	0a1b      	lsrs	r3, r3, #8
 8011654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011658:	3308      	adds	r3, #8
 801165a:	66bb      	str	r3, [r7, #104]	; 0x68
 801165c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801165e:	2b0f      	cmp	r3, #15
 8011660:	d905      	bls.n	801166e <_tx_thread_system_suspend+0x1b6>
 8011662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011664:	091b      	lsrs	r3, r3, #4
 8011666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801166a:	3304      	adds	r3, #4
 801166c:	66bb      	str	r3, [r7, #104]	; 0x68
 801166e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011670:	2b03      	cmp	r3, #3
 8011672:	d905      	bls.n	8011680 <_tx_thread_system_suspend+0x1c8>
 8011674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011676:	089b      	lsrs	r3, r3, #2
 8011678:	66fb      	str	r3, [r7, #108]	; 0x6c
 801167a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801167c:	3302      	adds	r3, #2
 801167e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011682:	085b      	lsrs	r3, r3, #1
 8011684:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011686:	18d3      	adds	r3, r2, r3
 8011688:	66bb      	str	r3, [r7, #104]	; 0x68
 801168a:	e025      	b.n	80116d8 <_tx_thread_system_suspend+0x220>
 801168c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801168e:	0c1b      	lsrs	r3, r3, #16
 8011690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011694:	3310      	adds	r3, #16
 8011696:	66bb      	str	r3, [r7, #104]	; 0x68
 8011698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801169a:	2bff      	cmp	r3, #255	; 0xff
 801169c:	d905      	bls.n	80116aa <_tx_thread_system_suspend+0x1f2>
 801169e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116a0:	0a1b      	lsrs	r3, r3, #8
 80116a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80116a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116a6:	3308      	adds	r3, #8
 80116a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80116aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116ac:	2b0f      	cmp	r3, #15
 80116ae:	d905      	bls.n	80116bc <_tx_thread_system_suspend+0x204>
 80116b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116b2:	091b      	lsrs	r3, r3, #4
 80116b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80116b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116b8:	3304      	adds	r3, #4
 80116ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80116bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116be:	2b03      	cmp	r3, #3
 80116c0:	d905      	bls.n	80116ce <_tx_thread_system_suspend+0x216>
 80116c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116c4:	089b      	lsrs	r3, r3, #2
 80116c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80116c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116ca:	3302      	adds	r3, #2
 80116cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80116ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116d0:	085b      	lsrs	r3, r3, #1
 80116d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116d4:	18d3      	adds	r3, r2, r3
 80116d6:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80116d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116dc:	18d2      	adds	r2, r2, r3
 80116de:	4b37      	ldr	r3, [pc, #220]	; (80117bc <_tx_thread_system_suspend+0x304>)
 80116e0:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80116e2:	4b37      	ldr	r3, [pc, #220]	; (80117c0 <_tx_thread_system_suspend+0x308>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d12b      	bne.n	8011744 <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80116ec:	4b33      	ldr	r3, [pc, #204]	; (80117bc <_tx_thread_system_suspend+0x304>)
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	4b30      	ldr	r3, [pc, #192]	; (80117b4 <_tx_thread_system_suspend+0x2fc>)
 80116f2:	0092      	lsls	r2, r2, #2
 80116f4:	58d2      	ldr	r2, [r2, r3]
 80116f6:	4b32      	ldr	r3, [pc, #200]	; (80117c0 <_tx_thread_system_suspend+0x308>)
 80116f8:	601a      	str	r2, [r3, #0]
 80116fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80116fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011700:	f383 8810 	msr	PRIMASK, r3
}
 8011704:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011706:	4b2a      	ldr	r3, [pc, #168]	; (80117b0 <_tx_thread_system_suspend+0x2f8>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (combined_flags == ((ULONG) 0))
 801170c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d144      	bne.n	801179c <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011712:	4b2c      	ldr	r3, [pc, #176]	; (80117c4 <_tx_thread_system_suspend+0x30c>)
 8011714:	2280      	movs	r2, #128	; 0x80
 8011716:	0552      	lsls	r2, r2, #21
 8011718:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801171a:	f3ef 8305 	mrs	r3, IPSR
 801171e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8011720:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10c      	bne.n	8011740 <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011726:	f3ef 8310 	mrs	r3, PRIMASK
 801172a:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 801172e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011730:	b662      	cpsie	i
}
 8011732:	46c0      	nop			; (mov r8, r8)
 8011734:	6a3b      	ldr	r3, [r7, #32]
 8011736:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	f383 8810 	msr	PRIMASK, r3
}
 801173e:	46c0      	nop			; (mov r8, r8)
}
 8011740:	46c0      	nop			; (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8011742:	e02b      	b.n	801179c <_tx_thread_system_suspend+0x2e4>
 8011744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011746:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011748:	69bb      	ldr	r3, [r7, #24]
 801174a:	f383 8810 	msr	PRIMASK, r3
}
 801174e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011750:	4b1b      	ldr	r3, [pc, #108]	; (80117c0 <_tx_thread_system_suspend+0x308>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011756:	429a      	cmp	r2, r3
 8011758:	d022      	beq.n	80117a0 <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801175a:	4b15      	ldr	r3, [pc, #84]	; (80117b0 <_tx_thread_system_suspend+0x2f8>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (combined_flags == ((ULONG) 0))
 8011760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011762:	2b00      	cmp	r3, #0
 8011764:	d11c      	bne.n	80117a0 <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011766:	4b17      	ldr	r3, [pc, #92]	; (80117c4 <_tx_thread_system_suspend+0x30c>)
 8011768:	2280      	movs	r2, #128	; 0x80
 801176a:	0552      	lsls	r2, r2, #21
 801176c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801176e:	f3ef 8305 	mrs	r3, IPSR
 8011772:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011774:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8011776:	2b00      	cmp	r3, #0
 8011778:	d10c      	bne.n	8011794 <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801177a:	f3ef 8310 	mrs	r3, PRIMASK
 801177e:	613b      	str	r3, [r7, #16]
    return(primask_value);
 8011780:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 8011782:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011784:	b662      	cpsie	i
}
 8011786:	46c0      	nop			; (mov r8, r8)
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	f383 8810 	msr	PRIMASK, r3
}
 8011792:	46c0      	nop			; (mov r8, r8)
}
 8011794:	46c0      	nop			; (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8011796:	e003      	b.n	80117a0 <_tx_thread_system_suspend+0x2e8>
                return;
 8011798:	46c0      	nop			; (mov r8, r8)
 801179a:	e002      	b.n	80117a2 <_tx_thread_system_suspend+0x2ea>
            return;
 801179c:	46c0      	nop			; (mov r8, r8)
 801179e:	e000      	b.n	80117a2 <_tx_thread_system_suspend+0x2ea>
    return;
 80117a0:	46c0      	nop			; (mov r8, r8)
}
 80117a2:	46bd      	mov	sp, r7
 80117a4:	b01c      	add	sp, #112	; 0x70
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20018c90 	.word	0x20018c90
 80117ac:	20019294 	.word	0x20019294
 80117b0:	20018d28 	.word	0x20018d28
 80117b4:	20018ca8 	.word	0x20018ca8
 80117b8:	20018ca0 	.word	0x20018ca0
 80117bc:	20018ca4 	.word	0x20018ca4
 80117c0:	20018c94 	.word	0x20018c94
 80117c4:	e000ed04 	.word	0xe000ed04

080117c8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80117ce:	4b1f      	ldr	r3, [pc, #124]	; (801184c <_tx_thread_time_slice+0x84>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80117d4:	f3ef 8310 	mrs	r3, PRIMASK
 80117d8:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80117da:	b672      	cpsid	i
    return(primask_value);
 80117dc:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80117de:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80117e0:	4b1b      	ldr	r3, [pc, #108]	; (8011850 <_tx_thread_time_slice+0x88>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d024      	beq.n	8011836 <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d120      	bne.n	8011836 <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	69da      	ldr	r2, [r3, #28]
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	699a      	ldr	r2, [r3, #24]
 8011800:	4b14      	ldr	r3, [pc, #80]	; (8011854 <_tx_thread_time_slice+0x8c>)
 8011802:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6a1b      	ldr	r3, [r3, #32]
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	429a      	cmp	r2, r3
 801180c:	d013      	beq.n	8011836 <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011816:	429a      	cmp	r2, r3
 8011818:	d10d      	bne.n	8011836 <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6a19      	ldr	r1, [r3, #32]
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <_tx_thread_time_slice+0x90>)
 8011824:	0092      	lsls	r2, r2, #2
 8011826:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011828:	4b0c      	ldr	r3, [pc, #48]	; (801185c <_tx_thread_time_slice+0x94>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <_tx_thread_time_slice+0x90>)
 801182e:	0092      	lsls	r2, r2, #2
 8011830:	58d2      	ldr	r2, [r2, r3]
 8011832:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <_tx_thread_time_slice+0x98>)
 8011834:	601a      	str	r2, [r3, #0]
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	f383 8810 	msr	PRIMASK, r3
}
 8011840:	46c0      	nop			; (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8011842:	46c0      	nop			; (mov r8, r8)
 8011844:	46bd      	mov	sp, r7
 8011846:	b004      	add	sp, #16
 8011848:	bd80      	pop	{r7, pc}
 801184a:	46c0      	nop			; (mov r8, r8)
 801184c:	20018c90 	.word	0x20018c90
 8011850:	20018d38 	.word	0x20018d38
 8011854:	20019294 	.word	0x20019294
 8011858:	20018ca8 	.word	0x20018ca8
 801185c:	20018ca4 	.word	0x20018ca4
 8011860:	20018c94 	.word	0x20018c94

08011864 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b08a      	sub	sp, #40	; 0x28
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011870:	f3ef 8310 	mrs	r3, PRIMASK
 8011874:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011876:	b672      	cpsid	i
    return(primask_value);
 8011878:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 801187a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011880:	2b04      	cmp	r3, #4
 8011882:	d10f      	bne.n	80118a4 <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8011884:	4b14      	ldr	r3, [pc, #80]	; (80118d8 <_tx_thread_timeout+0x74>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	1c5a      	adds	r2, r3, #1
 801188a:	4b13      	ldr	r3, [pc, #76]	; (80118d8 <_tx_thread_timeout+0x74>)
 801188c:	601a      	str	r2, [r3, #0]
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	f383 8810 	msr	PRIMASK, r3
}
 8011898:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	0018      	movs	r0, r3
 801189e:	f7ff fd0b 	bl	80112b8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80118a2:	e014      	b.n	80118ce <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118a8:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	22ac      	movs	r2, #172	; 0xac
 80118ae:	589b      	ldr	r3, [r3, r2]
 80118b0:	61bb      	str	r3, [r7, #24]
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f383 8810 	msr	PRIMASK, r3
}
 80118bc:	46c0      	nop			; (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d004      	beq.n	80118ce <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80118c4:	69b9      	ldr	r1, [r7, #24]
 80118c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	0010      	movs	r0, r2
 80118cc:	4798      	blx	r3
}
 80118ce:	46c0      	nop			; (mov r8, r8)
 80118d0:	46bd      	mov	sp, r7
 80118d2:	b00a      	add	sp, #40	; 0x28
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	46c0      	nop			; (mov r8, r8)
 80118d8:	20018d28 	.word	0x20018d28

080118dc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80118e2:	f3ef 8310 	mrs	r3, PRIMASK
 80118e6:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80118e8:	b672      	cpsid	i
    return(primask_value);
 80118ea:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80118ec:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80118ee:	4b09      	ldr	r3, [pc, #36]	; (8011914 <_tx_timer_expiration_process+0x38>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	1c5a      	adds	r2, r3, #1
 80118f4:	4b07      	ldr	r3, [pc, #28]	; (8011914 <_tx_timer_expiration_process+0x38>)
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	f383 8810 	msr	PRIMASK, r3
}
 8011902:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8011904:	4b04      	ldr	r3, [pc, #16]	; (8011918 <_tx_timer_expiration_process+0x3c>)
 8011906:	0018      	movs	r0, r3
 8011908:	f7ff fcd6 	bl	80112b8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801190c:	46c0      	nop			; (mov r8, r8)
 801190e:	46bd      	mov	sp, r7
 8011910:	b004      	add	sp, #16
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20018d28 	.word	0x20018d28
 8011918:	20018dd8 	.word	0x20018dd8

0801191c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801191e:	46ce      	mov	lr, r9
 8011920:	4647      	mov	r7, r8
 8011922:	b580      	push	{r7, lr}
 8011924:	b08d      	sub	sp, #52	; 0x34
 8011926:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8011928:	4b39      	ldr	r3, [pc, #228]	; (8011a10 <_tx_timer_initialize+0xf4>)
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801192e:	4b39      	ldr	r3, [pc, #228]	; (8011a14 <_tx_timer_initialize+0xf8>)
 8011930:	2200      	movs	r2, #0
 8011932:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011934:	4b38      	ldr	r3, [pc, #224]	; (8011a18 <_tx_timer_initialize+0xfc>)
 8011936:	2200      	movs	r2, #0
 8011938:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801193a:	4b38      	ldr	r3, [pc, #224]	; (8011a1c <_tx_timer_initialize+0x100>)
 801193c:	2200      	movs	r2, #0
 801193e:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011940:	4b37      	ldr	r3, [pc, #220]	; (8011a20 <_tx_timer_initialize+0x104>)
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011946:	4b37      	ldr	r3, [pc, #220]	; (8011a24 <_tx_timer_initialize+0x108>)
 8011948:	617b      	str	r3, [r7, #20]
 801194a:	230f      	movs	r3, #15
 801194c:	18fb      	adds	r3, r7, r3
 801194e:	2200      	movs	r2, #0
 8011950:	701a      	strb	r2, [r3, #0]
 8011952:	2380      	movs	r3, #128	; 0x80
 8011954:	60bb      	str	r3, [r7, #8]
 8011956:	2300      	movs	r3, #0
 8011958:	613b      	str	r3, [r7, #16]
 801195a:	e009      	b.n	8011970 <_tx_timer_initialize+0x54>
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	1c5a      	adds	r2, r3, #1
 8011960:	617a      	str	r2, [r7, #20]
 8011962:	220f      	movs	r2, #15
 8011964:	18ba      	adds	r2, r7, r2
 8011966:	7812      	ldrb	r2, [r2, #0]
 8011968:	701a      	strb	r2, [r3, #0]
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	3301      	adds	r3, #1
 801196e:	613b      	str	r3, [r7, #16]
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	429a      	cmp	r2, r3
 8011976:	d3f1      	bcc.n	801195c <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011978:	4b2b      	ldr	r3, [pc, #172]	; (8011a28 <_tx_timer_initialize+0x10c>)
 801197a:	4a2a      	ldr	r2, [pc, #168]	; (8011a24 <_tx_timer_initialize+0x108>)
 801197c:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801197e:	4b2b      	ldr	r3, [pc, #172]	; (8011a2c <_tx_timer_initialize+0x110>)
 8011980:	4a28      	ldr	r2, [pc, #160]	; (8011a24 <_tx_timer_initialize+0x108>)
 8011982:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8011984:	4b2a      	ldr	r3, [pc, #168]	; (8011a30 <_tx_timer_initialize+0x114>)
 8011986:	4a2b      	ldr	r2, [pc, #172]	; (8011a34 <_tx_timer_initialize+0x118>)
 8011988:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801198a:	4b29      	ldr	r3, [pc, #164]	; (8011a30 <_tx_timer_initialize+0x114>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	1d1a      	adds	r2, r3, #4
 8011990:	4b27      	ldr	r3, [pc, #156]	; (8011a30 <_tx_timer_initialize+0x114>)
 8011992:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8011994:	4b28      	ldr	r3, [pc, #160]	; (8011a38 <_tx_timer_initialize+0x11c>)
 8011996:	4a29      	ldr	r2, [pc, #164]	; (8011a3c <_tx_timer_initialize+0x120>)
 8011998:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801199a:	4b29      	ldr	r3, [pc, #164]	; (8011a40 <_tx_timer_initialize+0x124>)
 801199c:	2280      	movs	r2, #128	; 0x80
 801199e:	00d2      	lsls	r2, r2, #3
 80119a0:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80119a2:	4b28      	ldr	r3, [pc, #160]	; (8011a44 <_tx_timer_initialize+0x128>)
 80119a4:	2200      	movs	r2, #0
 80119a6:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80119a8:	4b23      	ldr	r3, [pc, #140]	; (8011a38 <_tx_timer_initialize+0x11c>)
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	4b24      	ldr	r3, [pc, #144]	; (8011a40 <_tx_timer_initialize+0x124>)
 80119ae:	6819      	ldr	r1, [r3, #0]
 80119b0:	4b24      	ldr	r3, [pc, #144]	; (8011a44 <_tx_timer_initialize+0x128>)
 80119b2:	6818      	ldr	r0, [r3, #0]
 80119b4:	4b23      	ldr	r3, [pc, #140]	; (8011a44 <_tx_timer_initialize+0x128>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4699      	mov	r9, r3
 80119ba:	4c23      	ldr	r4, [pc, #140]	; (8011a48 <_tx_timer_initialize+0x12c>)
 80119bc:	46a0      	mov	r8, r4
 80119be:	4e23      	ldr	r6, [pc, #140]	; (8011a4c <_tx_timer_initialize+0x130>)
 80119c0:	4d23      	ldr	r5, [pc, #140]	; (8011a50 <_tx_timer_initialize+0x134>)
 80119c2:	4c24      	ldr	r4, [pc, #144]	; (8011a54 <_tx_timer_initialize+0x138>)
 80119c4:	2300      	movs	r3, #0
 80119c6:	469c      	mov	ip, r3
 80119c8:	4663      	mov	r3, ip
 80119ca:	9305      	str	r3, [sp, #20]
 80119cc:	2300      	movs	r3, #0
 80119ce:	469c      	mov	ip, r3
 80119d0:	4663      	mov	r3, ip
 80119d2:	9304      	str	r3, [sp, #16]
 80119d4:	464b      	mov	r3, r9
 80119d6:	9303      	str	r3, [sp, #12]
 80119d8:	9002      	str	r0, [sp, #8]
 80119da:	9101      	str	r1, [sp, #4]
 80119dc:	9200      	str	r2, [sp, #0]
 80119de:	4643      	mov	r3, r8
 80119e0:	0032      	movs	r2, r6
 80119e2:	0029      	movs	r1, r5
 80119e4:	0020      	movs	r0, r4
 80119e6:	f7ff f8af 	bl	8010b48 <_tx_thread_create>
 80119ea:	0003      	movs	r3, r0
 80119ec:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1d9      	bne.n	80119a8 <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80119f4:	4b18      	ldr	r3, [pc, #96]	; (8011a58 <_tx_timer_initialize+0x13c>)
 80119f6:	2200      	movs	r2, #0
 80119f8:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80119fa:	4b18      	ldr	r3, [pc, #96]	; (8011a5c <_tx_timer_initialize+0x140>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011a00:	46c0      	nop			; (mov r8, r8)
 8011a02:	46bd      	mov	sp, r7
 8011a04:	b007      	add	sp, #28
 8011a06:	bcc0      	pop	{r6, r7}
 8011a08:	46b9      	mov	r9, r7
 8011a0a:	46b0      	mov	r8, r6
 8011a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0e:	46c0      	nop			; (mov r8, r8)
 8011a10:	20018d34 	.word	0x20018d34
 8011a14:	20019294 	.word	0x20019294
 8011a18:	20018d38 	.word	0x20018d38
 8011a1c:	20018dc8 	.word	0x20018dc8
 8011a20:	20018dd4 	.word	0x20018dd4
 8011a24:	20018d3c 	.word	0x20018d3c
 8011a28:	20018dbc 	.word	0x20018dbc
 8011a2c:	20018dc4 	.word	0x20018dc4
 8011a30:	20018dc0 	.word	0x20018dc0
 8011a34:	20018db8 	.word	0x20018db8
 8011a38:	20018e88 	.word	0x20018e88
 8011a3c:	20018e94 	.word	0x20018e94
 8011a40:	20018e8c 	.word	0x20018e8c
 8011a44:	20018e90 	.word	0x20018e90
 8011a48:	4154494d 	.word	0x4154494d
 8011a4c:	08011b89 	.word	0x08011b89
 8011a50:	08018864 	.word	0x08018864
 8011a54:	20018dd8 	.word	0x20018dd8
 8011a58:	20018dcc 	.word	0x20018dcc
 8011a5c:	20018dd0 	.word	0x20018dd0

08011a60 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b088      	sub	sp, #32
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d049      	beq.n	8011b08 <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	3301      	adds	r3, #1
 8011a78:	d046      	beq.n	8011b08 <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	699b      	ldr	r3, [r3, #24]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d142      	bne.n	8011b08 <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	2b20      	cmp	r3, #32
 8011a86:	d902      	bls.n	8011a8e <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011a88:	231f      	movs	r3, #31
 8011a8a:	61bb      	str	r3, [r7, #24]
 8011a8c:	e002      	b.n	8011a94 <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011a94:	4b1e      	ldr	r3, [pc, #120]	; (8011b10 <_tx_timer_system_activate+0xb0>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	18d3      	adds	r3, r2, r3
 8011a9e:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8011aa0:	4b1c      	ldr	r3, [pc, #112]	; (8011b14 <_tx_timer_system_activate+0xb4>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	69fa      	ldr	r2, [r7, #28]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d30b      	bcc.n	8011ac2 <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011aaa:	4b1a      	ldr	r3, [pc, #104]	; (8011b14 <_tx_timer_system_activate+0xb4>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	69fa      	ldr	r2, [r7, #28]
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	109b      	asrs	r3, r3, #2
 8011ab4:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8011ab6:	4b18      	ldr	r3, [pc, #96]	; (8011b18 <_tx_timer_system_activate+0xb8>)
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	18d3      	adds	r3, r2, r3
 8011ac0:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d109      	bne.n	8011ade <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	e011      	b.n	8011b02 <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	69fa      	ldr	r2, [r7, #28]
 8011b06:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8011b08:	46c0      	nop			; (mov r8, r8)
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	b008      	add	sp, #32
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	20018dc4 	.word	0x20018dc4
 8011b14:	20018dc0 	.word	0x20018dc0
 8011b18:	20018dbc 	.word	0x20018dbc

08011b1c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d026      	beq.n	8011b7e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	691b      	ldr	r3, [r3, #16]
 8011b34:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d108      	bne.n	8011b50 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d117      	bne.n	8011b78 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	601a      	str	r2, [r3, #0]
 8011b4e:	e013      	b.n	8011b78 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	695b      	ldr	r3, [r3, #20]
 8011b54:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	68fa      	ldr	r2, [r7, #12]
 8011b5a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	693a      	ldr	r2, [r7, #16]
 8011b60:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d105      	bne.n	8011b78 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	693a      	ldr	r2, [r7, #16]
 8011b76:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	619a      	str	r2, [r3, #24]
    }
}
 8011b7e:	46c0      	nop			; (mov r8, r8)
 8011b80:	46bd      	mov	sp, r7
 8011b82:	b006      	add	sp, #24
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b094      	sub	sp, #80	; 0x50
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8011b90:	2300      	movs	r3, #0
 8011b92:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4a70      	ldr	r2, [pc, #448]	; (8011d58 <_tx_timer_thread_entry+0x1d0>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d000      	beq.n	8011b9e <_tx_timer_thread_entry+0x16>
 8011b9c:	e0d8      	b.n	8011d50 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011ba4:	b672      	cpsid	i
    return(primask_value);
 8011ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8011ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8011baa:	4b6c      	ldr	r3, [pc, #432]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d003      	beq.n	8011bc0 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	220c      	movs	r2, #12
 8011bbc:	18ba      	adds	r2, r7, r2
 8011bbe:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8011bc0:	4b66      	ldr	r3, [pc, #408]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8011bc8:	4b64      	ldr	r3, [pc, #400]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	1d1a      	adds	r2, r3, #4
 8011bce:	4b63      	ldr	r3, [pc, #396]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011bd0:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8011bd2:	4b62      	ldr	r3, [pc, #392]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	4b62      	ldr	r3, [pc, #392]	; (8011d60 <_tx_timer_thread_entry+0x1d8>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d103      	bne.n	8011be6 <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8011bde:	4b61      	ldr	r3, [pc, #388]	; (8011d64 <_tx_timer_thread_entry+0x1dc>)
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	4b5e      	ldr	r3, [pc, #376]	; (8011d5c <_tx_timer_thread_entry+0x1d4>)
 8011be4:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8011be6:	4b60      	ldr	r3, [pc, #384]	; (8011d68 <_tx_timer_thread_entry+0x1e0>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bee:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf2:	f383 8810 	msr	PRIMASK, r3
}
 8011bf6:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8011bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011bfe:	b672      	cpsid	i
    return(primask_value);
 8011c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011c02:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8011c04:	e07d      	b.n	8011d02 <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011c10:	2300      	movs	r3, #0
 8011c12:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8011c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d102      	bne.n	8011c22 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	60fb      	str	r3, [r7, #12]
 8011c20:	e00e      	b.n	8011c40 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c24:	695b      	ldr	r3, [r3, #20]
 8011c26:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c2c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c32:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	220c      	movs	r2, #12
 8011c38:	18ba      	adds	r2, r7, r2
 8011c3a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8011c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8011c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b20      	cmp	r3, #32
 8011c46:	d911      	bls.n	8011c6c <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8011c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	3b20      	subs	r3, #32
 8011c4e:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8011c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c52:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8011c54:	2300      	movs	r3, #0
 8011c56:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c5a:	2208      	movs	r2, #8
 8011c5c:	18ba      	adds	r2, r7, r2
 8011c5e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c64:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8011c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c68:	60bb      	str	r3, [r7, #8]
 8011c6a:	e01a      	b.n	8011ca2 <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8011c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8011c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8011c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d009      	beq.n	8011c9c <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c8a:	2208      	movs	r2, #8
 8011c8c:	18ba      	adds	r2, r7, r2
 8011c8e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8011c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c94:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8011c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c98:	60bb      	str	r3, [r7, #8]
 8011c9a:	e002      	b.n	8011ca2 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8011c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8011ca2:	4b32      	ldr	r3, [pc, #200]	; (8011d6c <_tx_timer_thread_entry+0x1e4>)
 8011ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ca6:	601a      	str	r2, [r3, #0]
 8011ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	f383 8810 	msr	PRIMASK, r3
}
 8011cb2:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8011cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d003      	beq.n	8011cc2 <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 8011cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cbe:	0010      	movs	r0, r2
 8011cc0:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8011cc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011cc8:	b672      	cpsid	i
    return(primask_value);
 8011cca:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011cce:	4b27      	ldr	r3, [pc, #156]	; (8011d6c <_tx_timer_thread_entry+0x1e4>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d106      	bne.n	8011cea <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8011cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cde:	2200      	movs	r2, #0
 8011ce0:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ce4:	0018      	movs	r0, r3
 8011ce6:	f7ff febb 	bl	8011a60 <_tx_timer_system_activate>
 8011cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	f383 8810 	msr	PRIMASK, r3
}
 8011cf4:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8011cfa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011cfc:	b672      	cpsid	i
    return(primask_value);
 8011cfe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011d00:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d000      	beq.n	8011d0a <_tx_timer_thread_entry+0x182>
 8011d08:	e77d      	b.n	8011c06 <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8011d0a:	4b17      	ldr	r3, [pc, #92]	; (8011d68 <_tx_timer_thread_entry+0x1e0>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d117      	bne.n	8011d42 <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8011d12:	4b17      	ldr	r3, [pc, #92]	; (8011d70 <_tx_timer_thread_entry+0x1e8>)
 8011d14:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d18:	2203      	movs	r2, #3
 8011d1a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d1e:	2201      	movs	r2, #1
 8011d20:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011d22:	4b14      	ldr	r3, [pc, #80]	; (8011d74 <_tx_timer_thread_entry+0x1ec>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	1c5a      	adds	r2, r3, #1
 8011d28:	4b12      	ldr	r3, [pc, #72]	; (8011d74 <_tx_timer_thread_entry+0x1ec>)
 8011d2a:	601a      	str	r2, [r3, #0]
 8011d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d2e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	f383 8810 	msr	PRIMASK, r3
}
 8011d36:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d3a:	0018      	movs	r0, r3
 8011d3c:	f7ff fbbc 	bl	80114b8 <_tx_thread_system_suspend>
 8011d40:	e72d      	b.n	8011b9e <_tx_timer_thread_entry+0x16>
 8011d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d44:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f383 8810 	msr	PRIMASK, r3
}
 8011d4c:	46c0      	nop			; (mov r8, r8)
            TX_DISABLE
 8011d4e:	e726      	b.n	8011b9e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8011d50:	46c0      	nop			; (mov r8, r8)
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b014      	add	sp, #80	; 0x50
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	4154494d 	.word	0x4154494d
 8011d5c:	20018dc4 	.word	0x20018dc4
 8011d60:	20018dc0 	.word	0x20018dc0
 8011d64:	20018dbc 	.word	0x20018dbc
 8011d68:	20018dc8 	.word	0x20018dc8
 8011d6c:	20018dd4 	.word	0x20018dd4
 8011d70:	20018dd8 	.word	0x20018dd8
 8011d74:	20018d28 	.word	0x20018d28

08011d78 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b08a      	sub	sp, #40	; 0x28
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011d86:	2300      	movs	r3, #0
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d102      	bne.n	8011d96 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011d90:	2302      	movs	r3, #2
 8011d92:	627b      	str	r3, [r7, #36]	; 0x24
 8011d94:	e028      	b.n	8011de8 <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4a2d      	ldr	r2, [pc, #180]	; (8011e50 <_txe_byte_allocate+0xd8>)
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d002      	beq.n	8011da6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011da0:	2302      	movs	r3, #2
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
 8011da4:	e020      	b.n	8011de8 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d102      	bne.n	8011db2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011dac:	2303      	movs	r3, #3
 8011dae:	627b      	str	r3, [r7, #36]	; 0x24
 8011db0:	e01a      	b.n	8011de8 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d102      	bne.n	8011dbe <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011db8:	2305      	movs	r3, #5
 8011dba:	627b      	str	r3, [r7, #36]	; 0x24
 8011dbc:	e014      	b.n	8011de8 <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	69db      	ldr	r3, [r3, #28]
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d902      	bls.n	8011dce <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8011dc8:	2305      	movs	r3, #5
 8011dca:	627b      	str	r3, [r7, #36]	; 0x24
 8011dcc:	e00c      	b.n	8011de8 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d009      	beq.n	8011de8 <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011dd4:	f3ef 8305 	mrs	r3, IPSR
 8011dd8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011dda:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011ddc:	4b1d      	ldr	r3, [pc, #116]	; (8011e54 <_txe_byte_allocate+0xdc>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4313      	orrs	r3, r2
 8011de2:	d001      	beq.n	8011de8 <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011de4:	2304      	movs	r3, #4
 8011de6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8011de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d108      	bne.n	8011e00 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011dee:	4b1a      	ldr	r3, [pc, #104]	; (8011e58 <_txe_byte_allocate+0xe0>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8011df4:	6a3a      	ldr	r2, [r7, #32]
 8011df6:	4b19      	ldr	r3, [pc, #100]	; (8011e5c <_txe_byte_allocate+0xe4>)
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d101      	bne.n	8011e00 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011dfc:	2313      	movs	r3, #19
 8011dfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d113      	bne.n	8011e2e <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e06:	f3ef 8305 	mrs	r3, IPSR
 8011e0a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011e0c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011e0e:	4b11      	ldr	r3, [pc, #68]	; (8011e54 <_txe_byte_allocate+0xdc>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	d00b      	beq.n	8011e2e <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e16:	f3ef 8305 	mrs	r3, IPSR
 8011e1a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011e1c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011e1e:	4b0d      	ldr	r3, [pc, #52]	; (8011e54 <_txe_byte_allocate+0xdc>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	4313      	orrs	r3, r2
 8011e24:	4a0e      	ldr	r2, [pc, #56]	; (8011e60 <_txe_byte_allocate+0xe8>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d801      	bhi.n	8011e2e <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011e2a:	2313      	movs	r3, #19
 8011e2c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d107      	bne.n	8011e44 <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	68b9      	ldr	r1, [r7, #8]
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	f7fc fae2 	bl	800e404 <_tx_byte_allocate>
 8011e40:	0003      	movs	r3, r0
 8011e42:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e46:	0018      	movs	r0, r3
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	b00a      	add	sp, #40	; 0x28
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	46c0      	nop			; (mov r8, r8)
 8011e50:	42595445 	.word	0x42595445
 8011e54:	20000010 	.word	0x20000010
 8011e58:	20018c90 	.word	0x20018c90
 8011e5c:	20018dd8 	.word	0x20018dd8
 8011e60:	f0f0f0ef 	.word	0xf0f0f0ef

08011e64 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b090      	sub	sp, #64	; 0x40
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
 8011e70:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011e72:	2300      	movs	r3, #0
 8011e74:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d102      	bne.n	8011e82 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e80:	e070      	b.n	8011f64 <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8011e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e84:	2b34      	cmp	r3, #52	; 0x34
 8011e86:	d002      	beq.n	8011e8e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011e88:	2302      	movs	r3, #2
 8011e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e8c:	e06a      	b.n	8011f64 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011e94:	b672      	cpsid	i
    return(primask_value);
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011e98:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011e9a:	4b3a      	ldr	r3, [pc, #232]	; (8011f84 <_txe_byte_pool_create+0x120>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	4b38      	ldr	r3, [pc, #224]	; (8011f84 <_txe_byte_pool_create+0x120>)
 8011ea2:	601a      	str	r2, [r3, #0]
 8011ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eaa:	f383 8810 	msr	PRIMASK, r3
}
 8011eae:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8011eb0:	4b35      	ldr	r3, [pc, #212]	; (8011f88 <_txe_byte_pool_create+0x124>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011eba:	e009      	b.n	8011ed0 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d00b      	beq.n	8011edc <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8011eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ecc:	3301      	adds	r3, #1
 8011ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ed0:	4b2e      	ldr	r3, [pc, #184]	; (8011f8c <_txe_byte_pool_create+0x128>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d3f0      	bcc.n	8011ebc <_txe_byte_pool_create+0x58>
 8011eda:	e000      	b.n	8011ede <_txe_byte_pool_create+0x7a>
                break;
 8011edc:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011ede:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011ee4:	b672      	cpsid	i
    return(primask_value);
 8011ee6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011ee8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011eea:	4b26      	ldr	r3, [pc, #152]	; (8011f84 <_txe_byte_pool_create+0x120>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	1e5a      	subs	r2, r3, #1
 8011ef0:	4b24      	ldr	r3, [pc, #144]	; (8011f84 <_txe_byte_pool_create+0x120>)
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ef8:	6a3b      	ldr	r3, [r7, #32]
 8011efa:	f383 8810 	msr	PRIMASK, r3
}
 8011efe:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011f00:	f7ff f9a2 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8011f04:	68fa      	ldr	r2, [r7, #12]
 8011f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d102      	bne.n	8011f12 <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8011f0c:	2302      	movs	r3, #2
 8011f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f10:	e028      	b.n	8011f64 <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d102      	bne.n	8011f1e <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f1c:	e022      	b.n	8011f64 <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2b63      	cmp	r3, #99	; 0x63
 8011f22:	d802      	bhi.n	8011f2a <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8011f24:	2305      	movs	r3, #5
 8011f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f28:	e01c      	b.n	8011f64 <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011f2a:	4b19      	ldr	r3, [pc, #100]	; (8011f90 <_txe_byte_pool_create+0x12c>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f32:	4b18      	ldr	r3, [pc, #96]	; (8011f94 <_txe_byte_pool_create+0x130>)
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d101      	bne.n	8011f3c <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011f38:	2313      	movs	r3, #19
 8011f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f3c:	f3ef 8305 	mrs	r3, IPSR
 8011f40:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011f42:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011f44:	4b14      	ldr	r3, [pc, #80]	; (8011f98 <_txe_byte_pool_create+0x134>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	d00b      	beq.n	8011f64 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f4c:	f3ef 8305 	mrs	r3, IPSR
 8011f50:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011f52:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011f54:	4b10      	ldr	r3, [pc, #64]	; (8011f98 <_txe_byte_pool_create+0x134>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	4a10      	ldr	r2, [pc, #64]	; (8011f9c <_txe_byte_pool_create+0x138>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d801      	bhi.n	8011f64 <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011f60:	2313      	movs	r3, #19
 8011f62:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d107      	bne.n	8011f7a <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	68b9      	ldr	r1, [r7, #8]
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f7fc fb85 	bl	800e680 <_tx_byte_pool_create>
 8011f76:	0003      	movs	r3, r0
 8011f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8011f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011f7c:	0018      	movs	r0, r3
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	b010      	add	sp, #64	; 0x40
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	20018d28 	.word	0x20018d28
 8011f88:	20018c80 	.word	0x20018c80
 8011f8c:	20018c84 	.word	0x20018c84
 8011f90:	20018c90 	.word	0x20018c90
 8011f94:	20018dd8 	.word	0x20018dd8
 8011f98:	20000010 	.word	0x20000010
 8011f9c:	f0f0f0ef 	.word	0xf0f0f0ef

08011fa0 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b090      	sub	sp, #64	; 0x40
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011fac:	2300      	movs	r3, #0
 8011fae:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d102      	bne.n	8011fbc <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011fb6:	2306      	movs	r3, #6
 8011fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fba:	e064      	b.n	8012086 <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b24      	cmp	r3, #36	; 0x24
 8011fc0:	d002      	beq.n	8011fc8 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011fc2:	2306      	movs	r3, #6
 8011fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fc6:	e05e      	b.n	8012086 <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8011fcc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011fce:	b672      	cpsid	i
    return(primask_value);
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011fd2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011fd4:	4b34      	ldr	r3, [pc, #208]	; (80120a8 <_txe_event_flags_create+0x108>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	1c5a      	adds	r2, r3, #1
 8011fda:	4b33      	ldr	r3, [pc, #204]	; (80120a8 <_txe_event_flags_create+0x108>)
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	f383 8810 	msr	PRIMASK, r3
}
 8011fe8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8011fea:	4b30      	ldr	r3, [pc, #192]	; (80120ac <_txe_event_flags_create+0x10c>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ff4:	e009      	b.n	801200a <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d00b      	beq.n	8012016 <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8011ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012000:	699b      	ldr	r3, [r3, #24]
 8012002:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	3301      	adds	r3, #1
 8012008:	63bb      	str	r3, [r7, #56]	; 0x38
 801200a:	4b29      	ldr	r3, [pc, #164]	; (80120b0 <_txe_event_flags_create+0x110>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012010:	429a      	cmp	r2, r3
 8012012:	d3f0      	bcc.n	8011ff6 <_txe_event_flags_create+0x56>
 8012014:	e000      	b.n	8012018 <_txe_event_flags_create+0x78>
                break;
 8012016:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012018:	f3ef 8310 	mrs	r3, PRIMASK
 801201c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801201e:	b672      	cpsid	i
    return(primask_value);
 8012020:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012022:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012024:	4b20      	ldr	r3, [pc, #128]	; (80120a8 <_txe_event_flags_create+0x108>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	1e5a      	subs	r2, r3, #1
 801202a:	4b1f      	ldr	r3, [pc, #124]	; (80120a8 <_txe_event_flags_create+0x108>)
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012030:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	f383 8810 	msr	PRIMASK, r3
}
 8012038:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801203a:	f7ff f905 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012042:	429a      	cmp	r2, r3
 8012044:	d102      	bne.n	801204c <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8012046:	2306      	movs	r3, #6
 8012048:	63fb      	str	r3, [r7, #60]	; 0x3c
 801204a:	e01c      	b.n	8012086 <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801204c:	4b19      	ldr	r3, [pc, #100]	; (80120b4 <_txe_event_flags_create+0x114>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012054:	4b18      	ldr	r3, [pc, #96]	; (80120b8 <_txe_event_flags_create+0x118>)
 8012056:	429a      	cmp	r2, r3
 8012058:	d101      	bne.n	801205e <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801205a:	2313      	movs	r3, #19
 801205c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801205e:	f3ef 8305 	mrs	r3, IPSR
 8012062:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012064:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012066:	4b15      	ldr	r3, [pc, #84]	; (80120bc <_txe_event_flags_create+0x11c>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4313      	orrs	r3, r2
 801206c:	d00b      	beq.n	8012086 <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801206e:	f3ef 8305 	mrs	r3, IPSR
 8012072:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012074:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012076:	4b11      	ldr	r3, [pc, #68]	; (80120bc <_txe_event_flags_create+0x11c>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4313      	orrs	r3, r2
 801207c:	4a10      	ldr	r2, [pc, #64]	; (80120c0 <_txe_event_flags_create+0x120>)
 801207e:	4293      	cmp	r3, r2
 8012080:	d801      	bhi.n	8012086 <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012082:	2313      	movs	r3, #19
 8012084:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012088:	2b00      	cmp	r3, #0
 801208a:	d107      	bne.n	801209c <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 801208c:	68ba      	ldr	r2, [r7, #8]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	0011      	movs	r1, r2
 8012092:	0018      	movs	r0, r3
 8012094:	f7fc fd26 	bl	800eae4 <_tx_event_flags_create>
 8012098:	0003      	movs	r3, r0
 801209a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 801209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801209e:	0018      	movs	r0, r3
 80120a0:	46bd      	mov	sp, r7
 80120a2:	b010      	add	sp, #64	; 0x40
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	46c0      	nop			; (mov r8, r8)
 80120a8:	20018d28 	.word	0x20018d28
 80120ac:	20018c68 	.word	0x20018c68
 80120b0:	20018c6c 	.word	0x20018c6c
 80120b4:	20018c90 	.word	0x20018c90
 80120b8:	20018dd8 	.word	0x20018dd8
 80120bc:	20000010 	.word	0x20000010
 80120c0:	f0f0f0ef 	.word	0xf0f0f0ef

080120c4 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b08b      	sub	sp, #44	; 0x2c
 80120c8:	af02      	add	r7, sp, #8
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
 80120d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80120d2:	2300      	movs	r3, #0
 80120d4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d102      	bne.n	80120e2 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80120dc:	2306      	movs	r3, #6
 80120de:	61fb      	str	r3, [r7, #28]
 80120e0:	e024      	b.n	801212c <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	4a1f      	ldr	r2, [pc, #124]	; (8012164 <_txe_event_flags_get+0xa0>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d002      	beq.n	80120f2 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80120ec:	2306      	movs	r3, #6
 80120ee:	61fb      	str	r3, [r7, #28]
 80120f0:	e01c      	b.n	801212c <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d102      	bne.n	80120fe <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80120f8:	2303      	movs	r3, #3
 80120fa:	61fb      	str	r3, [r7, #28]
 80120fc:	e016      	b.n	801212c <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80120fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012100:	2b00      	cmp	r3, #0
 8012102:	d013      	beq.n	801212c <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012104:	f3ef 8305 	mrs	r3, IPSR
 8012108:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801210a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801210c:	4b16      	ldr	r3, [pc, #88]	; (8012168 <_txe_event_flags_get+0xa4>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4313      	orrs	r3, r2
 8012112:	d002      	beq.n	801211a <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012114:	2304      	movs	r3, #4
 8012116:	61fb      	str	r3, [r7, #28]
 8012118:	e008      	b.n	801212c <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801211a:	4b14      	ldr	r3, [pc, #80]	; (801216c <_txe_event_flags_get+0xa8>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012120:	69ba      	ldr	r2, [r7, #24]
 8012122:	4b13      	ldr	r3, [pc, #76]	; (8012170 <_txe_event_flags_get+0xac>)
 8012124:	429a      	cmp	r2, r3
 8012126:	d101      	bne.n	801212c <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012128:	2304      	movs	r3, #4
 801212a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d104      	bne.n	801213c <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b03      	cmp	r3, #3
 8012136:	d901      	bls.n	801213c <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8012138:	2308      	movs	r3, #8
 801213a:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d10a      	bne.n	8012158 <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8012142:	683c      	ldr	r4, [r7, #0]
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	68b9      	ldr	r1, [r7, #8]
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	0023      	movs	r3, r4
 8012150:	f7fc fd28 	bl	800eba4 <_tx_event_flags_get>
 8012154:	0003      	movs	r3, r0
 8012156:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8012158:	69fb      	ldr	r3, [r7, #28]
}
 801215a:	0018      	movs	r0, r3
 801215c:	46bd      	mov	sp, r7
 801215e:	b009      	add	sp, #36	; 0x24
 8012160:	bd90      	pop	{r4, r7, pc}
 8012162:	46c0      	nop			; (mov r8, r8)
 8012164:	4456444e 	.word	0x4456444e
 8012168:	20000010 	.word	0x20000010
 801216c:	20018c90 	.word	0x20018c90
 8012170:	20018dd8 	.word	0x20018dd8

08012174 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012180:	2300      	movs	r3, #0
 8012182:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d102      	bne.n	8012190 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801218a:	2306      	movs	r3, #6
 801218c:	617b      	str	r3, [r7, #20]
 801218e:	e00f      	b.n	80121b0 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a0e      	ldr	r2, [pc, #56]	; (80121d0 <_txe_event_flags_set+0x5c>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d002      	beq.n	80121a0 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801219a:	2306      	movs	r3, #6
 801219c:	617b      	str	r3, [r7, #20]
 801219e:	e007      	b.n	80121b0 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	d004      	beq.n	80121b0 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d001      	beq.n	80121b0 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 80121ac:	2308      	movs	r3, #8
 80121ae:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d107      	bne.n	80121c6 <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	68b9      	ldr	r1, [r7, #8]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	0018      	movs	r0, r3
 80121be:	f7fc fdd1 	bl	800ed64 <_tx_event_flags_set>
 80121c2:	0003      	movs	r3, r0
 80121c4:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80121c6:	697b      	ldr	r3, [r7, #20]
}
 80121c8:	0018      	movs	r0, r3
 80121ca:	46bd      	mov	sp, r7
 80121cc:	b006      	add	sp, #24
 80121ce:	bd80      	pop	{r7, pc}
 80121d0:	4456444e 	.word	0x4456444e

080121d4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b090      	sub	sp, #64	; 0x40
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80121e2:	2300      	movs	r3, #0
 80121e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d102      	bne.n	80121f2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80121ec:	231c      	movs	r3, #28
 80121ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121f0:	e04f      	b.n	8012292 <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	2b34      	cmp	r3, #52	; 0x34
 80121f6:	d002      	beq.n	80121fe <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80121f8:	231c      	movs	r3, #28
 80121fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121fc:	e049      	b.n	8012292 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80121fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012202:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012204:	b672      	cpsid	i
    return(primask_value);
 8012206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012208:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801220a:	4b3a      	ldr	r3, [pc, #232]	; (80122f4 <_txe_mutex_create+0x120>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	1c5a      	adds	r2, r3, #1
 8012210:	4b38      	ldr	r3, [pc, #224]	; (80122f4 <_txe_mutex_create+0x120>)
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012216:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221a:	f383 8810 	msr	PRIMASK, r3
}
 801221e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8012220:	4b35      	ldr	r3, [pc, #212]	; (80122f8 <_txe_mutex_create+0x124>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8012226:	2300      	movs	r3, #0
 8012228:	63bb      	str	r3, [r7, #56]	; 0x38
 801222a:	e009      	b.n	8012240 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012230:	429a      	cmp	r2, r3
 8012232:	d00b      	beq.n	801224c <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8012234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012236:	6a1b      	ldr	r3, [r3, #32]
 8012238:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223c:	3301      	adds	r3, #1
 801223e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012240:	4b2e      	ldr	r3, [pc, #184]	; (80122fc <_txe_mutex_create+0x128>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012246:	429a      	cmp	r2, r3
 8012248:	d3f0      	bcc.n	801222c <_txe_mutex_create+0x58>
 801224a:	e000      	b.n	801224e <_txe_mutex_create+0x7a>
                break;
 801224c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801224e:	f3ef 8310 	mrs	r3, PRIMASK
 8012252:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012254:	b672      	cpsid	i
    return(primask_value);
 8012256:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012258:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801225a:	4b26      	ldr	r3, [pc, #152]	; (80122f4 <_txe_mutex_create+0x120>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	1e5a      	subs	r2, r3, #1
 8012260:	4b24      	ldr	r3, [pc, #144]	; (80122f4 <_txe_mutex_create+0x120>)
 8012262:	601a      	str	r2, [r3, #0]
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	f383 8810 	msr	PRIMASK, r3
}
 801226e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012270:	f7fe ffea 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012278:	429a      	cmp	r2, r3
 801227a:	d102      	bne.n	8012282 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 801227c:	231c      	movs	r3, #28
 801227e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012280:	e007      	b.n	8012292 <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d004      	beq.n	8012292 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d001      	beq.n	8012292 <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 801228e:	231f      	movs	r3, #31
 8012290:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012294:	2b00      	cmp	r3, #0
 8012296:	d11c      	bne.n	80122d2 <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012298:	4b19      	ldr	r3, [pc, #100]	; (8012300 <_txe_mutex_create+0x12c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801229e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122a0:	4b18      	ldr	r3, [pc, #96]	; (8012304 <_txe_mutex_create+0x130>)
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d101      	bne.n	80122aa <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80122a6:	2313      	movs	r3, #19
 80122a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122aa:	f3ef 8305 	mrs	r3, IPSR
 80122ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80122b0:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80122b2:	4b15      	ldr	r3, [pc, #84]	; (8012308 <_txe_mutex_create+0x134>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	4313      	orrs	r3, r2
 80122b8:	d00b      	beq.n	80122d2 <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122ba:	f3ef 8305 	mrs	r3, IPSR
 80122be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80122c0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80122c2:	4b11      	ldr	r3, [pc, #68]	; (8012308 <_txe_mutex_create+0x134>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4313      	orrs	r3, r2
 80122c8:	4a10      	ldr	r2, [pc, #64]	; (801230c <_txe_mutex_create+0x138>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d801      	bhi.n	80122d2 <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80122ce:	2313      	movs	r3, #19
 80122d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80122d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d107      	bne.n	80122e8 <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	68b9      	ldr	r1, [r7, #8]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	0018      	movs	r0, r3
 80122e0:	f7fd f87c 	bl	800f3dc <_tx_mutex_create>
 80122e4:	0003      	movs	r3, r0
 80122e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80122e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80122ea:	0018      	movs	r0, r3
 80122ec:	46bd      	mov	sp, r7
 80122ee:	b010      	add	sp, #64	; 0x40
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	46c0      	nop			; (mov r8, r8)
 80122f4:	20018d28 	.word	0x20018d28
 80122f8:	20018c70 	.word	0x20018c70
 80122fc:	20018c74 	.word	0x20018c74
 8012300:	20018c90 	.word	0x20018c90
 8012304:	20018dd8 	.word	0x20018dd8
 8012308:	20000010 	.word	0x20000010
 801230c:	f0f0f0ef 	.word	0xf0f0f0ef

08012310 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012318:	2300      	movs	r3, #0
 801231a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d102      	bne.n	8012328 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012322:	231c      	movs	r3, #28
 8012324:	617b      	str	r3, [r7, #20]
 8012326:	e024      	b.n	8012372 <_txe_mutex_delete+0x62>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a13      	ldr	r2, [pc, #76]	; (801237c <_txe_mutex_delete+0x6c>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d002      	beq.n	8012338 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012332:	231c      	movs	r3, #28
 8012334:	617b      	str	r3, [r7, #20]
 8012336:	e01c      	b.n	8012372 <_txe_mutex_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012338:	f3ef 8305 	mrs	r3, IPSR
 801233c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801233e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012340:	4b0f      	ldr	r3, [pc, #60]	; (8012380 <_txe_mutex_delete+0x70>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4313      	orrs	r3, r2
 8012346:	d002      	beq.n	801234e <_txe_mutex_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8012348:	2313      	movs	r3, #19
 801234a:	617b      	str	r3, [r7, #20]
 801234c:	e011      	b.n	8012372 <_txe_mutex_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801234e:	4b0d      	ldr	r3, [pc, #52]	; (8012384 <_txe_mutex_delete+0x74>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8012354:	693a      	ldr	r2, [r7, #16]
 8012356:	4b0c      	ldr	r3, [pc, #48]	; (8012388 <_txe_mutex_delete+0x78>)
 8012358:	429a      	cmp	r2, r3
 801235a:	d101      	bne.n	8012360 <_txe_mutex_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801235c:	2313      	movs	r3, #19
 801235e:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d105      	bne.n	8012372 <_txe_mutex_delete+0x62>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	0018      	movs	r0, r3
 801236a:	f7fd f8a3 	bl	800f4b4 <_tx_mutex_delete>
 801236e:	0003      	movs	r3, r0
 8012370:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8012372:	697b      	ldr	r3, [r7, #20]
}
 8012374:	0018      	movs	r0, r3
 8012376:	46bd      	mov	sp, r7
 8012378:	b006      	add	sp, #24
 801237a:	bd80      	pop	{r7, pc}
 801237c:	4d555445 	.word	0x4d555445
 8012380:	20000010 	.word	0x20000010
 8012384:	20018c90 	.word	0x20018c90
 8012388:	20018dd8 	.word	0x20018dd8

0801238c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b088      	sub	sp, #32
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012396:	2300      	movs	r3, #0
 8012398:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d102      	bne.n	80123a6 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80123a0:	231c      	movs	r3, #28
 80123a2:	61fb      	str	r3, [r7, #28]
 80123a4:	e01e      	b.n	80123e4 <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	4a22      	ldr	r2, [pc, #136]	; (8012434 <_txe_mutex_get+0xa8>)
 80123ac:	4293      	cmp	r3, r2
 80123ae:	d002      	beq.n	80123b6 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80123b0:	231c      	movs	r3, #28
 80123b2:	61fb      	str	r3, [r7, #28]
 80123b4:	e016      	b.n	80123e4 <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d013      	beq.n	80123e4 <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123bc:	f3ef 8305 	mrs	r3, IPSR
 80123c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80123c2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80123c4:	4b1c      	ldr	r3, [pc, #112]	; (8012438 <_txe_mutex_get+0xac>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4313      	orrs	r3, r2
 80123ca:	d002      	beq.n	80123d2 <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80123cc:	2304      	movs	r3, #4
 80123ce:	61fb      	str	r3, [r7, #28]
 80123d0:	e008      	b.n	80123e4 <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80123d2:	4b1a      	ldr	r3, [pc, #104]	; (801243c <_txe_mutex_get+0xb0>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80123d8:	69ba      	ldr	r2, [r7, #24]
 80123da:	4b19      	ldr	r3, [pc, #100]	; (8012440 <_txe_mutex_get+0xb4>)
 80123dc:	429a      	cmp	r2, r3
 80123de:	d101      	bne.n	80123e4 <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80123e0:	2304      	movs	r3, #4
 80123e2:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d113      	bne.n	8012412 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123ea:	f3ef 8305 	mrs	r3, IPSR
 80123ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80123f0:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80123f2:	4b11      	ldr	r3, [pc, #68]	; (8012438 <_txe_mutex_get+0xac>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	4313      	orrs	r3, r2
 80123f8:	d00b      	beq.n	8012412 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123fa:	f3ef 8305 	mrs	r3, IPSR
 80123fe:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012400:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012402:	4b0d      	ldr	r3, [pc, #52]	; (8012438 <_txe_mutex_get+0xac>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	4313      	orrs	r3, r2
 8012408:	4a0e      	ldr	r2, [pc, #56]	; (8012444 <_txe_mutex_get+0xb8>)
 801240a:	4293      	cmp	r3, r2
 801240c:	d801      	bhi.n	8012412 <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801240e:	2313      	movs	r3, #19
 8012410:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d107      	bne.n	8012428 <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8012418:	683a      	ldr	r2, [r7, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	0011      	movs	r1, r2
 801241e:	0018      	movs	r0, r3
 8012420:	f7fd f8ec 	bl	800f5fc <_tx_mutex_get>
 8012424:	0003      	movs	r3, r0
 8012426:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8012428:	69fb      	ldr	r3, [r7, #28]
}
 801242a:	0018      	movs	r0, r3
 801242c:	46bd      	mov	sp, r7
 801242e:	b008      	add	sp, #32
 8012430:	bd80      	pop	{r7, pc}
 8012432:	46c0      	nop			; (mov r8, r8)
 8012434:	4d555445 	.word	0x4d555445
 8012438:	20000010 	.word	0x20000010
 801243c:	20018c90 	.word	0x20018c90
 8012440:	20018dd8 	.word	0x20018dd8
 8012444:	f0f0f0ef 	.word	0xf0f0f0ef

08012448 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012450:	2300      	movs	r3, #0
 8012452:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d102      	bne.n	8012460 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801245a:	231c      	movs	r3, #28
 801245c:	617b      	str	r3, [r7, #20]
 801245e:	e01b      	b.n	8012498 <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4a13      	ldr	r2, [pc, #76]	; (80124b4 <_txe_mutex_put+0x6c>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d002      	beq.n	8012470 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801246a:	231c      	movs	r3, #28
 801246c:	617b      	str	r3, [r7, #20]
 801246e:	e013      	b.n	8012498 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012470:	f3ef 8305 	mrs	r3, IPSR
 8012474:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012476:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012478:	4b0f      	ldr	r3, [pc, #60]	; (80124b8 <_txe_mutex_put+0x70>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4313      	orrs	r3, r2
 801247e:	d00b      	beq.n	8012498 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012480:	f3ef 8305 	mrs	r3, IPSR
 8012484:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012486:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012488:	4b0b      	ldr	r3, [pc, #44]	; (80124b8 <_txe_mutex_put+0x70>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4313      	orrs	r3, r2
 801248e:	4a0b      	ldr	r2, [pc, #44]	; (80124bc <_txe_mutex_put+0x74>)
 8012490:	4293      	cmp	r3, r2
 8012492:	d801      	bhi.n	8012498 <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012494:	2313      	movs	r3, #19
 8012496:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d105      	bne.n	80124aa <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7fd fb1b 	bl	800fadc <_tx_mutex_put>
 80124a6:	0003      	movs	r3, r0
 80124a8:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80124aa:	697b      	ldr	r3, [r7, #20]
}
 80124ac:	0018      	movs	r0, r3
 80124ae:	46bd      	mov	sp, r7
 80124b0:	b006      	add	sp, #24
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	4d555445 	.word	0x4d555445
 80124b8:	20000010 	.word	0x20000010
 80124bc:	f0f0f0ef 	.word	0xf0f0f0ef

080124c0 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80124c0:	b590      	push	{r4, r7, lr}
 80124c2:	b093      	sub	sp, #76	; 0x4c
 80124c4:	af02      	add	r7, sp, #8
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
 80124cc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80124ce:	2300      	movs	r3, #0
 80124d0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d102      	bne.n	80124de <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80124d8:	2309      	movs	r3, #9
 80124da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124dc:	e07e      	b.n	80125dc <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80124de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124e0:	2b38      	cmp	r3, #56	; 0x38
 80124e2:	d002      	beq.n	80124ea <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80124e4:	2309      	movs	r3, #9
 80124e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124e8:	e078      	b.n	80125dc <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124ea:	f3ef 8310 	mrs	r3, PRIMASK
 80124ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80124f0:	b672      	cpsid	i
    return(primask_value);
 80124f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80124f4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80124f6:	4b43      	ldr	r3, [pc, #268]	; (8012604 <_txe_queue_create+0x144>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	4b41      	ldr	r3, [pc, #260]	; (8012604 <_txe_queue_create+0x144>)
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012502:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012506:	f383 8810 	msr	PRIMASK, r3
}
 801250a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 801250c:	4b3e      	ldr	r3, [pc, #248]	; (8012608 <_txe_queue_create+0x148>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8012512:	2300      	movs	r3, #0
 8012514:	63bb      	str	r3, [r7, #56]	; 0x38
 8012516:	e009      	b.n	801252c <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801251c:	429a      	cmp	r2, r3
 801251e:	d00b      	beq.n	8012538 <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8012520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012524:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	3301      	adds	r3, #1
 801252a:	63bb      	str	r3, [r7, #56]	; 0x38
 801252c:	4b37      	ldr	r3, [pc, #220]	; (801260c <_txe_queue_create+0x14c>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012532:	429a      	cmp	r2, r3
 8012534:	d3f0      	bcc.n	8012518 <_txe_queue_create+0x58>
 8012536:	e000      	b.n	801253a <_txe_queue_create+0x7a>
                break;
 8012538:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801253a:	f3ef 8310 	mrs	r3, PRIMASK
 801253e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012540:	b672      	cpsid	i
    return(primask_value);
 8012542:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012544:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012546:	4b2f      	ldr	r3, [pc, #188]	; (8012604 <_txe_queue_create+0x144>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	1e5a      	subs	r2, r3, #1
 801254c:	4b2d      	ldr	r3, [pc, #180]	; (8012604 <_txe_queue_create+0x144>)
 801254e:	601a      	str	r2, [r3, #0]
 8012550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012552:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	f383 8810 	msr	PRIMASK, r3
}
 801255a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801255c:	f7fe fe74 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012564:	429a      	cmp	r2, r3
 8012566:	d102      	bne.n	801256e <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8012568:	2309      	movs	r3, #9
 801256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801256c:	e036      	b.n	80125dc <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d102      	bne.n	801257a <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8012574:	2303      	movs	r3, #3
 8012576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012578:	e030      	b.n	80125dc <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d102      	bne.n	8012586 <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8012580:	2305      	movs	r3, #5
 8012582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012584:	e02a      	b.n	80125dc <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b10      	cmp	r3, #16
 801258a:	d902      	bls.n	8012592 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 801258c:	2305      	movs	r3, #5
 801258e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012590:	e024      	b.n	80125dc <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8012592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012594:	089b      	lsrs	r3, r3, #2
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	429a      	cmp	r2, r3
 801259a:	d902      	bls.n	80125a2 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 801259c:	2305      	movs	r3, #5
 801259e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80125a0:	e01c      	b.n	80125dc <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80125a2:	4b1b      	ldr	r3, [pc, #108]	; (8012610 <_txe_queue_create+0x150>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80125a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125aa:	4b1a      	ldr	r3, [pc, #104]	; (8012614 <_txe_queue_create+0x154>)
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d101      	bne.n	80125b4 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80125b0:	2313      	movs	r3, #19
 80125b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125b4:	f3ef 8305 	mrs	r3, IPSR
 80125b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80125ba:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80125bc:	4b16      	ldr	r3, [pc, #88]	; (8012618 <_txe_queue_create+0x158>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4313      	orrs	r3, r2
 80125c2:	d00b      	beq.n	80125dc <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80125c4:	f3ef 8305 	mrs	r3, IPSR
 80125c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80125ca:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80125cc:	4b12      	ldr	r3, [pc, #72]	; (8012618 <_txe_queue_create+0x158>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4313      	orrs	r3, r2
 80125d2:	4a12      	ldr	r2, [pc, #72]	; (801261c <_txe_queue_create+0x15c>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d801      	bhi.n	80125dc <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80125d8:	2313      	movs	r3, #19
 80125da:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80125dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10a      	bne.n	80125f8 <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80125e2:	683c      	ldr	r4, [r7, #0]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	68b9      	ldr	r1, [r7, #8]
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	0023      	movs	r3, r4
 80125f0:	f7fd fcdc 	bl	800ffac <_tx_queue_create>
 80125f4:	0003      	movs	r3, r0
 80125f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80125f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80125fa:	0018      	movs	r0, r3
 80125fc:	46bd      	mov	sp, r7
 80125fe:	b011      	add	sp, #68	; 0x44
 8012600:	bd90      	pop	{r4, r7, pc}
 8012602:	46c0      	nop			; (mov r8, r8)
 8012604:	20018d28 	.word	0x20018d28
 8012608:	20018c60 	.word	0x20018c60
 801260c:	20018c64 	.word	0x20018c64
 8012610:	20018c90 	.word	0x20018c90
 8012614:	20018dd8 	.word	0x20018dd8
 8012618:	20000010 	.word	0x20000010
 801261c:	f0f0f0ef 	.word	0xf0f0f0ef

08012620 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b088      	sub	sp, #32
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801262c:	2300      	movs	r3, #0
 801262e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d102      	bne.n	801263c <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012636:	2309      	movs	r3, #9
 8012638:	61fb      	str	r3, [r7, #28]
 801263a:	e024      	b.n	8012686 <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	4a19      	ldr	r2, [pc, #100]	; (80126a8 <_txe_queue_receive+0x88>)
 8012642:	4293      	cmp	r3, r2
 8012644:	d002      	beq.n	801264c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012646:	2309      	movs	r3, #9
 8012648:	61fb      	str	r3, [r7, #28]
 801264a:	e01c      	b.n	8012686 <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d102      	bne.n	8012658 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012652:	2303      	movs	r3, #3
 8012654:	61fb      	str	r3, [r7, #28]
 8012656:	e016      	b.n	8012686 <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d013      	beq.n	8012686 <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801265e:	f3ef 8305 	mrs	r3, IPSR
 8012662:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012664:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012666:	4b11      	ldr	r3, [pc, #68]	; (80126ac <_txe_queue_receive+0x8c>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4313      	orrs	r3, r2
 801266c:	d002      	beq.n	8012674 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801266e:	2304      	movs	r3, #4
 8012670:	61fb      	str	r3, [r7, #28]
 8012672:	e008      	b.n	8012686 <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012674:	4b0e      	ldr	r3, [pc, #56]	; (80126b0 <_txe_queue_receive+0x90>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801267a:	69ba      	ldr	r2, [r7, #24]
 801267c:	4b0d      	ldr	r3, [pc, #52]	; (80126b4 <_txe_queue_receive+0x94>)
 801267e:	429a      	cmp	r2, r3
 8012680:	d101      	bne.n	8012686 <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012682:	2304      	movs	r3, #4
 8012684:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d107      	bne.n	801269c <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	68b9      	ldr	r1, [r7, #8]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	0018      	movs	r0, r3
 8012694:	f7fd fd12 	bl	80100bc <_tx_queue_receive>
 8012698:	0003      	movs	r3, r0
 801269a:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801269c:	69fb      	ldr	r3, [r7, #28]
}
 801269e:	0018      	movs	r0, r3
 80126a0:	46bd      	mov	sp, r7
 80126a2:	b008      	add	sp, #32
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	46c0      	nop			; (mov r8, r8)
 80126a8:	51554555 	.word	0x51554555
 80126ac:	20000010 	.word	0x20000010
 80126b0:	20018c90 	.word	0x20018c90
 80126b4:	20018dd8 	.word	0x20018dd8

080126b8 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b088      	sub	sp, #32
 80126bc:	af00      	add	r7, sp, #0
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80126c4:	2300      	movs	r3, #0
 80126c6:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d102      	bne.n	80126d4 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80126ce:	2309      	movs	r3, #9
 80126d0:	61fb      	str	r3, [r7, #28]
 80126d2:	e024      	b.n	801271e <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a19      	ldr	r2, [pc, #100]	; (8012740 <_txe_queue_send+0x88>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d002      	beq.n	80126e4 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80126de:	2309      	movs	r3, #9
 80126e0:	61fb      	str	r3, [r7, #28]
 80126e2:	e01c      	b.n	801271e <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d102      	bne.n	80126f0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80126ea:	2303      	movs	r3, #3
 80126ec:	61fb      	str	r3, [r7, #28]
 80126ee:	e016      	b.n	801271e <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d013      	beq.n	801271e <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126f6:	f3ef 8305 	mrs	r3, IPSR
 80126fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80126fc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80126fe:	4b11      	ldr	r3, [pc, #68]	; (8012744 <_txe_queue_send+0x8c>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4313      	orrs	r3, r2
 8012704:	d002      	beq.n	801270c <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012706:	2304      	movs	r3, #4
 8012708:	61fb      	str	r3, [r7, #28]
 801270a:	e008      	b.n	801271e <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801270c:	4b0e      	ldr	r3, [pc, #56]	; (8012748 <_txe_queue_send+0x90>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012712:	69ba      	ldr	r2, [r7, #24]
 8012714:	4b0d      	ldr	r3, [pc, #52]	; (801274c <_txe_queue_send+0x94>)
 8012716:	429a      	cmp	r2, r3
 8012718:	d101      	bne.n	801271e <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801271a:	2304      	movs	r3, #4
 801271c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d107      	bne.n	8012734 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	0018      	movs	r0, r3
 801272c:	f7fd fe8e 	bl	801044c <_tx_queue_send>
 8012730:	0003      	movs	r3, r0
 8012732:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8012734:	69fb      	ldr	r3, [r7, #28]
}
 8012736:	0018      	movs	r0, r3
 8012738:	46bd      	mov	sp, r7
 801273a:	b008      	add	sp, #32
 801273c:	bd80      	pop	{r7, pc}
 801273e:	46c0      	nop			; (mov r8, r8)
 8012740:	51554555 	.word	0x51554555
 8012744:	20000010 	.word	0x20000010
 8012748:	20018c90 	.word	0x20018c90
 801274c:	20018dd8 	.word	0x20018dd8

08012750 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b090      	sub	sp, #64	; 0x40
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801275e:	2300      	movs	r3, #0
 8012760:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d102      	bne.n	801276e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012768:	230c      	movs	r3, #12
 801276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801276c:	e050      	b.n	8012810 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	2b1c      	cmp	r3, #28
 8012772:	d002      	beq.n	801277a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012774:	230c      	movs	r3, #12
 8012776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012778:	e04a      	b.n	8012810 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801277a:	f3ef 8310 	mrs	r3, PRIMASK
 801277e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012780:	b672      	cpsid	i
    return(primask_value);
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012784:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012786:	4b36      	ldr	r3, [pc, #216]	; (8012860 <_txe_semaphore_create+0x110>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	1c5a      	adds	r2, r3, #1
 801278c:	4b34      	ldr	r3, [pc, #208]	; (8012860 <_txe_semaphore_create+0x110>)
 801278e:	601a      	str	r2, [r3, #0]
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	f383 8810 	msr	PRIMASK, r3
}
 801279a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801279c:	4b31      	ldr	r3, [pc, #196]	; (8012864 <_txe_semaphore_create+0x114>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80127a2:	2300      	movs	r3, #0
 80127a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80127a6:	e009      	b.n	80127bc <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80127a8:	68fa      	ldr	r2, [r7, #12]
 80127aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d00b      	beq.n	80127c8 <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80127b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b2:	695b      	ldr	r3, [r3, #20]
 80127b4:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80127b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b8:	3301      	adds	r3, #1
 80127ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80127bc:	4b2a      	ldr	r3, [pc, #168]	; (8012868 <_txe_semaphore_create+0x118>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d3f0      	bcc.n	80127a8 <_txe_semaphore_create+0x58>
 80127c6:	e000      	b.n	80127ca <_txe_semaphore_create+0x7a>
                break;
 80127c8:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80127ca:	f3ef 8310 	mrs	r3, PRIMASK
 80127ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80127d0:	b672      	cpsid	i
    return(primask_value);
 80127d2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80127d4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80127d6:	4b22      	ldr	r3, [pc, #136]	; (8012860 <_txe_semaphore_create+0x110>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	1e5a      	subs	r2, r3, #1
 80127dc:	4b20      	ldr	r3, [pc, #128]	; (8012860 <_txe_semaphore_create+0x110>)
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	f383 8810 	msr	PRIMASK, r3
}
 80127ea:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80127ec:	f7fe fd2c 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80127f0:	68fa      	ldr	r2, [r7, #12]
 80127f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d102      	bne.n	80127fe <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80127f8:	230c      	movs	r3, #12
 80127fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80127fc:	e008      	b.n	8012810 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80127fe:	4b1b      	ldr	r3, [pc, #108]	; (801286c <_txe_semaphore_create+0x11c>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012806:	4b1a      	ldr	r3, [pc, #104]	; (8012870 <_txe_semaphore_create+0x120>)
 8012808:	429a      	cmp	r2, r3
 801280a:	d101      	bne.n	8012810 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801280c:	2313      	movs	r3, #19
 801280e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012812:	2b00      	cmp	r3, #0
 8012814:	d113      	bne.n	801283e <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012816:	f3ef 8305 	mrs	r3, IPSR
 801281a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801281c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801281e:	4b15      	ldr	r3, [pc, #84]	; (8012874 <_txe_semaphore_create+0x124>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4313      	orrs	r3, r2
 8012824:	d00b      	beq.n	801283e <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012826:	f3ef 8305 	mrs	r3, IPSR
 801282a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801282c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801282e:	4b11      	ldr	r3, [pc, #68]	; (8012874 <_txe_semaphore_create+0x124>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4313      	orrs	r3, r2
 8012834:	4a10      	ldr	r2, [pc, #64]	; (8012878 <_txe_semaphore_create+0x128>)
 8012836:	4293      	cmp	r3, r2
 8012838:	d801      	bhi.n	801283e <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801283a:	2313      	movs	r3, #19
 801283c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801283e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012840:	2b00      	cmp	r3, #0
 8012842:	d107      	bne.n	8012854 <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	68b9      	ldr	r1, [r7, #8]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	0018      	movs	r0, r3
 801284c:	f7fd ffa2 	bl	8010794 <_tx_semaphore_create>
 8012850:	0003      	movs	r3, r0
 8012852:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8012854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012856:	0018      	movs	r0, r3
 8012858:	46bd      	mov	sp, r7
 801285a:	b010      	add	sp, #64	; 0x40
 801285c:	bd80      	pop	{r7, pc}
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	20018d28 	.word	0x20018d28
 8012864:	20018c58 	.word	0x20018c58
 8012868:	20018c5c 	.word	0x20018c5c
 801286c:	20018c90 	.word	0x20018c90
 8012870:	20018dd8 	.word	0x20018dd8
 8012874:	20000010 	.word	0x20000010
 8012878:	f0f0f0ef 	.word	0xf0f0f0ef

0801287c <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012884:	2300      	movs	r3, #0
 8012886:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d102      	bne.n	8012894 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801288e:	230c      	movs	r3, #12
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	e01b      	b.n	80128cc <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a13      	ldr	r2, [pc, #76]	; (80128e8 <_txe_semaphore_delete+0x6c>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d002      	beq.n	80128a4 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801289e:	230c      	movs	r3, #12
 80128a0:	617b      	str	r3, [r7, #20]
 80128a2:	e013      	b.n	80128cc <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80128a4:	f3ef 8305 	mrs	r3, IPSR
 80128a8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80128aa:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80128ac:	4b0f      	ldr	r3, [pc, #60]	; (80128ec <_txe_semaphore_delete+0x70>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4313      	orrs	r3, r2
 80128b2:	d002      	beq.n	80128ba <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80128b4:	2313      	movs	r3, #19
 80128b6:	617b      	str	r3, [r7, #20]
 80128b8:	e008      	b.n	80128cc <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80128ba:	4b0d      	ldr	r3, [pc, #52]	; (80128f0 <_txe_semaphore_delete+0x74>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80128c0:	693a      	ldr	r2, [r7, #16]
 80128c2:	4b0c      	ldr	r3, [pc, #48]	; (80128f4 <_txe_semaphore_delete+0x78>)
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d101      	bne.n	80128cc <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80128c8:	2313      	movs	r3, #19
 80128ca:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d105      	bne.n	80128de <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	0018      	movs	r0, r3
 80128d6:	f7fd ffc1 	bl	801085c <_tx_semaphore_delete>
 80128da:	0003      	movs	r3, r0
 80128dc:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80128de:	697b      	ldr	r3, [r7, #20]
}
 80128e0:	0018      	movs	r0, r3
 80128e2:	46bd      	mov	sp, r7
 80128e4:	b006      	add	sp, #24
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	53454d41 	.word	0x53454d41
 80128ec:	20000010 	.word	0x20000010
 80128f0:	20018c90 	.word	0x20018c90
 80128f4:	20018dd8 	.word	0x20018dd8

080128f8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b086      	sub	sp, #24
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012902:	2300      	movs	r3, #0
 8012904:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d102      	bne.n	8012912 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801290c:	230c      	movs	r3, #12
 801290e:	617b      	str	r3, [r7, #20]
 8012910:	e01e      	b.n	8012950 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4a16      	ldr	r2, [pc, #88]	; (8012970 <_txe_semaphore_get+0x78>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d002      	beq.n	8012922 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801291c:	230c      	movs	r3, #12
 801291e:	617b      	str	r3, [r7, #20]
 8012920:	e016      	b.n	8012950 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d013      	beq.n	8012950 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012928:	f3ef 8305 	mrs	r3, IPSR
 801292c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801292e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012930:	4b10      	ldr	r3, [pc, #64]	; (8012974 <_txe_semaphore_get+0x7c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4313      	orrs	r3, r2
 8012936:	d002      	beq.n	801293e <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012938:	2304      	movs	r3, #4
 801293a:	617b      	str	r3, [r7, #20]
 801293c:	e008      	b.n	8012950 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801293e:	4b0e      	ldr	r3, [pc, #56]	; (8012978 <_txe_semaphore_get+0x80>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012944:	693a      	ldr	r2, [r7, #16]
 8012946:	4b0d      	ldr	r3, [pc, #52]	; (801297c <_txe_semaphore_get+0x84>)
 8012948:	429a      	cmp	r2, r3
 801294a:	d101      	bne.n	8012950 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801294c:	2304      	movs	r3, #4
 801294e:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d107      	bne.n	8012966 <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8012956:	683a      	ldr	r2, [r7, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	0011      	movs	r1, r2
 801295c:	0018      	movs	r0, r3
 801295e:	f7fe f809 	bl	8010974 <_tx_semaphore_get>
 8012962:	0003      	movs	r3, r0
 8012964:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012966:	697b      	ldr	r3, [r7, #20]
}
 8012968:	0018      	movs	r0, r3
 801296a:	46bd      	mov	sp, r7
 801296c:	b006      	add	sp, #24
 801296e:	bd80      	pop	{r7, pc}
 8012970:	53454d41 	.word	0x53454d41
 8012974:	20000010 	.word	0x20000010
 8012978:	20018c90 	.word	0x20018c90
 801297c:	20018dd8 	.word	0x20018dd8

08012980 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d102      	bne.n	8012994 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801298e:	230c      	movs	r3, #12
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e00d      	b.n	80129b0 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a08      	ldr	r2, [pc, #32]	; (80129bc <_txe_semaphore_put+0x3c>)
 801299a:	4293      	cmp	r3, r2
 801299c:	d002      	beq.n	80129a4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801299e:	230c      	movs	r3, #12
 80129a0:	60fb      	str	r3, [r7, #12]
 80129a2:	e005      	b.n	80129b0 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	0018      	movs	r0, r3
 80129a8:	f7fe f876 	bl	8010a98 <_tx_semaphore_put>
 80129ac:	0003      	movs	r3, r0
 80129ae:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80129b0:	68fb      	ldr	r3, [r7, #12]
}
 80129b2:	0018      	movs	r0, r3
 80129b4:	46bd      	mov	sp, r7
 80129b6:	b004      	add	sp, #16
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	46c0      	nop			; (mov r8, r8)
 80129bc:	53454d41 	.word	0x53454d41

080129c0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b099      	sub	sp, #100	; 0x64
 80129c4:	af06      	add	r7, sp, #24
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	607a      	str	r2, [r7, #4]
 80129cc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80129ce:	2300      	movs	r3, #0
 80129d0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d102      	bne.n	80129de <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80129d8:	230e      	movs	r3, #14
 80129da:	647b      	str	r3, [r7, #68]	; 0x44
 80129dc:	e0b6      	b.n	8012b4c <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80129de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129e0:	2bb0      	cmp	r3, #176	; 0xb0
 80129e2:	d002      	beq.n	80129ea <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80129e4:	230e      	movs	r3, #14
 80129e6:	647b      	str	r3, [r7, #68]	; 0x44
 80129e8:	e0b0      	b.n	8012b4c <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80129ea:	f3ef 8310 	mrs	r3, PRIMASK
 80129ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80129f0:	b672      	cpsid	i
    return(primask_value);
 80129f2:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80129f4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80129f6:	4b64      	ldr	r3, [pc, #400]	; (8012b88 <_txe_thread_create+0x1c8>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	4b62      	ldr	r3, [pc, #392]	; (8012b88 <_txe_thread_create+0x1c8>)
 80129fe:	601a      	str	r2, [r3, #0]
 8012a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a02:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	f383 8810 	msr	PRIMASK, r3
}
 8012a0a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 8012a10:	4b5e      	ldr	r3, [pc, #376]	; (8012b8c <_txe_thread_create+0x1cc>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8012a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012a18:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8012a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a20:	18d3      	adds	r3, r2, r3
 8012a22:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012a28:	2300      	movs	r3, #0
 8012a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a2c:	e02b      	b.n	8012a86 <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d101      	bne.n	8012a3a <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8012a36:	2301      	movs	r3, #1
 8012a38:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8012a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d028      	beq.n	8012a92 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8012a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d308      	bcc.n	8012a5c <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d203      	bcs.n	8012a5c <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012a58:	2301      	movs	r3, #1
 8012a5a:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d308      	bcc.n	8012a78 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d203      	bcs.n	8012a78 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012a74:	2301      	movs	r3, #1
 8012a76:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8012a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7a:	2288      	movs	r2, #136	; 0x88
 8012a7c:	589b      	ldr	r3, [r3, r2]
 8012a7e:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a82:	3301      	adds	r3, #1
 8012a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a86:	4b42      	ldr	r3, [pc, #264]	; (8012b90 <_txe_thread_create+0x1d0>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d3ce      	bcc.n	8012a2e <_txe_thread_create+0x6e>
 8012a90:	e000      	b.n	8012a94 <_txe_thread_create+0xd4>
                break;
 8012a92:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012a94:	f3ef 8310 	mrs	r3, PRIMASK
 8012a98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012a9a:	b672      	cpsid	i
    return(primask_value);
 8012a9c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012a9e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012aa0:	4b39      	ldr	r3, [pc, #228]	; (8012b88 <_txe_thread_create+0x1c8>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	1e5a      	subs	r2, r3, #1
 8012aa6:	4b38      	ldr	r3, [pc, #224]	; (8012b88 <_txe_thread_create+0x1c8>)
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	f383 8810 	msr	PRIMASK, r3
}
 8012ab4:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012ab6:	f7fe fbc7 	bl	8011248 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8012aba:	68fa      	ldr	r2, [r7, #12]
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d102      	bne.n	8012ac8 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8012ac2:	230e      	movs	r3, #14
 8012ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8012ac6:	e041      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8012ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d102      	bne.n	8012ad4 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8012ace:	2303      	movs	r3, #3
 8012ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8012ad2:	e03b      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d102      	bne.n	8012ae0 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8012ada:	2303      	movs	r3, #3
 8012adc:	647b      	str	r3, [r7, #68]	; 0x44
 8012ade:	e035      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8012ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ae2:	2bc7      	cmp	r3, #199	; 0xc7
 8012ae4:	d802      	bhi.n	8012aec <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8012ae6:	2305      	movs	r3, #5
 8012ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8012aea:	e02f      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8012aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012aee:	2b1f      	cmp	r3, #31
 8012af0:	d902      	bls.n	8012af8 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8012af2:	230f      	movs	r3, #15
 8012af4:	647b      	str	r3, [r7, #68]	; 0x44
 8012af6:	e029      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8012af8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d902      	bls.n	8012b06 <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8012b00:	2318      	movs	r3, #24
 8012b02:	647b      	str	r3, [r7, #68]	; 0x44
 8012b04:	e022      	b.n	8012b4c <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8012b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d902      	bls.n	8012b12 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8012b0c:	2310      	movs	r3, #16
 8012b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8012b10:	e01c      	b.n	8012b4c <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8012b12:	4b20      	ldr	r3, [pc, #128]	; (8012b94 <_txe_thread_create+0x1d4>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b1a:	4b1f      	ldr	r3, [pc, #124]	; (8012b98 <_txe_thread_create+0x1d8>)
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d101      	bne.n	8012b24 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012b20:	2313      	movs	r3, #19
 8012b22:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b24:	f3ef 8305 	mrs	r3, IPSR
 8012b28:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012b2a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b2c:	4b1b      	ldr	r3, [pc, #108]	; (8012b9c <_txe_thread_create+0x1dc>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	d00b      	beq.n	8012b4c <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b34:	f3ef 8305 	mrs	r3, IPSR
 8012b38:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012b3a:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012b3c:	4b17      	ldr	r3, [pc, #92]	; (8012b9c <_txe_thread_create+0x1dc>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4313      	orrs	r3, r2
 8012b42:	4a17      	ldr	r2, [pc, #92]	; (8012ba0 <_txe_thread_create+0x1e0>)
 8012b44:	4293      	cmp	r3, r2
 8012b46:	d801      	bhi.n	8012b4c <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012b48:	2313      	movs	r3, #19
 8012b4a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d114      	bne.n	8012b7c <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012b52:	683c      	ldr	r4, [r7, #0]
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	68b9      	ldr	r1, [r7, #8]
 8012b58:	68f8      	ldr	r0, [r7, #12]
 8012b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b5c:	9305      	str	r3, [sp, #20]
 8012b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b60:	9304      	str	r3, [sp, #16]
 8012b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b64:	9303      	str	r3, [sp, #12]
 8012b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b68:	9302      	str	r3, [sp, #8]
 8012b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b6c:	9301      	str	r3, [sp, #4]
 8012b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b70:	9300      	str	r3, [sp, #0]
 8012b72:	0023      	movs	r3, r4
 8012b74:	f7fd ffe8 	bl	8010b48 <_tx_thread_create>
 8012b78:	0003      	movs	r3, r0
 8012b7a:	647b      	str	r3, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8012b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8012b7e:	0018      	movs	r0, r3
 8012b80:	46bd      	mov	sp, r7
 8012b82:	b013      	add	sp, #76	; 0x4c
 8012b84:	bd90      	pop	{r4, r7, pc}
 8012b86:	46c0      	nop			; (mov r8, r8)
 8012b88:	20018d28 	.word	0x20018d28
 8012b8c:	20018c98 	.word	0x20018c98
 8012b90:	20018c9c 	.word	0x20018c9c
 8012b94:	20018c90 	.word	0x20018c90
 8012b98:	20018dd8 	.word	0x20018dd8
 8012b9c:	20000010 	.word	0x20000010
 8012ba0:	f0f0f0ef 	.word	0xf0f0f0ef

08012ba4 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b08d      	sub	sp, #52	; 0x34
 8012ba8:	af06      	add	r7, sp, #24
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
 8012bb0:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d102      	bne.n	8012bbe <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012bb8:	230e      	movs	r3, #14
 8012bba:	617b      	str	r3, [r7, #20]
 8012bbc:	e01a      	b.n	8012bf4 <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	4a0f      	ldr	r2, [pc, #60]	; (8012c00 <_txe_thread_info_get+0x5c>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d002      	beq.n	8012bce <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012bc8:	230e      	movs	r3, #14
 8012bca:	617b      	str	r3, [r7, #20]
 8012bcc:	e012      	b.n	8012bf4 <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8012bce:	683c      	ldr	r4, [r7, #0]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	68b9      	ldr	r1, [r7, #8]
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd8:	9304      	str	r3, [sp, #16]
 8012bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bdc:	9303      	str	r3, [sp, #12]
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	9302      	str	r3, [sp, #8]
 8012be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be4:	9301      	str	r3, [sp, #4]
 8012be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be8:	9300      	str	r3, [sp, #0]
 8012bea:	0023      	movs	r3, r4
 8012bec:	f7fe f8e6 	bl	8010dbc <_tx_thread_info_get>
 8012bf0:	0003      	movs	r3, r0
 8012bf2:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8012bf4:	697b      	ldr	r3, [r7, #20]
}
 8012bf6:	0018      	movs	r0, r3
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	b007      	add	sp, #28
 8012bfc:	bd90      	pop	{r4, r7, pc}
 8012bfe:	46c0      	nop			; (mov r8, r8)
 8012c00:	54485244 	.word	0x54485244

08012c04 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d102      	bne.n	8012c18 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012c12:	230e      	movs	r3, #14
 8012c14:	60fb      	str	r3, [r7, #12]
 8012c16:	e00d      	b.n	8012c34 <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4a08      	ldr	r2, [pc, #32]	; (8012c40 <_txe_thread_resume+0x3c>)
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	d002      	beq.n	8012c28 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012c22:	230e      	movs	r3, #14
 8012c24:	60fb      	str	r3, [r7, #12]
 8012c26:	e005      	b.n	8012c34 <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	0018      	movs	r0, r3
 8012c2c:	f7fe f982 	bl	8010f34 <_tx_thread_resume>
 8012c30:	0003      	movs	r3, r0
 8012c32:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012c34:	68fb      	ldr	r3, [r7, #12]
}
 8012c36:	0018      	movs	r0, r3
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	b004      	add	sp, #16
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	46c0      	nop			; (mov r8, r8)
 8012c40:	54485244 	.word	0x54485244

08012c44 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d102      	bne.n	8012c58 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012c52:	230e      	movs	r3, #14
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e00d      	b.n	8012c74 <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	4a08      	ldr	r2, [pc, #32]	; (8012c80 <_txe_thread_suspend+0x3c>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d002      	beq.n	8012c68 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012c62:	230e      	movs	r3, #14
 8012c64:	60fb      	str	r3, [r7, #12]
 8012c66:	e005      	b.n	8012c74 <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	0018      	movs	r0, r3
 8012c6c:	f7fe fa7e 	bl	801116c <_tx_thread_suspend>
 8012c70:	0003      	movs	r3, r0
 8012c72:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012c74:	68fb      	ldr	r3, [r7, #12]
}
 8012c76:	0018      	movs	r0, r3
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	b004      	add	sp, #16
 8012c7c:	bd80      	pop	{r7, pc}
 8012c7e:	46c0      	nop			; (mov r8, r8)
 8012c80:	54485244 	.word	0x54485244

08012c84 <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b088      	sub	sp, #32
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012c8c:	4b1c      	ldr	r3, [pc, #112]	; (8012d00 <_ux_device_stack_alternate_setting_get+0x7c>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3320      	adds	r3, #32
 8012c92:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b03      	cmp	r3, #3
 8012c9a:	d12b      	bne.n	8012cf4 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	22f0      	movs	r2, #240	; 0xf0
 8012ca0:	589b      	ldr	r3, [r3, r2]
 8012ca2:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8012ca4:	e023      	b.n	8012cee <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	695b      	ldr	r3, [r3, #20]
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d11b      	bne.n	8012ce8 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	333c      	adds	r3, #60	; 0x3c
 8012cb4:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	3330      	adds	r3, #48	; 0x30
 8012cba:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8012cc4:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8012cc6:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	2203      	movs	r2, #3
 8012cd2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	2101      	movs	r1, #1
 8012cda:	0018      	movs	r0, r3
 8012cdc:	f001 fe5e 	bl	801499c <_ux_device_stack_transfer_request>
 8012ce0:	0003      	movs	r3, r0
 8012ce2:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	e006      	b.n	8012cf6 <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cec:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d1d8      	bne.n	8012ca6 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8012cf4:	23ff      	movs	r3, #255	; 0xff
}
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	b008      	add	sp, #32
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	46c0      	nop			; (mov r8, r8)
 8012d00:	20019298 	.word	0x20019298

08012d04 <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b0af      	sub	sp, #188	; 0xbc
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012d0e:	4bdd      	ldr	r3, [pc, #884]	; (8013084 <_ux_device_stack_alternate_setting_set+0x380>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	3320      	adds	r3, #32
 8012d14:	2298      	movs	r2, #152	; 0x98
 8012d16:	18b9      	adds	r1, r7, r2
 8012d18:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8012d1a:	18bb      	adds	r3, r7, r2
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d001      	beq.n	8012d28 <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8012d24:	2354      	movs	r3, #84	; 0x54
 8012d26:	e270      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 8012d28:	2398      	movs	r3, #152	; 0x98
 8012d2a:	18fb      	adds	r3, r7, r3
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	22f0      	movs	r2, #240	; 0xf0
 8012d30:	589b      	ldr	r3, [r3, r2]
 8012d32:	22b4      	movs	r2, #180	; 0xb4
 8012d34:	18ba      	adds	r2, r7, r2
 8012d36:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 8012d38:	e00b      	b.n	8012d52 <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8012d3a:	21b4      	movs	r1, #180	; 0xb4
 8012d3c:	187b      	adds	r3, r7, r1
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	695b      	ldr	r3, [r3, #20]
 8012d42:	687a      	ldr	r2, [r7, #4]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d00a      	beq.n	8012d5e <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 8012d48:	187b      	adds	r3, r7, r1
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d4e:	187a      	adds	r2, r7, r1
 8012d50:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 8012d52:	23b4      	movs	r3, #180	; 0xb4
 8012d54:	18fb      	adds	r3, r7, r3
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d1ee      	bne.n	8012d3a <_ux_device_stack_alternate_setting_set+0x36>
 8012d5c:	e000      	b.n	8012d60 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 8012d5e:	46c0      	nop			; (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 8012d60:	23b4      	movs	r3, #180	; 0xb4
 8012d62:	18fb      	adds	r3, r7, r3
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d106      	bne.n	8012d78 <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8012d6a:	2252      	movs	r2, #82	; 0x52
 8012d6c:	2107      	movs	r1, #7
 8012d6e:	2002      	movs	r0, #2
 8012d70:	f001 fe9a 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8012d74:	2352      	movs	r3, #82	; 0x52
 8012d76:	e248      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8012d78:	23b4      	movs	r3, #180	; 0xb4
 8012d7a:	18fb      	adds	r3, r7, r3
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	699b      	ldr	r3, [r3, #24]
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d101      	bne.n	8012d8a <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 8012d86:	2300      	movs	r3, #0
 8012d88:	e23f      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8012d8a:	4bbe      	ldr	r3, [pc, #760]	; (8013084 <_ux_device_stack_alternate_setting_set+0x380>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2294      	movs	r2, #148	; 0x94
 8012d90:	18ba      	adds	r2, r7, r2
 8012d92:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012d94:	4bbb      	ldr	r3, [pc, #748]	; (8013084 <_ux_device_stack_alternate_setting_set+0x380>)
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	2394      	movs	r3, #148	; 0x94
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	58d3      	ldr	r3, [r2, r3]
 8012d9e:	22b0      	movs	r2, #176	; 0xb0
 8012da0:	18ba      	adds	r2, r7, r2
 8012da2:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012da4:	4bb7      	ldr	r3, [pc, #732]	; (8013084 <_ux_device_stack_alternate_setting_set+0x380>)
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	2396      	movs	r3, #150	; 0x96
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	58d3      	ldr	r3, [r2, r3]
 8012dae:	22ac      	movs	r2, #172	; 0xac
 8012db0:	18ba      	adds	r2, r7, r2
 8012db2:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8012db4:	e222      	b.n	80131fc <_ux_device_stack_alternate_setting_set+0x4f8>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8012db6:	20b0      	movs	r0, #176	; 0xb0
 8012db8:	183b      	adds	r3, r7, r0
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	2290      	movs	r2, #144	; 0x90
 8012dc0:	18ba      	adds	r2, r7, r2
 8012dc2:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 8012dc4:	218f      	movs	r1, #143	; 0x8f
 8012dc6:	187b      	adds	r3, r7, r1
 8012dc8:	183a      	adds	r2, r7, r0
 8012dca:	6812      	ldr	r2, [r2, #0]
 8012dcc:	7852      	ldrb	r2, [r2, #1]
 8012dce:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012dd0:	187b      	adds	r3, r7, r1
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	2b02      	cmp	r3, #2
 8012dd6:	d000      	beq.n	8012dda <_ux_device_stack_alternate_setting_set+0xd6>
 8012dd8:	e1ff      	b.n	80131da <_ux_device_stack_alternate_setting_set+0x4d6>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 8012dda:	2458      	movs	r4, #88	; 0x58
 8012ddc:	193b      	adds	r3, r7, r4
 8012dde:	49aa      	ldr	r1, [pc, #680]	; (8013088 <_ux_device_stack_alternate_setting_set+0x384>)
 8012de0:	183a      	adds	r2, r7, r0
 8012de2:	6810      	ldr	r0, [r2, #0]
 8012de4:	2208      	movs	r2, #8
 8012de6:	f001 ff4e 	bl	8014c86 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 8012dea:	0020      	movs	r0, r4
 8012dec:	183b      	adds	r3, r7, r0
 8012dee:	691a      	ldr	r2, [r3, #16]
 8012df0:	2398      	movs	r3, #152	; 0x98
 8012df2:	18fb      	adds	r3, r7, r3
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	21cc      	movs	r1, #204	; 0xcc
 8012df8:	585b      	ldr	r3, [r3, r1]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d000      	beq.n	8012e00 <_ux_device_stack_alternate_setting_set+0xfc>
 8012dfe:	e1ec      	b.n	80131da <_ux_device_stack_alternate_setting_set+0x4d6>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 8012e00:	183b      	adds	r3, r7, r0
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	22ac      	movs	r2, #172	; 0xac
 8012e06:	18ba      	adds	r2, r7, r2
 8012e08:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 8012e0a:	e1df      	b.n	80131cc <_ux_device_stack_alternate_setting_set+0x4c8>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 8012e0c:	20b0      	movs	r0, #176	; 0xb0
 8012e0e:	183b      	adds	r3, r7, r0
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	2290      	movs	r2, #144	; 0x90
 8012e16:	18ba      	adds	r2, r7, r2
 8012e18:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 8012e1a:	218f      	movs	r1, #143	; 0x8f
 8012e1c:	187b      	adds	r3, r7, r1
 8012e1e:	183a      	adds	r2, r7, r0
 8012e20:	6812      	ldr	r2, [r2, #0]
 8012e22:	7852      	ldrb	r2, [r2, #1]
 8012e24:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012e26:	187b      	adds	r3, r7, r1
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	2b04      	cmp	r3, #4
 8012e2c:	d000      	beq.n	8012e30 <_ux_device_stack_alternate_setting_set+0x12c>
 8012e2e:	e1bc      	b.n	80131aa <_ux_device_stack_alternate_setting_set+0x4a6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 8012e30:	2434      	movs	r4, #52	; 0x34
 8012e32:	193b      	adds	r3, r7, r4
 8012e34:	4995      	ldr	r1, [pc, #596]	; (801308c <_ux_device_stack_alternate_setting_set+0x388>)
 8012e36:	183a      	adds	r2, r7, r0
 8012e38:	6810      	ldr	r0, [r2, #0]
 8012e3a:	2209      	movs	r2, #9
 8012e3c:	f001 ff23 	bl	8014c86 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012e40:	193b      	adds	r3, r7, r4
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d000      	beq.n	8012e4c <_ux_device_stack_alternate_setting_set+0x148>
 8012e4a:	e1ae      	b.n	80131aa <_ux_device_stack_alternate_setting_set+0x4a6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8012e4c:	193b      	adds	r3, r7, r4
 8012e4e:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012e50:	683a      	ldr	r2, [r7, #0]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d000      	beq.n	8012e58 <_ux_device_stack_alternate_setting_set+0x154>
 8012e56:	e1a8      	b.n	80131aa <_ux_device_stack_alternate_setting_set+0x4a6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8012e58:	23b4      	movs	r3, #180	; 0xb4
 8012e5a:	18fb      	adds	r3, r7, r3
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e60:	22a8      	movs	r2, #168	; 0xa8
 8012e62:	18ba      	adds	r2, r7, r2
 8012e64:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 8012e66:	e02c      	b.n	8012ec2 <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8012e68:	24a8      	movs	r4, #168	; 0xa8
 8012e6a:	193b      	adds	r3, r7, r4
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2126      	movs	r1, #38	; 0x26
 8012e70:	0018      	movs	r0, r3
 8012e72:	f001 fd7f 	bl	8014974 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 8012e76:	2194      	movs	r1, #148	; 0x94
 8012e78:	187b      	adds	r3, r7, r1
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	699b      	ldr	r3, [r3, #24]
 8012e7e:	193a      	adds	r2, r7, r4
 8012e80:	6812      	ldr	r2, [r2, #0]
 8012e82:	1879      	adds	r1, r7, r1
 8012e84:	6808      	ldr	r0, [r1, #0]
 8012e86:	210f      	movs	r1, #15
 8012e88:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8012e8a:	193b      	adds	r3, r7, r4
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e90:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8012e92:	0021      	movs	r1, r4
 8012e94:	187b      	adds	r3, r7, r1
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8012e9c:	187b      	adds	r3, r7, r1
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8012ea4:	187b      	adds	r3, r7, r1
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8012eac:	187b      	adds	r3, r7, r1
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8012eb4:	187b      	adds	r3, r7, r1
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8012ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ebe:	187a      	adds	r2, r7, r1
 8012ec0:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 8012ec2:	23a8      	movs	r3, #168	; 0xa8
 8012ec4:	18fb      	adds	r3, r7, r3
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1cd      	bne.n	8012e68 <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 8012ecc:	23b4      	movs	r3, #180	; 0xb4
 8012ece:	18fb      	adds	r3, r7, r3
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 8012ed6:	21b0      	movs	r1, #176	; 0xb0
 8012ed8:	187b      	adds	r3, r7, r1
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	001a      	movs	r2, r3
 8012ee0:	20ac      	movs	r0, #172	; 0xac
 8012ee2:	183b      	adds	r3, r7, r0
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	1a9b      	subs	r3, r3, r2
 8012ee8:	183a      	adds	r2, r7, r0
 8012eea:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 8012eec:	187b      	adds	r3, r7, r1
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	001a      	movs	r2, r3
 8012ef4:	187b      	adds	r3, r7, r1
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	189b      	adds	r3, r3, r2
 8012efa:	187a      	adds	r2, r7, r1
 8012efc:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8012efe:	e10a      	b.n	8013116 <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 8012f00:	22b0      	movs	r2, #176	; 0xb0
 8012f02:	18bb      	adds	r3, r7, r2
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	2190      	movs	r1, #144	; 0x90
 8012f0a:	1879      	adds	r1, r7, r1
 8012f0c:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 8012f0e:	218f      	movs	r1, #143	; 0x8f
 8012f10:	187b      	adds	r3, r7, r1
 8012f12:	18ba      	adds	r2, r7, r2
 8012f14:	6812      	ldr	r2, [r2, #0]
 8012f16:	7852      	ldrb	r2, [r2, #1]
 8012f18:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 8012f1a:	187b      	adds	r3, r7, r1
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b05      	cmp	r3, #5
 8012f20:	d008      	beq.n	8012f34 <_ux_device_stack_alternate_setting_set+0x230>
 8012f22:	dd00      	ble.n	8012f26 <_ux_device_stack_alternate_setting_set+0x222>
 8012f24:	e0e5      	b.n	80130f2 <_ux_device_stack_alternate_setting_set+0x3ee>
 8012f26:	2b02      	cmp	r3, #2
 8012f28:	d100      	bne.n	8012f2c <_ux_device_stack_alternate_setting_set+0x228>
 8012f2a:	e0db      	b.n	80130e4 <_ux_device_stack_alternate_setting_set+0x3e0>
 8012f2c:	2b04      	cmp	r3, #4
 8012f2e:	d100      	bne.n	8012f32 <_ux_device_stack_alternate_setting_set+0x22e>
 8012f30:	e0d8      	b.n	80130e4 <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 8012f32:	e0de      	b.n	80130f2 <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8012f34:	2198      	movs	r1, #152	; 0x98
 8012f36:	187b      	adds	r3, r7, r1
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	22fc      	movs	r2, #252	; 0xfc
 8012f3c:	589b      	ldr	r3, [r3, r2]
 8012f3e:	22a8      	movs	r2, #168	; 0xa8
 8012f40:	18ba      	adds	r2, r7, r2
 8012f42:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8012f44:	187b      	adds	r3, r7, r1
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	2380      	movs	r3, #128	; 0x80
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	58d3      	ldr	r3, [r2, r3]
 8012f4e:	22a0      	movs	r2, #160	; 0xa0
 8012f50:	18ba      	adds	r2, r7, r2
 8012f52:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8012f54:	e016      	b.n	8012f84 <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8012f56:	22a8      	movs	r2, #168	; 0xa8
 8012f58:	18bb      	adds	r3, r7, r2
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d104      	bne.n	8012f6c <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8012f62:	18bb      	adds	r3, r7, r2
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2201      	movs	r2, #1
 8012f68:	601a      	str	r2, [r3, #0]
                                            break;
 8012f6a:	e010      	b.n	8012f8e <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 8012f6c:	22a8      	movs	r2, #168	; 0xa8
 8012f6e:	18bb      	adds	r3, r7, r2
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	3390      	adds	r3, #144	; 0x90
 8012f74:	18ba      	adds	r2, r7, r2
 8012f76:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 8012f78:	22a0      	movs	r2, #160	; 0xa0
 8012f7a:	18bb      	adds	r3, r7, r2
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	18ba      	adds	r2, r7, r2
 8012f82:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8012f84:	23a0      	movs	r3, #160	; 0xa0
 8012f86:	18fb      	adds	r3, r7, r3
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d1e3      	bne.n	8012f56 <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 8012f8e:	23a0      	movs	r3, #160	; 0xa0
 8012f90:	18fb      	adds	r3, r7, r3
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 8012f98:	2312      	movs	r3, #18
 8012f9a:	e136      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8012f9c:	24a8      	movs	r4, #168	; 0xa8
 8012f9e:	193b      	adds	r3, r7, r4
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 8012fa4:	493a      	ldr	r1, [pc, #232]	; (8013090 <_ux_device_stack_alternate_setting_set+0x38c>)
 8012fa6:	22b0      	movs	r2, #176	; 0xb0
 8012fa8:	18ba      	adds	r2, r7, r2
 8012faa:	6810      	ldr	r0, [r2, #0]
 8012fac:	2206      	movs	r2, #6
 8012fae:	f001 fe6a 	bl	8014c86 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012fb2:	0021      	movs	r1, r4
 8012fb4:	187b      	adds	r3, r7, r1
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3330      	adds	r3, #48	; 0x30
 8012fba:	2280      	movs	r2, #128	; 0x80
 8012fbc:	18ba      	adds	r2, r7, r2
 8012fbe:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8012fc0:	187b      	adds	r3, r7, r1
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 8012fc6:	055b      	lsls	r3, r3, #21
 8012fc8:	0d5b      	lsrs	r3, r3, #21
 8012fca:	209c      	movs	r0, #156	; 0x9c
 8012fcc:	183a      	adds	r2, r7, r0
 8012fce:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8012fd0:	4b2c      	ldr	r3, [pc, #176]	; (8013084 <_ux_device_stack_alternate_setting_set+0x380>)
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	23ce      	movs	r3, #206	; 0xce
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	58d3      	ldr	r3, [r2, r3]
 8012fda:	2b02      	cmp	r3, #2
 8012fdc:	d11b      	bne.n	8013016 <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8012fde:	187b      	adds	r3, r7, r1
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	699b      	ldr	r3, [r3, #24]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8012fe8:	d015      	beq.n	8013016 <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8012fea:	187b      	adds	r3, r7, r1
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	69da      	ldr	r2, [r3, #28]
 8012ff0:	23c0      	movs	r3, #192	; 0xc0
 8012ff2:	015b      	lsls	r3, r3, #5
 8012ff4:	4013      	ands	r3, r2
 8012ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 8012ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d00b      	beq.n	8013016 <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8012ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013000:	0adb      	lsrs	r3, r3, #11
 8013002:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 8013004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013006:	3301      	adds	r3, #1
 8013008:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 801300a:	183b      	adds	r3, r7, r0
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013010:	4353      	muls	r3, r2
 8013012:	183a      	adds	r2, r7, r0
 8013014:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8013016:	2180      	movs	r1, #128	; 0x80
 8013018:	187b      	adds	r3, r7, r1
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	229c      	movs	r2, #156	; 0x9c
 801301e:	18ba      	adds	r2, r7, r2
 8013020:	6812      	ldr	r2, [r2, #0]
 8013022:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8013024:	187b      	adds	r3, r7, r1
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	24a8      	movs	r4, #168	; 0xa8
 801302a:	193a      	adds	r2, r7, r4
 801302c:	6812      	ldr	r2, [r2, #0]
 801302e:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8013030:	187b      	adds	r3, r7, r1
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2201      	movs	r2, #1
 8013036:	4252      	negs	r2, r2
 8013038:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 801303a:	193b      	adds	r3, r7, r4
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	22b4      	movs	r2, #180	; 0xb4
 8013040:	18ba      	adds	r2, r7, r2
 8013042:	6812      	ldr	r2, [r2, #0]
 8013044:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 8013046:	193b      	adds	r3, r7, r4
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2298      	movs	r2, #152	; 0x98
 801304c:	18ba      	adds	r2, r7, r2
 801304e:	6812      	ldr	r2, [r2, #0]
 8013050:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8013052:	2194      	movs	r1, #148	; 0x94
 8013054:	187b      	adds	r3, r7, r1
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	699b      	ldr	r3, [r3, #24]
 801305a:	193a      	adds	r2, r7, r4
 801305c:	6812      	ldr	r2, [r2, #0]
 801305e:	1879      	adds	r1, r7, r1
 8013060:	6808      	ldr	r0, [r1, #0]
 8013062:	210e      	movs	r1, #14
 8013064:	4798      	blx	r3
 8013066:	0003      	movs	r3, r0
 8013068:	2184      	movs	r1, #132	; 0x84
 801306a:	187a      	adds	r2, r7, r1
 801306c:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 801306e:	187b      	adds	r3, r7, r1
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d00e      	beq.n	8013094 <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8013076:	193b      	adds	r3, r7, r4
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]
                                        return(status);
 801307e:	187b      	adds	r3, r7, r1
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	e0c2      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>
 8013084:	20019298 	.word	0x20019298
 8013088:	20000044 	.word	0x20000044
 801308c:	2000004c 	.word	0x2000004c
 8013090:	2000002c 	.word	0x2000002c
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8013094:	22b4      	movs	r2, #180	; 0xb4
 8013096:	18bb      	adds	r3, r7, r2
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801309c:	2b00      	cmp	r3, #0
 801309e:	d106      	bne.n	80130ae <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 80130a0:	18bb      	adds	r3, r7, r2
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	22a8      	movs	r2, #168	; 0xa8
 80130a6:	18ba      	adds	r2, r7, r2
 80130a8:	6812      	ldr	r2, [r2, #0]
 80130aa:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 80130ac:	e022      	b.n	80130f4 <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 80130ae:	23b4      	movs	r3, #180	; 0xb4
 80130b0:	18fb      	adds	r3, r7, r3
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130b6:	22a4      	movs	r2, #164	; 0xa4
 80130b8:	18ba      	adds	r2, r7, r2
 80130ba:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80130bc:	e005      	b.n	80130ca <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 80130be:	22a4      	movs	r2, #164	; 0xa4
 80130c0:	18bb      	adds	r3, r7, r2
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c6:	18ba      	adds	r2, r7, r2
 80130c8:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80130ca:	22a4      	movs	r2, #164	; 0xa4
 80130cc:	18bb      	adds	r3, r7, r2
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d1f3      	bne.n	80130be <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80130d6:	18bb      	adds	r3, r7, r2
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	22a8      	movs	r2, #168	; 0xa8
 80130dc:	18ba      	adds	r2, r7, r2
 80130de:	6812      	ldr	r2, [r2, #0]
 80130e0:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 80130e2:	e007      	b.n	80130f4 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 80130e4:	2390      	movs	r3, #144	; 0x90
 80130e6:	18fb      	adds	r3, r7, r3
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	22ac      	movs	r2, #172	; 0xac
 80130ec:	18ba      	adds	r2, r7, r2
 80130ee:	6013      	str	r3, [r2, #0]
                                    break;
 80130f0:	e000      	b.n	80130f4 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 80130f2:	46c0      	nop			; (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 80130f4:	21ac      	movs	r1, #172	; 0xac
 80130f6:	187b      	adds	r3, r7, r1
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	2090      	movs	r0, #144	; 0x90
 80130fc:	183b      	adds	r3, r7, r0
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	187a      	adds	r2, r7, r1
 8013104:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 8013106:	21b0      	movs	r1, #176	; 0xb0
 8013108:	187b      	adds	r3, r7, r1
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	183b      	adds	r3, r7, r0
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	18d3      	adds	r3, r2, r3
 8013112:	187a      	adds	r2, r7, r1
 8013114:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 8013116:	23ac      	movs	r3, #172	; 0xac
 8013118:	18fb      	adds	r3, r7, r3
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d000      	beq.n	8013122 <_ux_device_stack_alternate_setting_set+0x41e>
 8013120:	e6ee      	b.n	8012f00 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8013122:	24b4      	movs	r4, #180	; 0xb4
 8013124:	193b      	adds	r3, r7, r4
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	330c      	adds	r3, #12
 801312a:	2234      	movs	r2, #52	; 0x34
 801312c:	18b9      	adds	r1, r7, r2
 801312e:	2224      	movs	r2, #36	; 0x24
 8013130:	0018      	movs	r0, r3
 8013132:	f001 ff90 	bl	8015056 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8013136:	4b37      	ldr	r3, [pc, #220]	; (8013214 <_ux_device_stack_alternate_setting_set+0x510>)
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	193b      	adds	r3, r7, r4
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	3356      	adds	r3, #86	; 0x56
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	18d3      	adds	r3, r2, r3
 8013146:	3304      	adds	r3, #4
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2288      	movs	r2, #136	; 0x88
 801314c:	18b9      	adds	r1, r7, r2
 801314e:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 8013150:	18bb      	adds	r3, r7, r2
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d004      	beq.n	8013162 <_ux_device_stack_alternate_setting_set+0x45e>
 8013158:	18bb      	adds	r3, r7, r2
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801315e:	2b00      	cmp	r3, #0
 8013160:	d101      	bne.n	8013166 <_ux_device_stack_alternate_setting_set+0x462>
                            {

                                return (UX_NO_CLASS_MATCH);
 8013162:	2357      	movs	r3, #87	; 0x57
 8013164:	e051      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8013166:	2008      	movs	r0, #8
 8013168:	183b      	adds	r3, r7, r0
 801316a:	2206      	movs	r2, #6
 801316c:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 801316e:	183b      	adds	r3, r7, r0
 8013170:	21b4      	movs	r1, #180	; 0xb4
 8013172:	187a      	adds	r2, r7, r1
 8013174:	6812      	ldr	r2, [r2, #0]
 8013176:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 8013178:	183b      	adds	r3, r7, r0
 801317a:	2488      	movs	r4, #136	; 0x88
 801317c:	193a      	adds	r2, r7, r4
 801317e:	6812      	ldr	r2, [r2, #0]
 8013180:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 8013182:	193b      	adds	r3, r7, r4
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	2388      	movs	r3, #136	; 0x88
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	1879      	adds	r1, r7, r1
 801318c:	6809      	ldr	r1, [r1, #0]
 801318e:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 8013190:	193b      	adds	r3, r7, r4
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013196:	183a      	adds	r2, r7, r0
 8013198:	0010      	movs	r0, r2
 801319a:	4798      	blx	r3
 801319c:	0003      	movs	r3, r0
 801319e:	2284      	movs	r2, #132	; 0x84
 80131a0:	18b9      	adds	r1, r7, r2
 80131a2:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 80131a4:	18bb      	adds	r3, r7, r2
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	e02f      	b.n	801320a <_ux_device_stack_alternate_setting_set+0x506>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 80131aa:	21ac      	movs	r1, #172	; 0xac
 80131ac:	187b      	adds	r3, r7, r1
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	2090      	movs	r0, #144	; 0x90
 80131b2:	183b      	adds	r3, r7, r0
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	187a      	adds	r2, r7, r1
 80131ba:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 80131bc:	21b0      	movs	r1, #176	; 0xb0
 80131be:	187b      	adds	r3, r7, r1
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	183b      	adds	r3, r7, r0
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	18d3      	adds	r3, r2, r3
 80131c8:	187a      	adds	r2, r7, r1
 80131ca:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 80131cc:	23ac      	movs	r3, #172	; 0xac
 80131ce:	18fb      	adds	r3, r7, r3
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d000      	beq.n	80131d8 <_ux_device_stack_alternate_setting_set+0x4d4>
 80131d6:	e619      	b.n	8012e0c <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 80131d8:	e016      	b.n	8013208 <_ux_device_stack_alternate_setting_set+0x504>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80131da:	21ac      	movs	r1, #172	; 0xac
 80131dc:	187b      	adds	r3, r7, r1
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	2090      	movs	r0, #144	; 0x90
 80131e2:	183b      	adds	r3, r7, r0
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	1ad3      	subs	r3, r2, r3
 80131e8:	187a      	adds	r2, r7, r1
 80131ea:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80131ec:	21b0      	movs	r1, #176	; 0xb0
 80131ee:	187b      	adds	r3, r7, r1
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	183b      	adds	r3, r7, r0
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	18d3      	adds	r3, r2, r3
 80131f8:	187a      	adds	r2, r7, r1
 80131fa:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80131fc:	23ac      	movs	r3, #172	; 0xac
 80131fe:	18fb      	adds	r3, r7, r3
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d000      	beq.n	8013208 <_ux_device_stack_alternate_setting_set+0x504>
 8013206:	e5d6      	b.n	8012db6 <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8013208:	23ff      	movs	r3, #255	; 0xff
#endif
}
 801320a:	0018      	movs	r0, r3
 801320c:	46bd      	mov	sp, r7
 801320e:	b02f      	add	sp, #188	; 0xbc
 8013210:	bd90      	pop	{r4, r7, pc}
 8013212:	46c0      	nop			; (mov r8, r8)
 8013214:	20019298 	.word	0x20019298

08013218 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b092      	sub	sp, #72	; 0x48
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 8013226:	2300      	movs	r3, #0
 8013228:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 801322a:	2310      	movs	r3, #16
 801322c:	18f9      	adds	r1, r7, r3
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	223f      	movs	r2, #63	; 0x3f
 8013232:	0018      	movs	r0, r3
 8013234:	f002 f906 	bl	8015444 <_ux_utility_string_length_check>
 8013238:	0003      	movs	r3, r0
 801323a:	647b      	str	r3, [r7, #68]	; 0x44
    if (status)
 801323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801323e:	2b00      	cmp	r3, #0
 8013240:	d001      	beq.n	8013246 <_ux_device_stack_class_register+0x2e>
        return(status);
 8013242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013244:	e03d      	b.n	80132c2 <_ux_device_stack_class_register+0xaa>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8013246:	4b21      	ldr	r3, [pc, #132]	; (80132cc <_ux_device_stack_class_register+0xb4>)
 8013248:	681a      	ldr	r2, [r3, #0]
 801324a:	23ac      	movs	r3, #172	; 0xac
 801324c:	005b      	lsls	r3, r3, #1
 801324e:	58d3      	ldr	r3, [r2, r3]
 8013250:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8013252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013256:	2b00      	cmp	r3, #0
 8013258:	d132      	bne.n	80132c0 <_ux_device_stack_class_register+0xa8>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 801325a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	1c5a      	adds	r2, r3, #1
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	0019      	movs	r1, r3
 8013264:	f001 fef7 	bl	8015056 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 8013268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 801326e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013270:	2382      	movs	r3, #130	; 0x82
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013276:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 8013278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801327a:	2386      	movs	r3, #134	; 0x86
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	6879      	ldr	r1, [r7, #4]
 8013280:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 8013282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013284:	2384      	movs	r3, #132	; 0x84
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	6839      	ldr	r1, [r7, #0]
 801328a:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 801328c:	2114      	movs	r1, #20
 801328e:	187b      	adds	r3, r7, r1
 8013290:	2205      	movs	r2, #5
 8013292:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 8013294:	187b      	adds	r3, r7, r1
 8013296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013298:	625a      	str	r2, [r3, #36]	; 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 801329a:	187b      	adds	r3, r7, r1
 801329c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801329e:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 80132a0:	187a      	adds	r2, r7, r1
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	0010      	movs	r0, r2
 80132a6:	4798      	blx	r3
 80132a8:	0003      	movs	r3, r0
 80132aa:	647b      	str	r3, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 80132ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d001      	beq.n	80132b6 <_ux_device_stack_class_register+0x9e>
                return(status);
 80132b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132b4:	e005      	b.n	80132c2 <_ux_device_stack_class_register+0xaa>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 80132b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132b8:	2201      	movs	r2, #1
 80132ba:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 80132bc:	2300      	movs	r3, #0
 80132be:	e000      	b.n	80132c2 <_ux_device_stack_class_register+0xaa>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80132c0:	2312      	movs	r3, #18
}
 80132c2:	0018      	movs	r0, r3
 80132c4:	46bd      	mov	sp, r7
 80132c6:	b012      	add	sp, #72	; 0x48
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	46c0      	nop			; (mov r8, r8)
 80132cc:	20019298 	.word	0x20019298

080132d0 <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b08a      	sub	sp, #40	; 0x28
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80132dc:	4b2b      	ldr	r3, [pc, #172]	; (801338c <_ux_device_stack_clear_feature+0xbc>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80132e2:	4b2a      	ldr	r3, [pc, #168]	; (801338c <_ux_device_stack_clear_feature+0xbc>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	3320      	adds	r3, #32
 80132e8:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	333c      	adds	r3, #60	; 0x3c
 80132ee:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2203      	movs	r2, #3
 80132f4:	4013      	ands	r3, r2
 80132f6:	d002      	beq.n	80132fe <_ux_device_stack_clear_feature+0x2e>
 80132f8:	2b02      	cmp	r3, #2
 80132fa:	d013      	beq.n	8013324 <_ux_device_stack_clear_feature+0x54>
 80132fc:	e037      	b.n	801336e <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d13c      	bne.n	801337e <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8013304:	4b21      	ldr	r3, [pc, #132]	; (801338c <_ux_device_stack_clear_feature+0xbc>)
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	23d2      	movs	r3, #210	; 0xd2
 801330a:	005b      	lsls	r3, r3, #1
 801330c:	58d3      	ldr	r3, [r2, r3]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d006      	beq.n	8013320 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8013312:	4b1e      	ldr	r3, [pc, #120]	; (801338c <_ux_device_stack_clear_feature+0xbc>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	23d4      	movs	r3, #212	; 0xd4
 8013318:	005b      	lsls	r3, r3, #1
 801331a:	2100      	movs	r1, #0
 801331c:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 801331e:	e02e      	b.n	801337e <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8013320:	2354      	movs	r3, #84	; 0x54
 8013322:	e02e      	b.n	8013382 <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	22f0      	movs	r2, #240	; 0xf0
 8013328:	589b      	ldr	r3, [r3, r2]
 801332a:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 801332c:	e01c      	b.n	8013368 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 801332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013332:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8013334:	e012      	b.n	801335c <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8013336:	6a3b      	ldr	r3, [r7, #32]
 8013338:	695b      	ldr	r3, [r3, #20]
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	429a      	cmp	r2, r3
 801333e:	d10a      	bne.n	8013356 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	699b      	ldr	r3, [r3, #24]
 8013344:	6a3a      	ldr	r2, [r7, #32]
 8013346:	69f8      	ldr	r0, [r7, #28]
 8013348:	2110      	movs	r1, #16
 801334a:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801334c:	6a3b      	ldr	r3, [r7, #32]
 801334e:	2200      	movs	r2, #0
 8013350:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8013352:	2300      	movs	r3, #0
 8013354:	e015      	b.n	8013382 <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8013356:	6a3b      	ldr	r3, [r7, #32]
 8013358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801335a:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 801335c:	6a3b      	ldr	r3, [r7, #32]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1e9      	bne.n	8013336 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8013362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013366:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 8013368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336a:	2b00      	cmp	r3, #0
 801336c:	d1df      	bne.n	801332e <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	697a      	ldr	r2, [r7, #20]
 8013374:	69f8      	ldr	r0, [r7, #28]
 8013376:	2114      	movs	r1, #20
 8013378:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801337a:	2300      	movs	r3, #0
 801337c:	e001      	b.n	8013382 <_ux_device_stack_clear_feature+0xb2>
        break;
 801337e:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8013380:	2300      	movs	r3, #0
}
 8013382:	0018      	movs	r0, r3
 8013384:	46bd      	mov	sp, r7
 8013386:	b00a      	add	sp, #40	; 0x28
 8013388:	bd80      	pop	{r7, pc}
 801338a:	46c0      	nop			; (mov r8, r8)
 801338c:	20019298 	.word	0x20019298

08013390 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013396:	4b10      	ldr	r3, [pc, #64]	; (80133d8 <_ux_device_stack_configuration_get+0x48>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	3320      	adds	r3, #32
 801339c:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	333c      	adds	r3, #60	; 0x3c
 80133a2:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	3330      	adds	r3, #48	; 0x30
 80133a8:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	22cc      	movs	r2, #204	; 0xcc
 80133ae:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 80133b4:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80133b6:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2203      	movs	r2, #3
 80133bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2201      	movs	r2, #1
 80133c2:	2101      	movs	r1, #1
 80133c4:	0018      	movs	r0, r3
 80133c6:	f001 fae9 	bl	801499c <_ux_device_stack_transfer_request>
 80133ca:	0003      	movs	r3, r0
 80133cc:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 80133ce:	683b      	ldr	r3, [r7, #0]
}
 80133d0:	0018      	movs	r0, r3
 80133d2:	46bd      	mov	sp, r7
 80133d4:	b004      	add	sp, #16
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	20019298 	.word	0x20019298

080133dc <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 80133dc:	b590      	push	{r4, r7, lr}
 80133de:	b0ad      	sub	sp, #180	; 0xb4
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 80133e4:	235c      	movs	r3, #92	; 0x5c
 80133e6:	18fb      	adds	r3, r7, r3
 80133e8:	0018      	movs	r0, r3
 80133ea:	2320      	movs	r3, #32
 80133ec:	001a      	movs	r2, r3
 80133ee:	2100      	movs	r1, #0
 80133f0:	f005 f99e 	bl	8018730 <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 80133f4:	2300      	movs	r3, #0
 80133f6:	22a0      	movs	r2, #160	; 0xa0
 80133f8:	18ba      	adds	r2, r7, r2
 80133fa:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 80133fc:	2300      	movs	r3, #0
 80133fe:	2298      	movs	r2, #152	; 0x98
 8013400:	18ba      	adds	r2, r7, r2
 8013402:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 8013404:	2300      	movs	r3, #0
 8013406:	2294      	movs	r2, #148	; 0x94
 8013408:	18ba      	adds	r2, r7, r2
 801340a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801340c:	4bbf      	ldr	r3, [pc, #764]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2290      	movs	r2, #144	; 0x90
 8013412:	18ba      	adds	r2, r7, r2
 8013414:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013416:	4bbd      	ldr	r3, [pc, #756]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	3320      	adds	r3, #32
 801341c:	228c      	movs	r2, #140	; 0x8c
 801341e:	18b9      	adds	r1, r7, r2
 8013420:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8013422:	2300      	movs	r3, #0
 8013424:	219c      	movs	r1, #156	; 0x9c
 8013426:	1879      	adds	r1, r7, r1
 8013428:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801342a:	18bb      	adds	r3, r7, r2
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	22cc      	movs	r2, #204	; 0xcc
 8013430:	589b      	ldr	r3, [r3, r2]
 8013432:	687a      	ldr	r2, [r7, #4]
 8013434:	429a      	cmp	r2, r3
 8013436:	d101      	bne.n	801343c <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 8013438:	2300      	movs	r3, #0
 801343a:	e1c9      	b.n	80137d0 <_ux_device_stack_configuration_set+0x3f4>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 801343c:	4bb3      	ldr	r3, [pc, #716]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	2394      	movs	r3, #148	; 0x94
 8013442:	005b      	lsls	r3, r3, #1
 8013444:	58d3      	ldr	r3, [r2, r3]
 8013446:	22ac      	movs	r2, #172	; 0xac
 8013448:	18ba      	adds	r2, r7, r2
 801344a:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801344c:	4baf      	ldr	r3, [pc, #700]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	2396      	movs	r3, #150	; 0x96
 8013452:	005b      	lsls	r3, r3, #1
 8013454:	58d3      	ldr	r3, [r2, r3]
 8013456:	22a8      	movs	r2, #168	; 0xa8
 8013458:	18ba      	adds	r2, r7, r2
 801345a:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 801345c:	e02e      	b.n	80134bc <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801345e:	20ac      	movs	r0, #172	; 0xac
 8013460:	183b      	adds	r3, r7, r0
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	2288      	movs	r2, #136	; 0x88
 8013468:	18ba      	adds	r2, r7, r2
 801346a:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801346c:	2187      	movs	r1, #135	; 0x87
 801346e:	187b      	adds	r3, r7, r1
 8013470:	183a      	adds	r2, r7, r0
 8013472:	6812      	ldr	r2, [r2, #0]
 8013474:	7852      	ldrb	r2, [r2, #1]
 8013476:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8013478:	187b      	adds	r3, r7, r1
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	2b02      	cmp	r3, #2
 801347e:	d10c      	bne.n	801349a <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8013480:	245c      	movs	r4, #92	; 0x5c
 8013482:	193b      	adds	r3, r7, r4
 8013484:	49a2      	ldr	r1, [pc, #648]	; (8013710 <_ux_device_stack_configuration_set+0x334>)
 8013486:	183a      	adds	r2, r7, r0
 8013488:	6810      	ldr	r0, [r2, #0]
 801348a:	2208      	movs	r2, #8
 801348c:	f001 fbfb 	bl	8014c86 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8013490:	193b      	adds	r3, r7, r4
 8013492:	691b      	ldr	r3, [r3, #16]
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	429a      	cmp	r2, r3
 8013498:	d016      	beq.n	80134c8 <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 801349a:	21a8      	movs	r1, #168	; 0xa8
 801349c:	187b      	adds	r3, r7, r1
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	2088      	movs	r0, #136	; 0x88
 80134a2:	183b      	adds	r3, r7, r0
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	1ad3      	subs	r3, r2, r3
 80134a8:	187a      	adds	r2, r7, r1
 80134aa:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 80134ac:	21ac      	movs	r1, #172	; 0xac
 80134ae:	187b      	adds	r3, r7, r1
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	183b      	adds	r3, r7, r0
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	18d3      	adds	r3, r2, r3
 80134b8:	187a      	adds	r2, r7, r1
 80134ba:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80134bc:	23a8      	movs	r3, #168	; 0xa8
 80134be:	18fb      	adds	r3, r7, r3
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d1cb      	bne.n	801345e <_ux_device_stack_configuration_set+0x82>
 80134c6:	e000      	b.n	80134ca <_ux_device_stack_configuration_set+0xee>
                break;
 80134c8:	46c0      	nop			; (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 80134ca:	23a8      	movs	r3, #168	; 0xa8
 80134cc:	18fb      	adds	r3, r7, r3
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d104      	bne.n	80134de <_ux_device_stack_configuration_set+0x102>
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 80134da:	23ff      	movs	r3, #255	; 0xff
 80134dc:	e178      	b.n	80137d0 <_ux_device_stack_configuration_set+0x3f4>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 80134de:	218c      	movs	r1, #140	; 0x8c
 80134e0:	187b      	adds	r3, r7, r1
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	22cc      	movs	r2, #204	; 0xcc
 80134e6:	589b      	ldr	r3, [r3, r2]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d038      	beq.n	801355e <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 80134ec:	187b      	adds	r3, r7, r1
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	22f0      	movs	r2, #240	; 0xf0
 80134f2:	589b      	ldr	r3, [r3, r2]
 80134f4:	22a4      	movs	r2, #164	; 0xa4
 80134f6:	18ba      	adds	r2, r7, r2
 80134f8:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 80134fa:	e02b      	b.n	8013554 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80134fc:	210c      	movs	r1, #12
 80134fe:	187b      	adds	r3, r7, r1
 8013500:	2203      	movs	r2, #3
 8013502:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8013504:	187b      	adds	r3, r7, r1
 8013506:	20a4      	movs	r0, #164	; 0xa4
 8013508:	183a      	adds	r2, r7, r0
 801350a:	6812      	ldr	r2, [r2, #0]
 801350c:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 801350e:	183b      	adds	r3, r7, r0
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	2280      	movs	r2, #128	; 0x80
 8013516:	18b8      	adds	r0, r7, r2
 8013518:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 801351a:	187b      	adds	r3, r7, r1
 801351c:	0010      	movs	r0, r2
 801351e:	18ba      	adds	r2, r7, r2
 8013520:	6812      	ldr	r2, [r2, #0]
 8013522:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8013524:	0002      	movs	r2, r0
 8013526:	18bb      	adds	r3, r7, r2
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d005      	beq.n	801353a <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 801352e:	18bb      	adds	r3, r7, r2
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013534:	187a      	adds	r2, r7, r1
 8013536:	0010      	movs	r0, r2
 8013538:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801353a:	24a4      	movs	r4, #164	; 0xa4
 801353c:	193b      	adds	r3, r7, r4
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013542:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8013544:	193b      	adds	r3, r7, r4
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	0018      	movs	r0, r3
 801354a:	f000 ffbf 	bl	80144cc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 801354e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013550:	193a      	adds	r2, r7, r4
 8013552:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 8013554:	23a4      	movs	r3, #164	; 0xa4
 8013556:	18fb      	adds	r3, r7, r3
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1ce      	bne.n	80134fc <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 801355e:	208c      	movs	r0, #140	; 0x8c
 8013560:	183b      	adds	r3, r7, r0
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	22cc      	movs	r2, #204	; 0xcc
 8013566:	2100      	movs	r1, #0
 8013568:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801356a:	183b      	adds	r3, r7, r0
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2201      	movs	r2, #1
 8013570:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8013572:	2290      	movs	r2, #144	; 0x90
 8013574:	18bb      	adds	r3, r7, r2
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	699b      	ldr	r3, [r3, #24]
 801357a:	18ba      	adds	r2, r7, r2
 801357c:	6810      	ldr	r0, [r2, #0]
 801357e:	2201      	movs	r2, #1
 8013580:	2113      	movs	r1, #19
 8013582:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d101      	bne.n	801358e <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 801358a:	2300      	movs	r3, #0
 801358c:	e120      	b.n	80137d0 <_ux_device_stack_configuration_set+0x3f4>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 801358e:	208c      	movs	r0, #140	; 0x8c
 8013590:	183b      	adds	r3, r7, r0
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	21cc      	movs	r1, #204	; 0xcc
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 801359a:	183b      	adds	r3, r7, r0
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 80135a0:	495b      	ldr	r1, [pc, #364]	; (8013710 <_ux_device_stack_configuration_set+0x334>)
 80135a2:	22ac      	movs	r2, #172	; 0xac
 80135a4:	18ba      	adds	r2, r7, r2
 80135a6:	6810      	ldr	r0, [r2, #0]
 80135a8:	2208      	movs	r2, #8
 80135aa:	f001 fb6c 	bl	8014c86 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 80135ae:	235c      	movs	r3, #92	; 0x5c
 80135b0:	18fb      	adds	r3, r7, r3
 80135b2:	699b      	ldr	r3, [r3, #24]
 80135b4:	2240      	movs	r2, #64	; 0x40
 80135b6:	4013      	ands	r3, r2
 80135b8:	d001      	beq.n	80135be <_ux_device_stack_configuration_set+0x1e2>
 80135ba:	2202      	movs	r2, #2
 80135bc:	e000      	b.n	80135c0 <_ux_device_stack_configuration_set+0x1e4>
 80135be:	2201      	movs	r2, #1
 80135c0:	4b52      	ldr	r3, [pc, #328]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 80135c2:	6819      	ldr	r1, [r3, #0]
 80135c4:	23d0      	movs	r3, #208	; 0xd0
 80135c6:	005b      	lsls	r3, r3, #1
 80135c8:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 80135ca:	205c      	movs	r0, #92	; 0x5c
 80135cc:	183b      	adds	r3, r7, r0
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	0959      	lsrs	r1, r3, #5
 80135d2:	4b4e      	ldr	r3, [pc, #312]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	2301      	movs	r3, #1
 80135d8:	4019      	ands	r1, r3
 80135da:	23d2      	movs	r3, #210	; 0xd2
 80135dc:	005b      	lsls	r3, r3, #1
 80135de:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 80135e0:	183b      	adds	r3, r7, r0
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	22a8      	movs	r2, #168	; 0xa8
 80135e6:	18ba      	adds	r2, r7, r2
 80135e8:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 80135ea:	e0dc      	b.n	80137a6 <_ux_device_stack_configuration_set+0x3ca>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 80135ec:	21ac      	movs	r1, #172	; 0xac
 80135ee:	187b      	adds	r3, r7, r1
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2288      	movs	r2, #136	; 0x88
 80135f6:	18ba      	adds	r2, r7, r2
 80135f8:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 80135fa:	2087      	movs	r0, #135	; 0x87
 80135fc:	183b      	adds	r3, r7, r0
 80135fe:	187a      	adds	r2, r7, r1
 8013600:	6812      	ldr	r2, [r2, #0]
 8013602:	7852      	ldrb	r2, [r2, #1]
 8013604:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8013606:	183b      	adds	r3, r7, r0
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	2b0b      	cmp	r3, #11
 801360c:	d111      	bne.n	8013632 <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 801360e:	2301      	movs	r3, #1
 8013610:	229c      	movs	r2, #156	; 0x9c
 8013612:	18ba      	adds	r2, r7, r2
 8013614:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8013616:	187b      	adds	r3, r7, r1
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	3302      	adds	r3, #2
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	2298      	movs	r2, #152	; 0x98
 8013620:	18ba      	adds	r2, r7, r2
 8013622:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8013624:	187b      	adds	r3, r7, r1
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	3303      	adds	r3, #3
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	2294      	movs	r2, #148	; 0x94
 801362e:	18ba      	adds	r2, r7, r2
 8013630:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8013632:	2387      	movs	r3, #135	; 0x87
 8013634:	18fb      	adds	r3, r7, r3
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	2b04      	cmp	r3, #4
 801363a:	d000      	beq.n	801363e <_ux_device_stack_configuration_set+0x262>
 801363c:	e0a2      	b.n	8013784 <_ux_device_stack_configuration_set+0x3a8>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801363e:	2438      	movs	r4, #56	; 0x38
 8013640:	193b      	adds	r3, r7, r4
 8013642:	4934      	ldr	r1, [pc, #208]	; (8013714 <_ux_device_stack_configuration_set+0x338>)
 8013644:	22ac      	movs	r2, #172	; 0xac
 8013646:	18ba      	adds	r2, r7, r2
 8013648:	6810      	ldr	r0, [r2, #0]
 801364a:	2209      	movs	r2, #9
 801364c:	f001 fb1b 	bl	8014c86 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8013650:	193b      	adds	r3, r7, r4
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d000      	beq.n	801365a <_ux_device_stack_configuration_set+0x27e>
 8013658:	e094      	b.n	8013784 <_ux_device_stack_configuration_set+0x3a8>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 801365a:	239c      	movs	r3, #156	; 0x9c
 801365c:	18fb      	adds	r3, r7, r3
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d159      	bne.n	8013718 <_ux_device_stack_configuration_set+0x33c>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8013664:	193b      	adds	r3, r7, r4
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	2298      	movs	r2, #152	; 0x98
 801366a:	18ba      	adds	r2, r7, r2
 801366c:	6812      	ldr	r2, [r2, #0]
 801366e:	429a      	cmp	r2, r3
 8013670:	d130      	bne.n	80136d4 <_ux_device_stack_configuration_set+0x2f8>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8013672:	4b26      	ldr	r3, [pc, #152]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	23ac      	movs	r3, #172	; 0xac
 8013678:	005b      	lsls	r3, r3, #1
 801367a:	58d3      	ldr	r3, [r2, r3]
 801367c:	2180      	movs	r1, #128	; 0x80
 801367e:	187a      	adds	r2, r7, r1
 8013680:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 8013682:	187b      	adds	r3, r7, r1
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013688:	2b01      	cmp	r3, #1
 801368a:	d130      	bne.n	80136ee <_ux_device_stack_configuration_set+0x312>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801368c:	193b      	adds	r3, r7, r4
 801368e:	689a      	ldr	r2, [r3, #8]
 8013690:	0008      	movs	r0, r1
 8013692:	187b      	adds	r3, r7, r1
 8013694:	6819      	ldr	r1, [r3, #0]
 8013696:	2384      	movs	r3, #132	; 0x84
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	58cb      	ldr	r3, [r1, r3]
 801369c:	429a      	cmp	r2, r3
 801369e:	d126      	bne.n	80136ee <_ux_device_stack_configuration_set+0x312>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 80136a0:	0001      	movs	r1, r0
 80136a2:	187b      	adds	r3, r7, r1
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	2386      	movs	r3, #134	; 0x86
 80136a8:	005b      	lsls	r3, r3, #1
 80136aa:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d11d      	bne.n	80136ee <_ux_device_stack_configuration_set+0x312>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80136b2:	4b16      	ldr	r3, [pc, #88]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	193b      	adds	r3, r7, r4
 80136b8:	689b      	ldr	r3, [r3, #8]
 80136ba:	3356      	adds	r3, #86	; 0x56
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	18d3      	adds	r3, r2, r3
 80136c0:	3304      	adds	r3, #4
 80136c2:	187a      	adds	r2, r7, r1
 80136c4:	6812      	ldr	r2, [r2, #0]
 80136c6:	601a      	str	r2, [r3, #0]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 80136c8:	187b      	adds	r3, r7, r1
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	22a0      	movs	r2, #160	; 0xa0
 80136ce:	18ba      	adds	r2, r7, r2
 80136d0:	6013      	str	r3, [r2, #0]
 80136d2:	e00c      	b.n	80136ee <_ux_device_stack_configuration_set+0x312>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 80136d4:	4b0d      	ldr	r3, [pc, #52]	; (801370c <_ux_device_stack_configuration_set+0x330>)
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	2338      	movs	r3, #56	; 0x38
 80136da:	18fb      	adds	r3, r7, r3
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	3356      	adds	r3, #86	; 0x56
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	18d3      	adds	r3, r2, r3
 80136e4:	3304      	adds	r3, #4
 80136e6:	22a0      	movs	r2, #160	; 0xa0
 80136e8:	18ba      	adds	r2, r7, r2
 80136ea:	6812      	ldr	r2, [r2, #0]
 80136ec:	601a      	str	r2, [r3, #0]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 80136ee:	2294      	movs	r2, #148	; 0x94
 80136f0:	18bb      	adds	r3, r7, r2
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3b01      	subs	r3, #1
 80136f6:	18b9      	adds	r1, r7, r2
 80136f8:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 80136fa:	18bb      	adds	r3, r7, r2
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d136      	bne.n	8013770 <_ux_device_stack_configuration_set+0x394>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8013702:	2300      	movs	r3, #0
 8013704:	229c      	movs	r2, #156	; 0x9c
 8013706:	18ba      	adds	r2, r7, r2
 8013708:	6013      	str	r3, [r2, #0]
 801370a:	e031      	b.n	8013770 <_ux_device_stack_configuration_set+0x394>
 801370c:	20019298 	.word	0x20019298
 8013710:	20000044 	.word	0x20000044
 8013714:	2000004c 	.word	0x2000004c
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8013718:	4b2f      	ldr	r3, [pc, #188]	; (80137d8 <_ux_device_stack_configuration_set+0x3fc>)
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	23ac      	movs	r3, #172	; 0xac
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	58d3      	ldr	r3, [r2, r3]
 8013722:	2180      	movs	r1, #128	; 0x80
 8013724:	187a      	adds	r2, r7, r1
 8013726:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8013728:	187b      	adds	r3, r7, r1
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801372e:	2b01      	cmp	r3, #1
 8013730:	d11e      	bne.n	8013770 <_ux_device_stack_configuration_set+0x394>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8013732:	2438      	movs	r4, #56	; 0x38
 8013734:	193b      	adds	r3, r7, r4
 8013736:	689a      	ldr	r2, [r3, #8]
 8013738:	0008      	movs	r0, r1
 801373a:	187b      	adds	r3, r7, r1
 801373c:	6819      	ldr	r1, [r3, #0]
 801373e:	2384      	movs	r3, #132	; 0x84
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	58cb      	ldr	r3, [r1, r3]
 8013744:	429a      	cmp	r2, r3
 8013746:	d113      	bne.n	8013770 <_ux_device_stack_configuration_set+0x394>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 8013748:	0001      	movs	r1, r0
 801374a:	187b      	adds	r3, r7, r1
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	2386      	movs	r3, #134	; 0x86
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	429a      	cmp	r2, r3
 8013758:	d10a      	bne.n	8013770 <_ux_device_stack_configuration_set+0x394>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801375a:	4b1f      	ldr	r3, [pc, #124]	; (80137d8 <_ux_device_stack_configuration_set+0x3fc>)
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	193b      	adds	r3, r7, r4
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	3356      	adds	r3, #86	; 0x56
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	18d3      	adds	r3, r2, r3
 8013768:	3304      	adds	r3, #4
 801376a:	187a      	adds	r2, r7, r1
 801376c:	6812      	ldr	r2, [r2, #0]
 801376e:	601a      	str	r2, [r3, #0]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 8013770:	23a8      	movs	r3, #168	; 0xa8
 8013772:	18fb      	adds	r3, r7, r3
 8013774:	6819      	ldr	r1, [r3, #0]
 8013776:	23ac      	movs	r3, #172	; 0xac
 8013778:	18fb      	adds	r3, r7, r3
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2200      	movs	r2, #0
 801377e:	0018      	movs	r0, r3
 8013780:	f000 feec 	bl	801455c <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8013784:	21a8      	movs	r1, #168	; 0xa8
 8013786:	187b      	adds	r3, r7, r1
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	2088      	movs	r0, #136	; 0x88
 801378c:	183b      	adds	r3, r7, r0
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	1ad3      	subs	r3, r2, r3
 8013792:	187a      	adds	r2, r7, r1
 8013794:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8013796:	21ac      	movs	r1, #172	; 0xac
 8013798:	187b      	adds	r3, r7, r1
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	183b      	adds	r3, r7, r0
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	18d3      	adds	r3, r2, r3
 80137a2:	187a      	adds	r2, r7, r1
 80137a4:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80137a6:	23a8      	movs	r3, #168	; 0xa8
 80137a8:	18fb      	adds	r3, r7, r3
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d000      	beq.n	80137b2 <_ux_device_stack_configuration_set+0x3d6>
 80137b0:	e71c      	b.n	80135ec <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 80137b2:	238c      	movs	r3, #140	; 0x8c
 80137b4:	18fb      	adds	r3, r7, r3
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2203      	movs	r2, #3
 80137ba:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 80137bc:	2290      	movs	r2, #144	; 0x90
 80137be:	18bb      	adds	r3, r7, r2
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	699b      	ldr	r3, [r3, #24]
 80137c4:	18ba      	adds	r2, r7, r2
 80137c6:	6810      	ldr	r0, [r2, #0]
 80137c8:	2203      	movs	r2, #3
 80137ca:	2113      	movs	r1, #19
 80137cc:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	0018      	movs	r0, r3
 80137d2:	46bd      	mov	sp, r7
 80137d4:	b02d      	add	sp, #180	; 0xb4
 80137d6:	bd90      	pop	{r4, r7, pc}
 80137d8:	20019298 	.word	0x20019298

080137dc <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 80137dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137de:	b09d      	sub	sp, #116	; 0x74
 80137e0:	af02      	add	r7, sp, #8
 80137e2:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 80137e4:	23ff      	movs	r3, #255	; 0xff
 80137e6:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80137e8:	4ba2      	ldr	r3, [pc, #648]	; (8013a74 <_ux_device_stack_control_request_process+0x298>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80137ee:	4ba1      	ldr	r3, [pc, #644]	; (8013a74 <_ux_device_stack_control_request_process+0x298>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	3320      	adds	r3, #32
 80137f4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d000      	beq.n	8013800 <_ux_device_stack_control_request_process+0x24>
 80137fe:	e134      	b.n	8013a6a <_ux_device_stack_control_request_process+0x28e>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2254      	movs	r2, #84	; 0x54
 8013804:	5c9b      	ldrb	r3, [r3, r2]
 8013806:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2255      	movs	r2, #85	; 0x55
 801380c:	5c9b      	ldrb	r3, [r3, r2]
 801380e:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	3354      	adds	r3, #84	; 0x54
 8013814:	3302      	adds	r3, #2
 8013816:	0018      	movs	r0, r3
 8013818:	f001 fdf9 	bl	801540e <_ux_utility_short_get>
 801381c:	0003      	movs	r3, r0
 801381e:	64fb      	str	r3, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	3354      	adds	r3, #84	; 0x54
 8013824:	3304      	adds	r3, #4
 8013826:	0018      	movs	r0, r3
 8013828:	f001 fdf1 	bl	801540e <_ux_utility_short_get>
 801382c:	0003      	movs	r3, r0
 801382e:	64bb      	str	r3, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	3354      	adds	r3, #84	; 0x54
 8013834:	3306      	adds	r3, #6
 8013836:	0018      	movs	r0, r3
 8013838:	f001 fde9 	bl	801540e <_ux_utility_short_get>
 801383c:	0003      	movs	r3, r0
 801383e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8013840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013842:	2b06      	cmp	r3, #6
 8013844:	d002      	beq.n	801384c <_ux_device_stack_control_request_process+0x70>
 8013846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013848:	2b07      	cmp	r3, #7
 801384a:	d10c      	bne.n	8013866 <_ux_device_stack_control_request_process+0x8a>
 801384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801384e:	0a1b      	lsrs	r3, r3, #8
 8013850:	2260      	movs	r2, #96	; 0x60
 8013852:	4013      	ands	r3, r2
 8013854:	d007      	beq.n	8013866 <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8013856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013858:	2260      	movs	r2, #96	; 0x60
 801385a:	4393      	bics	r3, r2
 801385c:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 801385e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013860:	2220      	movs	r2, #32
 8013862:	4313      	orrs	r3, r2
 8013864:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8013866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013868:	2260      	movs	r2, #96	; 0x60
 801386a:	4013      	ands	r3, r2
 801386c:	2b40      	cmp	r3, #64	; 0x40
 801386e:	d139      	bne.n	80138e4 <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8013870:	4b80      	ldr	r3, [pc, #512]	; (8013a74 <_ux_device_stack_control_request_process+0x298>)
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	23e2      	movs	r3, #226	; 0xe2
 8013876:	005b      	lsls	r3, r3, #1
 8013878:	58d3      	ldr	r3, [r2, r3]
 801387a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801387c:	429a      	cmp	r2, r3
 801387e:	d131      	bne.n	80138e4 <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8013880:	2380      	movs	r3, #128	; 0x80
 8013882:	005b      	lsls	r3, r3, #1
 8013884:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8013886:	4b7b      	ldr	r3, [pc, #492]	; (8013a74 <_ux_device_stack_control_request_process+0x298>)
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	23e4      	movs	r3, #228	; 0xe4
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	58d4      	ldr	r4, [r2, r3]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8013896:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8013898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801389a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801389c:	220c      	movs	r2, #12
 801389e:	18ba      	adds	r2, r7, r2
 80138a0:	9201      	str	r2, [sp, #4]
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	0033      	movs	r3, r6
 80138a6:	002a      	movs	r2, r5
 80138a8:	47a0      	blx	r4
 80138aa:	0003      	movs	r3, r0
 80138ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 80138ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d110      	bne.n	80138d6 <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 80138b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138b6:	333c      	adds	r3, #60	; 0x3c
 80138b8:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80138ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138bc:	3330      	adds	r3, #48	; 0x30
 80138be:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2203      	movs	r2, #3
 80138c4:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 80138c6:	68f9      	ldr	r1, [r7, #12]
 80138c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	0018      	movs	r0, r3
 80138ce:	f001 f865 	bl	801499c <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 80138d2:	2300      	movs	r3, #0
 80138d4:	e0ca      	b.n	8013a6c <_ux_device_stack_control_request_process+0x290>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80138d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138d8:	333c      	adds	r3, #60	; 0x3c
 80138da:	0018      	movs	r0, r3
 80138dc:	f000 fb78 	bl	8013fd0 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 80138e0:	2300      	movs	r3, #0
 80138e2:	e0c3      	b.n	8013a6c <_ux_device_stack_control_request_process+0x290>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 80138e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138e6:	2260      	movs	r2, #96	; 0x60
 80138e8:	4013      	ands	r3, r2
 80138ea:	2b20      	cmp	r3, #32
 80138ec:	d004      	beq.n	80138f8 <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 80138ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138f0:	2260      	movs	r2, #96	; 0x60
 80138f2:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 80138f4:	2b40      	cmp	r3, #64	; 0x40
 80138f6:	d152      	bne.n	801399e <_ux_device_stack_control_request_process+0x1c2>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 80138f8:	2310      	movs	r3, #16
 80138fa:	18fb      	adds	r3, r7, r3
 80138fc:	2204      	movs	r2, #4
 80138fe:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8013900:	2300      	movs	r3, #0
 8013902:	663b      	str	r3, [r7, #96]	; 0x60
 8013904:	e03c      	b.n	8013980 <_ux_device_stack_control_request_process+0x1a4>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8013906:	4b5b      	ldr	r3, [pc, #364]	; (8013a74 <_ux_device_stack_control_request_process+0x298>)
 8013908:	681a      	ldr	r2, [r3, #0]
 801390a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801390c:	3356      	adds	r3, #86	; 0x56
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	18d3      	adds	r3, r2, r3
 8013912:	3304      	adds	r3, #4
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 8013918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801391a:	2b00      	cmp	r3, #0
 801391c:	d02a      	beq.n	8013974 <_ux_device_stack_control_request_process+0x198>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 801391e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013920:	2203      	movs	r2, #3
 8013922:	4013      	ands	r3, r2
 8013924:	2b01      	cmp	r3, #1
 8013926:	d116      	bne.n	8013956 <_ux_device_stack_control_request_process+0x17a>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 8013928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801392a:	22ff      	movs	r2, #255	; 0xff
 801392c:	4013      	ands	r3, r2
 801392e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013930:	429a      	cmp	r2, r3
 8013932:	d121      	bne.n	8013978 <_ux_device_stack_control_request_process+0x19c>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8013934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013936:	2388      	movs	r3, #136	; 0x88
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	58d3      	ldr	r3, [r2, r3]
 801393c:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 801393e:	2b07      	cmp	r3, #7
 8013940:	d109      	bne.n	8013956 <_ux_device_stack_control_request_process+0x17a>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8013942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013944:	2b00      	cmp	r3, #0
 8013946:	d106      	bne.n	8013956 <_ux_device_stack_control_request_process+0x17a>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2259      	movs	r2, #89	; 0x59
 801394c:	5c9b      	ldrb	r3, [r3, r2]
 801394e:	001a      	movs	r2, r3
                         (request == 0x00) &&
 8013950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013952:	4293      	cmp	r3, r2
 8013954:	d110      	bne.n	8013978 <_ux_device_stack_control_request_process+0x19c>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 8013956:	2110      	movs	r1, #16
 8013958:	187b      	adds	r3, r7, r1
 801395a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801395c:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 801395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013962:	187a      	adds	r2, r7, r1
 8013964:	0010      	movs	r0, r2
 8013966:	4798      	blx	r3
 8013968:	0003      	movs	r3, r0
 801396a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 801396c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00a      	beq.n	8013988 <_ux_device_stack_control_request_process+0x1ac>
 8013972:	e002      	b.n	801397a <_ux_device_stack_control_request_process+0x19e>
                    continue;
 8013974:	46c0      	nop			; (mov r8, r8)
 8013976:	e000      	b.n	801397a <_ux_device_stack_control_request_process+0x19e>
                        continue;
 8013978:	46c0      	nop			; (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801397a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801397c:	3301      	adds	r3, #1
 801397e:	663b      	str	r3, [r7, #96]	; 0x60
 8013980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013982:	2b0f      	cmp	r3, #15
 8013984:	d9bf      	bls.n	8013906 <_ux_device_stack_control_request_process+0x12a>
 8013986:	e000      	b.n	801398a <_ux_device_stack_control_request_process+0x1ae>

                    /* We are done, break the loop!  */
                    break;
 8013988:	46c0      	nop			; (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 801398a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801398c:	2b00      	cmp	r3, #0
 801398e:	d004      	beq.n	801399a <_ux_device_stack_control_request_process+0x1be>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8013990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013992:	333c      	adds	r3, #60	; 0x3c
 8013994:	0018      	movs	r0, r3
 8013996:	f000 fb1b 	bl	8013fd0 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 801399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801399c:	e066      	b.n	8013a6c <_ux_device_stack_control_request_process+0x290>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 801399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a0:	2b0c      	cmp	r3, #12
 80139a2:	d857      	bhi.n	8013a54 <_ux_device_stack_control_request_process+0x278>
 80139a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a6:	009a      	lsls	r2, r3, #2
 80139a8:	4b33      	ldr	r3, [pc, #204]	; (8013a78 <_ux_device_stack_control_request_process+0x29c>)
 80139aa:	18d3      	adds	r3, r2, r3
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 80139b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80139b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139b6:	0018      	movs	r0, r3
 80139b8:	f000 fb40 	bl	801403c <_ux_device_stack_get_status>
 80139bc:	0003      	movs	r3, r0
 80139be:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 80139c0:	e04b      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 80139c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80139c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139c8:	0018      	movs	r0, r3
 80139ca:	f7ff fc81 	bl	80132d0 <_ux_device_stack_clear_feature>
 80139ce:	0003      	movs	r3, r0
 80139d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 80139d2:	e042      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 80139d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80139d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139da:	0018      	movs	r0, r3
 80139dc:	f000 ff36 	bl	801484c <_ux_device_stack_set_feature>
 80139e0:	0003      	movs	r3, r0
 80139e2:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 80139e4:	e039      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 80139e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139ea:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 80139ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80139f4:	2111      	movs	r1, #17
 80139f6:	4798      	blx	r3
 80139f8:	0003      	movs	r3, r0
 80139fa:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 80139fc:	e02d      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 80139fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a04:	0018      	movs	r0, r3
 8013a06:	f000 f839 	bl	8013a7c <_ux_device_stack_descriptor_send>
 8013a0a:	0003      	movs	r3, r0
 8013a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a0e:	e024      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8013a10:	2354      	movs	r3, #84	; 0x54
 8013a12:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a14:	e021      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8013a16:	f7ff fcbb 	bl	8013390 <_ux_device_stack_configuration_get>
 8013a1a:	0003      	movs	r3, r0
 8013a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a1e:	e01c      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8013a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a22:	0018      	movs	r0, r3
 8013a24:	f7ff fcda 	bl	80133dc <_ux_device_stack_configuration_set>
 8013a28:	0003      	movs	r3, r0
 8013a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a2c:	e015      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8013a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a30:	0018      	movs	r0, r3
 8013a32:	f7ff f927 	bl	8012c84 <_ux_device_stack_alternate_setting_get>
 8013a36:	0003      	movs	r3, r0
 8013a38:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a3a:	e00e      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8013a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a40:	0011      	movs	r1, r2
 8013a42:	0018      	movs	r0, r3
 8013a44:	f7ff f95e 	bl	8012d04 <_ux_device_stack_alternate_setting_set>
 8013a48:	0003      	movs	r3, r0
 8013a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a4c:	e005      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a52:	e002      	b.n	8013a5a <_ux_device_stack_control_request_process+0x27e>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8013a54:	2354      	movs	r3, #84	; 0x54
 8013a56:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8013a58:	46c0      	nop			; (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 8013a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d004      	beq.n	8013a6a <_ux_device_stack_control_request_process+0x28e>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8013a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a62:	333c      	adds	r3, #60	; 0x3c
 8013a64:	0018      	movs	r0, r3
 8013a66:	f000 fab3 	bl	8013fd0 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8013a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8013a6c:	0018      	movs	r0, r3
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	b01b      	add	sp, #108	; 0x6c
 8013a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a74:	20019298 	.word	0x20019298
 8013a78:	08018b98 	.word	0x08018b98

08013a7c <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8013a7c:	b590      	push	{r4, r7, lr}
 8013a7e:	b0a3      	sub	sp, #140	; 0x8c
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 8013a88:	23ff      	movs	r3, #255	; 0xff
 8013a8a:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013a8c:	4bde      	ldr	r3, [pc, #888]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013a92:	4bdd      	ldr	r3, [pc, #884]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	3320      	adds	r3, #32
 8013a98:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8013a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013a9c:	333c      	adds	r3, #60	; 0x3c
 8013a9e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aa2:	3330      	adds	r3, #48	; 0x30
 8013aa4:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aa8:	2203      	movs	r2, #3
 8013aaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	22ff      	movs	r2, #255	; 0xff
 8013ab0:	4013      	ands	r3, r2
 8013ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	2284      	movs	r2, #132	; 0x84
 8013ab8:	18ba      	adds	r2, r7, r2
 8013aba:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	0a1b      	lsrs	r3, r3, #8
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2b0f      	cmp	r3, #15
 8013acc:	d900      	bls.n	8013ad0 <_ux_device_stack_descriptor_send+0x54>
 8013ace:	e20c      	b.n	8013eea <_ux_device_stack_descriptor_send+0x46e>
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	009a      	lsls	r2, r3, #2
 8013ad4:	4bcd      	ldr	r3, [pc, #820]	; (8013e0c <_ux_device_stack_descriptor_send+0x390>)
 8013ad6:	18d3      	adds	r3, r2, r3
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2b12      	cmp	r3, #18
 8013ae0:	d901      	bls.n	8013ae6 <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8013ae2:	2312      	movs	r3, #18
 8013ae4:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2b06      	cmp	r3, #6
 8013aea:	d104      	bne.n	8013af6 <_ux_device_stack_descriptor_send+0x7a>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b0a      	cmp	r3, #10
 8013af0:	d901      	bls.n	8013af6 <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8013af2:	230a      	movs	r3, #10
 8013af4:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2b09      	cmp	r3, #9
 8013afa:	d104      	bne.n	8013b06 <_ux_device_stack_descriptor_send+0x8a>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b05      	cmp	r3, #5
 8013b00:	d901      	bls.n	8013b06 <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8013b02:	2305      	movs	r3, #5
 8013b04:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8013b06:	4bc0      	ldr	r3, [pc, #768]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	2394      	movs	r3, #148	; 0x94
 8013b0c:	005b      	lsls	r3, r3, #1
 8013b0e:	58d3      	ldr	r3, [r2, r3]
 8013b10:	2180      	movs	r1, #128	; 0x80
 8013b12:	187a      	adds	r2, r7, r1
 8013b14:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8013b16:	4bbc      	ldr	r3, [pc, #752]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	2396      	movs	r3, #150	; 0x96
 8013b1c:	005b      	lsls	r3, r3, #1
 8013b1e:	58d3      	ldr	r3, [r2, r3]
 8013b20:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 8013b22:	187b      	adds	r3, r7, r1
 8013b24:	681a      	ldr	r2, [r3, #0]
 8013b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b28:	18d3      	adds	r3, r2, r3
 8013b2a:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8013b2c:	e029      	b.n	8013b82 <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8013b2e:	2180      	movs	r1, #128	; 0x80
 8013b30:	187b      	adds	r3, r7, r1
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8013b38:	187b      	adds	r3, r7, r1
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	001a      	movs	r2, r3
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d111      	bne.n	8013b6c <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8013b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013b4e:	1879      	adds	r1, r7, r1
 8013b50:	6809      	ldr	r1, [r1, #0]
 8013b52:	0018      	movs	r0, r3
 8013b54:	f001 fa7f 	bl	8015056 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013b58:	687a      	ldr	r2, [r7, #4]
 8013b5a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b5e:	0018      	movs	r0, r3
 8013b60:	f000 ff1c 	bl	801499c <_ux_device_stack_transfer_request>
 8013b64:	0003      	movs	r3, r0
 8013b66:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8013b68:	46c0      	nop			; (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 8013b6a:	e1c9      	b.n	8013f00 <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 8013b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 8013b74:	2180      	movs	r1, #128	; 0x80
 8013b76:	187b      	adds	r3, r7, r1
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b7c:	18d3      	adds	r3, r2, r3
 8013b7e:	187a      	adds	r2, r7, r1
 8013b80:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 8013b82:	2380      	movs	r3, #128	; 0x80
 8013b84:	18fb      	adds	r3, r7, r3
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d3cf      	bcc.n	8013b2e <_ux_device_stack_descriptor_send+0xb2>
        break;
 8013b8e:	e1b7      	b.n	8013f00 <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2b07      	cmp	r3, #7
 8013b94:	d113      	bne.n	8013bbe <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8013b96:	4b9c      	ldr	r3, [pc, #624]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	2398      	movs	r3, #152	; 0x98
 8013b9c:	005b      	lsls	r3, r3, #1
 8013b9e:	58d3      	ldr	r3, [r2, r3]
 8013ba0:	2180      	movs	r1, #128	; 0x80
 8013ba2:	187a      	adds	r2, r7, r1
 8013ba4:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8013ba6:	4b98      	ldr	r3, [pc, #608]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	239a      	movs	r3, #154	; 0x9a
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	58d3      	ldr	r3, [r2, r3]
 8013bb0:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8013bb2:	187b      	adds	r3, r7, r1
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013bb8:	18d3      	adds	r3, r2, r3
 8013bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013bbc:	e05b      	b.n	8013c76 <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8013bbe:	4b92      	ldr	r3, [pc, #584]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	2394      	movs	r3, #148	; 0x94
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	58d3      	ldr	r3, [r2, r3]
 8013bc8:	2180      	movs	r1, #128	; 0x80
 8013bca:	187a      	adds	r2, r7, r1
 8013bcc:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8013bce:	4b8e      	ldr	r3, [pc, #568]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	2396      	movs	r3, #150	; 0x96
 8013bd4:	005b      	lsls	r3, r3, #1
 8013bd6:	58d3      	ldr	r3, [r2, r3]
 8013bd8:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8013bda:	187b      	adds	r3, r7, r1
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013be0:	18d3      	adds	r3, r2, r3
 8013be2:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8013be4:	e047      	b.n	8013c76 <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 8013be6:	2280      	movs	r2, #128	; 0x80
 8013be8:	18bb      	adds	r3, r7, r2
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2b0f      	cmp	r3, #15
 8013bf4:	d113      	bne.n	8013c1e <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8013bf6:	18bb      	adds	r3, r7, r2
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	2b0f      	cmp	r3, #15
 8013c00:	d12e      	bne.n	8013c60 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8013c02:	2414      	movs	r4, #20
 8013c04:	193b      	adds	r3, r7, r4
 8013c06:	4982      	ldr	r1, [pc, #520]	; (8013e10 <_ux_device_stack_descriptor_send+0x394>)
 8013c08:	18ba      	adds	r2, r7, r2
 8013c0a:	6810      	ldr	r0, [r2, #0]
 8013c0c:	2204      	movs	r2, #4
 8013c0e:	f001 f83a 	bl	8014c86 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8013c12:	193b      	adds	r3, r7, r4
 8013c14:	689b      	ldr	r3, [r3, #8]
 8013c16:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 8013c1c:	e031      	b.n	8013c82 <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8013c1e:	2080      	movs	r0, #128	; 0x80
 8013c20:	183b      	adds	r3, r7, r0
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	3301      	adds	r3, #1
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d119      	bne.n	8013c60 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8013c2c:	2384      	movs	r3, #132	; 0x84
 8013c2e:	18fb      	adds	r3, r7, r3
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d10d      	bne.n	8013c54 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 8013c38:	2424      	movs	r4, #36	; 0x24
 8013c3a:	193b      	adds	r3, r7, r4
 8013c3c:	4975      	ldr	r1, [pc, #468]	; (8013e14 <_ux_device_stack_descriptor_send+0x398>)
 8013c3e:	183a      	adds	r2, r7, r0
 8013c40:	6810      	ldr	r0, [r2, #0]
 8013c42:	2208      	movs	r2, #8
 8013c44:	f001 f81f 	bl	8014c86 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8013c48:	193b      	adds	r3, r7, r4
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8013c52:	e016      	b.n	8013c82 <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8013c54:	2284      	movs	r2, #132	; 0x84
 8013c56:	18bb      	adds	r3, r7, r2
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	18ba      	adds	r2, r7, r2
 8013c5e:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8013c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c64:	1ad3      	subs	r3, r2, r3
 8013c66:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8013c68:	2180      	movs	r1, #128	; 0x80
 8013c6a:	187b      	adds	r3, r7, r1
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c70:	18d3      	adds	r3, r2, r3
 8013c72:	187a      	adds	r2, r7, r1
 8013c74:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 8013c76:	2380      	movs	r3, #128	; 0x80
 8013c78:	18fb      	adds	r3, r7, r3
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d3b1      	bcc.n	8013be6 <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 8013c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d000      	beq.n	8013c8a <_ux_device_stack_descriptor_send+0x20e>
 8013c88:	e137      	b.n	8013efa <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8013c8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d202      	bcs.n	8013c98 <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 8013c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c96:	e001      	b.n	8013c9c <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8013c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013c9e:	2380      	movs	r3, #128	; 0x80
 8013ca0:	005b      	lsls	r3, r3, #1
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d90d      	bls.n	8013cc2 <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013ca6:	2212      	movs	r2, #18
 8013ca8:	2109      	movs	r1, #9
 8013caa:	2002      	movs	r0, #2
 8013cac:	f000 fefc 	bl	8014aa8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cb2:	699b      	ldr	r3, [r3, #24]
 8013cb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013cb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013cb8:	2114      	movs	r1, #20
 8013cba:	4798      	blx	r3
 8013cbc:	0003      	movs	r3, r0
 8013cbe:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8013cc0:	e11e      	b.n	8013f00 <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8013cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013cc8:	2180      	movs	r1, #128	; 0x80
 8013cca:	1879      	adds	r1, r7, r1
 8013ccc:	6809      	ldr	r1, [r1, #0]
 8013cce:	0018      	movs	r0, r3
 8013cd0:	f001 f9c1 	bl	8015056 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8013cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	68fa      	ldr	r2, [r7, #12]
 8013cdc:	b2d2      	uxtb	r2, r2
 8013cde:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ce6:	0018      	movs	r0, r3
 8013ce8:	f000 fe58 	bl	801499c <_ux_device_stack_transfer_request>
 8013cec:	0003      	movs	r3, r0
 8013cee:	673b      	str	r3, [r7, #112]	; 0x70
        }
        break;
 8013cf0:	e103      	b.n	8013efa <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 8013cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d153      	bne.n	8013da0 <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8013cf8:	4b43      	ldr	r3, [pc, #268]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	23a6      	movs	r3, #166	; 0xa6
 8013cfe:	005b      	lsls	r3, r3, #1
 8013d00:	58d3      	ldr	r3, [r2, r3]
 8013d02:	1c9a      	adds	r2, r3, #2
 8013d04:	2380      	movs	r3, #128	; 0x80
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d90d      	bls.n	8013d28 <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013d0c:	2212      	movs	r2, #18
 8013d0e:	2109      	movs	r1, #9
 8013d10:	2002      	movs	r0, #2
 8013d12:	f000 fec9 	bl	8014aa8 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d18:	699b      	ldr	r3, [r3, #24]
 8013d1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d1c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013d1e:	2114      	movs	r1, #20
 8013d20:	4798      	blx	r3
 8013d22:	0003      	movs	r3, r0
 8013d24:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8013d26:	e0eb      	b.n	8013f00 <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8013d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8013d2e:	4b36      	ldr	r3, [pc, #216]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	23a6      	movs	r3, #166	; 0xa6
 8013d34:	005b      	lsls	r3, r3, #1
 8013d36:	58d3      	ldr	r3, [r2, r3]
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	3302      	adds	r3, #2
 8013d3c:	b2da      	uxtb	r2, r3
 8013d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d40:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8013d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d44:	3301      	adds	r3, #1
 8013d46:	2203      	movs	r2, #3
 8013d48:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8013d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d4c:	1c98      	adds	r0, r3, #2
 8013d4e:	4b2e      	ldr	r3, [pc, #184]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	23a4      	movs	r3, #164	; 0xa4
 8013d54:	005b      	lsls	r3, r3, #1
 8013d56:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8013d58:	4b2b      	ldr	r3, [pc, #172]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013d5a:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8013d5c:	23a6      	movs	r3, #166	; 0xa6
 8013d5e:	005b      	lsls	r3, r3, #1
 8013d60:	58d3      	ldr	r3, [r2, r3]
 8013d62:	001a      	movs	r2, r3
 8013d64:	f001 f977 	bl	8015056 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8013d68:	4b27      	ldr	r3, [pc, #156]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	23a6      	movs	r3, #166	; 0xa6
 8013d6e:	005b      	lsls	r3, r3, #1
 8013d70:	58d3      	ldr	r3, [r2, r3]
 8013d72:	3302      	adds	r3, #2
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d907      	bls.n	8013d8a <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8013d7a:	4b23      	ldr	r3, [pc, #140]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	23a6      	movs	r3, #166	; 0xa6
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	58d3      	ldr	r3, [r2, r3]
 8013d84:	3302      	adds	r3, #2
 8013d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013d88:	e001      	b.n	8013d8e <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d94:	0018      	movs	r0, r3
 8013d96:	f000 fe01 	bl	801499c <_ux_device_stack_transfer_request>
 8013d9a:	0003      	movs	r3, r0
 8013d9c:	673b      	str	r3, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8013d9e:	e0ae      	b.n	8013efe <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8013da0:	4b19      	ldr	r3, [pc, #100]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	23a0      	movs	r3, #160	; 0xa0
 8013da6:	005b      	lsls	r3, r3, #1
 8013da8:	58d3      	ldr	r3, [r2, r3]
 8013daa:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8013dac:	4b16      	ldr	r3, [pc, #88]	; (8013e08 <_ux_device_stack_descriptor_send+0x38c>)
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	23a2      	movs	r3, #162	; 0xa2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	58d3      	ldr	r3, [r2, r3]
 8013db6:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8013db8:	e088      	b.n	8013ecc <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 8013dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dbc:	0018      	movs	r0, r3
 8013dbe:	f001 fb26 	bl	801540e <_ux_utility_short_get>
 8013dc2:	0002      	movs	r2, r0
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d000      	beq.n	8013dcc <_ux_device_stack_descriptor_send+0x350>
 8013dca:	e070      	b.n	8013eae <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 8013dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dce:	3302      	adds	r3, #2
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	001a      	movs	r2, r3
 8013dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d169      	bne.n	8013eae <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8013dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ddc:	3303      	adds	r3, #3
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	3301      	adds	r3, #1
 8013de2:	005a      	lsls	r2, r3, #1
 8013de4:	2380      	movs	r3, #128	; 0x80
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	429a      	cmp	r2, r3
 8013dea:	dd15      	ble.n	8013e18 <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013dec:	2212      	movs	r2, #18
 8013dee:	2109      	movs	r1, #9
 8013df0:	2002      	movs	r0, #2
 8013df2:	f000 fe59 	bl	8014aa8 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013df8:	699b      	ldr	r3, [r3, #24]
 8013dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013dfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013dfe:	2114      	movs	r1, #20
 8013e00:	4798      	blx	r3
 8013e02:	0003      	movs	r3, r0
 8013e04:	673b      	str	r3, [r7, #112]	; 0x70
                            break;
 8013e06:	e065      	b.n	8013ed4 <_ux_device_stack_descriptor_send+0x458>
 8013e08:	20019298 	.word	0x20019298
 8013e0c:	08018bcc 	.word	0x08018bcc
 8013e10:	20000058 	.word	0x20000058
 8013e14:	20000044 	.word	0x20000044
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8013e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8013e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e20:	3303      	adds	r3, #3
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	3301      	adds	r3, #1
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	18db      	adds	r3, r3, r3
 8013e2a:	b2da      	uxtb	r2, r3
 8013e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e2e:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8013e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e32:	3301      	adds	r3, #1
 8013e34:	2203      	movs	r2, #3
 8013e36:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8013e38:	2300      	movs	r3, #0
 8013e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8013e3c:	e015      	b.n	8013e6a <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8013e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e40:	3304      	adds	r3, #4
 8013e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e44:	18d2      	adds	r2, r2, r3
 8013e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e48:	3301      	adds	r3, #1
 8013e4a:	005b      	lsls	r3, r3, #1
 8013e4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013e4e:	18cb      	adds	r3, r1, r3
 8013e50:	7812      	ldrb	r2, [r2, #0]
 8013e52:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8013e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e56:	3301      	adds	r3, #1
 8013e58:	005b      	lsls	r3, r3, #1
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e5e:	18d3      	adds	r3, r2, r3
 8013e60:	2200      	movs	r2, #0
 8013e62:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8013e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e66:	3301      	adds	r3, #1
 8013e68:	663b      	str	r3, [r7, #96]	; 0x60
 8013e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e6c:	3303      	adds	r3, #3
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	001a      	movs	r2, r3
 8013e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d3e2      	bcc.n	8013e3e <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 8013e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e7a:	3303      	adds	r3, #3
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	005b      	lsls	r3, r3, #1
 8013e82:	001a      	movs	r2, r3
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d906      	bls.n	8013e98 <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8013e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e8c:	3303      	adds	r3, #3
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	3301      	adds	r3, #1
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013e96:	e001      	b.n	8013e9c <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ea2:	0018      	movs	r0, r3
 8013ea4:	f000 fd7a 	bl	801499c <_ux_device_stack_transfer_request>
 8013ea8:	0003      	movs	r3, r0
 8013eaa:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8013eac:	e012      	b.n	8013ed4 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 8013eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013eb0:	3303      	adds	r3, #3
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	001a      	movs	r2, r3
 8013eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013eb8:	1a9b      	subs	r3, r3, r2
 8013eba:	3b04      	subs	r3, #4
 8013ebc:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 8013ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ec0:	3303      	adds	r3, #3
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ec8:	18d3      	adds	r3, r2, r3
 8013eca:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 8013ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d000      	beq.n	8013ed4 <_ux_device_stack_descriptor_send+0x458>
 8013ed2:	e772      	b.n	8013dba <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 8013ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d111      	bne.n	8013efe <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013edc:	699b      	ldr	r3, [r3, #24]
 8013ede:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ee0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013ee2:	2114      	movs	r1, #20
 8013ee4:	4798      	blx	r3
                return(UX_ERROR);
 8013ee6:	23ff      	movs	r3, #255	; 0xff
 8013ee8:	e00b      	b.n	8013f02 <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013eec:	699b      	ldr	r3, [r3, #24]
 8013eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ef0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013ef2:	2114      	movs	r1, #20
 8013ef4:	4798      	blx	r3
        return(UX_ERROR);
 8013ef6:	23ff      	movs	r3, #255	; 0xff
 8013ef8:	e003      	b.n	8013f02 <_ux_device_stack_descriptor_send+0x486>
        break;
 8013efa:	46c0      	nop			; (mov r8, r8)
 8013efc:	e000      	b.n	8013f00 <_ux_device_stack_descriptor_send+0x484>
        break;
 8013efe:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8013f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8013f02:	0018      	movs	r0, r3
 8013f04:	46bd      	mov	sp, r7
 8013f06:	b023      	add	sp, #140	; 0x8c
 8013f08:	bd90      	pop	{r4, r7, pc}
 8013f0a:	46c0      	nop			; (mov r8, r8)

08013f0c <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b092      	sub	sp, #72	; 0x48
 8013f10:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 8013f12:	23ff      	movs	r3, #255	; 0xff
 8013f14:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013f16:	4b2d      	ldr	r3, [pc, #180]	; (8013fcc <_ux_device_stack_disconnect+0xc0>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013f1c:	4b2b      	ldr	r3, [pc, #172]	; (8013fcc <_ux_device_stack_disconnect+0xc0>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	3320      	adds	r3, #32
 8013f22:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8013f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b03      	cmp	r3, #3
 8013f2a:	d127      	bne.n	8013f7c <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8013f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2e:	22f0      	movs	r2, #240	; 0xf0
 8013f30:	589b      	ldr	r3, [r3, r2]
 8013f32:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 8013f34:	e01c      	b.n	8013f70 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8013f36:	1d3b      	adds	r3, r7, #4
 8013f38:	2203      	movs	r2, #3
 8013f3a:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8013f3c:	1d3b      	adds	r3, r7, #4
 8013f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f40:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 8013f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 8013f48:	1d3b      	adds	r3, r7, #4
 8013f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f4c:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 8013f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d004      	beq.n	8013f5e <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 8013f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f58:	1d3a      	adds	r2, r7, #4
 8013f5a:	0010      	movs	r0, r2
 8013f5c:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 8013f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f62:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8013f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f66:	0018      	movs	r0, r3
 8013f68:	f000 fab0 	bl	80144cc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8013f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6e:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface != UX_NULL)
 8013f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d1df      	bne.n	8013f36 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8013f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f78:	2201      	movs	r2, #1
 8013f7a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 8013f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d108      	bne.n	8013f96 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8013f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f86:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8013f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f8a:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8013f8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f8e:	210f      	movs	r1, #15
 8013f90:	4798      	blx	r3
 8013f92:	0003      	movs	r3, r0
 8013f94:	643b      	str	r3, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8013f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f98:	22cc      	movs	r2, #204	; 0xcc
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8013fa4:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <_ux_device_stack_disconnect+0xc0>)
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	23e0      	movs	r3, #224	; 0xe0
 8013faa:	005b      	lsls	r3, r3, #1
 8013fac:	58d3      	ldr	r3, [r2, r3]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d006      	beq.n	8013fc0 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8013fb2:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <_ux_device_stack_disconnect+0xc0>)
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	23e0      	movs	r3, #224	; 0xe0
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	58d3      	ldr	r3, [r2, r3]
 8013fbc:	200a      	movs	r0, #10
 8013fbe:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 8013fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8013fc2:	0018      	movs	r0, r3
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	b012      	add	sp, #72	; 0x48
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	46c0      	nop			; (mov r8, r8)
 8013fcc:	20019298 	.word	0x20019298

08013fd0 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b088      	sub	sp, #32
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013fd8:	4b17      	ldr	r3, [pc, #92]	; (8014038 <_ux_device_stack_endpoint_stall+0x68>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 8013fde:	23ff      	movs	r3, #255	; 0xff
 8013fe0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8013fe6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013fe8:	b672      	cpsid	i
    return(primask_value);
 8013fea:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8013fec:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8013fee:	4b12      	ldr	r3, [pc, #72]	; (8014038 <_ux_device_stack_endpoint_stall+0x68>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	6a1b      	ldr	r3, [r3, #32]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d013      	beq.n	8014020 <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8013ffc:	2b02      	cmp	r3, #2
 8013ffe:	d00f      	beq.n	8014020 <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	699b      	ldr	r3, [r3, #24]
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	69b8      	ldr	r0, [r7, #24]
 8014008:	2114      	movs	r1, #20
 801400a:	4798      	blx	r3
 801400c:	0003      	movs	r3, r0
 801400e:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	699b      	ldr	r3, [r3, #24]
 8014014:	2203      	movs	r2, #3
 8014016:	4013      	ands	r3, r2
 8014018:	d002      	beq.n	8014020 <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2202      	movs	r2, #2
 801401e:	605a      	str	r2, [r3, #4]
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f383 8810 	msr	PRIMASK, r3
}
 801402a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 801402c:	69fb      	ldr	r3, [r7, #28]
}
 801402e:	0018      	movs	r0, r3
 8014030:	46bd      	mov	sp, r7
 8014032:	b008      	add	sp, #32
 8014034:	bd80      	pop	{r7, pc}
 8014036:	46c0      	nop			; (mov r8, r8)
 8014038:	20019298 	.word	0x20019298

0801403c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b08a      	sub	sp, #40	; 0x28
 8014040:	af00      	add	r7, sp, #0
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014048:	4b3c      	ldr	r3, [pc, #240]	; (801413c <_ux_device_stack_get_status+0x100>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801404e:	4b3b      	ldr	r3, [pc, #236]	; (801413c <_ux_device_stack_get_status+0x100>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	3320      	adds	r3, #32
 8014054:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	333c      	adds	r3, #60	; 0x3c
 801405a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801405c:	69bb      	ldr	r3, [r7, #24]
 801405e:	3330      	adds	r3, #48	; 0x30
 8014060:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	68db      	ldr	r3, [r3, #12]
 8014066:	2200      	movs	r2, #0
 8014068:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	3301      	adds	r3, #1
 8014070:	2200      	movs	r2, #0
 8014072:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 8014074:	2302      	movs	r3, #2
 8014076:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2203      	movs	r2, #3
 801407c:	4013      	ands	r3, r2
 801407e:	d002      	beq.n	8014086 <_ux_device_stack_get_status+0x4a>
 8014080:	2b02      	cmp	r3, #2
 8014082:	d024      	beq.n	80140ce <_ux_device_stack_get_status+0x92>
 8014084:	e03e      	b.n	8014104 <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	23f0      	movs	r3, #240	; 0xf0
 801408a:	021b      	lsls	r3, r3, #8
 801408c:	429a      	cmp	r2, r3
 801408e:	d102      	bne.n	8014096 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8014090:	2301      	movs	r3, #1
 8014092:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 8014094:	e03e      	b.n	8014114 <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8014096:	4b29      	ldr	r3, [pc, #164]	; (801413c <_ux_device_stack_get_status+0x100>)
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	23d0      	movs	r3, #208	; 0xd0
 801409c:	005b      	lsls	r3, r3, #1
 801409e:	58d3      	ldr	r3, [r2, r3]
 80140a0:	2b02      	cmp	r3, #2
 80140a2:	d103      	bne.n	80140ac <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	2201      	movs	r2, #1
 80140aa:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 80140ac:	4b23      	ldr	r3, [pc, #140]	; (801413c <_ux_device_stack_get_status+0x100>)
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	23d4      	movs	r3, #212	; 0xd4
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	58d3      	ldr	r3, [r2, r3]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d02c      	beq.n	8014114 <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	781a      	ldrb	r2, [r3, #0]
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	2102      	movs	r1, #2
 80140c6:	430a      	orrs	r2, r1
 80140c8:	b2d2      	uxtb	r2, r2
 80140ca:	701a      	strb	r2, [r3, #0]
        break;
 80140cc:	e022      	b.n	8014114 <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 80140ce:	6a3b      	ldr	r3, [r7, #32]
 80140d0:	699b      	ldr	r3, [r3, #24]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	6a38      	ldr	r0, [r7, #32]
 80140d6:	2115      	movs	r1, #21
 80140d8:	4798      	blx	r3
 80140da:	0003      	movs	r3, r0
 80140dc:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	d007      	beq.n	80140f4 <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	2b01      	cmp	r3, #1
 80140e8:	d116      	bne.n	8014118 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	68db      	ldr	r3, [r3, #12]
 80140ee:	2201      	movs	r2, #1
 80140f0:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 80140f2:	e011      	b.n	8014118 <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	699b      	ldr	r3, [r3, #24]
 80140f8:	69ba      	ldr	r2, [r7, #24]
 80140fa:	6a38      	ldr	r0, [r7, #32]
 80140fc:	2114      	movs	r1, #20
 80140fe:	4798      	blx	r3
            return(UX_SUCCESS);            
 8014100:	2300      	movs	r3, #0
 8014102:	e016      	b.n	8014132 <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014104:	6a3b      	ldr	r3, [r7, #32]
 8014106:	699b      	ldr	r3, [r3, #24]
 8014108:	69ba      	ldr	r2, [r7, #24]
 801410a:	6a38      	ldr	r0, [r7, #32]
 801410c:	2114      	movs	r1, #20
 801410e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8014110:	2300      	movs	r3, #0
 8014112:	e00e      	b.n	8014132 <_ux_device_stack_get_status+0xf6>
        break;
 8014114:	46c0      	nop			; (mov r8, r8)
 8014116:	e000      	b.n	801411a <_ux_device_stack_get_status+0xde>
        break;
 8014118:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	2203      	movs	r2, #3
 801411e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8014120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	0018      	movs	r0, r3
 8014128:	f000 fc38 	bl	801499c <_ux_device_stack_transfer_request>
 801412c:	0003      	movs	r3, r0
 801412e:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 8014130:	693b      	ldr	r3, [r7, #16]
}
 8014132:	0018      	movs	r0, r3
 8014134:	46bd      	mov	sp, r7
 8014136:	b00a      	add	sp, #40	; 0x28
 8014138:	bd80      	pop	{r7, pc}
 801413a:	46c0      	nop			; (mov r8, r8)
 801413c:	20019298 	.word	0x20019298

08014140 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b094      	sub	sp, #80	; 0x50
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801414e:	4bbb      	ldr	r3, [pc, #748]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	3320      	adds	r3, #32
 8014154:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 8014156:	4bb9      	ldr	r3, [pc, #740]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014158:	681a      	ldr	r2, [r3, #0]
 801415a:	239c      	movs	r3, #156	; 0x9c
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	68f9      	ldr	r1, [r7, #12]
 8014160:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8014162:	4bb6      	ldr	r3, [pc, #728]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	239e      	movs	r3, #158	; 0x9e
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	68b9      	ldr	r1, [r7, #8]
 801416c:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 801416e:	4bb3      	ldr	r3, [pc, #716]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	2398      	movs	r3, #152	; 0x98
 8014174:	005b      	lsls	r3, r3, #1
 8014176:	6879      	ldr	r1, [r7, #4]
 8014178:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801417a:	4bb0      	ldr	r3, [pc, #704]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 801417c:	681a      	ldr	r2, [r3, #0]
 801417e:	239a      	movs	r3, #154	; 0x9a
 8014180:	005b      	lsls	r3, r3, #1
 8014182:	6839      	ldr	r1, [r7, #0]
 8014184:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 8014186:	4bad      	ldr	r3, [pc, #692]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	23a0      	movs	r3, #160	; 0xa0
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014190:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 8014192:	4baa      	ldr	r3, [pc, #680]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	23a2      	movs	r3, #162	; 0xa2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801419c:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 801419e:	4ba7      	ldr	r3, [pc, #668]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 80141a0:	681a      	ldr	r2, [r3, #0]
 80141a2:	23a4      	movs	r3, #164	; 0xa4
 80141a4:	005b      	lsls	r3, r3, #1
 80141a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80141a8:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 80141aa:	4ba4      	ldr	r3, [pc, #656]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	23a6      	movs	r3, #166	; 0xa6
 80141b0:	005b      	lsls	r3, r3, #1
 80141b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80141b4:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 80141b6:	4ba1      	ldr	r3, [pc, #644]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	23e0      	movs	r3, #224	; 0xe0
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80141c0:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 80141c2:	238a      	movs	r3, #138	; 0x8a
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	001a      	movs	r2, r3
 80141c8:	2100      	movs	r1, #0
 80141ca:	2000      	movs	r0, #0
 80141cc:	f000 fddc 	bl	8014d88 <_ux_utility_memory_allocate>
 80141d0:	0003      	movs	r3, r0
 80141d2:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 80141d4:	6a3b      	ldr	r3, [r7, #32]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d101      	bne.n	80141de <_ux_device_stack_initialize+0x9e>
        return(UX_MEMORY_INSUFFICIENT);
 80141da:	2312      	movs	r3, #18
 80141dc:	e170      	b.n	80144c0 <_ux_device_stack_initialize+0x380>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 80141de:	4b97      	ldr	r3, [pc, #604]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 80141e0:	681a      	ldr	r2, [r3, #0]
 80141e2:	23ac      	movs	r3, #172	; 0xac
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	6a39      	ldr	r1, [r7, #32]
 80141e8:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	336c      	adds	r3, #108	; 0x6c
 80141ee:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 80141f0:	2380      	movs	r3, #128	; 0x80
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	001a      	movs	r2, r3
 80141f6:	2101      	movs	r1, #1
 80141f8:	2000      	movs	r0, #0
 80141fa:	f000 fdc5 	bl	8014d88 <_ux_utility_memory_allocate>
 80141fe:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d102      	bne.n	8014212 <_ux_device_stack_initialize+0xd2>
        status = UX_MEMORY_INSUFFICIENT;
 801420c:	2312      	movs	r3, #18
 801420e:	64bb      	str	r3, [r7, #72]	; 0x48
 8014210:	e001      	b.n	8014216 <_ux_device_stack_initialize+0xd6>
    else
        status = UX_SUCCESS;
 8014212:	2300      	movs	r3, #0
 8014214:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 8014216:	2300      	movs	r3, #0
 8014218:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 801421a:	2300      	movs	r3, #0
 801421c:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 801421e:	2300      	movs	r3, #0
 8014220:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 8014222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014224:	2b00      	cmp	r3, #0
 8014226:	d000      	beq.n	801422a <_ux_device_stack_initialize+0xea>
 8014228:	e094      	b.n	8014354 <_ux_device_stack_initialize+0x214>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801422a:	4b84      	ldr	r3, [pc, #528]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	2398      	movs	r3, #152	; 0x98
 8014230:	005b      	lsls	r3, r3, #1
 8014232:	58d3      	ldr	r3, [r2, r3]
 8014234:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8014236:	4b81      	ldr	r3, [pc, #516]	; (801443c <_ux_device_stack_initialize+0x2fc>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	239a      	movs	r3, #154	; 0x9a
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	58d3      	ldr	r3, [r2, r3]
 8014240:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 8014242:	2300      	movs	r3, #0
 8014244:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 8014246:	2300      	movs	r3, #0
 8014248:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 801424a:	2300      	movs	r3, #0
 801424c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 801424e:	e057      	b.n	8014300 <_ux_device_stack_initialize+0x1c0>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8014250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 8014256:	2117      	movs	r1, #23
 8014258:	187b      	adds	r3, r7, r1
 801425a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801425c:	7852      	ldrb	r2, [r2, #1]
 801425e:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8014260:	187b      	adds	r3, r7, r1
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	2b02      	cmp	r3, #2
 8014266:	d029      	beq.n	80142bc <_ux_device_stack_initialize+0x17c>
 8014268:	2b04      	cmp	r3, #4
 801426a:	d13e      	bne.n	80142ea <_ux_device_stack_initialize+0x1aa>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 801426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426e:	3303      	adds	r3, #3
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d10b      	bne.n	801428e <_ux_device_stack_initialize+0x14e>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 8014276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427a:	18d3      	adds	r3, r2, r3
 801427c:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014280:	3304      	adds	r3, #4
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 8014286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014288:	3301      	adds	r3, #1
 801428a:	63bb      	str	r3, [r7, #56]	; 0x38
 801428c:	e00a      	b.n	80142a4 <_ux_device_stack_initialize+0x164>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 801428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014290:	3304      	adds	r3, #4
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	001a      	movs	r2, r3
 8014296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014298:	4293      	cmp	r3, r2
 801429a:	d203      	bcs.n	80142a4 <_ux_device_stack_initialize+0x164>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429e:	3304      	adds	r3, #4
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 80142a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a6:	3302      	adds	r3, #2
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	001a      	movs	r2, r3
 80142ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142ae:	4293      	cmp	r3, r2
 80142b0:	d21d      	bcs.n	80142ee <_ux_device_stack_initialize+0x1ae>
                    max_interface_number = *(device_framework + 2);
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	3302      	adds	r3, #2
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 80142ba:	e018      	b.n	80142ee <_ux_device_stack_initialize+0x1ae>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 80142bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d901      	bls.n	80142c8 <_ux_device_stack_initialize+0x188>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 80142c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c6:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 80142c8:	2300      	movs	r3, #0
 80142ca:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 80142cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d0:	18d3      	adds	r3, r2, r3
 80142d2:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 80142d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142d8:	429a      	cmp	r2, r3
 80142da:	d901      	bls.n	80142e0 <_ux_device_stack_initialize+0x1a0>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 80142dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142de:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 80142e4:	2300      	movs	r3, #0
 80142e6:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 80142e8:	e002      	b.n	80142f0 <_ux_device_stack_initialize+0x1b0>

            default:
                break;
 80142ea:	46c0      	nop			; (mov r8, r8)
 80142ec:	e000      	b.n	80142f0 <_ux_device_stack_initialize+0x1b0>
                break;
 80142ee:	46c0      	nop			; (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 80142f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80142f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	18d3      	adds	r3, r2, r3
 80142fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 8014300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1a4      	bne.n	8014250 <_ux_device_stack_initialize+0x110>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 8014306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801430a:	18d3      	adds	r3, r2, r3
 801430c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 801430e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014312:	429a      	cmp	r2, r3
 8014314:	d901      	bls.n	801431a <_ux_device_stack_initialize+0x1da>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 8014316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014318:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801431a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801431e:	429a      	cmp	r2, r3
 8014320:	d901      	bls.n	8014326 <_ux_device_stack_initialize+0x1e6>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 8014322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014324:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 8014326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014328:	2b00      	cmp	r3, #0
 801432a:	d106      	bne.n	801433a <_ux_device_stack_initialize+0x1fa>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 801432c:	2242      	movs	r2, #66	; 0x42
 801432e:	2103      	movs	r1, #3
 8014330:	2002      	movs	r0, #2
 8014332:	f000 fbb9 	bl	8014aa8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 8014336:	2342      	movs	r3, #66	; 0x42
 8014338:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 801433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801433c:	2b00      	cmp	r3, #0
 801433e:	d109      	bne.n	8014354 <_ux_device_stack_initialize+0x214>
 8014340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014342:	2b0f      	cmp	r3, #15
 8014344:	d906      	bls.n	8014354 <_ux_device_stack_initialize+0x214>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 8014346:	2212      	movs	r2, #18
 8014348:	2103      	movs	r1, #3
 801434a:	2002      	movs	r0, #2
 801434c:	f000 fbac 	bl	8014aa8 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 8014350:	2312      	movs	r3, #18
 8014352:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 8014354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014356:	2b00      	cmp	r3, #0
 8014358:	d11a      	bne.n	8014390 <_ux_device_stack_initialize+0x250>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	21f8      	movs	r1, #248	; 0xf8
 801435e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014360:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8014362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014364:	2380      	movs	r3, #128	; 0x80
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801436a:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 801436c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801436e:	2338      	movs	r3, #56	; 0x38
 8014370:	2100      	movs	r1, #0
 8014372:	2000      	movs	r0, #0
 8014374:	f000 fe10 	bl	8014f98 <_ux_utility_memory_allocate_mulc_safe>
 8014378:	0003      	movs	r3, r0
 801437a:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d102      	bne.n	8014388 <_ux_device_stack_initialize+0x248>
            status = UX_MEMORY_INSUFFICIENT;
 8014382:	2312      	movs	r3, #18
 8014384:	64bb      	str	r3, [r7, #72]	; 0x48
 8014386:	e003      	b.n	8014390 <_ux_device_stack_initialize+0x250>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438a:	21f4      	movs	r1, #244	; 0xf4
 801438c:	693a      	ldr	r2, [r7, #16]
 801438e:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 8014390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014392:	2b00      	cmp	r3, #0
 8014394:	d046      	beq.n	8014424 <_ux_device_stack_initialize+0x2e4>
 8014396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014398:	2b00      	cmp	r3, #0
 801439a:	d143      	bne.n	8014424 <_ux_device_stack_initialize+0x2e4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801439c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801439e:	2390      	movs	r3, #144	; 0x90
 80143a0:	2100      	movs	r1, #0
 80143a2:	2000      	movs	r0, #0
 80143a4:	f000 fdf8 	bl	8014f98 <_ux_utility_memory_allocate_mulc_safe>
 80143a8:	0003      	movs	r3, r0
 80143aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 80143ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d102      	bne.n	80143b8 <_ux_device_stack_initialize+0x278>
            status = UX_MEMORY_INSUFFICIENT;
 80143b2:	2312      	movs	r3, #18
 80143b4:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 80143b6:	e037      	b.n	8014428 <_ux_device_stack_initialize+0x2e8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 80143b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ba:	21fc      	movs	r1, #252	; 0xfc
 80143bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143be:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 80143c0:	e022      	b.n	8014408 <_ux_device_stack_initialize+0x2c8>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 80143c2:	2380      	movs	r3, #128	; 0x80
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	001a      	movs	r2, r3
 80143c8:	2101      	movs	r1, #1
 80143ca:	2000      	movs	r0, #0
 80143cc:	f000 fcdc 	bl	8014d88 <_ux_utility_memory_allocate>
 80143d0:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 80143d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d4:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 80143d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d102      	bne.n	80143e4 <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 80143de:	2312      	movs	r3, #18
 80143e0:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 80143e2:	e01e      	b.n	8014422 <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 80143e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143e6:	3360      	adds	r3, #96	; 0x60
 80143e8:	4915      	ldr	r1, [pc, #84]	; (8014440 <_ux_device_stack_initialize+0x300>)
 80143ea:	2200      	movs	r2, #0
 80143ec:	0018      	movs	r0, r3
 80143ee:	f000 ff98 	bl	8015322 <_ux_utility_semaphore_create>
 80143f2:	0003      	movs	r3, r0
 80143f4:	64bb      	str	r3, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 80143f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <_ux_device_stack_initialize+0x2c2>
                {
                    status = UX_SEMAPHORE_ERROR;
 80143fc:	2315      	movs	r3, #21
 80143fe:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8014400:	e00f      	b.n	8014422 <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8014402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014404:	3390      	adds	r3, #144	; 0x90
 8014406:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 8014408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440a:	22fc      	movs	r2, #252	; 0xfc
 801440c:	5899      	ldr	r1, [r3, r2]
 801440e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014410:	0013      	movs	r3, r2
 8014412:	00db      	lsls	r3, r3, #3
 8014414:	189b      	adds	r3, r3, r2
 8014416:	011b      	lsls	r3, r3, #4
 8014418:	18cb      	adds	r3, r1, r3
 801441a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801441c:	429a      	cmp	r2, r3
 801441e:	d3d0      	bcc.n	80143c2 <_ux_device_stack_initialize+0x282>
        if (endpoints_pool == UX_NULL)
 8014420:	e002      	b.n	8014428 <_ux_device_stack_initialize+0x2e8>
 8014422:	e001      	b.n	8014428 <_ux_device_stack_initialize+0x2e8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8014424:	2300      	movs	r3, #0
 8014426:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 8014428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801442a:	2b00      	cmp	r3, #0
 801442c:	d101      	bne.n	8014432 <_ux_device_stack_initialize+0x2f2>
        return(UX_SUCCESS);
 801442e:	2300      	movs	r3, #0
 8014430:	e046      	b.n	80144c0 <_ux_device_stack_initialize+0x380>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8014432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014434:	2b00      	cmp	r3, #0
 8014436:	d026      	beq.n	8014486 <_ux_device_stack_initialize+0x346>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 8014438:	e019      	b.n	801446e <_ux_device_stack_initialize+0x32e>
 801443a:	46c0      	nop			; (mov r8, r8)
 801443c:	20019298 	.word	0x20019298
 8014440:	08018878 	.word	0x08018878
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8014444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014448:	2b00      	cmp	r3, #0
 801444a:	d004      	beq.n	8014456 <_ux_device_stack_initialize+0x316>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801444e:	3360      	adds	r3, #96	; 0x60
 8014450:	0018      	movs	r0, r3
 8014452:	f000 ff82 	bl	801535a <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 8014456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801445a:	2b00      	cmp	r3, #0
 801445c:	d004      	beq.n	8014468 <_ux_device_stack_initialize+0x328>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014462:	0018      	movs	r0, r3
 8014464:	f000 fe14 	bl	8015090 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 8014468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801446a:	3b90      	subs	r3, #144	; 0x90
 801446c:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014470:	22fc      	movs	r2, #252	; 0xfc
 8014472:	589b      	ldr	r3, [r3, r2]
 8014474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014476:	429a      	cmp	r2, r3
 8014478:	d2e4      	bcs.n	8014444 <_ux_device_stack_initialize+0x304>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 801447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447c:	22fc      	movs	r2, #252	; 0xfc
 801447e:	589b      	ldr	r3, [r3, r2]
 8014480:	0018      	movs	r0, r3
 8014482:	f000 fe05 	bl	8015090 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	22f4      	movs	r2, #244	; 0xf4
 801448a:	589b      	ldr	r3, [r3, r2]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d005      	beq.n	801449c <_ux_device_stack_initialize+0x35c>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 8014490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014492:	22f4      	movs	r2, #244	; 0xf4
 8014494:	589b      	ldr	r3, [r3, r2]
 8014496:	0018      	movs	r0, r3
 8014498:	f000 fdfa 	bl	8015090 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d004      	beq.n	80144ae <_ux_device_stack_initialize+0x36e>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144a8:	0018      	movs	r0, r3
 80144aa:	f000 fdf1 	bl	8015090 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 80144ae:	4b06      	ldr	r3, [pc, #24]	; (80144c8 <_ux_device_stack_initialize+0x388>)
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	23ac      	movs	r3, #172	; 0xac
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	58d3      	ldr	r3, [r2, r3]
 80144b8:	0018      	movs	r0, r3
 80144ba:	f000 fde9 	bl	8015090 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 80144be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80144c0:	0018      	movs	r0, r3
 80144c2:	46bd      	mov	sp, r7
 80144c4:	b014      	add	sp, #80	; 0x50
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	20019298 	.word	0x20019298

080144cc <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b086      	sub	sp, #24
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80144d4:	4b20      	ldr	r3, [pc, #128]	; (8014558 <_ux_device_stack_interface_delete+0x8c>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	3320      	adds	r3, #32
 80144da:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144e0:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 80144e2:	e01c      	b.n	801451e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ec:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 80144ee:	4b1a      	ldr	r3, [pc, #104]	; (8014558 <_ux_device_stack_interface_delete+0x8c>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	699b      	ldr	r3, [r3, #24]
 80144f8:	68fa      	ldr	r2, [r7, #12]
 80144fa:	68b8      	ldr	r0, [r7, #8]
 80144fc:	210f      	movs	r1, #15
 80144fe:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	2200      	movs	r2, #0
 8014504:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2200      	movs	r2, #0
 801450a:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2200      	movs	r2, #0
 8014510:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2200      	movs	r2, #0
 8014516:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1df      	bne.n	80144e4 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	21f0      	movs	r1, #240	; 0xf0
 801452c:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2200      	movs	r2, #0
 8014538:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2200      	movs	r2, #0
 801453e:	631a      	str	r2, [r3, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2200      	movs	r2, #0
 8014544:	635a      	str	r2, [r3, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2200      	movs	r2, #0
 801454a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 801454c:	2300      	movs	r3, #0
}
 801454e:	0018      	movs	r0, r3
 8014550:	46bd      	mov	sp, r7
 8014552:	b006      	add	sp, #24
 8014554:	bd80      	pop	{r7, pc}
 8014556:	46c0      	nop			; (mov r8, r8)
 8014558:	20019298 	.word	0x20019298

0801455c <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b092      	sub	sp, #72	; 0x48
 8014560:	af00      	add	r7, sp, #0
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	60b9      	str	r1, [r7, #8]
 8014566:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014568:	4b86      	ldr	r3, [pc, #536]	; (8014784 <_ux_device_stack_interface_set+0x228>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801456e:	4b85      	ldr	r3, [pc, #532]	; (8014784 <_ux_device_stack_interface_set+0x228>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	3320      	adds	r3, #32
 8014574:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 8014576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014578:	22f4      	movs	r2, #244	; 0xf4
 801457a:	589b      	ldr	r3, [r3, r2]
 801457c:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 801457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014580:	22f8      	movs	r2, #248	; 0xf8
 8014582:	589b      	ldr	r3, [r3, r2]
 8014584:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 8014586:	e009      	b.n	801459c <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 8014588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d009      	beq.n	80145a4 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 8014590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014592:	3338      	adds	r3, #56	; 0x38
 8014594:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 8014596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014598:	3b01      	subs	r3, #1
 801459a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 801459c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1f2      	bne.n	8014588 <_ux_device_stack_interface_set+0x2c>
 80145a2:	e000      	b.n	80145a6 <_ux_device_stack_interface_set+0x4a>
            break;
 80145a4:	46c0      	nop			; (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 80145a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d101      	bne.n	80145b0 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 80145ac:	2312      	movs	r3, #18
 80145ae:	e0e5      	b.n	801477c <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 80145b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b2:	2201      	movs	r2, #1
 80145b4:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 80145b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b8:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 80145ba:	4973      	ldr	r1, [pc, #460]	; (8014788 <_ux_device_stack_interface_set+0x22c>)
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	2209      	movs	r2, #9
 80145c0:	f000 fb61 	bl	8014c86 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 80145c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c6:	22f0      	movs	r2, #240	; 0xf0
 80145c8:	589b      	ldr	r3, [r3, r2]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d104      	bne.n	80145d8 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 80145ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d0:	21f0      	movs	r1, #240	; 0xf0
 80145d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145d4:	505a      	str	r2, [r3, r1]
 80145d6:	e00e      	b.n	80145f6 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 80145d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145da:	22f0      	movs	r2, #240	; 0xf0
 80145dc:	589b      	ldr	r3, [r3, r2]
 80145de:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 80145e0:	e002      	b.n	80145e8 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 80145e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e6:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 80145e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d1f8      	bne.n	80145e2 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 80145f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145f4:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	001a      	movs	r2, r3
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	1a9b      	subs	r3, r3, r2
 8014600:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	001a      	movs	r2, r3
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	189b      	adds	r3, r3, r2
 801460c:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 801460e:	e0aa      	b.n	8014766 <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8014616:	211b      	movs	r1, #27
 8014618:	187b      	adds	r3, r7, r1
 801461a:	68fa      	ldr	r2, [r7, #12]
 801461c:	7852      	ldrb	r2, [r2, #1]
 801461e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8014620:	187b      	adds	r3, r7, r1
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	2b05      	cmp	r3, #5
 8014626:	d008      	beq.n	801463a <_ux_device_stack_interface_set+0xde>
 8014628:	dd00      	ble.n	801462c <_ux_device_stack_interface_set+0xd0>
 801462a:	e093      	b.n	8014754 <_ux_device_stack_interface_set+0x1f8>
 801462c:	2b02      	cmp	r3, #2
 801462e:	d100      	bne.n	8014632 <_ux_device_stack_interface_set+0xd6>
 8014630:	e088      	b.n	8014744 <_ux_device_stack_interface_set+0x1e8>
 8014632:	2b04      	cmp	r3, #4
 8014634:	d100      	bne.n	8014638 <_ux_device_stack_interface_set+0xdc>
 8014636:	e085      	b.n	8014744 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 8014638:	e08c      	b.n	8014754 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463c:	22fc      	movs	r2, #252	; 0xfc
 801463e:	589b      	ldr	r3, [r3, r2]
 8014640:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8014642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014644:	2380      	movs	r3, #128	; 0x80
 8014646:	005b      	lsls	r3, r3, #1
 8014648:	58d3      	ldr	r3, [r2, r3]
 801464a:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 801464c:	e00d      	b.n	801466a <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8014656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014658:	2201      	movs	r2, #1
 801465a:	601a      	str	r2, [r3, #0]
                    break;
 801465c:	e008      	b.n	8014670 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 801465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014660:	3390      	adds	r3, #144	; 0x90
 8014662:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 8014664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014666:	3b01      	subs	r3, #1
 8014668:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	2b00      	cmp	r3, #0
 801466e:	d1ee      	bne.n	801464e <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 8014670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 8014676:	2312      	movs	r3, #18
 8014678:	e080      	b.n	801477c <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 801467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467c:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 801467e:	4943      	ldr	r1, [pc, #268]	; (801478c <_ux_device_stack_interface_set+0x230>)
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	2206      	movs	r2, #6
 8014684:	f000 faff 	bl	8014c86 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801468a:	3330      	adds	r3, #48	; 0x30
 801468c:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014690:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 8014692:	055b      	lsls	r3, r3, #21
 8014694:	0d5b      	lsrs	r3, r3, #21
 8014696:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8014698:	4b3a      	ldr	r3, [pc, #232]	; (8014784 <_ux_device_stack_interface_set+0x228>)
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	23ce      	movs	r3, #206	; 0xce
 801469e:	005b      	lsls	r3, r3, #1
 80146a0:	58d3      	ldr	r3, [r2, r3]
 80146a2:	2b02      	cmp	r3, #2
 80146a4:	d117      	bne.n	80146d6 <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 80146a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a8:	699b      	ldr	r3, [r3, #24]
 80146aa:	2201      	movs	r2, #1
 80146ac:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80146ae:	d012      	beq.n	80146d6 <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80146b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b2:	69da      	ldr	r2, [r3, #28]
 80146b4:	23c0      	movs	r3, #192	; 0xc0
 80146b6:	015b      	lsls	r3, r3, #5
 80146b8:	4013      	ands	r3, r2
 80146ba:	613b      	str	r3, [r7, #16]
                if (n_trans)
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d009      	beq.n	80146d6 <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	0adb      	lsrs	r3, r3, #11
 80146c6:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	3301      	adds	r3, #1
 80146cc:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 80146ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d0:	693a      	ldr	r2, [r7, #16]
 80146d2:	4353      	muls	r3, r2
 80146d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146da:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146e0:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	2201      	movs	r2, #1
 80146e6:	4252      	negs	r2, r2
 80146e8:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 80146ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146ee:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 80146f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146f4:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	699b      	ldr	r3, [r3, #24]
 80146fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146fe:	210e      	movs	r1, #14
 8014700:	4798      	blx	r3
 8014702:	0003      	movs	r3, r0
 8014704:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 8014706:	6a3b      	ldr	r3, [r7, #32]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d004      	beq.n	8014716 <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470e:	2200      	movs	r2, #0
 8014710:	601a      	str	r2, [r3, #0]
                return(status);
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	e032      	b.n	801477c <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8014716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801471a:	2b00      	cmp	r3, #0
 801471c:	d103      	bne.n	8014726 <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 801471e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014722:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8014724:	e017      	b.n	8014756 <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8014726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801472a:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801472c:	e002      	b.n	8014734 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014732:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8014734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014738:	2b00      	cmp	r3, #0
 801473a:	d1f8      	bne.n	801472e <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014740:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8014742:	e008      	b.n	8014756 <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 8014744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014746:	0018      	movs	r0, r3
 8014748:	f000 f822 	bl	8014790 <_ux_device_stack_interface_start>
 801474c:	0003      	movs	r3, r0
 801474e:	623b      	str	r3, [r7, #32]
            return(status);
 8014750:	6a3b      	ldr	r3, [r7, #32]
 8014752:	e013      	b.n	801477c <_ux_device_stack_interface_set+0x220>
            break;
 8014754:	46c0      	nop			; (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	18d3      	adds	r3, r2, r3
 8014764:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d000      	beq.n	801476e <_ux_device_stack_interface_set+0x212>
 801476c:	e750      	b.n	8014610 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 801476e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014770:	0018      	movs	r0, r3
 8014772:	f000 f80d 	bl	8014790 <_ux_device_stack_interface_start>
 8014776:	0003      	movs	r3, r0
 8014778:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 801477a:	6a3b      	ldr	r3, [r7, #32]
}
 801477c:	0018      	movs	r0, r3
 801477e:	46bd      	mov	sp, r7
 8014780:	b012      	add	sp, #72	; 0x48
 8014782:	bd80      	pop	{r7, pc}
 8014784:	20019298 	.word	0x20019298
 8014788:	2000004c 	.word	0x2000004c
 801478c:	2000002c 	.word	0x2000002c

08014790 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 8014790:	b590      	push	{r4, r7, lr}
 8014792:	b091      	sub	sp, #68	; 0x44
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8014798:	4b2b      	ldr	r3, [pc, #172]	; (8014848 <_ux_device_stack_interface_start+0xb8>)
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	695b      	ldr	r3, [r3, #20]
 80147a0:	3356      	adds	r3, #86	; 0x56
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	18d3      	adds	r3, r2, r3
 80147a6:	3304      	adds	r3, #4
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 80147ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d101      	bne.n	80147b6 <_ux_device_stack_interface_start+0x26>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 80147b2:	2357      	movs	r3, #87	; 0x57
 80147b4:	e044      	b.n	8014840 <_ux_device_stack_interface_start+0xb0>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80147b6:	4b24      	ldr	r3, [pc, #144]	; (8014848 <_ux_device_stack_interface_start+0xb8>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	3320      	adds	r3, #32
 80147bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 80147be:	2008      	movs	r0, #8
 80147c0:	183b      	adds	r3, r7, r0
 80147c2:	2201      	movs	r2, #1
 80147c4:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 80147c6:	183b      	adds	r3, r7, r0
 80147c8:	687a      	ldr	r2, [r7, #4]
 80147ca:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6a1a      	ldr	r2, [r3, #32]
 80147d0:	183b      	adds	r3, r7, r0
 80147d2:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147d8:	183b      	adds	r3, r7, r0
 80147da:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80147e0:	183b      	adds	r3, r7, r0
 80147e2:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 80147e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e6:	6a1a      	ldr	r2, [r3, #32]
 80147e8:	183b      	adds	r3, r7, r0
 80147ea:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 80147ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147f0:	183b      	adds	r3, r7, r0
 80147f2:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 80147f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147f6:	2388      	movs	r3, #136	; 0x88
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	6879      	ldr	r1, [r7, #4]
 80147fc:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 80147fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014802:	0004      	movs	r4, r0
 8014804:	183a      	adds	r2, r7, r0
 8014806:	0010      	movs	r0, r2
 8014808:	4798      	blx	r3
 801480a:	0003      	movs	r3, r0
 801480c:	637b      	str	r3, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 801480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014810:	2b00      	cmp	r3, #0
 8014812:	d114      	bne.n	801483e <_ux_device_stack_interface_start+0xae>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 8014814:	193b      	adds	r3, r7, r4
 8014816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014818:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 801481a:	193b      	adds	r3, r7, r4
 801481c:	2202      	movs	r2, #2
 801481e:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 8014820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014824:	193a      	adds	r2, r7, r4
 8014826:	0010      	movs	r0, r2
 8014828:	4798      	blx	r3
 801482a:	0003      	movs	r3, r0
 801482c:	637b      	str	r3, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 801482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014830:	2b00      	cmp	r3, #0
 8014832:	d102      	bne.n	801483a <_ux_device_stack_interface_start+0xaa>
            interface -> ux_slave_interface_class =  class;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014838:	605a      	str	r2, [r3, #4]

        return(status); 
 801483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801483c:	e000      	b.n	8014840 <_ux_device_stack_interface_start+0xb0>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 801483e:	2357      	movs	r3, #87	; 0x57
}
 8014840:	0018      	movs	r0, r3
 8014842:	46bd      	mov	sp, r7
 8014844:	b011      	add	sp, #68	; 0x44
 8014846:	bd90      	pop	{r4, r7, pc}
 8014848:	20019298 	.word	0x20019298

0801484c <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b08a      	sub	sp, #40	; 0x28
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014858:	4b29      	ldr	r3, [pc, #164]	; (8014900 <_ux_device_stack_set_feature+0xb4>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801485e:	4b28      	ldr	r3, [pc, #160]	; (8014900 <_ux_device_stack_set_feature+0xb4>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	3320      	adds	r3, #32
 8014864:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	333c      	adds	r3, #60	; 0x3c
 801486a:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2203      	movs	r2, #3
 8014870:	4013      	ands	r3, r2
 8014872:	d002      	beq.n	801487a <_ux_device_stack_set_feature+0x2e>
 8014874:	2b02      	cmp	r3, #2
 8014876:	d016      	beq.n	80148a6 <_ux_device_stack_set_feature+0x5a>
 8014878:	e037      	b.n	80148ea <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d110      	bne.n	80148a2 <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8014880:	4b1f      	ldr	r3, [pc, #124]	; (8014900 <_ux_device_stack_set_feature+0xb4>)
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	23d2      	movs	r3, #210	; 0xd2
 8014886:	005b      	lsls	r3, r3, #1
 8014888:	58d3      	ldr	r3, [r2, r3]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d007      	beq.n	801489e <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 801488e:	4b1c      	ldr	r3, [pc, #112]	; (8014900 <_ux_device_stack_set_feature+0xb4>)
 8014890:	681a      	ldr	r2, [r3, #0]
 8014892:	23d4      	movs	r3, #212	; 0xd4
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	2101      	movs	r1, #1
 8014898:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 801489a:	2300      	movs	r3, #0
 801489c:	e02c      	b.n	80148f8 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 801489e:	2354      	movs	r3, #84	; 0x54
 80148a0:	e02a      	b.n	80148f8 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80148a2:	2354      	movs	r3, #84	; 0x54
 80148a4:	e028      	b.n	80148f8 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	22f0      	movs	r2, #240	; 0xf0
 80148aa:	589b      	ldr	r3, [r3, r2]
 80148ac:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 80148ae:	e019      	b.n	80148e4 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 80148b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148b4:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 80148b6:	e00f      	b.n	80148d8 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80148b8:	6a3b      	ldr	r3, [r7, #32]
 80148ba:	695b      	ldr	r3, [r3, #20]
 80148bc:	687a      	ldr	r2, [r7, #4]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d107      	bne.n	80148d2 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	699b      	ldr	r3, [r3, #24]
 80148c6:	6a3a      	ldr	r2, [r7, #32]
 80148c8:	69f8      	ldr	r0, [r7, #28]
 80148ca:	2114      	movs	r1, #20
 80148cc:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 80148ce:	2300      	movs	r3, #0
 80148d0:	e012      	b.n	80148f8 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 80148d2:	6a3b      	ldr	r3, [r7, #32]
 80148d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d6:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 80148d8:	6a3b      	ldr	r3, [r7, #32]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d1ec      	bne.n	80148b8 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 80148de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e2:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d1e2      	bne.n	80148b0 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	699b      	ldr	r3, [r3, #24]
 80148ee:	697a      	ldr	r2, [r7, #20]
 80148f0:	69f8      	ldr	r0, [r7, #28]
 80148f2:	2114      	movs	r1, #20
 80148f4:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80148f6:	2300      	movs	r3, #0
    }
}
 80148f8:	0018      	movs	r0, r3
 80148fa:	46bd      	mov	sp, r7
 80148fc:	b00a      	add	sp, #40	; 0x28
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	20019298 	.word	0x20019298

08014904 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b088      	sub	sp, #32
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801490e:	4b18      	ldr	r3, [pc, #96]	; (8014970 <_ux_device_stack_transfer_abort+0x6c>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	683a      	ldr	r2, [r7, #0]
 8014918:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801491a:	f3ef 8310 	mrs	r3, PRIMASK
 801491e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014920:	b672      	cpsid	i
    return(primask_value);
 8014922:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8014924:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d114      	bne.n	8014958 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	699b      	ldr	r3, [r3, #24]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	69f8      	ldr	r0, [r7, #28]
 8014936:	210d      	movs	r1, #13
 8014938:	4798      	blx	r3
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	f383 8810 	msr	PRIMASK, r3
}
 8014944:	46c0      	nop			; (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2204      	movs	r2, #4
 801494a:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3330      	adds	r3, #48	; 0x30
 8014950:	0018      	movs	r0, r3
 8014952:	f000 fd4d 	bl	80153f0 <_ux_utility_semaphore_put>
 8014956:	e005      	b.n	8014964 <_ux_device_stack_transfer_abort+0x60>
 8014958:	69bb      	ldr	r3, [r7, #24]
 801495a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f383 8810 	msr	PRIMASK, r3
}
 8014962:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8014964:	2300      	movs	r3, #0
}
 8014966:	0018      	movs	r0, r3
 8014968:	46bd      	mov	sp, r7
 801496a:	b008      	add	sp, #32
 801496c:	bd80      	pop	{r7, pc}
 801496e:	46c0      	nop			; (mov r8, r8)
 8014970:	20019298 	.word	0x20019298

08014974 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	3330      	adds	r3, #48	; 0x30
 8014982:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8014984:	683a      	ldr	r2, [r7, #0]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	0011      	movs	r1, r2
 801498a:	0018      	movs	r0, r3
 801498c:	f7ff ffba 	bl	8014904 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8014990:	2300      	movs	r3, #0
}
 8014992:	0018      	movs	r0, r3
 8014994:	46bd      	mov	sp, r7
 8014996:	b004      	add	sp, #16
 8014998:	bd80      	pop	{r7, pc}
	...

0801499c <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08c      	sub	sp, #48	; 0x30
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149ac:	2b01      	cmp	r3, #1
 80149ae:	d101      	bne.n	80149b4 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 80149b0:	2300      	movs	r3, #0
 80149b2:	e073      	b.n	8014a9c <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80149b4:	f3ef 8310 	mrs	r3, PRIMASK
 80149b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80149ba:	b672      	cpsid	i
    return(primask_value);
 80149bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 80149be:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 80149c0:	4b38      	ldr	r3, [pc, #224]	; (8014aa4 <_ux_device_stack_transfer_request+0x108>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	6a1b      	ldr	r3, [r3, #32]
 80149c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 80149c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d005      	beq.n	80149da <_ux_device_stack_transfer_request+0x3e>
 80149ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d0:	2b02      	cmp	r3, #2
 80149d2:	d002      	beq.n	80149da <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 80149d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d114      	bne.n	8014a04 <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2201      	movs	r2, #1
 80149de:	601a      	str	r2, [r3, #0]
 80149e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	f383 8810 	msr	PRIMASK, r3
}
 80149ea:	46c0      	nop			; (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80149ec:	4b2d      	ldr	r3, [pc, #180]	; (8014aa4 <_ux_device_stack_transfer_request+0x108>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	689b      	ldr	r3, [r3, #8]
 80149f6:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80149f8:	6a3b      	ldr	r3, [r7, #32]
 80149fa:	699b      	ldr	r3, [r3, #24]
 80149fc:	2203      	movs	r2, #3
 80149fe:	4013      	ands	r3, r2
 8014a00:	d10b      	bne.n	8014a1a <_ux_device_stack_transfer_request+0x7e>
 8014a02:	e01a      	b.n	8014a3a <_ux_device_stack_transfer_request+0x9e>
 8014a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a06:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	f383 8810 	msr	PRIMASK, r3
}
 8014a0e:	46c0      	nop			; (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 8014a10:	2325      	movs	r3, #37	; 0x25
 8014a12:	e043      	b.n	8014a9c <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8014a14:	2064      	movs	r0, #100	; 0x64
 8014a16:	f000 f91d 	bl	8014c54 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8014a1a:	6a3b      	ldr	r3, [r7, #32]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	2b02      	cmp	r3, #2
 8014a20:	d0f8      	beq.n	8014a14 <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8014a22:	6a3b      	ldr	r3, [r7, #32]
 8014a24:	695b      	ldr	r3, [r3, #20]
 8014a26:	2280      	movs	r2, #128	; 0x80
 8014a28:	4013      	ands	r3, r2
 8014a2a:	d003      	beq.n	8014a34 <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2203      	movs	r2, #3
 8014a30:	629a      	str	r2, [r3, #40]	; 0x28
 8014a32:	e002      	b.n	8014a3a <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	2202      	movs	r2, #2
 8014a38:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a3e:	2b03      	cmp	r3, #3
 8014a40:	d113      	bne.n	8014a6a <_ux_device_stack_transfer_request+0xce>
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d010      	beq.n	8014a6a <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d00c      	beq.n	8014a6a <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8014a50:	6a3b      	ldr	r3, [r7, #32]
 8014a52:	69da      	ldr	r2, [r3, #28]
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	0011      	movs	r1, r2
 8014a58:	0018      	movs	r0, r3
 8014a5a:	f7ed fb83 	bl	8002164 <__aeabi_uidivmod>
 8014a5e:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 8014a60:	d103      	bne.n	8014a6a <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2201      	movs	r2, #1
 8014a66:	651a      	str	r2, [r3, #80]	; 0x50
 8014a68:	e002      	b.n	8014a70 <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2200      	movs	r2, #0
 8014a74:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	68ba      	ldr	r2, [r7, #8]
 8014a7a:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8014a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8c:	699b      	ldr	r3, [r3, #24]
 8014a8e:	68fa      	ldr	r2, [r7, #12]
 8014a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a92:	210c      	movs	r1, #12
 8014a94:	4798      	blx	r3
 8014a96:	0003      	movs	r3, r0
 8014a98:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 8014a9a:	69fb      	ldr	r3, [r7, #28]

#endif
}
 8014a9c:	0018      	movs	r0, r3
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	b00c      	add	sp, #48	; 0x30
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	20019298 	.word	0x20019298

08014aa8 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	60f8      	str	r0, [r7, #12]
 8014ab0:	60b9      	str	r1, [r7, #8]
 8014ab2:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8014ab4:	4b0c      	ldr	r3, [pc, #48]	; (8014ae8 <_ux_system_error_handler+0x40>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8014abc:	4b0a      	ldr	r3, [pc, #40]	; (8014ae8 <_ux_system_error_handler+0x40>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ac2:	3201      	adds	r2, #1
 8014ac4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8014ac6:	4b08      	ldr	r3, [pc, #32]	; (8014ae8 <_ux_system_error_handler+0x40>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d006      	beq.n	8014ade <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8014ad0:	4b05      	ldr	r3, [pc, #20]	; (8014ae8 <_ux_system_error_handler+0x40>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	68b9      	ldr	r1, [r7, #8]
 8014ada:	68f8      	ldr	r0, [r7, #12]
 8014adc:	4798      	blx	r3
    }
}
 8014ade:	46c0      	nop			; (mov r8, r8)
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	b004      	add	sp, #16
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	46c0      	nop			; (mov r8, r8)
 8014ae8:	2001929c 	.word	0x2001929c

08014aec <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08a      	sub	sp, #40	; 0x28
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
 8014af8:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8014afa:	68ba      	ldr	r2, [r7, #8]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2100      	movs	r1, #0
 8014b00:	0018      	movs	r0, r3
 8014b02:	f000 fba1 	bl	8015248 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8014b06:	4b50      	ldr	r3, [pc, #320]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8014b0c:	235c      	movs	r3, #92	; 0x5c
 8014b0e:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b14:	18d2      	adds	r2, r2, r3
 8014b16:	4b4d      	ldr	r3, [pc, #308]	; (8014c4c <_ux_system_initialize+0x160>)
 8014b18:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8014b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b1c:	33cd      	adds	r3, #205	; 0xcd
 8014b1e:	33ff      	adds	r3, #255	; 0xff
 8014b20:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 8014b22:	4b49      	ldr	r3, [pc, #292]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	68f9      	ldr	r1, [r7, #12]
 8014b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b2a:	188a      	adds	r2, r1, r2
 8014b2c:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 8014b2e:	4b46      	ldr	r3, [pc, #280]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	330f      	adds	r3, #15
 8014b3a:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8014b3c:	6a3b      	ldr	r3, [r7, #32]
 8014b3e:	220f      	movs	r2, #15
 8014b40:	4393      	bics	r3, r2
 8014b42:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8014b44:	68fa      	ldr	r2, [r7, #12]
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	18d3      	adds	r3, r2, r3
 8014b4a:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	6a3a      	ldr	r2, [r7, #32]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d301      	bcc.n	8014b58 <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8014b54:	2312      	movs	r3, #18
 8014b56:	e073      	b.n	8014c40 <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8014b58:	69f9      	ldr	r1, [r7, #28]
 8014b5a:	4b3b      	ldr	r3, [pc, #236]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	6a3a      	ldr	r2, [r7, #32]
 8014b60:	1a8a      	subs	r2, r1, r2
 8014b62:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 8014b64:	4b38      	ldr	r3, [pc, #224]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	4b37      	ldr	r3, [pc, #220]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	6852      	ldr	r2, [r2, #4]
 8014b6e:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8014b70:	4b35      	ldr	r3, [pc, #212]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	6a3a      	ldr	r2, [r7, #32]
 8014b76:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8014b78:	4b33      	ldr	r3, [pc, #204]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014b80:	4b31      	ldr	r3, [pc, #196]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	3b10      	subs	r3, #16
 8014b88:	001a      	movs	r2, r3
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	2200      	movs	r2, #0
 8014b92:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d112      	bne.n	8014bc0 <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8014b9a:	4b2b      	ldr	r3, [pc, #172]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014b9c:	681a      	ldr	r2, [r3, #0]
 8014b9e:	4b2a      	ldr	r3, [pc, #168]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	6852      	ldr	r2, [r2, #4]
 8014ba4:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 8014ba6:	4b28      	ldr	r3, [pc, #160]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	4b27      	ldr	r3, [pc, #156]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	6892      	ldr	r2, [r2, #8]
 8014bb0:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 8014bb2:	4b25      	ldr	r3, [pc, #148]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	4b24      	ldr	r3, [pc, #144]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	6812      	ldr	r2, [r2, #0]
 8014bbc:	60da      	str	r2, [r3, #12]
 8014bbe:	e02f      	b.n	8014c20 <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8014bc4:	6a3b      	ldr	r3, [r7, #32]
 8014bc6:	330f      	adds	r3, #15
 8014bc8:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	220f      	movs	r2, #15
 8014bce:	4393      	bics	r3, r2
 8014bd0:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 8014bd2:	4b1d      	ldr	r3, [pc, #116]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	683a      	ldr	r2, [r7, #0]
 8014bd8:	3a0f      	subs	r2, #15
 8014bda:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 8014bdc:	4b1a      	ldr	r3, [pc, #104]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	4b19      	ldr	r3, [pc, #100]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	6912      	ldr	r2, [r2, #16]
 8014be6:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8014be8:	4b17      	ldr	r3, [pc, #92]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	6a3a      	ldr	r2, [r7, #32]
 8014bee:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 8014bf0:	4b15      	ldr	r3, [pc, #84]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	68d8      	ldr	r0, [r3, #12]
 8014bf6:	4b14      	ldr	r3, [pc, #80]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	001a      	movs	r2, r3
 8014bfe:	2100      	movs	r1, #0
 8014c00:	f000 fb22 	bl	8015248 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8014c04:	4b10      	ldr	r3, [pc, #64]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	68db      	ldr	r3, [r3, #12]
 8014c0a:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014c0c:	4b0e      	ldr	r3, [pc, #56]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	3b10      	subs	r3, #16
 8014c14:	001a      	movs	r2, r3
 8014c16:	69bb      	ldr	r3, [r7, #24]
 8014c18:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8014c20:	4b09      	ldr	r3, [pc, #36]	; (8014c48 <_ux_system_initialize+0x15c>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	331c      	adds	r3, #28
 8014c26:	4a0a      	ldr	r2, [pc, #40]	; (8014c50 <_ux_system_initialize+0x164>)
 8014c28:	0011      	movs	r1, r2
 8014c2a:	0018      	movs	r0, r3
 8014c2c:	f000 fb28 	bl	8015280 <_ux_utility_mutex_create>
 8014c30:	0003      	movs	r3, r0
 8014c32:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d001      	beq.n	8014c3e <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8014c3a:	2317      	movs	r3, #23
 8014c3c:	e000      	b.n	8014c40 <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	0018      	movs	r0, r3
 8014c42:	46bd      	mov	sp, r7
 8014c44:	b00a      	add	sp, #40	; 0x28
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	2001929c 	.word	0x2001929c
 8014c4c:	20019298 	.word	0x20019298
 8014c50:	08018898 	.word	0x08018898

08014c54 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b084      	sub	sp, #16
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2264      	movs	r2, #100	; 0x64
 8014c60:	4353      	muls	r3, r2
 8014c62:	22fa      	movs	r2, #250	; 0xfa
 8014c64:	0091      	lsls	r1, r2, #2
 8014c66:	0018      	movs	r0, r3
 8014c68:	f7ed f9f6 	bl	8002058 <__udivsi3>
 8014c6c:	0003      	movs	r3, r0
 8014c6e:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	3301      	adds	r3, #1
 8014c74:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	0018      	movs	r0, r3
 8014c7a:	f7fc f9f9 	bl	8011070 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8014c7e:	46c0      	nop			; (mov r8, r8)
}
 8014c80:	46bd      	mov	sp, r7
 8014c82:	b004      	add	sp, #16
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b084      	sub	sp, #16
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	60f8      	str	r0, [r7, #12]
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	607a      	str	r2, [r7, #4]
 8014c92:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8014c94:	e028      	b.n	8014ce8 <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	1c5a      	adds	r2, r3, #1
 8014c9a:	60ba      	str	r2, [r7, #8]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	d00c      	beq.n	8014cbc <_ux_utility_descriptor_parse+0x36>
 8014ca2:	2b04      	cmp	r3, #4
 8014ca4:	d115      	bne.n	8014cd2 <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	0018      	movs	r0, r3
 8014caa:	f000 f826 	bl	8014cfa <_ux_utility_long_get>
 8014cae:	0002      	movs	r2, r0
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	3304      	adds	r3, #4
 8014cb8:	60fb      	str	r3, [r7, #12]
            break;                   
 8014cba:	e012      	b.n	8014ce2 <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	0018      	movs	r0, r3
 8014cc0:	f000 fba5 	bl	801540e <_ux_utility_short_get>
 8014cc4:	0002      	movs	r2, r0
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	3302      	adds	r3, #2
 8014cce:	60fb      	str	r3, [r7, #12]
            break;                   
 8014cd0:	e007      	b.n	8014ce2 <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	001a      	movs	r2, r3
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	3304      	adds	r3, #4
 8014ce6:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	1e5a      	subs	r2, r3, #1
 8014cec:	607a      	str	r2, [r7, #4]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d1d1      	bne.n	8014c96 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8014cf2:	46c0      	nop			; (mov r8, r8)
}
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	b004      	add	sp, #16
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b084      	sub	sp, #16
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	1c5a      	adds	r2, r3, #1
 8014d06:	607a      	str	r2, [r7, #4]
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	1c5a      	adds	r2, r3, #1
 8014d10:	607a      	str	r2, [r7, #4]
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	021b      	lsls	r3, r3, #8
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	4313      	orrs	r3, r2
 8014d1a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	1c5a      	adds	r2, r3, #1
 8014d20:	607a      	str	r2, [r7, #4]
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	041b      	lsls	r3, r3, #16
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	4313      	orrs	r3, r2
 8014d2a:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	061b      	lsls	r3, r3, #24
 8014d32:	68fa      	ldr	r2, [r7, #12]
 8014d34:	4313      	orrs	r3, r2
 8014d36:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8014d38:	68fb      	ldr	r3, [r7, #12]
}
 8014d3a:	0018      	movs	r0, r3
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	b004      	add	sp, #16
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
 8014d4a:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	1c5a      	adds	r2, r3, #1
 8014d50:	607a      	str	r2, [r7, #4]
 8014d52:	683a      	ldr	r2, [r7, #0]
 8014d54:	b2d2      	uxtb	r2, r2
 8014d56:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	0a19      	lsrs	r1, r3, #8
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	1c5a      	adds	r2, r3, #1
 8014d60:	607a      	str	r2, [r7, #4]
 8014d62:	b2ca      	uxtb	r2, r1
 8014d64:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	0c19      	lsrs	r1, r3, #16
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	1c5a      	adds	r2, r3, #1
 8014d6e:	607a      	str	r2, [r7, #4]
 8014d70:	b2ca      	uxtb	r2, r1
 8014d72:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	0e1b      	lsrs	r3, r3, #24
 8014d78:	b2da      	uxtb	r2, r3
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8014d7e:	46c0      	nop			; (mov r8, r8)
}
 8014d80:	46bd      	mov	sp, r7
 8014d82:	b002      	add	sp, #8
 8014d84:	bd80      	pop	{r7, pc}
	...

08014d88 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b08c      	sub	sp, #48	; 0x30
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8014d94:	4b7f      	ldr	r3, [pc, #508]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	331c      	adds	r3, #28
 8014d9a:	0018      	movs	r0, r3
 8014d9c:	f000 faa6 	bl	80152ec <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	3301      	adds	r3, #1
 8014da4:	d101      	bne.n	8014daa <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 8014da6:	2300      	movs	r3, #0
 8014da8:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2b0e      	cmp	r3, #14
 8014dae:	d801      	bhi.n	8014db4 <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 8014db0:	230f      	movs	r3, #15
 8014db2:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	330f      	adds	r3, #15
 8014dc2:	220f      	movs	r2, #15
 8014dc4:	4393      	bics	r3, r2
 8014dc6:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	18d3      	adds	r3, r2, r3
 8014dce:	3310      	adds	r3, #16
 8014dd0:	001a      	movs	r2, r3
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	0011      	movs	r1, r2
 8014dd6:	0018      	movs	r0, r3
 8014dd8:	f000 f9f6 	bl	80151c8 <_ux_utility_memory_free_block_best_get>
 8014ddc:	0003      	movs	r3, r0
 8014dde:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8014de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d10c      	bne.n	8014e00 <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014de6:	4b6b      	ldr	r3, [pc, #428]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	331c      	adds	r3, #28
 8014dec:	0018      	movs	r0, r3
 8014dee:	f000 fa71 	bl	80152d4 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8014df2:	2212      	movs	r2, #18
 8014df4:	2108      	movs	r1, #8
 8014df6:	2002      	movs	r0, #2
 8014df8:	f7ff fe56 	bl	8014aa8 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e0c5      	b.n	8014f8c <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8014e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e02:	3310      	adds	r3, #16
 8014e04:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	6a3a      	ldr	r2, [r7, #32]
 8014e0c:	4013      	ands	r3, r2
 8014e0e:	d127      	bne.n	8014e60 <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	3310      	adds	r3, #16
 8014e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e16:	18d3      	adds	r3, r2, r3
 8014e18:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8014e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e1c:	689a      	ldr	r2, [r3, #8]
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8014e22:	69fb      	ldr	r3, [r7, #28]
 8014e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e26:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	1ad3      	subs	r3, r2, r3
 8014e30:	3b10      	subs	r3, #16
 8014e32:	001a      	movs	r2, r3
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8014e38:	69fb      	ldr	r3, [r7, #28]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8014e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e40:	687a      	ldr	r2, [r7, #4]
 8014e42:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8014e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e46:	69fa      	ldr	r2, [r7, #28]
 8014e48:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	2280      	movs	r2, #128	; 0x80
 8014e4e:	0612      	lsls	r2, r2, #24
 8014e50:	431a      	orrs	r2, r3
 8014e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e54:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	3310      	adds	r3, #16
 8014e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e5e:	e05f      	b.n	8014f20 <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014e60:	6a3b      	ldr	r3, [r7, #32]
 8014e62:	3310      	adds	r3, #16
 8014e64:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	6a3b      	ldr	r3, [r7, #32]
 8014e6a:	18d3      	adds	r3, r2, r3
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	425a      	negs	r2, r3
 8014e74:	6a3b      	ldr	r3, [r7, #32]
 8014e76:	4013      	ands	r3, r2
 8014e78:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014e7a:	6a3b      	ldr	r3, [r7, #32]
 8014e7c:	3b10      	subs	r3, #16
 8014e7e:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e84:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8014e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e88:	689a      	ldr	r2, [r3, #8]
 8014e8a:	69fb      	ldr	r3, [r7, #28]
 8014e8c:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8014e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	69fb      	ldr	r3, [r7, #28]
 8014e94:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	2280      	movs	r2, #128	; 0x80
 8014e9a:	0612      	lsls	r2, r2, #24
 8014e9c:	431a      	orrs	r2, r3
 8014e9e:	69fb      	ldr	r3, [r7, #28]
 8014ea0:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8014ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea4:	3310      	adds	r3, #16
 8014ea6:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8014ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eaa:	69fa      	ldr	r2, [r7, #28]
 8014eac:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8014eae:	69fa      	ldr	r2, [r7, #28]
 8014eb0:	6a3b      	ldr	r3, [r7, #32]
 8014eb2:	1ad2      	subs	r2, r2, r3
 8014eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb6:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014eb8:	69fb      	ldr	r3, [r7, #28]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	3b10      	subs	r3, #16
 8014ec4:	001a      	movs	r2, r3
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8014eca:	69fb      	ldr	r3, [r7, #28]
 8014ecc:	681a      	ldr	r2, [r3, #0]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	1ad3      	subs	r3, r2, r3
 8014ed2:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	2b10      	cmp	r3, #16
 8014ed8:	d91c      	bls.n	8014f14 <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8014eda:	69fa      	ldr	r2, [r7, #28]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	18d3      	adds	r3, r2, r3
 8014ee0:	3310      	adds	r3, #16
 8014ee2:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	689a      	ldr	r2, [r3, #8]
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	69fa      	ldr	r2, [r7, #28]
 8014ef0:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014ef2:	69bb      	ldr	r3, [r7, #24]
 8014ef4:	3b10      	subs	r3, #16
 8014ef6:	001a      	movs	r2, r3
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	2200      	movs	r2, #0
 8014f00:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	697a      	ldr	r2, [r7, #20]
 8014f06:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	1ad2      	subs	r2, r2, r3
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	3310      	adds	r3, #16
 8014f1a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8014f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f22:	3310      	adds	r3, #16
 8014f24:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	f000 f98b 	bl	8015248 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8014f32:	4b18      	ldr	r3, [pc, #96]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	68da      	ldr	r2, [r3, #12]
 8014f38:	4b16      	ldr	r3, [pc, #88]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d108      	bne.n	8014f54 <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8014f42:	4b14      	ldr	r3, [pc, #80]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	6899      	ldr	r1, [r3, #8]
 8014f48:	4b12      	ldr	r3, [pc, #72]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f4e:	1a8a      	subs	r2, r1, r2
 8014f50:	609a      	str	r2, [r3, #8]
 8014f52:	e014      	b.n	8014f7e <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d108      	bne.n	8014f6c <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8014f5a:	4b0e      	ldr	r3, [pc, #56]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	6959      	ldr	r1, [r3, #20]
 8014f60:	4b0c      	ldr	r3, [pc, #48]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f66:	1a8a      	subs	r2, r1, r2
 8014f68:	615a      	str	r2, [r3, #20]

            break;
 8014f6a:	e008      	b.n	8014f7e <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8014f6c:	4b09      	ldr	r3, [pc, #36]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	6899      	ldr	r1, [r3, #8]
 8014f72:	4b08      	ldr	r3, [pc, #32]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f78:	1a8a      	subs	r2, r1, r2
 8014f7a:	609a      	str	r2, [r3, #8]
            break;
 8014f7c:	46c0      	nop			; (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014f7e:	4b05      	ldr	r3, [pc, #20]	; (8014f94 <_ux_utility_memory_allocate+0x20c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	331c      	adds	r3, #28
 8014f84:	0018      	movs	r0, r3
 8014f86:	f000 f9a5 	bl	80152d4 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 8014f8a:	693b      	ldr	r3, [r7, #16]
}                                
 8014f8c:	0018      	movs	r0, r3
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	b00c      	add	sp, #48	; 0x30
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	2001929c 	.word	0x2001929c

08014f98 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8014f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
 8014fa4:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d024      	beq.n	8014ff6 <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8014fac:	2000      	movs	r0, #0
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	0c19      	lsrs	r1, r3, #16
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	1c1e      	adds	r6, r3, #0
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	0c1b      	lsrs	r3, r3, #16
 8014fba:	683a      	ldr	r2, [r7, #0]
 8014fbc:	1c15      	adds	r5, r2, #0
 8014fbe:	b28a      	uxth	r2, r1
 8014fc0:	2a00      	cmp	r2, #0
 8014fc2:	d105      	bne.n	8014fd0 <_ux_utility_memory_allocate_mulc_safe+0x38>
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	2a00      	cmp	r2, #0
 8014fc8:	d013      	beq.n	8014ff2 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8014fca:	1c19      	adds	r1, r3, #0
 8014fcc:	1c34      	adds	r4, r6, #0
 8014fce:	e003      	b.n	8014fd8 <_ux_utility_memory_allocate_mulc_safe+0x40>
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d10c      	bne.n	8014ff0 <_ux_utility_memory_allocate_mulc_safe+0x58>
 8014fd6:	1c2c      	adds	r4, r5, #0
 8014fd8:	b2b3      	uxth	r3, r6
 8014fda:	b2aa      	uxth	r2, r5
 8014fdc:	435a      	muls	r2, r3
 8014fde:	b2a3      	uxth	r3, r4
 8014fe0:	b289      	uxth	r1, r1
 8014fe2:	434b      	muls	r3, r1
 8014fe4:	0c12      	lsrs	r2, r2, #16
 8014fe6:	189b      	adds	r3, r3, r2
 8014fe8:	141b      	asrs	r3, r3, #16
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d000      	beq.n	8014ff2 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8014ff0:	2001      	movs	r0, #1
 8014ff2:	1e03      	subs	r3, r0, #0
 8014ff4:	d109      	bne.n	801500a <_ux_utility_memory_allocate_mulc_safe+0x72>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	683a      	ldr	r2, [r7, #0]
 8014ffa:	435a      	muls	r2, r3
 8014ffc:	68b9      	ldr	r1, [r7, #8]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	0018      	movs	r0, r3
 8015002:	f7ff fec1 	bl	8014d88 <_ux_utility_memory_allocate>
 8015006:	0003      	movs	r3, r0
 8015008:	e000      	b.n	801500c <_ux_utility_memory_allocate_mulc_safe+0x74>
 801500a:	2300      	movs	r3, #0
}
 801500c:	0018      	movs	r0, r3
 801500e:	46bd      	mov	sp, r7
 8015010:	b005      	add	sp, #20
 8015012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015014 <_ux_utility_memory_compare>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_compare(VOID *memory_source, VOID *memory_destination, ULONG length)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b086      	sub	sp, #24
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	607a      	str	r2, [r7, #4]
UCHAR *   source;
UCHAR *   destination;


    /* Setup source and destination byte oriented pointers.  */
    source =  (UCHAR *) memory_source;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	613b      	str	r3, [r7, #16]

    /* Loop to compare blocks.  */
    while(length--)
 8015028:	e00b      	b.n	8015042 <_ux_utility_memory_compare+0x2e>
    {

        /* Compare a single byte.  */
        if(*destination++ != *source++)
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	1c5a      	adds	r2, r3, #1
 801502e:	613a      	str	r2, [r7, #16]
 8015030:	781a      	ldrb	r2, [r3, #0]
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	1c59      	adds	r1, r3, #1
 8015036:	6179      	str	r1, [r7, #20]
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	429a      	cmp	r2, r3
 801503c:	d001      	beq.n	8015042 <_ux_utility_memory_compare+0x2e>
        {

            /* Not equal, return an error.  */
            return(UX_ERROR);
 801503e:	23ff      	movs	r3, #255	; 0xff
 8015040:	e005      	b.n	801504e <_ux_utility_memory_compare+0x3a>
    while(length--)
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	1e5a      	subs	r2, r3, #1
 8015046:	607a      	str	r2, [r7, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d1ee      	bne.n	801502a <_ux_utility_memory_compare+0x16>
        }
    } 
    
    /* Blocks are equal, return success.  */           
    return(UX_SUCCESS); 
 801504c:	2300      	movs	r3, #0
}
 801504e:	0018      	movs	r0, r3
 8015050:	46bd      	mov	sp, r7
 8015052:	b006      	add	sp, #24
 8015054:	bd80      	pop	{r7, pc}

08015056 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 8015056:	b580      	push	{r7, lr}
 8015058:	b086      	sub	sp, #24
 801505a:	af00      	add	r7, sp, #0
 801505c:	60f8      	str	r0, [r7, #12]
 801505e:	60b9      	str	r1, [r7, #8]
 8015060:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 801506a:	e007      	b.n	801507c <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 801506c:	697a      	ldr	r2, [r7, #20]
 801506e:	1c53      	adds	r3, r2, #1
 8015070:	617b      	str	r3, [r7, #20]
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	1c59      	adds	r1, r3, #1
 8015076:	6139      	str	r1, [r7, #16]
 8015078:	7812      	ldrb	r2, [r2, #0]
 801507a:	701a      	strb	r2, [r3, #0]
    while(length--)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	1e5a      	subs	r2, r3, #1
 8015080:	607a      	str	r2, [r7, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d1f2      	bne.n	801506c <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8015086:	46c0      	nop			; (mov r8, r8)
}
 8015088:	46bd      	mov	sp, r7
 801508a:	b006      	add	sp, #24
 801508c:	bd80      	pop	{r7, pc}
	...

08015090 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b086      	sub	sp, #24
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8015098:	4b49      	ldr	r3, [pc, #292]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	331c      	adds	r3, #28
 801509e:	0018      	movs	r0, r3
 80150a0:	f000 f924 	bl	80152ec <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	3b10      	subs	r3, #16
 80150a8:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	3310      	adds	r3, #16
 80150b0:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 80150b2:	697b      	ldr	r3, [r7, #20]
 80150b4:	685a      	ldr	r2, [r3, #4]
 80150b6:	2380      	movs	r3, #128	; 0x80
 80150b8:	061b      	lsls	r3, r3, #24
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d010      	beq.n	80150e0 <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 80150c2:	4a40      	ldr	r2, [pc, #256]	; (80151c4 <_ux_utility_memory_free+0x134>)
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d00b      	beq.n	80150e0 <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80150c8:	4b3d      	ldr	r3, [pc, #244]	; (80151c0 <_ux_utility_memory_free+0x130>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	331c      	adds	r3, #28
 80150ce:	0018      	movs	r0, r3
 80150d0:	f000 f900 	bl	80152d4 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 80150d4:	2219      	movs	r2, #25
 80150d6:	2108      	movs	r1, #8
 80150d8:	2002      	movs	r0, #2
 80150da:	f7ff fce5 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 80150de:	e06c      	b.n	80151ba <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2200      	movs	r2, #0
 80150e4:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80150e6:	e007      	b.n	80150f8 <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d107      	bne.n	8015102 <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	68db      	ldr	r3, [r3, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1f3      	bne.n	80150e8 <_ux_utility_memory_free+0x58>
 8015100:	e000      	b.n	8015104 <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 8015102:	46c0      	nop			; (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 801510a:	e01a      	b.n	8015142 <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d006      	beq.n	8015122 <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	697a      	ldr	r2, [r7, #20]
 801511e:	60da      	str	r2, [r3, #12]
            break;
 8015120:	e012      	b.n	8015148 <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	689a      	ldr	r2, [r3, #8]
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	18d3      	adds	r3, r2, r3
 8015134:	3310      	adds	r3, #16
 8015136:	001a      	movs	r2, r3
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	689b      	ldr	r3, [r3, #8]
 8015140:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d1e1      	bne.n	801510c <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8015148:	4b1d      	ldr	r3, [pc, #116]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	68da      	ldr	r2, [r3, #12]
 801514e:	4b1c      	ldr	r3, [pc, #112]	; (80151c0 <_ux_utility_memory_free+0x130>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	429a      	cmp	r2, r3
 8015156:	d108      	bne.n	801516a <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 8015158:	4b19      	ldr	r3, [pc, #100]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	6899      	ldr	r1, [r3, #8]
 801515e:	4b18      	ldr	r3, [pc, #96]	; (80151c0 <_ux_utility_memory_free+0x130>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	188a      	adds	r2, r1, r2
 8015166:	609a      	str	r2, [r3, #8]
 8015168:	e020      	b.n	80151ac <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 801516a:	4b15      	ldr	r3, [pc, #84]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8015172:	697a      	ldr	r2, [r7, #20]
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	429a      	cmp	r2, r3
 8015178:	d310      	bcc.n	801519c <_ux_utility_memory_free+0x10c>
 801517a:	4b11      	ldr	r3, [pc, #68]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	68ba      	ldr	r2, [r7, #8]
 8015182:	18d3      	adds	r3, r2, r3
 8015184:	697a      	ldr	r2, [r7, #20]
 8015186:	429a      	cmp	r2, r3
 8015188:	d208      	bcs.n	801519c <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801518a:	4b0d      	ldr	r3, [pc, #52]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	6899      	ldr	r1, [r3, #8]
 8015190:	4b0b      	ldr	r3, [pc, #44]	; (80151c0 <_ux_utility_memory_free+0x130>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	68fa      	ldr	r2, [r7, #12]
 8015196:	188a      	adds	r2, r1, r2
 8015198:	609a      	str	r2, [r3, #8]
 801519a:	e007      	b.n	80151ac <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 801519c:	4b08      	ldr	r3, [pc, #32]	; (80151c0 <_ux_utility_memory_free+0x130>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	6959      	ldr	r1, [r3, #20]
 80151a2:	4b07      	ldr	r3, [pc, #28]	; (80151c0 <_ux_utility_memory_free+0x130>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	188a      	adds	r2, r1, r2
 80151aa:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80151ac:	4b04      	ldr	r3, [pc, #16]	; (80151c0 <_ux_utility_memory_free+0x130>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	331c      	adds	r3, #28
 80151b2:	0018      	movs	r0, r3
 80151b4:	f000 f88e 	bl	80152d4 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 80151b8:	46c0      	nop			; (mov r8, r8)
}
 80151ba:	46bd      	mov	sp, r7
 80151bc:	b006      	add	sp, #24
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	2001929c 	.word	0x2001929c
 80151c4:	80000001 	.word	0x80000001

080151c8 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b084      	sub	sp, #16
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 80151d2:	2300      	movs	r3, #0
 80151d4:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d003      	beq.n	80151e4 <_ux_utility_memory_free_block_best_get+0x1c>
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d005      	beq.n	80151ee <_ux_utility_memory_free_block_best_get+0x26>
 80151e2:	e009      	b.n	80151f8 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 80151e4:	4b17      	ldr	r3, [pc, #92]	; (8015244 <_ux_utility_memory_free_block_best_get+0x7c>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	60fb      	str	r3, [r7, #12]
            break;
 80151ec:	e006      	b.n	80151fc <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 80151ee:	4b15      	ldr	r3, [pc, #84]	; (8015244 <_ux_utility_memory_free_block_best_get+0x7c>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	60fb      	str	r3, [r7, #12]
            break;
 80151f6:	e001      	b.n	80151fc <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 80151f8:	2300      	movs	r3, #0
 80151fa:	e01e      	b.n	801523a <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 80151fc:	e019      	b.n	8015232 <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d112      	bne.n	801522c <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	683a      	ldr	r2, [r7, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d20d      	bcs.n	801522c <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d102      	bne.n	801521c <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	60bb      	str	r3, [r7, #8]
 801521a:	e007      	b.n	801522c <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	429a      	cmp	r2, r3
 8015226:	d201      	bcs.n	801522c <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	689b      	ldr	r3, [r3, #8]
 8015230:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d1e2      	bne.n	80151fe <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 8015238:	68bb      	ldr	r3, [r7, #8]
}                                
 801523a:	0018      	movs	r0, r3
 801523c:	46bd      	mov	sp, r7
 801523e:	b004      	add	sp, #16
 8015240:	bd80      	pop	{r7, pc}
 8015242:	46c0      	nop			; (mov r8, r8)
 8015244:	2001929c 	.word	0x2001929c

08015248 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b086      	sub	sp, #24
 801524c:	af00      	add	r7, sp, #0
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	607a      	str	r2, [r7, #4]
 8015252:	230b      	movs	r3, #11
 8015254:	18fb      	adds	r3, r7, r3
 8015256:	1c0a      	adds	r2, r1, #0
 8015258:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 801525e:	e006      	b.n	801526e <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	1c5a      	adds	r2, r3, #1
 8015264:	617a      	str	r2, [r7, #20]
 8015266:	220b      	movs	r2, #11
 8015268:	18ba      	adds	r2, r7, r2
 801526a:	7812      	ldrb	r2, [r2, #0]
 801526c:	701a      	strb	r2, [r3, #0]
    while(length--)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	1e5a      	subs	r2, r3, #1
 8015272:	607a      	str	r2, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1f3      	bne.n	8015260 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 8015278:	46c0      	nop			; (mov r8, r8)
}
 801527a:	46bd      	mov	sp, r7
 801527c:	b006      	add	sp, #24
 801527e:	bd80      	pop	{r7, pc}

08015280 <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	2334      	movs	r3, #52	; 0x34
 8015290:	2200      	movs	r2, #0
 8015292:	f7fc ff9f 	bl	80121d4 <_txe_mutex_create>
 8015296:	0003      	movs	r3, r0
 8015298:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d005      	beq.n	80152ac <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	001a      	movs	r2, r3
 80152a4:	2108      	movs	r1, #8
 80152a6:	2002      	movs	r0, #2
 80152a8:	f7ff fbfe 	bl	8014aa8 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 80152ac:	68fb      	ldr	r3, [r7, #12]
}
 80152ae:	0018      	movs	r0, r3
 80152b0:	46bd      	mov	sp, r7
 80152b2:	b004      	add	sp, #16
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <_ux_utility_mutex_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b084      	sub	sp, #16
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	0018      	movs	r0, r3
 80152c2:	f7fd f825 	bl	8012310 <_txe_mutex_delete>
 80152c6:	0003      	movs	r3, r0
 80152c8:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 80152ca:	68fb      	ldr	r3, [r7, #12]
}
 80152cc:	0018      	movs	r0, r3
 80152ce:	46bd      	mov	sp, r7
 80152d0:	b004      	add	sp, #16
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	0018      	movs	r0, r3
 80152e0:	f7fd f8b2 	bl	8012448 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 80152e4:	46c0      	nop			; (mov r8, r8)
}
 80152e6:	46bd      	mov	sp, r7
 80152e8:	b002      	add	sp, #8
 80152ea:	bd80      	pop	{r7, pc}

080152ec <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b084      	sub	sp, #16
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 80152f4:	2301      	movs	r3, #1
 80152f6:	425a      	negs	r2, r3
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	0011      	movs	r1, r2
 80152fc:	0018      	movs	r0, r3
 80152fe:	f7fd f845 	bl	801238c <_txe_mutex_get>
 8015302:	0003      	movs	r3, r0
 8015304:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d006      	beq.n	801531a <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	001a      	movs	r2, r3
 8015310:	2108      	movs	r1, #8
 8015312:	2002      	movs	r0, #2
 8015314:	f7ff fbc8 	bl	8014aa8 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 8015318:	46c0      	nop			; (mov r8, r8)
 801531a:	46c0      	nop			; (mov r8, r8)
}
 801531c:	46bd      	mov	sp, r7
 801531e:	b004      	add	sp, #16
 8015320:	bd80      	pop	{r7, pc}

08015322 <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8015322:	b580      	push	{r7, lr}
 8015324:	b086      	sub	sp, #24
 8015326:	af00      	add	r7, sp, #0
 8015328:	60f8      	str	r0, [r7, #12]
 801532a:	60b9      	str	r1, [r7, #8]
 801532c:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	68b9      	ldr	r1, [r7, #8]
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	231c      	movs	r3, #28
 8015336:	f7fd fa0b 	bl	8012750 <_txe_semaphore_create>
 801533a:	0003      	movs	r3, r0
 801533c:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d005      	beq.n	8015350 <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	001a      	movs	r2, r3
 8015348:	2108      	movs	r1, #8
 801534a:	2002      	movs	r0, #2
 801534c:	f7ff fbac 	bl	8014aa8 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 8015350:	697b      	ldr	r3, [r7, #20]
}
 8015352:	0018      	movs	r0, r3
 8015354:	46bd      	mov	sp, r7
 8015356:	b006      	add	sp, #24
 8015358:	bd80      	pop	{r7, pc}

0801535a <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b084      	sub	sp, #16
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	0018      	movs	r0, r3
 8015366:	f7fd fa89 	bl	801287c <_txe_semaphore_delete>
 801536a:	0003      	movs	r3, r0
 801536c:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801536e:	68fb      	ldr	r3, [r7, #12]
}
 8015370:	0018      	movs	r0, r3
 8015372:	46bd      	mov	sp, r7
 8015374:	b004      	add	sp, #16
 8015376:	bd80      	pop	{r7, pc}

08015378 <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8015378:	b590      	push	{r4, r7, lr}
 801537a:	b093      	sub	sp, #76	; 0x4c
 801537c:	af06      	add	r7, sp, #24
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8015382:	f7fb fd01 	bl	8010d88 <_tx_thread_identify>
 8015386:	0003      	movs	r3, r0
 8015388:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 801538a:	231c      	movs	r3, #28
 801538c:	18fc      	adds	r4, r7, r3
 801538e:	2320      	movs	r3, #32
 8015390:	18fa      	adds	r2, r7, r3
 8015392:	2324      	movs	r3, #36	; 0x24
 8015394:	18f9      	adds	r1, r7, r3
 8015396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015398:	2308      	movs	r3, #8
 801539a:	18fb      	adds	r3, r7, r3
 801539c:	9304      	str	r3, [sp, #16]
 801539e:	230c      	movs	r3, #12
 80153a0:	18fb      	adds	r3, r7, r3
 80153a2:	9303      	str	r3, [sp, #12]
 80153a4:	2310      	movs	r3, #16
 80153a6:	18fb      	adds	r3, r7, r3
 80153a8:	9302      	str	r3, [sp, #8]
 80153aa:	2314      	movs	r3, #20
 80153ac:	18fb      	adds	r3, r7, r3
 80153ae:	9301      	str	r3, [sp, #4]
 80153b0:	2318      	movs	r3, #24
 80153b2:	18fb      	adds	r3, r7, r3
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	0023      	movs	r3, r4
 80153b8:	f7fd fbf4 	bl	8012ba4 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 80153bc:	4b0b      	ldr	r3, [pc, #44]	; (80153ec <_ux_utility_semaphore_get+0x74>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	699a      	ldr	r2, [r3, #24]
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d203      	bcs.n	80153d0 <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 80153c8:	4b08      	ldr	r3, [pc, #32]	; (80153ec <_ux_utility_semaphore_get+0x74>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	69ba      	ldr	r2, [r7, #24]
 80153ce:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 80153d0:	683a      	ldr	r2, [r7, #0]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	0011      	movs	r1, r2
 80153d6:	0018      	movs	r0, r3
 80153d8:	f7fd fa8e 	bl	80128f8 <_txe_semaphore_get>
 80153dc:	0003      	movs	r3, r0
 80153de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 80153e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80153e2:	0018      	movs	r0, r3
 80153e4:	46bd      	mov	sp, r7
 80153e6:	b00d      	add	sp, #52	; 0x34
 80153e8:	bd90      	pop	{r4, r7, pc}
 80153ea:	46c0      	nop			; (mov r8, r8)
 80153ec:	2001929c 	.word	0x2001929c

080153f0 <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	0018      	movs	r0, r3
 80153fc:	f7fd fac0 	bl	8012980 <_txe_semaphore_put>
 8015400:	0003      	movs	r3, r0
 8015402:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8015404:	68fb      	ldr	r3, [r7, #12]
}
 8015406:	0018      	movs	r0, r3
 8015408:	46bd      	mov	sp, r7
 801540a:	b004      	add	sp, #16
 801540c:	bd80      	pop	{r7, pc}

0801540e <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 801540e:	b580      	push	{r7, lr}
 8015410:	b084      	sub	sp, #16
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	1c5a      	adds	r2, r3, #1
 801541a:	607a      	str	r2, [r7, #4]
 801541c:	781a      	ldrb	r2, [r3, #0]
 801541e:	200e      	movs	r0, #14
 8015420:	183b      	adds	r3, r7, r0
 8015422:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	b29b      	uxth	r3, r3
 801542a:	021b      	lsls	r3, r3, #8
 801542c:	b299      	uxth	r1, r3
 801542e:	183b      	adds	r3, r7, r0
 8015430:	183a      	adds	r2, r7, r0
 8015432:	8812      	ldrh	r2, [r2, #0]
 8015434:	430a      	orrs	r2, r1
 8015436:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8015438:	183b      	adds	r3, r7, r0
 801543a:	881b      	ldrh	r3, [r3, #0]
}
 801543c:	0018      	movs	r0, r3
 801543e:	46bd      	mov	sp, r7
 8015440:	b004      	add	sp, #16
 8015442:	bd80      	pop	{r7, pc}

08015444 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b086      	sub	sp, #24
 8015448:	af00      	add	r7, sp, #0
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	60b9      	str	r1, [r7, #8]
 801544e:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d101      	bne.n	801545a <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8015456:	23ff      	movs	r3, #255	; 0xff
 8015458:	e01d      	b.n	8015496 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 801545a:	2300      	movs	r3, #0
 801545c:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	18d3      	adds	r3, r2, r3
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d00d      	beq.n	8015486 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	3301      	adds	r3, #1
 801546e:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8015470:	697a      	ldr	r2, [r7, #20]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	429a      	cmp	r2, r3
 8015476:	d9f2      	bls.n	801545e <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8015478:	22ff      	movs	r2, #255	; 0xff
 801547a:	2108      	movs	r1, #8
 801547c:	2002      	movs	r0, #2
 801547e:	f7ff fb13 	bl	8014aa8 <_ux_system_error_handler>

            return(UX_ERROR);
 8015482:	23ff      	movs	r3, #255	; 0xff
 8015484:	e007      	b.n	8015496 <_ux_utility_string_length_check+0x52>
            break;
 8015486:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d002      	beq.n	8015494 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	697a      	ldr	r2, [r7, #20]
 8015492:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8015494:	2300      	movs	r3, #0
}
 8015496:	0018      	movs	r0, r3
 8015498:	46bd      	mov	sp, r7
 801549a:	b006      	add	sp, #24
 801549c:	bd80      	pop	{r7, pc}

0801549e <_ux_utility_string_length_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_string_length_get(UCHAR *string)
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b084      	sub	sp, #16
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]

ULONG       length =  0;
 80154a6:	2300      	movs	r3, #0
 80154a8:	60fb      	str	r3, [r7, #12]

    /* Loop to find the length of the string.  */
    length =  0;
 80154aa:	2300      	movs	r3, #0
 80154ac:	60fb      	str	r3, [r7, #12]
    while (string[length])
 80154ae:	e002      	b.n	80154b6 <_ux_utility_string_length_get+0x18>
    {

        /* Move to next position.  */
        length++;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	3301      	adds	r3, #1
 80154b4:	60fb      	str	r3, [r7, #12]
    while (string[length])
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	18d3      	adds	r3, r2, r3
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d1f6      	bne.n	80154b0 <_ux_utility_string_length_get+0x12>
    }

    /* Return length to caller.  */
    return(length); 
 80154c2:	68fb      	ldr	r3, [r7, #12]
}
 80154c4:	0018      	movs	r0, r3
 80154c6:	46bd      	mov	sp, r7
 80154c8:	b004      	add	sp, #16
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ux_device_class_cdc_acm_activate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b086      	sub	sp, #24
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface;         
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6a1b      	ldr	r3, [r3, #32]
 80154d8:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154de:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	689b      	ldr	r3, [r3, #8]
 80154e4:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface;
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	68fa      	ldr	r2, [r7, #12]
 80154f0:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d004      	beq.n	8015504 <_ux_device_class_cdc_acm_activate+0x38>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	693a      	ldr	r2, [r7, #16]
 8015500:	0010      	movs	r0, r2
 8015502:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8015504:	2300      	movs	r3, #0
}
 8015506:	0018      	movs	r0, r3
 8015508:	46bd      	mov	sp, r7
 801550a:	b006      	add	sp, #24
 801550c:	bd80      	pop	{r7, pc}
	...

08015510 <_ux_device_class_cdc_acm_control_request>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b08a      	sub	sp, #40	; 0x28
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6a1b      	ldr	r3, [r3, #32]
 801551c:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 801551e:	6a3b      	ldr	r3, [r7, #32]
 8015520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015522:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015524:	4b53      	ldr	r3, [pc, #332]	; (8015674 <_ux_device_class_cdc_acm_control_request+0x164>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	3320      	adds	r3, #32
 801552a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	336c      	adds	r3, #108	; 0x6c
 8015530:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	2255      	movs	r2, #85	; 0x55
 8015536:	5c9b      	ldrb	r3, [r3, r2]
 8015538:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	3354      	adds	r3, #84	; 0x54
 801553e:	3302      	adds	r3, #2
 8015540:	0018      	movs	r0, r3
 8015542:	f7ff ff64 	bl	801540e <_ux_utility_short_get>
 8015546:	0003      	movs	r3, r0
 8015548:	60fb      	str	r3, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	3354      	adds	r3, #84	; 0x54
 801554e:	3306      	adds	r3, #6
 8015550:	0018      	movs	r0, r3
 8015552:	f7ff ff5c 	bl	801540e <_ux_utility_short_get>
 8015556:	0003      	movs	r3, r0
 8015558:	60bb      	str	r3, [r7, #8]

    transmit_length = request_length ;
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	2b22      	cmp	r3, #34	; 0x22
 8015562:	d00a      	beq.n	801557a <_ux_device_class_cdc_acm_control_request+0x6a>
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	2b22      	cmp	r3, #34	; 0x22
 8015568:	d900      	bls.n	801556c <_ux_device_class_cdc_acm_control_request+0x5c>
 801556a:	e078      	b.n	801565e <_ux_device_class_cdc_acm_control_request+0x14e>
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	2b20      	cmp	r3, #32
 8015570:	d051      	beq.n	8015616 <_ux_device_class_cdc_acm_control_request+0x106>
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	2b21      	cmp	r3, #33	; 0x21
 8015576:	d022      	beq.n	80155be <_ux_device_class_cdc_acm_control_request+0xae>
 8015578:	e071      	b.n	801565e <_ux_device_class_cdc_acm_control_request+0x14e>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	227f      	movs	r2, #127	; 0x7f
 801557e:	2100      	movs	r1, #0
 8015580:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	2280      	movs	r2, #128	; 0x80
 8015586:	2100      	movs	r1, #0
 8015588:	5499      	strb	r1, [r3, r2]

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2201      	movs	r2, #1
 801558e:	4013      	ands	r3, r2
 8015590:	d003      	beq.n	801559a <_ux_device_class_cdc_acm_control_request+0x8a>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 8015592:	69fb      	ldr	r3, [r7, #28]
 8015594:	227f      	movs	r2, #127	; 0x7f
 8015596:	2101      	movs	r1, #1
 8015598:	5499      	strb	r1, [r3, r2]

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2202      	movs	r2, #2
 801559e:	4013      	ands	r3, r2
 80155a0:	d003      	beq.n	80155aa <_ux_device_class_cdc_acm_control_request+0x9a>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	2280      	movs	r2, #128	; 0x80
 80155a6:	2101      	movs	r1, #1
 80155a8:	5499      	strb	r1, [r3, r2]
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d057      	beq.n	8015662 <_ux_device_class_cdc_acm_control_request+0x152>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	69fa      	ldr	r2, [r7, #28]
 80155b8:	0010      	movs	r0, r2
 80155ba:	4798      	blx	r3
            }

            break ;
 80155bc:	e051      	b.n	8015662 <_ux_device_class_cdc_acm_control_request+0x152>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	2b07      	cmp	r3, #7
 80155c2:	d901      	bls.n	80155c8 <_ux_device_class_cdc_acm_control_request+0xb8>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 80155c4:	2307      	movs	r3, #7
 80155c6:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	68da      	ldr	r2, [r3, #12]
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80155d0:	0019      	movs	r1, r3
 80155d2:	0010      	movs	r0, r2
 80155d4:	f7ff fbb5 	bl	8014d42 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	3304      	adds	r3, #4
 80155de:	69fa      	ldr	r2, [r7, #28]
 80155e0:	217c      	movs	r1, #124	; 0x7c
 80155e2:	5c52      	ldrb	r2, [r2, r1]
 80155e4:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	3305      	adds	r3, #5
 80155ec:	69fa      	ldr	r2, [r7, #28]
 80155ee:	217d      	movs	r1, #125	; 0x7d
 80155f0:	5c52      	ldrb	r2, [r2, r1]
 80155f2:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	68db      	ldr	r3, [r3, #12]
 80155f8:	3306      	adds	r3, #6
 80155fa:	69fa      	ldr	r2, [r7, #28]
 80155fc:	217e      	movs	r1, #126	; 0x7e
 80155fe:	5c52      	ldrb	r2, [r2, r1]
 8015600:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	2203      	movs	r2, #3
 8015606:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 8015608:	68ba      	ldr	r2, [r7, #8]
 801560a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	0018      	movs	r0, r3
 8015610:	f7ff f9c4 	bl	801499c <_ux_device_stack_transfer_request>
            break; 
 8015614:	e028      	b.n	8015668 <_ux_device_class_cdc_acm_control_request+0x158>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	0018      	movs	r0, r3
 801561c:	f7ff fb6d 	bl	8014cfa <_ux_utility_long_get>
 8015620:	0002      	movs	r2, r0
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	68db      	ldr	r3, [r3, #12]
 801562a:	7919      	ldrb	r1, [r3, #4]
 801562c:	69fb      	ldr	r3, [r7, #28]
 801562e:	227c      	movs	r2, #124	; 0x7c
 8015630:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	7959      	ldrb	r1, [r3, #5]
 8015638:	69fb      	ldr	r3, [r7, #28]
 801563a:	227d      	movs	r2, #125	; 0x7d
 801563c:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	7999      	ldrb	r1, [r3, #6]
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	227e      	movs	r2, #126	; 0x7e
 8015648:	5499      	strb	r1, [r3, r2]

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d009      	beq.n	8015666 <_ux_device_class_cdc_acm_control_request+0x156>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	69fa      	ldr	r2, [r7, #28]
 8015658:	0010      	movs	r0, r2
 801565a:	4798      	blx	r3
            }

            break ;
 801565c:	e003      	b.n	8015666 <_ux_device_class_cdc_acm_control_request+0x156>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 801565e:	23ff      	movs	r3, #255	; 0xff
 8015660:	e003      	b.n	801566a <_ux_device_class_cdc_acm_control_request+0x15a>
            break ;
 8015662:	46c0      	nop			; (mov r8, r8)
 8015664:	e000      	b.n	8015668 <_ux_device_class_cdc_acm_control_request+0x158>
            break ;
 8015666:	46c0      	nop			; (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8015668:	2300      	movs	r3, #0
}
 801566a:	0018      	movs	r0, r3
 801566c:	46bd      	mov	sp, r7
 801566e:	b00a      	add	sp, #40	; 0x28
 8015670:	bd80      	pop	{r7, pc}
 8015672:	46c0      	nop			; (mov r8, r8)
 8015674:	20019298 	.word	0x20019298

08015678 <_ux_device_class_cdc_acm_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b088      	sub	sp, #32
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a1b      	ldr	r3, [r3, #32]
 8015684:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801568a:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015696:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	695b      	ldr	r3, [r3, #20]
 801569c:	2280      	movs	r2, #128	; 0x80
 801569e:	4013      	ands	r3, r2
 80156a0:	d105      	bne.n	80156ae <_ux_device_class_cdc_acm_deactivate+0x36>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156aa:	61fb      	str	r3, [r7, #28]
 80156ac:	e002      	b.n	80156b4 <_ux_device_class_cdc_acm_deactivate+0x3c>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b2:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	2126      	movs	r1, #38	; 0x26
 80156b8:	0018      	movs	r0, r3
 80156ba:	f7ff f95b 	bl	8014974 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	2126      	movs	r1, #38	; 0x26
 80156c2:	0018      	movs	r0, r3
 80156c4:	f7ff f956 	bl	8014974 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 80156c8:	693b      	ldr	r3, [r7, #16]
 80156ca:	2200      	movs	r2, #0
 80156cc:	2107      	movs	r1, #7
 80156ce:	0018      	movs	r0, r3
 80156d0:	f000 f8c2 	bl	8015858 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	689b      	ldr	r3, [r3, #8]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d004      	beq.n	80156e6 <_ux_device_class_cdc_acm_deactivate+0x6e>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	0010      	movs	r0, r2
 80156e4:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	227f      	movs	r2, #127	; 0x7f
 80156ea:	2100      	movs	r1, #0
 80156ec:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	2280      	movs	r2, #128	; 0x80
 80156f2:	2100      	movs	r1, #0
 80156f4:	5499      	strb	r1, [r3, r2]

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80156f6:	2300      	movs	r3, #0
}
 80156f8:	0018      	movs	r0, r3
 80156fa:	46bd      	mov	sp, r7
 80156fc:	b008      	add	sp, #32
 80156fe:	bd80      	pop	{r7, pc}

08015700 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	2b07      	cmp	r3, #7
 801570e:	d834      	bhi.n	801577a <_ux_device_class_cdc_acm_entry+0x7a>
 8015710:	009a      	lsls	r2, r3, #2
 8015712:	4b1c      	ldr	r3, [pc, #112]	; (8015784 <_ux_device_class_cdc_acm_entry+0x84>)
 8015714:	18d3      	adds	r3, r2, r3
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	0018      	movs	r0, r3
 801571e:	f000 f833 	bl	8015788 <_ux_device_class_cdc_acm_initialize>
 8015722:	0003      	movs	r3, r0
 8015724:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	e028      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	0018      	movs	r0, r3
 801572e:	f000 f9e3 	bl	8015af8 <_ux_device_class_cdc_acm_uninitialize>
 8015732:	0003      	movs	r3, r0
 8015734:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	e020      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	695b      	ldr	r3, [r3, #20]
 801573e:	2b0a      	cmp	r3, #10
 8015740:	d101      	bne.n	8015746 <_ux_device_class_cdc_acm_entry+0x46>
            return(UX_SUCCESS);
 8015742:	2300      	movs	r3, #0
 8015744:	e01a      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 8015746:	2357      	movs	r3, #87	; 0x57
 8015748:	e018      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	0018      	movs	r0, r3
 801574e:	f7ff febd 	bl	80154cc <_ux_device_class_cdc_acm_activate>
 8015752:	0003      	movs	r3, r0
 8015754:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	e010      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	0018      	movs	r0, r3
 801575e:	f7ff ff8b 	bl	8015678 <_ux_device_class_cdc_acm_deactivate>
 8015762:	0003      	movs	r3, r0
 8015764:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	e008      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	0018      	movs	r0, r3
 801576e:	f7ff fecf 	bl	8015510 <_ux_device_class_cdc_acm_control_request>
 8015772:	0003      	movs	r3, r0
 8015774:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	e000      	b.n	801577c <_ux_device_class_cdc_acm_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 801577a:	2354      	movs	r3, #84	; 0x54
    }   
}
 801577c:	0018      	movs	r0, r3
 801577e:	46bd      	mov	sp, r7
 8015780:	b004      	add	sp, #16
 8015782:	bd80      	pop	{r7, pc}
 8015784:	08018c0c 	.word	0x08018c0c

08015788 <_ux_device_class_cdc_acm_initialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b086      	sub	sp, #24
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6a1b      	ldr	r3, [r3, #32]
 8015794:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 8015796:	2284      	movs	r2, #132	; 0x84
 8015798:	2100      	movs	r1, #0
 801579a:	2000      	movs	r0, #0
 801579c:	f7ff faf4 	bl	8014d88 <_ux_utility_memory_allocate>
 80157a0:	0003      	movs	r3, r0
 80157a2:	613b      	str	r3, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d101      	bne.n	80157ae <_ux_device_class_cdc_acm_initialize+0x26>
        return(UX_MEMORY_INSUFFICIENT);
 80157aa:	2312      	movs	r3, #18
 80157ac:	e04b      	b.n	8015846 <_ux_device_class_cdc_acm_initialize+0xbe>

    /* Save the address of the CDC instance inside the CDC container.  */
    class -> ux_slave_class_instance = (VOID *) cdc_acm;
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	693a      	ldr	r2, [r7, #16]
 80157b2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b8:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	681a      	ldr	r2, [r3, #0]
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	685a      	ldr	r2, [r3, #4]
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	689a      	ldr	r2, [r3, #8]
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	3310      	adds	r3, #16
 80157d6:	4a1e      	ldr	r2, [pc, #120]	; (8015850 <_ux_device_class_cdc_acm_initialize+0xc8>)
 80157d8:	0011      	movs	r1, r2
 80157da:	0018      	movs	r0, r3
 80157dc:	f7ff fd50 	bl	8015280 <_ux_utility_mutex_create>
 80157e0:	0003      	movs	r3, r0
 80157e2:	60bb      	str	r3, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d005      	beq.n	80157f6 <_ux_device_class_cdc_acm_initialize+0x6e>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	0018      	movs	r0, r3
 80157ee:	f7ff fc4f 	bl	8015090 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 80157f2:	2317      	movs	r3, #23
 80157f4:	e027      	b.n	8015846 <_ux_device_class_cdc_acm_initialize+0xbe>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	3344      	adds	r3, #68	; 0x44
 80157fa:	4a16      	ldr	r2, [pc, #88]	; (8015854 <_ux_device_class_cdc_acm_initialize+0xcc>)
 80157fc:	0011      	movs	r1, r2
 80157fe:	0018      	movs	r0, r3
 8015800:	f7ff fd3e 	bl	8015280 <_ux_utility_mutex_create>
 8015804:	0003      	movs	r3, r0
 8015806:	60bb      	str	r3, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d00a      	beq.n	8015824 <_ux_device_class_cdc_acm_initialize+0x9c>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	3310      	adds	r3, #16
 8015812:	0018      	movs	r0, r3
 8015814:	f7ff fd4f 	bl	80152b6 <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	0018      	movs	r0, r3
 801581c:	f7ff fc38 	bl	8015090 <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 8015820:	2317      	movs	r3, #23
 8015822:	e010      	b.n	8015846 <_ux_device_class_cdc_acm_initialize+0xbe>
    }        
    
#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	22e1      	movs	r2, #225	; 0xe1
 8015828:	0252      	lsls	r2, r2, #9
 801582a:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	227c      	movs	r2, #124	; 0x7c
 8015830:	2101      	movs	r1, #1
 8015832:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	227d      	movs	r2, #125	; 0x7d
 8015838:	2100      	movs	r1, #0
 801583a:	5499      	strb	r1, [r3, r2]
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	227e      	movs	r2, #126	; 0x7e
 8015840:	2108      	movs	r1, #8
 8015842:	5499      	strb	r1, [r3, r2]

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 8015844:	2300      	movs	r3, #0
}
 8015846:	0018      	movs	r0, r3
 8015848:	46bd      	mov	sp, r7
 801584a:	b006      	add	sp, #24
 801584c:	bd80      	pop	{r7, pc}
 801584e:	46c0      	nop			; (mov r8, r8)
 8015850:	080188a8 	.word	0x080188a8
 8015854:	080188c8 	.word	0x080188c8

08015858 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b08a      	sub	sp, #40	; 0x28
 801585c:	af00      	add	r7, sp, #0
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 8015864:	2300      	movs	r3, #0
 8015866:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	2b09      	cmp	r3, #9
 801586c:	d900      	bls.n	8015870 <_ux_device_class_cdc_acm_ioctl+0x18>
 801586e:	e09f      	b.n	80159b0 <_ux_device_class_cdc_acm_ioctl+0x158>
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	009a      	lsls	r2, r3, #2
 8015874:	4b55      	ldr	r3, [pc, #340]	; (80159cc <_ux_device_class_cdc_acm_ioctl+0x174>)
 8015876:	18d3      	adds	r3, r2, r3
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	469f      	mov	pc, r3
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	7919      	ldrb	r1, [r3, #4]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	227c      	movs	r2, #124	; 0x7c
 8015890:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	7959      	ldrb	r1, [r3, #5]
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	227d      	movs	r2, #125	; 0x7d
 801589a:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	7999      	ldrb	r1, [r3, #6]
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	227e      	movs	r2, #126	; 0x7e
 80158a4:	5499      	strb	r1, [r3, r2]
            
            break;
 80158a6:	e08c      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	227c      	movs	r2, #124	; 0x7c
 80158b8:	5c9a      	ldrb	r2, [r3, r2]
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	227d      	movs	r2, #125	; 0x7d
 80158c2:	5c9a      	ldrb	r2, [r3, r2]
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	227e      	movs	r2, #126	; 0x7e
 80158cc:	5c9a      	ldrb	r2, [r3, r2]
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	719a      	strb	r2, [r3, #6]
            
            break;
 80158d2:	e076      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2280      	movs	r2, #128	; 0x80
 80158dc:	5c9a      	ldrb	r2, [r3, r2]
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	227f      	movs	r2, #127	; 0x7f
 80158e6:	5c9a      	ldrb	r2, [r3, r2]
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	705a      	strb	r2, [r3, #1]
            
            break;
 80158ec:	e069      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	7819      	ldrb	r1, [r3, #0]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2280      	movs	r2, #128	; 0x80
 80158fa:	5499      	strb	r1, [r3, r2]
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	7859      	ldrb	r1, [r3, #1]
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	227f      	movs	r2, #127	; 0x7f
 8015904:	5499      	strb	r1, [r3, r2]
            
            break;
 8015906:	e05c      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015912:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2b01      	cmp	r3, #1
 8015918:	d002      	beq.n	8015920 <_ux_device_class_cdc_acm_ioctl+0xc8>
 801591a:	2b02      	cmp	r3, #2
 801591c:	d009      	beq.n	8015932 <_ux_device_class_cdc_acm_ioctl+0xda>
 801591e:	e011      	b.n	8015944 <_ux_device_class_cdc_acm_ioctl+0xec>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8015920:	6a3b      	ldr	r3, [r7, #32]
 8015922:	695b      	ldr	r3, [r3, #20]
 8015924:	2280      	movs	r2, #128	; 0x80
 8015926:	4013      	ands	r3, r2
 8015928:	d10f      	bne.n	801594a <_ux_device_class_cdc_acm_ioctl+0xf2>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801592a:	6a3b      	ldr	r3, [r7, #32]
 801592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801592e:	623b      	str	r3, [r7, #32]
                }
                break;
 8015930:	e00b      	b.n	801594a <_ux_device_class_cdc_acm_ioctl+0xf2>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8015932:	6a3b      	ldr	r3, [r7, #32]
 8015934:	695b      	ldr	r3, [r3, #20]
 8015936:	2280      	movs	r2, #128	; 0x80
 8015938:	4013      	ands	r3, r2
 801593a:	d008      	beq.n	801594e <_ux_device_class_cdc_acm_ioctl+0xf6>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801593c:	6a3b      	ldr	r3, [r7, #32]
 801593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015940:	623b      	str	r3, [r7, #32]
                }
                break;
 8015942:	e004      	b.n	801594e <_ux_device_class_cdc_acm_ioctl+0xf6>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 8015944:	2353      	movs	r3, #83	; 0x53
 8015946:	627b      	str	r3, [r7, #36]	; 0x24
 8015948:	e002      	b.n	8015950 <_ux_device_class_cdc_acm_ioctl+0xf8>
                break;
 801594a:	46c0      	nop			; (mov r8, r8)
 801594c:	e000      	b.n	8015950 <_ux_device_class_cdc_acm_ioctl+0xf8>
                break;
 801594e:	46c0      	nop			; (mov r8, r8)
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015950:	6a3b      	ldr	r3, [r7, #32]
 8015952:	3330      	adds	r3, #48	; 0x30
 8015954:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	2b01      	cmp	r3, #1
 801595c:	d130      	bne.n	80159c0 <_ux_device_class_cdc_acm_ioctl+0x168>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	21f9      	movs	r1, #249	; 0xf9
 8015962:	0018      	movs	r0, r3
 8015964:	f7fe ffce 	bl	8014904 <_ux_device_stack_transfer_abort>
            
            }
#endif
            break;
 8015968:	e02a      	b.n	80159c0 <_ux_device_class_cdc_acm_ioctl+0x168>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015974:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	695b      	ldr	r3, [r3, #20]
 801597a:	2280      	movs	r2, #128	; 0x80
 801597c:	401a      	ands	r2, r3
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	2b08      	cmp	r3, #8
 8015982:	d101      	bne.n	8015988 <_ux_device_class_cdc_acm_ioctl+0x130>
 8015984:	2300      	movs	r3, #0
 8015986:	e000      	b.n	801598a <_ux_device_class_cdc_acm_ioctl+0x132>
 8015988:	2380      	movs	r3, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 801598a:	4293      	cmp	r3, r2
 801598c:	d002      	beq.n	8015994 <_ux_device_class_cdc_acm_ioctl+0x13c>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 801598e:	6a3b      	ldr	r3, [r7, #32]
 8015990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015992:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015994:	6a3b      	ldr	r3, [r7, #32]
 8015996:	3330      	adds	r3, #48	; 0x30
 8015998:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d102      	bne.n	80159a8 <_ux_device_class_cdc_acm_ioctl+0x150>
                status = UX_ERROR;
 80159a2:	23ff      	movs	r3, #255	; 0xff
 80159a4:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 80159a6:	e00c      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	69bb      	ldr	r3, [r7, #24]
 80159ac:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 80159ae:	e008      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
#endif
    
        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80159b0:	2254      	movs	r2, #84	; 0x54
 80159b2:	2107      	movs	r1, #7
 80159b4:	2002      	movs	r0, #2
 80159b6:	f7ff f877 	bl	8014aa8 <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 80159ba:	2354      	movs	r3, #84	; 0x54
 80159bc:	627b      	str	r3, [r7, #36]	; 0x24
 80159be:	e000      	b.n	80159c2 <_ux_device_class_cdc_acm_ioctl+0x16a>
            break;
 80159c0:	46c0      	nop			; (mov r8, r8)
    }   

    /* Return status to caller.  */
    return(status);
 80159c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 80159c4:	0018      	movs	r0, r3
 80159c6:	46bd      	mov	sp, r7
 80159c8:	b00a      	add	sp, #40	; 0x28
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	08018c2c 	.word	0x08018c2c

080159d0 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b08a      	sub	sp, #40	; 0x28
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	607a      	str	r2, [r7, #4]
 80159dc:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 80159de:	2300      	movs	r3, #0
 80159e0:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80159e2:	4b44      	ldr	r3, [pc, #272]	; (8015af4 <_ux_device_class_cdc_acm_read+0x124>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	3320      	adds	r3, #32
 80159e8:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80159ea:	69bb      	ldr	r3, [r7, #24]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b03      	cmp	r3, #3
 80159f0:	d006      	beq.n	8015a00 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 80159f2:	2251      	movs	r2, #81	; 0x51
 80159f4:	2107      	movs	r1, #7
 80159f6:	2002      	movs	r0, #2
 80159f8:	f7ff f856 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 80159fc:	2351      	movs	r3, #81	; 0x51
 80159fe:	e074      	b.n	8015aea <_ux_device_class_cdc_acm_read+0x11a>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a0a:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 8015a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0e:	695b      	ldr	r3, [r3, #20]
 8015a10:	2280      	movs	r2, #128	; 0x80
 8015a12:	4013      	ands	r3, r2
 8015a14:	d002      	beq.n	8015a1c <_ux_device_class_cdc_acm_read+0x4c>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8015a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	3344      	adds	r3, #68	; 0x44
 8015a20:	0018      	movs	r0, r3
 8015a22:	f7ff fc63 	bl	80152ec <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a28:	3330      	adds	r3, #48	; 0x30
 8015a2a:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8015a32:	e042      	b.n	8015aba <_ux_device_class_cdc_acm_read+0xea>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a36:	69db      	ldr	r3, [r3, #28]
 8015a38:	687a      	ldr	r2, [r7, #4]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d903      	bls.n	8015a46 <_ux_device_class_cdc_acm_read+0x76>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a40:	69db      	ldr	r3, [r3, #28]
 8015a42:	61fb      	str	r3, [r7, #28]
 8015a44:	e001      	b.n	8015a4a <_ux_device_class_cdc_acm_read+0x7a>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8015a4a:	69fa      	ldr	r2, [r7, #28]
 8015a4c:	69f9      	ldr	r1, [r7, #28]
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	0018      	movs	r0, r3
 8015a52:	f7fe ffa3 	bl	801499c <_ux_device_stack_transfer_request>
 8015a56:	0003      	movs	r3, r0
 8015a58:	623b      	str	r3, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d125      	bne.n	8015aac <_ux_device_class_cdc_acm_read+0xdc>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	68d9      	ldr	r1, [r3, #12]
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	699a      	ldr	r2, [r3, #24]
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	0018      	movs	r0, r3
 8015a6c:	f7ff faf3 	bl	8015056 <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8015a70:	693b      	ldr	r3, [r7, #16]
 8015a72:	699b      	ldr	r3, [r3, #24]
 8015a74:	68ba      	ldr	r2, [r7, #8]
 8015a76:	18d3      	adds	r3, r2, r3
 8015a78:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	699b      	ldr	r3, [r3, #24]
 8015a82:	18d2      	adds	r2, r2, r3
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	699b      	ldr	r3, [r3, #24]
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	1ad3      	subs	r3, r2, r3
 8015a90:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	699a      	ldr	r2, [r3, #24]
 8015a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a98:	69db      	ldr	r3, [r3, #28]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d20d      	bcs.n	8015aba <_ux_device_class_cdc_acm_read+0xea>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	3344      	adds	r3, #68	; 0x44
 8015aa2:	0018      	movs	r0, r3
 8015aa4:	f7ff fc16 	bl	80152d4 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	e01e      	b.n	8015aea <_ux_device_class_cdc_acm_read+0x11a>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	3344      	adds	r3, #68	; 0x44
 8015ab0:	0018      	movs	r0, r3
 8015ab2:	f7ff fc0f 	bl	80152d4 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 8015ab6:	6a3b      	ldr	r3, [r7, #32]
 8015ab8:	e017      	b.n	8015aea <_ux_device_class_cdc_acm_read+0x11a>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8015aba:	69bb      	ldr	r3, [r7, #24]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d102      	bne.n	8015ac8 <_ux_device_class_cdc_acm_read+0xf8>
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d1b5      	bne.n	8015a34 <_ux_device_class_cdc_acm_read+0x64>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	3344      	adds	r3, #68	; 0x44
 8015acc:	0018      	movs	r0, r3
 8015ace:	f7ff fc01 	bl	80152d4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d006      	beq.n	8015ae8 <_ux_device_class_cdc_acm_read+0x118>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8015ada:	2222      	movs	r2, #34	; 0x22
 8015adc:	2107      	movs	r1, #7
 8015ade:	2002      	movs	r0, #2
 8015ae0:	f7fe ffe2 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8015ae4:	2322      	movs	r3, #34	; 0x22
 8015ae6:	e000      	b.n	8015aea <_ux_device_class_cdc_acm_read+0x11a>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8015ae8:	6a3b      	ldr	r3, [r7, #32]
}
 8015aea:	0018      	movs	r0, r3
 8015aec:	46bd      	mov	sp, r7
 8015aee:	b00a      	add	sp, #40	; 0x28
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	46c0      	nop			; (mov r8, r8)
 8015af4:	20019298 	.word	0x20019298

08015af8 <_ux_device_class_cdc_acm_uninitialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a1b      	ldr	r3, [r3, #32]
 8015b04:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class -> ux_slave_class_instance;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b0a:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d00d      	beq.n	8015b2e <_ux_device_class_cdc_acm_uninitialize+0x36>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	3310      	adds	r3, #16
 8015b16:	0018      	movs	r0, r3
 8015b18:	f7ff fbcd 	bl	80152b6 <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_utility_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	3344      	adds	r3, #68	; 0x44
 8015b20:	0018      	movs	r0, r3
 8015b22:	f7ff fbc8 	bl	80152b6 <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	0018      	movs	r0, r3
 8015b2a:	f7ff fab1 	bl	8015090 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	0018      	movs	r0, r3
 8015b32:	46bd      	mov	sp, r7
 8015b34:	b004      	add	sp, #16
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b08a      	sub	sp, #40	; 0x28
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
 8015b44:	603b      	str	r3, [r7, #0]
UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
UINT                        status = 0;
 8015b46:	2300      	movs	r3, #0
 8015b48:	61fb      	str	r3, [r7, #28]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015b4a:	4b48      	ldr	r3, [pc, #288]	; (8015c6c <_ux_device_class_cdc_acm_write+0x134>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	3320      	adds	r3, #32
 8015b50:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015b52:	69bb      	ldr	r3, [r7, #24]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	2b03      	cmp	r3, #3
 8015b58:	d006      	beq.n	8015b68 <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 8015b5a:	2251      	movs	r2, #81	; 0x51
 8015b5c:	2107      	movs	r1, #7
 8015b5e:	2002      	movs	r0, #2
 8015b60:	f7fe ffa2 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 8015b64:	2351      	movs	r3, #81	; 0x51
 8015b66:	e07c      	b.n	8015c62 <_ux_device_class_cdc_acm_write+0x12a>
    }
        
    /* We need the interface to the class.  */
    interface =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface -> ux_slave_interface_first_endpoint;
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b72:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8015b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b76:	695b      	ldr	r3, [r3, #20]
 8015b78:	2280      	movs	r2, #128	; 0x80
 8015b7a:	4013      	ands	r3, r2
 8015b7c:	d102      	bne.n	8015b84 <_ux_device_class_cdc_acm_write+0x4c>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8015b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b82:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_utility_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	3310      	adds	r3, #16
 8015b88:	0018      	movs	r0, r3
 8015b8a:	f7ff fbaf 	bl	80152ec <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b90:	3330      	adds	r3, #48	; 0x30
 8015b92:	613b      	str	r3, [r7, #16]

    /* Reset the actual length.  */
    *actual_length =  0;
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	2200      	movs	r2, #0
 8015b98:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 8015b9a:	69bb      	ldr	r3, [r7, #24]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b03      	cmp	r3, #3
 8015ba0:	d147      	bne.n	8015c32 <_ux_device_class_cdc_acm_write+0xfa>
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d144      	bne.n	8015c32 <_ux_device_class_cdc_acm_write+0xfa>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	2200      	movs	r2, #0
 8015bac:	2100      	movs	r1, #0
 8015bae:	0018      	movs	r0, r3
 8015bb0:	f7fe fef4 	bl	801499c <_ux_device_stack_transfer_request>
 8015bb4:	0003      	movs	r3, r0
 8015bb6:	61fb      	str	r3, [r7, #28]

        /* Free Mutex resource.  */
        _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	3310      	adds	r3, #16
 8015bbc:	0018      	movs	r0, r3
 8015bbe:	f7ff fb89 	bl	80152d4 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	e04d      	b.n	8015c62 <_ux_device_class_cdc_acm_write+0x12a>
        /* Check if we need more transactions.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 8015bc6:	687a      	ldr	r2, [r7, #4]
 8015bc8:	2380      	movs	r3, #128	; 0x80
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d903      	bls.n	8015bd8 <_ux_device_class_cdc_acm_write+0xa0>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 8015bd0:	2380      	movs	r3, #128	; 0x80
 8015bd2:	009b      	lsls	r3, r3, #2
 8015bd4:	623b      	str	r3, [r7, #32]
 8015bd6:	e001      	b.n	8015bdc <_ux_device_class_cdc_acm_write+0xa4>
                
            else
            
                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	623b      	str	r3, [r7, #32]
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8015bdc:	693b      	ldr	r3, [r7, #16]
 8015bde:	68db      	ldr	r3, [r3, #12]
 8015be0:	6a3a      	ldr	r2, [r7, #32]
 8015be2:	68b9      	ldr	r1, [r7, #8]
 8015be4:	0018      	movs	r0, r3
 8015be6:	f7ff fa36 	bl	8015056 <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 8015bea:	6a3a      	ldr	r2, [r7, #32]
 8015bec:	6a39      	ldr	r1, [r7, #32]
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	0018      	movs	r0, r3
 8015bf2:	f7fe fed3 	bl	801499c <_ux_device_stack_transfer_request>
 8015bf6:	0003      	movs	r3, r0
 8015bf8:	61fb      	str	r3, [r7, #28]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d111      	bne.n	8015c24 <_ux_device_class_cdc_acm_write+0xec>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	699b      	ldr	r3, [r3, #24]
 8015c04:	68ba      	ldr	r2, [r7, #8]
 8015c06:	18d3      	adds	r3, r2, r3
 8015c08:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	699b      	ldr	r3, [r3, #24]
 8015c12:	18d2      	adds	r2, r2, r3
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	699b      	ldr	r3, [r3, #24]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	607b      	str	r3, [r7, #4]
 8015c22:	e006      	b.n	8015c32 <_ux_device_class_cdc_acm_write+0xfa>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	3310      	adds	r3, #16
 8015c28:	0018      	movs	r0, r3
 8015c2a:	f7ff fb53 	bl	80152d4 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	e017      	b.n	8015c62 <_ux_device_class_cdc_acm_write+0x12a>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2b03      	cmp	r3, #3
 8015c38:	d102      	bne.n	8015c40 <_ux_device_class_cdc_acm_write+0x108>
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d1c2      	bne.n	8015bc6 <_ux_device_class_cdc_acm_write+0x8e>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_utility_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	3310      	adds	r3, #16
 8015c44:	0018      	movs	r0, r3
 8015c46:	f7ff fb45 	bl	80152d4 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	2b03      	cmp	r3, #3
 8015c50:	d006      	beq.n	8015c60 <_ux_device_class_cdc_acm_write+0x128>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 8015c52:	2222      	movs	r2, #34	; 0x22
 8015c54:	2107      	movs	r1, #7
 8015c56:	2002      	movs	r0, #2
 8015c58:	f7fe ff26 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 8015c5c:	2322      	movs	r3, #34	; 0x22
 8015c5e:	e000      	b.n	8015c62 <_ux_device_class_cdc_acm_write+0x12a>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 8015c60:	69fb      	ldr	r3, [r7, #28]
          
}
 8015c62:	0018      	movs	r0, r3
 8015c64:	46bd      	mov	sp, r7
 8015c66:	b00a      	add	sp, #40	; 0x28
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	46c0      	nop			; (mov r8, r8)
 8015c6c:	20019298 	.word	0x20019298

08015c70 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2280      	movs	r2, #128	; 0x80
 8015c7e:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2201      	movs	r2, #1
 8015c84:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	0018      	movs	r0, r3
 8015c8a:	f7fd fda7 	bl	80137dc <_ux_device_stack_control_request_process>
}
 8015c8e:	46c0      	nop			; (mov r8, r8)
 8015c90:	46bd      	mov	sp, r7
 8015c92:	b002      	add	sp, #8
 8015c94:	bd80      	pop	{r7, pc}

08015c96 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8015c96:	b580      	push	{r7, lr}
 8015c98:	b084      	sub	sp, #16
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	60f8      	str	r0, [r7, #12]
 8015c9e:	60b9      	str	r1, [r7, #8]
 8015ca0:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	2280      	movs	r2, #128	; 0x80
 8015cac:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	f7fd fd93 	bl	80137dc <_ux_device_stack_control_request_process>
 8015cb6:	1e03      	subs	r3, r0, #0
 8015cb8:	d108      	bne.n	8015ccc <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	2203      	movs	r2, #3
 8015cbe:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	f7ef f82e 	bl	8004d28 <HAL_PCD_EP_Transmit>
    }
}
 8015ccc:	46c0      	nop			; (mov r8, r8)
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	b004      	add	sp, #16
 8015cd2:	bd80      	pop	{r7, pc}

08015cd4 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2280      	movs	r2, #128	; 0x80
 8015ce4:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	0018      	movs	r0, r3
 8015cea:	f7fd fd77 	bl	80137dc <_ux_device_stack_control_request_process>
 8015cee:	1e03      	subs	r3, r0, #0
 8015cf0:	d108      	bne.n	8015d04 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2204      	movs	r2, #4
 8015cf6:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	2100      	movs	r1, #0
 8015d00:	f7ef f812 	bl	8004d28 <HAL_PCD_EP_Transmit>
    }
}
 8015d04:	46c0      	nop			; (mov r8, r8)
 8015d06:	46bd      	mov	sp, r7
 8015d08:	b004      	add	sp, #16
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b088      	sub	sp, #32
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015d14:	4b3e      	ldr	r3, [pc, #248]	; (8015e10 <HAL_PCD_SetupStageCallback+0x104>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	69db      	ldr	r3, [r3, #28]
 8015d1e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	3304      	adds	r3, #4
 8015d24:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	3330      	adds	r3, #48	; 0x30
 8015d2c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	3354      	adds	r3, #84	; 0x54
 8015d32:	0018      	movs	r0, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	22b1      	movs	r2, #177	; 0xb1
 8015d38:	0092      	lsls	r2, r2, #2
 8015d3a:	4694      	mov	ip, r2
 8015d3c:	4463      	add	r3, ip
 8015d3e:	2208      	movs	r2, #8
 8015d40:	0019      	movs	r1, r3
 8015d42:	f7ff f988 	bl	8015056 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	2201      	movs	r2, #1
 8015d50:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	2200      	movs	r2, #0
 8015d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	685b      	ldr	r3, [r3, #4]
 8015d5c:	220e      	movs	r2, #14
 8015d5e:	4393      	bics	r3, r2
 8015d60:	001a      	movs	r2, r3
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	2254      	movs	r2, #84	; 0x54
 8015d6a:	5c9b      	ldrb	r3, [r3, r2]
 8015d6c:	b25b      	sxtb	r3, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	da06      	bge.n	8015d80 <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8015d72:	693a      	ldr	r2, [r7, #16]
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	0011      	movs	r1, r2
 8015d78:	0018      	movs	r0, r3
 8015d7a:	f7ff ff79 	bl	8015c70 <_ux_dcd_stm32_setup_in>
 8015d7e:	e043      	b.n	8015e08 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	2200      	movs	r2, #0
 8015d84:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	225a      	movs	r2, #90	; 0x5a
 8015d8a:	5c9b      	ldrb	r3, [r3, r2]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d10b      	bne.n	8015da8 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	225b      	movs	r2, #91	; 0x5b
 8015d94:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d106      	bne.n	8015da8 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	6939      	ldr	r1, [r7, #16]
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	0018      	movs	r0, r3
 8015da2:	f7ff ff97 	bl	8015cd4 <_ux_dcd_stm32_setup_status>
 8015da6:	e02f      	b.n	8015e08 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	689b      	ldr	r3, [r3, #8]
 8015dac:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	3354      	adds	r3, #84	; 0x54
 8015db2:	3306      	adds	r3, #6
 8015db4:	0018      	movs	r0, r3
 8015db6:	f7ff fb2a 	bl	801540e <_ux_utility_short_get>
 8015dba:	0002      	movs	r2, r0
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	695a      	ldr	r2, [r3, #20]
 8015dc4:	2380      	movs	r3, #128	; 0x80
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d909      	bls.n	8015de0 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8015dcc:	68fa      	ldr	r2, [r7, #12]
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	0011      	movs	r1, r2
 8015dd2:	0018      	movs	r0, r3
 8015dd4:	f000 fa58 	bl	8016288 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8015dde:	e013      	b.n	8015e08 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	2200      	movs	r2, #0
 8015de4:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	68da      	ldr	r2, [r3, #12]
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8015df2:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	695b      	ldr	r3, [r3, #20]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f7ee ff35 	bl	8004c6c <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	2202      	movs	r2, #2
 8015e06:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	b008      	add	sp, #32
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	46c0      	nop			; (mov r8, r8)
 8015e10:	20019298 	.word	0x20019298

08015e14 <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b088      	sub	sp, #32
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	000a      	movs	r2, r1
 8015e1e:	1cfb      	adds	r3, r7, #3
 8015e20:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015e22:	4b4f      	ldr	r3, [pc, #316]	; (8015f60 <HAL_PCD_DataInStageCallback+0x14c>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	69db      	ldr	r3, [r3, #28]
 8015e2c:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8015e2e:	1cfb      	adds	r3, r7, #3
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	220f      	movs	r2, #15
 8015e34:	4013      	ands	r3, r2
 8015e36:	d00d      	beq.n	8015e54 <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8015e38:	1cfb      	adds	r3, r7, #3
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	220f      	movs	r2, #15
 8015e3e:	401a      	ands	r2, r3
 8015e40:	0013      	movs	r3, r2
 8015e42:	005b      	lsls	r3, r3, #1
 8015e44:	189b      	adds	r3, r3, r2
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	3360      	adds	r3, #96	; 0x60
 8015e4a:	693a      	ldr	r2, [r7, #16]
 8015e4c:	18d3      	adds	r3, r2, r3
 8015e4e:	3304      	adds	r3, #4
 8015e50:	61fb      	str	r3, [r7, #28]
 8015e52:	e00b      	b.n	8015e6c <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015e54:	1cfb      	adds	r3, r7, #3
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	220f      	movs	r2, #15
 8015e5a:	401a      	ands	r2, r3
 8015e5c:	0013      	movs	r3, r2
 8015e5e:	005b      	lsls	r3, r3, #1
 8015e60:	189b      	adds	r3, r3, r2
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	693a      	ldr	r2, [r7, #16]
 8015e66:	18d3      	adds	r3, r2, r3
 8015e68:	3304      	adds	r3, #4
 8015e6a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	3330      	adds	r3, #48	; 0x30
 8015e72:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015e74:	1cfb      	adds	r3, r7, #3
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d15e      	bne.n	8015f3a <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	689b      	ldr	r3, [r3, #8]
 8015e80:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8015e82:	69fb      	ldr	r3, [r7, #28]
 8015e84:	7a1b      	ldrb	r3, [r3, #8]
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d166      	bne.n	8015f58 <HAL_PCD_DataInStageCallback+0x144>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	2200      	movs	r2, #0
 8015e90:	2100      	movs	r1, #0
 8015e92:	f7ee feeb 	bl	8004c6c <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015e9a:	68bb      	ldr	r3, [r7, #8]
 8015e9c:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d826      	bhi.n	8015ef0 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ea6:	2b01      	cmp	r3, #1
 8015ea8:	d10b      	bne.n	8015ec2 <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 8015eae:	b2d9      	uxtb	r1, r3
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	f7ee ff37 	bl	8004d28 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	651a      	str	r2, [r3, #80]	; 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 8015ec0:	e04a      	b.n	8015f58 <HAL_PCD_DataInStageCallback+0x144>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2202      	movs	r2, #2
 8015ecc:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d004      	beq.n	8015ee8 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ee2:	68fa      	ldr	r2, [r7, #12]
 8015ee4:	0010      	movs	r0, r2
 8015ee6:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	2204      	movs	r2, #4
 8015eec:	721a      	strb	r2, [r3, #8]
}
 8015eee:	e033      	b.n	8015f58 <HAL_PCD_DataInStageCallback+0x144>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	69da      	ldr	r2, [r3, #28]
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	69db      	ldr	r3, [r3, #28]
 8015ef8:	1ad3      	subs	r3, r2, r3
 8015efa:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015efc:	68bb      	ldr	r3, [r7, #8]
 8015efe:	69db      	ldr	r3, [r3, #28]
 8015f00:	69ba      	ldr	r2, [r7, #24]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d902      	bls.n	8015f0c <HAL_PCD_DataInStageCallback+0xf8>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	69db      	ldr	r3, [r3, #28]
 8015f0a:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	691a      	ldr	r2, [r3, #16]
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	69db      	ldr	r3, [r3, #28]
 8015f14:	18d2      	adds	r2, r2, r3
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	69da      	ldr	r2, [r3, #28]
 8015f1e:	69bb      	ldr	r3, [r7, #24]
 8015f20:	1ad2      	subs	r2, r2, r3
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 8015f2a:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8015f30:	69bb      	ldr	r3, [r7, #24]
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ee fef8 	bl	8004d28 <HAL_PCD_EP_Transmit>
}
 8015f38:	e00e      	b.n	8015f58 <HAL_PCD_DataInStageCallback+0x144>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	2202      	movs	r2, #2
 8015f44:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3330      	adds	r3, #48	; 0x30
 8015f52:	0018      	movs	r0, r3
 8015f54:	f7ff fa4c 	bl	80153f0 <_ux_utility_semaphore_put>
}
 8015f58:	46c0      	nop			; (mov r8, r8)
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	b008      	add	sp, #32
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	20019298 	.word	0x20019298

08015f64 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b088      	sub	sp, #32
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	000a      	movs	r2, r1
 8015f6e:	1cfb      	adds	r3, r7, #3
 8015f70:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8015f72:	4b40      	ldr	r3, [pc, #256]	; (8016074 <HAL_PCD_DataOutStageCallback+0x110>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	69db      	ldr	r3, [r3, #28]
 8015f7c:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015f7e:	1cfb      	adds	r3, r7, #3
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	220f      	movs	r2, #15
 8015f84:	401a      	ands	r2, r3
 8015f86:	0013      	movs	r3, r2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	189b      	adds	r3, r3, r2
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	69ba      	ldr	r2, [r7, #24]
 8015f90:	18d3      	adds	r3, r2, r3
 8015f92:	3304      	adds	r3, #4
 8015f94:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	3330      	adds	r3, #48	; 0x30
 8015f9c:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015f9e:	1cfb      	adds	r3, r7, #3
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d14c      	bne.n	8016040 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	7a1b      	ldrb	r3, [r3, #8]
 8015faa:	2b02      	cmp	r3, #2
 8015fac:	d15d      	bne.n	801606a <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	689b      	ldr	r3, [r3, #8]
 8015fb2:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015fb4:	1cfb      	adds	r3, r7, #3
 8015fb6:	781a      	ldrb	r2, [r3, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	0011      	movs	r1, r2
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	f7ee fe9a 	bl	8004cf6 <HAL_PCD_EP_GetRxCount>
 8015fc2:	0003      	movs	r3, r0
 8015fc4:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	699a      	ldr	r2, [r3, #24]
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	18d2      	adds	r2, r2, r3
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d823      	bhi.n	8016026 <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d004      	beq.n	8015ff4 <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8015fee:	68ba      	ldr	r2, [r7, #8]
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d006      	beq.n	8016002 <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	6939      	ldr	r1, [r7, #16]
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	0018      	movs	r0, r3
 8015ffc:	f7ff fe4b 	bl	8015c96 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8016000:	e033      	b.n	801606a <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	691a      	ldr	r2, [r3, #16]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	69db      	ldr	r3, [r3, #28]
 801600a:	18d2      	adds	r2, r2, r3
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 8016014:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	69db      	ldr	r3, [r3, #28]
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f7ee fe24 	bl	8004c6c <HAL_PCD_EP_Receive>
}
 8016024:	e021      	b.n	801606a <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	2227      	movs	r2, #39	; 0x27
 801602a:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016030:	2b00      	cmp	r3, #0
 8016032:	d01a      	beq.n	801606a <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016038:	693a      	ldr	r2, [r7, #16]
 801603a:	0010      	movs	r0, r2
 801603c:	4798      	blx	r3
}
 801603e:	e014      	b.n	801606a <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8016040:	1cfb      	adds	r3, r7, #3
 8016042:	781a      	ldrb	r2, [r3, #0]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	0011      	movs	r1, r2
 8016048:	0018      	movs	r0, r3
 801604a:	f7ee fe54 	bl	8004cf6 <HAL_PCD_EP_GetRxCount>
 801604e:	0002      	movs	r2, r0
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	2200      	movs	r2, #0
 8016058:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	2202      	movs	r2, #2
 801605e:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	3330      	adds	r3, #48	; 0x30
 8016064:	0018      	movs	r0, r3
 8016066:	f7ff f9c3 	bl	80153f0 <_ux_utility_semaphore_put>
}
 801606a:	46c0      	nop			; (mov r8, r8)
 801606c:	46bd      	mov	sp, r7
 801606e:	b008      	add	sp, #32
 8016070:	bd80      	pop	{r7, pc}
 8016072:	46c0      	nop			; (mov r8, r8)
 8016074:	20019298 	.word	0x20019298

08016078 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8016080:	4b11      	ldr	r3, [pc, #68]	; (80160c8 <HAL_PCD_ResetCallback+0x50>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	6a1b      	ldr	r3, [r3, #32]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d001      	beq.n	801608e <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801608a:	f7fd ff3f 	bl	8013f0c <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	2b02      	cmp	r3, #2
 8016094:	d106      	bne.n	80160a4 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8016096:	4b0c      	ldr	r3, [pc, #48]	; (80160c8 <HAL_PCD_ResetCallback+0x50>)
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	23ce      	movs	r3, #206	; 0xce
 801609c:	005b      	lsls	r3, r3, #1
 801609e:	2101      	movs	r1, #1
 80160a0:	50d1      	str	r1, [r2, r3]
        break;
 80160a2:	e006      	b.n	80160b2 <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 80160a4:	4b08      	ldr	r3, [pc, #32]	; (80160c8 <HAL_PCD_ResetCallback+0x50>)
 80160a6:	681a      	ldr	r2, [r3, #0]
 80160a8:	23ce      	movs	r3, #206	; 0xce
 80160aa:	005b      	lsls	r3, r3, #1
 80160ac:	2101      	movs	r1, #1
 80160ae:	50d1      	str	r1, [r2, r3]
        break;
 80160b0:	46c0      	nop			; (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 80160b2:	f000 fa25 	bl	8016500 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80160b6:	4b04      	ldr	r3, [pc, #16]	; (80160c8 <HAL_PCD_ResetCallback+0x50>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2201      	movs	r2, #1
 80160bc:	621a      	str	r2, [r3, #32]
}
 80160be:	46c0      	nop			; (mov r8, r8)
 80160c0:	46bd      	mov	sp, r7
 80160c2:	b002      	add	sp, #8
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	46c0      	nop			; (mov r8, r8)
 80160c8:	20019298 	.word	0x20019298

080160cc <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2280      	movs	r2, #128	; 0x80
 80160da:	4013      	ands	r3, r2
 80160dc:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	227f      	movs	r2, #127	; 0x7f
 80160e2:	4013      	ands	r3, r2
 80160e4:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	2b07      	cmp	r3, #7
 80160ea:	d806      	bhi.n	80160fa <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	22c4      	movs	r2, #196	; 0xc4
 80160f0:	589b      	ldr	r3, [r3, r2]
 80160f2:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80160f4:	68ba      	ldr	r2, [r7, #8]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d301      	bcc.n	80160fe <_stm32_ed_get+0x32>
        return(UX_NULL);
 80160fa:	2300      	movs	r3, #0
 80160fc:	e014      	b.n	8016128 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d009      	beq.n	8016118 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8016104:	68ba      	ldr	r2, [r7, #8]
 8016106:	0013      	movs	r3, r2
 8016108:	005b      	lsls	r3, r3, #1
 801610a:	189b      	adds	r3, r3, r2
 801610c:	009b      	lsls	r3, r3, #2
 801610e:	3360      	adds	r3, #96	; 0x60
 8016110:	687a      	ldr	r2, [r7, #4]
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	3304      	adds	r3, #4
 8016116:	e007      	b.n	8016128 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8016118:	68ba      	ldr	r2, [r7, #8]
 801611a:	0013      	movs	r3, r2
 801611c:	005b      	lsls	r3, r3, #1
 801611e:	189b      	adds	r3, r3, r2
 8016120:	009b      	lsls	r3, r3, #2
 8016122:	687a      	ldr	r2, [r7, #4]
 8016124:	18d3      	adds	r3, r2, r3
 8016126:	3304      	adds	r3, #4
}
 8016128:	0018      	movs	r0, r3
 801612a:	46bd      	mov	sp, r7
 801612c:	b004      	add	sp, #16
 801612e:	bd80      	pop	{r7, pc}

08016130 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8016130:	b590      	push	{r4, r7, lr}
 8016132:	b085      	sub	sp, #20
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	695b      	ldr	r3, [r3, #20]
 801613e:	2280      	movs	r2, #128	; 0x80
 8016140:	4393      	bics	r3, r2
 8016142:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	695a      	ldr	r2, [r3, #20]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	0011      	movs	r1, r2
 801614c:	0018      	movs	r0, r3
 801614e:	f7ff ffbd 	bl	80160cc <_stm32_ed_get>
 8016152:	0003      	movs	r3, r0
 8016154:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d101      	bne.n	8016160 <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 801615c:	2314      	movs	r3, #20
 801615e:	e033      	b.n	80161c8 <_ux_dcd_stm32_endpoint_create+0x98>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	2201      	movs	r2, #1
 8016166:	4013      	ands	r3, r2
 8016168:	d12d      	bne.n	80161c6 <_ux_dcd_stm32_endpoint_create+0x96>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	2201      	movs	r2, #1
 8016170:	431a      	orrs	r2, r3
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	683a      	ldr	r2, [r7, #0]
 8016180:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	b2da      	uxtb	r2, r3
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	695b      	ldr	r3, [r3, #20]
 801618e:	b2db      	uxtb	r3, r3
 8016190:	227f      	movs	r2, #127	; 0x7f
 8016192:	4393      	bics	r3, r2
 8016194:	b2da      	uxtb	r2, r3
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d010      	beq.n	80161c2 <_ux_dcd_stm32_endpoint_create+0x92>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	22c4      	movs	r2, #196	; 0xc4
 80161a4:	5898      	ldr	r0, [r3, r2]
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	695b      	ldr	r3, [r3, #20]
 80161aa:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80161b0:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	2403      	movs	r4, #3
 80161ba:	4023      	ands	r3, r4
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	f7ee fc88 	bl	8004ad2 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 80161c2:	2300      	movs	r3, #0
 80161c4:	e000      	b.n	80161c8 <_ux_dcd_stm32_endpoint_create+0x98>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 80161c6:	2314      	movs	r3, #20
}
 80161c8:	0018      	movs	r0, r3
 80161ca:	46bd      	mov	sp, r7
 80161cc:	b005      	add	sp, #20
 80161ce:	bd90      	pop	{r4, r7, pc}

080161d0 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b084      	sub	sp, #16
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
 80161d8:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	689b      	ldr	r3, [r3, #8]
 80161de:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	2200      	movs	r2, #0
 80161e4:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	22c4      	movs	r2, #196	; 0xc4
 80161ea:	589a      	ldr	r2, [r3, r2]
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	695b      	ldr	r3, [r3, #20]
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	0019      	movs	r1, r3
 80161f4:	0010      	movs	r0, r2
 80161f6:	f7ee fce6 	bl	8004bc6 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80161fa:	2300      	movs	r3, #0
}
 80161fc:	0018      	movs	r0, r3
 80161fe:	46bd      	mov	sp, r7
 8016200:	b004      	add	sp, #16
 8016202:	bd80      	pop	{r7, pc}

08016204 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b086      	sub	sp, #24
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8016214:	f3ef 8310 	mrs	r3, PRIMASK
 8016218:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801621a:	b672      	cpsid	i
    return(primask_value);
 801621c:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 801621e:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8016220:	697b      	ldr	r3, [r7, #20]
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	4a17      	ldr	r2, [pc, #92]	; (8016284 <_ux_dcd_stm32_endpoint_reset+0x80>)
 8016226:	401a      	ands	r2, r3
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	2200      	movs	r2, #0
 8016230:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	22c4      	movs	r2, #196	; 0xc4
 8016236:	589a      	ldr	r2, [r3, r2]
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	695b      	ldr	r3, [r3, #20]
 801623c:	b2db      	uxtb	r3, r3
 801623e:	0019      	movs	r1, r3
 8016240:	0010      	movs	r0, r2
 8016242:	f7ee fe19 	bl	8004e78 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	22c4      	movs	r2, #196	; 0xc4
 801624a:	589a      	ldr	r2, [r3, r2]
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	695b      	ldr	r3, [r3, #20]
 8016250:	b2db      	uxtb	r3, r3
 8016252:	0019      	movs	r1, r3
 8016254:	0010      	movs	r0, r2
 8016256:	f7ee fea8 	bl	8004faa <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801625e:	2b00      	cmp	r3, #0
 8016260:	d004      	beq.n	801626c <_ux_dcd_stm32_endpoint_reset+0x68>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	3360      	adds	r3, #96	; 0x60
 8016266:	0018      	movs	r0, r3
 8016268:	f7ff f8c2 	bl	80153f0 <_ux_utility_semaphore_put>
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	f383 8810 	msr	PRIMASK, r3
}
 8016276:	46c0      	nop			; (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 8016278:	2300      	movs	r3, #0
}
 801627a:	0018      	movs	r0, r3
 801627c:	46bd      	mov	sp, r7
 801627e:	b006      	add	sp, #24
 8016280:	bd80      	pop	{r7, pc}
 8016282:	46c0      	nop			; (mov r8, r8)
 8016284:	fffffcf3 	.word	0xfffffcf3

08016288 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b084      	sub	sp, #16
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	689b      	ldr	r3, [r3, #8]
 8016296:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	2204      	movs	r2, #4
 801629e:	431a      	orrs	r2, r3
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	22c4      	movs	r2, #196	; 0xc4
 80162a8:	5898      	ldr	r0, [r3, r2]
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	695b      	ldr	r3, [r3, #20]
 80162ae:	b2da      	uxtb	r2, r3
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	7a9b      	ldrb	r3, [r3, #10]
 80162b4:	4313      	orrs	r3, r2
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	0019      	movs	r1, r3
 80162ba:	f7ee fd7f 	bl	8004dbc <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80162be:	2300      	movs	r3, #0
}
 80162c0:	0018      	movs	r0, r3
 80162c2:	46bd      	mov	sp, r7
 80162c4:	b004      	add	sp, #16
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <_stm32_ed_get>:
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	2280      	movs	r2, #128	; 0x80
 80162d6:	4013      	ands	r3, r2
 80162d8:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	227f      	movs	r2, #127	; 0x7f
 80162de:	4013      	ands	r3, r2
 80162e0:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	2b07      	cmp	r3, #7
 80162e6:	d806      	bhi.n	80162f6 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	22c4      	movs	r2, #196	; 0xc4
 80162ec:	589b      	ldr	r3, [r3, r2]
 80162ee:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80162f0:	68ba      	ldr	r2, [r7, #8]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d301      	bcc.n	80162fa <_stm32_ed_get+0x32>
        return(UX_NULL);
 80162f6:	2300      	movs	r3, #0
 80162f8:	e014      	b.n	8016324 <_stm32_ed_get+0x5c>
    if (ep_dir)
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d009      	beq.n	8016314 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8016300:	68ba      	ldr	r2, [r7, #8]
 8016302:	0013      	movs	r3, r2
 8016304:	005b      	lsls	r3, r3, #1
 8016306:	189b      	adds	r3, r3, r2
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	3360      	adds	r3, #96	; 0x60
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	18d3      	adds	r3, r2, r3
 8016310:	3304      	adds	r3, #4
 8016312:	e007      	b.n	8016324 <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8016314:	68ba      	ldr	r2, [r7, #8]
 8016316:	0013      	movs	r3, r2
 8016318:	005b      	lsls	r3, r3, #1
 801631a:	189b      	adds	r3, r3, r2
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	18d3      	adds	r3, r2, r3
 8016322:	3304      	adds	r3, #4
}
 8016324:	0018      	movs	r0, r3
 8016326:	46bd      	mov	sp, r7
 8016328:	b004      	add	sp, #16
 801632a:	bd80      	pop	{r7, pc}

0801632c <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b084      	sub	sp, #16
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 8016336:	683a      	ldr	r2, [r7, #0]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	0011      	movs	r1, r2
 801633c:	0018      	movs	r0, r3
 801633e:	f7ff ffc3 	bl	80162c8 <_stm32_ed_get>
 8016342:	0003      	movs	r3, r0
 8016344:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	2201      	movs	r2, #1
 801634c:	4013      	ands	r3, r2
 801634e:	d101      	bne.n	8016354 <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 8016350:	23ff      	movs	r3, #255	; 0xff
 8016352:	e007      	b.n	8016364 <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	685b      	ldr	r3, [r3, #4]
 8016358:	2204      	movs	r2, #4
 801635a:	4013      	ands	r3, r2
 801635c:	d101      	bne.n	8016362 <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 801635e:	2300      	movs	r3, #0
 8016360:	e000      	b.n	8016364 <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 8016362:	2301      	movs	r3, #1
}
 8016364:	0018      	movs	r0, r3
 8016366:	46bd      	mov	sp, r7
 8016368:	b004      	add	sp, #16
 801636a:	bd80      	pop	{r7, pc}

0801636c <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 8016376:	2300      	movs	r3, #0
}
 8016378:	0018      	movs	r0, r3
 801637a:	46bd      	mov	sp, r7
 801637c:	b002      	add	sp, #8
 801637e:	bd80      	pop	{r7, pc}

08016380 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d106      	bne.n	80163a2 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 8016394:	2255      	movs	r2, #85	; 0x55
 8016396:	2102      	movs	r1, #2
 8016398:	2002      	movs	r0, #2
 801639a:	f7fe fb85 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801639e:	2355      	movs	r3, #85	; 0x55
 80163a0:	e077      	b.n	8016492 <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	69db      	ldr	r3, [r3, #28]
 80163a6:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	3b0a      	subs	r3, #10
 80163ac:	2b0b      	cmp	r3, #11
 80163ae:	d867      	bhi.n	8016480 <_ux_dcd_stm32_function+0x100>
 80163b0:	009a      	lsls	r2, r3, #2
 80163b2:	4b3a      	ldr	r3, [pc, #232]	; (801649c <_ux_dcd_stm32_function+0x11c>)
 80163b4:	18d3      	adds	r3, r2, r3
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	0011      	movs	r1, r2
 80163c0:	0018      	movs	r0, r3
 80163c2:	f7ff ffd3 	bl	801636c <_ux_dcd_stm32_frame_number_get>
 80163c6:	0003      	movs	r3, r0
 80163c8:	617b      	str	r3, [r7, #20]
        break;
 80163ca:	e061      	b.n	8016490 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	693b      	ldr	r3, [r7, #16]
 80163d0:	0011      	movs	r1, r2
 80163d2:	0018      	movs	r0, r3
 80163d4:	f000 f991 	bl	80166fa <_ux_dcd_stm32_transfer_request>
 80163d8:	0003      	movs	r3, r0
 80163da:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 80163dc:	e058      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	0011      	movs	r1, r2
 80163e4:	0018      	movs	r0, r3
 80163e6:	f000 f967 	bl	80166b8 <_ux_dcd_stm32_transfer_abort>
 80163ea:	0003      	movs	r3, r0
 80163ec:	617b      	str	r3, [r7, #20]
        break;
 80163ee:	e04f      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	0011      	movs	r1, r2
 80163f6:	0018      	movs	r0, r3
 80163f8:	f7ff fe9a 	bl	8016130 <_ux_dcd_stm32_endpoint_create>
 80163fc:	0003      	movs	r3, r0
 80163fe:	617b      	str	r3, [r7, #20]
        break;
 8016400:	e046      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 8016402:	687a      	ldr	r2, [r7, #4]
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	0011      	movs	r1, r2
 8016408:	0018      	movs	r0, r3
 801640a:	f7ff fee1 	bl	80161d0 <_ux_dcd_stm32_endpoint_destroy>
 801640e:	0003      	movs	r3, r0
 8016410:	617b      	str	r3, [r7, #20]
        break;
 8016412:	e03d      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 8016414:	687a      	ldr	r2, [r7, #4]
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	0011      	movs	r1, r2
 801641a:	0018      	movs	r0, r3
 801641c:	f7ff fef2 	bl	8016204 <_ux_dcd_stm32_endpoint_reset>
 8016420:	0003      	movs	r3, r0
 8016422:	617b      	str	r3, [r7, #20]
        break;
 8016424:	e034      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	693b      	ldr	r3, [r7, #16]
 801642a:	0011      	movs	r1, r2
 801642c:	0018      	movs	r0, r3
 801642e:	f7ff ff2b 	bl	8016288 <_ux_dcd_stm32_endpoint_stall>
 8016432:	0003      	movs	r3, r0
 8016434:	617b      	str	r3, [r7, #20]
        break;
 8016436:	e02b      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	22c4      	movs	r2, #196	; 0xc4
 801643c:	589b      	ldr	r3, [r3, r2]
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	b2d2      	uxtb	r2, r2
 8016442:	0011      	movs	r1, r2
 8016444:	0018      	movs	r0, r3
 8016446:	f7ee fb19 	bl	8004a7c <HAL_PCD_SetAddress>
 801644a:	0003      	movs	r3, r0
 801644c:	617b      	str	r3, [r7, #20]
        break;
 801644e:	e01f      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2b0b      	cmp	r3, #11
 8016454:	d108      	bne.n	8016468 <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8016456:	693b      	ldr	r3, [r7, #16]
 8016458:	22c4      	movs	r2, #196	; 0xc4
 801645a:	589b      	ldr	r3, [r3, r2]
 801645c:	0018      	movs	r0, r3
 801645e:	f7ee f9ba 	bl	80047d6 <HAL_PCD_Stop>
 8016462:	0003      	movs	r3, r0
 8016464:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 8016466:	e013      	b.n	8016490 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 8016468:	2300      	movs	r3, #0
 801646a:	617b      	str	r3, [r7, #20]
        break;
 801646c:	e010      	b.n	8016490 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	0011      	movs	r1, r2
 8016474:	0018      	movs	r0, r3
 8016476:	f7ff ff59 	bl	801632c <_ux_dcd_stm32_endpoint_status>
 801647a:	0003      	movs	r3, r0
 801647c:	617b      	str	r3, [r7, #20]
        break;
 801647e:	e007      	b.n	8016490 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8016480:	2254      	movs	r2, #84	; 0x54
 8016482:	2102      	movs	r1, #2
 8016484:	2002      	movs	r0, #2
 8016486:	f7fe fb0f 	bl	8014aa8 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 801648a:	2354      	movs	r3, #84	; 0x54
 801648c:	617b      	str	r3, [r7, #20]
        break;
 801648e:	46c0      	nop			; (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 8016490:	697b      	ldr	r3, [r7, #20]
}
 8016492:	0018      	movs	r0, r3
 8016494:	46bd      	mov	sp, r7
 8016496:	b006      	add	sp, #24
 8016498:	bd80      	pop	{r7, pc}
 801649a:	46c0      	nop			; (mov r8, r8)
 801649c:	08018c54 	.word	0x08018c54

080164a0 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80164aa:	4b13      	ldr	r3, [pc, #76]	; (80164f8 <_ux_dcd_stm32_initialize+0x58>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2280      	movs	r2, #128	; 0x80
 80164b4:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 80164b6:	22c8      	movs	r2, #200	; 0xc8
 80164b8:	2100      	movs	r1, #0
 80164ba:	2000      	movs	r0, #0
 80164bc:	f7fe fc64 	bl	8014d88 <_ux_utility_memory_allocate>
 80164c0:	0003      	movs	r3, r0
 80164c2:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d101      	bne.n	80164ce <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 80164ca:	2312      	movs	r3, #18
 80164cc:	e010      	b.n	80164f0 <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	68ba      	ldr	r2, [r7, #8]
 80164d2:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	68fa      	ldr	r2, [r7, #12]
 80164d8:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	4a07      	ldr	r2, [pc, #28]	; (80164fc <_ux_dcd_stm32_initialize+0x5c>)
 80164de:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 80164e0:	683a      	ldr	r2, [r7, #0]
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	21c4      	movs	r1, #196	; 0xc4
 80164e6:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2201      	movs	r2, #1
 80164ec:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 80164ee:	2300      	movs	r3, #0
}
 80164f0:	0018      	movs	r0, r3
 80164f2:	46bd      	mov	sp, r7
 80164f4:	b004      	add	sp, #16
 80164f6:	bd80      	pop	{r7, pc}
 80164f8:	20019298 	.word	0x20019298
 80164fc:	08016381 	.word	0x08016381

08016500 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8016506:	4b6a      	ldr	r3, [pc, #424]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	69db      	ldr	r3, [r3, #28]
 8016510:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8016512:	4b67      	ldr	r3, [pc, #412]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	3320      	adds	r3, #32
 8016518:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 801651a:	4b65      	ldr	r3, [pc, #404]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	23dc      	movs	r3, #220	; 0xdc
 8016520:	005b      	lsls	r3, r3, #1
 8016522:	58d3      	ldr	r3, [r2, r3]
 8016524:	2b01      	cmp	r3, #1
 8016526:	d114      	bne.n	8016552 <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8016528:	4b61      	ldr	r3, [pc, #388]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801652a:	6819      	ldr	r1, [r3, #0]
 801652c:	4b60      	ldr	r3, [pc, #384]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	23a8      	movs	r3, #168	; 0xa8
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	58c9      	ldr	r1, [r1, r3]
 8016536:	2394      	movs	r3, #148	; 0x94
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801653c:	4b5c      	ldr	r3, [pc, #368]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801653e:	6819      	ldr	r1, [r3, #0]
 8016540:	4b5b      	ldr	r3, [pc, #364]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016542:	681a      	ldr	r2, [r3, #0]
 8016544:	23aa      	movs	r3, #170	; 0xaa
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	58c9      	ldr	r1, [r1, r3]
 801654a:	2396      	movs	r3, #150	; 0x96
 801654c:	005b      	lsls	r3, r3, #1
 801654e:	50d1      	str	r1, [r2, r3]
 8016550:	e035      	b.n	80165be <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8016552:	4b57      	ldr	r3, [pc, #348]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016554:	681a      	ldr	r2, [r3, #0]
 8016556:	23dc      	movs	r3, #220	; 0xdc
 8016558:	005b      	lsls	r3, r3, #1
 801655a:	2100      	movs	r1, #0
 801655c:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801655e:	4b54      	ldr	r3, [pc, #336]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	23ce      	movs	r3, #206	; 0xce
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	58d3      	ldr	r3, [r2, r3]
 8016568:	2b01      	cmp	r3, #1
 801656a:	d114      	bne.n	8016596 <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801656c:	4b50      	ldr	r3, [pc, #320]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801656e:	6819      	ldr	r1, [r3, #0]
 8016570:	4b4f      	ldr	r3, [pc, #316]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016572:	681a      	ldr	r2, [r3, #0]
 8016574:	2398      	movs	r3, #152	; 0x98
 8016576:	005b      	lsls	r3, r3, #1
 8016578:	58c9      	ldr	r1, [r1, r3]
 801657a:	2394      	movs	r3, #148	; 0x94
 801657c:	005b      	lsls	r3, r3, #1
 801657e:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8016580:	4b4b      	ldr	r3, [pc, #300]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016582:	6819      	ldr	r1, [r3, #0]
 8016584:	4b4a      	ldr	r3, [pc, #296]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016586:	681a      	ldr	r2, [r3, #0]
 8016588:	239a      	movs	r3, #154	; 0x9a
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	58c9      	ldr	r1, [r1, r3]
 801658e:	2396      	movs	r3, #150	; 0x96
 8016590:	005b      	lsls	r3, r3, #1
 8016592:	50d1      	str	r1, [r2, r3]
 8016594:	e013      	b.n	80165be <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8016596:	4b46      	ldr	r3, [pc, #280]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8016598:	6819      	ldr	r1, [r3, #0]
 801659a:	4b45      	ldr	r3, [pc, #276]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801659c:	681a      	ldr	r2, [r3, #0]
 801659e:	239c      	movs	r3, #156	; 0x9c
 80165a0:	005b      	lsls	r3, r3, #1
 80165a2:	58c9      	ldr	r1, [r1, r3]
 80165a4:	2394      	movs	r3, #148	; 0x94
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 80165aa:	4b41      	ldr	r3, [pc, #260]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80165ac:	6819      	ldr	r1, [r3, #0]
 80165ae:	4b40      	ldr	r3, [pc, #256]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	239e      	movs	r3, #158	; 0x9e
 80165b4:	005b      	lsls	r3, r3, #1
 80165b6:	58c9      	ldr	r1, [r1, r3]
 80165b8:	2396      	movs	r3, #150	; 0x96
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80165be:	4b3c      	ldr	r3, [pc, #240]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	2394      	movs	r3, #148	; 0x94
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	58d3      	ldr	r3, [r2, r3]
 80165c8:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 80165ce:	4939      	ldr	r1, [pc, #228]	; (80166b4 <_ux_dcd_stm32_initialize_complete+0x1b4>)
 80165d0:	68b8      	ldr	r0, [r7, #8]
 80165d2:	220e      	movs	r2, #14
 80165d4:	f7fe fb57 	bl	8014c86 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	336c      	adds	r3, #108	; 0x6c
 80165dc:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	22fa      	movs	r2, #250	; 0xfa
 80165e2:	0092      	lsls	r2, r2, #2
 80165e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	333c      	adds	r3, #60	; 0x3c
 80165f2:	001a      	movs	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8016600:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	333c      	adds	r3, #60	; 0x3c
 801660e:	001a      	movs	r2, r3
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8016618:	68fa      	ldr	r2, [r7, #12]
 801661a:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801661c:	6978      	ldr	r0, [r7, #20]
 801661e:	210e      	movs	r1, #14
 8016620:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	22c4      	movs	r2, #196	; 0xc4
 8016626:	589b      	ldr	r3, [r3, r2]
 8016628:	2100      	movs	r1, #0
 801662a:	0018      	movs	r0, r3
 801662c:	f7ee fcbd 	bl	8004faa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	22c4      	movs	r2, #196	; 0xc4
 8016634:	5898      	ldr	r0, [r3, r2]
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	69db      	ldr	r3, [r3, #28]
 801663a:	b29a      	uxth	r2, r3
 801663c:	2300      	movs	r3, #0
 801663e:	2100      	movs	r1, #0
 8016640:	f7ee fa47 	bl	8004ad2 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	22c4      	movs	r2, #196	; 0xc4
 8016648:	589b      	ldr	r3, [r3, r2]
 801664a:	2180      	movs	r1, #128	; 0x80
 801664c:	0018      	movs	r0, r3
 801664e:	f7ee fcac 	bl	8004faa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	22c4      	movs	r2, #196	; 0xc4
 8016656:	5898      	ldr	r0, [r3, r2]
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	69db      	ldr	r3, [r3, #28]
 801665c:	b29a      	uxth	r2, r3
 801665e:	2300      	movs	r3, #0
 8016660:	2180      	movs	r1, #128	; 0x80
 8016662:	f7ee fa36 	bl	8004ad2 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2200      	movs	r2, #0
 801666a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2201      	movs	r2, #1
 8016670:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2201      	movs	r2, #1
 8016676:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2208      	movs	r2, #8
 801667c:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2208      	movs	r2, #8
 8016682:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2200      	movs	r2, #0
 8016688:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801668a:	4b09      	ldr	r3, [pc, #36]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	23e0      	movs	r3, #224	; 0xe0
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	58d3      	ldr	r3, [r2, r3]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d006      	beq.n	80166a6 <_ux_dcd_stm32_initialize_complete+0x1a6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8016698:	4b05      	ldr	r3, [pc, #20]	; (80166b0 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801669a:	681a      	ldr	r2, [r3, #0]
 801669c:	23e0      	movs	r3, #224	; 0xe0
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	58d3      	ldr	r3, [r2, r3]
 80166a2:	2001      	movs	r0, #1
 80166a4:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	0018      	movs	r0, r3
 80166aa:	46bd      	mov	sp, r7
 80166ac:	b006      	add	sp, #24
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	20019298 	.word	0x20019298
 80166b4:	20000034 	.word	0x20000034

080166b8 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	689b      	ldr	r3, [r3, #8]
 80166c6:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	22c4      	movs	r2, #196	; 0xc4
 80166cc:	589a      	ldr	r2, [r3, r2]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	695b      	ldr	r3, [r3, #20]
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	0019      	movs	r1, r3
 80166d6:	0010      	movs	r0, r2
 80166d8:	f7ee fc2e 	bl	8004f38 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	22c4      	movs	r2, #196	; 0xc4
 80166e0:	589a      	ldr	r2, [r3, r2]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	695b      	ldr	r3, [r3, #20]
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	0019      	movs	r1, r3
 80166ea:	0010      	movs	r0, r2
 80166ec:	f7ee fc5d 	bl	8004faa <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 80166f0:	2300      	movs	r3, #0
}
 80166f2:	0018      	movs	r0, r3
 80166f4:	46bd      	mov	sp, r7
 80166f6:	b004      	add	sp, #16
 80166f8:	bd80      	pop	{r7, pc}

080166fa <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 80166fa:	b580      	push	{r7, lr}
 80166fc:	b084      	sub	sp, #16
 80166fe:	af00      	add	r7, sp, #0
 8016700:	6078      	str	r0, [r7, #4]
 8016702:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	689b      	ldr	r3, [r3, #8]
 8016708:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801670e:	2b03      	cmp	r3, #3
 8016710:	d12d      	bne.n	801676e <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	22c4      	movs	r2, #196	; 0xc4
 8016716:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801671c:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	695b      	ldr	r3, [r3, #20]
 8016726:	f7ee faff 	bl	8004d28 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	695b      	ldr	r3, [r3, #20]
 801672e:	2280      	movs	r2, #128	; 0x80
 8016730:	4393      	bics	r3, r2
 8016732:	d046      	beq.n	80167c2 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	3330      	adds	r3, #48	; 0x30
 8016738:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801673e:	0019      	movs	r1, r3
 8016740:	0010      	movs	r0, r2
 8016742:	f7fe fe19 	bl	8015378 <_ux_utility_semaphore_get>
 8016746:	0003      	movs	r3, r0
 8016748:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d001      	beq.n	8016754 <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	e037      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	695a      	ldr	r2, [r3, #20]
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016760:	2b00      	cmp	r3, #0
 8016762:	d002      	beq.n	801676a <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016768:	e02c      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801676a:	2300      	movs	r3, #0
 801676c:	e02a      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	22c4      	movs	r2, #196	; 0xc4
 8016772:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8016778:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	f7ee fa73 	bl	8004c6c <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	695b      	ldr	r3, [r3, #20]
 801678a:	2280      	movs	r2, #128	; 0x80
 801678c:	4393      	bics	r3, r2
 801678e:	d018      	beq.n	80167c2 <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	3330      	adds	r3, #48	; 0x30
 8016794:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801679a:	0019      	movs	r1, r3
 801679c:	0010      	movs	r0, r2
 801679e:	f7fe fdeb 	bl	8015378 <_ux_utility_semaphore_get>
 80167a2:	0003      	movs	r3, r0
 80167a4:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 80167a6:	68bb      	ldr	r3, [r7, #8]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d001      	beq.n	80167b0 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 80167ac:	68bb      	ldr	r3, [r7, #8]
 80167ae:	e009      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d002      	beq.n	80167be <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167bc:	e002      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 80167be:	2300      	movs	r3, #0
 80167c0:	e000      	b.n	80167c4 <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 80167c2:	2300      	movs	r3, #0
}
 80167c4:	0018      	movs	r0, r3
 80167c6:	46bd      	mov	sp, r7
 80167c8:	b004      	add	sp, #16
 80167ca:	bd80      	pop	{r7, pc}

080167cc <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 80167d4:	2300      	movs	r3, #0
 80167d6:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 80167dc:	68fb      	ldr	r3, [r7, #12]
}
 80167de:	0018      	movs	r0, r3
 80167e0:	46bd      	mov	sp, r7
 80167e2:	b004      	add	sp, #16
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 80167e6:	b580      	push	{r7, lr}
 80167e8:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80167ea:	f7f6 fd1f 	bl	800d22c <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80167ee:	f000 f809 	bl	8016804 <USBPD_DPM_InitCore>
 80167f2:	1e03      	subs	r3, r0, #0
 80167f4:	d001      	beq.n	80167fa <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 80167f6:	2302      	movs	r3, #2
 80167f8:	e000      	b.n	80167fc <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 80167fa:	2300      	movs	r3, #0
}
 80167fc:	0018      	movs	r0, r3
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
	...

08016804 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8016804:	b5b0      	push	{r4, r5, r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801680a:	1dfb      	adds	r3, r7, #7
 801680c:	2200      	movs	r2, #0
 801680e:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8016810:	4b62      	ldr	r3, [pc, #392]	; (801699c <USBPD_DPM_InitCore+0x198>)
 8016812:	0018      	movs	r0, r3
 8016814:	f7ea fbb6 	bl	8000f84 <USBPD_PE_CheckLIB>
 8016818:	0003      	movs	r3, r0
 801681a:	2b01      	cmp	r3, #1
 801681c:	d003      	beq.n	8016826 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801681e:	1dfb      	adds	r3, r7, #7
 8016820:	2202      	movs	r2, #2
 8016822:	701a      	strb	r2, [r3, #0]
    goto error;
 8016824:	e0b4      	b.n	8016990 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8016826:	f7ea fbbb 	bl	8000fa0 <USBPD_PE_GetMemoryConsumption>
 801682a:	0003      	movs	r3, r0
 801682c:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801682e:	1dbb      	adds	r3, r7, #6
 8016830:	2200      	movs	r2, #0
 8016832:	701a      	strb	r2, [r3, #0]
 8016834:	e0a6      	b.n	8016984 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8016836:	1dbb      	adds	r3, r7, #6
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	4a59      	ldr	r2, [pc, #356]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	18d3      	adds	r3, r2, r3
 8016840:	785a      	ldrb	r2, [r3, #1]
 8016842:	2108      	movs	r1, #8
 8016844:	438a      	bics	r2, r1
 8016846:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8016848:	1dbb      	adds	r3, r7, #6
 801684a:	781a      	ldrb	r2, [r3, #0]
 801684c:	1dbb      	adds	r3, r7, #6
 801684e:	7818      	ldrb	r0, [r3, #0]
 8016850:	4954      	ldr	r1, [pc, #336]	; (80169a4 <USBPD_DPM_InitCore+0x1a0>)
 8016852:	0013      	movs	r3, r2
 8016854:	005b      	lsls	r3, r3, #1
 8016856:	189b      	adds	r3, r3, r2
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	18cb      	adds	r3, r1, r3
 801685c:	791b      	ldrb	r3, [r3, #4]
 801685e:	079b      	lsls	r3, r3, #30
 8016860:	0f9b      	lsrs	r3, r3, #30
 8016862:	b2d9      	uxtb	r1, r3
 8016864:	4b4e      	ldr	r3, [pc, #312]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 8016866:	0082      	lsls	r2, r0, #2
 8016868:	2003      	movs	r0, #3
 801686a:	4001      	ands	r1, r0
 801686c:	000c      	movs	r4, r1
 801686e:	5cd1      	ldrb	r1, [r2, r3]
 8016870:	2003      	movs	r0, #3
 8016872:	4381      	bics	r1, r0
 8016874:	1c08      	adds	r0, r1, #0
 8016876:	1c21      	adds	r1, r4, #0
 8016878:	4301      	orrs	r1, r0
 801687a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801687c:	1dbb      	adds	r3, r7, #6
 801687e:	781a      	ldrb	r2, [r3, #0]
 8016880:	1dbb      	adds	r3, r7, #6
 8016882:	7818      	ldrb	r0, [r3, #0]
 8016884:	4947      	ldr	r1, [pc, #284]	; (80169a4 <USBPD_DPM_InitCore+0x1a0>)
 8016886:	0013      	movs	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	189b      	adds	r3, r3, r2
 801688c:	009b      	lsls	r3, r3, #2
 801688e:	18cb      	adds	r3, r1, r3
 8016890:	791b      	ldrb	r3, [r3, #4]
 8016892:	075b      	lsls	r3, r3, #29
 8016894:	0fdb      	lsrs	r3, r3, #31
 8016896:	b2d9      	uxtb	r1, r3
 8016898:	4b41      	ldr	r3, [pc, #260]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 801689a:	0082      	lsls	r2, r0, #2
 801689c:	2001      	movs	r0, #1
 801689e:	4001      	ands	r1, r0
 80168a0:	008c      	lsls	r4, r1, #2
 80168a2:	5cd1      	ldrb	r1, [r2, r3]
 80168a4:	2004      	movs	r0, #4
 80168a6:	4381      	bics	r1, r0
 80168a8:	1c08      	adds	r0, r1, #0
 80168aa:	1c21      	adds	r1, r4, #0
 80168ac:	4301      	orrs	r1, r0
 80168ae:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 80168b0:	1dbb      	adds	r3, r7, #6
 80168b2:	781a      	ldrb	r2, [r3, #0]
 80168b4:	4b3a      	ldr	r3, [pc, #232]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 80168b6:	0092      	lsls	r2, r2, #2
 80168b8:	5cd1      	ldrb	r1, [r2, r3]
 80168ba:	2010      	movs	r0, #16
 80168bc:	4381      	bics	r1, r0
 80168be:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 80168c0:	1dbb      	adds	r3, r7, #6
 80168c2:	781a      	ldrb	r2, [r3, #0]
 80168c4:	4b36      	ldr	r3, [pc, #216]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 80168c6:	0092      	lsls	r2, r2, #2
 80168c8:	5cd1      	ldrb	r1, [r2, r3]
 80168ca:	203f      	movs	r0, #63	; 0x3f
 80168cc:	4001      	ands	r1, r0
 80168ce:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 80168d0:	1dbb      	adds	r3, r7, #6
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	4a32      	ldr	r2, [pc, #200]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 80168d6:	009b      	lsls	r3, r3, #2
 80168d8:	18d3      	adds	r3, r2, r3
 80168da:	785a      	ldrb	r2, [r3, #1]
 80168dc:	2160      	movs	r1, #96	; 0x60
 80168de:	438a      	bics	r2, r1
 80168e0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80168e2:	1dbb      	adds	r3, r7, #6
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	4a2e      	ldr	r2, [pc, #184]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 80168e8:	009b      	lsls	r3, r3, #2
 80168ea:	18d3      	adds	r3, r2, r3
 80168ec:	785a      	ldrb	r2, [r3, #1]
 80168ee:	217f      	movs	r1, #127	; 0x7f
 80168f0:	400a      	ands	r2, r1
 80168f2:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 80168f4:	1dbb      	adds	r3, r7, #6
 80168f6:	781a      	ldrb	r2, [r3, #0]
 80168f8:	0013      	movs	r3, r2
 80168fa:	005b      	lsls	r3, r3, #1
 80168fc:	189b      	adds	r3, r3, r2
 80168fe:	009b      	lsls	r3, r3, #2
 8016900:	4a28      	ldr	r2, [pc, #160]	; (80169a4 <USBPD_DPM_InitCore+0x1a0>)
 8016902:	189c      	adds	r4, r3, r2
 8016904:	1dbb      	adds	r3, r7, #6
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	009a      	lsls	r2, r3, #2
 801690a:	4b25      	ldr	r3, [pc, #148]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 801690c:	18d2      	adds	r2, r2, r3
 801690e:	4926      	ldr	r1, [pc, #152]	; (80169a8 <USBPD_DPM_InitCore+0x1a4>)
 8016910:	1dbb      	adds	r3, r7, #6
 8016912:	7818      	ldrb	r0, [r3, #0]
 8016914:	0013      	movs	r3, r2
 8016916:	0022      	movs	r2, r4
 8016918:	f7e9 fd2a 	bl	8000370 <USBPD_CAD_Init>
 801691c:	1e03      	subs	r3, r0, #0
 801691e:	d003      	beq.n	8016928 <USBPD_DPM_InitCore+0x124>
 8016920:	1dfb      	adds	r3, r7, #7
 8016922:	2202      	movs	r2, #2
 8016924:	701a      	strb	r2, [r3, #0]
 8016926:	e033      	b.n	8016990 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8016928:	1dbb      	adds	r3, r7, #6
 801692a:	781a      	ldrb	r2, [r3, #0]
 801692c:	0013      	movs	r3, r2
 801692e:	005b      	lsls	r3, r3, #1
 8016930:	189b      	adds	r3, r3, r2
 8016932:	009b      	lsls	r3, r3, #2
 8016934:	4a1b      	ldr	r2, [pc, #108]	; (80169a4 <USBPD_DPM_InitCore+0x1a0>)
 8016936:	1899      	adds	r1, r3, r2
 8016938:	1dbb      	adds	r3, r7, #6
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	009a      	lsls	r2, r3, #2
 801693e:	4b18      	ldr	r3, [pc, #96]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 8016940:	18d2      	adds	r2, r2, r3
 8016942:	1dfc      	adds	r4, r7, #7
 8016944:	4d19      	ldr	r5, [pc, #100]	; (80169ac <USBPD_DPM_InitCore+0x1a8>)
 8016946:	1dbb      	adds	r3, r7, #6
 8016948:	7818      	ldrb	r0, [r3, #0]
 801694a:	002b      	movs	r3, r5
 801694c:	f7e9 fe26 	bl	800059c <USBPD_PE_Init>
 8016950:	0003      	movs	r3, r0
 8016952:	7023      	strb	r3, [r4, #0]
 8016954:	1dfb      	adds	r3, r7, #7
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d119      	bne.n	8016990 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801695c:	1dbb      	adds	r3, r7, #6
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	4a0f      	ldr	r2, [pc, #60]	; (80169a0 <USBPD_DPM_InitCore+0x19c>)
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	18d3      	adds	r3, r2, r3
 8016966:	785a      	ldrb	r2, [r3, #1]
 8016968:	2108      	movs	r1, #8
 801696a:	430a      	orrs	r2, r1
 801696c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801696e:	1dbb      	adds	r3, r7, #6
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	2101      	movs	r1, #1
 8016974:	0018      	movs	r0, r3
 8016976:	f7e9 fd63 	bl	8000440 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801697a:	1dbb      	adds	r3, r7, #6
 801697c:	1dba      	adds	r2, r7, #6
 801697e:	7812      	ldrb	r2, [r2, #0]
 8016980:	3201      	adds	r2, #1
 8016982:	701a      	strb	r2, [r3, #0]
 8016984:	1dbb      	adds	r3, r7, #6
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d100      	bne.n	801698e <USBPD_DPM_InitCore+0x18a>
 801698c:	e753      	b.n	8016836 <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801698e:	46c0      	nop			; (mov r8, r8)
  return _retr;
 8016990:	1dfb      	adds	r3, r7, #7
 8016992:	781b      	ldrb	r3, [r3, #0]
}
 8016994:	0018      	movs	r0, r3
 8016996:	46bd      	mov	sp, r7
 8016998:	b002      	add	sp, #8
 801699a:	bdb0      	pop	{r4, r5, r7, pc}
 801699c:	30410004 	.word	0x30410004
 80169a0:	200193c0 	.word	0x200193c0
 80169a4:	2000005c 	.word	0x2000005c
 80169a8:	08018c84 	.word	0x08018c84
 80169ac:	08018c8c 	.word	0x08018c8c

080169b0 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	0002      	movs	r2, r0
 80169b8:	1dfb      	adds	r3, r7, #7
 80169ba:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 80169bc:	4b09      	ldr	r3, [pc, #36]	; (80169e4 <USBPD_PE_TaskWakeUp+0x34>)
 80169be:	60fb      	str	r3, [r7, #12]
 80169c0:	1dfb      	adds	r3, r7, #7
 80169c2:	781a      	ldrb	r2, [r3, #0]
 80169c4:	0013      	movs	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	1a9b      	subs	r3, r3, r2
 80169ca:	00db      	lsls	r3, r3, #3
 80169cc:	4a06      	ldr	r2, [pc, #24]	; (80169e8 <USBPD_PE_TaskWakeUp+0x38>)
 80169ce:	189b      	adds	r3, r3, r2
 80169d0:	220c      	movs	r2, #12
 80169d2:	18b9      	adds	r1, r7, r2
 80169d4:	2200      	movs	r2, #0
 80169d6:	0018      	movs	r0, r3
 80169d8:	f7fb fe6e 	bl	80126b8 <_txe_queue_send>
}
 80169dc:	46c0      	nop			; (mov r8, r8)
 80169de:	46bd      	mov	sp, r7
 80169e0:	b004      	add	sp, #16
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	0000ffff 	.word	0x0000ffff
 80169e8:	20019388 	.word	0x20019388

080169ec <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 80169f2:	4b06      	ldr	r3, [pc, #24]	; (8016a0c <USBPD_DPM_CADTaskWakeUp+0x20>)
 80169f4:	607b      	str	r3, [r7, #4]
 80169f6:	1d39      	adds	r1, r7, #4
 80169f8:	4b05      	ldr	r3, [pc, #20]	; (8016a10 <USBPD_DPM_CADTaskWakeUp+0x24>)
 80169fa:	2200      	movs	r2, #0
 80169fc:	0018      	movs	r0, r3
 80169fe:	f7fb fe5b 	bl	80126b8 <_txe_queue_send>
}
 8016a02:	46c0      	nop			; (mov r8, r8)
 8016a04:	46bd      	mov	sp, r7
 8016a06:	b002      	add	sp, #8
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	46c0      	nop			; (mov r8, r8)
 8016a0c:	0000ffff 	.word	0x0000ffff
 8016a10:	20019350 	.word	0x20019350

08016a14 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	603a      	str	r2, [r7, #0]
 8016a1c:	1dfb      	adds	r3, r7, #7
 8016a1e:	1c02      	adds	r2, r0, #0
 8016a20:	701a      	strb	r2, [r3, #0]
 8016a22:	1dbb      	adds	r3, r7, #6
 8016a24:	1c0a      	adds	r2, r1, #0
 8016a26:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8016a28:	1dbb      	adds	r3, r7, #6
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	d009      	beq.n	8016a44 <USBPD_DPM_CADCallback+0x30>
 8016a30:	dd00      	ble.n	8016a34 <USBPD_DPM_CADCallback+0x20>
 8016a32:	e06f      	b.n	8016b14 <USBPD_DPM_CADCallback+0x100>
 8016a34:	2b03      	cmp	r3, #3
 8016a36:	d01d      	beq.n	8016a74 <USBPD_DPM_CADCallback+0x60>
 8016a38:	dc6c      	bgt.n	8016b14 <USBPD_DPM_CADCallback+0x100>
 8016a3a:	2b01      	cmp	r3, #1
 8016a3c:	d01a      	beq.n	8016a74 <USBPD_DPM_CADCallback+0x60>
 8016a3e:	2b02      	cmp	r3, #2
 8016a40:	d00c      	beq.n	8016a5c <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8016a42:	e067      	b.n	8016b14 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8016a44:	1dfb      	adds	r3, r7, #7
 8016a46:	781b      	ldrb	r3, [r3, #0]
 8016a48:	2104      	movs	r1, #4
 8016a4a:	0018      	movs	r0, r3
 8016a4c:	f000 f99a 	bl	8016d84 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8016a50:	1dfb      	adds	r3, r7, #7
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	0018      	movs	r0, r3
 8016a56:	f000 f867 	bl	8016b28 <DPM_StartPETask>
      break;
 8016a5a:	e05c      	b.n	8016b16 <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8016a5c:	1dfb      	adds	r3, r7, #7
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	2102      	movs	r1, #2
 8016a62:	0018      	movs	r0, r3
 8016a64:	f000 f98e 	bl	8016d84 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8016a68:	1dfb      	adds	r3, r7, #7
 8016a6a:	781b      	ldrb	r3, [r3, #0]
 8016a6c:	0018      	movs	r0, r3
 8016a6e:	f000 f85b 	bl	8016b28 <DPM_StartPETask>
      break;
 8016a72:	e050      	b.n	8016b16 <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 8016a74:	230f      	movs	r3, #15
 8016a76:	18fb      	adds	r3, r7, r3
 8016a78:	2200      	movs	r2, #0
 8016a7a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 8016a7c:	1dfb      	adds	r3, r7, #7
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	0018      	movs	r0, r3
 8016a82:	f7ff ff95 	bl	80169b0 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8016a86:	e016      	b.n	8016ab6 <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 8016a88:	2001      	movs	r0, #1
 8016a8a:	f7fa faf1 	bl	8011070 <_tx_thread_sleep>
        _timeout++;
 8016a8e:	210f      	movs	r1, #15
 8016a90:	187b      	adds	r3, r7, r1
 8016a92:	781a      	ldrb	r2, [r3, #0]
 8016a94:	187b      	adds	r3, r7, r1
 8016a96:	3201      	adds	r2, #1
 8016a98:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 8016a9a:	187b      	adds	r3, r7, r1
 8016a9c:	781b      	ldrb	r3, [r3, #0]
 8016a9e:	2b1e      	cmp	r3, #30
 8016aa0:	d909      	bls.n	8016ab6 <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 8016aa2:	1dfb      	adds	r3, r7, #7
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	22b0      	movs	r2, #176	; 0xb0
 8016aa8:	435a      	muls	r2, r3
 8016aaa:	4b1d      	ldr	r3, [pc, #116]	; (8016b20 <USBPD_DPM_CADCallback+0x10c>)
 8016aac:	18d3      	adds	r3, r2, r3
 8016aae:	0018      	movs	r0, r3
 8016ab0:	f7fc f8c8 	bl	8012c44 <_txe_thread_suspend>
          break;
 8016ab4:	e009      	b.n	8016aca <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8016ab6:	1dfb      	adds	r3, r7, #7
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	4a19      	ldr	r2, [pc, #100]	; (8016b20 <USBPD_DPM_CADCallback+0x10c>)
 8016abc:	21b0      	movs	r1, #176	; 0xb0
 8016abe:	434b      	muls	r3, r1
 8016ac0:	18d3      	adds	r3, r2, r3
 8016ac2:	3330      	adds	r3, #48	; 0x30
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	2b03      	cmp	r3, #3
 8016ac8:	d1de      	bne.n	8016a88 <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 8016aca:	1dfb      	adds	r3, r7, #7
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	0018      	movs	r0, r3
 8016ad0:	f7e9 fdee 	bl	80006b0 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8016ad4:	1dfb      	adds	r3, r7, #7
 8016ad6:	781a      	ldrb	r2, [r3, #0]
 8016ad8:	4b12      	ldr	r3, [pc, #72]	; (8016b24 <USBPD_DPM_CADCallback+0x110>)
 8016ada:	0092      	lsls	r2, r2, #2
 8016adc:	5cd1      	ldrb	r1, [r2, r3]
 8016ade:	2010      	movs	r0, #16
 8016ae0:	4381      	bics	r1, r0
 8016ae2:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8016ae4:	1dfb      	adds	r3, r7, #7
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	4a0e      	ldr	r2, [pc, #56]	; (8016b24 <USBPD_DPM_CADCallback+0x110>)
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	18d3      	adds	r3, r2, r3
 8016aee:	785a      	ldrb	r2, [r3, #1]
 8016af0:	2107      	movs	r1, #7
 8016af2:	438a      	bics	r2, r1
 8016af4:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8016af6:	1dbb      	adds	r3, r7, #6
 8016af8:	781a      	ldrb	r2, [r3, #0]
 8016afa:	1dfb      	adds	r3, r7, #7
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	0011      	movs	r1, r2
 8016b00:	0018      	movs	r0, r3
 8016b02:	f000 f93f 	bl	8016d84 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8016b06:	1dfb      	adds	r3, r7, #7
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	2169      	movs	r1, #105	; 0x69
 8016b0c:	0018      	movs	r0, r3
 8016b0e:	f000 f947 	bl	8016da0 <USBPD_DPM_Notification>
      break;
 8016b12:	e000      	b.n	8016b16 <USBPD_DPM_CADCallback+0x102>
      break;
 8016b14:	46c0      	nop			; (mov r8, r8)
  }
}
 8016b16:	46c0      	nop			; (mov r8, r8)
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	b004      	add	sp, #16
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	46c0      	nop			; (mov r8, r8)
 8016b20:	200192a0 	.word	0x200192a0
 8016b24:	200193c0 	.word	0x200193c0

08016b28 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	0002      	movs	r2, r0
 8016b30:	1dfb      	adds	r3, r7, #7
 8016b32:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8016b34:	1dfb      	adds	r3, r7, #7
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	0018      	movs	r0, r3
 8016b3a:	f7e9 fdb3 	bl	80006a4 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8016b3e:	1dfb      	adds	r3, r7, #7
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d809      	bhi.n	8016b5a <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8016b46:	1dfb      	adds	r3, r7, #7
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	22b0      	movs	r2, #176	; 0xb0
 8016b4c:	435a      	muls	r2, r3
 8016b4e:	4b09      	ldr	r3, [pc, #36]	; (8016b74 <DPM_StartPETask+0x4c>)
 8016b50:	18d3      	adds	r3, r2, r3
 8016b52:	0018      	movs	r0, r3
 8016b54:	f7fc f856 	bl	8012c04 <_txe_thread_resume>
      break;
 8016b58:	e002      	b.n	8016b60 <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8016b5a:	f000 f80d 	bl	8016b78 <USBPD_DPM_ErrorHandler>
      break;
 8016b5e:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8016b60:	1dfb      	adds	r3, r7, #7
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2168      	movs	r1, #104	; 0x68
 8016b66:	0018      	movs	r0, r3
 8016b68:	f000 f91a 	bl	8016da0 <USBPD_DPM_Notification>
}
 8016b6c:	46c0      	nop			; (mov r8, r8)
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	b002      	add	sp, #8
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	200192a0 	.word	0x200192a0

08016b78 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 8016b7c:	e7fe      	b.n	8016b7c <USBPD_DPM_ErrorHandler+0x4>
	...

08016b80 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	0002      	movs	r2, r0
 8016b88:	1dfb      	adds	r3, r7, #7
 8016b8a:	701a      	strb	r2, [r3, #0]
 8016b8c:	1dbb      	adds	r3, r7, #6
 8016b8e:	1c0a      	adds	r2, r1, #0
 8016b90:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8016b92:	230f      	movs	r3, #15
 8016b94:	18fb      	adds	r3, r7, r3
 8016b96:	2202      	movs	r2, #2
 8016b98:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8016b9a:	1dfb      	adds	r3, r7, #7
 8016b9c:	781b      	ldrb	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d001      	beq.n	8016ba6 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8016ba2:	2302      	movs	r3, #2
 8016ba4:	e024      	b.n	8016bf0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8016ba6:	1dfb      	adds	r3, r7, #7
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	2208      	movs	r2, #8
 8016bac:	18ba      	adds	r2, r7, r2
 8016bae:	0011      	movs	r1, r2
 8016bb0:	0018      	movs	r0, r3
 8016bb2:	f000 fa70 	bl	8017096 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8016bb6:	1dbb      	adds	r3, r7, #6
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d10a      	bne.n	8016bd4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	4a0d      	ldr	r2, [pc, #52]	; (8016bf8 <USBPD_PWR_IF_SupplyReady+0x78>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d801      	bhi.n	8016bca <USBPD_PWR_IF_SupplyReady+0x4a>
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	e000      	b.n	8016bcc <USBPD_PWR_IF_SupplyReady+0x4c>
 8016bca:	2202      	movs	r2, #2
 8016bcc:	230f      	movs	r3, #15
 8016bce:	18fb      	adds	r3, r7, r3
 8016bd0:	701a      	strb	r2, [r3, #0]
 8016bd2:	e00a      	b.n	8016bea <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016bd4:	68ba      	ldr	r2, [r7, #8]
 8016bd6:	23af      	movs	r3, #175	; 0xaf
 8016bd8:	011b      	lsls	r3, r3, #4
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d901      	bls.n	8016be2 <USBPD_PWR_IF_SupplyReady+0x62>
 8016bde:	2200      	movs	r2, #0
 8016be0:	e000      	b.n	8016be4 <USBPD_PWR_IF_SupplyReady+0x64>
 8016be2:	2202      	movs	r2, #2
 8016be4:	230f      	movs	r3, #15
 8016be6:	18fb      	adds	r3, r7, r3
 8016be8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8016bea:	230f      	movs	r3, #15
 8016bec:	18fb      	adds	r3, r7, r3
 8016bee:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8016bf0:	0018      	movs	r0, r3
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	b004      	add	sp, #16
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	000002ed 	.word	0x000002ed

08016bfc <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	0002      	movs	r2, r0
 8016c04:	1dfb      	adds	r3, r7, #7
 8016c06:	701a      	strb	r2, [r3, #0]
 8016c08:	1dbb      	adds	r3, r7, #6
 8016c0a:	1c0a      	adds	r2, r1, #0
 8016c0c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8016c0e:	230f      	movs	r3, #15
 8016c10:	18fb      	adds	r3, r7, r3
 8016c12:	2200      	movs	r2, #0
 8016c14:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8016c16:	1dfb      	adds	r3, r7, #7
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	0018      	movs	r0, r3
 8016c1c:	f7f7 f8b6 	bl	800dd8c <HW_IF_PWR_GetVoltage>
 8016c20:	0003      	movs	r3, r0
 8016c22:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8016c24:	1dbb      	adds	r3, r7, #6
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	2b02      	cmp	r3, #2
 8016c2a:	d018      	beq.n	8016c5e <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8016c2c:	dc21      	bgt.n	8016c72 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d002      	beq.n	8016c38 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	d009      	beq.n	8016c4a <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8016c36:	e01c      	b.n	8016c72 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	4a15      	ldr	r2, [pc, #84]	; (8016c90 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d81a      	bhi.n	8016c76 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8016c40:	230f      	movs	r3, #15
 8016c42:	18fb      	adds	r3, r7, r3
 8016c44:	2201      	movs	r2, #1
 8016c46:	701a      	strb	r2, [r3, #0]
    break;
 8016c48:	e015      	b.n	8016c76 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016c4a:	68ba      	ldr	r2, [r7, #8]
 8016c4c:	23af      	movs	r3, #175	; 0xaf
 8016c4e:	011b      	lsls	r3, r3, #4
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d312      	bcc.n	8016c7a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8016c54:	230f      	movs	r3, #15
 8016c56:	18fb      	adds	r3, r7, r3
 8016c58:	2201      	movs	r2, #1
 8016c5a:	701a      	strb	r2, [r3, #0]
    break;
 8016c5c:	e00d      	b.n	8016c7a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016c5e:	68ba      	ldr	r2, [r7, #8]
 8016c60:	23af      	movs	r3, #175	; 0xaf
 8016c62:	011b      	lsls	r3, r3, #4
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d20a      	bcs.n	8016c7e <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8016c68:	230f      	movs	r3, #15
 8016c6a:	18fb      	adds	r3, r7, r3
 8016c6c:	2201      	movs	r2, #1
 8016c6e:	701a      	strb	r2, [r3, #0]
    break;
 8016c70:	e005      	b.n	8016c7e <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8016c72:	46c0      	nop			; (mov r8, r8)
 8016c74:	e004      	b.n	8016c80 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8016c76:	46c0      	nop			; (mov r8, r8)
 8016c78:	e002      	b.n	8016c80 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8016c7a:	46c0      	nop			; (mov r8, r8)
 8016c7c:	e000      	b.n	8016c80 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8016c7e:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 8016c80:	230f      	movs	r3, #15
 8016c82:	18fb      	adds	r3, r7, r3
 8016c84:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8016c86:	0018      	movs	r0, r3
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	b004      	add	sp, #16
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	46c0      	nop			; (mov r8, r8)
 8016c90:	000002ed 	.word	0x000002ed

08016c94 <USBPD_USBIF_DeviceStart>:

/** @addtogroup USBPD_CORE_USBIF_Exported_Functions
  * @{
  */
void USBPD_USBIF_DeviceStart(uint32_t PortNum)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b084      	sub	sp, #16
 8016c98:	af02      	add	r7, sp, #8
 8016c9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_DeviceStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device start", 18);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	b2d9      	uxtb	r1, r3
 8016ca0:	4b05      	ldr	r3, [pc, #20]	; (8016cb8 <USBPD_USBIF_DeviceStart+0x24>)
 8016ca2:	2212      	movs	r2, #18
 8016ca4:	9200      	str	r2, [sp, #0]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	2006      	movs	r0, #6
 8016caa:	f7f4 ff05 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_DeviceStart */
}
 8016cae:	46c0      	nop			; (mov r8, r8)
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	b002      	add	sp, #8
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	46c0      	nop			; (mov r8, r8)
 8016cb8:	080188f8 	.word	0x080188f8

08016cbc <USBPD_USBIF_DeviceStop>:

void USBPD_USBIF_DeviceStop(uint32_t PortNum)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af02      	add	r7, sp, #8
 8016cc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_DeviceStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device stop", 17);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	b2d9      	uxtb	r1, r3
 8016cc8:	4b05      	ldr	r3, [pc, #20]	; (8016ce0 <USBPD_USBIF_DeviceStop+0x24>)
 8016cca:	2211      	movs	r2, #17
 8016ccc:	9200      	str	r2, [sp, #0]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	2006      	movs	r0, #6
 8016cd2:	f7f4 fef1 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_DeviceStop */
}
 8016cd6:	46c0      	nop			; (mov r8, r8)
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	b002      	add	sp, #8
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	46c0      	nop			; (mov r8, r8)
 8016ce0:	0801890c 	.word	0x0801890c

08016ce4 <USBPD_USBIF_HostStart>:

void USBPD_USBIF_HostStart(uint32_t PortNum)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b084      	sub	sp, #16
 8016ce8:	af02      	add	r7, sp, #8
 8016cea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_HostStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host start", 16);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	b2d9      	uxtb	r1, r3
 8016cf0:	4b05      	ldr	r3, [pc, #20]	; (8016d08 <USBPD_USBIF_HostStart+0x24>)
 8016cf2:	2210      	movs	r2, #16
 8016cf4:	9200      	str	r2, [sp, #0]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	2006      	movs	r0, #6
 8016cfa:	f7f4 fedd 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStart */
}
 8016cfe:	46c0      	nop			; (mov r8, r8)
 8016d00:	46bd      	mov	sp, r7
 8016d02:	b002      	add	sp, #8
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	46c0      	nop			; (mov r8, r8)
 8016d08:	08018920 	.word	0x08018920

08016d0c <USBPD_USBIF_HostStop>:

void USBPD_USBIF_HostStop(uint32_t PortNum)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af02      	add	r7, sp, #8
 8016d12:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_HostStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host stop", 15);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	b2d9      	uxtb	r1, r3
 8016d18:	4b05      	ldr	r3, [pc, #20]	; (8016d30 <USBPD_USBIF_HostStop+0x24>)
 8016d1a:	220f      	movs	r2, #15
 8016d1c:	9200      	str	r2, [sp, #0]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	2006      	movs	r0, #6
 8016d22:	f7f4 fec9 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStop */
}
 8016d26:	46c0      	nop			; (mov r8, r8)
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	b002      	add	sp, #8
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	46c0      	nop			; (mov r8, r8)
 8016d30:	08018934 	.word	0x08018934

08016d34 <USBPD_USBIF_Swap2Host>:
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF device billboard", 22);
/* USER CODE END USBPD_USBIF_DeviceBillboard */
}

void USBPD_USBIF_Swap2Host(uint32_t PortNum)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af02      	add	r7, sp, #8
 8016d3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_Swap2Host */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to host", 18);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	b2d9      	uxtb	r1, r3
 8016d40:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <USBPD_USBIF_Swap2Host+0x24>)
 8016d42:	2212      	movs	r2, #18
 8016d44:	9200      	str	r2, [sp, #0]
 8016d46:	2200      	movs	r2, #0
 8016d48:	2006      	movs	r0, #6
 8016d4a:	f7f4 feb5 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Host */
}
 8016d4e:	46c0      	nop			; (mov r8, r8)
 8016d50:	46bd      	mov	sp, r7
 8016d52:	b002      	add	sp, #8
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	46c0      	nop			; (mov r8, r8)
 8016d58:	0801895c 	.word	0x0801895c

08016d5c <USBPD_USBIF_Swap2Device>:

void USBPD_USBIF_Swap2Device(uint32_t PortNum)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b084      	sub	sp, #16
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_Swap2Device */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to device", 20);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	b2d9      	uxtb	r1, r3
 8016d68:	4b05      	ldr	r3, [pc, #20]	; (8016d80 <USBPD_USBIF_Swap2Device+0x24>)
 8016d6a:	2214      	movs	r2, #20
 8016d6c:	9200      	str	r2, [sp, #0]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	2006      	movs	r0, #6
 8016d72:	f7f4 fea1 	bl	800bab8 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Device */
}
 8016d76:	46c0      	nop			; (mov r8, r8)
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	b002      	add	sp, #8
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	46c0      	nop			; (mov r8, r8)
 8016d80:	08018970 	.word	0x08018970

08016d84 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b082      	sub	sp, #8
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	0002      	movs	r2, r0
 8016d8c:	1dfb      	adds	r3, r7, #7
 8016d8e:	701a      	strb	r2, [r3, #0]
 8016d90:	1dbb      	adds	r3, r7, #6
 8016d92:	1c0a      	adds	r2, r1, #0
 8016d94:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8016d96:	46c0      	nop			; (mov r8, r8)
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	b002      	add	sp, #8
 8016d9c:	bd80      	pop	{r7, pc}
	...

08016da0 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b082      	sub	sp, #8
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	0002      	movs	r2, r0
 8016da8:	1dfb      	adds	r3, r7, #7
 8016daa:	701a      	strb	r2, [r3, #0]
 8016dac:	1dbb      	adds	r3, r7, #6
 8016dae:	1c0a      	adds	r2, r1, #0
 8016db0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 8016db2:	1dbb      	adds	r3, r7, #6
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	2b69      	cmp	r3, #105	; 0x69
 8016db8:	d01e      	beq.n	8016df8 <USBPD_DPM_Notification+0x58>
 8016dba:	dc3f      	bgt.n	8016e3c <USBPD_DPM_Notification+0x9c>
 8016dbc:	2b68      	cmp	r3, #104	; 0x68
 8016dbe:	d005      	beq.n	8016dcc <USBPD_DPM_Notification+0x2c>
 8016dc0:	dc3c      	bgt.n	8016e3c <USBPD_DPM_Notification+0x9c>
 8016dc2:	2b24      	cmp	r3, #36	; 0x24
 8016dc4:	d034      	beq.n	8016e30 <USBPD_DPM_Notification+0x90>
 8016dc6:	2b25      	cmp	r3, #37	; 0x25
 8016dc8:	d02c      	beq.n	8016e24 <USBPD_DPM_Notification+0x84>
      USBPD_USBIF_Swap2Device(PortNum);
      break;
    }

  default:
    break;
 8016dca:	e037      	b.n	8016e3c <USBPD_DPM_Notification+0x9c>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 8016dcc:	1dfb      	adds	r3, r7, #7
 8016dce:	781a      	ldrb	r2, [r3, #0]
 8016dd0:	4b1d      	ldr	r3, [pc, #116]	; (8016e48 <USBPD_DPM_Notification+0xa8>)
 8016dd2:	0092      	lsls	r2, r2, #2
 8016dd4:	5cd3      	ldrb	r3, [r2, r3]
 8016dd6:	071b      	lsls	r3, r3, #28
 8016dd8:	0fdb      	lsrs	r3, r3, #31
 8016dda:	b2db      	uxtb	r3, r3
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d105      	bne.n	8016dec <USBPD_DPM_Notification+0x4c>
        USBPD_USBIF_HostStart(PortNum);
 8016de0:	1dfb      	adds	r3, r7, #7
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	0018      	movs	r0, r3
 8016de6:	f7ff ff7d 	bl	8016ce4 <USBPD_USBIF_HostStart>
      break;
 8016dea:	e028      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
        USBPD_USBIF_DeviceStart(PortNum);
 8016dec:	1dfb      	adds	r3, r7, #7
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	0018      	movs	r0, r3
 8016df2:	f7ff ff4f 	bl	8016c94 <USBPD_USBIF_DeviceStart>
      break;
 8016df6:	e022      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 8016df8:	1dfb      	adds	r3, r7, #7
 8016dfa:	781a      	ldrb	r2, [r3, #0]
 8016dfc:	4b12      	ldr	r3, [pc, #72]	; (8016e48 <USBPD_DPM_Notification+0xa8>)
 8016dfe:	0092      	lsls	r2, r2, #2
 8016e00:	5cd3      	ldrb	r3, [r2, r3]
 8016e02:	071b      	lsls	r3, r3, #28
 8016e04:	0fdb      	lsrs	r3, r3, #31
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	2b01      	cmp	r3, #1
 8016e0a:	d105      	bne.n	8016e18 <USBPD_DPM_Notification+0x78>
        USBPD_USBIF_HostStop(PortNum);
 8016e0c:	1dfb      	adds	r3, r7, #7
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	0018      	movs	r0, r3
 8016e12:	f7ff ff7b 	bl	8016d0c <USBPD_USBIF_HostStop>
      break;
 8016e16:	e012      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
        USBPD_USBIF_DeviceStop(PortNum);
 8016e18:	1dfb      	adds	r3, r7, #7
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	0018      	movs	r0, r3
 8016e1e:	f7ff ff4d 	bl	8016cbc <USBPD_USBIF_DeviceStop>
      break;
 8016e22:	e00c      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
      USBPD_USBIF_Swap2Host(PortNum);
 8016e24:	1dfb      	adds	r3, r7, #7
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	0018      	movs	r0, r3
 8016e2a:	f7ff ff83 	bl	8016d34 <USBPD_USBIF_Swap2Host>
      break;
 8016e2e:	e006      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
      USBPD_USBIF_Swap2Device(PortNum);
 8016e30:	1dfb      	adds	r3, r7, #7
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	0018      	movs	r0, r3
 8016e36:	f7ff ff91 	bl	8016d5c <USBPD_USBIF_Swap2Device>
      break;
 8016e3a:	e000      	b.n	8016e3e <USBPD_DPM_Notification+0x9e>
    break;
 8016e3c:	46c0      	nop			; (mov r8, r8)
  }

/* USER CODE END USBPD_DPM_Notification */
}
 8016e3e:	46c0      	nop			; (mov r8, r8)
 8016e40:	46bd      	mov	sp, r7
 8016e42:	b002      	add	sp, #8
 8016e44:	bd80      	pop	{r7, pc}
 8016e46:	46c0      	nop			; (mov r8, r8)
 8016e48:	200193c0 	.word	0x200193c0

08016e4c <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6039      	str	r1, [r7, #0]
 8016e54:	0011      	movs	r1, r2
 8016e56:	1dfb      	adds	r3, r7, #7
 8016e58:	1c02      	adds	r2, r0, #0
 8016e5a:	701a      	strb	r2, [r3, #0]
 8016e5c:	1dbb      	adds	r3, r7, #6
 8016e5e:	1c0a      	adds	r2, r1, #0
 8016e60:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8016e62:	46c0      	nop			; (mov r8, r8)
 8016e64:	46bd      	mov	sp, r7
 8016e66:	b002      	add	sp, #8
 8016e68:	bd80      	pop	{r7, pc}

08016e6a <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8016e6a:	b580      	push	{r7, lr}
 8016e6c:	b084      	sub	sp, #16
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	60ba      	str	r2, [r7, #8]
 8016e72:	607b      	str	r3, [r7, #4]
 8016e74:	230f      	movs	r3, #15
 8016e76:	18fb      	adds	r3, r7, r3
 8016e78:	1c02      	adds	r2, r0, #0
 8016e7a:	701a      	strb	r2, [r3, #0]
 8016e7c:	230e      	movs	r3, #14
 8016e7e:	18fb      	adds	r3, r7, r3
 8016e80:	1c0a      	adds	r2, r1, #0
 8016e82:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8016e84:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8016e86:	46c0      	nop			; (mov r8, r8)
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	b004      	add	sp, #16
 8016e8c:	bd80      	pop	{r7, pc}

08016e8e <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b084      	sub	sp, #16
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	60ba      	str	r2, [r7, #8]
 8016e96:	607b      	str	r3, [r7, #4]
 8016e98:	230f      	movs	r3, #15
 8016e9a:	18fb      	adds	r3, r7, r3
 8016e9c:	1c02      	adds	r2, r0, #0
 8016e9e:	701a      	strb	r2, [r3, #0]
 8016ea0:	230e      	movs	r3, #14
 8016ea2:	18fb      	adds	r3, r7, r3
 8016ea4:	1c0a      	adds	r2, r1, #0
 8016ea6:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8016ea8:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8016eaa:	46c0      	nop			; (mov r8, r8)
 8016eac:	46bd      	mov	sp, r7
 8016eae:	b004      	add	sp, #16
 8016eb0:	bd80      	pop	{r7, pc}

08016eb2 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8016eb2:	b580      	push	{r7, lr}
 8016eb4:	b084      	sub	sp, #16
 8016eb6:	af00      	add	r7, sp, #0
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
 8016ebc:	230f      	movs	r3, #15
 8016ebe:	18fb      	adds	r3, r7, r3
 8016ec0:	1c02      	adds	r2, r0, #0
 8016ec2:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8016ec4:	46c0      	nop			; (mov r8, r8)
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	b004      	add	sp, #16
 8016eca:	bd80      	pop	{r7, pc}

08016ecc <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8016ecc:	b590      	push	{r4, r7, lr}
 8016ece:	b083      	sub	sp, #12
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	0004      	movs	r4, r0
 8016ed4:	0008      	movs	r0, r1
 8016ed6:	603a      	str	r2, [r7, #0]
 8016ed8:	0019      	movs	r1, r3
 8016eda:	1dfb      	adds	r3, r7, #7
 8016edc:	1c22      	adds	r2, r4, #0
 8016ede:	701a      	strb	r2, [r3, #0]
 8016ee0:	1dbb      	adds	r3, r7, #6
 8016ee2:	1c02      	adds	r2, r0, #0
 8016ee4:	701a      	strb	r2, [r3, #0]
 8016ee6:	1d3b      	adds	r3, r7, #4
 8016ee8:	1c0a      	adds	r2, r1, #0
 8016eea:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8016eec:	46c0      	nop			; (mov r8, r8)
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	b003      	add	sp, #12
 8016ef2:	bd90      	pop	{r4, r7, pc}

08016ef4 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	0002      	movs	r2, r0
 8016efc:	1dfb      	adds	r3, r7, #7
 8016efe:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8016f00:	1dfb      	adds	r3, r7, #7
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	0018      	movs	r0, r3
 8016f06:	f7e9 fb43 	bl	8000590 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8016f0a:	46c0      	nop			; (mov r8, r8)
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	b002      	add	sp, #8
 8016f10:	bd80      	pop	{r7, pc}
	...

08016f14 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b084      	sub	sp, #16
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	0002      	movs	r2, r0
 8016f1c:	1dfb      	adds	r3, r7, #7
 8016f1e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8016f20:	230f      	movs	r3, #15
 8016f22:	18fb      	adds	r3, r7, r3
 8016f24:	220c      	movs	r2, #12
 8016f26:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8016f28:	1dfb      	adds	r3, r7, #7
 8016f2a:	781a      	ldrb	r2, [r3, #0]
 8016f2c:	4931      	ldr	r1, [pc, #196]	; (8016ff4 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016f2e:	0013      	movs	r3, r2
 8016f30:	00db      	lsls	r3, r3, #3
 8016f32:	1a9b      	subs	r3, r3, r2
 8016f34:	00db      	lsls	r3, r3, #3
 8016f36:	5c5b      	ldrb	r3, [r3, r1]
 8016f38:	07db      	lsls	r3, r3, #31
 8016f3a:	0fdb      	lsrs	r3, r3, #31
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d019      	beq.n	8016f76 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8016f42:	1dfb      	adds	r3, r7, #7
 8016f44:	781a      	ldrb	r2, [r3, #0]
 8016f46:	492b      	ldr	r1, [pc, #172]	; (8016ff4 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016f48:	0013      	movs	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	1a9b      	subs	r3, r3, r2
 8016f4e:	00db      	lsls	r3, r3, #3
 8016f50:	5c5b      	ldrb	r3, [r3, r1]
 8016f52:	075b      	lsls	r3, r3, #29
 8016f54:	0fdb      	lsrs	r3, r3, #31
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d111      	bne.n	8016f80 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8016f5c:	1dfb      	adds	r3, r7, #7
 8016f5e:	781a      	ldrb	r2, [r3, #0]
 8016f60:	4924      	ldr	r1, [pc, #144]	; (8016ff4 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016f62:	0013      	movs	r3, r2
 8016f64:	00db      	lsls	r3, r3, #3
 8016f66:	1a9b      	subs	r3, r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	5c5b      	ldrb	r3, [r3, r1]
 8016f6c:	071b      	lsls	r3, r3, #28
 8016f6e:	0fdb      	lsrs	r3, r3, #31
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d104      	bne.n	8016f80 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
  {
    status = USBPD_NOTSUPPORTED;
 8016f76:	230f      	movs	r3, #15
 8016f78:	18fb      	adds	r3, r7, r3
 8016f7a:	2201      	movs	r2, #1
 8016f7c:	701a      	strb	r2, [r3, #0]
 8016f7e:	e031      	b.n	8016fe4 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8016f80:	1dfb      	adds	r3, r7, #7
 8016f82:	781a      	ldrb	r2, [r3, #0]
 8016f84:	491b      	ldr	r1, [pc, #108]	; (8016ff4 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016f86:	0013      	movs	r3, r2
 8016f88:	00db      	lsls	r3, r3, #3
 8016f8a:	1a9b      	subs	r3, r3, r2
 8016f8c:	00db      	lsls	r3, r3, #3
 8016f8e:	5c5b      	ldrb	r3, [r3, r1]
 8016f90:	075b      	lsls	r3, r3, #29
 8016f92:	0fdb      	lsrs	r3, r3, #31
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d109      	bne.n	8016fae <USBPD_DPM_EvaluateDataRoleSwap+0x9a>
 8016f9a:	1dfb      	adds	r3, r7, #7
 8016f9c:	781a      	ldrb	r2, [r3, #0]
 8016f9e:	4b16      	ldr	r3, [pc, #88]	; (8016ff8 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 8016fa0:	0092      	lsls	r2, r2, #2
 8016fa2:	5cd3      	ldrb	r3, [r2, r3]
 8016fa4:	071b      	lsls	r3, r3, #28
 8016fa6:	0fdb      	lsrs	r3, r3, #31
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d016      	beq.n	8016fdc <USBPD_DPM_EvaluateDataRoleSwap+0xc8>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8016fae:	1dfb      	adds	r3, r7, #7
 8016fb0:	781a      	ldrb	r2, [r3, #0]
 8016fb2:	4910      	ldr	r1, [pc, #64]	; (8016ff4 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016fb4:	0013      	movs	r3, r2
 8016fb6:	00db      	lsls	r3, r3, #3
 8016fb8:	1a9b      	subs	r3, r3, r2
 8016fba:	00db      	lsls	r3, r3, #3
 8016fbc:	5c5b      	ldrb	r3, [r3, r1]
 8016fbe:	071b      	lsls	r3, r3, #28
 8016fc0:	0fdb      	lsrs	r3, r3, #31
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	2b01      	cmp	r3, #1
 8016fc6:	d10d      	bne.n	8016fe4 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
 8016fc8:	1dfb      	adds	r3, r7, #7
 8016fca:	781a      	ldrb	r2, [r3, #0]
 8016fcc:	4b0a      	ldr	r3, [pc, #40]	; (8016ff8 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 8016fce:	0092      	lsls	r2, r2, #2
 8016fd0:	5cd3      	ldrb	r3, [r2, r3]
 8016fd2:	071b      	lsls	r3, r3, #28
 8016fd4:	0fdb      	lsrs	r3, r3, #31
 8016fd6:	b2db      	uxtb	r3, r3
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d103      	bne.n	8016fe4 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
    {
      status = USBPD_ACCEPT;
 8016fdc:	230f      	movs	r3, #15
 8016fde:	18fb      	adds	r3, r7, r3
 8016fe0:	220a      	movs	r2, #10
 8016fe2:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8016fe4:	230f      	movs	r3, #15
 8016fe6:	18fb      	adds	r3, r7, r3
 8016fe8:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8016fea:	0018      	movs	r0, r3
 8016fec:	46bd      	mov	sp, r7
 8016fee:	b004      	add	sp, #16
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	46c0      	nop			; (mov r8, r8)
 8016ff4:	20000068 	.word	0x20000068
 8016ff8:	200193c0 	.word	0x200193c0

08016ffc <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	0002      	movs	r2, r0
 8017004:	1dfb      	adds	r3, r7, #7
 8017006:	701a      	strb	r2, [r3, #0]
 8017008:	1dbb      	adds	r3, r7, #6
 801700a:	1c0a      	adds	r2, r1, #0
 801700c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801700e:	1dbb      	adds	r3, r7, #6
 8017010:	781a      	ldrb	r2, [r3, #0]
 8017012:	1dfb      	adds	r3, r7, #7
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	0011      	movs	r1, r2
 8017018:	0018      	movs	r0, r3
 801701a:	f7ff fdb1 	bl	8016b80 <USBPD_PWR_IF_SupplyReady>
 801701e:	0003      	movs	r3, r0
 8017020:	425a      	negs	r2, r3
 8017022:	4153      	adcs	r3, r2
 8017024:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8017026:	0018      	movs	r0, r3
 8017028:	46bd      	mov	sp, r7
 801702a:	b002      	add	sp, #8
 801702c:	bd80      	pop	{r7, pc}

0801702e <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801702e:	b580      	push	{r7, lr}
 8017030:	b084      	sub	sp, #16
 8017032:	af00      	add	r7, sp, #0
 8017034:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8017036:	2300      	movs	r3, #0
 8017038:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2b01      	cmp	r3, #1
 801703e:	d902      	bls.n	8017046 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017040:	2302      	movs	r3, #2
 8017042:	425b      	negs	r3, r3
 8017044:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8017046:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8017048:	0018      	movs	r0, r3
 801704a:	46bd      	mov	sp, r7
 801704c:	b004      	add	sp, #16
 801704e:	bd80      	pop	{r7, pc}

08017050 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b084      	sub	sp, #16
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8017058:	2300      	movs	r3, #0
 801705a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d902      	bls.n	8017068 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017062:	2302      	movs	r3, #2
 8017064:	425b      	negs	r3, r3
 8017066:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8017068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801706a:	0018      	movs	r0, r3
 801706c:	46bd      	mov	sp, r7
 801706e:	b004      	add	sp, #16
 8017070:	bd80      	pop	{r7, pc}

08017072 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8017072:	b580      	push	{r7, lr}
 8017074:	b084      	sub	sp, #16
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801707a:	230b      	movs	r3, #11
 801707c:	425b      	negs	r3, r3
 801707e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d902      	bls.n	801708c <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017086:	2302      	movs	r3, #2
 8017088:	425b      	negs	r3, r3
 801708a:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 801708c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801708e:	0018      	movs	r0, r3
 8017090:	46bd      	mov	sp, r7
 8017092:	b004      	add	sp, #16
 8017094:	bd80      	pop	{r7, pc}

08017096 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8017096:	b580      	push	{r7, lr}
 8017098:	b084      	sub	sp, #16
 801709a:	af00      	add	r7, sp, #0
 801709c:	6078      	str	r0, [r7, #4]
 801709e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80170a0:	2300      	movs	r3, #0
 80170a2:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d802      	bhi.n	80170b0 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d102      	bne.n	80170b6 <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80170b0:	2302      	movs	r3, #2
 80170b2:	425b      	negs	r3, r3
 80170b4:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	2200      	movs	r2, #0
 80170ba:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 80170bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 80170be:	0018      	movs	r0, r3
 80170c0:	46bd      	mov	sp, r7
 80170c2:	b004      	add	sp, #16
 80170c4:	bd80      	pop	{r7, pc}
	...

080170c8 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 80170c8:	b590      	push	{r4, r7, lr}
 80170ca:	b095      	sub	sp, #84	; 0x54
 80170cc:	af08      	add	r7, sp, #32
 80170ce:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 80170d0:	2300      	movs	r3, #0
 80170d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	62bb      	str	r3, [r7, #40]	; 0x28
  UCHAR *string_framework;
  /* Language_Id_Framework*/
  UCHAR *language_id_framework;

  /* Allocate the stack for thread 0.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 80170d8:	23a0      	movs	r3, #160	; 0xa0
 80170da:	01da      	lsls	r2, r3, #7
 80170dc:	2318      	movs	r3, #24
 80170de:	18f9      	adds	r1, r7, r3
 80170e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170e2:	2300      	movs	r3, #0
 80170e4:	f7fa fe48 	bl	8011d78 <_txe_byte_allocate>
 80170e8:	1e03      	subs	r3, r0, #0
 80170ea:	d001      	beq.n	80170f0 <MX_USBX_Device_Init+0x28>
                       USBX_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80170ec:	2302      	movs	r3, #2
 80170ee:	e0e1      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_MEMORY_SIZE, UX_NULL, 0) != UX_SUCCESS)
 80170f0:	69b8      	ldr	r0, [r7, #24]
 80170f2:	23a0      	movs	r3, #160	; 0xa0
 80170f4:	01d9      	lsls	r1, r3, #7
 80170f6:	2300      	movs	r3, #0
 80170f8:	2200      	movs	r2, #0
 80170fa:	f7fd fcf7 	bl	8014aec <_ux_system_initialize>
 80170fe:	1e03      	subs	r3, r0, #0
 8017100:	d001      	beq.n	8017106 <MX_USBX_Device_Init+0x3e>
  {
    return UX_ERROR;
 8017102:	23ff      	movs	r3, #255	; 0xff
 8017104:	e0d6      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Get_Device_Framework_Full_Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8017106:	2314      	movs	r3, #20
 8017108:	18fb      	adds	r3, r7, r3
 801710a:	0019      	movs	r1, r3
 801710c:	2000      	movs	r0, #0
 801710e:	f000 fb8f 	bl	8017830 <USBD_Get_Device_Framework_Speed>
 8017112:	0003      	movs	r3, r0
 8017114:	627b      	str	r3, [r7, #36]	; 0x24
                                &device_framework_fs_length);

  /* Get_String_Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8017116:	2310      	movs	r3, #16
 8017118:	18fb      	adds	r3, r7, r3
 801711a:	0018      	movs	r0, r3
 801711c:	f000 fbd2 	bl	80178c4 <USBD_Get_String_Framework>
 8017120:	0003      	movs	r3, r0
 8017122:	623b      	str	r3, [r7, #32]

  /* Get_Language_Id_Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&languge_id_framework_length);
 8017124:	230c      	movs	r3, #12
 8017126:	18fb      	adds	r3, r7, r3
 8017128:	0018      	movs	r0, r3
 801712a:	f000 fc6d 	bl	8017a08 <USBD_Get_Language_Id_Framework>
 801712e:	0003      	movs	r3, r0
 8017130:	61fb      	str	r3, [r7, #28]

  /* The code below is required for installing the device portion of USBX.
     In this application */
  if (ux_device_stack_initialize(NULL,
 8017132:	6978      	ldr	r0, [r7, #20]
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	68fa      	ldr	r2, [r7, #12]
 8017138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801713a:	2400      	movs	r4, #0
 801713c:	9404      	str	r4, [sp, #16]
 801713e:	9203      	str	r2, [sp, #12]
 8017140:	69fa      	ldr	r2, [r7, #28]
 8017142:	9202      	str	r2, [sp, #8]
 8017144:	9301      	str	r3, [sp, #4]
 8017146:	6a3b      	ldr	r3, [r7, #32]
 8017148:	9300      	str	r3, [sp, #0]
 801714a:	0003      	movs	r3, r0
 801714c:	000a      	movs	r2, r1
 801714e:	2100      	movs	r1, #0
 8017150:	2000      	movs	r0, #0
 8017152:	f7fc fff5 	bl	8014140 <_ux_device_stack_initialize>
 8017156:	1e03      	subs	r3, r0, #0
 8017158:	d001      	beq.n	801715e <MX_USBX_Device_Init+0x96>
                                 string_framework_length,
                                 language_id_framework,
                                 languge_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    return UX_ERROR;
 801715a:	23ff      	movs	r3, #255	; 0xff
 801715c:	e0aa      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Initialize the cdc class parameters for the device. */
    cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = CDC_Init_FS;
 801715e:	4b57      	ldr	r3, [pc, #348]	; (80172bc <MX_USBX_Device_Init+0x1f4>)
 8017160:	4a57      	ldr	r2, [pc, #348]	; (80172c0 <MX_USBX_Device_Init+0x1f8>)
 8017162:	601a      	str	r2, [r3, #0]

    /* Deinitialize the cdc class parameters for the device. */
    cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = CDC_DeInit_FS;
 8017164:	4b55      	ldr	r3, [pc, #340]	; (80172bc <MX_USBX_Device_Init+0x1f4>)
 8017166:	4a57      	ldr	r2, [pc, #348]	; (80172c4 <MX_USBX_Device_Init+0x1fc>)
 8017168:	605a      	str	r2, [r3, #4]

    /* Manage the CDC class requests */
    cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = ux_app_parameters_change;
 801716a:	4b54      	ldr	r3, [pc, #336]	; (80172bc <MX_USBX_Device_Init+0x1f4>)
 801716c:	4a56      	ldr	r2, [pc, #344]	; (80172c8 <MX_USBX_Device_Init+0x200>)
 801716e:	609a      	str	r2, [r3, #8]

    /* Registers a slave class to the slave stack. The class is connected with
       interface 0 */
    if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8017170:	4956      	ldr	r1, [pc, #344]	; (80172cc <MX_USBX_Device_Init+0x204>)
 8017172:	4857      	ldr	r0, [pc, #348]	; (80172d0 <MX_USBX_Device_Init+0x208>)
 8017174:	4b51      	ldr	r3, [pc, #324]	; (80172bc <MX_USBX_Device_Init+0x1f4>)
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	2300      	movs	r3, #0
 801717a:	2201      	movs	r2, #1
 801717c:	f7fc f84c 	bl	8013218 <_ux_device_stack_class_register>
 8017180:	1e03      	subs	r3, r0, #0
 8017182:	d001      	beq.n	8017188 <MX_USBX_Device_Init+0xc0>
                                       ux_device_class_cdc_acm_entry, 1, 0,
                                       (VOID *)&cdc_acm_parameter) != UX_SUCCESS)
    {
      return UX_ERROR;
 8017184:	23ff      	movs	r3, #255	; 0xff
 8017186:	e095      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  {
    return UX_ERROR;
  }*/

  /* Allocate the stack for main_usbx_app_thread_entry. */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8017188:	2380      	movs	r3, #128	; 0x80
 801718a:	01da      	lsls	r2, r3, #7
 801718c:	2318      	movs	r3, #24
 801718e:	18f9      	adds	r1, r7, r3
 8017190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017192:	2300      	movs	r3, #0
 8017194:	f7fa fdf0 	bl	8011d78 <_txe_byte_allocate>
 8017198:	1e03      	subs	r3, r0, #0
 801719a:	d001      	beq.n	80171a0 <MX_USBX_Device_Init+0xd8>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 801719c:	2302      	movs	r3, #2
 801719e:	e089      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  {
    return TX_THREAD_ERROR;
  }*/
  
  /* Create the main thread. */
  if (tx_thread_create(&ux_app_thread, "main_usbx_app_thread_entry",
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	4c4c      	ldr	r4, [pc, #304]	; (80172d4 <MX_USBX_Device_Init+0x20c>)
 80171a4:	494c      	ldr	r1, [pc, #304]	; (80172d8 <MX_USBX_Device_Init+0x210>)
 80171a6:	484d      	ldr	r0, [pc, #308]	; (80172dc <MX_USBX_Device_Init+0x214>)
 80171a8:	22b0      	movs	r2, #176	; 0xb0
 80171aa:	9206      	str	r2, [sp, #24]
 80171ac:	2201      	movs	r2, #1
 80171ae:	9205      	str	r2, [sp, #20]
 80171b0:	2200      	movs	r2, #0
 80171b2:	9204      	str	r2, [sp, #16]
 80171b4:	2214      	movs	r2, #20
 80171b6:	9203      	str	r2, [sp, #12]
 80171b8:	2214      	movs	r2, #20
 80171ba:	9202      	str	r2, [sp, #8]
 80171bc:	2280      	movs	r2, #128	; 0x80
 80171be:	01d2      	lsls	r2, r2, #7
 80171c0:	9201      	str	r2, [sp, #4]
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	2300      	movs	r3, #0
 80171c6:	0022      	movs	r2, r4
 80171c8:	f7fb fbfa 	bl	80129c0 <_txe_thread_create>
 80171cc:	1e03      	subs	r3, r0, #0
 80171ce:	d001      	beq.n	80171d4 <MX_USBX_Device_Init+0x10c>
                       usbx_app_thread_entry, 0, pointer, USBX_APP_STACK_SIZE,
                       20, 20, TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 80171d0:	230e      	movs	r3, #14
 80171d2:	e06f      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  {
    return TX_THREAD_ERROR;
  }*/

  /* Allocate the stack for usbx_cdc_acm_read_thread_entry. */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 80171d4:	2380      	movs	r3, #128	; 0x80
 80171d6:	01da      	lsls	r2, r3, #7
 80171d8:	2318      	movs	r3, #24
 80171da:	18f9      	adds	r1, r7, r3
 80171dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171de:	2300      	movs	r3, #0
 80171e0:	f7fa fdca 	bl	8011d78 <_txe_byte_allocate>
 80171e4:	1e03      	subs	r3, r0, #0
 80171e6:	d001      	beq.n	80171ec <MX_USBX_Device_Init+0x124>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80171e8:	2302      	movs	r3, #2
 80171ea:	e063      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Create the usbx_cdc_acm_thread_entry thread. */
  if (tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry",
 80171ec:	69bb      	ldr	r3, [r7, #24]
 80171ee:	4c3c      	ldr	r4, [pc, #240]	; (80172e0 <MX_USBX_Device_Init+0x218>)
 80171f0:	493c      	ldr	r1, [pc, #240]	; (80172e4 <MX_USBX_Device_Init+0x21c>)
 80171f2:	483d      	ldr	r0, [pc, #244]	; (80172e8 <MX_USBX_Device_Init+0x220>)
 80171f4:	22b0      	movs	r2, #176	; 0xb0
 80171f6:	9206      	str	r2, [sp, #24]
 80171f8:	2201      	movs	r2, #1
 80171fa:	9205      	str	r2, [sp, #20]
 80171fc:	2200      	movs	r2, #0
 80171fe:	9204      	str	r2, [sp, #16]
 8017200:	2214      	movs	r2, #20
 8017202:	9203      	str	r2, [sp, #12]
 8017204:	2214      	movs	r2, #20
 8017206:	9202      	str	r2, [sp, #8]
 8017208:	2280      	movs	r2, #128	; 0x80
 801720a:	01d2      	lsls	r2, r2, #7
 801720c:	9201      	str	r2, [sp, #4]
 801720e:	9300      	str	r3, [sp, #0]
 8017210:	2301      	movs	r3, #1
 8017212:	0022      	movs	r2, r4
 8017214:	f7fb fbd4 	bl	80129c0 <_txe_thread_create>
 8017218:	1e03      	subs	r3, r0, #0
 801721a:	d001      	beq.n	8017220 <MX_USBX_Device_Init+0x158>
                       usbx_cdc_acm_read_thread_entry, 1, pointer,
                       USBX_APP_STACK_SIZE, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 801721c:	230e      	movs	r3, #14
 801721e:	e049      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Allocate the stack for usbx_cdc_acm_write_thread_entry. */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8017220:	2380      	movs	r3, #128	; 0x80
 8017222:	01da      	lsls	r2, r3, #7
 8017224:	2318      	movs	r3, #24
 8017226:	18f9      	adds	r1, r7, r3
 8017228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801722a:	2300      	movs	r3, #0
 801722c:	f7fa fda4 	bl	8011d78 <_txe_byte_allocate>
 8017230:	1e03      	subs	r3, r0, #0
 8017232:	d001      	beq.n	8017238 <MX_USBX_Device_Init+0x170>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8017234:	2302      	movs	r3, #2
 8017236:	e03d      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Create the usbx_cdc_acm_thread_entry thread. */
  if (tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry",
 8017238:	69bb      	ldr	r3, [r7, #24]
 801723a:	4c2c      	ldr	r4, [pc, #176]	; (80172ec <MX_USBX_Device_Init+0x224>)
 801723c:	492c      	ldr	r1, [pc, #176]	; (80172f0 <MX_USBX_Device_Init+0x228>)
 801723e:	482d      	ldr	r0, [pc, #180]	; (80172f4 <MX_USBX_Device_Init+0x22c>)
 8017240:	22b0      	movs	r2, #176	; 0xb0
 8017242:	9206      	str	r2, [sp, #24]
 8017244:	2201      	movs	r2, #1
 8017246:	9205      	str	r2, [sp, #20]
 8017248:	2200      	movs	r2, #0
 801724a:	9204      	str	r2, [sp, #16]
 801724c:	2214      	movs	r2, #20
 801724e:	9203      	str	r2, [sp, #12]
 8017250:	2214      	movs	r2, #20
 8017252:	9202      	str	r2, [sp, #8]
 8017254:	2280      	movs	r2, #128	; 0x80
 8017256:	01d2      	lsls	r2, r2, #7
 8017258:	9201      	str	r2, [sp, #4]
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	2301      	movs	r3, #1
 801725e:	0022      	movs	r2, r4
 8017260:	f7fb fbae 	bl	80129c0 <_txe_thread_create>
 8017264:	1e03      	subs	r3, r0, #0
 8017266:	d001      	beq.n	801726c <MX_USBX_Device_Init+0x1a4>
                       usbx_cdc_acm_write_thread_entry, 1, pointer,
                       USBX_APP_STACK_SIZE, 20, 20, TX_NO_TIME_SLICE,
                       TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8017268:	230e      	movs	r3, #14
 801726a:	e023      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Create the event flags group. */
  if (tx_event_flags_create(&EventFlag, "Event Flag") != TX_SUCCESS)
 801726c:	4922      	ldr	r1, [pc, #136]	; (80172f8 <MX_USBX_Device_Init+0x230>)
 801726e:	4b23      	ldr	r3, [pc, #140]	; (80172fc <MX_USBX_Device_Init+0x234>)
 8017270:	2224      	movs	r2, #36	; 0x24
 8017272:	0018      	movs	r0, r3
 8017274:	f7fa fe94 	bl	8011fa0 <_txe_event_flags_create>
 8017278:	1e03      	subs	r3, r0, #0
 801727a:	d001      	beq.n	8017280 <MX_USBX_Device_Init+0x1b8>
  {
    return TX_GROUP_ERROR;
 801727c:	2306      	movs	r3, #6
 801727e:	e019      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Allocate Memory for the Queue */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8017280:	2318      	movs	r3, #24
 8017282:	18f9      	adds	r1, r7, r3
 8017284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017286:	2300      	movs	r3, #0
 8017288:	2204      	movs	r2, #4
 801728a:	f7fa fd75 	bl	8011d78 <_txe_byte_allocate>
 801728e:	1e03      	subs	r3, r0, #0
 8017290:	d001      	beq.n	8017296 <MX_USBX_Device_Init+0x1ce>
                       sizeof(APP_QUEUE_SIZE*sizeof(ULONG)),
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8017292:	2302      	movs	r3, #2
 8017294:	e00e      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }

  /* Create the MsgQueue */
  if (tx_queue_create(&ux_app_MsgQueue, "Message Queue app",
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	4919      	ldr	r1, [pc, #100]	; (8017300 <MX_USBX_Device_Init+0x238>)
 801729a:	481a      	ldr	r0, [pc, #104]	; (8017304 <MX_USBX_Device_Init+0x23c>)
 801729c:	2238      	movs	r2, #56	; 0x38
 801729e:	9201      	str	r2, [sp, #4]
 80172a0:	2214      	movs	r2, #20
 80172a2:	9200      	str	r2, [sp, #0]
 80172a4:	2201      	movs	r2, #1
 80172a6:	f7fb f90b 	bl	80124c0 <_txe_queue_create>
 80172aa:	1e03      	subs	r3, r0, #0
 80172ac:	d001      	beq.n	80172b2 <MX_USBX_Device_Init+0x1ea>
                      TX_1_ULONG, pointer,
                      APP_QUEUE_SIZE*sizeof(ULONG)) != TX_SUCCESS)
  {
    return TX_QUEUE_ERROR;
 80172ae:	2309      	movs	r3, #9
 80172b0:	e000      	b.n	80172b4 <MX_USBX_Device_Init+0x1ec>
  }
  /* USER CODE END MX_USBX_Device_Init */

  return ret;
 80172b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80172b4:	0018      	movs	r0, r3
 80172b6:	46bd      	mov	sp, r7
 80172b8:	b00d      	add	sp, #52	; 0x34
 80172ba:	bd90      	pop	{r4, r7, pc}
 80172bc:	200195f8 	.word	0x200195f8
 80172c0:	080173a9 	.word	0x080173a9
 80172c4:	08017441 	.word	0x08017441
 80172c8:	0801745d 	.word	0x0801745d
 80172cc:	08015701 	.word	0x08015701
 80172d0:	20000014 	.word	0x20000014
 80172d4:	08017309 	.word	0x08017309
 80172d8:	080189b0 	.word	0x080189b0
 80172dc:	200193c4 	.word	0x200193c4
 80172e0:	080174fd 	.word	0x080174fd
 80172e4:	080189cc 	.word	0x080189cc
 80172e8:	20019474 	.word	0x20019474
 80172ec:	080175b9 	.word	0x080175b9
 80172f0:	080189f0 	.word	0x080189f0
 80172f4:	20019524 	.word	0x20019524
 80172f8:	08018a14 	.word	0x08018a14
 80172fc:	200195d4 	.word	0x200195d4
 8017300:	08018a20 	.word	0x08018a20
 8017304:	20019604 	.word	0x20019604

08017308 <usbx_app_thread_entry>:
  * @brief  Function implementing usbx_app_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_app_thread_entry(ULONG arg)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
  /* Initialization of USB device */
  MX_USB_Device_Init();
 8017310:	f000 f826 	bl	8017360 <MX_USB_Device_Init>

  /* Wait for message queue to start/stop the device */
  while(1)
  {
    /* Wait for a device to be connected */
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8017314:	2301      	movs	r3, #1
 8017316:	425a      	negs	r2, r3
 8017318:	490e      	ldr	r1, [pc, #56]	; (8017354 <usbx_app_thread_entry+0x4c>)
 801731a:	4b0f      	ldr	r3, [pc, #60]	; (8017358 <usbx_app_thread_entry+0x50>)
 801731c:	0018      	movs	r0, r3
 801731e:	f7fb f97f 	bl	8012620 <_txe_queue_receive>
 8017322:	1e03      	subs	r3, r0, #0
 8017324:	d001      	beq.n	801732a <usbx_app_thread_entry+0x22>
                         TX_WAIT_FOREVER)!= TX_SUCCESS)
    {
     /*Error*/
     Error_Handler();
 8017326:	f7eb fb33 	bl	8002990 <Error_Handler>
    }
    /* Check if received message equal to USB_PCD_START */
    if (Event_Msg == START_USB_DEVICE)
 801732a:	4b0a      	ldr	r3, [pc, #40]	; (8017354 <usbx_app_thread_entry+0x4c>)
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	2b02      	cmp	r3, #2
 8017330:	d104      	bne.n	801733c <usbx_app_thread_entry+0x34>
    {
      /* Start device USB */
      HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8017332:	4b0a      	ldr	r3, [pc, #40]	; (801735c <usbx_app_thread_entry+0x54>)
 8017334:	0018      	movs	r0, r3
 8017336:	f7ed fa29 	bl	800478c <HAL_PCD_Start>
 801733a:	e7eb      	b.n	8017314 <usbx_app_thread_entry+0xc>
    }
    /* Check if received message equal to USB_PCD_STOP */
    else if (Event_Msg == STOP_USB_DEVICE)
 801733c:	4b05      	ldr	r3, [pc, #20]	; (8017354 <usbx_app_thread_entry+0x4c>)
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	2b01      	cmp	r3, #1
 8017342:	d104      	bne.n	801734e <usbx_app_thread_entry+0x46>
    {
      /* Stop device USB */
      HAL_PCD_Stop(&hpcd_USB_DRD_FS);
 8017344:	4b05      	ldr	r3, [pc, #20]	; (801735c <usbx_app_thread_entry+0x54>)
 8017346:	0018      	movs	r0, r3
 8017348:	f7ed fa45 	bl	80047d6 <HAL_PCD_Stop>
 801734c:	e7e2      	b.n	8017314 <usbx_app_thread_entry+0xc>
    }
    /* Else Error */
    else
    {
      /*Error*/
      Error_Handler();
 801734e:	f7eb fb1f 	bl	8002990 <Error_Handler>
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8017352:	e7df      	b.n	8017314 <usbx_app_thread_entry+0xc>
 8017354:	2001963c 	.word	0x2001963c
 8017358:	20019604 	.word	0x20019604
 801735c:	200188f8 	.word	0x200188f8

08017360 <MX_USB_Device_Init>:
  *        Initialization of USB device.
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */
  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  MX_USB_DRD_FS_PCD_Init();
 8017364:	f7ec f8b4 	bl	80034d0 <MX_USB_DRD_FS_PCD_Init>

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */

  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x0C);
 8017368:	480d      	ldr	r0, [pc, #52]	; (80173a0 <MX_USB_Device_Init+0x40>)
 801736a:	230c      	movs	r3, #12
 801736c:	2200      	movs	r2, #0
 801736e:	2100      	movs	r1, #0
 8017370:	f7ee fee8 	bl	8006144 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x4C);
 8017374:	480a      	ldr	r0, [pc, #40]	; (80173a0 <MX_USB_Device_Init+0x40>)
 8017376:	234c      	movs	r3, #76	; 0x4c
 8017378:	2200      	movs	r2, #0
 801737a:	2180      	movs	r1, #128	; 0x80
 801737c:	f7ee fee2 	bl	8006144 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x8C);
 8017380:	4807      	ldr	r0, [pc, #28]	; (80173a0 <MX_USB_Device_Init+0x40>)
 8017382:	238c      	movs	r3, #140	; 0x8c
 8017384:	2200      	movs	r2, #0
 8017386:	2181      	movs	r1, #129	; 0x81
 8017388:	f7ee fedc 	bl	8006144 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x82, PCD_SNG_BUF, 0x114);
  */
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* initialize the device controller driver*/
  _ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 801738c:	4b04      	ldr	r3, [pc, #16]	; (80173a0 <MX_USB_Device_Init+0x40>)
 801738e:	4a05      	ldr	r2, [pc, #20]	; (80173a4 <MX_USB_Device_Init+0x44>)
 8017390:	0019      	movs	r1, r3
 8017392:	0010      	movs	r0, r2
 8017394:	f7ff f884 	bl	80164a0 <_ux_dcd_stm32_initialize>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017398:	46c0      	nop			; (mov r8, r8)
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	46c0      	nop			; (mov r8, r8)
 80173a0:	200188f8 	.word	0x200188f8
 80173a4:	40005c00 	.word	0x40005c00

080173a8 <CDC_Init_FS>:
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @param  cdc Instance
  * @retval none
  */
void CDC_Init_FS(void *cdc_acm)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b084      	sub	sp, #16
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  /* Status */
  UINT ux_status = UX_SUCCESS;
 80173b0:	2300      	movs	r3, #0
 80173b2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN 3 */
  /*-- 1- Configure the UART peripheral --------------------------------------*/
  MX_USART1_UART_Init();
 80173b4:	f7eb fea8 	bl	8003108 <MX_USART1_UART_Init>

  /* Get default uart parameters defined by CubeMx */
  /* Get uart3 baudrate */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = huart1.Init.BaudRate;
 80173b8:	4b1e      	ldr	r3, [pc, #120]	; (8017434 <CDC_Init_FS+0x8c>)
 80173ba:	685a      	ldr	r2, [r3, #4]
 80173bc:	4b1e      	ldr	r3, [pc, #120]	; (8017438 <CDC_Init_FS+0x90>)
 80173be:	601a      	str	r2, [r3, #0]

  /*set the data type : only 8bits and 9bits are supported */
  switch (huart1.Init.WordLength)
 80173c0:	4b1c      	ldr	r3, [pc, #112]	; (8017434 <CDC_Init_FS+0x8c>)
 80173c2:	689b      	ldr	r3, [r3, #8]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d004      	beq.n	80173d2 <CDC_Init_FS+0x2a>
 80173c8:	2280      	movs	r2, #128	; 0x80
 80173ca:	0152      	lsls	r2, r2, #5
 80173cc:	4293      	cmp	r3, r2
 80173ce:	d004      	beq.n	80173da <CDC_Init_FS+0x32>
 80173d0:	e007      	b.n	80173e2 <CDC_Init_FS+0x3a>
  {
    case UART_WORDLENGTH_8B:
    {
      /* Set data bit to 8 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 80173d2:	4b19      	ldr	r3, [pc, #100]	; (8017438 <CDC_Init_FS+0x90>)
 80173d4:	2208      	movs	r2, #8
 80173d6:	719a      	strb	r2, [r3, #6]
      break;
 80173d8:	e007      	b.n	80173ea <CDC_Init_FS+0x42>
    }

    case UART_WORDLENGTH_9B:
    {
      /* Set data bit to 9 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH9;
 80173da:	4b17      	ldr	r3, [pc, #92]	; (8017438 <CDC_Init_FS+0x90>)
 80173dc:	2209      	movs	r2, #9
 80173de:	719a      	strb	r2, [r3, #6]
      break;
 80173e0:	e003      	b.n	80173ea <CDC_Init_FS+0x42>
    }

    default :
    {
      /* By default set data bit to 8 */
      CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_data_bit = VCP_WORDLENGTH8;
 80173e2:	4b15      	ldr	r3, [pc, #84]	; (8017438 <CDC_Init_FS+0x90>)
 80173e4:	2208      	movs	r2, #8
 80173e6:	719a      	strb	r2, [r3, #6]
      break;
 80173e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Get uart3 Parity */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_parity = huart1.Init.Parity;
 80173ea:	4b12      	ldr	r3, [pc, #72]	; (8017434 <CDC_Init_FS+0x8c>)
 80173ec:	691b      	ldr	r3, [r3, #16]
 80173ee:	b2da      	uxtb	r2, r3
 80173f0:	4b11      	ldr	r3, [pc, #68]	; (8017438 <CDC_Init_FS+0x90>)
 80173f2:	715a      	strb	r2, [r3, #5]

  /* Get uart3 StopBits */
  CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_stop_bit = huart1.Init.StopBits;
 80173f4:	4b0f      	ldr	r3, [pc, #60]	; (8017434 <CDC_Init_FS+0x8c>)
 80173f6:	68db      	ldr	r3, [r3, #12]
 80173f8:	b2da      	uxtb	r2, r3
 80173fa:	4b0f      	ldr	r3, [pc, #60]	; (8017438 <CDC_Init_FS+0x90>)
 80173fc:	711a      	strb	r2, [r3, #4]

  /* Set device_class_cdc_acm with default parameters */
  ux_status = ux_device_class_cdc_acm_ioctl(cdc_acm,
 80173fe:	4a0e      	ldr	r2, [pc, #56]	; (8017438 <CDC_Init_FS+0x90>)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2101      	movs	r1, #1
 8017404:	0018      	movs	r0, r3
 8017406:	f7fe fa27 	bl	8015858 <_ux_device_class_cdc_acm_ioctl>
 801740a:	0003      	movs	r3, r0
 801740c:	60fb      	str	r3, [r7, #12]
                                            UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
                                            &CDC_VCP_LineCoding);
  /* Check Status */
  if (ux_status != UX_SUCCESS)
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d001      	beq.n	8017418 <CDC_Init_FS+0x70>
  {
    Error_Handler();
 8017414:	f7eb fabc 	bl	8002990 <Error_Handler>
  }

  /*-- 2- Put UART peripheral in IT reception process ------------------------*/

  /* Any data received will be stored in "UserTxBufferFS" buffer  */
  if (HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8017418:	4908      	ldr	r1, [pc, #32]	; (801743c <CDC_Init_FS+0x94>)
 801741a:	4b06      	ldr	r3, [pc, #24]	; (8017434 <CDC_Init_FS+0x8c>)
 801741c:	2201      	movs	r2, #1
 801741e:	0018      	movs	r0, r3
 8017420:	f7f0 fa24 	bl	800786c <HAL_UART_Receive_IT>
 8017424:	1e03      	subs	r3, r0, #0
 8017426:	d001      	beq.n	801742c <CDC_Init_FS+0x84>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8017428:	f7eb fab2 	bl	8002990 <Error_Handler>
  }

  /* USER CODE END 3 */
}
 801742c:	46c0      	nop			; (mov r8, r8)
 801742e:	46bd      	mov	sp, r7
 8017430:	b004      	add	sp, #16
 8017432:	bd80      	pop	{r7, pc}
 8017434:	20018710 	.word	0x20018710
 8017438:	200000a0 	.word	0x200000a0
 801743c:	2001b640 	.word	0x2001b640

08017440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
void CDC_DeInit_FS(void *cdc_acm)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  HAL_UART_DeInit(&huart1);
 8017448:	4b03      	ldr	r3, [pc, #12]	; (8017458 <CDC_DeInit_FS+0x18>)
 801744a:	0018      	movs	r0, r3
 801744c:	f7f0 f9ce 	bl	80077ec <HAL_UART_DeInit>
  /* USER CODE END 4 */
}
 8017450:	46c0      	nop			; (mov r8, r8)
 8017452:	46bd      	mov	sp, r7
 8017454:	b002      	add	sp, #8
 8017456:	bd80      	pop	{r7, pc}
 8017458:	20018710 	.word	0x20018710

0801745c <ux_app_parameters_change>:
  * @brief  Manage the CDC class requests
  * @param  cdc Instance
  * @retval none
  */
VOID ux_app_parameters_change(VOID *cdc_acm)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  UX_SLAVE_TRANSFER *transfer_request;
  UX_SLAVE_DEVICE   *device;
  ULONG             request;
  UINT ux_status = UX_SUCCESS;
 8017464:	2300      	movs	r3, #0
 8017466:	617b      	str	r3, [r7, #20]

  /* Get the pointer to the device.  */
  device = &_ux_system_slave -> ux_system_slave_device;
 8017468:	4b22      	ldr	r3, [pc, #136]	; (80174f4 <ux_app_parameters_change+0x98>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	3320      	adds	r3, #32
 801746e:	613b      	str	r3, [r7, #16]

  /* Get the pointer to the transfer request associated with the control endpoint. */
  transfer_request = &device -> ux_slave_device_control_endpoint.
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	336c      	adds	r3, #108	; 0x6c
 8017474:	60fb      	str	r3, [r7, #12]
                     ux_slave_endpoint_transfer_request;

  /* Extract all necessary fields of the request. */
  request = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2255      	movs	r2, #85	; 0x55
 801747a:	5c9b      	ldrb	r3, [r3, r2]
 801747c:	60bb      	str	r3, [r7, #8]

  /* Here we proceed only the standard request we know of at the device level.  */
  switch (request)
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	2b20      	cmp	r3, #32
 8017482:	d003      	beq.n	801748c <ux_app_parameters_change+0x30>
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	2b21      	cmp	r3, #33	; 0x21
 8017488:	d021      	beq.n	80174ce <ux_app_parameters_change+0x72>
    }

    /* Set the the control line state */
    case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE :
    default :
      break;
 801748a:	e02e      	b.n	80174ea <ux_app_parameters_change+0x8e>
      ux_status = ux_device_class_cdc_acm_ioctl(cdc_acm,
 801748c:	4a1a      	ldr	r2, [pc, #104]	; (80174f8 <ux_app_parameters_change+0x9c>)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	2102      	movs	r1, #2
 8017492:	0018      	movs	r0, r3
 8017494:	f7fe f9e0 	bl	8015858 <_ux_device_class_cdc_acm_ioctl>
 8017498:	0003      	movs	r3, r0
 801749a:	617b      	str	r3, [r7, #20]
      if (ux_status != UX_SUCCESS)
 801749c:	697b      	ldr	r3, [r7, #20]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d001      	beq.n	80174a6 <ux_app_parameters_change+0x4a>
        Error_Handler();
 80174a2:	f7eb fa75 	bl	8002990 <Error_Handler>
      if (CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate < MIN_BAUDRATE)
 80174a6:	4b14      	ldr	r3, [pc, #80]	; (80174f8 <ux_app_parameters_change+0x9c>)
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	2396      	movs	r3, #150	; 0x96
 80174ac:	019b      	lsls	r3, r3, #6
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d208      	bcs.n	80174c4 <ux_app_parameters_change+0x68>
        CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = MIN_BAUDRATE;
 80174b2:	4b11      	ldr	r3, [pc, #68]	; (80174f8 <ux_app_parameters_change+0x9c>)
 80174b4:	2296      	movs	r2, #150	; 0x96
 80174b6:	0192      	lsls	r2, r2, #6
 80174b8:	601a      	str	r2, [r3, #0]
        USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 80174ba:	4b0f      	ldr	r3, [pc, #60]	; (80174f8 <ux_app_parameters_change+0x9c>)
 80174bc:	0018      	movs	r0, r3
 80174be:	f000 f937 	bl	8017730 <USBD_CDC_VCP_Config>
      break;
 80174c2:	e012      	b.n	80174ea <ux_app_parameters_change+0x8e>
        USBD_CDC_VCP_Config(&CDC_VCP_LineCoding);
 80174c4:	4b0c      	ldr	r3, [pc, #48]	; (80174f8 <ux_app_parameters_change+0x9c>)
 80174c6:	0018      	movs	r0, r3
 80174c8:	f000 f932 	bl	8017730 <USBD_CDC_VCP_Config>
      break;
 80174cc:	e00d      	b.n	80174ea <ux_app_parameters_change+0x8e>
      ux_status = ux_device_class_cdc_acm_ioctl(cdc_acm,
 80174ce:	4a0a      	ldr	r2, [pc, #40]	; (80174f8 <ux_app_parameters_change+0x9c>)
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2101      	movs	r1, #1
 80174d4:	0018      	movs	r0, r3
 80174d6:	f7fe f9bf 	bl	8015858 <_ux_device_class_cdc_acm_ioctl>
 80174da:	0003      	movs	r3, r0
 80174dc:	617b      	str	r3, [r7, #20]
      if (ux_status != UX_SUCCESS)
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d001      	beq.n	80174e8 <ux_app_parameters_change+0x8c>
        Error_Handler();
 80174e4:	f7eb fa54 	bl	8002990 <Error_Handler>
      break;
 80174e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80174ea:	46c0      	nop			; (mov r8, r8)
 80174ec:	46bd      	mov	sp, r7
 80174ee:	b006      	add	sp, #24
 80174f0:	bd80      	pop	{r7, pc}
 80174f2:	46c0      	nop			; (mov r8, r8)
 80174f4:	20019298 	.word	0x20019298
 80174f8:	200000a0 	.word	0x200000a0

080174fc <usbx_cdc_acm_read_thread_entry>:
  * @brief  Function implementing usbx_cdc_acm_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_cdc_acm_read_thread_entry(ULONG arg)
{
 80174fc:	b590      	push	{r4, r7, lr}
 80174fe:	b08b      	sub	sp, #44	; 0x2c
 8017500:	af02      	add	r7, sp, #8
 8017502:	6078      	str	r0, [r7, #4]
  UX_SLAVE_DEVICE *device;
  UX_SLAVE_INTERFACE *data_interface;
  UX_SLAVE_CLASS_CDC_ACM *cdc_acm;
  ULONG actual_length;
  ULONG ux_status = UX_SUCCESS;
 8017504:	2300      	movs	r3, #0
 8017506:	61fb      	str	r3, [r7, #28]
  ULONG senddataflag = 0;
 8017508:	2300      	movs	r3, #0
 801750a:	60bb      	str	r3, [r7, #8]

  /* Get device */
  device = &_ux_system_slave->ux_system_slave_device;
 801750c:	4b25      	ldr	r3, [pc, #148]	; (80175a4 <usbx_cdc_acm_read_thread_entry+0xa8>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	3320      	adds	r3, #32
 8017512:	61bb      	str	r3, [r7, #24]

  while (1)
  {
    /* Check if device is configured */
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8017514:	69bb      	ldr	r3, [r7, #24]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	2b03      	cmp	r3, #3
 801751a:	d13e      	bne.n	801759a <usbx_cdc_acm_read_thread_entry+0x9e>
    {
      /* Get Data interface */
      data_interface = device->ux_slave_device_first_interface->ux_slave_interface_next_interface;
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	22f0      	movs	r2, #240	; 0xf0
 8017520:	589b      	ldr	r3, [r3, r2]
 8017522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017524:	617b      	str	r3, [r7, #20]

      /* Compares two memory blocks ux_slave_class_name and _ux_system_slave_class_cdc_acm_name */
      ux_status = ux_utility_memory_compare(data_interface->ux_slave_interface_class->ux_slave_class_name,
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	685b      	ldr	r3, [r3, #4]
 801752a:	001c      	movs	r4, r3
 801752c:	4b1e      	ldr	r3, [pc, #120]	; (80175a8 <usbx_cdc_acm_read_thread_entry+0xac>)
 801752e:	0018      	movs	r0, r3
 8017530:	f7fd ffb5 	bl	801549e <_ux_utility_string_length_get>
 8017534:	0002      	movs	r2, r0
 8017536:	4b1c      	ldr	r3, [pc, #112]	; (80175a8 <usbx_cdc_acm_read_thread_entry+0xac>)
 8017538:	0019      	movs	r1, r3
 801753a:	0020      	movs	r0, r4
 801753c:	f7fd fd6a 	bl	8015014 <_ux_utility_memory_compare>
 8017540:	0003      	movs	r3, r0
 8017542:	61fb      	str	r3, [r7, #28]
                                            _ux_system_slave_class_cdc_acm_name,
                                            ux_utility_string_length_get(_ux_system_slave_class_cdc_acm_name));

      /* Check Compares success */
      if (ux_status == UX_SUCCESS)
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d1e4      	bne.n	8017514 <usbx_cdc_acm_read_thread_entry+0x18>
      {
        cdc_acm =  data_interface->ux_slave_interface_class_instance;
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	689b      	ldr	r3, [r3, #8]
 801754e:	613b      	str	r3, [r7, #16]
        /* Set transmission_status to UX_FALSE for the first time */
        cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
#endif /* UX_DEVICE_CLASS_CDC_ACM_TRANSMISSION_DISABLE */

        /* Read the received data in blocking mode */
        ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBufferFS, 64,
 8017550:	230c      	movs	r3, #12
 8017552:	18fb      	adds	r3, r7, r3
 8017554:	4915      	ldr	r1, [pc, #84]	; (80175ac <usbx_cdc_acm_read_thread_entry+0xb0>)
 8017556:	6938      	ldr	r0, [r7, #16]
 8017558:	2240      	movs	r2, #64	; 0x40
 801755a:	f7fe fa39 	bl	80159d0 <_ux_device_class_cdc_acm_read>
                                     &actual_length);
        if (actual_length != 0)
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d0d7      	beq.n	8017514 <usbx_cdc_acm_read_thread_entry+0x18>
        {
          /* Send the data via UART */
          if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UserRxBufferFS,
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	b29a      	uxth	r2, r3
 8017568:	4910      	ldr	r1, [pc, #64]	; (80175ac <usbx_cdc_acm_read_thread_entry+0xb0>)
 801756a:	4b11      	ldr	r3, [pc, #68]	; (80175b0 <usbx_cdc_acm_read_thread_entry+0xb4>)
 801756c:	0018      	movs	r0, r3
 801756e:	f7f0 f9e3 	bl	8007938 <HAL_UART_Transmit_DMA>
 8017572:	1e03      	subs	r3, r0, #0
 8017574:	d001      	beq.n	801757a <usbx_cdc_acm_read_thread_entry+0x7e>
            //    		  	  	  	  	  	actual_length) != HAL_OK)
          //if (HAL_UART_Transmit(&huart1, (uint8_t *)UserRxBufferFS,
            //                        actual_length, 1000) != HAL_OK)
          {
            /* Transfer error in reception process */
            Error_Handler();
 8017576:	f7eb fa0b 	bl	8002990 <Error_Handler>
          }

          /* Wait until the requested flag TX_NEW_TRANSMITTED_DATA is received */
          if (tx_event_flags_get(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR_CLEAR,
 801757a:	2308      	movs	r3, #8
 801757c:	18fa      	adds	r2, r7, r3
 801757e:	480d      	ldr	r0, [pc, #52]	; (80175b4 <usbx_cdc_acm_read_thread_entry+0xb8>)
 8017580:	2301      	movs	r3, #1
 8017582:	425b      	negs	r3, r3
 8017584:	9300      	str	r3, [sp, #0]
 8017586:	0013      	movs	r3, r2
 8017588:	2201      	movs	r2, #1
 801758a:	2102      	movs	r1, #2
 801758c:	f7fa fd9a 	bl	80120c4 <_txe_event_flags_get>
 8017590:	1e03      	subs	r3, r0, #0
 8017592:	d0bf      	beq.n	8017514 <usbx_cdc_acm_read_thread_entry+0x18>
                                 &senddataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
          {
            Error_Handler();
 8017594:	f7eb f9fc 	bl	8002990 <Error_Handler>
 8017598:	e7bc      	b.n	8017514 <usbx_cdc_acm_read_thread_entry+0x18>
        }
      }
    }
    else
    {
      tx_thread_sleep(1);
 801759a:	2001      	movs	r0, #1
 801759c:	f7f9 fd68 	bl	8011070 <_tx_thread_sleep>
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80175a0:	e7b8      	b.n	8017514 <usbx_cdc_acm_read_thread_entry+0x18>
 80175a2:	46c0      	nop			; (mov r8, r8)
 80175a4:	20019298 	.word	0x20019298
 80175a8:	20000014 	.word	0x20000014
 80175ac:	20019640 	.word	0x20019640
 80175b0:	20018710 	.word	0x20018710
 80175b4:	200195d4 	.word	0x200195d4

080175b8 <usbx_cdc_acm_write_thread_entry>:
  * @brief  Function implementing usbx_cdc_acm_write_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_cdc_acm_write_thread_entry(ULONG arg)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b08c      	sub	sp, #48	; 0x30
 80175bc:	af02      	add	r7, sp, #8
 80175be:	6078      	str	r0, [r7, #4]
  UX_SLAVE_DEVICE    *device;
  UX_SLAVE_INTERFACE *data_interface;
  UX_SLAVE_CLASS_CDC_ACM *cdc_acm;
  ULONG actual_length;
  ULONG receivedataflag = 0;
 80175c0:	2300      	movs	r3, #0
 80175c2:	60bb      	str	r3, [r7, #8]
  ULONG buffptr;
  ULONG buffsize;
  UINT ux_status = UX_SUCCESS;
 80175c4:	2300      	movs	r3, #0
 80175c6:	623b      	str	r3, [r7, #32]

  while (1)
  {
    /* Wait until the requested flag RX_NEW_RECEIVED_DATA is received */
    if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 80175c8:	2308      	movs	r3, #8
 80175ca:	18fa      	adds	r2, r7, r3
 80175cc:	4829      	ldr	r0, [pc, #164]	; (8017674 <usbx_cdc_acm_write_thread_entry+0xbc>)
 80175ce:	2301      	movs	r3, #1
 80175d0:	425b      	negs	r3, r3
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	0013      	movs	r3, r2
 80175d6:	2201      	movs	r2, #1
 80175d8:	2101      	movs	r1, #1
 80175da:	f7fa fd73 	bl	80120c4 <_txe_event_flags_get>
 80175de:	1e03      	subs	r3, r0, #0
 80175e0:	d001      	beq.n	80175e6 <usbx_cdc_acm_write_thread_entry+0x2e>
                           &receivedataflag, TX_WAIT_FOREVER) != TX_SUCCESS)
    {
      Error_Handler();
 80175e2:	f7eb f9d5 	bl	8002990 <Error_Handler>
    }

    /* Get the device */
    device = &_ux_system_slave->ux_system_slave_device;
 80175e6:	4b24      	ldr	r3, [pc, #144]	; (8017678 <usbx_cdc_acm_write_thread_entry+0xc0>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	3320      	adds	r3, #32
 80175ec:	61fb      	str	r3, [r7, #28]

    /* Get the data interface */
    data_interface = device->ux_slave_device_first_interface->ux_slave_interface_next_interface;
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	22f0      	movs	r2, #240	; 0xf0
 80175f2:	589b      	ldr	r3, [r3, r2]
 80175f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175f6:	61bb      	str	r3, [r7, #24]

    /* Get the cdc Instance */
    cdc_acm = data_interface->ux_slave_interface_class_instance;
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	617b      	str	r3, [r7, #20]
#ifndef UX_DEVICE_CLASS_CDC_ACM_TRANSMISSION_DISABLE
    cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
#endif

    /* Check if there is a new data to send */
    if (UserTxBufPtrOut != UserTxBufPtrIn)
 80175fe:	4b1f      	ldr	r3, [pc, #124]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	4b1f      	ldr	r3, [pc, #124]	; (8017680 <usbx_cdc_acm_write_thread_entry+0xc8>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	429a      	cmp	r2, r3
 8017608:	d0de      	beq.n	80175c8 <usbx_cdc_acm_write_thread_entry+0x10>
    {
      /* Check buffer overflow and Rollback */
      if (UserTxBufPtrOut > UserTxBufPtrIn)
 801760a:	4b1c      	ldr	r3, [pc, #112]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	4b1c      	ldr	r3, [pc, #112]	; (8017680 <usbx_cdc_acm_write_thread_entry+0xc8>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	429a      	cmp	r2, r3
 8017614:	d906      	bls.n	8017624 <usbx_cdc_acm_write_thread_entry+0x6c>
      {
        buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8017616:	4b19      	ldr	r3, [pc, #100]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	2280      	movs	r2, #128	; 0x80
 801761c:	0192      	lsls	r2, r2, #6
 801761e:	1ad3      	subs	r3, r2, r3
 8017620:	627b      	str	r3, [r7, #36]	; 0x24
 8017622:	e005      	b.n	8017630 <usbx_cdc_acm_write_thread_entry+0x78>
      }
      else
      {
        /* Calculate data size */
        buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8017624:	4b16      	ldr	r3, [pc, #88]	; (8017680 <usbx_cdc_acm_write_thread_entry+0xc8>)
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	4b14      	ldr	r3, [pc, #80]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	1ad3      	subs	r3, r2, r3
 801762e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      /* Copy UserTxBufPtrOut in buffptr */
      buffptr = UserTxBufPtrOut;
 8017630:	4b12      	ldr	r3, [pc, #72]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	613b      	str	r3, [r7, #16]

      /* Send data over the class cdc_acm_write */
      ux_status = ux_device_class_cdc_acm_write(cdc_acm,
                                                (UCHAR *)(&UserTxBufferFS[buffptr]),
 8017636:	693a      	ldr	r2, [r7, #16]
 8017638:	4b12      	ldr	r3, [pc, #72]	; (8017684 <usbx_cdc_acm_write_thread_entry+0xcc>)
 801763a:	18d1      	adds	r1, r2, r3
      ux_status = ux_device_class_cdc_acm_write(cdc_acm,
 801763c:	230c      	movs	r3, #12
 801763e:	18fb      	adds	r3, r7, r3
 8017640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017642:	6978      	ldr	r0, [r7, #20]
 8017644:	f7fe fa78 	bl	8015b38 <_ux_device_class_cdc_acm_write>
 8017648:	0003      	movs	r3, r0
 801764a:	623b      	str	r3, [r7, #32]
                                                buffsize, &actual_length);

      /* Check if dataset is correctly transmitted */
      if (ux_status == UX_SUCCESS)
 801764c:	6a3b      	ldr	r3, [r7, #32]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1ba      	bne.n	80175c8 <usbx_cdc_acm_write_thread_entry+0x10>
      {
        /* Increment the UserTxBufPtrOut pointer */
        UserTxBufPtrOut += buffsize;
 8017652:	4b0a      	ldr	r3, [pc, #40]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017658:	18d2      	adds	r2, r2, r3
 801765a:	4b08      	ldr	r3, [pc, #32]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 801765c:	601a      	str	r2, [r3, #0]

        /* Rollback UserTxBufPtrOut if it equal to APP_TX_DATA_SIZE */
        if (UserTxBufPtrOut == APP_TX_DATA_SIZE)
 801765e:	4b07      	ldr	r3, [pc, #28]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	2380      	movs	r3, #128	; 0x80
 8017664:	019b      	lsls	r3, r3, #6
 8017666:	429a      	cmp	r2, r3
 8017668:	d1ae      	bne.n	80175c8 <usbx_cdc_acm_write_thread_entry+0x10>
        {
          UserTxBufPtrOut = 0;
 801766a:	4b04      	ldr	r3, [pc, #16]	; (801767c <usbx_cdc_acm_write_thread_entry+0xc4>)
 801766c:	2200      	movs	r2, #0
 801766e:	601a      	str	r2, [r3, #0]
    if (tx_event_flags_get(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR_CLEAR,
 8017670:	e7aa      	b.n	80175c8 <usbx_cdc_acm_write_thread_entry+0x10>
 8017672:	46c0      	nop			; (mov r8, r8)
 8017674:	200195d4 	.word	0x200195d4
 8017678:	20019298 	.word	0x20019298
 801767c:	2001d644 	.word	0x2001d644
 8017680:	2001d640 	.word	0x2001d640
 8017684:	2001b640 	.word	0x2001b640

08017688 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
  /* Set TX_NEW_TRANSMITTED_DATA flag */
  if (tx_event_flags_set(&EventFlag, TX_NEW_TRANSMITTED_DATA, TX_OR) != TX_SUCCESS)
 8017690:	4b06      	ldr	r3, [pc, #24]	; (80176ac <HAL_UART_TxCpltCallback+0x24>)
 8017692:	2200      	movs	r2, #0
 8017694:	2102      	movs	r1, #2
 8017696:	0018      	movs	r0, r3
 8017698:	f7fa fd6c 	bl	8012174 <_txe_event_flags_set>
 801769c:	1e03      	subs	r3, r0, #0
 801769e:	d001      	beq.n	80176a4 <HAL_UART_TxCpltCallback+0x1c>
  {
    Error_Handler();
 80176a0:	f7eb f976 	bl	8002990 <Error_Handler>
  }
}
 80176a4:	46c0      	nop			; (mov r8, r8)
 80176a6:	46bd      	mov	sp, r7
 80176a8:	b002      	add	sp, #8
 80176aa:	bd80      	pop	{r7, pc}
 80176ac:	200195d4 	.word	0x200195d4

080176b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  /* Set RX_NEW_RECEIVED_DATA flag */
  if (tx_event_flags_set(&EventFlag, RX_NEW_RECEIVED_DATA, TX_OR) != TX_SUCCESS)
 80176b8:	4b14      	ldr	r3, [pc, #80]	; (801770c <HAL_UART_RxCpltCallback+0x5c>)
 80176ba:	2200      	movs	r2, #0
 80176bc:	2101      	movs	r1, #1
 80176be:	0018      	movs	r0, r3
 80176c0:	f7fa fd58 	bl	8012174 <_txe_event_flags_set>
 80176c4:	1e03      	subs	r3, r0, #0
 80176c6:	d001      	beq.n	80176cc <HAL_UART_RxCpltCallback+0x1c>
  {
    Error_Handler();
 80176c8:	f7eb f962 	bl	8002990 <Error_Handler>
  }

  /* Increment the UserTxBufPtrIn pointer */
  UserTxBufPtrIn++;
 80176cc:	4b10      	ldr	r3, [pc, #64]	; (8017710 <HAL_UART_RxCpltCallback+0x60>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	1c5a      	adds	r2, r3, #1
 80176d2:	4b0f      	ldr	r3, [pc, #60]	; (8017710 <HAL_UART_RxCpltCallback+0x60>)
 80176d4:	601a      	str	r2, [r3, #0]

  /* Rollback the UserTxBufPtrIn if it equal to APP_TX_DATA_SIZE */
  if (UserTxBufPtrIn == APP_TX_DATA_SIZE)
 80176d6:	4b0e      	ldr	r3, [pc, #56]	; (8017710 <HAL_UART_RxCpltCallback+0x60>)
 80176d8:	681a      	ldr	r2, [r3, #0]
 80176da:	2380      	movs	r3, #128	; 0x80
 80176dc:	019b      	lsls	r3, r3, #6
 80176de:	429a      	cmp	r2, r3
 80176e0:	d102      	bne.n	80176e8 <HAL_UART_RxCpltCallback+0x38>
  {
    UserTxBufPtrIn = 0;
 80176e2:	4b0b      	ldr	r3, [pc, #44]	; (8017710 <HAL_UART_RxCpltCallback+0x60>)
 80176e4:	2200      	movs	r2, #0
 80176e6:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  if (HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS + UserTxBufPtrIn, 1) != HAL_OK)
 80176e8:	4b09      	ldr	r3, [pc, #36]	; (8017710 <HAL_UART_RxCpltCallback+0x60>)
 80176ea:	681a      	ldr	r2, [r3, #0]
 80176ec:	4b09      	ldr	r3, [pc, #36]	; (8017714 <HAL_UART_RxCpltCallback+0x64>)
 80176ee:	18d1      	adds	r1, r2, r3
 80176f0:	4b09      	ldr	r3, [pc, #36]	; (8017718 <HAL_UART_RxCpltCallback+0x68>)
 80176f2:	2201      	movs	r2, #1
 80176f4:	0018      	movs	r0, r3
 80176f6:	f7f0 f8b9 	bl	800786c <HAL_UART_Receive_IT>
 80176fa:	1e03      	subs	r3, r0, #0
 80176fc:	d001      	beq.n	8017702 <HAL_UART_RxCpltCallback+0x52>
  {
    /* Transfer error in reception process */
    Error_Handler();
 80176fe:	f7eb f947 	bl	8002990 <Error_Handler>
  }

}
 8017702:	46c0      	nop			; (mov r8, r8)
 8017704:	46bd      	mov	sp, r7
 8017706:	b002      	add	sp, #8
 8017708:	bd80      	pop	{r7, pc}
 801770a:	46c0      	nop			; (mov r8, r8)
 801770c:	200195d4 	.word	0x200195d4
 8017710:	2001d640 	.word	0x2001d640
 8017714:	2001b640 	.word	0x2001b640
 8017718:	20018710 	.word	0x20018710

0801771c <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 8017724:	f7eb f934 	bl	8002990 <Error_Handler>
}
 8017728:	46c0      	nop			; (mov r8, r8)
 801772a:	46bd      	mov	sp, r7
 801772c:	b002      	add	sp, #8
 801772e:	bd80      	pop	{r7, pc}

08017730 <USBD_CDC_VCP_Config>:
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void USBD_CDC_VCP_Config(UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER
                                *CDC_VCP_LineCoding)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  /* Deinitialization uart3 */
  if (HAL_UART_DeInit(&huart1) != HAL_OK)
 8017738:	4b3a      	ldr	r3, [pc, #232]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 801773a:	0018      	movs	r0, r3
 801773c:	f7f0 f856 	bl	80077ec <HAL_UART_DeInit>
 8017740:	1e03      	subs	r3, r0, #0
 8017742:	d001      	beq.n	8017748 <USBD_CDC_VCP_Config+0x18>
  {
    /* Deinitialization Error */
    Error_Handler();
 8017744:	f7eb f924 	bl	8002990 <Error_Handler>
  }

  /* set the Stop bit */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_stop_bit)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	791b      	ldrb	r3, [r3, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d002      	beq.n	8017756 <USBD_CDC_VCP_Config+0x26>
 8017750:	2b02      	cmp	r3, #2
 8017752:	d004      	beq.n	801775e <USBD_CDC_VCP_Config+0x2e>
 8017754:	e008      	b.n	8017768 <USBD_CDC_VCP_Config+0x38>
  {
    case 0:
    {
      huart1.Init.StopBits = UART_STOPBITS_1;
 8017756:	4b33      	ldr	r3, [pc, #204]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 8017758:	2200      	movs	r2, #0
 801775a:	60da      	str	r2, [r3, #12]
      break;
 801775c:	e008      	b.n	8017770 <USBD_CDC_VCP_Config+0x40>
    }
    case 2:
    {
      huart1.Init.StopBits = UART_STOPBITS_2;
 801775e:	4b31      	ldr	r3, [pc, #196]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 8017760:	2280      	movs	r2, #128	; 0x80
 8017762:	0192      	lsls	r2, r2, #6
 8017764:	60da      	str	r2, [r3, #12]
      break;
 8017766:	e003      	b.n	8017770 <USBD_CDC_VCP_Config+0x40>
    }
    default :
    {
      huart1.Init.StopBits = UART_STOPBITS_1;
 8017768:	4b2e      	ldr	r3, [pc, #184]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 801776a:	2200      	movs	r2, #0
 801776c:	60da      	str	r2, [r3, #12]
      break;
 801776e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* set the parity bit */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_parity)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	795b      	ldrb	r3, [r3, #5]
 8017774:	2b02      	cmp	r3, #2
 8017776:	d00e      	beq.n	8017796 <USBD_CDC_VCP_Config+0x66>
 8017778:	dc12      	bgt.n	80177a0 <USBD_CDC_VCP_Config+0x70>
 801777a:	2b00      	cmp	r3, #0
 801777c:	d002      	beq.n	8017784 <USBD_CDC_VCP_Config+0x54>
 801777e:	2b01      	cmp	r3, #1
 8017780:	d004      	beq.n	801778c <USBD_CDC_VCP_Config+0x5c>
 8017782:	e00d      	b.n	80177a0 <USBD_CDC_VCP_Config+0x70>
  {
    case 0:
    {
      huart1.Init.Parity = UART_PARITY_NONE;
 8017784:	4b27      	ldr	r3, [pc, #156]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 8017786:	2200      	movs	r2, #0
 8017788:	611a      	str	r2, [r3, #16]
      break;
 801778a:	e00d      	b.n	80177a8 <USBD_CDC_VCP_Config+0x78>
    }
    case 1:
    {
      huart1.Init.Parity = UART_PARITY_ODD;
 801778c:	4b25      	ldr	r3, [pc, #148]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 801778e:	22c0      	movs	r2, #192	; 0xc0
 8017790:	00d2      	lsls	r2, r2, #3
 8017792:	611a      	str	r2, [r3, #16]
      break;
 8017794:	e008      	b.n	80177a8 <USBD_CDC_VCP_Config+0x78>
    }
    case 2:
    {
      huart1.Init.Parity = UART_PARITY_EVEN;
 8017796:	4b23      	ldr	r3, [pc, #140]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 8017798:	2280      	movs	r2, #128	; 0x80
 801779a:	00d2      	lsls	r2, r2, #3
 801779c:	611a      	str	r2, [r3, #16]
      break;
 801779e:	e003      	b.n	80177a8 <USBD_CDC_VCP_Config+0x78>
    }
    default :
    {
      huart1.Init.Parity = UART_PARITY_NONE;
 80177a0:	4b20      	ldr	r3, [pc, #128]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177a2:	2200      	movs	r2, #0
 80177a4:	611a      	str	r2, [r3, #16]
      break;
 80177a6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Set the data type : only 8bits and 9bits is supported */
  switch (CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_data_bit)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	799b      	ldrb	r3, [r3, #6]
 80177ac:	2b07      	cmp	r3, #7
 80177ae:	d002      	beq.n	80177b6 <USBD_CDC_VCP_Config+0x86>
 80177b0:	2b08      	cmp	r3, #8
 80177b2:	d004      	beq.n	80177be <USBD_CDC_VCP_Config+0x8e>
 80177b4:	e010      	b.n	80177d8 <USBD_CDC_VCP_Config+0xa8>
  {
    case 0x07:
    {
      /* With this configuration a parity (Even or Odd) must be set */
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80177b6:	4b1b      	ldr	r3, [pc, #108]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177b8:	2200      	movs	r2, #0
 80177ba:	609a      	str	r2, [r3, #8]
      break;
 80177bc:	e010      	b.n	80177e0 <USBD_CDC_VCP_Config+0xb0>
    }
    case 0x08:
    {
      if (huart1.Init.Parity == UART_PARITY_NONE)
 80177be:	4b19      	ldr	r3, [pc, #100]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177c0:	691b      	ldr	r3, [r3, #16]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d103      	bne.n	80177ce <USBD_CDC_VCP_Config+0x9e>
      {
        huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80177c6:	4b17      	ldr	r3, [pc, #92]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177c8:	2200      	movs	r2, #0
 80177ca:	609a      	str	r2, [r3, #8]
      else
      {
        huart1.Init.WordLength = UART_WORDLENGTH_9B;
      }

      break;
 80177cc:	e008      	b.n	80177e0 <USBD_CDC_VCP_Config+0xb0>
        huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80177ce:	4b15      	ldr	r3, [pc, #84]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177d0:	2280      	movs	r2, #128	; 0x80
 80177d2:	0152      	lsls	r2, r2, #5
 80177d4:	609a      	str	r2, [r3, #8]
      break;
 80177d6:	e003      	b.n	80177e0 <USBD_CDC_VCP_Config+0xb0>
    }
    default :
    {
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80177d8:	4b12      	ldr	r3, [pc, #72]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177da:	2200      	movs	r2, #0
 80177dc:	609a      	str	r2, [r3, #8]
      break;
 80177de:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Get the uart baudrate from vcp */
  huart1.Init.BaudRate = CDC_VCP_LineCoding->ux_slave_class_cdc_acm_parameter_baudrate;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681a      	ldr	r2, [r3, #0]
 80177e4:	4b0f      	ldr	r3, [pc, #60]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177e6:	605a      	str	r2, [r3, #4]

  /* Set the Hw flow control to none */
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80177e8:	4b0e      	ldr	r3, [pc, #56]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	619a      	str	r2, [r3, #24]

  /* Set the uart mode */
  huart1.Init.Mode = UART_MODE_TX_RX;
 80177ee:	4b0d      	ldr	r3, [pc, #52]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177f0:	220c      	movs	r2, #12
 80177f2:	615a      	str	r2, [r3, #20]

  /* the the uart sampling */
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80177f4:	4b0b      	ldr	r3, [pc, #44]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177f6:	2200      	movs	r2, #0
 80177f8:	61da      	str	r2, [r3, #28]

  /* Initialization huart1 */
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80177fa:	4b0a      	ldr	r3, [pc, #40]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 80177fc:	0018      	movs	r0, r3
 80177fe:	f7ef ff9f 	bl	8007740 <HAL_UART_Init>
 8017802:	1e03      	subs	r3, r0, #0
 8017804:	d001      	beq.n	801780a <USBD_CDC_VCP_Config+0xda>
  {
    /* Initialization Error */
    Error_Handler();
 8017806:	f7eb f8c3 	bl	8002990 <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 801780a:	4b07      	ldr	r3, [pc, #28]	; (8017828 <USBD_CDC_VCP_Config+0xf8>)
 801780c:	681a      	ldr	r2, [r3, #0]
 801780e:	4b07      	ldr	r3, [pc, #28]	; (801782c <USBD_CDC_VCP_Config+0xfc>)
 8017810:	18d1      	adds	r1, r2, r3
 8017812:	4b04      	ldr	r3, [pc, #16]	; (8017824 <USBD_CDC_VCP_Config+0xf4>)
 8017814:	2201      	movs	r2, #1
 8017816:	0018      	movs	r0, r3
 8017818:	f7f0 f828 	bl	800786c <HAL_UART_Receive_IT>
}
 801781c:	46c0      	nop			; (mov r8, r8)
 801781e:	46bd      	mov	sp, r7
 8017820:	b002      	add	sp, #8
 8017822:	bd80      	pop	{r7, pc}
 8017824:	20018710 	.word	0x20018710
 8017828:	2001d640 	.word	0x2001d640
 801782c:	2001b640 	.word	0x2001b640

08017830 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	0002      	movs	r2, r0
 8017838:	6039      	str	r1, [r7, #0]
 801783a:	1dfb      	adds	r3, r7, #7
 801783c:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 801783e:	2300      	movs	r3, #0
 8017840:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8017842:	1dfb      	adds	r3, r7, #7
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d116      	bne.n	8017878 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801784a:	4b19      	ldr	r3, [pc, #100]	; (80178b0 <USBD_Get_Device_Framework_Speed+0x80>)
 801784c:	6819      	ldr	r1, [r3, #0]
 801784e:	1dfb      	adds	r3, r7, #7
 8017850:	781b      	ldrb	r3, [r3, #0]
 8017852:	4a18      	ldr	r2, [pc, #96]	; (80178b4 <USBD_Get_Device_Framework_Speed+0x84>)
 8017854:	4818      	ldr	r0, [pc, #96]	; (80178b8 <USBD_Get_Device_Framework_Speed+0x88>)
 8017856:	f000 f959 	bl	8017b0c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801785a:	4a17      	ldr	r2, [pc, #92]	; (80178b8 <USBD_Get_Device_Framework_Speed+0x88>)
 801785c:	238a      	movs	r3, #138	; 0x8a
 801785e:	005b      	lsls	r3, r3, #1
 8017860:	58d2      	ldr	r2, [r2, r3]
 8017862:	4915      	ldr	r1, [pc, #84]	; (80178b8 <USBD_Get_Device_Framework_Speed+0x88>)
 8017864:	238c      	movs	r3, #140	; 0x8c
 8017866:	005b      	lsls	r3, r3, #1
 8017868:	58cb      	ldr	r3, [r1, r3]
 801786a:	18d2      	adds	r2, r2, r3
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8017870:	4b0f      	ldr	r3, [pc, #60]	; (80178b0 <USBD_Get_Device_Framework_Speed+0x80>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	60fb      	str	r3, [r7, #12]
 8017876:	e015      	b.n	80178a4 <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8017878:	4b10      	ldr	r3, [pc, #64]	; (80178bc <USBD_Get_Device_Framework_Speed+0x8c>)
 801787a:	6819      	ldr	r1, [r3, #0]
 801787c:	1dfb      	adds	r3, r7, #7
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	4a0c      	ldr	r2, [pc, #48]	; (80178b4 <USBD_Get_Device_Framework_Speed+0x84>)
 8017882:	480f      	ldr	r0, [pc, #60]	; (80178c0 <USBD_Get_Device_Framework_Speed+0x90>)
 8017884:	f000 f942 	bl	8017b0c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8017888:	4a0d      	ldr	r2, [pc, #52]	; (80178c0 <USBD_Get_Device_Framework_Speed+0x90>)
 801788a:	238a      	movs	r3, #138	; 0x8a
 801788c:	005b      	lsls	r3, r3, #1
 801788e:	58d2      	ldr	r2, [r2, r3]
 8017890:	490b      	ldr	r1, [pc, #44]	; (80178c0 <USBD_Get_Device_Framework_Speed+0x90>)
 8017892:	238c      	movs	r3, #140	; 0x8c
 8017894:	005b      	lsls	r3, r3, #1
 8017896:	58cb      	ldr	r3, [r1, r3]
 8017898:	18d2      	adds	r2, r2, r3
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 801789e:	4b07      	ldr	r3, [pc, #28]	; (80178bc <USBD_Get_Device_Framework_Speed+0x8c>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 80178a4:	68fb      	ldr	r3, [r7, #12]
}
 80178a6:	0018      	movs	r0, r3
 80178a8:	46bd      	mov	sp, r7
 80178aa:	b004      	add	sp, #16
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	46c0      	nop			; (mov r8, r8)
 80178b0:	200000b4 	.word	0x200000b4
 80178b4:	200000a8 	.word	0x200000a8
 80178b8:	2001d648 	.word	0x2001d648
 80178bc:	200000b8 	.word	0x200000b8
 80178c0:	2001d764 	.word	0x2001d764

080178c4 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 80178c4:	b5b0      	push	{r4, r5, r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 80178cc:	250c      	movs	r5, #12
 80178ce:	197b      	adds	r3, r7, r5
 80178d0:	2200      	movs	r2, #0
 80178d2:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 80178d4:	240f      	movs	r4, #15
 80178d6:	193b      	adds	r3, r7, r4
 80178d8:	2200      	movs	r2, #0
 80178da:	701a      	strb	r2, [r3, #0]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80178dc:	193b      	adds	r3, r7, r4
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	193a      	adds	r2, r7, r4
 80178e2:	1c59      	adds	r1, r3, #1
 80178e4:	7011      	strb	r1, [r2, #0]
 80178e6:	001a      	movs	r2, r3
 80178e8:	4b43      	ldr	r3, [pc, #268]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80178ea:	2109      	movs	r1, #9
 80178ec:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80178ee:	193b      	adds	r3, r7, r4
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	193a      	adds	r2, r7, r4
 80178f4:	1c59      	adds	r1, r3, #1
 80178f6:	7011      	strb	r1, [r2, #0]
 80178f8:	001a      	movs	r2, r3
 80178fa:	4b3f      	ldr	r3, [pc, #252]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80178fc:	2104      	movs	r1, #4
 80178fe:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8017900:	193b      	adds	r3, r7, r4
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	193a      	adds	r2, r7, r4
 8017906:	1c59      	adds	r1, r3, #1
 8017908:	7011      	strb	r1, [r2, #0]
 801790a:	001a      	movs	r2, r3
 801790c:	4b3a      	ldr	r3, [pc, #232]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 801790e:	2101      	movs	r1, #1
 8017910:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8017912:	193b      	adds	r3, r7, r4
 8017914:	781a      	ldrb	r2, [r3, #0]
 8017916:	4b38      	ldr	r3, [pc, #224]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 8017918:	18d1      	adds	r1, r2, r3
 801791a:	197a      	adds	r2, r7, r5
 801791c:	4b37      	ldr	r3, [pc, #220]	; (80179fc <USBD_Get_String_Framework+0x138>)
 801791e:	0018      	movs	r0, r3
 8017920:	f000 f89a 	bl	8017a58 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8017924:	197b      	adds	r3, r7, r5
 8017926:	881b      	ldrh	r3, [r3, #0]
 8017928:	b2da      	uxtb	r2, r3
 801792a:	193b      	adds	r3, r7, r4
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	18d3      	adds	r3, r2, r3
 8017930:	b2da      	uxtb	r2, r3
 8017932:	193b      	adds	r3, r7, r4
 8017934:	3201      	adds	r2, #1
 8017936:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8017938:	193b      	adds	r3, r7, r4
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	193a      	adds	r2, r7, r4
 801793e:	1c59      	adds	r1, r3, #1
 8017940:	7011      	strb	r1, [r2, #0]
 8017942:	001a      	movs	r2, r3
 8017944:	4b2c      	ldr	r3, [pc, #176]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 8017946:	2109      	movs	r1, #9
 8017948:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801794a:	193b      	adds	r3, r7, r4
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	193a      	adds	r2, r7, r4
 8017950:	1c59      	adds	r1, r3, #1
 8017952:	7011      	strb	r1, [r2, #0]
 8017954:	001a      	movs	r2, r3
 8017956:	4b28      	ldr	r3, [pc, #160]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 8017958:	2104      	movs	r1, #4
 801795a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801795c:	193b      	adds	r3, r7, r4
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	193a      	adds	r2, r7, r4
 8017962:	1c59      	adds	r1, r3, #1
 8017964:	7011      	strb	r1, [r2, #0]
 8017966:	001a      	movs	r2, r3
 8017968:	4b23      	ldr	r3, [pc, #140]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 801796a:	2102      	movs	r1, #2
 801796c:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801796e:	193b      	adds	r3, r7, r4
 8017970:	781a      	ldrb	r2, [r3, #0]
 8017972:	4b21      	ldr	r3, [pc, #132]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 8017974:	18d1      	adds	r1, r2, r3
 8017976:	197a      	adds	r2, r7, r5
 8017978:	4b21      	ldr	r3, [pc, #132]	; (8017a00 <USBD_Get_String_Framework+0x13c>)
 801797a:	0018      	movs	r0, r3
 801797c:	f000 f86c 	bl	8017a58 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 8017980:	197b      	adds	r3, r7, r5
 8017982:	881b      	ldrh	r3, [r3, #0]
 8017984:	b2da      	uxtb	r2, r3
 8017986:	193b      	adds	r3, r7, r4
 8017988:	781b      	ldrb	r3, [r3, #0]
 801798a:	18d3      	adds	r3, r2, r3
 801798c:	b2da      	uxtb	r2, r3
 801798e:	193b      	adds	r3, r7, r4
 8017990:	3201      	adds	r2, #1
 8017992:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8017994:	193b      	adds	r3, r7, r4
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	0020      	movs	r0, r4
 801799a:	193a      	adds	r2, r7, r4
 801799c:	1c59      	adds	r1, r3, #1
 801799e:	7011      	strb	r1, [r2, #0]
 80179a0:	001a      	movs	r2, r3
 80179a2:	4b15      	ldr	r3, [pc, #84]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80179a4:	2109      	movs	r1, #9
 80179a6:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80179a8:	183b      	adds	r3, r7, r0
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	183a      	adds	r2, r7, r0
 80179ae:	1c59      	adds	r1, r3, #1
 80179b0:	7011      	strb	r1, [r2, #0]
 80179b2:	001a      	movs	r2, r3
 80179b4:	4b10      	ldr	r3, [pc, #64]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80179b6:	2104      	movs	r1, #4
 80179b8:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80179ba:	183b      	adds	r3, r7, r0
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	183a      	adds	r2, r7, r0
 80179c0:	1c59      	adds	r1, r3, #1
 80179c2:	7011      	strb	r1, [r2, #0]
 80179c4:	001a      	movs	r2, r3
 80179c6:	4b0c      	ldr	r3, [pc, #48]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80179c8:	2103      	movs	r1, #3
 80179ca:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80179cc:	183b      	adds	r3, r7, r0
 80179ce:	781a      	ldrb	r2, [r3, #0]
 80179d0:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80179d2:	18d1      	adds	r1, r2, r3
 80179d4:	197a      	adds	r2, r7, r5
 80179d6:	4b0b      	ldr	r3, [pc, #44]	; (8017a04 <USBD_Get_String_Framework+0x140>)
 80179d8:	0018      	movs	r0, r3
 80179da:	f000 f83d 	bl	8017a58 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 80179de:	4b06      	ldr	r3, [pc, #24]	; (80179f8 <USBD_Get_String_Framework+0x134>)
 80179e0:	0018      	movs	r0, r3
 80179e2:	f7ea fb31 	bl	8002048 <strlen>
 80179e6:	0002      	movs	r2, r0
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 80179ec:	4b02      	ldr	r3, [pc, #8]	; (80179f8 <USBD_Get_String_Framework+0x134>)
}
 80179ee:	0018      	movs	r0, r3
 80179f0:	46bd      	mov	sp, r7
 80179f2:	b004      	add	sp, #16
 80179f4:	bdb0      	pop	{r4, r5, r7, pc}
 80179f6:	46c0      	nop			; (mov r8, r8)
 80179f8:	2001da10 	.word	0x2001da10
 80179fc:	08018a34 	.word	0x08018a34
 8017a00:	08018a48 	.word	0x08018a48
 8017a04:	08018a5c 	.word	0x08018a5c

08017a08 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8017a10:	200f      	movs	r0, #15
 8017a12:	183b      	adds	r3, r7, r0
 8017a14:	2200      	movs	r2, #0
 8017a16:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8017a18:	183b      	adds	r3, r7, r0
 8017a1a:	781b      	ldrb	r3, [r3, #0]
 8017a1c:	183a      	adds	r2, r7, r0
 8017a1e:	1c59      	adds	r1, r3, #1
 8017a20:	7011      	strb	r1, [r2, #0]
 8017a22:	001a      	movs	r2, r3
 8017a24:	4b0b      	ldr	r3, [pc, #44]	; (8017a54 <USBD_Get_Language_Id_Framework+0x4c>)
 8017a26:	2109      	movs	r1, #9
 8017a28:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8017a2a:	183b      	adds	r3, r7, r0
 8017a2c:	781b      	ldrb	r3, [r3, #0]
 8017a2e:	183a      	adds	r2, r7, r0
 8017a30:	1c59      	adds	r1, r3, #1
 8017a32:	7011      	strb	r1, [r2, #0]
 8017a34:	001a      	movs	r2, r3
 8017a36:	4b07      	ldr	r3, [pc, #28]	; (8017a54 <USBD_Get_Language_Id_Framework+0x4c>)
 8017a38:	2104      	movs	r1, #4
 8017a3a:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8017a3c:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <USBD_Get_Language_Id_Framework+0x4c>)
 8017a3e:	0018      	movs	r0, r3
 8017a40:	f7ea fb02 	bl	8002048 <strlen>
 8017a44:	0002      	movs	r2, r0
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8017a4a:	4b02      	ldr	r3, [pc, #8]	; (8017a54 <USBD_Get_Language_Id_Framework+0x4c>)
}
 8017a4c:	0018      	movs	r0, r3
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	b004      	add	sp, #16
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	2001db10 	.word	0x2001db10

08017a58 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017a58:	b590      	push	{r4, r7, lr}
 8017a5a:	b087      	sub	sp, #28
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017a64:	2417      	movs	r4, #23
 8017a66:	193b      	adds	r3, r7, r4
 8017a68:	2200      	movs	r2, #0
 8017a6a:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d029      	beq.n	8017ac6 <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	0018      	movs	r0, r3
 8017a7a:	f000 f828 	bl	8017ace <USBD_Desc_GetLen>
 8017a7e:	0003      	movs	r3, r0
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 8017a86:	193b      	adds	r3, r7, r4
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	193a      	adds	r2, r7, r4
 8017a8c:	1c59      	adds	r1, r3, #1
 8017a8e:	7011      	strb	r1, [r2, #0]
 8017a90:	001a      	movs	r2, r3
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	189b      	adds	r3, r3, r2
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	7812      	ldrb	r2, [r2, #0]
 8017a9a:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8017a9c:	e00e      	b.n	8017abc <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 8017a9e:	2217      	movs	r2, #23
 8017aa0:	18bb      	adds	r3, r7, r2
 8017aa2:	781b      	ldrb	r3, [r3, #0]
 8017aa4:	18ba      	adds	r2, r7, r2
 8017aa6:	1c59      	adds	r1, r3, #1
 8017aa8:	7011      	strb	r1, [r2, #0]
 8017aaa:	001a      	movs	r2, r3
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	189b      	adds	r3, r3, r2
 8017ab0:	693a      	ldr	r2, [r7, #16]
 8017ab2:	7812      	ldrb	r2, [r2, #0]
 8017ab4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8017abc:	693b      	ldr	r3, [r7, #16]
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d1ec      	bne.n	8017a9e <USBD_Desc_GetString+0x46>
 8017ac4:	e000      	b.n	8017ac8 <USBD_Desc_GetString+0x70>
    return;
 8017ac6:	46c0      	nop			; (mov r8, r8)
  }
}
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	b007      	add	sp, #28
 8017acc:	bd90      	pop	{r4, r7, pc}

08017ace <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b084      	sub	sp, #16
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017ad6:	230f      	movs	r3, #15
 8017ad8:	18fb      	adds	r3, r7, r3
 8017ada:	2200      	movs	r2, #0
 8017adc:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017ae2:	e008      	b.n	8017af6 <USBD_Desc_GetLen+0x28>
  {
    len++;
 8017ae4:	210f      	movs	r1, #15
 8017ae6:	187b      	adds	r3, r7, r1
 8017ae8:	781a      	ldrb	r2, [r3, #0]
 8017aea:	187b      	adds	r3, r7, r1
 8017aec:	3201      	adds	r2, #1
 8017aee:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	3301      	adds	r3, #1
 8017af4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	781b      	ldrb	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d1f2      	bne.n	8017ae4 <USBD_Desc_GetLen+0x16>
  }

  return len;
 8017afe:	230f      	movs	r3, #15
 8017b00:	18fb      	adds	r3, r7, r3
 8017b02:	781b      	ldrb	r3, [r3, #0]
}
 8017b04:	0018      	movs	r0, r3
 8017b06:	46bd      	mov	sp, r7
 8017b08:	b004      	add	sp, #16
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b088      	sub	sp, #32
 8017b10:	af02      	add	r7, sp, #8
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	001a      	movs	r2, r3
 8017b1a:	1cfb      	adds	r3, r7, #3
 8017b1c:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8017b1e:	2317      	movs	r3, #23
 8017b20:	18fb      	adds	r3, r7, r3
 8017b22:	2200      	movs	r2, #0
 8017b24:	701a      	strb	r2, [r3, #0]
  uint8_t NumberClass = 1U;
 8017b26:	2316      	movs	r3, #22
 8017b28:	18fb      	adds	r3, r7, r3
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 8017b2e:	68fa      	ldr	r2, [r7, #12]
 8017b30:	238c      	movs	r3, #140	; 0x8c
 8017b32:	005b      	lsls	r3, r3, #1
 8017b34:	2100      	movs	r1, #0
 8017b36:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	238a      	movs	r3, #138	; 0x8a
 8017b3c:	005b      	lsls	r3, r3, #1
 8017b3e:	2100      	movs	r1, #0
 8017b40:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8017b42:	4b8f      	ldr	r3, [pc, #572]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b44:	68ba      	ldr	r2, [r7, #8]
 8017b46:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8017b48:	4b8d      	ldr	r3, [pc, #564]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	2212      	movs	r2, #18
 8017b4e:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8017b50:	4b8b      	ldr	r3, [pc, #556]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	2201      	movs	r2, #1
 8017b56:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8017b58:	4b89      	ldr	r3, [pc, #548]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	789a      	ldrb	r2, [r3, #2]
 8017b5e:	2100      	movs	r1, #0
 8017b60:	400a      	ands	r2, r1
 8017b62:	709a      	strb	r2, [r3, #2]
 8017b64:	78da      	ldrb	r2, [r3, #3]
 8017b66:	2100      	movs	r1, #0
 8017b68:	400a      	ands	r2, r1
 8017b6a:	1c11      	adds	r1, r2, #0
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	430a      	orrs	r2, r1
 8017b70:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8017b72:	4b83      	ldr	r3, [pc, #524]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2200      	movs	r2, #0
 8017b78:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 8017b7a:	4b81      	ldr	r3, [pc, #516]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2200      	movs	r2, #0
 8017b80:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8017b82:	4b7f      	ldr	r3, [pc, #508]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	2200      	movs	r2, #0
 8017b88:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8017b8a:	4b7d      	ldr	r3, [pc, #500]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2240      	movs	r2, #64	; 0x40
 8017b90:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8017b92:	4b7b      	ldr	r3, [pc, #492]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	7a1a      	ldrb	r2, [r3, #8]
 8017b98:	2100      	movs	r1, #0
 8017b9a:	400a      	ands	r2, r1
 8017b9c:	1c11      	adds	r1, r2, #0
 8017b9e:	227d      	movs	r2, #125	; 0x7d
 8017ba0:	4252      	negs	r2, r2
 8017ba2:	430a      	orrs	r2, r1
 8017ba4:	721a      	strb	r2, [r3, #8]
 8017ba6:	7a5a      	ldrb	r2, [r3, #9]
 8017ba8:	2100      	movs	r1, #0
 8017baa:	400a      	ands	r2, r1
 8017bac:	1c11      	adds	r1, r2, #0
 8017bae:	2204      	movs	r2, #4
 8017bb0:	430a      	orrs	r2, r1
 8017bb2:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8017bb4:	4b72      	ldr	r3, [pc, #456]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	7a9a      	ldrb	r2, [r3, #10]
 8017bba:	2100      	movs	r1, #0
 8017bbc:	400a      	ands	r2, r1
 8017bbe:	1c11      	adds	r1, r2, #0
 8017bc0:	2210      	movs	r2, #16
 8017bc2:	430a      	orrs	r2, r1
 8017bc4:	729a      	strb	r2, [r3, #10]
 8017bc6:	7ada      	ldrb	r2, [r3, #11]
 8017bc8:	2100      	movs	r1, #0
 8017bca:	400a      	ands	r2, r1
 8017bcc:	1c11      	adds	r1, r2, #0
 8017bce:	2257      	movs	r2, #87	; 0x57
 8017bd0:	430a      	orrs	r2, r1
 8017bd2:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8017bd4:	4b6a      	ldr	r3, [pc, #424]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	7b1a      	ldrb	r2, [r3, #12]
 8017bda:	2100      	movs	r1, #0
 8017bdc:	400a      	ands	r2, r1
 8017bde:	731a      	strb	r2, [r3, #12]
 8017be0:	7b5a      	ldrb	r2, [r3, #13]
 8017be2:	2100      	movs	r1, #0
 8017be4:	400a      	ands	r2, r1
 8017be6:	1c11      	adds	r1, r2, #0
 8017be8:	2202      	movs	r2, #2
 8017bea:	430a      	orrs	r2, r1
 8017bec:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8017bee:	4b64      	ldr	r3, [pc, #400]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8017bf6:	4b62      	ldr	r3, [pc, #392]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2202      	movs	r2, #2
 8017bfc:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8017bfe:	4b60      	ldr	r3, [pc, #384]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2203      	movs	r2, #3
 8017c04:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8017c06:	4b5e      	ldr	r3, [pc, #376]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2201      	movs	r2, #1
 8017c0c:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	238a      	movs	r3, #138	; 0x8a
 8017c12:	005b      	lsls	r3, r3, #1
 8017c14:	58d3      	ldr	r3, [r2, r3]
 8017c16:	3312      	adds	r3, #18
 8017c18:	0019      	movs	r1, r3
 8017c1a:	68fa      	ldr	r2, [r7, #12]
 8017c1c:	238a      	movs	r3, #138	; 0x8a
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8017c22:	1cfb      	adds	r3, r7, #3
 8017c24:	781b      	ldrb	r3, [r3, #0]
 8017c26:	2b01      	cmp	r3, #1
 8017c28:	d000      	beq.n	8017c2c <USBD_Device_Framework_Builder+0x120>
 8017c2a:	e07d      	b.n	8017d28 <USBD_Device_Framework_Builder+0x21c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8017c2c:	68fa      	ldr	r2, [r7, #12]
 8017c2e:	238a      	movs	r3, #138	; 0x8a
 8017c30:	005b      	lsls	r3, r3, #1
 8017c32:	58d3      	ldr	r3, [r2, r3]
 8017c34:	68ba      	ldr	r2, [r7, #8]
 8017c36:	18d2      	adds	r2, r2, r3
 8017c38:	4b52      	ldr	r3, [pc, #328]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c3a:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8017c3c:	4b51      	ldr	r3, [pc, #324]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	220a      	movs	r2, #10
 8017c42:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8017c44:	4b4f      	ldr	r3, [pc, #316]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2206      	movs	r2, #6
 8017c4a:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8017c4c:	4b4d      	ldr	r3, [pc, #308]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	789a      	ldrb	r2, [r3, #2]
 8017c52:	2100      	movs	r1, #0
 8017c54:	400a      	ands	r2, r1
 8017c56:	709a      	strb	r2, [r3, #2]
 8017c58:	78da      	ldrb	r2, [r3, #3]
 8017c5a:	2100      	movs	r1, #0
 8017c5c:	400a      	ands	r2, r1
 8017c5e:	1c11      	adds	r1, r2, #0
 8017c60:	2202      	movs	r2, #2
 8017c62:	430a      	orrs	r2, r1
 8017c64:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8017c66:	4b47      	ldr	r3, [pc, #284]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8017c6e:	4b45      	ldr	r3, [pc, #276]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	2200      	movs	r2, #0
 8017c74:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8017c76:	4b43      	ldr	r3, [pc, #268]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8017c7e:	4b41      	ldr	r3, [pc, #260]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	2240      	movs	r2, #64	; 0x40
 8017c84:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8017c86:	4b3f      	ldr	r3, [pc, #252]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	2201      	movs	r2, #1
 8017c8c:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8017c8e:	4b3d      	ldr	r3, [pc, #244]	; (8017d84 <USBD_Device_Framework_Builder+0x278>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	2200      	movs	r2, #0
 8017c94:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8017c96:	68fa      	ldr	r2, [r7, #12]
 8017c98:	238a      	movs	r3, #138	; 0x8a
 8017c9a:	005b      	lsls	r3, r3, #1
 8017c9c:	58d3      	ldr	r3, [r2, r3]
 8017c9e:	330a      	adds	r3, #10
 8017ca0:	0019      	movs	r1, r3
 8017ca2:	68fa      	ldr	r2, [r7, #12]
 8017ca4:	238a      	movs	r3, #138	; 0x8a
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8017caa:	e03d      	b.n	8017d28 <USBD_Device_Framework_Builder+0x21c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	2b02      	cmp	r3, #2
 8017cb2:	d821      	bhi.n	8017cf8 <USBD_Device_Framework_Builder+0x1ec>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017cb8:	2b02      	cmp	r3, #2
 8017cba:	d81d      	bhi.n	8017cf8 <USBD_Device_Framework_Builder+0x1ec>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8017cbc:	2317      	movs	r3, #23
 8017cbe:	18fb      	adds	r3, r7, r3
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 8017cc6:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed, (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8017cc8:	68fa      	ldr	r2, [r7, #12]
 8017cca:	238a      	movs	r3, #138	; 0x8a
 8017ccc:	005b      	lsls	r3, r3, #1
 8017cce:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 8017cd0:	68ba      	ldr	r2, [r7, #8]
 8017cd2:	18d3      	adds	r3, r2, r3
 8017cd4:	1cfa      	adds	r2, r7, #3
 8017cd6:	7812      	ldrb	r2, [r2, #0]
 8017cd8:	68f8      	ldr	r0, [r7, #12]
 8017cda:	9300      	str	r3, [sp, #0]
 8017cdc:	0013      	movs	r3, r2
 8017cde:	2200      	movs	r2, #0
 8017ce0:	f000 f852 	bl	8017d88 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	1c5a      	adds	r2, r3, #1
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	689b      	ldr	r3, [r3, #8]
 8017cf2:	1c5a      	adds	r2, r3, #1
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	609a      	str	r2, [r3, #8]
    }
    Idx_Instance++;
 8017cf8:	2117      	movs	r1, #23
 8017cfa:	187b      	adds	r3, r7, r1
 8017cfc:	781a      	ldrb	r2, [r3, #0]
 8017cfe:	187b      	adds	r3, r7, r1
 8017d00:	3201      	adds	r2, #1
 8017d02:	701a      	strb	r2, [r3, #0]

    /* Count the number of Classes different of CLASS_TYPE_NONE */
    if (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE)
 8017d04:	187b      	adds	r3, r7, r1
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	18d3      	adds	r3, r2, r3
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	2016      	movs	r0, #22
 8017d10:	183a      	adds	r2, r7, r0
 8017d12:	1839      	adds	r1, r7, r0
 8017d14:	7809      	ldrb	r1, [r1, #0]
 8017d16:	7011      	strb	r1, [r2, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d005      	beq.n	8017d28 <USBD_Device_Framework_Builder+0x21c>
    {
      NumberClass++;
 8017d1c:	0001      	movs	r1, r0
 8017d1e:	187b      	adds	r3, r7, r1
 8017d20:	781a      	ldrb	r2, [r3, #0]
 8017d22:	187b      	adds	r3, r7, r1
 8017d24:	3201      	adds	r2, #1
 8017d26:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8017d28:	2317      	movs	r3, #23
 8017d2a:	18fb      	adds	r3, r7, r3
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	2b02      	cmp	r3, #2
 8017d30:	d9bc      	bls.n	8017cac <USBD_Device_Framework_Builder+0x1a0>
    }
  }
  /* Check if there is a composite class and update device class */
  if (NumberClass > 1)
 8017d32:	2316      	movs	r3, #22
 8017d34:	18fb      	adds	r3, r7, r3
 8017d36:	781b      	ldrb	r3, [r3, #0]
 8017d38:	2b01      	cmp	r3, #1
 8017d3a:	d90c      	bls.n	8017d56 <USBD_Device_Framework_Builder+0x24a>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8017d3c:	4b10      	ldr	r3, [pc, #64]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	22ef      	movs	r2, #239	; 0xef
 8017d42:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8017d44:	4b0e      	ldr	r3, [pc, #56]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	2202      	movs	r2, #2
 8017d4a:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8017d4c:	4b0c      	ldr	r3, [pc, #48]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	2201      	movs	r2, #1
 8017d52:	719a      	strb	r2, [r3, #6]
 8017d54:	e00f      	b.n	8017d76 <USBD_Device_Framework_Builder+0x26a>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	2b02      	cmp	r3, #2
 8017d5c:	d10b      	bne.n	8017d76 <USBD_Device_Framework_Builder+0x26a>
    {
      pDevDesc->bDeviceClass = 0x02;
 8017d5e:	4b08      	ldr	r3, [pc, #32]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2202      	movs	r2, #2
 8017d64:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8017d66:	4b06      	ldr	r3, [pc, #24]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2202      	movs	r2, #2
 8017d6c:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8017d6e:	4b04      	ldr	r3, [pc, #16]	; (8017d80 <USBD_Device_Framework_Builder+0x274>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	2200      	movs	r2, #0
 8017d74:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 8017d76:	68bb      	ldr	r3, [r7, #8]
}
 8017d78:	0018      	movs	r0, r3
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	b006      	add	sp, #24
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	2001db14 	.word	0x2001db14
 8017d84:	2001db18 	.word	0x2001db18

08017d88 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8017d88:	b590      	push	{r4, r7, lr}
 8017d8a:	b083      	sub	sp, #12
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	000c      	movs	r4, r1
 8017d92:	0010      	movs	r0, r2
 8017d94:	0019      	movs	r1, r3
 8017d96:	1cfb      	adds	r3, r7, #3
 8017d98:	1c22      	adds	r2, r4, #0
 8017d9a:	701a      	strb	r2, [r3, #0]
 8017d9c:	1cbb      	adds	r3, r7, #2
 8017d9e:	1c02      	adds	r2, r0, #0
 8017da0:	701a      	strb	r2, [r3, #0]
 8017da2:	1c7b      	adds	r3, r7, #1
 8017da4:	1c0a      	adds	r2, r1, #0
 8017da6:	701a      	strb	r2, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	2b02      	cmp	r3, #2
 8017dae:	d831      	bhi.n	8017e14 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	685b      	ldr	r3, [r3, #4]
 8017db4:	687a      	ldr	r2, [r7, #4]
 8017db6:	2158      	movs	r1, #88	; 0x58
 8017db8:	434b      	muls	r3, r1
 8017dba:	18d3      	adds	r3, r2, r3
 8017dbc:	3314      	adds	r3, #20
 8017dbe:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d127      	bne.n	8017e14 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	6858      	ldr	r0, [r3, #4]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	685a      	ldr	r2, [r3, #4]
 8017dcc:	6879      	ldr	r1, [r7, #4]
 8017dce:	2358      	movs	r3, #88	; 0x58
 8017dd0:	4343      	muls	r3, r0
 8017dd2:	18cb      	adds	r3, r1, r3
 8017dd4:	3310      	adds	r3, #16
 8017dd6:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	687a      	ldr	r2, [r7, #4]
 8017dde:	2158      	movs	r1, #88	; 0x58
 8017de0:	434b      	muls	r3, r1
 8017de2:	18d3      	adds	r3, r2, r3
 8017de4:	3314      	adds	r3, #20
 8017de6:	2201      	movs	r2, #1
 8017de8:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	685b      	ldr	r3, [r3, #4]
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	2158      	movs	r1, #88	; 0x58
 8017df2:	434b      	muls	r3, r1
 8017df4:	18d3      	adds	r3, r2, r3
 8017df6:	330c      	adds	r3, #12
 8017df8:	1cfa      	adds	r2, r7, #3
 8017dfa:	7812      	ldrb	r2, [r2, #0]
 8017dfc:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8017dfe:	69ba      	ldr	r2, [r7, #24]
 8017e00:	1c7b      	adds	r3, r7, #1
 8017e02:	7819      	ldrb	r1, [r3, #0]
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	0018      	movs	r0, r3
 8017e08:	f000 f809 	bl	8017e1e <USBD_FrameWork_AddToConfDesc>
 8017e0c:	1e03      	subs	r3, r0, #0
 8017e0e:	d001      	beq.n	8017e14 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8017e10:	23ff      	movs	r3, #255	; 0xff
 8017e12:	e000      	b.n	8017e16 <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8017e14:	2300      	movs	r3, #0
}
 8017e16:	0018      	movs	r0, r3
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	b003      	add	sp, #12
 8017e1c:	bd90      	pop	{r4, r7, pc}

08017e1e <USBD_FrameWork_AddToConfDesc>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8017e1e:	b5b0      	push	{r4, r5, r7, lr}
 8017e20:	b086      	sub	sp, #24
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	60f8      	str	r0, [r7, #12]
 8017e26:	607a      	str	r2, [r7, #4]
 8017e28:	200b      	movs	r0, #11
 8017e2a:	183b      	adds	r3, r7, r0
 8017e2c:	1c0a      	adds	r2, r1, #0
 8017e2e:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 8017e30:	2317      	movs	r3, #23
 8017e32:	18fb      	adds	r3, r7, r3
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	183a      	adds	r2, r7, r0
 8017e3c:	7812      	ldrb	r2, [r2, #0]
 8017e3e:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d107      	bne.n	8017e58 <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	3319      	adds	r3, #25
 8017e4e:	33ff      	adds	r3, #255	; 0xff
 8017e50:	0019      	movs	r1, r3
 8017e52:	0010      	movs	r0, r2
 8017e54:	f000 f8a3 	bl	8017f9e <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	68fa      	ldr	r2, [r7, #12]
 8017e5e:	2158      	movs	r1, #88	; 0x58
 8017e60:	434b      	muls	r3, r1
 8017e62:	18d3      	adds	r3, r2, r3
 8017e64:	330c      	adds	r3, #12
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	2b02      	cmp	r3, #2
 8017e6a:	d168      	bne.n	8017f3e <USBD_FrameWork_AddToConfDesc+0x120>

#if USBD_CDC_ACM_CLASS_ACTIVATED == 1
    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8017e6c:	2517      	movs	r5, #23
 8017e6e:	197c      	adds	r4, r7, r5
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	0018      	movs	r0, r3
 8017e74:	f000 f869 	bl	8017f4a <USBD_FrameWork_FindFreeIFNbr>
 8017e78:	0003      	movs	r3, r0
 8017e7a:	7023      	strb	r3, [r4, #0]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	68fa      	ldr	r2, [r7, #12]
 8017e82:	2158      	movs	r1, #88	; 0x58
 8017e84:	434b      	muls	r3, r1
 8017e86:	18d3      	adds	r3, r2, r3
 8017e88:	3354      	adds	r3, #84	; 0x54
 8017e8a:	2202      	movs	r2, #2
 8017e8c:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	68fa      	ldr	r2, [r7, #12]
 8017e94:	2158      	movs	r1, #88	; 0x58
 8017e96:	2058      	movs	r0, #88	; 0x58
 8017e98:	4343      	muls	r3, r0
 8017e9a:	18d3      	adds	r3, r2, r3
 8017e9c:	185b      	adds	r3, r3, r1
 8017e9e:	197a      	adds	r2, r7, r5
 8017ea0:	7812      	ldrb	r2, [r2, #0]
 8017ea2:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	197a      	adds	r2, r7, r5
 8017eaa:	7812      	ldrb	r2, [r2, #0]
 8017eac:	3201      	adds	r2, #1
 8017eae:	b2d4      	uxtb	r4, r2
 8017eb0:	68fa      	ldr	r2, [r7, #12]
 8017eb2:	2159      	movs	r1, #89	; 0x59
 8017eb4:	2058      	movs	r0, #88	; 0x58
 8017eb6:	4343      	muls	r3, r0
 8017eb8:	18d3      	adds	r3, r2, r3
 8017eba:	185b      	adds	r3, r3, r1
 8017ebc:	1c22      	adds	r2, r4, #0
 8017ebe:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	68fa      	ldr	r2, [r7, #12]
 8017ec6:	2158      	movs	r1, #88	; 0x58
 8017ec8:	434b      	muls	r3, r1
 8017eca:	18d3      	adds	r3, r2, r3
 8017ecc:	3318      	adds	r3, #24
 8017ece:	2203      	movs	r2, #3
 8017ed0:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 8017ed2:	230b      	movs	r3, #11
 8017ed4:	18fb      	adds	r3, r7, r3
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	2b01      	cmp	r3, #1
 8017eda:	d114      	bne.n	8017f06 <USBD_FrameWork_AddToConfDesc+0xe8>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8017edc:	2380      	movs	r3, #128	; 0x80
 8017ede:	009b      	lsls	r3, r3, #2
 8017ee0:	68f8      	ldr	r0, [r7, #12]
 8017ee2:	2202      	movs	r2, #2
 8017ee4:	2101      	movs	r1, #1
 8017ee6:	f000 f889 	bl	8017ffc <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8017eea:	2380      	movs	r3, #128	; 0x80
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	68f8      	ldr	r0, [r7, #12]
 8017ef0:	2202      	movs	r2, #2
 8017ef2:	2181      	movs	r1, #129	; 0x81
 8017ef4:	f000 f882 	bl	8017ffc <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR, USBD_EP_TYPE_INTR,
 8017ef8:	68f8      	ldr	r0, [r7, #12]
 8017efa:	2308      	movs	r3, #8
 8017efc:	2203      	movs	r2, #3
 8017efe:	2182      	movs	r1, #130	; 0x82
 8017f00:	f000 f87c 	bl	8017ffc <USBD_FrameWork_AssignEp>
 8017f04:	e011      	b.n	8017f2a <USBD_FrameWork_AddToConfDesc+0x10c>
                                USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8017f06:	68f8      	ldr	r0, [r7, #12]
 8017f08:	2340      	movs	r3, #64	; 0x40
 8017f0a:	2202      	movs	r2, #2
 8017f0c:	2101      	movs	r1, #1
 8017f0e:	f000 f875 	bl	8017ffc <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	2340      	movs	r3, #64	; 0x40
 8017f16:	2202      	movs	r2, #2
 8017f18:	2181      	movs	r1, #129	; 0x81
 8017f1a:	f000 f86f 	bl	8017ffc <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR, USBD_EP_TYPE_INTR,
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	2308      	movs	r3, #8
 8017f22:	2203      	movs	r2, #3
 8017f24:	2182      	movs	r1, #130	; 0x82
 8017f26:	f000 f869 	bl	8017ffc <USBD_FrameWork_AssignEp>
                                USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8017f2a:	6879      	ldr	r1, [r7, #4]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	3319      	adds	r3, #25
 8017f30:	33ff      	adds	r3, #255	; 0xff
 8017f32:	001a      	movs	r2, r3
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	0018      	movs	r0, r3
 8017f38:	f000 f8d8 	bl	80180ec <USBD_FrameWork_CDCDesc>

      break;
 8017f3c:	e000      	b.n	8017f40 <USBD_FrameWork_AddToConfDesc+0x122>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 8017f3e:	46c0      	nop			; (mov r8, r8)
  }

  return UX_SUCCESS;
 8017f40:	2300      	movs	r3, #0
}
 8017f42:	0018      	movs	r0, r3
 8017f44:	46bd      	mov	sp, r7
 8017f46:	b006      	add	sp, #24
 8017f48:	bdb0      	pop	{r4, r5, r7, pc}

08017f4a <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8017f4a:	b580      	push	{r7, lr}
 8017f4c:	b086      	sub	sp, #24
 8017f4e:	af00      	add	r7, sp, #0
 8017f50:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8017f52:	2300      	movs	r3, #0
 8017f54:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8017f56:	2300      	movs	r3, #0
 8017f58:	613b      	str	r3, [r7, #16]
 8017f5a:	e015      	b.n	8017f88 <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	60fb      	str	r3, [r7, #12]
 8017f60:	e005      	b.n	8017f6e <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	3301      	adds	r3, #1
 8017f66:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	3301      	adds	r3, #1
 8017f6c:	60fb      	str	r3, [r7, #12]
 8017f6e:	687a      	ldr	r2, [r7, #4]
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	2158      	movs	r1, #88	; 0x58
 8017f74:	434b      	muls	r3, r1
 8017f76:	18d3      	adds	r3, r2, r3
 8017f78:	3354      	adds	r3, #84	; 0x54
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	68fa      	ldr	r2, [r7, #12]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d3ef      	bcc.n	8017f62 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8017f82:	693b      	ldr	r3, [r7, #16]
 8017f84:	3301      	adds	r3, #1
 8017f86:	613b      	str	r3, [r7, #16]
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	689b      	ldr	r3, [r3, #8]
 8017f8c:	693a      	ldr	r2, [r7, #16]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d3e4      	bcc.n	8017f5c <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8017f92:	697b      	ldr	r3, [r7, #20]
 8017f94:	b2db      	uxtb	r3, r3
}
 8017f96:	0018      	movs	r0, r3
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	b006      	add	sp, #24
 8017f9c:	bd80      	pop	{r7, pc}

08017f9e <USBD_FrameWork_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8017f9e:	b580      	push	{r7, lr}
 8017fa0:	b084      	sub	sp, #16
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
 8017fa6:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	60fb      	str	r3, [r7, #12]

  ptr->bLength                = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2209      	movs	r2, #9
 8017fb0:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType        = USB_DESC_TYPE_CONFIGURATION;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	2202      	movs	r2, #2
 8017fb6:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength      = 0U;
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	789a      	ldrb	r2, [r3, #2]
 8017fbc:	2100      	movs	r1, #0
 8017fbe:	400a      	ands	r2, r1
 8017fc0:	709a      	strb	r2, [r3, #2]
 8017fc2:	78da      	ldrb	r2, [r3, #3]
 8017fc4:	2100      	movs	r1, #0
 8017fc6:	400a      	ands	r2, r1
 8017fc8:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces         = 0U;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue    = 1U;
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2201      	movs	r2, #1
 8017fd4:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration         = USBD_CONFIG_STR_DESC_IDX;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes           = USBD_CONFIG_BMATTRIBUTES;
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	22c0      	movs	r2, #192	; 0xc0
 8017fe0:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower              = USBD_CONFIG_MAXPOWER;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	2219      	movs	r2, #25
 8017fe6:	721a      	strb	r2, [r3, #8]
  *pSze                       += sizeof(USBD_ConfigDescTypedef);
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	3309      	adds	r3, #9
 8017fee:	001a      	movs	r2, r3
 8017ff0:	683b      	ldr	r3, [r7, #0]
 8017ff2:	601a      	str	r2, [r3, #0]
}
 8017ff4:	46c0      	nop			; (mov r8, r8)
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	b004      	add	sp, #16
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8017ffc:	b590      	push	{r4, r7, lr}
 8017ffe:	b087      	sub	sp, #28
 8018000:	af00      	add	r7, sp, #0
 8018002:	60f8      	str	r0, [r7, #12]
 8018004:	0008      	movs	r0, r1
 8018006:	0011      	movs	r1, r2
 8018008:	607b      	str	r3, [r7, #4]
 801800a:	230b      	movs	r3, #11
 801800c:	18fb      	adds	r3, r7, r3
 801800e:	1c02      	adds	r2, r0, #0
 8018010:	701a      	strb	r2, [r3, #0]
 8018012:	230a      	movs	r3, #10
 8018014:	18fb      	adds	r3, r7, r3
 8018016:	1c0a      	adds	r2, r1, #0
 8018018:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 801801a:	2300      	movs	r3, #0
 801801c:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801801e:	e002      	b.n	8018026 <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8018020:	697b      	ldr	r3, [r7, #20]
 8018022:	3301      	adds	r3, #1
 8018024:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	68fa      	ldr	r2, [r7, #12]
 801802c:	2158      	movs	r1, #88	; 0x58
 801802e:	434b      	muls	r3, r1
 8018030:	18d3      	adds	r3, r2, r3
 8018032:	3318      	adds	r3, #24
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	697a      	ldr	r2, [r7, #20]
 8018038:	429a      	cmp	r2, r3
 801803a:	d210      	bcs.n	801805e <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	6858      	ldr	r0, [r3, #4]
 8018040:	68f9      	ldr	r1, [r7, #12]
 8018042:	697a      	ldr	r2, [r7, #20]
 8018044:	2420      	movs	r4, #32
 8018046:	0013      	movs	r3, r2
 8018048:	005b      	lsls	r3, r3, #1
 801804a:	189b      	adds	r3, r3, r2
 801804c:	005b      	lsls	r3, r3, #1
 801804e:	2258      	movs	r2, #88	; 0x58
 8018050:	4342      	muls	r2, r0
 8018052:	189b      	adds	r3, r3, r2
 8018054:	18cb      	adds	r3, r1, r3
 8018056:	191b      	adds	r3, r3, r4
 8018058:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801805a:	2b00      	cmp	r3, #0
 801805c:	d1e0      	bne.n	8018020 <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	6858      	ldr	r0, [r3, #4]
 8018062:	68f9      	ldr	r1, [r7, #12]
 8018064:	697a      	ldr	r2, [r7, #20]
 8018066:	0013      	movs	r3, r2
 8018068:	005b      	lsls	r3, r3, #1
 801806a:	189b      	adds	r3, r3, r2
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	2258      	movs	r2, #88	; 0x58
 8018070:	4342      	muls	r2, r0
 8018072:	189b      	adds	r3, r3, r2
 8018074:	18cb      	adds	r3, r1, r3
 8018076:	331c      	adds	r3, #28
 8018078:	220b      	movs	r2, #11
 801807a:	18ba      	adds	r2, r7, r2
 801807c:	7812      	ldrb	r2, [r2, #0]
 801807e:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	6858      	ldr	r0, [r3, #4]
 8018084:	68f9      	ldr	r1, [r7, #12]
 8018086:	697a      	ldr	r2, [r7, #20]
 8018088:	0013      	movs	r3, r2
 801808a:	005b      	lsls	r3, r3, #1
 801808c:	189b      	adds	r3, r3, r2
 801808e:	005b      	lsls	r3, r3, #1
 8018090:	2258      	movs	r2, #88	; 0x58
 8018092:	4342      	muls	r2, r0
 8018094:	189b      	adds	r3, r3, r2
 8018096:	18cb      	adds	r3, r1, r3
 8018098:	331d      	adds	r3, #29
 801809a:	220a      	movs	r2, #10
 801809c:	18ba      	adds	r2, r7, r2
 801809e:	7812      	ldrb	r2, [r2, #0]
 80180a0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	6858      	ldr	r0, [r3, #4]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	b29c      	uxth	r4, r3
 80180aa:	68f9      	ldr	r1, [r7, #12]
 80180ac:	697a      	ldr	r2, [r7, #20]
 80180ae:	0013      	movs	r3, r2
 80180b0:	005b      	lsls	r3, r3, #1
 80180b2:	189b      	adds	r3, r3, r2
 80180b4:	005b      	lsls	r3, r3, #1
 80180b6:	2258      	movs	r2, #88	; 0x58
 80180b8:	4342      	muls	r2, r0
 80180ba:	189b      	adds	r3, r3, r2
 80180bc:	18cb      	adds	r3, r1, r3
 80180be:	331e      	adds	r3, #30
 80180c0:	1c22      	adds	r2, r4, #0
 80180c2:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	6858      	ldr	r0, [r3, #4]
 80180c8:	68f9      	ldr	r1, [r7, #12]
 80180ca:	697a      	ldr	r2, [r7, #20]
 80180cc:	2420      	movs	r4, #32
 80180ce:	0013      	movs	r3, r2
 80180d0:	005b      	lsls	r3, r3, #1
 80180d2:	189b      	adds	r3, r3, r2
 80180d4:	005b      	lsls	r3, r3, #1
 80180d6:	2258      	movs	r2, #88	; 0x58
 80180d8:	4342      	muls	r2, r0
 80180da:	189b      	adds	r3, r3, r2
 80180dc:	18cb      	adds	r3, r1, r3
 80180de:	191b      	adds	r3, r3, r4
 80180e0:	2201      	movs	r2, #1
 80180e2:	701a      	strb	r2, [r3, #0]
}
 80180e4:	46c0      	nop			; (mov r8, r8)
 80180e6:	46bd      	mov	sp, r7
 80180e8:	b007      	add	sp, #28
 80180ea:	bd90      	pop	{r4, r7, pc}

080180ec <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 80180ec:	b590      	push	{r4, r7, lr}
 80180ee:	b085      	sub	sp, #20
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypedef *)(pConf + *Sze));
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	68bb      	ldr	r3, [r7, #8]
 80180fe:	18d3      	adds	r3, r2, r3
 8018100:	001a      	movs	r2, r3
 8018102:	4be8      	ldr	r3, [pc, #928]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018104:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypedef);
 8018106:	4be7      	ldr	r3, [pc, #924]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2208      	movs	r2, #8
 801810c:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 801810e:	4be5      	ldr	r3, [pc, #916]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	220b      	movs	r2, #11
 8018114:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	685a      	ldr	r2, [r3, #4]
 801811a:	4be2      	ldr	r3, [pc, #904]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	68f9      	ldr	r1, [r7, #12]
 8018120:	2058      	movs	r0, #88	; 0x58
 8018122:	2458      	movs	r4, #88	; 0x58
 8018124:	4362      	muls	r2, r4
 8018126:	188a      	adds	r2, r1, r2
 8018128:	1812      	adds	r2, r2, r0
 801812a:	7812      	ldrb	r2, [r2, #0]
 801812c:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2;    /* 2 interfaces */
 801812e:	4bdd      	ldr	r3, [pc, #884]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	2202      	movs	r2, #2
 8018134:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02;
 8018136:	4bdb      	ldr	r3, [pc, #876]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2202      	movs	r2, #2
 801813c:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02;
 801813e:	4bd9      	ldr	r3, [pc, #868]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2202      	movs	r2, #2
 8018144:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01;
 8018146:	4bd7      	ldr	r3, [pc, #860]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2201      	movs	r2, #1
 801814c:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0; /* String Index */
 801814e:	4bd5      	ldr	r3, [pc, #852]	; (80184a4 <USBD_FrameWork_CDCDesc+0x3b8>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2200      	movs	r2, #0
 8018154:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypedef);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	3308      	adds	r3, #8
 801815c:	001a      	movs	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	18d3      	adds	r3, r2, r3
 801816a:	001a      	movs	r2, r3
 801816c:	4bce      	ldr	r3, [pc, #824]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 801816e:	601a      	str	r2, [r3, #0]
 8018170:	4bcd      	ldr	r3, [pc, #820]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	2209      	movs	r2, #9
 8018176:	701a      	strb	r2, [r3, #0]
 8018178:	4bcb      	ldr	r3, [pc, #812]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2204      	movs	r2, #4
 801817e:	705a      	strb	r2, [r3, #1]
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	685a      	ldr	r2, [r3, #4]
 8018184:	4bc8      	ldr	r3, [pc, #800]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	68f9      	ldr	r1, [r7, #12]
 801818a:	2058      	movs	r0, #88	; 0x58
 801818c:	2458      	movs	r4, #88	; 0x58
 801818e:	4362      	muls	r2, r4
 8018190:	188a      	adds	r2, r1, r2
 8018192:	1812      	adds	r2, r2, r0
 8018194:	7812      	ldrb	r2, [r2, #0]
 8018196:	709a      	strb	r2, [r3, #2]
 8018198:	4bc3      	ldr	r3, [pc, #780]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	2200      	movs	r2, #0
 801819e:	70da      	strb	r2, [r3, #3]
 80181a0:	4bc1      	ldr	r3, [pc, #772]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	2201      	movs	r2, #1
 80181a6:	711a      	strb	r2, [r3, #4]
 80181a8:	4bbf      	ldr	r3, [pc, #764]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	2202      	movs	r2, #2
 80181ae:	715a      	strb	r2, [r3, #5]
 80181b0:	4bbd      	ldr	r3, [pc, #756]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2202      	movs	r2, #2
 80181b6:	719a      	strb	r2, [r3, #6]
 80181b8:	4bbb      	ldr	r3, [pc, #748]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	2201      	movs	r2, #1
 80181be:	71da      	strb	r2, [r3, #7]
 80181c0:	4bb9      	ldr	r3, [pc, #740]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2200      	movs	r2, #0
 80181c6:	721a      	strb	r2, [r3, #8]
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	3309      	adds	r3, #9
 80181ce:	001a      	movs	r2, r3
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681a      	ldr	r2, [r3, #0]
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	18d3      	adds	r3, r2, r3
 80181dc:	001a      	movs	r2, r3
 80181de:	4bb3      	ldr	r3, [pc, #716]	; (80184ac <USBD_FrameWork_CDCDesc+0x3c0>)
 80181e0:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05;
 80181e2:	4bb2      	ldr	r3, [pc, #712]	; (80184ac <USBD_FrameWork_CDCDesc+0x3c0>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	2205      	movs	r2, #5
 80181e8:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24;
 80181ea:	4bb0      	ldr	r3, [pc, #704]	; (80184ac <USBD_FrameWork_CDCDesc+0x3c0>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2224      	movs	r2, #36	; 0x24
 80181f0:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00;
 80181f2:	4bae      	ldr	r3, [pc, #696]	; (80184ac <USBD_FrameWork_CDCDesc+0x3c0>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2200      	movs	r2, #0
 80181f8:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 80181fa:	4bac      	ldr	r3, [pc, #688]	; (80184ac <USBD_FrameWork_CDCDesc+0x3c0>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	3303      	adds	r3, #3
 8018200:	781a      	ldrb	r2, [r3, #0]
 8018202:	2100      	movs	r1, #0
 8018204:	400a      	ands	r2, r1
 8018206:	1c11      	adds	r1, r2, #0
 8018208:	2210      	movs	r2, #16
 801820a:	430a      	orrs	r2, r1
 801820c:	701a      	strb	r2, [r3, #0]
 801820e:	785a      	ldrb	r2, [r3, #1]
 8018210:	2100      	movs	r1, #0
 8018212:	400a      	ands	r2, r1
 8018214:	1c11      	adds	r1, r2, #0
 8018216:	2201      	movs	r2, #1
 8018218:	430a      	orrs	r2, r1
 801821a:	705a      	strb	r2, [r3, #1]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	1d5a      	adds	r2, r3, #5
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681a      	ldr	r2, [r3, #0]
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	18d3      	adds	r3, r2, r3
 801822e:	001a      	movs	r2, r3
 8018230:	4b9f      	ldr	r3, [pc, #636]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 8018232:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05;
 8018234:	4b9e      	ldr	r3, [pc, #632]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	2205      	movs	r2, #5
 801823a:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24;
 801823c:	4b9c      	ldr	r3, [pc, #624]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	2224      	movs	r2, #36	; 0x24
 8018242:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01;
 8018244:	4b9a      	ldr	r3, [pc, #616]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	2201      	movs	r2, #1
 801824a:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00;
 801824c:	4b98      	ldr	r3, [pc, #608]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2200      	movs	r2, #0
 8018252:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	685a      	ldr	r2, [r3, #4]
 8018258:	4b95      	ldr	r3, [pc, #596]	; (80184b0 <USBD_FrameWork_CDCDesc+0x3c4>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	68f9      	ldr	r1, [r7, #12]
 801825e:	2059      	movs	r0, #89	; 0x59
 8018260:	2458      	movs	r4, #88	; 0x58
 8018262:	4362      	muls	r2, r4
 8018264:	188a      	adds	r2, r1, r2
 8018266:	1812      	adds	r2, r2, r0
 8018268:	7812      	ldrb	r2, [r2, #0]
 801826a:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	1d5a      	adds	r2, r3, #5
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681a      	ldr	r2, [r3, #0]
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	18d3      	adds	r3, r2, r3
 801827e:	001a      	movs	r2, r3
 8018280:	4b8c      	ldr	r3, [pc, #560]	; (80184b4 <USBD_FrameWork_CDCDesc+0x3c8>)
 8018282:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04;
 8018284:	4b8b      	ldr	r3, [pc, #556]	; (80184b4 <USBD_FrameWork_CDCDesc+0x3c8>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2204      	movs	r2, #4
 801828a:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24;
 801828c:	4b89      	ldr	r3, [pc, #548]	; (80184b4 <USBD_FrameWork_CDCDesc+0x3c8>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	2224      	movs	r2, #36	; 0x24
 8018292:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02;
 8018294:	4b87      	ldr	r3, [pc, #540]	; (80184b4 <USBD_FrameWork_CDCDesc+0x3c8>)
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2202      	movs	r2, #2
 801829a:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 801829c:	4b85      	ldr	r3, [pc, #532]	; (80184b4 <USBD_FrameWork_CDCDesc+0x3c8>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2202      	movs	r2, #2
 80182a2:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	1d1a      	adds	r2, r3, #4
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681a      	ldr	r2, [r3, #0]
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	18d3      	adds	r3, r2, r3
 80182b6:	001a      	movs	r2, r3
 80182b8:	4b7f      	ldr	r3, [pc, #508]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182ba:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05;
 80182bc:	4b7e      	ldr	r3, [pc, #504]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	2205      	movs	r2, #5
 80182c2:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24;
 80182c4:	4b7c      	ldr	r3, [pc, #496]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	2224      	movs	r2, #36	; 0x24
 80182ca:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06;
 80182cc:	4b7a      	ldr	r3, [pc, #488]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	2206      	movs	r2, #6
 80182d2:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	685a      	ldr	r2, [r3, #4]
 80182d8:	4b77      	ldr	r3, [pc, #476]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	68f9      	ldr	r1, [r7, #12]
 80182de:	2058      	movs	r0, #88	; 0x58
 80182e0:	2458      	movs	r4, #88	; 0x58
 80182e2:	4362      	muls	r2, r4
 80182e4:	188a      	adds	r2, r1, r2
 80182e6:	1812      	adds	r2, r2, r0
 80182e8:	7812      	ldrb	r2, [r2, #0]
 80182ea:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	685a      	ldr	r2, [r3, #4]
 80182f0:	4b71      	ldr	r3, [pc, #452]	; (80184b8 <USBD_FrameWork_CDCDesc+0x3cc>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	68f9      	ldr	r1, [r7, #12]
 80182f6:	2059      	movs	r0, #89	; 0x59
 80182f8:	2458      	movs	r4, #88	; 0x58
 80182fa:	4362      	muls	r2, r4
 80182fc:	188a      	adds	r2, r1, r2
 80182fe:	1812      	adds	r2, r2, r0
 8018300:	7812      	ldrb	r2, [r2, #0]
 8018302:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	1d5a      	adds	r2, r3, #5
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681a      	ldr	r2, [r3, #0]
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	18d3      	adds	r3, r2, r3
 8018316:	001a      	movs	r2, r3
 8018318:	4b68      	ldr	r3, [pc, #416]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801831a:	601a      	str	r2, [r3, #0]
 801831c:	4b67      	ldr	r3, [pc, #412]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	2207      	movs	r2, #7
 8018322:	701a      	strb	r2, [r3, #0]
 8018324:	4b65      	ldr	r3, [pc, #404]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	2205      	movs	r2, #5
 801832a:	705a      	strb	r2, [r3, #1]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	685a      	ldr	r2, [r3, #4]
 8018330:	4b62      	ldr	r3, [pc, #392]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	68f9      	ldr	r1, [r7, #12]
 8018336:	2028      	movs	r0, #40	; 0x28
 8018338:	2458      	movs	r4, #88	; 0x58
 801833a:	4362      	muls	r2, r4
 801833c:	188a      	adds	r2, r1, r2
 801833e:	1812      	adds	r2, r2, r0
 8018340:	7812      	ldrb	r2, [r2, #0]
 8018342:	709a      	strb	r2, [r3, #2]
 8018344:	4b5d      	ldr	r3, [pc, #372]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2203      	movs	r2, #3
 801834a:	70da      	strb	r2, [r3, #3]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	685a      	ldr	r2, [r3, #4]
 8018350:	4b5a      	ldr	r3, [pc, #360]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	68f9      	ldr	r1, [r7, #12]
 8018356:	2058      	movs	r0, #88	; 0x58
 8018358:	4342      	muls	r2, r0
 801835a:	188a      	adds	r2, r1, r2
 801835c:	322a      	adds	r2, #42	; 0x2a
 801835e:	8812      	ldrh	r2, [r2, #0]
 8018360:	21ff      	movs	r1, #255	; 0xff
 8018362:	4011      	ands	r1, r2
 8018364:	000c      	movs	r4, r1
 8018366:	7919      	ldrb	r1, [r3, #4]
 8018368:	2000      	movs	r0, #0
 801836a:	4001      	ands	r1, r0
 801836c:	1c08      	adds	r0, r1, #0
 801836e:	1c21      	adds	r1, r4, #0
 8018370:	4301      	orrs	r1, r0
 8018372:	7119      	strb	r1, [r3, #4]
 8018374:	0a12      	lsrs	r2, r2, #8
 8018376:	b290      	uxth	r0, r2
 8018378:	795a      	ldrb	r2, [r3, #5]
 801837a:	2100      	movs	r1, #0
 801837c:	400a      	ands	r2, r1
 801837e:	1c11      	adds	r1, r2, #0
 8018380:	1c02      	adds	r2, r0, #0
 8018382:	430a      	orrs	r2, r1
 8018384:	715a      	strb	r2, [r3, #5]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	2b01      	cmp	r3, #1
 801838c:	d104      	bne.n	8018398 <USBD_FrameWork_CDCDesc+0x2ac>
 801838e:	4b4b      	ldr	r3, [pc, #300]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	2205      	movs	r2, #5
 8018394:	719a      	strb	r2, [r3, #6]
 8018396:	e003      	b.n	80183a0 <USBD_FrameWork_CDCDesc+0x2b4>
 8018398:	4b48      	ldr	r3, [pc, #288]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	2205      	movs	r2, #5
 801839e:	719a      	strb	r2, [r3, #6]
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	1dda      	adds	r2, r3, #7
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681a      	ldr	r2, [r3, #0]
 80183ae:	68bb      	ldr	r3, [r7, #8]
 80183b0:	18d3      	adds	r3, r2, r3
 80183b2:	001a      	movs	r2, r3
 80183b4:	4b3c      	ldr	r3, [pc, #240]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183b6:	601a      	str	r2, [r3, #0]
 80183b8:	4b3b      	ldr	r3, [pc, #236]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	2209      	movs	r2, #9
 80183be:	701a      	strb	r2, [r3, #0]
 80183c0:	4b39      	ldr	r3, [pc, #228]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2204      	movs	r2, #4
 80183c6:	705a      	strb	r2, [r3, #1]
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	685a      	ldr	r2, [r3, #4]
 80183cc:	4b36      	ldr	r3, [pc, #216]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	68f9      	ldr	r1, [r7, #12]
 80183d2:	2059      	movs	r0, #89	; 0x59
 80183d4:	2458      	movs	r4, #88	; 0x58
 80183d6:	4362      	muls	r2, r4
 80183d8:	188a      	adds	r2, r1, r2
 80183da:	1812      	adds	r2, r2, r0
 80183dc:	7812      	ldrb	r2, [r2, #0]
 80183de:	709a      	strb	r2, [r3, #2]
 80183e0:	4b31      	ldr	r3, [pc, #196]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2200      	movs	r2, #0
 80183e6:	70da      	strb	r2, [r3, #3]
 80183e8:	4b2f      	ldr	r3, [pc, #188]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	2202      	movs	r2, #2
 80183ee:	711a      	strb	r2, [r3, #4]
 80183f0:	4b2d      	ldr	r3, [pc, #180]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	220a      	movs	r2, #10
 80183f6:	715a      	strb	r2, [r3, #5]
 80183f8:	4b2b      	ldr	r3, [pc, #172]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	2200      	movs	r2, #0
 80183fe:	719a      	strb	r2, [r3, #6]
 8018400:	4b29      	ldr	r3, [pc, #164]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2200      	movs	r2, #0
 8018406:	71da      	strb	r2, [r3, #7]
 8018408:	4b27      	ldr	r3, [pc, #156]	; (80184a8 <USBD_FrameWork_CDCDesc+0x3bc>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2200      	movs	r2, #0
 801840e:	721a      	strb	r2, [r3, #8]
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	3309      	adds	r3, #9
 8018416:	001a      	movs	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	18d3      	adds	r3, r2, r3
 8018424:	001a      	movs	r2, r3
 8018426:	4b25      	ldr	r3, [pc, #148]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018428:	601a      	str	r2, [r3, #0]
 801842a:	4b24      	ldr	r3, [pc, #144]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	2207      	movs	r2, #7
 8018430:	701a      	strb	r2, [r3, #0]
 8018432:	4b22      	ldr	r3, [pc, #136]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	2205      	movs	r2, #5
 8018438:	705a      	strb	r2, [r3, #1]
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	685a      	ldr	r2, [r3, #4]
 801843e:	4b1f      	ldr	r3, [pc, #124]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	68f9      	ldr	r1, [r7, #12]
 8018444:	2058      	movs	r0, #88	; 0x58
 8018446:	4342      	muls	r2, r0
 8018448:	188a      	adds	r2, r1, r2
 801844a:	321c      	adds	r2, #28
 801844c:	7812      	ldrb	r2, [r2, #0]
 801844e:	709a      	strb	r2, [r3, #2]
 8018450:	4b1a      	ldr	r3, [pc, #104]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2202      	movs	r2, #2
 8018456:	70da      	strb	r2, [r3, #3]
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	685a      	ldr	r2, [r3, #4]
 801845c:	4b17      	ldr	r3, [pc, #92]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	68f9      	ldr	r1, [r7, #12]
 8018462:	2058      	movs	r0, #88	; 0x58
 8018464:	4342      	muls	r2, r0
 8018466:	188a      	adds	r2, r1, r2
 8018468:	321e      	adds	r2, #30
 801846a:	8812      	ldrh	r2, [r2, #0]
 801846c:	21ff      	movs	r1, #255	; 0xff
 801846e:	4011      	ands	r1, r2
 8018470:	000c      	movs	r4, r1
 8018472:	7919      	ldrb	r1, [r3, #4]
 8018474:	2000      	movs	r0, #0
 8018476:	4001      	ands	r1, r0
 8018478:	1c08      	adds	r0, r1, #0
 801847a:	1c21      	adds	r1, r4, #0
 801847c:	4301      	orrs	r1, r0
 801847e:	7119      	strb	r1, [r3, #4]
 8018480:	0a12      	lsrs	r2, r2, #8
 8018482:	b290      	uxth	r0, r2
 8018484:	795a      	ldrb	r2, [r3, #5]
 8018486:	2100      	movs	r1, #0
 8018488:	400a      	ands	r2, r1
 801848a:	1c11      	adds	r1, r2, #0
 801848c:	1c02      	adds	r2, r0, #0
 801848e:	430a      	orrs	r2, r1
 8018490:	715a      	strb	r2, [r3, #5]
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	2b01      	cmp	r3, #1
 8018498:	d112      	bne.n	80184c0 <USBD_FrameWork_CDCDesc+0x3d4>
 801849a:	4b08      	ldr	r3, [pc, #32]	; (80184bc <USBD_FrameWork_CDCDesc+0x3d0>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2200      	movs	r2, #0
 80184a0:	719a      	strb	r2, [r3, #6]
 80184a2:	e011      	b.n	80184c8 <USBD_FrameWork_CDCDesc+0x3dc>
 80184a4:	2001db1c 	.word	0x2001db1c
 80184a8:	2001db20 	.word	0x2001db20
 80184ac:	2001db24 	.word	0x2001db24
 80184b0:	2001db28 	.word	0x2001db28
 80184b4:	2001db2c 	.word	0x2001db2c
 80184b8:	2001db30 	.word	0x2001db30
 80184bc:	2001db34 	.word	0x2001db34
 80184c0:	4b3b      	ldr	r3, [pc, #236]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	2200      	movs	r2, #0
 80184c6:	719a      	strb	r2, [r3, #6]
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	1dda      	adds	r2, r3, #7
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681a      	ldr	r2, [r3, #0]
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	18d3      	adds	r3, r2, r3
 80184da:	001a      	movs	r2, r3
 80184dc:	4b34      	ldr	r3, [pc, #208]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 80184de:	601a      	str	r2, [r3, #0]
 80184e0:	4b33      	ldr	r3, [pc, #204]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	2207      	movs	r2, #7
 80184e6:	701a      	strb	r2, [r3, #0]
 80184e8:	4b31      	ldr	r3, [pc, #196]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2205      	movs	r2, #5
 80184ee:	705a      	strb	r2, [r3, #1]
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	685a      	ldr	r2, [r3, #4]
 80184f4:	4b2e      	ldr	r3, [pc, #184]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	68f9      	ldr	r1, [r7, #12]
 80184fa:	2022      	movs	r0, #34	; 0x22
 80184fc:	2458      	movs	r4, #88	; 0x58
 80184fe:	4362      	muls	r2, r4
 8018500:	188a      	adds	r2, r1, r2
 8018502:	1812      	adds	r2, r2, r0
 8018504:	7812      	ldrb	r2, [r2, #0]
 8018506:	709a      	strb	r2, [r3, #2]
 8018508:	4b29      	ldr	r3, [pc, #164]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2202      	movs	r2, #2
 801850e:	70da      	strb	r2, [r3, #3]
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	685a      	ldr	r2, [r3, #4]
 8018514:	4b26      	ldr	r3, [pc, #152]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	68f9      	ldr	r1, [r7, #12]
 801851a:	2058      	movs	r0, #88	; 0x58
 801851c:	4342      	muls	r2, r0
 801851e:	188a      	adds	r2, r1, r2
 8018520:	3224      	adds	r2, #36	; 0x24
 8018522:	8812      	ldrh	r2, [r2, #0]
 8018524:	21ff      	movs	r1, #255	; 0xff
 8018526:	4011      	ands	r1, r2
 8018528:	000c      	movs	r4, r1
 801852a:	7919      	ldrb	r1, [r3, #4]
 801852c:	2000      	movs	r0, #0
 801852e:	4001      	ands	r1, r0
 8018530:	1c08      	adds	r0, r1, #0
 8018532:	1c21      	adds	r1, r4, #0
 8018534:	4301      	orrs	r1, r0
 8018536:	7119      	strb	r1, [r3, #4]
 8018538:	0a12      	lsrs	r2, r2, #8
 801853a:	b290      	uxth	r0, r2
 801853c:	795a      	ldrb	r2, [r3, #5]
 801853e:	2100      	movs	r1, #0
 8018540:	400a      	ands	r2, r1
 8018542:	1c11      	adds	r1, r2, #0
 8018544:	1c02      	adds	r2, r0, #0
 8018546:	430a      	orrs	r2, r1
 8018548:	715a      	strb	r2, [r3, #5]
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	781b      	ldrb	r3, [r3, #0]
 801854e:	2b01      	cmp	r3, #1
 8018550:	d104      	bne.n	801855c <USBD_FrameWork_CDCDesc+0x470>
 8018552:	4b17      	ldr	r3, [pc, #92]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	2200      	movs	r2, #0
 8018558:	719a      	strb	r2, [r3, #6]
 801855a:	e003      	b.n	8018564 <USBD_FrameWork_CDCDesc+0x478>
 801855c:	4b14      	ldr	r3, [pc, #80]	; (80185b0 <USBD_FrameWork_CDCDesc+0x4c4>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2200      	movs	r2, #0
 8018562:	719a      	strb	r2, [r3, #6]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	1dda      	adds	r2, r3, #7
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	791a      	ldrb	r2, [r3, #4]
 8018572:	68bb      	ldr	r3, [r7, #8]
 8018574:	3202      	adds	r2, #2
 8018576:	b2d2      	uxtb	r2, r2
 8018578:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681a      	ldr	r2, [r3, #0]
 801857e:	68bb      	ldr	r3, [r7, #8]
 8018580:	b292      	uxth	r2, r2
 8018582:	21ff      	movs	r1, #255	; 0xff
 8018584:	4011      	ands	r1, r2
 8018586:	000c      	movs	r4, r1
 8018588:	7899      	ldrb	r1, [r3, #2]
 801858a:	2000      	movs	r0, #0
 801858c:	4001      	ands	r1, r0
 801858e:	1c08      	adds	r0, r1, #0
 8018590:	1c21      	adds	r1, r4, #0
 8018592:	4301      	orrs	r1, r0
 8018594:	7099      	strb	r1, [r3, #2]
 8018596:	0a12      	lsrs	r2, r2, #8
 8018598:	b290      	uxth	r0, r2
 801859a:	78da      	ldrb	r2, [r3, #3]
 801859c:	2100      	movs	r1, #0
 801859e:	400a      	ands	r2, r1
 80185a0:	1c11      	adds	r1, r2, #0
 80185a2:	1c02      	adds	r2, r0, #0
 80185a4:	430a      	orrs	r2, r1
 80185a6:	70da      	strb	r2, [r3, #3]
}
 80185a8:	46c0      	nop			; (mov r8, r8)
 80185aa:	46bd      	mov	sp, r7
 80185ac:	b005      	add	sp, #20
 80185ae:	bd90      	pop	{r4, r7, pc}
 80185b0:	2001db34 	.word	0x2001db34

080185b4 <malloc>:
 80185b4:	b510      	push	{r4, lr}
 80185b6:	4b03      	ldr	r3, [pc, #12]	; (80185c4 <malloc+0x10>)
 80185b8:	0001      	movs	r1, r0
 80185ba:	6818      	ldr	r0, [r3, #0]
 80185bc:	f000 f826 	bl	801860c <_malloc_r>
 80185c0:	bd10      	pop	{r4, pc}
 80185c2:	46c0      	nop			; (mov r8, r8)
 80185c4:	20000108 	.word	0x20000108

080185c8 <sbrk_aligned>:
 80185c8:	b570      	push	{r4, r5, r6, lr}
 80185ca:	4e0f      	ldr	r6, [pc, #60]	; (8018608 <sbrk_aligned+0x40>)
 80185cc:	000d      	movs	r5, r1
 80185ce:	6831      	ldr	r1, [r6, #0]
 80185d0:	0004      	movs	r4, r0
 80185d2:	2900      	cmp	r1, #0
 80185d4:	d102      	bne.n	80185dc <sbrk_aligned+0x14>
 80185d6:	f000 f8b3 	bl	8018740 <_sbrk_r>
 80185da:	6030      	str	r0, [r6, #0]
 80185dc:	0029      	movs	r1, r5
 80185de:	0020      	movs	r0, r4
 80185e0:	f000 f8ae 	bl	8018740 <_sbrk_r>
 80185e4:	1c43      	adds	r3, r0, #1
 80185e6:	d00a      	beq.n	80185fe <sbrk_aligned+0x36>
 80185e8:	2303      	movs	r3, #3
 80185ea:	1cc5      	adds	r5, r0, #3
 80185ec:	439d      	bics	r5, r3
 80185ee:	42a8      	cmp	r0, r5
 80185f0:	d007      	beq.n	8018602 <sbrk_aligned+0x3a>
 80185f2:	1a29      	subs	r1, r5, r0
 80185f4:	0020      	movs	r0, r4
 80185f6:	f000 f8a3 	bl	8018740 <_sbrk_r>
 80185fa:	3001      	adds	r0, #1
 80185fc:	d101      	bne.n	8018602 <sbrk_aligned+0x3a>
 80185fe:	2501      	movs	r5, #1
 8018600:	426d      	negs	r5, r5
 8018602:	0028      	movs	r0, r5
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	46c0      	nop			; (mov r8, r8)
 8018608:	2001db3c 	.word	0x2001db3c

0801860c <_malloc_r>:
 801860c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801860e:	2203      	movs	r2, #3
 8018610:	1ccb      	adds	r3, r1, #3
 8018612:	4393      	bics	r3, r2
 8018614:	3308      	adds	r3, #8
 8018616:	0006      	movs	r6, r0
 8018618:	001f      	movs	r7, r3
 801861a:	2b0c      	cmp	r3, #12
 801861c:	d238      	bcs.n	8018690 <_malloc_r+0x84>
 801861e:	270c      	movs	r7, #12
 8018620:	42b9      	cmp	r1, r7
 8018622:	d837      	bhi.n	8018694 <_malloc_r+0x88>
 8018624:	0030      	movs	r0, r6
 8018626:	f000 f873 	bl	8018710 <__malloc_lock>
 801862a:	4b38      	ldr	r3, [pc, #224]	; (801870c <_malloc_r+0x100>)
 801862c:	9300      	str	r3, [sp, #0]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	001c      	movs	r4, r3
 8018632:	2c00      	cmp	r4, #0
 8018634:	d133      	bne.n	801869e <_malloc_r+0x92>
 8018636:	0039      	movs	r1, r7
 8018638:	0030      	movs	r0, r6
 801863a:	f7ff ffc5 	bl	80185c8 <sbrk_aligned>
 801863e:	0004      	movs	r4, r0
 8018640:	1c43      	adds	r3, r0, #1
 8018642:	d15e      	bne.n	8018702 <_malloc_r+0xf6>
 8018644:	9b00      	ldr	r3, [sp, #0]
 8018646:	681c      	ldr	r4, [r3, #0]
 8018648:	0025      	movs	r5, r4
 801864a:	2d00      	cmp	r5, #0
 801864c:	d14e      	bne.n	80186ec <_malloc_r+0xe0>
 801864e:	2c00      	cmp	r4, #0
 8018650:	d051      	beq.n	80186f6 <_malloc_r+0xea>
 8018652:	6823      	ldr	r3, [r4, #0]
 8018654:	0029      	movs	r1, r5
 8018656:	18e3      	adds	r3, r4, r3
 8018658:	0030      	movs	r0, r6
 801865a:	9301      	str	r3, [sp, #4]
 801865c:	f000 f870 	bl	8018740 <_sbrk_r>
 8018660:	9b01      	ldr	r3, [sp, #4]
 8018662:	4283      	cmp	r3, r0
 8018664:	d147      	bne.n	80186f6 <_malloc_r+0xea>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	0030      	movs	r0, r6
 801866a:	1aff      	subs	r7, r7, r3
 801866c:	0039      	movs	r1, r7
 801866e:	f7ff ffab 	bl	80185c8 <sbrk_aligned>
 8018672:	3001      	adds	r0, #1
 8018674:	d03f      	beq.n	80186f6 <_malloc_r+0xea>
 8018676:	6823      	ldr	r3, [r4, #0]
 8018678:	19db      	adds	r3, r3, r7
 801867a:	6023      	str	r3, [r4, #0]
 801867c:	9b00      	ldr	r3, [sp, #0]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d040      	beq.n	8018706 <_malloc_r+0xfa>
 8018684:	685a      	ldr	r2, [r3, #4]
 8018686:	42a2      	cmp	r2, r4
 8018688:	d133      	bne.n	80186f2 <_malloc_r+0xe6>
 801868a:	2200      	movs	r2, #0
 801868c:	605a      	str	r2, [r3, #4]
 801868e:	e014      	b.n	80186ba <_malloc_r+0xae>
 8018690:	2b00      	cmp	r3, #0
 8018692:	dac5      	bge.n	8018620 <_malloc_r+0x14>
 8018694:	230c      	movs	r3, #12
 8018696:	2500      	movs	r5, #0
 8018698:	6033      	str	r3, [r6, #0]
 801869a:	0028      	movs	r0, r5
 801869c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801869e:	6821      	ldr	r1, [r4, #0]
 80186a0:	1bc9      	subs	r1, r1, r7
 80186a2:	d420      	bmi.n	80186e6 <_malloc_r+0xda>
 80186a4:	290b      	cmp	r1, #11
 80186a6:	d918      	bls.n	80186da <_malloc_r+0xce>
 80186a8:	19e2      	adds	r2, r4, r7
 80186aa:	6027      	str	r7, [r4, #0]
 80186ac:	42a3      	cmp	r3, r4
 80186ae:	d112      	bne.n	80186d6 <_malloc_r+0xca>
 80186b0:	9b00      	ldr	r3, [sp, #0]
 80186b2:	601a      	str	r2, [r3, #0]
 80186b4:	6863      	ldr	r3, [r4, #4]
 80186b6:	6011      	str	r1, [r2, #0]
 80186b8:	6053      	str	r3, [r2, #4]
 80186ba:	0030      	movs	r0, r6
 80186bc:	0025      	movs	r5, r4
 80186be:	f000 f82f 	bl	8018720 <__malloc_unlock>
 80186c2:	2207      	movs	r2, #7
 80186c4:	350b      	adds	r5, #11
 80186c6:	1d23      	adds	r3, r4, #4
 80186c8:	4395      	bics	r5, r2
 80186ca:	1aea      	subs	r2, r5, r3
 80186cc:	429d      	cmp	r5, r3
 80186ce:	d0e4      	beq.n	801869a <_malloc_r+0x8e>
 80186d0:	1b5b      	subs	r3, r3, r5
 80186d2:	50a3      	str	r3, [r4, r2]
 80186d4:	e7e1      	b.n	801869a <_malloc_r+0x8e>
 80186d6:	605a      	str	r2, [r3, #4]
 80186d8:	e7ec      	b.n	80186b4 <_malloc_r+0xa8>
 80186da:	6862      	ldr	r2, [r4, #4]
 80186dc:	42a3      	cmp	r3, r4
 80186de:	d1d5      	bne.n	801868c <_malloc_r+0x80>
 80186e0:	9b00      	ldr	r3, [sp, #0]
 80186e2:	601a      	str	r2, [r3, #0]
 80186e4:	e7e9      	b.n	80186ba <_malloc_r+0xae>
 80186e6:	0023      	movs	r3, r4
 80186e8:	6864      	ldr	r4, [r4, #4]
 80186ea:	e7a2      	b.n	8018632 <_malloc_r+0x26>
 80186ec:	002c      	movs	r4, r5
 80186ee:	686d      	ldr	r5, [r5, #4]
 80186f0:	e7ab      	b.n	801864a <_malloc_r+0x3e>
 80186f2:	0013      	movs	r3, r2
 80186f4:	e7c4      	b.n	8018680 <_malloc_r+0x74>
 80186f6:	230c      	movs	r3, #12
 80186f8:	0030      	movs	r0, r6
 80186fa:	6033      	str	r3, [r6, #0]
 80186fc:	f000 f810 	bl	8018720 <__malloc_unlock>
 8018700:	e7cb      	b.n	801869a <_malloc_r+0x8e>
 8018702:	6027      	str	r7, [r4, #0]
 8018704:	e7d9      	b.n	80186ba <_malloc_r+0xae>
 8018706:	605b      	str	r3, [r3, #4]
 8018708:	deff      	udf	#255	; 0xff
 801870a:	46c0      	nop			; (mov r8, r8)
 801870c:	2001db38 	.word	0x2001db38

08018710 <__malloc_lock>:
 8018710:	b510      	push	{r4, lr}
 8018712:	4802      	ldr	r0, [pc, #8]	; (801871c <__malloc_lock+0xc>)
 8018714:	f000 f850 	bl	80187b8 <__retarget_lock_acquire_recursive>
 8018718:	bd10      	pop	{r4, pc}
 801871a:	46c0      	nop			; (mov r8, r8)
 801871c:	2001dc7c 	.word	0x2001dc7c

08018720 <__malloc_unlock>:
 8018720:	b510      	push	{r4, lr}
 8018722:	4802      	ldr	r0, [pc, #8]	; (801872c <__malloc_unlock+0xc>)
 8018724:	f000 f849 	bl	80187ba <__retarget_lock_release_recursive>
 8018728:	bd10      	pop	{r4, pc}
 801872a:	46c0      	nop			; (mov r8, r8)
 801872c:	2001dc7c 	.word	0x2001dc7c

08018730 <memset>:
 8018730:	0003      	movs	r3, r0
 8018732:	1882      	adds	r2, r0, r2
 8018734:	4293      	cmp	r3, r2
 8018736:	d100      	bne.n	801873a <memset+0xa>
 8018738:	4770      	bx	lr
 801873a:	7019      	strb	r1, [r3, #0]
 801873c:	3301      	adds	r3, #1
 801873e:	e7f9      	b.n	8018734 <memset+0x4>

08018740 <_sbrk_r>:
 8018740:	2300      	movs	r3, #0
 8018742:	b570      	push	{r4, r5, r6, lr}
 8018744:	4d06      	ldr	r5, [pc, #24]	; (8018760 <_sbrk_r+0x20>)
 8018746:	0004      	movs	r4, r0
 8018748:	0008      	movs	r0, r1
 801874a:	602b      	str	r3, [r5, #0]
 801874c:	f7ea fa16 	bl	8002b7c <_sbrk>
 8018750:	1c43      	adds	r3, r0, #1
 8018752:	d103      	bne.n	801875c <_sbrk_r+0x1c>
 8018754:	682b      	ldr	r3, [r5, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d000      	beq.n	801875c <_sbrk_r+0x1c>
 801875a:	6023      	str	r3, [r4, #0]
 801875c:	bd70      	pop	{r4, r5, r6, pc}
 801875e:	46c0      	nop			; (mov r8, r8)
 8018760:	2001dc78 	.word	0x2001dc78

08018764 <__errno>:
 8018764:	4b01      	ldr	r3, [pc, #4]	; (801876c <__errno+0x8>)
 8018766:	6818      	ldr	r0, [r3, #0]
 8018768:	4770      	bx	lr
 801876a:	46c0      	nop			; (mov r8, r8)
 801876c:	20000108 	.word	0x20000108

08018770 <__libc_init_array>:
 8018770:	b570      	push	{r4, r5, r6, lr}
 8018772:	2600      	movs	r6, #0
 8018774:	4c0c      	ldr	r4, [pc, #48]	; (80187a8 <__libc_init_array+0x38>)
 8018776:	4d0d      	ldr	r5, [pc, #52]	; (80187ac <__libc_init_array+0x3c>)
 8018778:	1b64      	subs	r4, r4, r5
 801877a:	10a4      	asrs	r4, r4, #2
 801877c:	42a6      	cmp	r6, r4
 801877e:	d109      	bne.n	8018794 <__libc_init_array+0x24>
 8018780:	2600      	movs	r6, #0
 8018782:	f000 f835 	bl	80187f0 <_init>
 8018786:	4c0a      	ldr	r4, [pc, #40]	; (80187b0 <__libc_init_array+0x40>)
 8018788:	4d0a      	ldr	r5, [pc, #40]	; (80187b4 <__libc_init_array+0x44>)
 801878a:	1b64      	subs	r4, r4, r5
 801878c:	10a4      	asrs	r4, r4, #2
 801878e:	42a6      	cmp	r6, r4
 8018790:	d105      	bne.n	801879e <__libc_init_array+0x2e>
 8018792:	bd70      	pop	{r4, r5, r6, pc}
 8018794:	00b3      	lsls	r3, r6, #2
 8018796:	58eb      	ldr	r3, [r5, r3]
 8018798:	4798      	blx	r3
 801879a:	3601      	adds	r6, #1
 801879c:	e7ee      	b.n	801877c <__libc_init_array+0xc>
 801879e:	00b3      	lsls	r3, r6, #2
 80187a0:	58eb      	ldr	r3, [r5, r3]
 80187a2:	4798      	blx	r3
 80187a4:	3601      	adds	r6, #1
 80187a6:	e7f2      	b.n	801878e <__libc_init_array+0x1e>
 80187a8:	08018cd4 	.word	0x08018cd4
 80187ac:	08018cd4 	.word	0x08018cd4
 80187b0:	08018cd8 	.word	0x08018cd8
 80187b4:	08018cd4 	.word	0x08018cd4

080187b8 <__retarget_lock_acquire_recursive>:
 80187b8:	4770      	bx	lr

080187ba <__retarget_lock_release_recursive>:
 80187ba:	4770      	bx	lr

080187bc <__aeabi_memcpy>:
 80187bc:	b510      	push	{r4, lr}
 80187be:	f000 f80d 	bl	80187dc <memcpy>
 80187c2:	bd10      	pop	{r4, pc}

080187c4 <__aeabi_memset>:
 80187c4:	000b      	movs	r3, r1
 80187c6:	b510      	push	{r4, lr}
 80187c8:	0011      	movs	r1, r2
 80187ca:	001a      	movs	r2, r3
 80187cc:	f7ff ffb0 	bl	8018730 <memset>
 80187d0:	bd10      	pop	{r4, pc}

080187d2 <__aeabi_memclr>:
 80187d2:	b510      	push	{r4, lr}
 80187d4:	2200      	movs	r2, #0
 80187d6:	f7ff fff5 	bl	80187c4 <__aeabi_memset>
 80187da:	bd10      	pop	{r4, pc}

080187dc <memcpy>:
 80187dc:	2300      	movs	r3, #0
 80187de:	b510      	push	{r4, lr}
 80187e0:	429a      	cmp	r2, r3
 80187e2:	d100      	bne.n	80187e6 <memcpy+0xa>
 80187e4:	bd10      	pop	{r4, pc}
 80187e6:	5ccc      	ldrb	r4, [r1, r3]
 80187e8:	54c4      	strb	r4, [r0, r3]
 80187ea:	3301      	adds	r3, #1
 80187ec:	e7f8      	b.n	80187e0 <memcpy+0x4>
	...

080187f0 <_init>:
 80187f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187f2:	46c0      	nop			; (mov r8, r8)
 80187f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187f6:	bc08      	pop	{r3}
 80187f8:	469e      	mov	lr, r3
 80187fa:	4770      	bx	lr

080187fc <_fini>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	46c0      	nop			; (mov r8, r8)
 8018800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018802:	bc08      	pop	{r3}
 8018804:	469e      	mov	lr, r3
 8018806:	4770      	bx	lr
