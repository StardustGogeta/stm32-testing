
usbX4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018110  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  080181d0  080181d0  000281d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186c8  080186c8  0003014c  2**0
                  CONTENTS
  4 .ARM          00000008  080186c8  080186c8  000286c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186d0  080186d0  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080186d0  080186d0  000286d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186d4  080186d4  000286d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080186d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009630  2000014c  08018824  0003014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000977c  08018824  0003977c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 12 .comment      000023bb  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  00000228  00000000  00000000  00032535  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000018  00000000  00000000  00032760  2**2
                  CONTENTS, READONLY
 15 .debug_info   00072fdf  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00011e2f  00000000  00000000  000a5757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003020  00000000  00000000  000b7588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021b5  00000000  00000000  000ba5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00039596  00000000  00000000  000bc75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000686da  00000000  00000000  000f5cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ed555  00000000  00000000  0015e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000093f0  00000000  00000000  0024b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000fb  00000000  00000000  00254d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000014c 	.word	0x2000014c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080181b8 	.word	0x080181b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000150 	.word	0x20000150
 8000104:	080181b8 	.word	0x080181b8
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	; (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	; (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	; (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	; (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	; (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	; (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	; (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	; (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	; (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	; (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	; (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	; (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	; (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	200087ac 	.word	0x200087ac
    LDR     r1, =SYSTICK_CYCLES
 800017c:	000752ff 	.word	0x000752ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	; (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	; (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	; (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	; (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	; (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	; (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	; (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20008848 	.word	0x20008848
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	200087b0 	.word	0x200087b0
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	200087b4 	.word	0x200087b4
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	20008db4 	.word	0x20008db4
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	; 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	; 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	; (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	; (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	; (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f010 fba9 	bl	8010a60 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f010 fb19 	bl	801094c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	; (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	20008854 	.word	0x20008854
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	20008db4 	.word	0x20008db4
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20008858 	.word	0x20008858
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	200088e4 	.word	0x200088e4
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	200088e8 	.word	0x200088e8
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	200088e0 	.word	0x200088e0
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	200088dc 	.word	0x200088dc
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20008848 	.word	0x20008848
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	200087b0 	.word	0x200087b0
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	200087b4 	.word	0x200087b4
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	001e      	movs	r6, r3
 8000376:	2500      	movs	r5, #0
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7b00      	ldrb	r0, [r0, #12]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e059      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e054      	b.n	800043a <USBPD_CAD_Init+0xca>
 8000390:	200c      	movs	r0, #12
 8000392:	f017 fa51 	bl	8017838 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e04d      	b.n	800043a <USBPD_CAD_Init+0xca>
 800039e:	9601      	str	r6, [sp, #4]
 80003a0:	210c      	movs	r1, #12
 80003a2:	f017 fb8c 	bl	8017abe <__aeabi_memclr>
 80003a6:	9801      	ldr	r0, [sp, #4]
 80003a8:	6038      	str	r0, [r7, #0]
 80003aa:	723d      	strb	r5, [r7, #8]
 80003ac:	9800      	ldr	r0, [sp, #0]
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	4860      	ldr	r0, [pc, #384]	; (8000534 <.text_6>)
 80003b2:	4669      	mov	r1, sp
 80003b4:	7b09      	ldrb	r1, [r1, #12]
 80003b6:	0089      	lsls	r1, r1, #2
 80003b8:	5047      	str	r7, [r0, r1]
 80003ba:	2001      	movs	r0, #1
 80003bc:	2100      	movs	r1, #0
 80003be:	43c9      	mvns	r1, r1
 80003c0:	4a5d      	ldr	r2, [pc, #372]	; (8000538 <.text_7>)
 80003c2:	4b5e      	ldr	r3, [pc, #376]	; (800053c <.text_8>)
 80003c4:	4d5e      	ldr	r5, [pc, #376]	; (8000540 <.text_9>)
 80003c6:	682e      	ldr	r6, [r5, #0]
 80003c8:	401e      	ands	r6, r3
 80003ca:	4f5e      	ldr	r7, [pc, #376]	; (8000544 <.text_10>)
 80003cc:	42be      	cmp	r6, r7
 80003ce:	d004      	beq.n	80003da <USBPD_CAD_Init+0x6a>
 80003d0:	682d      	ldr	r5, [r5, #0]
 80003d2:	402b      	ands	r3, r5
 80003d4:	4d5c      	ldr	r5, [pc, #368]	; (8000548 <.text_11>)
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d112      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003da:	4b5c      	ldr	r3, [pc, #368]	; (800054c <.text_12>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10e      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003e2:	0d0b      	lsrs	r3, r1, #20
 80003e4:	4d5a      	ldr	r5, [pc, #360]	; (8000550 <.text_13>)
 80003e6:	682e      	ldr	r6, [r5, #0]
 80003e8:	401e      	ands	r6, r3
 80003ea:	278a      	movs	r7, #138	; 0x8a
 80003ec:	00ff      	lsls	r7, r7, #3
 80003ee:	42be      	cmp	r6, r7
 80003f0:	d004      	beq.n	80003fc <USBPD_CAD_Init+0x8c>
 80003f2:	682d      	ldr	r5, [r5, #0]
 80003f4:	402b      	ands	r3, r5
 80003f6:	4d57      	ldr	r5, [pc, #348]	; (8000554 <.text_14>)
 80003f8:	42ab      	cmp	r3, r5
 80003fa:	d101      	bne.n	8000400 <USBPD_CAD_Init+0x90>
 80003fc:	4b56      	ldr	r3, [pc, #344]	; (8000558 <.text_15>)
 80003fe:	e000      	b.n	8000402 <USBPD_CAD_Init+0x92>
 8000400:	4b56      	ldr	r3, [pc, #344]	; (800055c <.text_16>)
 8000402:	689d      	ldr	r5, [r3, #8]
 8000404:	681e      	ldr	r6, [r3, #0]
 8000406:	695f      	ldr	r7, [r3, #20]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	6119      	str	r1, [r3, #16]
 800040c:	6098      	str	r0, [r3, #8]
 800040e:	6899      	ldr	r1, [r3, #8]
 8000410:	2901      	cmp	r1, #1
 8000412:	d0fc      	beq.n	800040e <USBPD_CAD_Init+0x9e>
 8000414:	4952      	ldr	r1, [pc, #328]	; (8000560 <.text_17>)
 8000416:	6019      	str	r1, [r3, #0]
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	4a52      	ldr	r2, [pc, #328]	; (8000564 <.text_18>)
 800041c:	6011      	str	r1, [r2, #0]
 800041e:	611e      	str	r6, [r3, #16]
 8000420:	615f      	str	r7, [r3, #20]
 8000422:	609d      	str	r5, [r3, #8]
 8000424:	6899      	ldr	r1, [r3, #8]
 8000426:	4308      	orrs	r0, r1
 8000428:	6098      	str	r0, [r3, #8]
 800042a:	9904      	ldr	r1, [sp, #16]
 800042c:	9800      	ldr	r0, [sp, #0]
 800042e:	6843      	ldr	r3, [r0, #4]
 8000430:	9a01      	ldr	r2, [sp, #4]
 8000432:	4668      	mov	r0, sp
 8000434:	7b00      	ldrb	r0, [r0, #12]
 8000436:	f00a fc09 	bl	800ac4c <CAD_Init>
 800043a:	0020      	movs	r0, r4
 800043c:	b005      	add	sp, #20
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000440 <USBPD_CAD_PortEnable>:
 8000440:	2803      	cmp	r0, #3
 8000442:	d203      	bcs.n	800044c <USBPD_CAD_PortEnable+0xc>
 8000444:	4a3b      	ldr	r2, [pc, #236]	; (8000534 <.text_6>)
 8000446:	0080      	lsls	r0, r0, #2
 8000448:	5810      	ldr	r0, [r2, r0]
 800044a:	7201      	strb	r1, [r0, #8]
 800044c:	4770      	bx	lr

0800044e <USBPD_CAD_Process>:
 800044e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000450:	2400      	movs	r4, #0
 8000452:	4669      	mov	r1, sp
 8000454:	700c      	strb	r4, [r1, #0]
 8000456:	9401      	str	r4, [sp, #4]
 8000458:	2500      	movs	r5, #0
 800045a:	43ed      	mvns	r5, r5
 800045c:	27c0      	movs	r7, #192	; 0xc0
 800045e:	43ff      	mvns	r7, r7
 8000460:	4834      	ldr	r0, [pc, #208]	; (8000534 <.text_6>)
 8000462:	00a1      	lsls	r1, r4, #2
 8000464:	1846      	adds	r6, r0, r1
 8000466:	6830      	ldr	r0, [r6, #0]
 8000468:	2800      	cmp	r0, #0
 800046a:	d05d      	beq.n	8000528 <USBPD_CAD_Process+0xda>
 800046c:	7a00      	ldrb	r0, [r0, #8]
 800046e:	2801      	cmp	r0, #1
 8000470:	d15a      	bne.n	8000528 <USBPD_CAD_Process+0xda>
 8000472:	aa01      	add	r2, sp, #4
 8000474:	4669      	mov	r1, sp
 8000476:	b2e0      	uxtb	r0, r4
 8000478:	f00a fd3c 	bl	800aef4 <CAD_StateMachine>
 800047c:	42a8      	cmp	r0, r5
 800047e:	d800      	bhi.n	8000482 <USBPD_CAD_Process+0x34>
 8000480:	0005      	movs	r5, r0
 8000482:	4668      	mov	r0, sp
 8000484:	7800      	ldrb	r0, [r0, #0]
 8000486:	2801      	cmp	r0, #1
 8000488:	d004      	beq.n	8000494 <USBPD_CAD_Process+0x46>
 800048a:	2802      	cmp	r0, #2
 800048c:	d012      	beq.n	80004b4 <USBPD_CAD_Process+0x66>
 800048e:	2804      	cmp	r0, #4
 8000490:	d010      	beq.n	80004b4 <USBPD_CAD_Process+0x66>
 8000492:	e031      	b.n	80004f8 <USBPD_CAD_Process+0xaa>
 8000494:	6830      	ldr	r0, [r6, #0]
 8000496:	6801      	ldr	r1, [r0, #0]
 8000498:	680a      	ldr	r2, [r1, #0]
 800049a:	4b33      	ldr	r3, [pc, #204]	; (8000568 <.text_19>)
 800049c:	4013      	ands	r3, r2
 800049e:	600b      	str	r3, [r1, #0]
 80004a0:	6801      	ldr	r1, [r0, #0]
 80004a2:	680a      	ldr	r2, [r1, #0]
 80004a4:	403a      	ands	r2, r7
 80004a6:	600a      	str	r2, [r1, #0]
 80004a8:	6800      	ldr	r0, [r0, #0]
 80004aa:	6801      	ldr	r1, [r0, #0]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	; (800056c <.text_20>)
 80004ae:	400a      	ands	r2, r1
 80004b0:	6002      	str	r2, [r0, #0]
 80004b2:	e025      	b.n	8000500 <USBPD_CAD_Process+0xb2>
 80004b4:	6830      	ldr	r0, [r6, #0]
 80004b6:	6801      	ldr	r1, [r0, #0]
 80004b8:	680b      	ldr	r3, [r1, #0]
 80004ba:	403b      	ands	r3, r7
 80004bc:	469c      	mov	ip, r3
 80004be:	9a01      	ldr	r2, [sp, #4]
 80004c0:	0193      	lsls	r3, r2, #6
 80004c2:	22c0      	movs	r2, #192	; 0xc0
 80004c4:	401a      	ands	r2, r3
 80004c6:	4663      	mov	r3, ip
 80004c8:	431a      	orrs	r2, r3
 80004ca:	600a      	str	r2, [r1, #0]
 80004cc:	6801      	ldr	r1, [r0, #0]
 80004ce:	680a      	ldr	r2, [r1, #0]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	015b      	lsls	r3, r3, #5
 80004d4:	4313      	orrs	r3, r2
 80004d6:	600b      	str	r3, [r1, #0]
 80004d8:	6800      	ldr	r0, [r0, #0]
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	074a      	lsls	r2, r1, #29
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	d103      	bne.n	80004ea <USBPD_CAD_Process+0x9c>
 80004e2:	2208      	movs	r2, #8
 80004e4:	4391      	bics	r1, r2
 80004e6:	6001      	str	r1, [r0, #0]
 80004e8:	e002      	b.n	80004f0 <USBPD_CAD_Process+0xa2>
 80004ea:	2208      	movs	r2, #8
 80004ec:	430a      	orrs	r2, r1
 80004ee:	6002      	str	r2, [r0, #0]
 80004f0:	2168      	movs	r1, #104	; 0x68
 80004f2:	b2e0      	uxtb	r0, r4
 80004f4:	f000 f8e0 	bl	80006b8 <USBPD_PE_Notification>
 80004f8:	4668      	mov	r0, sp
 80004fa:	7800      	ldrb	r0, [r0, #0]
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d013      	beq.n	8000528 <USBPD_CAD_Process+0xda>
 8000500:	9a01      	ldr	r2, [sp, #4]
 8000502:	4668      	mov	r0, sp
 8000504:	7801      	ldrb	r1, [r0, #0]
 8000506:	b2e0      	uxtb	r0, r4
 8000508:	6833      	ldr	r3, [r6, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4798      	blx	r3
 8000510:	4668      	mov	r0, sp
 8000512:	7800      	ldrb	r0, [r0, #0]
 8000514:	2801      	cmp	r0, #1
 8000516:	d003      	beq.n	8000520 <USBPD_CAD_Process+0xd2>
 8000518:	4668      	mov	r0, sp
 800051a:	7800      	ldrb	r0, [r0, #0]
 800051c:	2803      	cmp	r0, #3
 800051e:	d103      	bne.n	8000528 <USBPD_CAD_Process+0xda>
 8000520:	2169      	movs	r1, #105	; 0x69
 8000522:	b2e0      	uxtb	r0, r4
 8000524:	f000 f8c8 	bl	80006b8 <USBPD_PE_Notification>
 8000528:	1c64      	adds	r4, r4, #1
 800052a:	2c03      	cmp	r4, #3
 800052c:	d398      	bcc.n	8000460 <USBPD_CAD_Process+0x12>
 800052e:	0028      	movs	r0, r5
 8000530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000534 <.text_6>:
 8000534:	20000168 	.word	0x20000168

08000538 <.text_7>:
 8000538:	04c11db7 	.word	0x04c11db7

0800053c <.text_8>:
 800053c:	0000fff0 	.word	0x0000fff0

08000540 <.text_9>:
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <.text_10>:
 8000544:	0000c240 	.word	0x0000c240

08000548 <.text_11>:
 8000548:	0000c270 	.word	0x0000c270

0800054c <.text_12>:
 800054c:	e0042000 	.word	0xe0042000

08000550 <.text_13>:
 8000550:	5c001000 	.word	0x5c001000

08000554 <.text_14>:
 8000554:	00000483 	.word	0x00000483

08000558 <.text_15>:
 8000558:	58024c00 	.word	0x58024c00

0800055c <.text_16>:
 800055c:	40023000 	.word	0x40023000

08000560 <.text_17>:
 8000560:	f407a5c2 	.word	0xf407a5c2

08000564 <.text_18>:
 8000564:	20000174 	.word	0x20000174

08000568 <.text_19>:
 8000568:	ffffefff 	.word	0xffffefff

0800056c <.text_20>:
 800056c:	ffff9fff 	.word	0xffff9fff

08000570 <USBPD_CAD_AssertRd>:
 8000570:	b510      	push	{r4, lr}
 8000572:	0004      	movs	r4, r0
 8000574:	f00c f852 	bl	800c61c <USBPDM1_DeAssertRp>
 8000578:	0020      	movs	r0, r4
 800057a:	f00c f859 	bl	800c630 <USBPDM1_AssertRd>
 800057e:	bd10      	pop	{r4, pc}

08000580 <USBPD_CAD_AssertRp>:
 8000580:	b510      	push	{r4, lr}
 8000582:	0004      	movs	r4, r0
 8000584:	f00c f8fa 	bl	800c77c <USBPDM1_DeAssertRd>
 8000588:	0020      	movs	r0, r4
 800058a:	f00b ff8f 	bl	800c4ac <USBPDM1_AssertRp>
 800058e:	bd10      	pop	{r4, pc}

08000590 <USBPD_CAD_EnterErrorRecovery>:
 8000590:	b580      	push	{r7, lr}
 8000592:	f00a fc3d 	bl	800ae10 <CAD_Enter_ErrorRecovery>
 8000596:	bd01      	pop	{r0, pc}

08000598 <USBPD_CAD_GetMemoryConsumption>:
 8000598:	2024      	movs	r0, #36	; 0x24
 800059a:	4770      	bx	lr

0800059c <USBPD_PE_Init>:
 800059c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800059e:	b081      	sub	sp, #4
 80005a0:	0014      	movs	r4, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80005a6:	2900      	cmp	r1, #0
 80005a8:	d101      	bne.n	80005ae <USBPD_PE_Init+0x12>
 80005aa:	2418      	movs	r4, #24
 80005ac:	e03a      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005ae:	4669      	mov	r1, sp
 80005b0:	7008      	strb	r0, [r1, #0]
 80005b2:	4668      	mov	r0, sp
 80005b4:	7800      	ldrb	r0, [r0, #0]
 80005b6:	2803      	cmp	r0, #3
 80005b8:	d301      	bcc.n	80005be <USBPD_PE_Init+0x22>
 80005ba:	2417      	movs	r4, #23
 80005bc:	e032      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005be:	27aa      	movs	r7, #170	; 0xaa
 80005c0:	00bf      	lsls	r7, r7, #2
 80005c2:	0038      	movs	r0, r7
 80005c4:	f017 f938 	bl	8017838 <malloc>
 80005c8:	0005      	movs	r5, r0
 80005ca:	d101      	bne.n	80005d0 <USBPD_PE_Init+0x34>
 80005cc:	2416      	movs	r4, #22
 80005ce:	e029      	b.n	8000624 <USBPD_PE_Init+0x88>
 80005d0:	0039      	movs	r1, r7
 80005d2:	f017 fa74 	bl	8017abe <__aeabi_memclr>
 80005d6:	48a9      	ldr	r0, [pc, #676]	; (800087c <.text_19>)
 80005d8:	4669      	mov	r1, sp
 80005da:	7809      	ldrb	r1, [r1, #0]
 80005dc:	0089      	lsls	r1, r1, #2
 80005de:	5045      	str	r5, [r0, r1]
 80005e0:	9802      	ldr	r0, [sp, #8]
 80005e2:	6028      	str	r0, [r5, #0]
 80005e4:	606c      	str	r4, [r5, #4]
 80005e6:	4668      	mov	r0, sp
 80005e8:	7800      	ldrb	r0, [r0, #0]
 80005ea:	7328      	strb	r0, [r5, #12]
 80005ec:	60ae      	str	r6, [r5, #8]
 80005ee:	20a9      	movs	r0, #169	; 0xa9
 80005f0:	0080      	lsls	r0, r0, #2
 80005f2:	182b      	adds	r3, r5, r0
 80005f4:	002a      	movs	r2, r5
 80005f6:	329c      	adds	r2, #156	; 0x9c
 80005f8:	9902      	ldr	r1, [sp, #8]
 80005fa:	4668      	mov	r0, sp
 80005fc:	7800      	ldrb	r0, [r0, #0]
 80005fe:	f001 fc43 	bl	8001e88 <USBPD_PRL_Init>
 8000602:	0004      	movs	r4, r0
 8000604:	d10e      	bne.n	8000624 <USBPD_PE_Init+0x88>
 8000606:	6868      	ldr	r0, [r5, #4]
 8000608:	6801      	ldr	r1, [r0, #0]
 800060a:	2208      	movs	r2, #8
 800060c:	4391      	bics	r1, r2
 800060e:	6001      	str	r1, [r0, #0]
 8000610:	9802      	ldr	r0, [sp, #8]
 8000612:	7900      	ldrb	r0, [r0, #4]
 8000614:	0783      	lsls	r3, r0, #30
 8000616:	0f9b      	lsrs	r3, r3, #30
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	4668      	mov	r0, sp
 800061e:	7800      	ldrb	r0, [r0, #0]
 8000620:	f001 fc6a 	bl	8001ef8 <USBPD_PRL_SetHeader>
 8000624:	0020      	movs	r0, r4
 8000626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000628 <USBPD_PE_TimerCounter>:
 8000628:	4994      	ldr	r1, [pc, #592]	; (800087c <.text_19>)
 800062a:	0080      	lsls	r0, r0, #2
 800062c:	5808      	ldr	r0, [r1, r0]
 800062e:	4994      	ldr	r1, [pc, #592]	; (8000880 <.text_20>)
 8000630:	084a      	lsrs	r2, r1, #1
 8000632:	8b43      	ldrh	r3, [r0, #26]
 8000634:	4213      	tst	r3, r2
 8000636:	d002      	beq.n	800063e <USBPD_PE_TimerCounter+0x16>
 8000638:	8b43      	ldrh	r3, [r0, #26]
 800063a:	185b      	adds	r3, r3, r1
 800063c:	8343      	strh	r3, [r0, #26]
 800063e:	8b83      	ldrh	r3, [r0, #28]
 8000640:	4213      	tst	r3, r2
 8000642:	d002      	beq.n	800064a <USBPD_PE_TimerCounter+0x22>
 8000644:	8b82      	ldrh	r2, [r0, #28]
 8000646:	1851      	adds	r1, r2, r1
 8000648:	8381      	strh	r1, [r0, #28]
 800064a:	4770      	bx	lr

0800064c <USBPD_PE_TimerCounteUpdate>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	000e      	movs	r6, r1
 8000650:	498a      	ldr	r1, [pc, #552]	; (800087c <.text_19>)
 8000652:	0080      	lsls	r0, r0, #2
 8000654:	580c      	ldr	r4, [r1, r0]
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0209      	lsls	r1, r1, #8
 800065a:	428e      	cmp	r6, r1
 800065c:	da10      	bge.n	8000680 <USBPD_PE_TimerCounteUpdate+0x34>
 800065e:	1e4d      	subs	r5, r1, #1
 8000660:	8b60      	ldrh	r0, [r4, #26]
 8000662:	4228      	tst	r0, r5
 8000664:	d004      	beq.n	8000670 <USBPD_PE_TimerCounteUpdate+0x24>
 8000666:	0031      	movs	r1, r6
 8000668:	8b60      	ldrh	r0, [r4, #26]
 800066a:	f000 fc1d 	bl	8000ea8 <PE_UpdateTimer>
 800066e:	8360      	strh	r0, [r4, #26]
 8000670:	8ba0      	ldrh	r0, [r4, #28]
 8000672:	4228      	tst	r0, r5
 8000674:	d004      	beq.n	8000680 <USBPD_PE_TimerCounteUpdate+0x34>
 8000676:	0031      	movs	r1, r6
 8000678:	8ba0      	ldrh	r0, [r4, #28]
 800067a:	f000 fc15 	bl	8000ea8 <PE_UpdateTimer>
 800067e:	83a0      	strh	r0, [r4, #28]
 8000680:	bd70      	pop	{r4, r5, r6, pc}

08000682 <USBPD_PE_IsCableConnected>:
 8000682:	b510      	push	{r4, lr}
 8000684:	4a7d      	ldr	r2, [pc, #500]	; (800087c <.text_19>)
 8000686:	0080      	lsls	r0, r0, #2
 8000688:	5810      	ldr	r0, [r2, r0]
 800068a:	6842      	ldr	r2, [r0, #4]
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	4cb2      	ldr	r4, [pc, #712]	; (8000958 <.text_24>)
 8000690:	401c      	ands	r4, r3
 8000692:	0309      	lsls	r1, r1, #12
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	015b      	lsls	r3, r3, #5
 8000698:	4019      	ands	r1, r3
 800069a:	4321      	orrs	r1, r4
 800069c:	6011      	str	r1, [r2, #0]
 800069e:	2148      	movs	r1, #72	; 0x48
 80006a0:	7341      	strb	r1, [r0, #13]
 80006a2:	bd10      	pop	{r4, pc}

080006a4 <USBPD_PE_StateMachine_Reset>:
 80006a4:	2148      	movs	r1, #72	; 0x48
 80006a6:	4a75      	ldr	r2, [pc, #468]	; (800087c <.text_19>)
 80006a8:	0080      	lsls	r0, r0, #2
 80006aa:	5810      	ldr	r0, [r2, r0]
 80006ac:	7341      	strb	r1, [r0, #13]
 80006ae:	4770      	bx	lr

080006b0 <USBPD_PE_StateMachine_Stop>:
 80006b0:	b580      	push	{r7, lr}
 80006b2:	f001 fed5 	bl	8002460 <USBPD_PRL_Stop>
 80006b6:	bd01      	pop	{r0, pc}

080006b8 <USBPD_PE_Notification>:
 80006b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80006ba:	0004      	movs	r4, r0
 80006bc:	2803      	cmp	r0, #3
 80006be:	d211      	bcs.n	80006e4 <USBPD_PE_Notification+0x2c>
 80006c0:	000d      	movs	r5, r1
 80006c2:	2000      	movs	r0, #0
 80006c4:	9000      	str	r0, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	002a      	movs	r2, r5
 80006ca:	0021      	movs	r1, r4
 80006cc:	2009      	movs	r0, #9
 80006ce:	4ea3      	ldr	r6, [pc, #652]	; (800095c <.text_25>)
 80006d0:	6836      	ldr	r6, [r6, #0]
 80006d2:	47b0      	blx	r6
 80006d4:	0029      	movs	r1, r5
 80006d6:	0020      	movs	r0, r4
 80006d8:	4a68      	ldr	r2, [pc, #416]	; (800087c <.text_19>)
 80006da:	00a3      	lsls	r3, r4, #2
 80006dc:	58d2      	ldr	r2, [r2, r3]
 80006de:	6892      	ldr	r2, [r2, #8]
 80006e0:	68d2      	ldr	r2, [r2, #12]
 80006e2:	4790      	blx	r2
 80006e4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080006e6 <USBPD_PE_Request_HardReset>:
 80006e6:	b580      	push	{r7, lr}
 80006e8:	4964      	ldr	r1, [pc, #400]	; (800087c <.text_19>)
 80006ea:	0082      	lsls	r2, r0, #2
 80006ec:	5889      	ldr	r1, [r1, r2]
 80006ee:	220f      	movs	r2, #15
 80006f0:	232a      	movs	r3, #42	; 0x2a
 80006f2:	54ca      	strb	r2, [r1, r3]
 80006f4:	6889      	ldr	r1, [r1, #8]
 80006f6:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006f8:	4788      	blx	r1
 80006fa:	2000      	movs	r0, #0
 80006fc:	bd02      	pop	{r1, pc}

080006fe <USBPD_PE_Request_CableReset>:
 80006fe:	2010      	movs	r0, #16
 8000700:	4770      	bx	lr

08000702 <USBPD_PE_Request_CtrlMessage>:
 8000702:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000704:	b094      	sub	sp, #80	; 0x50
 8000706:	000f      	movs	r7, r1
 8000708:	0015      	movs	r5, r2
 800070a:	485c      	ldr	r0, [pc, #368]	; (800087c <.text_19>)
 800070c:	a914      	add	r1, sp, #80	; 0x50
 800070e:	7809      	ldrb	r1, [r1, #0]
 8000710:	0089      	lsls	r1, r1, #2
 8000712:	5846      	ldr	r6, [r0, r1]
 8000714:	2400      	movs	r4, #0
 8000716:	4668      	mov	r0, sp
 8000718:	49ac      	ldr	r1, [pc, #688]	; (80009cc <.text_27>)
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	f017 f9c4 	bl	8017aa8 <__aeabi_memcpy>
 8000720:	2203      	movs	r2, #3
 8000722:	202a      	movs	r0, #42	; 0x2a
 8000724:	5c30      	ldrb	r0, [r6, r0]
 8000726:	2800      	cmp	r0, #0
 8000728:	d104      	bne.n	8000734 <USBPD_PE_Request_CtrlMessage+0x32>
 800072a:	6870      	ldr	r0, [r6, #4]
 800072c:	6803      	ldr	r3, [r0, #0]
 800072e:	04d8      	lsls	r0, r3, #19
 8000730:	0fc0      	lsrs	r0, r0, #31
 8000732:	d101      	bne.n	8000738 <USBPD_PE_Request_CtrlMessage+0x36>
 8000734:	2403      	movs	r4, #3
 8000736:	e03d      	b.n	80007b4 <USBPD_PE_Request_CtrlMessage+0xb2>
 8000738:	6830      	ldr	r0, [r6, #0]
 800073a:	6840      	ldr	r0, [r0, #4]
 800073c:	0701      	lsls	r1, r0, #28
 800073e:	0fc8      	lsrs	r0, r1, #31
 8000740:	0559      	lsls	r1, r3, #21
 8000742:	0f49      	lsrs	r1, r1, #29
 8000744:	2903      	cmp	r1, #3
 8000746:	d101      	bne.n	800074c <USBPD_PE_Request_CtrlMessage+0x4a>
 8000748:	2108      	movs	r1, #8
 800074a:	e000      	b.n	800074e <USBPD_PE_Request_CtrlMessage+0x4c>
 800074c:	2100      	movs	r1, #0
 800074e:	401a      	ands	r2, r3
 8000750:	2a02      	cmp	r2, #2
 8000752:	d101      	bne.n	8000758 <USBPD_PE_Request_CtrlMessage+0x56>
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	e000      	b.n	800075a <USBPD_PE_Request_CtrlMessage+0x58>
 8000758:	2200      	movs	r2, #0
 800075a:	4301      	orrs	r1, r0
 800075c:	430a      	orrs	r2, r1
 800075e:	2012      	movs	r0, #18
 8000760:	4310      	orrs	r0, r2
 8000762:	07c1      	lsls	r1, r0, #31
 8000764:	d502      	bpl.n	800076c <USBPD_PE_Request_CtrlMessage+0x6a>
 8000766:	0001      	movs	r1, r0
 8000768:	2020      	movs	r0, #32
 800076a:	4308      	orrs	r0, r1
 800076c:	0079      	lsls	r1, r7, #1
 800076e:	19c9      	adds	r1, r1, r7
 8000770:	466a      	mov	r2, sp
 8000772:	5c53      	ldrb	r3, [r2, r1]
 8000774:	4018      	ands	r0, r3
 8000776:	4298      	cmp	r0, r3
 8000778:	d001      	beq.n	800077e <USBPD_PE_Request_CtrlMessage+0x7c>
 800077a:	2402      	movs	r4, #2
 800077c:	e01a      	b.n	80007b4 <USBPD_PE_Request_CtrlMessage+0xb2>
 800077e:	232b      	movs	r3, #43	; 0x2b
 8000780:	54f4      	strb	r4, [r6, r3]
 8000782:	0030      	movs	r0, r6
 8000784:	3078      	adds	r0, #120	; 0x78
 8000786:	2f0d      	cmp	r7, #13
 8000788:	d007      	beq.n	800079a <USBPD_PE_Request_CtrlMessage+0x98>
 800078a:	2f16      	cmp	r7, #22
 800078c:	d002      	beq.n	8000794 <USBPD_PE_Request_CtrlMessage+0x92>
 800078e:	2f18      	cmp	r7, #24
 8000790:	d003      	beq.n	800079a <USBPD_PE_Request_CtrlMessage+0x98>
 8000792:	e003      	b.n	800079c <USBPD_PE_Request_CtrlMessage+0x9a>
 8000794:	2316      	movs	r3, #22
 8000796:	7003      	strb	r3, [r0, #0]
 8000798:	e000      	b.n	800079c <USBPD_PE_Request_CtrlMessage+0x9a>
 800079a:	54f5      	strb	r5, [r6, r3]
 800079c:	1853      	adds	r3, r2, r1
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	7043      	strb	r3, [r0, #1]
 80007a2:	1850      	adds	r0, r2, r1
 80007a4:	7880      	ldrb	r0, [r0, #2]
 80007a6:	212a      	movs	r1, #42	; 0x2a
 80007a8:	5470      	strb	r0, [r6, r1]
 80007aa:	a814      	add	r0, sp, #80	; 0x50
 80007ac:	7800      	ldrb	r0, [r0, #0]
 80007ae:	68b1      	ldr	r1, [r6, #8]
 80007b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80007b2:	4788      	blx	r1
 80007b4:	0020      	movs	r0, r4
 80007b6:	b015      	add	sp, #84	; 0x54
 80007b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007ba <USBPD_PE_Request_DataMessage>:
 80007ba:	b510      	push	{r4, lr}
 80007bc:	4a2f      	ldr	r2, [pc, #188]	; (800087c <.text_19>)
 80007be:	0080      	lsls	r0, r0, #2
 80007c0:	5812      	ldr	r2, [r2, r0]
 80007c2:	2002      	movs	r0, #2
 80007c4:	232a      	movs	r3, #42	; 0x2a
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <USBPD_PE_Request_DataMessage+0x1c>
 80007cc:	6853      	ldr	r3, [r2, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	04dc      	lsls	r4, r3, #19
 80007d2:	0fe4      	lsrs	r4, r4, #31
 80007d4:	d101      	bne.n	80007da <USBPD_PE_Request_DataMessage+0x20>
 80007d6:	2003      	movs	r0, #3
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	2300      	movs	r3, #0
 80007dc:	242b      	movs	r4, #43	; 0x2b
 80007de:	5513      	strb	r3, [r2, r4]
 80007e0:	1f89      	subs	r1, r1, #6
 80007e2:	2901      	cmp	r1, #1
 80007e4:	d900      	bls.n	80007e8 <USBPD_PE_Request_DataMessage+0x2e>
 80007e6:	2010      	movs	r0, #16
 80007e8:	bd10      	pop	{r4, pc}

080007ea <USBPD_PE_Send_Request>:
 80007ea:	b570      	push	{r4, r5, r6, lr}
 80007ec:	000b      	movs	r3, r1
 80007ee:	4923      	ldr	r1, [pc, #140]	; (800087c <.text_19>)
 80007f0:	0084      	lsls	r4, r0, #2
 80007f2:	590d      	ldr	r5, [r1, r4]
 80007f4:	2102      	movs	r1, #2
 80007f6:	242a      	movs	r4, #42	; 0x2a
 80007f8:	5d2c      	ldrb	r4, [r5, r4]
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d104      	bne.n	8000808 <USBPD_PE_Send_Request+0x1e>
 80007fe:	686c      	ldr	r4, [r5, #4]
 8000800:	6824      	ldr	r4, [r4, #0]
 8000802:	04e6      	lsls	r6, r4, #19
 8000804:	0ff6      	lsrs	r6, r6, #31
 8000806:	d101      	bne.n	800080c <USBPD_PE_Send_Request+0x22>
 8000808:	2103      	movs	r1, #3
 800080a:	e015      	b.n	8000838 <USBPD_PE_Send_Request+0x4e>
 800080c:	0564      	lsls	r4, r4, #21
 800080e:	0f64      	lsrs	r4, r4, #29
 8000810:	2c03      	cmp	r4, #3
 8000812:	d111      	bne.n	8000838 <USBPD_PE_Send_Request+0x4e>
 8000814:	2145      	movs	r1, #69	; 0x45
 8000816:	242a      	movs	r4, #42	; 0x2a
 8000818:	5529      	strb	r1, [r5, r4]
 800081a:	616b      	str	r3, [r5, #20]
 800081c:	6929      	ldr	r1, [r5, #16]
 800081e:	2318      	movs	r3, #24
 8000820:	4399      	bics	r1, r3
 8000822:	00d2      	lsls	r2, r2, #3
 8000824:	4013      	ands	r3, r2
 8000826:	430b      	orrs	r3, r1
 8000828:	612b      	str	r3, [r5, #16]
 800082a:	2400      	movs	r4, #0
 800082c:	222b      	movs	r2, #43	; 0x2b
 800082e:	54ac      	strb	r4, [r5, r2]
 8000830:	68a9      	ldr	r1, [r5, #8]
 8000832:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000834:	4788      	blx	r1
 8000836:	2100      	movs	r1, #0
 8000838:	0008      	movs	r0, r1
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <PE_Send_RESET>:
 800083c:	b538      	push	{r3, r4, r5, lr}
 800083e:	0005      	movs	r5, r0
 8000840:	000c      	movs	r4, r1
 8000842:	2c05      	cmp	r4, #5
 8000844:	d101      	bne.n	800084a <PE_Send_RESET+0xe>
 8000846:	211f      	movs	r1, #31
 8000848:	e000      	b.n	800084c <PE_Send_RESET+0x10>
 800084a:	215e      	movs	r1, #94	; 0x5e
 800084c:	7b28      	ldrb	r0, [r5, #12]
 800084e:	f7ff ff33 	bl	80006b8 <USBPD_PE_Notification>
 8000852:	0021      	movs	r1, r4
 8000854:	7b28      	ldrb	r0, [r5, #12]
 8000856:	f001 fda1 	bl	800239c <USBPD_PRL_ResetRequestProcess>
 800085a:	f3ef 8010 	mrs	r0, PRIMASK
 800085e:	b672      	cpsid	i
 8000860:	2100      	movs	r1, #0
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	54a9      	strb	r1, [r5, r2]
 8000866:	f380 8810 	msr	PRIMASK, r0
 800086a:	bd31      	pop	{r0, r4, r5, pc}

0800086c <PE_Get_SpecRevision>:
 800086c:	4903      	ldr	r1, [pc, #12]	; (800087c <.text_19>)
 800086e:	0080      	lsls	r0, r0, #2
 8000870:	5808      	ldr	r0, [r1, r0]
 8000872:	6840      	ldr	r0, [r0, #4]
 8000874:	7800      	ldrb	r0, [r0, #0]
 8000876:	0780      	lsls	r0, r0, #30
 8000878:	0f80      	lsrs	r0, r0, #30
 800087a:	4770      	bx	lr

0800087c <.text_19>:
 800087c:	20000178 	.word	0x20000178

08000880 <.text_20>:
 8000880:	0000ffff 	.word	0x0000ffff

08000884 <PE_Get_RxEvent>:
 8000884:	b530      	push	{r4, r5, lr}
 8000886:	0001      	movs	r1, r0
 8000888:	2014      	movs	r0, #20
 800088a:	f3ef 8210 	mrs	r2, PRIMASK
 800088e:	b672      	cpsid	i
 8000890:	2334      	movs	r3, #52	; 0x34
 8000892:	5ccb      	ldrb	r3, [r1, r3]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d029      	beq.n	80008ec <PE_Get_RxEvent+0x68>
 8000898:	000c      	movs	r4, r1
 800089a:	3470      	adds	r4, #112	; 0x70
 800089c:	5ce4      	ldrb	r4, [r4, r3]
 800089e:	0664      	lsls	r4, r4, #25
 80008a0:	d401      	bmi.n	80008a6 <PE_Get_RxEvent+0x22>
 80008a2:	2003      	movs	r0, #3
 80008a4:	e022      	b.n	80008ec <PE_Get_RxEvent+0x68>
 80008a6:	241e      	movs	r4, #30
 80008a8:	4363      	muls	r3, r4
 80008aa:	18cb      	adds	r3, r1, r3
 80008ac:	3317      	adds	r3, #23
 80008ae:	630b      	str	r3, [r1, #48]	; 0x30
 80008b0:	781c      	ldrb	r4, [r3, #0]
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	18e3      	adds	r3, r4, r3
 80008b8:	858b      	strh	r3, [r1, #44]	; 0x2c
 80008ba:	000b      	movs	r3, r1
 80008bc:	3328      	adds	r3, #40	; 0x28
 80008be:	000c      	movs	r4, r1
 80008c0:	3470      	adds	r4, #112	; 0x70
 80008c2:	2534      	movs	r5, #52	; 0x34
 80008c4:	5d49      	ldrb	r1, [r1, r5]
 80008c6:	5c61      	ldrb	r1, [r4, r1]
 80008c8:	06c9      	lsls	r1, r1, #27
 80008ca:	0ec9      	lsrs	r1, r1, #27
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d004      	beq.n	80008da <PE_Get_RxEvent+0x56>
 80008d0:	2902      	cmp	r1, #2
 80008d2:	d005      	beq.n	80008e0 <PE_Get_RxEvent+0x5c>
 80008d4:	2904      	cmp	r1, #4
 80008d6:	d006      	beq.n	80008e6 <PE_Get_RxEvent+0x62>
 80008d8:	e008      	b.n	80008ec <PE_Get_RxEvent+0x68>
 80008da:	2011      	movs	r0, #17
 80008dc:	2100      	movs	r1, #0
 80008de:	e004      	b.n	80008ea <PE_Get_RxEvent+0x66>
 80008e0:	2012      	movs	r0, #18
 80008e2:	2101      	movs	r1, #1
 80008e4:	e001      	b.n	80008ea <PE_Get_RxEvent+0x66>
 80008e6:	2013      	movs	r0, #19
 80008e8:	2102      	movs	r1, #2
 80008ea:	7019      	strb	r1, [r3, #0]
 80008ec:	f382 8810 	msr	PRIMASK, r2
 80008f0:	bd30      	pop	{r4, r5, pc}

080008f2 <PE_Clear_RxEvent>:
 80008f2:	b538      	push	{r3, r4, r5, lr}
 80008f4:	0001      	movs	r1, r0
 80008f6:	f3ef 8010 	mrs	r0, PRIMASK
 80008fa:	b672      	cpsid	i
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	5c8a      	ldrb	r2, [r1, r2]
 8000900:	2a00      	cmp	r2, #0
 8000902:	d016      	beq.n	8000932 <PE_Clear_RxEvent+0x40>
 8000904:	1e53      	subs	r3, r2, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2200      	movs	r2, #0
 800090a:	000d      	movs	r5, r1
 800090c:	3571      	adds	r5, #113	; 0x71
 800090e:	54ea      	strb	r2, [r5, r3]
 8000910:	1e5b      	subs	r3, r3, #1
 8000912:	419b      	sbcs	r3, r3
 8000914:	0fdb      	lsrs	r3, r3, #31
 8000916:	000c      	movs	r4, r1
 8000918:	3471      	adds	r4, #113	; 0x71
 800091a:	5ce4      	ldrb	r4, [r4, r3]
 800091c:	0664      	lsls	r4, r4, #25
 800091e:	d506      	bpl.n	800092e <PE_Clear_RxEvent+0x3c>
 8000920:	1c5b      	adds	r3, r3, #1
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	548b      	strb	r3, [r1, r2]
 8000926:	f380 8810 	msr	PRIMASK, r0
 800092a:	7b08      	ldrb	r0, [r1, #12]
 800092c:	e161      	b.n	8000bf2 <.text_39>
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	54ca      	strb	r2, [r1, r3]
 8000932:	f380 8810 	msr	PRIMASK, r0
 8000936:	bd31      	pop	{r0, r4, r5, pc}

08000938 <PE_PRL_Control_RxEvent>:
 8000938:	49b0      	ldr	r1, [pc, #704]	; (8000bfc <.text_40>)
 800093a:	0080      	lsls	r0, r0, #2
 800093c:	580a      	ldr	r2, [r1, r0]
 800093e:	2000      	movs	r0, #0
 8000940:	f3ef 8110 	mrs	r1, PRIMASK
 8000944:	b672      	cpsid	i
 8000946:	2334      	movs	r3, #52	; 0x34
 8000948:	5cd2      	ldrb	r2, [r2, r3]
 800094a:	2a00      	cmp	r2, #0
 800094c:	d000      	beq.n	8000950 <PE_PRL_Control_RxEvent+0x18>
 800094e:	2001      	movs	r0, #1
 8000950:	f381 8810 	msr	PRIMASK, r1
 8000954:	4770      	bx	lr
	...

08000958 <.text_24>:
 8000958:	ffffefff 	.word	0xffffefff

0800095c <.text_25>:
 800095c:	20000000 	.word	0x20000000

08000960 <PE_Check_AMSConflict>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	0005      	movs	r5, r0
 8000964:	2400      	movs	r4, #0
 8000966:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8000968:	49a5      	ldr	r1, [pc, #660]	; (8000c00 <.text_41>)
 800096a:	4001      	ands	r1, r0
 800096c:	290d      	cmp	r1, #13
 800096e:	d101      	bne.n	8000974 <PE_Check_AMSConflict+0x14>
 8000970:	2010      	movs	r0, #16
 8000972:	e01b      	b.n	80009ac <PE_Check_AMSConflict+0x4c>
 8000974:	2603      	movs	r6, #3
 8000976:	200f      	movs	r0, #15
 8000978:	7e29      	ldrb	r1, [r5, #24]
 800097a:	2900      	cmp	r1, #0
 800097c:	d011      	beq.n	80009a2 <PE_Check_AMSConflict+0x42>
 800097e:	1e49      	subs	r1, r1, #1
 8000980:	2901      	cmp	r1, #1
 8000982:	d912      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000984:	1e89      	subs	r1, r1, #2
 8000986:	d011      	beq.n	80009ac <PE_Check_AMSConflict+0x4c>
 8000988:	1e49      	subs	r1, r1, #1
 800098a:	d01c      	beq.n	80009c6 <PE_Check_AMSConflict+0x66>
 800098c:	1e49      	subs	r1, r1, #1
 800098e:	2909      	cmp	r1, #9
 8000990:	d90b      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000992:	390b      	subs	r1, #11
 8000994:	2901      	cmp	r1, #1
 8000996:	d908      	bls.n	80009aa <PE_Check_AMSConflict+0x4a>
 8000998:	1e89      	subs	r1, r1, #2
 800099a:	d004      	beq.n	80009a6 <PE_Check_AMSConflict+0x46>
 800099c:	394d      	subs	r1, #77	; 0x4d
 800099e:	d004      	beq.n	80009aa <PE_Check_AMSConflict+0x4a>
 80009a0:	e006      	b.n	80009b0 <PE_Check_AMSConflict+0x50>
 80009a2:	736e      	strb	r6, [r5, #13]
 80009a4:	e010      	b.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009a6:	7368      	strb	r0, [r5, #13]
 80009a8:	e00e      	b.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009aa:	2011      	movs	r0, #17
 80009ac:	7368      	strb	r0, [r5, #13]
 80009ae:	e00a      	b.n	80009c6 <PE_Check_AMSConflict+0x66>
 80009b0:	215c      	movs	r1, #92	; 0x5c
 80009b2:	7b28      	ldrb	r0, [r5, #12]
 80009b4:	f7ff fe80 	bl	80006b8 <USBPD_PE_Notification>
 80009b8:	736e      	strb	r6, [r5, #13]
 80009ba:	6868      	ldr	r0, [r5, #4]
 80009bc:	6800      	ldr	r0, [r0, #0]
 80009be:	0540      	lsls	r0, r0, #21
 80009c0:	0f40      	lsrs	r0, r0, #29
 80009c2:	2803      	cmp	r0, #3
 80009c4:	d000      	beq.n	80009c8 <PE_Check_AMSConflict+0x68>
 80009c6:	2415      	movs	r4, #21
 80009c8:	0020      	movs	r0, r4
 80009ca:	bd70      	pop	{r4, r5, r6, pc}

080009cc <.text_27>:
 80009cc:	0801842c 	.word	0x0801842c

080009d0 <PE_PRL_ResetReceived>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	0004      	movs	r4, r0
 80009d4:	4889      	ldr	r0, [pc, #548]	; (8000bfc <.text_40>)
 80009d6:	00a2      	lsls	r2, r4, #2
 80009d8:	5885      	ldr	r5, [r0, r2]
 80009da:	2905      	cmp	r1, #5
 80009dc:	d115      	bne.n	8000a0a <PE_PRL_ResetReceived+0x3a>
 80009de:	6868      	ldr	r0, [r5, #4]
 80009e0:	6801      	ldr	r1, [r0, #0]
 80009e2:	2210      	movs	r2, #16
 80009e4:	4391      	bics	r1, r2
 80009e6:	6001      	str	r1, [r0, #0]
 80009e8:	6928      	ldr	r0, [r5, #16]
 80009ea:	4986      	ldr	r1, [pc, #536]	; (8000c04 <.text_42>)
 80009ec:	4001      	ands	r1, r0
 80009ee:	0150      	lsls	r0, r2, #5
 80009f0:	4308      	orrs	r0, r1
 80009f2:	6128      	str	r0, [r5, #16]
 80009f4:	2014      	movs	r0, #20
 80009f6:	212a      	movs	r1, #42	; 0x2a
 80009f8:	5468      	strb	r0, [r5, r1]
 80009fa:	2000      	movs	r0, #0
 80009fc:	2134      	movs	r1, #52	; 0x34
 80009fe:	5468      	strb	r0, [r5, r1]
 8000a00:	211e      	movs	r1, #30
 8000a02:	7b28      	ldrb	r0, [r5, #12]
 8000a04:	f7ff fe58 	bl	80006b8 <USBPD_PE_Notification>
 8000a08:	e004      	b.n	8000a14 <PE_PRL_ResetReceived+0x44>
 8000a0a:	6928      	ldr	r0, [r5, #16]
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	02c9      	lsls	r1, r1, #11
 8000a10:	4301      	orrs	r1, r0
 8000a12:	6129      	str	r1, [r5, #16]
 8000a14:	0020      	movs	r0, r4
 8000a16:	68a9      	ldr	r1, [r5, #8]
 8000a18:	e0ec      	b.n	8000bf4 <.text_39+0x2>

08000a1a <PE_PRL_BistCompleted>:
 8000a1a:	4770      	bx	lr

08000a1c <PE_Reset_HardReset>:
 8000a1c:	b538      	push	{r3, r4, r5, lr}
 8000a1e:	0004      	movs	r4, r0
 8000a20:	202a      	movs	r0, #42	; 0x2a
 8000a22:	5c20      	ldrb	r0, [r4, r0]
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d003      	beq.n	8000a30 <PE_Reset_HardReset+0x14>
 8000a28:	215b      	movs	r1, #91	; 0x5b
 8000a2a:	7b20      	ldrb	r0, [r4, #12]
 8000a2c:	f7ff fe44 	bl	80006b8 <USBPD_PE_Notification>
 8000a30:	0020      	movs	r0, r4
 8000a32:	f000 f819 	bl	8000a68 <PE_Reset_ZI>
 8000a36:	2503      	movs	r5, #3
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	6843      	ldr	r3, [r0, #4]
 8000a3c:	402b      	ands	r3, r5
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	7b20      	ldrb	r0, [r4, #12]
 8000a44:	f001 fa58 	bl	8001ef8 <USBPD_PRL_SetHeader>
 8000a48:	6860      	ldr	r0, [r4, #4]
 8000a4a:	6801      	ldr	r1, [r0, #0]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4391      	bics	r1, r2
 8000a50:	6001      	str	r1, [r0, #0]
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	6852      	ldr	r2, [r2, #4]
 8000a56:	4015      	ands	r5, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4391      	bics	r1, r2
 8000a5c:	430d      	orrs	r5, r1
 8000a5e:	6005      	str	r5, [r0, #0]
 8000a60:	7b20      	ldrb	r0, [r4, #12]
 8000a62:	f001 fcda 	bl	800241a <USBPD_PRL_Reset>
 8000a66:	bd31      	pop	{r0, r4, r5, pc}

08000a68 <PE_Reset_ZI>:
 8000a68:	b51c      	push	{r2, r3, r4, lr}
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	9000      	str	r0, [sp, #0]
 8000a70:	6860      	ldr	r0, [r4, #4]
 8000a72:	6801      	ldr	r1, [r0, #0]
 8000a74:	2210      	movs	r2, #16
 8000a76:	4391      	bics	r1, r2
 8000a78:	6001      	str	r1, [r0, #0]
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0020      	movs	r0, r4
 8000a7e:	f000 fa27 	bl	8000ed0 <PE_SetPowerNegotiation>
 8000a82:	216c      	movs	r1, #108	; 0x6c
 8000a84:	0020      	movs	r0, r4
 8000a86:	3010      	adds	r0, #16
 8000a88:	f017 f819 	bl	8017abe <__aeabi_memclr>
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	466a      	mov	r2, sp
 8000a90:	2102      	movs	r1, #2
 8000a92:	7b20      	ldrb	r0, [r4, #12]
 8000a94:	68a4      	ldr	r4, [r4, #8]
 8000a96:	69a4      	ldr	r4, [r4, #24]
 8000a98:	47a0      	blx	r4
 8000a9a:	bd13      	pop	{r0, r1, r4, pc}

08000a9c <PE_Reset_Counter>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	307c      	adds	r0, #124	; 0x7c
 8000aa2:	f017 f80c 	bl	8017abe <__aeabi_memclr>
 8000aa6:	bd01      	pop	{r0, pc}

08000aa8 <PE_ExtRevisionInteroperability>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4953      	ldr	r1, [pc, #332]	; (8000bfc <.text_40>)
 8000aae:	0083      	lsls	r3, r0, #2
 8000ab0:	58cb      	ldr	r3, [r1, r3]
 8000ab2:	685c      	ldr	r4, [r3, #4]
 8000ab4:	6825      	ldr	r5, [r4, #0]
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	2603      	movs	r6, #3
 8000aba:	402e      	ands	r6, r5
 8000abc:	42b2      	cmp	r2, r6
 8000abe:	db00      	blt.n	8000ac2 <PE_ExtRevisionInteroperability+0x1a>
 8000ac0:	0032      	movs	r2, r6
 8000ac2:	438d      	bics	r5, r1
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	432a      	orrs	r2, r5
 8000ac8:	6022      	str	r2, [r4, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	6814      	ldr	r4, [r2, #0]
 8000ace:	2503      	movs	r5, #3
 8000ad0:	4025      	ands	r5, r4
 8000ad2:	2d01      	cmp	r5, #1
 8000ad4:	d101      	bne.n	8000ada <PE_ExtRevisionInteroperability+0x32>
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	e000      	b.n	8000adc <PE_ExtRevisionInteroperability+0x34>
 8000ada:	2520      	movs	r5, #32
 8000adc:	2620      	movs	r6, #32
 8000ade:	43b4      	bics	r4, r6
 8000ae0:	4325      	orrs	r5, r4
 8000ae2:	6015      	str	r5, [r2, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	4011      	ands	r1, r2
 8000aea:	f001 fa37 	bl	8001f5c <USBPD_PRL_SetHeaderSpecification>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}

08000af0 <PE_PRL_FastRoleSwapReception>:
 8000af0:	4942      	ldr	r1, [pc, #264]	; (8000bfc <.text_40>)
 8000af2:	0082      	lsls	r2, r0, #2
 8000af4:	5889      	ldr	r1, [r1, r2]
 8000af6:	7e0a      	ldrb	r2, [r1, #24]
 8000af8:	2a09      	cmp	r2, #9
 8000afa:	d100      	bne.n	8000afe <PE_PRL_FastRoleSwapReception+0xe>
 8000afc:	4770      	bx	lr
 8000afe:	b510      	push	{r4, lr}
 8000b00:	684a      	ldr	r2, [r1, #4]
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	2410      	movs	r4, #16
 8000b06:	431c      	orrs	r4, r3
 8000b08:	6014      	str	r4, [r2, #0]
 8000b0a:	690a      	ldr	r2, [r1, #16]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4313      	orrs	r3, r2
 8000b12:	610b      	str	r3, [r1, #16]
 8000b14:	6889      	ldr	r1, [r1, #8]
 8000b16:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000b18:	4788      	blx	r1
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <PE_PRL_PostReceiveEvent>:
 8000b1c:	b530      	push	{r4, r5, lr}
 8000b1e:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <.text_40>)
 8000b20:	0080      	lsls	r0, r0, #2
 8000b22:	5812      	ldr	r2, [r2, r0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	2571      	movs	r5, #113	; 0x71
 8000b2a:	18d4      	adds	r4, r2, r3
 8000b2c:	5d64      	ldrb	r4, [r4, r5]
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d004      	beq.n	8000b3c <PE_PRL_PostReceiveEvent+0x20>
 8000b32:	1c5b      	adds	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d9f7      	bls.n	8000b2a <PE_PRL_PostReceiveEvent+0xe>
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	18d4      	adds	r4, r2, r3
 8000b40:	5560      	strb	r0, [r4, r5]
 8000b42:	2001      	movs	r0, #1
 8000b44:	5d64      	ldrb	r4, [r4, r5]
 8000b46:	2501      	movs	r5, #1
 8000b48:	408d      	lsls	r5, r1
 8000b4a:	4325      	orrs	r5, r4
 8000b4c:	18d1      	adds	r1, r2, r3
 8000b4e:	2271      	movs	r2, #113	; 0x71
 8000b50:	548d      	strb	r5, [r1, r2]
 8000b52:	bd30      	pop	{r4, r5, pc}

08000b54 <PE_PRL_PostReceiveEventError>:
 8000b54:	b530      	push	{r4, r5, lr}
 8000b56:	4929      	ldr	r1, [pc, #164]	; (8000bfc <.text_40>)
 8000b58:	0080      	lsls	r0, r0, #2
 8000b5a:	5809      	ldr	r1, [r1, r0]
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	2200      	movs	r2, #0
 8000b60:	b2d3      	uxtb	r3, r2
 8000b62:	18cb      	adds	r3, r1, r3
 8000b64:	2471      	movs	r4, #113	; 0x71
 8000b66:	5d1c      	ldrb	r4, [r3, r4]
 8000b68:	2560      	movs	r5, #96	; 0x60
 8000b6a:	4025      	ands	r5, r4
 8000b6c:	2d20      	cmp	r5, #32
 8000b6e:	d004      	beq.n	8000b7a <PE_PRL_PostReceiveEventError+0x26>
 8000b70:	1c52      	adds	r2, r2, #1
 8000b72:	b2d3      	uxtb	r3, r2
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d3f3      	bcc.n	8000b60 <PE_PRL_PostReceiveEventError+0xc>
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	2171      	movs	r1, #113	; 0x71
 8000b7c:	5458      	strb	r0, [r3, r1]
 8000b7e:	bd30      	pop	{r4, r5, pc}

08000b80 <PE_PRL_PostReceiveEventCopy>:
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <.text_40>)
 8000b84:	0080      	lsls	r0, r0, #2
 8000b86:	5813      	ldr	r3, [r2, r0]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	b2d0      	uxtb	r0, r2
 8000b8c:	181c      	adds	r4, r3, r0
 8000b8e:	2571      	movs	r5, #113	; 0x71
 8000b90:	5d64      	ldrb	r4, [r4, r5]
 8000b92:	2560      	movs	r5, #96	; 0x60
 8000b94:	4025      	ands	r5, r4
 8000b96:	2d20      	cmp	r5, #32
 8000b98:	d004      	beq.n	8000ba4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000b9a:	1c52      	adds	r2, r2, #1
 8000b9c:	b2d0      	uxtb	r0, r2
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	d3f3      	bcc.n	8000b8a <PE_PRL_PostReceiveEventCopy+0xa>
 8000ba2:	bd31      	pop	{r0, r4, r5, pc}
 8000ba4:	221e      	movs	r2, #30
 8000ba6:	241e      	movs	r4, #30
 8000ba8:	4360      	muls	r0, r4
 8000baa:	1818      	adds	r0, r3, r0
 8000bac:	3035      	adds	r0, #53	; 0x35
 8000bae:	f016 ff7b 	bl	8017aa8 <__aeabi_memcpy>
 8000bb2:	bd31      	pop	{r0, r4, r5, pc}

08000bb4 <PE_PRL_PostReceiveEventComplete>:
 8000bb4:	b538      	push	{r3, r4, r5, lr}
 8000bb6:	4911      	ldr	r1, [pc, #68]	; (8000bfc <.text_40>)
 8000bb8:	0082      	lsls	r2, r0, #2
 8000bba:	5889      	ldr	r1, [r1, r2]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	18cc      	adds	r4, r1, r3
 8000bc2:	2571      	movs	r5, #113	; 0x71
 8000bc4:	5d64      	ldrb	r4, [r4, r5]
 8000bc6:	2560      	movs	r5, #96	; 0x60
 8000bc8:	4025      	ands	r5, r4
 8000bca:	2d20      	cmp	r5, #32
 8000bcc:	d003      	beq.n	8000bd6 <PE_PRL_PostReceiveEventComplete+0x22>
 8000bce:	b2d3      	uxtb	r3, r2
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d3f4      	bcc.n	8000bbe <PE_PRL_PostReceiveEventComplete+0xa>
 8000bd4:	bd31      	pop	{r0, r4, r5, pc}
 8000bd6:	18cc      	adds	r4, r1, r3
 8000bd8:	2571      	movs	r5, #113	; 0x71
 8000bda:	5d64      	ldrb	r4, [r4, r5]
 8000bdc:	2540      	movs	r5, #64	; 0x40
 8000bde:	4325      	orrs	r5, r4
 8000be0:	18cb      	adds	r3, r1, r3
 8000be2:	2471      	movs	r4, #113	; 0x71
 8000be4:	551d      	strb	r5, [r3, r4]
 8000be6:	2334      	movs	r3, #52	; 0x34
 8000be8:	5ccb      	ldrb	r3, [r1, r3]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <.text_39>
 8000bee:	2334      	movs	r3, #52	; 0x34
 8000bf0:	54ca      	strb	r2, [r1, r3]

08000bf2 <.text_39>:
 8000bf2:	6889      	ldr	r1, [r1, #8]
 8000bf4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000bf6:	4788      	blx	r1
 8000bf8:	bd31      	pop	{r0, r4, r5, pc}
	...

08000bfc <.text_40>:
 8000bfc:	20000178 	.word	0x20000178

08000c00 <.text_41>:
 8000c00:	0000f01f 	.word	0x0000f01f

08000c04 <.text_42>:
 8000c04:	fffff9ff 	.word	0xfffff9ff

08000c08 <PE_SubStateMachine_Generic>:
 8000c08:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	0004      	movs	r4, r0
 8000c0e:	2502      	movs	r5, #2
 8000c10:	2000      	movs	r0, #0
 8000c12:	9003      	str	r0, [sp, #12]
 8000c14:	2603      	movs	r6, #3
 8000c16:	2714      	movs	r7, #20
 8000c18:	7b60      	ldrb	r0, [r4, #13]
 8000c1a:	2801      	cmp	r0, #1
 8000c1c:	d100      	bne.n	8000c20 <PE_SubStateMachine_Generic+0x18>
 8000c1e:	e109      	b.n	8000e34 <PE_SubStateMachine_Generic+0x22c>
 8000c20:	2818      	cmp	r0, #24
 8000c22:	d01c      	beq.n	8000c5e <PE_SubStateMachine_Generic+0x56>
 8000c24:	2819      	cmp	r0, #25
 8000c26:	d025      	beq.n	8000c74 <PE_SubStateMachine_Generic+0x6c>
 8000c28:	281d      	cmp	r0, #29
 8000c2a:	d06a      	beq.n	8000d02 <PE_SubStateMachine_Generic+0xfa>
 8000c2c:	2827      	cmp	r0, #39	; 0x27
 8000c2e:	d100      	bne.n	8000c32 <PE_SubStateMachine_Generic+0x2a>
 8000c30:	e087      	b.n	8000d42 <PE_SubStateMachine_Generic+0x13a>
 8000c32:	2828      	cmp	r0, #40	; 0x28
 8000c34:	d100      	bne.n	8000c38 <PE_SubStateMachine_Generic+0x30>
 8000c36:	e090      	b.n	8000d5a <PE_SubStateMachine_Generic+0x152>
 8000c38:	2829      	cmp	r0, #41	; 0x29
 8000c3a:	d100      	bne.n	8000c3e <PE_SubStateMachine_Generic+0x36>
 8000c3c:	e098      	b.n	8000d70 <PE_SubStateMachine_Generic+0x168>
 8000c3e:	284b      	cmp	r0, #75	; 0x4b
 8000c40:	d100      	bne.n	8000c44 <PE_SubStateMachine_Generic+0x3c>
 8000c42:	e09f      	b.n	8000d84 <PE_SubStateMachine_Generic+0x17c>
 8000c44:	2864      	cmp	r0, #100	; 0x64
 8000c46:	d100      	bne.n	8000c4a <PE_SubStateMachine_Generic+0x42>
 8000c48:	e0fd      	b.n	8000e46 <PE_SubStateMachine_Generic+0x23e>
 8000c4a:	2867      	cmp	r0, #103	; 0x67
 8000c4c:	d100      	bne.n	8000c50 <PE_SubStateMachine_Generic+0x48>
 8000c4e:	e0b2      	b.n	8000db6 <PE_SubStateMachine_Generic+0x1ae>
 8000c50:	2868      	cmp	r0, #104	; 0x68
 8000c52:	d100      	bne.n	8000c56 <PE_SubStateMachine_Generic+0x4e>
 8000c54:	e0bf      	b.n	8000dd6 <PE_SubStateMachine_Generic+0x1ce>
 8000c56:	2874      	cmp	r0, #116	; 0x74
 8000c58:	d100      	bne.n	8000c5c <PE_SubStateMachine_Generic+0x54>
 8000c5a:	e119      	b.n	8000e90 <PE_SubStateMachine_Generic+0x288>
 8000c5c:	e11f      	b.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000c5e:	9500      	str	r5, [sp, #0]
 8000c60:	2319      	movs	r3, #25
 8000c62:	2208      	movs	r2, #8
 8000c64:	2100      	movs	r1, #0
 8000c66:	0020      	movs	r0, r4
 8000c68:	f000 f9a6 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d158      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000c70:	2007      	movs	r0, #7
 8000c72:	e0ab      	b.n	8000dcc <PE_SubStateMachine_Generic+0x1c4>
 8000c74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c76:	7800      	ldrb	r0, [r0, #0]
 8000c78:	2811      	cmp	r0, #17
 8000c7a:	d13c      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000c7c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000c7e:	0bc1      	lsrs	r1, r0, #15
 8000c80:	d11f      	bne.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c82:	0b01      	lsrs	r1, r0, #12
 8000c84:	2207      	movs	r2, #7
 8000c86:	4211      	tst	r1, r2
 8000c88:	d01b      	beq.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c8a:	06c0      	lsls	r0, r0, #27
 8000c8c:	0ec0      	lsrs	r0, r0, #27
 8000c8e:	2804      	cmp	r0, #4
 8000c90:	d117      	bne.n	8000cc2 <PE_SubStateMachine_Generic+0xba>
 8000c92:	400a      	ands	r2, r1
 8000c94:	0093      	lsls	r3, r2, #2
 8000c96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000c98:	1c82      	adds	r2, r0, #2
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	7b20      	ldrb	r0, [r4, #12]
 8000c9e:	68a5      	ldr	r5, [r4, #8]
 8000ca0:	69ad      	ldr	r5, [r5, #24]
 8000ca2:	47a8      	blx	r5
 8000ca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ca6:	7800      	ldrb	r0, [r0, #0]
 8000ca8:	2814      	cmp	r0, #20
 8000caa:	d004      	beq.n	8000cb6 <PE_SubStateMachine_Generic+0xae>
 8000cac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cae:	700f      	strb	r7, [r1, #0]
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f7ff fe1e 	bl	80008f2 <PE_Clear_RxEvent>
 8000cb6:	7366      	strb	r6, [r4, #13]
 8000cb8:	2500      	movs	r5, #0
 8000cba:	2107      	movs	r1, #7
 8000cbc:	7b20      	ldrb	r0, [r4, #12]
 8000cbe:	f7ff fcfb 	bl	80006b8 <USBPD_PE_Notification>
 8000cc2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000cc4:	21f0      	movs	r1, #240	; 0xf0
 8000cc6:	0209      	lsls	r1, r1, #8
 8000cc8:	4001      	ands	r1, r0
 8000cca:	d114      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000ccc:	06c0      	lsls	r0, r0, #27
 8000cce:	0ec0      	lsrs	r0, r0, #27
 8000cd0:	2804      	cmp	r0, #4
 8000cd2:	d001      	beq.n	8000cd8 <PE_SubStateMachine_Generic+0xd0>
 8000cd4:	2810      	cmp	r0, #16
 8000cd6:	d10e      	bne.n	8000cf6 <PE_SubStateMachine_Generic+0xee>
 8000cd8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000cda:	7800      	ldrb	r0, [r0, #0]
 8000cdc:	2814      	cmp	r0, #20
 8000cde:	d004      	beq.n	8000cea <PE_SubStateMachine_Generic+0xe2>
 8000ce0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ce2:	7007      	strb	r7, [r0, #0]
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f7ff fe04 	bl	80008f2 <PE_Clear_RxEvent>
 8000cea:	7366      	strb	r6, [r4, #13]
 8000cec:	2500      	movs	r5, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	7b20      	ldrb	r0, [r4, #12]
 8000cf2:	f7ff fce1 	bl	80006b8 <USBPD_PE_Notification>
 8000cf6:	8b60      	ldrh	r0, [r4, #26]
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0209      	lsls	r1, r1, #8
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	d110      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000d00:	e0ca      	b.n	8000e98 <PE_SubStateMachine_Generic+0x290>
 8000d02:	2000      	movs	r0, #0
 8000d04:	9004      	str	r0, [sp, #16]
 8000d06:	ab04      	add	r3, sp, #16
 8000d08:	aa05      	add	r2, sp, #20
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	7b20      	ldrb	r0, [r4, #12]
 8000d0e:	68a7      	ldr	r7, [r4, #8]
 8000d10:	697f      	ldr	r7, [r7, #20]
 8000d12:	47b8      	blx	r7
 8000d14:	2104      	movs	r1, #4
 8000d16:	9804      	ldr	r0, [sp, #16]
 8000d18:	f000 f906 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d001      	beq.n	8000d24 <PE_SubStateMachine_Generic+0x11c>
 8000d20:	7366      	strb	r6, [r4, #13]
 8000d22:	e0be      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d24:	9002      	str	r0, [sp, #8]
 8000d26:	9601      	str	r6, [sp, #4]
 8000d28:	9804      	ldr	r0, [sp, #16]
 8000d2a:	0880      	lsrs	r0, r0, #2
 8000d2c:	9000      	str	r0, [sp, #0]
 8000d2e:	ab05      	add	r3, sp, #20
 8000d30:	2204      	movs	r2, #4
 8000d32:	2100      	movs	r1, #0
 8000d34:	0020      	movs	r0, r4
 8000d36:	f000 f96a 	bl	800100e <PE_Send_DataMessage>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d1f1      	bne.n	8000d22 <PE_SubStateMachine_Generic+0x11a>
 8000d3e:	210a      	movs	r1, #10
 8000d40:	e0a2      	b.n	8000e88 <PE_SubStateMachine_Generic+0x280>
 8000d42:	2012      	movs	r0, #18
 8000d44:	7620      	strb	r0, [r4, #24]
 8000d46:	2105      	movs	r1, #5
 8000d48:	7b20      	ldrb	r0, [r4, #12]
 8000d4a:	f001 fb55 	bl	80023f8 <USBDPD_PRL_BistCarrierEyeMode>
 8000d4e:	2028      	movs	r0, #40	; 0x28
 8000d50:	7360      	strb	r0, [r4, #13]
 8000d52:	487e      	ldr	r0, [pc, #504]	; (8000f4c <.text_49>)
 8000d54:	8360      	strh	r0, [r4, #26]
 8000d56:	253a      	movs	r5, #58	; 0x3a
 8000d58:	e0a3      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d5a:	8b60      	ldrh	r0, [r4, #26]
 8000d5c:	03a9      	lsls	r1, r5, #14
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d1fa      	bne.n	8000d58 <PE_SubStateMachine_Generic+0x150>
 8000d62:	2105      	movs	r1, #5
 8000d64:	7b20      	ldrb	r0, [r4, #12]
 8000d66:	f001 fb4f 	bl	8002408 <USBDPD_PRL_BistCarrierEyeModeExit>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	8360      	strh	r0, [r4, #26]
 8000d6e:	e093      	b.n	8000e98 <PE_SubStateMachine_Generic+0x290>
 8000d70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000d72:	7800      	ldrb	r0, [r0, #0]
 8000d74:	2814      	cmp	r0, #20
 8000d76:	d004      	beq.n	8000d82 <PE_SubStateMachine_Generic+0x17a>
 8000d78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000d7a:	7007      	strb	r7, [r0, #0]
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	f7ff fdb8 	bl	80008f2 <PE_Clear_RxEvent>
 8000d82:	e08e      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	aa04      	add	r2, sp, #16
 8000d88:	2114      	movs	r1, #20
 8000d8a:	7b20      	ldrb	r0, [r4, #12]
 8000d8c:	68a6      	ldr	r6, [r4, #8]
 8000d8e:	6976      	ldr	r6, [r6, #20]
 8000d90:	47b0      	blx	r6
 8000d92:	9803      	ldr	r0, [sp, #12]
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d100      	bne.n	8000d9a <PE_SubStateMachine_Generic+0x192>
 8000d98:	e081      	b.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	9002      	str	r0, [sp, #8]
 8000d9e:	2003      	movs	r0, #3
 8000da0:	9001      	str	r0, [sp, #4]
 8000da2:	9803      	ldr	r0, [sp, #12]
 8000da4:	0880      	lsrs	r0, r0, #2
 8000da6:	9000      	str	r0, [sp, #0]
 8000da8:	ab04      	add	r3, sp, #16
 8000daa:	220c      	movs	r2, #12
 8000dac:	2100      	movs	r1, #0
 8000dae:	0020      	movs	r0, r4
 8000db0:	f000 f92d 	bl	800100e <PE_Send_DataMessage>
 8000db4:	e075      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000db6:	9500      	str	r5, [sp, #0]
 8000db8:	2368      	movs	r3, #104	; 0x68
 8000dba:	2218      	movs	r2, #24
 8000dbc:	2029      	movs	r0, #41	; 0x29
 8000dbe:	5c21      	ldrb	r1, [r4, r0]
 8000dc0:	0020      	movs	r0, r4
 8000dc2:	f000 f8f9 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d16b      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000dca:	200f      	movs	r0, #15
 8000dcc:	7620      	strb	r0, [r4, #24]
 8000dce:	4860      	ldr	r0, [pc, #384]	; (8000f50 <.text_50>)
 8000dd0:	8360      	strh	r0, [r4, #26]
 8000dd2:	251b      	movs	r5, #27
 8000dd4:	e065      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000dd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000dd8:	7800      	ldrb	r0, [r0, #0]
 8000dda:	2814      	cmp	r0, #20
 8000ddc:	d022      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dde:	2028      	movs	r0, #40	; 0x28
 8000de0:	5c20      	ldrb	r0, [r4, r0]
 8000de2:	2129      	movs	r1, #41	; 0x29
 8000de4:	5c61      	ldrb	r1, [r4, r1]
 8000de6:	4288      	cmp	r0, r1
 8000de8:	d11c      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dea:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8000dec:	0bc1      	lsrs	r1, r0, #15
 8000dee:	d119      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000df0:	0441      	lsls	r1, r0, #17
 8000df2:	0f49      	lsrs	r1, r1, #29
 8000df4:	d016      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000df6:	06c0      	lsls	r0, r0, #27
 8000df8:	0ec0      	lsrs	r0, r0, #27
 8000dfa:	280c      	cmp	r0, #12
 8000dfc:	d112      	bne.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e02:	1c82      	adds	r2, r0, #2
 8000e04:	2114      	movs	r1, #20
 8000e06:	7b20      	ldrb	r0, [r4, #12]
 8000e08:	68a5      	ldr	r5, [r4, #8]
 8000e0a:	69ad      	ldr	r5, [r5, #24]
 8000e0c:	47a8      	blx	r5
 8000e0e:	7366      	strb	r6, [r4, #13]
 8000e10:	2500      	movs	r5, #0
 8000e12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e14:	7800      	ldrb	r0, [r0, #0]
 8000e16:	2814      	cmp	r0, #20
 8000e18:	d004      	beq.n	8000e24 <PE_SubStateMachine_Generic+0x21c>
 8000e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e1c:	7007      	strb	r7, [r0, #0]
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f7ff fd67 	bl	80008f2 <PE_Clear_RxEvent>
 8000e24:	8b60      	ldrh	r0, [r4, #26]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0209      	lsls	r1, r1, #8
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d139      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e2e:	2011      	movs	r0, #17
 8000e30:	7360      	strb	r0, [r4, #13]
 8000e32:	e032      	b.n	8000e9a <PE_SubStateMachine_Generic+0x292>
 8000e34:	2000      	movs	r0, #0
 8000e36:	9000      	str	r0, [sp, #0]
 8000e38:	2303      	movs	r3, #3
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f000 f8ba 	bl	8000fb8 <PE_Send_CtrlMessage>
 8000e44:	e02d      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e46:	ab03      	add	r3, sp, #12
 8000e48:	0022      	movs	r2, r4
 8000e4a:	3282      	adds	r2, #130	; 0x82
 8000e4c:	2113      	movs	r1, #19
 8000e4e:	7b20      	ldrb	r0, [r4, #12]
 8000e50:	68a6      	ldr	r6, [r4, #8]
 8000e52:	6976      	ldr	r6, [r6, #20]
 8000e54:	47b0      	blx	r6
 8000e56:	2118      	movs	r1, #24
 8000e58:	9803      	ldr	r0, [sp, #12]
 8000e5a:	f000 f865 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d11d      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x296>
 8000e62:	0020      	movs	r0, r4
 8000e64:	3080      	adds	r0, #128	; 0x80
 8000e66:	2100      	movs	r1, #0
 8000e68:	7041      	strb	r1, [r0, #1]
 8000e6a:	7001      	strb	r1, [r0, #0]
 8000e6c:	9102      	str	r1, [sp, #8]
 8000e6e:	2003      	movs	r0, #3
 8000e70:	9001      	str	r0, [sp, #4]
 8000e72:	9803      	ldr	r0, [sp, #12]
 8000e74:	1d00      	adds	r0, r0, #4
 8000e76:	b280      	uxth	r0, r0
 8000e78:	9000      	str	r0, [sp, #0]
 8000e7a:	0023      	movs	r3, r4
 8000e7c:	337e      	adds	r3, #126	; 0x7e
 8000e7e:	220f      	movs	r2, #15
 8000e80:	0020      	movs	r0, r4
 8000e82:	f000 f95f 	bl	8001144 <PE_Send_ExtendedMessage>
 8000e86:	2161      	movs	r1, #97	; 0x61
 8000e88:	7b20      	ldrb	r0, [r4, #12]
 8000e8a:	f7ff fc15 	bl	80006b8 <USBPD_PE_Notification>
 8000e8e:	e008      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e90:	8b60      	ldrh	r0, [r4, #26]
 8000e92:	03a9      	lsls	r1, r5, #14
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d104      	bne.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e98:	7366      	strb	r6, [r4, #13]
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	e001      	b.n	8000ea2 <PE_SubStateMachine_Generic+0x29a>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	7360      	strb	r0, [r4, #13]
 8000ea2:	0028      	movs	r0, r5
 8000ea4:	b00d      	add	sp, #52	; 0x34
 8000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ea8 <PE_UpdateTimer>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	0002      	movs	r2, r0
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0200      	lsls	r0, r0, #8
 8000eb0:	0454      	lsls	r4, r2, #17
 8000eb2:	0c64      	lsrs	r4, r4, #17
 8000eb4:	42a1      	cmp	r1, r4
 8000eb6:	da00      	bge.n	8000eba <PE_UpdateTimer+0x12>
 8000eb8:	1a50      	subs	r0, r2, r1
 8000eba:	b280      	uxth	r0, r0
 8000ebc:	bd10      	pop	{r4, pc}

08000ebe <PE_CallHardResetCallback>:
 8000ebe:	6883      	ldr	r3, [r0, #8]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <PE_CallHardResetCallback+0xa>
 8000ec6:	4770      	bx	lr
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	7b00      	ldrb	r0, [r0, #12]
 8000ecc:	4798      	blx	r3
 8000ece:	bd01      	pop	{r0, pc}

08000ed0 <PE_SetPowerNegotiation>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	6842      	ldr	r2, [r0, #4]
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	055c      	lsls	r4, r3, #21
 8000ed8:	0f64      	lsrs	r4, r4, #29
 8000eda:	42a1      	cmp	r1, r4
 8000edc:	d00b      	beq.n	8000ef6 <PE_SetPowerNegotiation+0x26>
 8000ede:	4c1d      	ldr	r4, [pc, #116]	; (8000f54 <.text_51>)
 8000ee0:	401c      	ands	r4, r3
 8000ee2:	0209      	lsls	r1, r1, #8
 8000ee4:	23e0      	movs	r3, #224	; 0xe0
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	4323      	orrs	r3, r4
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	215a      	movs	r1, #90	; 0x5a
 8000ef0:	7b00      	ldrb	r0, [r0, #12]
 8000ef2:	f7ff fbe1 	bl	80006b8 <USBPD_PE_Notification>
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <PE_SetPowerNegociation>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	0005      	movs	r5, r0
 8000efc:	000c      	movs	r4, r1
 8000efe:	6868      	ldr	r0, [r5, #4]
 8000f00:	6800      	ldr	r0, [r0, #0]
 8000f02:	0540      	lsls	r0, r0, #21
 8000f04:	0f40      	lsrs	r0, r0, #29
 8000f06:	4284      	cmp	r4, r0
 8000f08:	d003      	beq.n	8000f12 <PE_SetPowerNegociation+0x1a>
 8000f0a:	215a      	movs	r1, #90	; 0x5a
 8000f0c:	7b28      	ldrb	r0, [r5, #12]
 8000f0e:	f7ff fbd3 	bl	80006b8 <USBPD_PE_Notification>
 8000f12:	6868      	ldr	r0, [r5, #4]
 8000f14:	6801      	ldr	r1, [r0, #0]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <.text_51>)
 8000f18:	400a      	ands	r2, r1
 8000f1a:	0221      	lsls	r1, r4, #8
 8000f1c:	23e0      	movs	r3, #224	; 0xe0
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	400b      	ands	r3, r1
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6003      	str	r3, [r0, #0]
 8000f26:	bd31      	pop	{r0, r4, r5, pc}

08000f28 <PE_CheckDataSizeFromGetDataInfo>:
 8000f28:	b51c      	push	{r2, r3, r4, lr}
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	428a      	cmp	r2, r1
 8000f30:	d20a      	bcs.n	8000f48 <PE_CheckDataSizeFromGetDataInfo+0x20>
 8000f32:	2018      	movs	r0, #24
 8000f34:	9000      	str	r0, [sp, #0]
 8000f36:	bf00      	nop
 8000f38:	a308      	add	r3, pc, #32	; (adr r3, 8000f5c <.text_53>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2006      	movs	r0, #6
 8000f40:	4c05      	ldr	r4, [pc, #20]	; (8000f58 <.text_52>)
 8000f42:	6824      	ldr	r4, [r4, #0]
 8000f44:	47a0      	blx	r4
 8000f46:	2002      	movs	r0, #2
 8000f48:	bd16      	pop	{r1, r2, r4, pc}
	...

08000f4c <.text_49>:
 8000f4c:	0000803a 	.word	0x0000803a

08000f50 <.text_50>:
 8000f50:	0000801b 	.word	0x0000801b

08000f54 <.text_51>:
 8000f54:	fffff8ff 	.word	0xfffff8ff

08000f58 <.text_52>:
 8000f58:	20000000 	.word	0x20000000

08000f5c <.text_53>:
 8000f5c:	61746144 	.word	0x61746144
 8000f60:	7a695320 	.word	0x7a695320
 8000f64:	73692065 	.word	0x73692065
 8000f68:	746f6e20 	.word	0x746f6e20
 8000f6c:	726f6320 	.word	0x726f6320
 8000f70:	74636572 	.word	0x74636572
 8000f74:	00          	.byte	0x00
 8000f75:	00          	.byte	0x00
	...

08000f78 <USBPD_PE_SetTrace>:
 8000f78:	0001      	movs	r1, r0
 8000f7a:	d100      	bne.n	8000f7e <USBPD_PE_SetTrace+0x6>
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <.text_5>)
 8000f7e:	4906      	ldr	r1, [pc, #24]	; (8000f98 <.text_6>)
 8000f80:	6008      	str	r0, [r1, #0]
 8000f82:	4770      	bx	lr

08000f84 <USBPD_PE_CheckLIB>:
 8000f84:	0001      	movs	r1, r0
 8000f86:	2000      	movs	r0, #0
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <.text_7>)
 8000f8a:	4291      	cmp	r1, r2
 8000f8c:	d100      	bne.n	8000f90 <USBPD_PE_CheckLIB+0xc>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4770      	bx	lr
	...

08000f94 <.text_5>:
 8000f94:	08000fb7 	.word	0x08000fb7

08000f98 <.text_6>:
 8000f98:	20000000 	.word	0x20000000

08000f9c <.text_7>:
 8000f9c:	30410004 	.word	0x30410004

08000fa0 <USBPD_PE_GetMemoryConsumption>:
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	f000 ffa7 	bl	8001ef4 <USBPD_PRL_GetMemoryConsumption>
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	f7ff faf6 	bl	8000598 <USBPD_CAD_GetMemoryConsumption>
 8000fac:	1820      	adds	r0, r4, r0
 8000fae:	21ff      	movs	r1, #255	; 0xff
 8000fb0:	00c9      	lsls	r1, r1, #3
 8000fb2:	1840      	adds	r0, r0, r1
 8000fb4:	bd10      	pop	{r4, pc}

08000fb6 <PE_Trace_Empty>:
 8000fb6:	4770      	bx	lr

08000fb8 <PE_Send_CtrlMessage>:
 8000fb8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000fba:	2501      	movs	r5, #1
 8000fbc:	0004      	movs	r4, r0
 8000fbe:	000f      	movs	r7, r1
 8000fc0:	0016      	movs	r6, r2
 8000fc2:	6860      	ldr	r0, [r4, #4]
 8000fc4:	6800      	ldr	r0, [r0, #0]
 8000fc6:	0b00      	lsrs	r0, r0, #12
 8000fc8:	4028      	ands	r0, r5
 8000fca:	d014      	beq.n	8000ff6 <PE_Send_CtrlMessage+0x3e>
 8000fcc:	a808      	add	r0, sp, #32
 8000fce:	7800      	ldrb	r0, [r0, #0]
 8000fd0:	9001      	str	r0, [sp, #4]
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	9000      	str	r0, [sp, #0]
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	337e      	adds	r3, #126	; 0x7e
 8000fda:	0032      	movs	r2, r6
 8000fdc:	0039      	movs	r1, r7
 8000fde:	7b20      	ldrb	r0, [r4, #12]
 8000fe0:	f000 ffd4 	bl	8001f8c <USBPD_PRL_SendMessage>
 8000fe4:	2803      	cmp	r0, #3
 8000fe6:	d0ec      	beq.n	8000fc2 <PE_Send_CtrlMessage+0xa>
 8000fe8:	0039      	movs	r1, r7
 8000fea:	2810      	cmp	r0, #16
 8000fec:	d00e      	beq.n	800100c <PE_Send_CtrlMessage+0x54>
 8000fee:	2e0d      	cmp	r6, #13
 8000ff0:	d104      	bne.n	8000ffc <PE_Send_CtrlMessage+0x44>
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	e003      	b.n	8000ffe <PE_Send_CtrlMessage+0x46>
 8000ff6:	7360      	strb	r0, [r4, #13]
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	466b      	mov	r3, sp
 8001000:	7a1b      	ldrb	r3, [r3, #8]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	0003      	movs	r3, r0
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fa7d 	bl	8001506 <PE_CheckSendMessageStatus>
 800100c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800100e <PE_Send_DataMessage>:
 800100e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	0004      	movs	r4, r0
 8001014:	2000      	movs	r0, #0
 8001016:	2680      	movs	r6, #128	; 0x80
 8001018:	e00c      	b.n	8001034 <PE_Send_DataMessage+0x26>
 800101a:	2100      	movs	r1, #0
 800101c:	0082      	lsls	r2, r0, #2
 800101e:	18a2      	adds	r2, r4, r2
 8001020:	1855      	adds	r5, r2, r1
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	00cf      	lsls	r7, r1, #3
 8001026:	40fa      	lsrs	r2, r7
 8001028:	55aa      	strb	r2, [r5, r6]
 800102a:	1c49      	adds	r1, r1, #1
 800102c:	2904      	cmp	r1, #4
 800102e:	d3f5      	bcc.n	800101c <PE_Send_DataMessage+0xe>
 8001030:	1d1b      	adds	r3, r3, #4
 8001032:	1c40      	adds	r0, r0, #1
 8001034:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001036:	4288      	cmp	r0, r1
 8001038:	d3ef      	bcc.n	800101a <PE_Send_DataMessage+0xc>
 800103a:	6860      	ldr	r0, [r4, #4]
 800103c:	6800      	ldr	r0, [r0, #0]
 800103e:	04c1      	lsls	r1, r0, #19
 8001040:	0fc9      	lsrs	r1, r1, #31
 8001042:	d01f      	beq.n	8001084 <PE_Send_DataMessage+0x76>
 8001044:	a80c      	add	r0, sp, #48	; 0x30
 8001046:	7800      	ldrb	r0, [r0, #0]
 8001048:	9001      	str	r0, [sp, #4]
 800104a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800104c:	0080      	lsls	r0, r0, #2
 800104e:	1c80      	adds	r0, r0, #2
 8001050:	b280      	uxth	r0, r0
 8001052:	9000      	str	r0, [sp, #0]
 8001054:	0023      	movs	r3, r4
 8001056:	337e      	adds	r3, #126	; 0x7e
 8001058:	4668      	mov	r0, sp
 800105a:	7c02      	ldrb	r2, [r0, #16]
 800105c:	7b01      	ldrb	r1, [r0, #12]
 800105e:	7b20      	ldrb	r0, [r4, #12]
 8001060:	f000 ff94 	bl	8001f8c <USBPD_PRL_SendMessage>
 8001064:	2803      	cmp	r0, #3
 8001066:	d0e8      	beq.n	800103a <PE_Send_DataMessage+0x2c>
 8001068:	4669      	mov	r1, sp
 800106a:	7b09      	ldrb	r1, [r1, #12]
 800106c:	2810      	cmp	r0, #16
 800106e:	d007      	beq.n	8001080 <PE_Send_DataMessage+0x72>
 8001070:	aa0b      	add	r2, sp, #44	; 0x2c
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	0003      	movs	r3, r0
 8001078:	2200      	movs	r2, #0
 800107a:	0020      	movs	r0, r4
 800107c:	f000 fa43 	bl	8001506 <PE_CheckSendMessageStatus>
 8001080:	b005      	add	sp, #20
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	2010      	movs	r0, #16
 8001086:	e7fb      	b.n	8001080 <PE_Send_DataMessage+0x72>

08001088 <PE_Check_ExtendedMessage>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	0004      	movs	r4, r0
 800108c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800108e:	7881      	ldrb	r1, [r0, #2]
 8001090:	78c0      	ldrb	r0, [r0, #3]
 8001092:	0200      	lsls	r0, r0, #8
 8001094:	180a      	adds	r2, r1, r0
 8001096:	0021      	movs	r1, r4
 8001098:	3174      	adds	r1, #116	; 0x74
 800109a:	800a      	strh	r2, [r1, #0]
 800109c:	202c      	movs	r0, #44	; 0x2c
 800109e:	5c20      	ldrb	r0, [r4, r0]
 80010a0:	06c0      	lsls	r0, r0, #27
 80010a2:	0ec0      	lsrs	r0, r0, #27
 80010a4:	7088      	strb	r0, [r1, #2]
 80010a6:	2501      	movs	r5, #1
 80010a8:	0410      	lsls	r0, r2, #16
 80010aa:	0e80      	lsrs	r0, r0, #26
 80010ac:	2301      	movs	r3, #1
 80010ae:	4003      	ands	r3, r0
 80010b0:	0410      	lsls	r0, r2, #16
 80010b2:	0ec0      	lsrs	r0, r0, #27
 80010b4:	0700      	lsls	r0, r0, #28
 80010b6:	d003      	beq.n	80010c0 <PE_Check_ExtendedMessage+0x38>
 80010b8:	0018      	movs	r0, r3
 80010ba:	d001      	beq.n	80010c0 <PE_Check_ExtendedMessage+0x38>
 80010bc:	2034      	movs	r0, #52	; 0x34
 80010be:	e028      	b.n	8001112 <PE_Check_ExtendedMessage+0x8a>
 80010c0:	05d6      	lsls	r6, r2, #23
 80010c2:	0df6      	lsrs	r6, r6, #23
 80010c4:	2000      	movs	r0, #0
 80010c6:	0417      	lsls	r7, r2, #16
 80010c8:	0fff      	lsrs	r7, r7, #31
 80010ca:	d10e      	bne.n	80010ea <PE_Check_ExtendedMessage+0x62>
 80010cc:	22a9      	movs	r2, #169	; 0xa9
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	18a2      	adds	r2, r4, r2
 80010d2:	8016      	strh	r6, [r2, #0]
 80010d4:	279c      	movs	r7, #156	; 0x9c
 80010d6:	8813      	ldrh	r3, [r2, #0]
 80010d8:	4298      	cmp	r0, r3
 80010da:	d21c      	bcs.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 80010dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010de:	181b      	adds	r3, r3, r0
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	1826      	adds	r6, r4, r0
 80010e4:	55f3      	strb	r3, [r6, r7]
 80010e6:	1c40      	adds	r0, r0, #1
 80010e8:	e7f5      	b.n	80010d6 <PE_Check_ExtendedMessage+0x4e>
 80010ea:	27f8      	movs	r7, #248	; 0xf8
 80010ec:	01ff      	lsls	r7, r7, #7
 80010ee:	4017      	ands	r7, r2
 80010f0:	d106      	bne.n	8001100 <PE_Check_ExtendedMessage+0x78>
 80010f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80010f4:	0452      	lsls	r2, r2, #17
 80010f6:	0f52      	lsrs	r2, r2, #29
 80010f8:	2a07      	cmp	r2, #7
 80010fa:	d30c      	bcc.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 80010fc:	2e1b      	cmp	r6, #27
 80010fe:	d30a      	bcc.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 8001104:	22a9      	movs	r2, #169	; 0xa9
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	5aa2      	ldrh	r2, [r4, r2]
 800110a:	42b2      	cmp	r2, r6
 800110c:	d203      	bcs.n	8001116 <PE_Check_ExtendedMessage+0x8e>
 800110e:	8360      	strh	r0, [r4, #26]
 8001110:	2037      	movs	r0, #55	; 0x37
 8001112:	7360      	strb	r0, [r4, #13]
 8001114:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001116:	7e20      	ldrb	r0, [r4, #24]
 8001118:	2800      	cmp	r0, #0
 800111a:	d011      	beq.n	8001140 <PE_Check_ExtendedMessage+0xb8>
 800111c:	7888      	ldrb	r0, [r1, #2]
 800111e:	280f      	cmp	r0, #15
 8001120:	d10e      	bne.n	8001140 <PE_Check_ExtendedMessage+0xb8>
 8001122:	2318      	movs	r3, #24
 8001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001126:	1d02      	adds	r2, r0, #4
 8001128:	2113      	movs	r1, #19
 800112a:	7b20      	ldrb	r0, [r4, #12]
 800112c:	68a6      	ldr	r6, [r4, #8]
 800112e:	69b6      	ldr	r6, [r6, #24]
 8001130:	47b0      	blx	r6
 8001132:	2003      	movs	r0, #3
 8001134:	7360      	strb	r0, [r4, #13]
 8001136:	2162      	movs	r1, #98	; 0x62
 8001138:	7b20      	ldrb	r0, [r4, #12]
 800113a:	f7ff fabd 	bl	80006b8 <USBPD_PE_Notification>
 800113e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001140:	7365      	strb	r5, [r4, #13]
 8001142:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001144 <PE_Send_ExtendedMessage>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800114a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800114c:	0004      	movs	r4, r0
 800114e:	000d      	movs	r5, r1
 8001150:	4668      	mov	r0, sp
 8001152:	7202      	strb	r2, [r0, #8]
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	6860      	ldr	r0, [r4, #4]
 8001158:	6800      	ldr	r0, [r0, #0]
 800115a:	04c1      	lsls	r1, r0, #19
 800115c:	0fc9      	lsrs	r1, r1, #31
 800115e:	d019      	beq.n	8001194 <PE_Send_ExtendedMessage+0x50>
 8001160:	9601      	str	r6, [sp, #4]
 8001162:	9700      	str	r7, [sp, #0]
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	4668      	mov	r0, sp
 8001168:	7a00      	ldrb	r0, [r0, #8]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	4302      	orrs	r2, r0
 800116e:	0029      	movs	r1, r5
 8001170:	7b20      	ldrb	r0, [r4, #12]
 8001172:	f000 ff0b 	bl	8001f8c <USBPD_PRL_SendMessage>
 8001176:	2803      	cmp	r0, #3
 8001178:	d0ed      	beq.n	8001156 <PE_Send_ExtendedMessage+0x12>
 800117a:	0029      	movs	r1, r5
 800117c:	2810      	cmp	r0, #16
 800117e:	d007      	beq.n	8001190 <PE_Send_ExtendedMessage+0x4c>
 8001180:	aa0b      	add	r2, sp, #44	; 0x2c
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	0003      	movs	r3, r0
 8001188:	2200      	movs	r2, #0
 800118a:	0020      	movs	r0, r4
 800118c:	f000 f9bb 	bl	8001506 <PE_CheckSendMessageStatus>
 8001190:	b005      	add	sp, #20
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	2011      	movs	r0, #17
 8001196:	7360      	strb	r0, [r4, #13]
 8001198:	2010      	movs	r0, #16
 800119a:	e7f9      	b.n	8001190 <PE_Send_ExtendedMessage+0x4c>

0800119c <PE_SubStateMachine_ExtendedMessages>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	0004      	movs	r4, r0
 80011a2:	2002      	movs	r0, #2
 80011a4:	2702      	movs	r7, #2
 80011a6:	21a9      	movs	r1, #169	; 0xa9
 80011a8:	0089      	lsls	r1, r1, #2
 80011aa:	1866      	adds	r6, r4, r1
 80011ac:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <.text_7>)
 80011ae:	2500      	movs	r5, #0
 80011b0:	2103      	movs	r1, #3
 80011b2:	7b63      	ldrb	r3, [r4, #13]
 80011b4:	2b31      	cmp	r3, #49	; 0x31
 80011b6:	d00f      	beq.n	80011d8 <PE_SubStateMachine_ExtendedMessages+0x3c>
 80011b8:	2b33      	cmp	r3, #51	; 0x33
 80011ba:	d004      	beq.n	80011c6 <PE_SubStateMachine_ExtendedMessages+0x2a>
 80011bc:	2b34      	cmp	r3, #52	; 0x34
 80011be:	d04b      	beq.n	8001258 <PE_SubStateMachine_ExtendedMessages+0xbc>
 80011c0:	2b35      	cmp	r3, #53	; 0x35
 80011c2:	d078      	beq.n	80012b6 <PE_SubStateMachine_ExtendedMessages+0x11a>
 80011c4:	2b36      	cmp	r3, #54	; 0x36
 80011c6:	d100      	bne.n	80011ca <PE_SubStateMachine_ExtendedMessages+0x2e>
 80011c8:	e089      	b.n	80012de <PE_SubStateMachine_ExtendedMessages+0x142>
 80011ca:	2b37      	cmp	r3, #55	; 0x37
 80011cc:	d100      	bne.n	80011d0 <PE_SubStateMachine_ExtendedMessages+0x34>
 80011ce:	e08a      	b.n	80012e6 <PE_SubStateMachine_ExtendedMessages+0x14a>
 80011d0:	2b38      	cmp	r3, #56	; 0x38
 80011d2:	d100      	bne.n	80011d6 <PE_SubStateMachine_ExtendedMessages+0x3a>
 80011d4:	e0b9      	b.n	800134a <PE_SubStateMachine_ExtendedMessages+0x1ae>
 80011d6:	e0bb      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80011d8:	466b      	mov	r3, sp
 80011da:	731d      	strb	r5, [r3, #12]
 80011dc:	8035      	strh	r5, [r6, #0]
 80011de:	0023      	movs	r3, r4
 80011e0:	3374      	adds	r3, #116	; 0x74
 80011e2:	735d      	strb	r5, [r3, #13]
 80011e4:	0023      	movs	r3, r4
 80011e6:	3374      	adds	r3, #116	; 0x74
 80011e8:	731d      	strb	r5, [r3, #12]
 80011ea:	8872      	ldrh	r2, [r6, #2]
 80011ec:	2a1a      	cmp	r2, #26
 80011ee:	d912      	bls.n	8001216 <PE_SubStateMachine_ExtendedMessages+0x7a>
 80011f0:	22d0      	movs	r2, #208	; 0xd0
 80011f2:	0052      	lsls	r2, r2, #1
 80011f4:	18a2      	adds	r2, r4, r2
 80011f6:	5d52      	ldrb	r2, [r2, r5]
 80011f8:	0023      	movs	r3, r4
 80011fa:	3382      	adds	r3, #130	; 0x82
 80011fc:	555a      	strb	r2, [r3, r5]
 80011fe:	1c6d      	adds	r5, r5, #1
 8001200:	2d1a      	cmp	r5, #26
 8001202:	d20b      	bcs.n	800121c <PE_SubStateMachine_ExtendedMessages+0x80>
 8001204:	e7f4      	b.n	80011f0 <PE_SubStateMachine_ExtendedMessages+0x54>
 8001206:	22d0      	movs	r2, #208	; 0xd0
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	18a2      	adds	r2, r4, r2
 800120c:	5d52      	ldrb	r2, [r2, r5]
 800120e:	0023      	movs	r3, r4
 8001210:	3382      	adds	r3, #130	; 0x82
 8001212:	555a      	strb	r2, [r3, r5]
 8001214:	1c6d      	adds	r5, r5, #1
 8001216:	8872      	ldrh	r2, [r6, #2]
 8001218:	4295      	cmp	r5, r2
 800121a:	d3f4      	bcc.n	8001206 <PE_SubStateMachine_ExtendedMessages+0x6a>
 800121c:	6922      	ldr	r2, [r4, #16]
 800121e:	0693      	lsls	r3, r2, #26
 8001220:	0fdb      	lsrs	r3, r3, #31
 8001222:	d002      	beq.n	800122a <PE_SubStateMachine_ExtendedMessages+0x8e>
 8001224:	4669      	mov	r1, sp
 8001226:	7308      	strb	r0, [r1, #12]
 8001228:	2133      	movs	r1, #51	; 0x33
 800122a:	0025      	movs	r5, r4
 800122c:	3574      	adds	r5, #116	; 0x74
 800122e:	4668      	mov	r0, sp
 8001230:	7b00      	ldrb	r0, [r0, #12]
 8001232:	9002      	str	r0, [sp, #8]
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	8870      	ldrh	r0, [r6, #2]
 8001238:	1d00      	adds	r0, r0, #4
 800123a:	b280      	uxth	r0, r0
 800123c:	9000      	str	r0, [sp, #0]
 800123e:	0023      	movs	r3, r4
 8001240:	337e      	adds	r3, #126	; 0x7e
 8001242:	78ea      	ldrb	r2, [r5, #3]
 8001244:	202b      	movs	r0, #43	; 0x2b
 8001246:	5c21      	ldrb	r1, [r4, r0]
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff ff7b 	bl	8001144 <PE_Send_ExtendedMessage>
 800124e:	2800      	cmp	r0, #0
 8001250:	d101      	bne.n	8001256 <PE_SubStateMachine_ExtendedMessages+0xba>
 8001252:	7968      	ldrb	r0, [r5, #5]
 8001254:	7620      	strb	r0, [r4, #24]
 8001256:	e07b      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001258:	2074      	movs	r0, #116	; 0x74
 800125a:	5a20      	ldrh	r0, [r4, r0]
 800125c:	0440      	lsls	r0, r0, #17
 800125e:	0f03      	lsrs	r3, r0, #28
 8001260:	201a      	movs	r0, #26
 8001262:	4358      	muls	r0, r3
 8001264:	8872      	ldrh	r2, [r6, #2]
 8001266:	4290      	cmp	r0, r2
 8001268:	da01      	bge.n	800126e <PE_SubStateMachine_ExtendedMessages+0xd2>
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d301      	bcc.n	8001272 <PE_SubStateMachine_ExtendedMessages+0xd6>
 800126e:	7361      	strb	r1, [r4, #13]
 8001270:	e01f      	b.n	80012b2 <PE_SubStateMachine_ExtendedMessages+0x116>
 8001272:	1a11      	subs	r1, r2, r0
 8001274:	291a      	cmp	r1, #26
 8001276:	d202      	bcs.n	800127e <PE_SubStateMachine_ExtendedMessages+0xe2>
 8001278:	1a12      	subs	r2, r2, r0
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	e000      	b.n	8001280 <PE_SubStateMachine_ExtendedMessages+0xe4>
 800127e:	221a      	movs	r2, #26
 8001280:	2100      	movs	r1, #0
 8001282:	e008      	b.n	8001296 <PE_SubStateMachine_ExtendedMessages+0xfa>
 8001284:	23d0      	movs	r3, #208	; 0xd0
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	18e3      	adds	r3, r4, r3
 800128a:	1847      	adds	r7, r0, r1
 800128c:	5ddb      	ldrb	r3, [r3, r7]
 800128e:	0027      	movs	r7, r4
 8001290:	3782      	adds	r7, #130	; 0x82
 8001292:	547b      	strb	r3, [r7, r1]
 8001294:	1c49      	adds	r1, r1, #1
 8001296:	4291      	cmp	r1, r2
 8001298:	d3f4      	bcc.n	8001284 <PE_SubStateMachine_ExtendedMessages+0xe8>
 800129a:	0023      	movs	r3, r4
 800129c:	337e      	adds	r3, #126	; 0x7e
 800129e:	8872      	ldrh	r2, [r6, #2]
 80012a0:	2074      	movs	r0, #116	; 0x74
 80012a2:	5a20      	ldrh	r0, [r4, r0]
 80012a4:	0440      	lsls	r0, r0, #17
 80012a6:	0f01      	lsrs	r1, r0, #28
 80012a8:	7b20      	ldrb	r0, [r4, #12]
 80012aa:	f001 fae1 	bl	8002870 <USBPD_PRL_PrepareExtendedTxChunkSending>
 80012ae:	2035      	movs	r0, #53	; 0x35
 80012b0:	7360      	strb	r0, [r4, #13]
 80012b2:	2700      	movs	r7, #0
 80012b4:	e04c      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80012b6:	6920      	ldr	r0, [r4, #16]
 80012b8:	0682      	lsls	r2, r0, #26
 80012ba:	0fd2      	lsrs	r2, r2, #31
 80012bc:	d000      	beq.n	80012c0 <PE_SubStateMachine_ExtendedMessages+0x124>
 80012be:	2136      	movs	r1, #54	; 0x36
 80012c0:	9502      	str	r5, [sp, #8]
 80012c2:	9101      	str	r1, [sp, #4]
 80012c4:	8870      	ldrh	r0, [r6, #2]
 80012c6:	9000      	str	r0, [sp, #0]
 80012c8:	0023      	movs	r3, r4
 80012ca:	337e      	adds	r3, #126	; 0x7e
 80012cc:	0020      	movs	r0, r4
 80012ce:	3074      	adds	r0, #116	; 0x74
 80012d0:	78c2      	ldrb	r2, [r0, #3]
 80012d2:	2028      	movs	r0, #40	; 0x28
 80012d4:	5c21      	ldrb	r1, [r4, r0]
 80012d6:	0020      	movs	r0, r4
 80012d8:	f7ff ff34 	bl	8001144 <PE_Send_ExtendedMessage>
 80012dc:	e037      	b.n	800134e <PE_SubStateMachine_ExtendedMessages+0x1b2>
 80012de:	8362      	strh	r2, [r4, #26]
 80012e0:	271b      	movs	r7, #27
 80012e2:	2039      	movs	r0, #57	; 0x39
 80012e4:	e004      	b.n	80012f0 <PE_SubStateMachine_ExtendedMessages+0x154>
 80012e6:	8b60      	ldrh	r0, [r4, #26]
 80012e8:	03b9      	lsls	r1, r7, #14
 80012ea:	4288      	cmp	r0, r1
 80012ec:	d102      	bne.n	80012f4 <PE_SubStateMachine_ExtendedMessages+0x158>
 80012ee:	200f      	movs	r0, #15
 80012f0:	7360      	strb	r0, [r4, #13]
 80012f2:	e02d      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 80012f4:	8362      	strh	r2, [r4, #26]
 80012f6:	271b      	movs	r7, #27
 80012f8:	0021      	movs	r1, r4
 80012fa:	317e      	adds	r1, #126	; 0x7e
 80012fc:	7b20      	ldrb	r0, [r4, #12]
 80012fe:	f001 fade 	bl	80028be <USBPD_PRL_PrepareChunkRequest>
 8001302:	6860      	ldr	r0, [r4, #4]
 8001304:	6800      	ldr	r0, [r0, #0]
 8001306:	04c1      	lsls	r1, r0, #19
 8001308:	0fc9      	lsrs	r1, r1, #31
 800130a:	d012      	beq.n	8001332 <PE_SubStateMachine_ExtendedMessages+0x196>
 800130c:	9501      	str	r5, [sp, #4]
 800130e:	2006      	movs	r0, #6
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	0023      	movs	r3, r4
 8001314:	337e      	adds	r3, #126	; 0x7e
 8001316:	0020      	movs	r0, r4
 8001318:	3074      	adds	r0, #116	; 0x74
 800131a:	7880      	ldrb	r0, [r0, #2]
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	4302      	orrs	r2, r0
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	5c21      	ldrb	r1, [r4, r0]
 8001324:	7b20      	ldrb	r0, [r4, #12]
 8001326:	f000 fe31 	bl	8001f8c <USBPD_PRL_SendMessage>
 800132a:	0003      	movs	r3, r0
 800132c:	2803      	cmp	r0, #3
 800132e:	d0e8      	beq.n	8001302 <PE_SubStateMachine_ExtendedMessages+0x166>
 8001330:	e002      	b.n	8001338 <PE_SubStateMachine_ExtendedMessages+0x19c>
 8001332:	2011      	movs	r0, #17
 8001334:	7360      	strb	r0, [r4, #13]
 8001336:	2310      	movs	r3, #16
 8001338:	0020      	movs	r0, r4
 800133a:	2139      	movs	r1, #57	; 0x39
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	2128      	movs	r1, #40	; 0x28
 8001342:	5c41      	ldrb	r1, [r0, r1]
 8001344:	f000 f8df 	bl	8001506 <PE_CheckSendMessageStatus>
 8001348:	e002      	b.n	8001350 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800134a:	7361      	strb	r1, [r4, #13]
 800134c:	2700      	movs	r7, #0
 800134e:	8035      	strh	r5, [r6, #0]
 8001350:	0038      	movs	r0, r7
 8001352:	b005      	add	sp, #20
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001358 <.text_7>:
 8001358:	0000801b 	.word	0x0000801b

0800135c <PE_ManageRXEvent>:
 800135c:	b580      	push	{r7, lr}
 800135e:	2128      	movs	r1, #40	; 0x28
 8001360:	5c41      	ldrb	r1, [r0, r1]
 8001362:	2229      	movs	r2, #41	; 0x29
 8001364:	5481      	strb	r1, [r0, r2]
 8001366:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001368:	0bca      	lsrs	r2, r1, #15
 800136a:	d002      	beq.n	8001372 <PE_ManageRXEvent+0x16>
 800136c:	f7ff fe8c 	bl	8001088 <PE_Check_ExtendedMessage>
 8001370:	bd01      	pop	{r0, pc}
 8001372:	22f0      	movs	r2, #240	; 0xf0
 8001374:	0212      	lsls	r2, r2, #8
 8001376:	400a      	ands	r2, r1
 8001378:	d102      	bne.n	8001380 <PE_ManageRXEvent+0x24>
 800137a:	f000 f805 	bl	8001388 <PE_Check_ControlMessage>
 800137e:	bd01      	pop	{r0, pc}
 8001380:	f000 f862 	bl	8001448 <PE_Check_DataMessage>
 8001384:	bd01      	pop	{r0, pc}
	...

08001388 <PE_Check_ControlMessage>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	0004      	movs	r4, r0
 800138c:	2001      	movs	r0, #1
 800138e:	212a      	movs	r1, #42	; 0x2a
 8001390:	2203      	movs	r2, #3
 8001392:	232c      	movs	r3, #44	; 0x2c
 8001394:	5ce3      	ldrb	r3, [r4, r3]
 8001396:	06db      	lsls	r3, r3, #27
 8001398:	0edb      	lsrs	r3, r3, #27
 800139a:	1e5b      	subs	r3, r3, #1
 800139c:	2b17      	cmp	r3, #23
 800139e:	d84a      	bhi.n	8001436 <PE_Check_ControlMessage+0xae>
 80013a0:	a501      	add	r5, pc, #4	; (adr r5, 80013a8 <PE_Check_ControlMessage+0x20>)
 80013a2:	5ced      	ldrb	r5, [r5, r3]
 80013a4:	44af      	add	pc, r5
 80013a6:	bf00      	nop
 80013a8:	8a8a189e 	.word	0x8a8a189e
 80013ac:	543a8a36 	.word	0x543a8a36
 80013b0:	8a8e8e8e 	.word	0x8a8e8e8e
 80013b4:	808e8e28 	.word	0x808e8e28
 80013b8:	8e8e8e8e 	.word	0x8e8e8e8e
 80013bc:	788e6c8e 	.word	0x788e6c8e
 80013c0:	2002      	movs	r0, #2
 80013c2:	7620      	strb	r0, [r4, #24]
 80013c4:	212b      	movs	r1, #43	; 0x2b
 80013c6:	7b20      	ldrb	r0, [r4, #12]
 80013c8:	f7ff f976 	bl	80006b8 <USBPD_PE_Notification>
 80013cc:	2098      	movs	r0, #152	; 0x98
 80013ce:	e037      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013d0:	7622      	strb	r2, [r4, #24]
 80013d2:	2132      	movs	r1, #50	; 0x32
 80013d4:	7b20      	ldrb	r0, [r4, #12]
 80013d6:	f7ff f96f 	bl	80006b8 <USBPD_PE_Notification>
 80013da:	2010      	movs	r0, #16
 80013dc:	e030      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013de:	2133      	movs	r1, #51	; 0x33
 80013e0:	e023      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 80013e2:	2306      	movs	r3, #6
 80013e4:	7623      	strb	r3, [r4, #24]
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	4003      	ands	r3, r0
 80013ee:	d022      	beq.n	8001436 <PE_Check_ControlMessage+0xae>
 80013f0:	210c      	movs	r1, #12
 80013f2:	7b20      	ldrb	r0, [r4, #12]
 80013f4:	f7ff f960 	bl	80006b8 <USBPD_PE_Notification>
 80013f8:	204c      	movs	r0, #76	; 0x4c
 80013fa:	e021      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2507      	movs	r5, #7
 8001402:	0a1e      	lsrs	r6, r3, #8
 8001404:	402e      	ands	r6, r5
 8001406:	2e03      	cmp	r6, #3
 8001408:	d117      	bne.n	800143a <PE_Check_ControlMessage+0xb2>
 800140a:	7625      	strb	r5, [r4, #24]
 800140c:	201d      	movs	r0, #29
 800140e:	7360      	strb	r0, [r4, #13]
 8001410:	2106      	movs	r1, #6
 8001412:	e00a      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 8001414:	205f      	movs	r0, #95	; 0x5f
 8001416:	7620      	strb	r0, [r4, #24]
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	7360      	strb	r0, [r4, #13]
 800141c:	2160      	movs	r1, #96	; 0x60
 800141e:	e004      	b.n	800142a <PE_Check_ControlMessage+0xa2>
 8001420:	200f      	movs	r0, #15
 8001422:	7620      	strb	r0, [r4, #24]
 8001424:	204b      	movs	r0, #75	; 0x4b
 8001426:	e00b      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 8001428:	2159      	movs	r1, #89	; 0x59
 800142a:	7b20      	ldrb	r0, [r4, #12]
 800142c:	f7ff f944 	bl	80006b8 <USBPD_PE_Notification>
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	2011      	movs	r0, #17
 8001434:	e004      	b.n	8001440 <PE_Check_ControlMessage+0xb8>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	401a      	ands	r2, r3
 800143c:	2a02      	cmp	r2, #2
 800143e:	d101      	bne.n	8001444 <PE_Check_ControlMessage+0xbc>
 8001440:	7360      	strb	r0, [r4, #13]
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	7361      	strb	r1, [r4, #13]
 8001446:	bd70      	pop	{r4, r5, r6, pc}

08001448 <PE_Check_DataMessage>:
 8001448:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800144a:	0004      	movs	r4, r0
 800144c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800144e:	2607      	movs	r6, #7
 8001450:	2503      	movs	r5, #3
 8001452:	2001      	movs	r0, #1
 8001454:	06ca      	lsls	r2, r1, #27
 8001456:	0ed2      	lsrs	r2, r2, #27
 8001458:	2a01      	cmp	r2, #1
 800145a:	d006      	beq.n	800146a <PE_Check_DataMessage+0x22>
 800145c:	2a03      	cmp	r2, #3
 800145e:	d017      	beq.n	8001490 <PE_Check_DataMessage+0x48>
 8001460:	2a07      	cmp	r2, #7
 8001462:	d04e      	beq.n	8001502 <PE_Check_DataMessage+0xba>
 8001464:	2a0f      	cmp	r2, #15
 8001466:	d045      	beq.n	80014f4 <PE_Check_DataMessage+0xac>
 8001468:	e04a      	b.n	8001500 <PE_Check_DataMessage+0xb8>
 800146a:	0988      	lsrs	r0, r1, #6
 800146c:	4005      	ands	r5, r0
 800146e:	0029      	movs	r1, r5
 8001470:	7b20      	ldrb	r0, [r4, #12]
 8001472:	f7ff fb19 	bl	8000aa8 <PE_ExtRevisionInteroperability>
 8001476:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001478:	0b00      	lsrs	r0, r0, #12
 800147a:	4006      	ands	r6, r0
 800147c:	00b3      	lsls	r3, r6, #2
 800147e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001480:	1c82      	adds	r2, r0, #2
 8001482:	2104      	movs	r1, #4
 8001484:	7b20      	ldrb	r0, [r4, #12]
 8001486:	68a5      	ldr	r5, [r4, #8]
 8001488:	69ad      	ldr	r5, [r5, #24]
 800148a:	47a8      	blx	r5
 800148c:	2044      	movs	r0, #68	; 0x44
 800148e:	e038      	b.n	8001502 <PE_Check_DataMessage+0xba>
 8001490:	2000      	movs	r0, #0
 8001492:	9001      	str	r0, [sp, #4]
 8001494:	9000      	str	r0, [sp, #0]
 8001496:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001498:	7881      	ldrb	r1, [r0, #2]
 800149a:	78c2      	ldrb	r2, [r0, #3]
 800149c:	0212      	lsls	r2, r2, #8
 800149e:	1889      	adds	r1, r1, r2
 80014a0:	7902      	ldrb	r2, [r0, #4]
 80014a2:	0412      	lsls	r2, r2, #16
 80014a4:	1889      	adds	r1, r1, r2
 80014a6:	7940      	ldrb	r0, [r0, #5]
 80014a8:	0600      	lsls	r0, r0, #24
 80014aa:	1808      	adds	r0, r1, r0
 80014ac:	9002      	str	r0, [sp, #8]
 80014ae:	466b      	mov	r3, sp
 80014b0:	aa01      	add	r2, sp, #4
 80014b2:	2103      	movs	r1, #3
 80014b4:	7b20      	ldrb	r0, [r4, #12]
 80014b6:	68a7      	ldr	r7, [r4, #8]
 80014b8:	697f      	ldr	r7, [r7, #20]
 80014ba:	47b8      	blx	r7
 80014bc:	2104      	movs	r1, #4
 80014be:	9800      	ldr	r0, [sp, #0]
 80014c0:	f7ff fd32 	bl	8000f28 <PE_CheckDataSizeFromGetDataInfo>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d113      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014c8:	6860      	ldr	r0, [r4, #4]
 80014ca:	6800      	ldr	r0, [r0, #0]
 80014cc:	0a00      	lsrs	r0, r0, #8
 80014ce:	4006      	ands	r6, r0
 80014d0:	2e03      	cmp	r6, #3
 80014d2:	d10d      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014d4:	9801      	ldr	r0, [sp, #4]
 80014d6:	4924      	ldr	r1, [pc, #144]	; (8001568 <.text_12>)
 80014d8:	4288      	cmp	r0, r1
 80014da:	d109      	bne.n	80014f0 <PE_Check_DataMessage+0xa8>
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	0f00      	lsrs	r0, r0, #28
 80014e0:	2805      	cmp	r0, #5
 80014e2:	d003      	beq.n	80014ec <PE_Check_DataMessage+0xa4>
 80014e4:	2808      	cmp	r0, #8
 80014e6:	d10d      	bne.n	8001504 <PE_Check_DataMessage+0xbc>
 80014e8:	2029      	movs	r0, #41	; 0x29
 80014ea:	e00a      	b.n	8001502 <PE_Check_DataMessage+0xba>
 80014ec:	2027      	movs	r0, #39	; 0x27
 80014ee:	e008      	b.n	8001502 <PE_Check_DataMessage+0xba>
 80014f0:	7365      	strb	r5, [r4, #13]
 80014f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80014f4:	6861      	ldr	r1, [r4, #4]
 80014f6:	6809      	ldr	r1, [r1, #0]
 80014f8:	400d      	ands	r5, r1
 80014fa:	2d02      	cmp	r5, #2
 80014fc:	d102      	bne.n	8001504 <PE_Check_DataMessage+0xbc>
 80014fe:	e000      	b.n	8001502 <PE_Check_DataMessage+0xba>
 8001500:	2011      	movs	r0, #17
 8001502:	7360      	strb	r0, [r4, #13]
 8001504:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001506 <PE_CheckSendMessageStatus>:
 8001506:	b081      	sub	sp, #4
 8001508:	0001      	movs	r1, r0
 800150a:	2010      	movs	r0, #16
 800150c:	2b05      	cmp	r3, #5
 800150e:	d006      	beq.n	800151e <PE_CheckSendMessageStatus+0x18>
 8001510:	2b06      	cmp	r3, #6
 8001512:	d00e      	beq.n	8001532 <PE_CheckSendMessageStatus+0x2c>
 8001514:	2b07      	cmp	r3, #7
 8001516:	d011      	beq.n	800153c <PE_CheckSendMessageStatus+0x36>
 8001518:	2b09      	cmp	r3, #9
 800151a:	d008      	beq.n	800152e <PE_CheckSendMessageStatus+0x28>
 800151c:	e022      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800151e:	9801      	ldr	r0, [sp, #4]
 8001520:	7348      	strb	r0, [r1, #13]
 8001522:	6908      	ldr	r0, [r1, #16]
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <.text_13>)
 8001526:	4002      	ands	r2, r0
 8001528:	610a      	str	r2, [r1, #16]
 800152a:	2000      	movs	r0, #0
 800152c:	e01a      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800152e:	2009      	movs	r0, #9
 8001530:	e018      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 8001532:	690a      	ldr	r2, [r1, #16]
 8001534:	0243      	lsls	r3, r0, #9
 8001536:	4313      	orrs	r3, r2
 8001538:	610b      	str	r3, [r1, #16]
 800153a:	e013      	b.n	8001564 <PE_CheckSendMessageStatus+0x5e>
 800153c:	684b      	ldr	r3, [r1, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	055b      	lsls	r3, r3, #21
 8001542:	0f5b      	lsrs	r3, r3, #29
 8001544:	2b04      	cmp	r3, #4
 8001546:	d003      	beq.n	8001550 <PE_CheckSendMessageStatus+0x4a>
 8001548:	2a01      	cmp	r2, #1
 800154a:	d109      	bne.n	8001560 <PE_CheckSendMessageStatus+0x5a>
 800154c:	220f      	movs	r2, #15
 800154e:	e008      	b.n	8001562 <PE_CheckSendMessageStatus+0x5c>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1fb      	bne.n	800154c <PE_CheckSendMessageStatus+0x46>
 8001554:	688a      	ldr	r2, [r1, #8]
 8001556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001558:	2a00      	cmp	r2, #0
 800155a:	d0f7      	beq.n	800154c <PE_CheckSendMessageStatus+0x46>
 800155c:	2292      	movs	r2, #146	; 0x92
 800155e:	e000      	b.n	8001562 <PE_CheckSendMessageStatus+0x5c>
 8001560:	2211      	movs	r2, #17
 8001562:	734a      	strb	r2, [r1, #13]
 8001564:	b001      	add	sp, #4
 8001566:	4770      	bx	lr

08001568 <.text_12>:
 8001568:	00001388 	.word	0x00001388

0800156c <.text_13>:
 800156c:	ffffbfff 	.word	0xffffbfff

08001570 <USBPD_PE_StateMachine_SNK>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	0004      	movs	r4, r0
 8001576:	48ae      	ldr	r0, [pc, #696]	; (8001830 <USBPD_PE_StateMachine_SNK+0x2c0>)
 8001578:	00a1      	lsls	r1, r4, #2
 800157a:	5845      	ldr	r5, [r0, r1]
 800157c:	2000      	movs	r0, #0
 800157e:	9004      	str	r0, [sp, #16]
 8001580:	8b68      	ldrh	r0, [r5, #26]
 8001582:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8001584:	050a      	lsls	r2, r1, #20
 8001586:	0f52      	lsrs	r2, r2, #29
 8001588:	1880      	adds	r0, r0, r2
 800158a:	06c9      	lsls	r1, r1, #27
 800158c:	0ec9      	lsrs	r1, r1, #27
 800158e:	1846      	adds	r6, r0, r1
 8001590:	b2b6      	uxth	r6, r6
 8001592:	7b68      	ldrb	r0, [r5, #13]
 8001594:	2848      	cmp	r0, #72	; 0x48
 8001596:	d12f      	bne.n	80015f8 <USBPD_PE_StateMachine_SNK+0x88>
 8001598:	0028      	movs	r0, r5
 800159a:	f7ff fa65 	bl	8000a68 <PE_Reset_ZI>
 800159e:	0028      	movs	r0, r5
 80015a0:	f7ff fa7c 	bl	8000a9c <PE_Reset_Counter>
 80015a4:	6828      	ldr	r0, [r5, #0]
 80015a6:	7900      	ldrb	r0, [r0, #4]
 80015a8:	0783      	lsls	r3, r0, #30
 80015aa:	0f9b      	lsrs	r3, r3, #30
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	7b28      	ldrb	r0, [r5, #12]
 80015b2:	f000 fca1 	bl	8001ef8 <USBPD_PRL_SetHeader>
 80015b6:	6868      	ldr	r0, [r5, #4]
 80015b8:	6801      	ldr	r1, [r0, #0]
 80015ba:	2208      	movs	r2, #8
 80015bc:	4391      	bics	r1, r2
 80015be:	6001      	str	r1, [r0, #0]
 80015c0:	6868      	ldr	r0, [r5, #4]
 80015c2:	6801      	ldr	r1, [r0, #0]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4391      	bics	r1, r2
 80015c8:	682a      	ldr	r2, [r5, #0]
 80015ca:	7912      	ldrb	r2, [r2, #4]
 80015cc:	0792      	lsls	r2, r2, #30
 80015ce:	0f92      	lsrs	r2, r2, #30
 80015d0:	430a      	orrs	r2, r1
 80015d2:	6002      	str	r2, [r0, #0]
 80015d4:	7b28      	ldrb	r0, [r5, #12]
 80015d6:	f000 ff20 	bl	800241a <USBPD_PRL_Reset>
 80015da:	203e      	movs	r0, #62	; 0x3e
 80015dc:	7368      	strb	r0, [r5, #13]
 80015de:	7ba9      	ldrb	r1, [r5, #14]
 80015e0:	293e      	cmp	r1, #62	; 0x3e
 80015e2:	d009      	beq.n	80015f8 <USBPD_PE_StateMachine_SNK+0x88>
 80015e4:	73a8      	strb	r0, [r5, #14]
 80015e6:	2000      	movs	r0, #0
 80015e8:	9000      	str	r0, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	223e      	movs	r2, #62	; 0x3e
 80015ee:	7b29      	ldrb	r1, [r5, #12]
 80015f0:	2004      	movs	r0, #4
 80015f2:	4f90      	ldr	r7, [pc, #576]	; (8001834 <USBPD_PE_StateMachine_SNK+0x2c4>)
 80015f4:	683f      	ldr	r7, [r7, #0]
 80015f6:	47b8      	blx	r7
 80015f8:	6928      	ldr	r0, [r5, #16]
 80015fa:	0341      	lsls	r1, r0, #13
 80015fc:	0fc9      	lsrs	r1, r1, #31
 80015fe:	d006      	beq.n	800160e <USBPD_PE_StateMachine_SNK+0x9e>
 8001600:	498d      	ldr	r1, [pc, #564]	; (8001838 <USBPD_PE_StateMachine_SNK+0x2c8>)
 8001602:	4001      	ands	r1, r0
 8001604:	6129      	str	r1, [r5, #16]
 8001606:	2164      	movs	r1, #100	; 0x64
 8001608:	7b28      	ldrb	r0, [r5, #12]
 800160a:	f7ff f855 	bl	80006b8 <USBPD_PE_Notification>
 800160e:	0028      	movs	r0, r5
 8001610:	f7ff f938 	bl	8000884 <PE_Get_RxEvent>
 8001614:	4669      	mov	r1, sp
 8001616:	7308      	strb	r0, [r1, #12]
 8001618:	4668      	mov	r0, sp
 800161a:	7b00      	ldrb	r0, [r0, #12]
 800161c:	2803      	cmp	r0, #3
 800161e:	d102      	bne.n	8001626 <USBPD_PE_StateMachine_SNK+0xb6>
 8001620:	2001      	movs	r0, #1
 8001622:	b007      	add	sp, #28
 8001624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001626:	4668      	mov	r0, sp
 8001628:	7344      	strb	r4, [r0, #13]
 800162a:	9605      	str	r6, [sp, #20]
 800162c:	2402      	movs	r4, #2
 800162e:	6868      	ldr	r0, [r5, #4]
 8001630:	6800      	ldr	r0, [r0, #0]
 8001632:	04c1      	lsls	r1, r0, #19
 8001634:	0fc9      	lsrs	r1, r1, #31
 8001636:	d100      	bne.n	800163a <USBPD_PE_StateMachine_SNK+0xca>
 8001638:	e102      	b.n	8001840 <USBPD_PE_StateMachine_SNK+0x2d0>
 800163a:	202a      	movs	r0, #42	; 0x2a
 800163c:	5c28      	ldrb	r0, [r5, r0]
 800163e:	280f      	cmp	r0, #15
 8001640:	d001      	beq.n	8001646 <USBPD_PE_StateMachine_SNK+0xd6>
 8001642:	2814      	cmp	r0, #20
 8001644:	d11b      	bne.n	800167e <USBPD_PE_StateMachine_SNK+0x10e>
 8001646:	4668      	mov	r0, sp
 8001648:	7b00      	ldrb	r0, [r0, #12]
 800164a:	2814      	cmp	r0, #20
 800164c:	d005      	beq.n	800165a <USBPD_PE_StateMachine_SNK+0xea>
 800164e:	2014      	movs	r0, #20
 8001650:	4669      	mov	r1, sp
 8001652:	7308      	strb	r0, [r1, #12]
 8001654:	0028      	movs	r0, r5
 8001656:	f7ff f94c 	bl	80008f2 <PE_Clear_RxEvent>
 800165a:	202a      	movs	r0, #42	; 0x2a
 800165c:	5c2a      	ldrb	r2, [r5, r0]
 800165e:	736a      	strb	r2, [r5, #13]
 8001660:	2000      	movs	r0, #0
 8001662:	212a      	movs	r1, #42	; 0x2a
 8001664:	5468      	strb	r0, [r5, r1]
 8001666:	7ba8      	ldrb	r0, [r5, #14]
 8001668:	4290      	cmp	r0, r2
 800166a:	d008      	beq.n	800167e <USBPD_PE_StateMachine_SNK+0x10e>
 800166c:	73aa      	strb	r2, [r5, #14]
 800166e:	2000      	movs	r0, #0
 8001670:	9000      	str	r0, [sp, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	7b29      	ldrb	r1, [r5, #12]
 8001676:	2004      	movs	r0, #4
 8001678:	4e6e      	ldr	r6, [pc, #440]	; (8001834 <USBPD_PE_StateMachine_SNK+0x2c4>)
 800167a:	6836      	ldr	r6, [r6, #0]
 800167c:	47b0      	blx	r6
 800167e:	4668      	mov	r0, sp
 8001680:	7b00      	ldrb	r0, [r0, #12]
 8001682:	2811      	cmp	r0, #17
 8001684:	d11e      	bne.n	80016c4 <USBPD_PE_StateMachine_SNK+0x154>
 8001686:	6868      	ldr	r0, [r5, #4]
 8001688:	6800      	ldr	r0, [r0, #0]
 800168a:	0701      	lsls	r1, r0, #28
 800168c:	0fc9      	lsrs	r1, r1, #31
 800168e:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001690:	0680      	lsls	r0, r0, #26
 8001692:	0fc2      	lsrs	r2, r0, #31
 8001694:	4291      	cmp	r1, r2
 8001696:	d115      	bne.n	80016c4 <USBPD_PE_StateMachine_SNK+0x154>
 8001698:	2014      	movs	r0, #20
 800169a:	4669      	mov	r1, sp
 800169c:	7308      	strb	r0, [r1, #12]
 800169e:	0028      	movs	r0, r5
 80016a0:	f7ff f927 	bl	80008f2 <PE_Clear_RxEvent>
 80016a4:	2092      	movs	r0, #146	; 0x92
 80016a6:	7368      	strb	r0, [r5, #13]
 80016a8:	7ba8      	ldrb	r0, [r5, #14]
 80016aa:	2892      	cmp	r0, #146	; 0x92
 80016ac:	d00a      	beq.n	80016c4 <USBPD_PE_StateMachine_SNK+0x154>
 80016ae:	2092      	movs	r0, #146	; 0x92
 80016b0:	73a8      	strb	r0, [r5, #14]
 80016b2:	2000      	movs	r0, #0
 80016b4:	9000      	str	r0, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2292      	movs	r2, #146	; 0x92
 80016ba:	7b29      	ldrb	r1, [r5, #12]
 80016bc:	2004      	movs	r0, #4
 80016be:	4e5d      	ldr	r6, [pc, #372]	; (8001834 <USBPD_PE_StateMachine_SNK+0x2c4>)
 80016c0:	6836      	ldr	r6, [r6, #0]
 80016c2:	47b0      	blx	r6
 80016c4:	9805      	ldr	r0, [sp, #20]
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d001      	beq.n	80016ce <USBPD_PE_StateMachine_SNK+0x15e>
 80016ca:	2001      	movs	r0, #1
 80016cc:	9004      	str	r0, [sp, #16]
 80016ce:	7b69      	ldrb	r1, [r5, #13]
 80016d0:	4e5a      	ldr	r6, [pc, #360]	; (800183c <USBPD_PE_StateMachine_SNK+0x2cc>)
 80016d2:	2743      	movs	r7, #67	; 0x43
 80016d4:	2004      	movs	r0, #4
 80016d6:	000a      	movs	r2, r1
 80016d8:	d100      	bne.n	80016dc <USBPD_PE_StateMachine_SNK+0x16c>
 80016da:	e0b5      	b.n	8001848 <USBPD_PE_StateMachine_SNK+0x2d8>
 80016dc:	1e4a      	subs	r2, r1, #1
 80016de:	d049      	beq.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 80016e0:	1e92      	subs	r2, r2, #2
 80016e2:	2a01      	cmp	r2, #1
 80016e4:	d800      	bhi.n	80016e8 <USBPD_PE_StateMachine_SNK+0x178>
 80016e6:	e2cd      	b.n	8001c84 <USBPD_PE_StateMachine_SNK+0x714>
 80016e8:	3a0c      	subs	r2, #12
 80016ea:	d100      	bne.n	80016ee <USBPD_PE_StateMachine_SNK+0x17e>
 80016ec:	e1c2      	b.n	8001a74 <USBPD_PE_StateMachine_SNK+0x504>
 80016ee:	1e52      	subs	r2, r2, #1
 80016f0:	d100      	bne.n	80016f4 <USBPD_PE_StateMachine_SNK+0x184>
 80016f2:	e245      	b.n	8001b80 <USBPD_PE_StateMachine_SNK+0x610>
 80016f4:	1e52      	subs	r2, r2, #1
 80016f6:	d100      	bne.n	80016fa <USBPD_PE_StateMachine_SNK+0x18a>
 80016f8:	e24f      	b.n	8001b9a <USBPD_PE_StateMachine_SNK+0x62a>
 80016fa:	1ed2      	subs	r2, r2, #3
 80016fc:	d100      	bne.n	8001700 <USBPD_PE_StateMachine_SNK+0x190>
 80016fe:	e1e1      	b.n	8001ac4 <USBPD_PE_StateMachine_SNK+0x554>
 8001700:	1f12      	subs	r2, r2, #4
 8001702:	2a01      	cmp	r2, #1
 8001704:	d936      	bls.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 8001706:	1e92      	subs	r2, r2, #2
 8001708:	d100      	bne.n	800170c <USBPD_PE_StateMachine_SNK+0x19c>
 800170a:	e282      	b.n	8001c12 <USBPD_PE_StateMachine_SNK+0x6a2>
 800170c:	1ed2      	subs	r2, r2, #3
 800170e:	d031      	beq.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 8001710:	3a0a      	subs	r2, #10
 8001712:	2a02      	cmp	r2, #2
 8001714:	d92e      	bls.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 8001716:	1ed2      	subs	r2, r2, #3
 8001718:	d100      	bne.n	800171c <USBPD_PE_StateMachine_SNK+0x1ac>
 800171a:	e2aa      	b.n	8001c72 <USBPD_PE_StateMachine_SNK+0x702>
 800171c:	1f12      	subs	r2, r2, #4
 800171e:	d100      	bne.n	8001722 <USBPD_PE_StateMachine_SNK+0x1b2>
 8001720:	e2bf      	b.n	8001ca2 <USBPD_PE_StateMachine_SNK+0x732>
 8001722:	1ed2      	subs	r2, r2, #3
 8001724:	d001      	beq.n	800172a <USBPD_PE_StateMachine_SNK+0x1ba>
 8001726:	1e92      	subs	r2, r2, #2
 8001728:	2a05      	cmp	r2, #5
 800172a:	d800      	bhi.n	800172e <USBPD_PE_StateMachine_SNK+0x1be>
 800172c:	e2fe      	b.n	8001d2c <USBPD_PE_StateMachine_SNK+0x7bc>
 800172e:	1f92      	subs	r2, r2, #6
 8001730:	d100      	bne.n	8001734 <USBPD_PE_StateMachine_SNK+0x1c4>
 8001732:	e2c9      	b.n	8001cc8 <USBPD_PE_StateMachine_SNK+0x758>
 8001734:	1f52      	subs	r2, r2, #5
 8001736:	d100      	bne.n	800173a <USBPD_PE_StateMachine_SNK+0x1ca>
 8001738:	e09e      	b.n	8001878 <USBPD_PE_StateMachine_SNK+0x308>
 800173a:	1e92      	subs	r2, r2, #2
 800173c:	d100      	bne.n	8001740 <USBPD_PE_StateMachine_SNK+0x1d0>
 800173e:	e1eb      	b.n	8001b18 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001740:	1ed2      	subs	r2, r2, #3
 8001742:	d100      	bne.n	8001746 <USBPD_PE_StateMachine_SNK+0x1d6>
 8001744:	e0b1      	b.n	80018aa <USBPD_PE_StateMachine_SNK+0x33a>
 8001746:	1e52      	subs	r2, r2, #1
 8001748:	d100      	bne.n	800174c <USBPD_PE_StateMachine_SNK+0x1dc>
 800174a:	e0eb      	b.n	8001924 <USBPD_PE_StateMachine_SNK+0x3b4>
 800174c:	1e52      	subs	r2, r2, #1
 800174e:	d100      	bne.n	8001752 <USBPD_PE_StateMachine_SNK+0x1e2>
 8001750:	e0fc      	b.n	800194c <USBPD_PE_StateMachine_SNK+0x3dc>
 8001752:	1e52      	subs	r2, r2, #1
 8001754:	d100      	bne.n	8001758 <USBPD_PE_StateMachine_SNK+0x1e8>
 8001756:	e116      	b.n	8001986 <USBPD_PE_StateMachine_SNK+0x416>
 8001758:	1e52      	subs	r2, r2, #1
 800175a:	d100      	bne.n	800175e <USBPD_PE_StateMachine_SNK+0x1ee>
 800175c:	e16a      	b.n	8001a34 <USBPD_PE_StateMachine_SNK+0x4c4>
 800175e:	1e92      	subs	r2, r2, #2
 8001760:	d0c0      	beq.n	80016e4 <USBPD_PE_StateMachine_SNK+0x174>
 8001762:	1e92      	subs	r2, r2, #2
 8001764:	d006      	beq.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 8001766:	1f52      	subs	r2, r2, #5
 8001768:	d100      	bne.n	800176c <USBPD_PE_StateMachine_SNK+0x1fc>
 800176a:	e231      	b.n	8001bd0 <USBPD_PE_StateMachine_SNK+0x660>
 800176c:	3a14      	subs	r2, #20
 800176e:	d001      	beq.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 8001770:	1ed2      	subs	r2, r2, #3
 8001772:	2a01      	cmp	r2, #1
 8001774:	d800      	bhi.n	8001778 <USBPD_PE_StateMachine_SNK+0x208>
 8001776:	e2dd      	b.n	8001d34 <USBPD_PE_StateMachine_SNK+0x7c4>
 8001778:	3a0d      	subs	r2, #13
 800177a:	d0fb      	beq.n	8001774 <USBPD_PE_StateMachine_SNK+0x204>
 800177c:	3a1e      	subs	r2, #30
 800177e:	d06f      	beq.n	8001860 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001780:	1f92      	subs	r2, r2, #6
 8001782:	d100      	bne.n	8001786 <USBPD_PE_StateMachine_SNK+0x216>
 8001784:	e25a      	b.n	8001c3c <USBPD_PE_StateMachine_SNK+0x6cc>
 8001786:	1ed2      	subs	r2, r2, #3
 8001788:	d100      	bne.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 800178a:	e1a9      	b.n	8001ae0 <USBPD_PE_StateMachine_SNK+0x570>
 800178c:	7b6a      	ldrb	r2, [r5, #13]
 800178e:	4e29      	ldr	r6, [pc, #164]	; (8001834 <USBPD_PE_StateMachine_SNK+0x2c4>)
 8001790:	7ba8      	ldrb	r0, [r5, #14]
 8001792:	4290      	cmp	r0, r2
 8001794:	d007      	beq.n	80017a6 <USBPD_PE_StateMachine_SNK+0x236>
 8001796:	73aa      	strb	r2, [r5, #14]
 8001798:	2000      	movs	r0, #0
 800179a:	9000      	str	r0, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	7b29      	ldrb	r1, [r5, #12]
 80017a0:	2004      	movs	r0, #4
 80017a2:	6837      	ldr	r7, [r6, #0]
 80017a4:	47b8      	blx	r7
 80017a6:	4668      	mov	r0, sp
 80017a8:	7b00      	ldrb	r0, [r0, #12]
 80017aa:	2814      	cmp	r0, #20
 80017ac:	d100      	bne.n	80017b0 <USBPD_PE_StateMachine_SNK+0x240>
 80017ae:	e2c6      	b.n	8001d3e <USBPD_PE_StateMachine_SNK+0x7ce>
 80017b0:	0028      	movs	r0, r5
 80017b2:	f7ff f8d5 	bl	8000960 <PE_Check_AMSConflict>
 80017b6:	2815      	cmp	r0, #21
 80017b8:	d109      	bne.n	80017ce <USBPD_PE_StateMachine_SNK+0x25e>
 80017ba:	4668      	mov	r0, sp
 80017bc:	7b00      	ldrb	r0, [r0, #12]
 80017be:	2814      	cmp	r0, #20
 80017c0:	d005      	beq.n	80017ce <USBPD_PE_StateMachine_SNK+0x25e>
 80017c2:	2014      	movs	r0, #20
 80017c4:	4669      	mov	r1, sp
 80017c6:	7308      	strb	r0, [r1, #12]
 80017c8:	0028      	movs	r0, r5
 80017ca:	f7ff f892 	bl	80008f2 <PE_Clear_RxEvent>
 80017ce:	7b6a      	ldrb	r2, [r5, #13]
 80017d0:	7ba8      	ldrb	r0, [r5, #14]
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d007      	beq.n	80017e6 <USBPD_PE_StateMachine_SNK+0x276>
 80017d6:	73aa      	strb	r2, [r5, #14]
 80017d8:	2000      	movs	r0, #0
 80017da:	9000      	str	r0, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	7b29      	ldrb	r1, [r5, #12]
 80017e0:	2004      	movs	r0, #4
 80017e2:	6834      	ldr	r4, [r6, #0]
 80017e4:	47a0      	blx	r4
 80017e6:	2400      	movs	r4, #0
 80017e8:	6928      	ldr	r0, [r5, #16]
 80017ea:	49ba      	ldr	r1, [pc, #744]	; (8001ad4 <USBPD_PE_StateMachine_SNK+0x564>)
 80017ec:	4001      	ands	r1, r0
 80017ee:	6129      	str	r1, [r5, #16]
 80017f0:	9804      	ldr	r0, [sp, #16]
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d017      	beq.n	8001826 <USBPD_PE_StateMachine_SNK+0x2b6>
 80017f6:	48b8      	ldr	r0, [pc, #736]	; (8001ad8 <USBPD_PE_StateMachine_SNK+0x568>)
 80017f8:	6800      	ldr	r0, [r0, #0]
 80017fa:	49b8      	ldr	r1, [pc, #736]	; (8001adc <USBPD_PE_StateMachine_SNK+0x56c>)
 80017fc:	4288      	cmp	r0, r1
 80017fe:	d012      	beq.n	8001826 <USBPD_PE_StateMachine_SNK+0x2b6>
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <USBPD_PE_StateMachine_SNK+0x2c0>)
 8001802:	7b29      	ldrb	r1, [r5, #12]
 8001804:	0089      	lsls	r1, r1, #2
 8001806:	5841      	ldr	r1, [r0, r1]
 8001808:	690a      	ldr	r2, [r1, #16]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	031b      	lsls	r3, r3, #12
 800180e:	18d2      	adds	r2, r2, r3
 8001810:	610a      	str	r2, [r1, #16]
 8001812:	7b29      	ldrb	r1, [r5, #12]
 8001814:	0089      	lsls	r1, r1, #2
 8001816:	5840      	ldr	r0, [r0, r1]
 8001818:	6901      	ldr	r1, [r0, #16]
 800181a:	0cca      	lsrs	r2, r1, #19
 800181c:	2a08      	cmp	r2, #8
 800181e:	d302      	bcc.n	8001826 <USBPD_PE_StateMachine_SNK+0x2b6>
 8001820:	0349      	lsls	r1, r1, #13
 8001822:	0b49      	lsrs	r1, r1, #13
 8001824:	6101      	str	r1, [r0, #16]
 8001826:	2c00      	cmp	r4, #0
 8001828:	d100      	bne.n	800182c <USBPD_PE_StateMachine_SNK+0x2bc>
 800182a:	e6ff      	b.n	800162c <USBPD_PE_StateMachine_SNK+0xbc>
 800182c:	e00a      	b.n	8001844 <USBPD_PE_StateMachine_SNK+0x2d4>
 800182e:	bf00      	nop
 8001830:	20000178 	.word	0x20000178
 8001834:	20000000 	.word	0x20000000
 8001838:	fffbffff 	.word	0xfffbffff
 800183c:	000081f4 	.word	0x000081f4
 8001840:	2400      	movs	r4, #0
 8001842:	43e4      	mvns	r4, r4
 8001844:	0020      	movs	r0, r4
 8001846:	e6ec      	b.n	8001622 <USBPD_PE_StateMachine_SNK+0xb2>
 8001848:	6868      	ldr	r0, [r5, #4]
 800184a:	6801      	ldr	r1, [r0, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	4391      	bics	r1, r2
 8001850:	6001      	str	r1, [r0, #0]
 8001852:	215f      	movs	r1, #95	; 0x5f
 8001854:	7b28      	ldrb	r0, [r5, #12]
 8001856:	f7fe ff2f 	bl	80006b8 <USBPD_PE_Notification>
 800185a:	2400      	movs	r4, #0
 800185c:	43e4      	mvns	r4, r4
 800185e:	e795      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001860:	6868      	ldr	r0, [r5, #4]
 8001862:	6801      	ldr	r1, [r0, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	4391      	bics	r1, r2
 8001868:	6001      	str	r1, [r0, #0]
 800186a:	68a8      	ldr	r0, [r5, #8]
 800186c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800186e:	2900      	cmp	r1, #0
 8001870:	d0f3      	beq.n	800185a <USBPD_PE_StateMachine_SNK+0x2ea>
 8001872:	7b28      	ldrb	r0, [r5, #12]
 8001874:	4788      	blx	r1
 8001876:	e7f0      	b.n	800185a <USBPD_PE_StateMachine_SNK+0x2ea>
 8001878:	6868      	ldr	r0, [r5, #4]
 800187a:	9000      	str	r0, [sp, #0]
 800187c:	6800      	ldr	r0, [r0, #0]
 800187e:	2101      	movs	r1, #1
 8001880:	0b02      	lsrs	r2, r0, #12
 8001882:	400a      	ands	r2, r1
 8001884:	d0eb      	beq.n	800185e <USBPD_PE_StateMachine_SNK+0x2ee>
 8001886:	0782      	lsls	r2, r0, #30
 8001888:	0f92      	lsrs	r2, r2, #30
 800188a:	2a01      	cmp	r2, #1
 800188c:	d101      	bne.n	8001892 <USBPD_PE_StateMachine_SNK+0x322>
 800188e:	2200      	movs	r2, #0
 8001890:	e000      	b.n	8001894 <USBPD_PE_StateMachine_SNK+0x324>
 8001892:	2220      	movs	r2, #32
 8001894:	2320      	movs	r3, #32
 8001896:	4398      	bics	r0, r3
 8001898:	4302      	orrs	r2, r0
 800189a:	9800      	ldr	r0, [sp, #0]
 800189c:	6002      	str	r2, [r0, #0]
 800189e:	7629      	strb	r1, [r5, #24]
 80018a0:	836e      	strh	r6, [r5, #26]
 80018a2:	24fa      	movs	r4, #250	; 0xfa
 80018a4:	0064      	lsls	r4, r4, #1
 80018a6:	736f      	strb	r7, [r5, #13]
 80018a8:	e770      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 80018aa:	4669      	mov	r1, sp
 80018ac:	7b09      	ldrb	r1, [r1, #12]
 80018ae:	2911      	cmp	r1, #17
 80018b0:	d135      	bne.n	800191e <USBPD_PE_StateMachine_SNK+0x3ae>
 80018b2:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 80018b4:	0bca      	lsrs	r2, r1, #15
 80018b6:	d12c      	bne.n	8001912 <USBPD_PE_StateMachine_SNK+0x3a2>
 80018b8:	2607      	movs	r6, #7
 80018ba:	0b0a      	lsrs	r2, r1, #12
 80018bc:	4232      	tst	r2, r6
 80018be:	d028      	beq.n	8001912 <USBPD_PE_StateMachine_SNK+0x3a2>
 80018c0:	06ca      	lsls	r2, r1, #27
 80018c2:	0ed2      	lsrs	r2, r2, #27
 80018c4:	2a01      	cmp	r2, #1
 80018c6:	d124      	bne.n	8001912 <USBPD_PE_StateMachine_SNK+0x3a2>
 80018c8:	2200      	movs	r2, #0
 80018ca:	002b      	movs	r3, r5
 80018cc:	3378      	adds	r3, #120	; 0x78
 80018ce:	711a      	strb	r2, [r3, #4]
 80018d0:	692a      	ldr	r2, [r5, #16]
 80018d2:	4310      	orrs	r0, r2
 80018d4:	6128      	str	r0, [r5, #16]
 80018d6:	0608      	lsls	r0, r1, #24
 80018d8:	0f81      	lsrs	r1, r0, #30
 80018da:	4668      	mov	r0, sp
 80018dc:	7b40      	ldrb	r0, [r0, #13]
 80018de:	f7ff f8e3 	bl	8000aa8 <PE_ExtRevisionInteroperability>
 80018e2:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 80018e4:	0b00      	lsrs	r0, r0, #12
 80018e6:	4006      	ands	r6, r0
 80018e8:	00b3      	lsls	r3, r6, #2
 80018ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018ec:	1c82      	adds	r2, r0, #2
 80018ee:	2104      	movs	r1, #4
 80018f0:	7b28      	ldrb	r0, [r5, #12]
 80018f2:	68ae      	ldr	r6, [r5, #8]
 80018f4:	69b6      	ldr	r6, [r6, #24]
 80018f6:	47b0      	blx	r6
 80018f8:	2001      	movs	r0, #1
 80018fa:	7628      	strb	r0, [r5, #24]
 80018fc:	6868      	ldr	r0, [r5, #4]
 80018fe:	6801      	ldr	r1, [r0, #0]
 8001900:	2210      	movs	r2, #16
 8001902:	4391      	bics	r1, r2
 8001904:	6001      	str	r1, [r0, #0]
 8001906:	2044      	movs	r0, #68	; 0x44
 8001908:	7368      	strb	r0, [r5, #13]
 800190a:	4668      	mov	r0, sp
 800190c:	7b00      	ldrb	r0, [r0, #12]
 800190e:	2814      	cmp	r0, #20
 8001910:	d005      	beq.n	800191e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001912:	2014      	movs	r0, #20
 8001914:	4669      	mov	r1, sp
 8001916:	7308      	strb	r0, [r1, #12]
 8001918:	0028      	movs	r0, r5
 800191a:	f7fe ffea 	bl	80008f2 <PE_Clear_RxEvent>
 800191e:	8b68      	ldrh	r0, [r5, #26]
 8001920:	03a1      	lsls	r1, r4, #14
 8001922:	e0a4      	b.n	8001a6e <USBPD_PE_StateMachine_SNK+0x4fe>
 8001924:	466a      	mov	r2, sp
 8001926:	0029      	movs	r1, r5
 8001928:	3114      	adds	r1, #20
 800192a:	7b28      	ldrb	r0, [r5, #12]
 800192c:	68ab      	ldr	r3, [r5, #8]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4798      	blx	r3
 8001932:	6928      	ldr	r0, [r5, #16]
 8001934:	2118      	movs	r1, #24
 8001936:	4388      	bics	r0, r1
 8001938:	9900      	ldr	r1, [sp, #0]
 800193a:	00c9      	lsls	r1, r1, #3
 800193c:	2218      	movs	r2, #24
 800193e:	400a      	ands	r2, r1
 8001940:	4302      	orrs	r2, r0
 8001942:	612a      	str	r2, [r5, #16]
 8001944:	2045      	movs	r0, #69	; 0x45
 8001946:	7368      	strb	r0, [r5, #13]
 8001948:	2400      	movs	r4, #0
 800194a:	e71f      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 800194c:	6928      	ldr	r0, [r5, #16]
 800194e:	0401      	lsls	r1, r0, #16
 8001950:	0fc9      	lsrs	r1, r1, #31
 8001952:	d001      	beq.n	8001958 <USBPD_PE_StateMachine_SNK+0x3e8>
 8001954:	2002      	movs	r0, #2
 8001956:	e000      	b.n	800195a <USBPD_PE_StateMachine_SNK+0x3ea>
 8001958:	2000      	movs	r0, #0
 800195a:	9002      	str	r0, [sp, #8]
 800195c:	2046      	movs	r0, #70	; 0x46
 800195e:	9001      	str	r0, [sp, #4]
 8001960:	2001      	movs	r0, #1
 8001962:	9000      	str	r0, [sp, #0]
 8001964:	002b      	movs	r3, r5
 8001966:	3314      	adds	r3, #20
 8001968:	2202      	movs	r2, #2
 800196a:	2100      	movs	r1, #0
 800196c:	0028      	movs	r0, r5
 800196e:	f7ff fb4e 	bl	800100e <PE_Send_DataMessage>
 8001972:	2800      	cmp	r0, #0
 8001974:	d106      	bne.n	8001984 <USBPD_PE_StateMachine_SNK+0x414>
 8001976:	6928      	ldr	r0, [r5, #16]
 8001978:	49ae      	ldr	r1, [pc, #696]	; (8001c34 <USBPD_PE_StateMachine_SNK+0x6c4>)
 800197a:	4001      	ands	r1, r0
 800197c:	6129      	str	r1, [r5, #16]
 800197e:	48ae      	ldr	r0, [pc, #696]	; (8001c38 <USBPD_PE_StateMachine_SNK+0x6c8>)
 8001980:	8368      	strh	r0, [r5, #26]
 8001982:	241b      	movs	r4, #27
 8001984:	e702      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001986:	4668      	mov	r0, sp
 8001988:	7b00      	ldrb	r0, [r0, #12]
 800198a:	2811      	cmp	r0, #17
 800198c:	d14b      	bne.n	8001a26 <USBPD_PE_StateMachine_SNK+0x4b6>
 800198e:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001990:	21f0      	movs	r1, #240	; 0xf0
 8001992:	0209      	lsls	r1, r1, #8
 8001994:	4001      	ands	r1, r0
 8001996:	d146      	bne.n	8001a26 <USBPD_PE_StateMachine_SNK+0x4b6>
 8001998:	21fa      	movs	r1, #250	; 0xfa
 800199a:	0049      	lsls	r1, r1, #1
 800199c:	06c2      	lsls	r2, r0, #27
 800199e:	0ed2      	lsrs	r2, r2, #27
 80019a0:	1e92      	subs	r2, r2, #2
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	d917      	bls.n	80019d6 <USBPD_PE_StateMachine_SNK+0x466>
 80019a6:	1e92      	subs	r2, r2, #2
 80019a8:	d001      	beq.n	80019ae <USBPD_PE_StateMachine_SNK+0x43e>
 80019aa:	3a08      	subs	r2, #8
 80019ac:	d125      	bne.n	80019fa <USBPD_PE_StateMachine_SNK+0x48a>
 80019ae:	686a      	ldr	r2, [r5, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	0f52      	lsrs	r2, r2, #29
 80019b6:	2a03      	cmp	r2, #3
 80019b8:	d003      	beq.n	80019c2 <USBPD_PE_StateMachine_SNK+0x452>
 80019ba:	736f      	strb	r7, [r5, #13]
 80019bc:	836e      	strh	r6, [r5, #26]
 80019be:	000c      	movs	r4, r1
 80019c0:	e015      	b.n	80019ee <USBPD_PE_StateMachine_SNK+0x47e>
 80019c2:	06c0      	lsls	r0, r0, #27
 80019c4:	0ec0      	lsrs	r0, r0, #27
 80019c6:	280c      	cmp	r0, #12
 80019c8:	d101      	bne.n	80019ce <USBPD_PE_StateMachine_SNK+0x45e>
 80019ca:	2049      	movs	r0, #73	; 0x49
 80019cc:	e000      	b.n	80019d0 <USBPD_PE_StateMachine_SNK+0x460>
 80019ce:	2003      	movs	r0, #3
 80019d0:	7368      	strb	r0, [r5, #13]
 80019d2:	2400      	movs	r4, #0
 80019d4:	e00b      	b.n	80019ee <USBPD_PE_StateMachine_SNK+0x47e>
 80019d6:	836e      	strh	r6, [r5, #26]
 80019d8:	000c      	movs	r4, r1
 80019da:	2104      	movs	r1, #4
 80019dc:	0028      	movs	r0, r5
 80019de:	f7ff fa77 	bl	8000ed0 <PE_SetPowerNegotiation>
 80019e2:	2047      	movs	r0, #71	; 0x47
 80019e4:	7368      	strb	r0, [r5, #13]
 80019e6:	4668      	mov	r0, sp
 80019e8:	7b00      	ldrb	r0, [r0, #12]
 80019ea:	2814      	cmp	r0, #20
 80019ec:	d005      	beq.n	80019fa <USBPD_PE_StateMachine_SNK+0x48a>
 80019ee:	2014      	movs	r0, #20
 80019f0:	4669      	mov	r1, sp
 80019f2:	7308      	strb	r0, [r1, #12]
 80019f4:	0028      	movs	r0, r5
 80019f6:	f7fe ff7c 	bl	80008f2 <PE_Clear_RxEvent>
 80019fa:	202c      	movs	r0, #44	; 0x2c
 80019fc:	5c28      	ldrb	r0, [r5, r0]
 80019fe:	06c0      	lsls	r0, r0, #27
 8001a00:	0ec0      	lsrs	r0, r0, #27
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d009      	beq.n	8001a1a <USBPD_PE_StateMachine_SNK+0x4aa>
 8001a06:	2803      	cmp	r0, #3
 8001a08:	d009      	beq.n	8001a1e <USBPD_PE_StateMachine_SNK+0x4ae>
 8001a0a:	2804      	cmp	r0, #4
 8001a0c:	d003      	beq.n	8001a16 <USBPD_PE_StateMachine_SNK+0x4a6>
 8001a0e:	280c      	cmp	r0, #12
 8001a10:	d109      	bne.n	8001a26 <USBPD_PE_StateMachine_SNK+0x4b6>
 8001a12:	2103      	movs	r1, #3
 8001a14:	e004      	b.n	8001a20 <USBPD_PE_StateMachine_SNK+0x4b0>
 8001a16:	2102      	movs	r1, #2
 8001a18:	e002      	b.n	8001a20 <USBPD_PE_StateMachine_SNK+0x4b0>
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	e000      	b.n	8001a20 <USBPD_PE_StateMachine_SNK+0x4b0>
 8001a1e:	2101      	movs	r1, #1
 8001a20:	7b28      	ldrb	r0, [r5, #12]
 8001a22:	f7fe fe49 	bl	80006b8 <USBPD_PE_Notification>
 8001a26:	8b68      	ldrh	r0, [r5, #26]
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0209      	lsls	r1, r1, #8
 8001a2c:	4288      	cmp	r0, r1
 8001a2e:	d139      	bne.n	8001aa4 <USBPD_PE_StateMachine_SNK+0x534>
 8001a30:	200f      	movs	r0, #15
 8001a32:	e788      	b.n	8001946 <USBPD_PE_StateMachine_SNK+0x3d6>
 8001a34:	4668      	mov	r0, sp
 8001a36:	7b00      	ldrb	r0, [r0, #12]
 8001a38:	2811      	cmp	r0, #17
 8001a3a:	d115      	bne.n	8001a68 <USBPD_PE_StateMachine_SNK+0x4f8>
 8001a3c:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001a3e:	49ba      	ldr	r1, [pc, #744]	; (8001d28 <USBPD_PE_StateMachine_SNK+0x7b8>)
 8001a40:	4001      	ands	r1, r0
 8001a42:	2906      	cmp	r1, #6
 8001a44:	d110      	bne.n	8001a68 <USBPD_PE_StateMachine_SNK+0x4f8>
 8001a46:	2014      	movs	r0, #20
 8001a48:	4669      	mov	r1, sp
 8001a4a:	7308      	strb	r0, [r1, #12]
 8001a4c:	0028      	movs	r0, r5
 8001a4e:	f7fe ff50 	bl	80008f2 <PE_Clear_RxEvent>
 8001a52:	2103      	movs	r1, #3
 8001a54:	0028      	movs	r0, r5
 8001a56:	f7ff fa3b 	bl	8000ed0 <PE_SetPowerNegotiation>
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	7b28      	ldrb	r0, [r5, #12]
 8001a5e:	f7fe fe2b 	bl	80006b8 <USBPD_PE_Notification>
 8001a62:	2003      	movs	r0, #3
 8001a64:	7368      	strb	r0, [r5, #13]
 8001a66:	2400      	movs	r4, #0
 8001a68:	8b68      	ldrh	r0, [r5, #26]
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	0209      	lsls	r1, r1, #8
 8001a6e:	4288      	cmp	r0, r1
 8001a70:	d118      	bne.n	8001aa4 <USBPD_PE_StateMachine_SNK+0x534>
 8001a72:	e7dd      	b.n	8001a30 <USBPD_PE_StateMachine_SNK+0x4c0>
 8001a74:	6868      	ldr	r0, [r5, #4]
 8001a76:	6801      	ldr	r1, [r0, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4391      	bics	r1, r2
 8001a7c:	6001      	str	r1, [r0, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	0028      	movs	r0, r5
 8001a82:	f7ff fa25 	bl	8000ed0 <PE_SetPowerNegotiation>
 8001a86:	0029      	movs	r1, r5
 8001a88:	3178      	adds	r1, #120	; 0x78
 8001a8a:	7908      	ldrb	r0, [r1, #4]
 8001a8c:	2803      	cmp	r0, #3
 8001a8e:	d30a      	bcc.n	8001aa6 <USBPD_PE_StateMachine_SNK+0x536>
 8001a90:	6928      	ldr	r0, [r5, #16]
 8001a92:	0741      	lsls	r1, r0, #29
 8001a94:	0fc9      	lsrs	r1, r1, #31
 8001a96:	d003      	beq.n	8001aa0 <USBPD_PE_StateMachine_SNK+0x530>
 8001a98:	68a8      	ldr	r0, [r5, #8]
 8001a9a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d16b      	bne.n	8001b78 <USBPD_PE_StateMachine_SNK+0x608>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	7368      	strb	r0, [r5, #13]
 8001aa4:	e672      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001aa6:	1c40      	adds	r0, r0, #1
 8001aa8:	7108      	strb	r0, [r1, #4]
 8001aaa:	2105      	movs	r1, #5
 8001aac:	0028      	movs	r0, r5
 8001aae:	f7fe fec5 	bl	800083c <PE_Send_RESET>
 8001ab2:	48b3      	ldr	r0, [pc, #716]	; (8001d80 <.text_3>)
 8001ab4:	8368      	strh	r0, [r5, #26]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2101      	movs	r1, #1
 8001aba:	0028      	movs	r0, r5
 8001abc:	f7ff f9ff 	bl	8000ebe <PE_CallHardResetCallback>
 8001ac0:	209b      	movs	r0, #155	; 0x9b
 8001ac2:	e740      	b.n	8001946 <USBPD_PE_StateMachine_SNK+0x3d6>
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	0028      	movs	r0, r5
 8001ac8:	f7ff f9f9 	bl	8000ebe <PE_CallHardResetCallback>
 8001acc:	48ac      	ldr	r0, [pc, #688]	; (8001d80 <.text_3>)
 8001ace:	8368      	strh	r0, [r5, #26]
 8001ad0:	e7f6      	b.n	8001ac0 <USBPD_PE_StateMachine_SNK+0x550>
 8001ad2:	bf00      	nop
 8001ad4:	ffffdfff 	.word	0xffffdfff
 8001ad8:	20000174 	.word	0x20000174
 8001adc:	b5e8b5cd 	.word	0xb5e8b5cd
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4668      	mov	r0, sp
 8001ae4:	7b40      	ldrb	r0, [r0, #13]
 8001ae6:	68aa      	ldr	r2, [r5, #8]
 8001ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aea:	4790      	blx	r2
 8001aec:	2801      	cmp	r0, #1
 8001aee:	d10d      	bne.n	8001b0c <USBPD_PE_StateMachine_SNK+0x59c>
 8001af0:	48a4      	ldr	r0, [pc, #656]	; (8001d84 <.text_4>)
 8001af2:	8368      	strh	r0, [r5, #26]
 8001af4:	2169      	movs	r1, #105	; 0x69
 8001af6:	4668      	mov	r0, sp
 8001af8:	7b40      	ldrb	r0, [r0, #13]
 8001afa:	f7fe fddd 	bl	80006b8 <USBPD_PE_Notification>
 8001afe:	2040      	movs	r0, #64	; 0x40
 8001b00:	7368      	strb	r0, [r5, #13]
 8001b02:	2400      	movs	r4, #0
 8001b04:	2113      	movs	r1, #19
 8001b06:	7b28      	ldrb	r0, [r5, #12]
 8001b08:	f7fe fdd6 	bl	80006b8 <USBPD_PE_Notification>
 8001b0c:	8b68      	ldrh	r0, [r5, #26]
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0209      	lsls	r1, r1, #8
 8001b12:	4288      	cmp	r0, r1
 8001b14:	d1c6      	bne.n	8001aa4 <USBPD_PE_StateMachine_SNK+0x534>
 8001b16:	e01d      	b.n	8001b54 <USBPD_PE_StateMachine_SNK+0x5e4>
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4668      	mov	r0, sp
 8001b1c:	7b40      	ldrb	r0, [r0, #13]
 8001b1e:	68aa      	ldr	r2, [r5, #8]
 8001b20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b22:	4790      	blx	r2
 8001b24:	2801      	cmp	r0, #1
 8001b26:	d110      	bne.n	8001b4a <USBPD_PE_StateMachine_SNK+0x5da>
 8001b28:	0028      	movs	r0, r5
 8001b2a:	f7fe ff77 	bl	8000a1c <PE_Reset_HardReset>
 8001b2e:	2205      	movs	r2, #5
 8001b30:	2100      	movs	r1, #0
 8001b32:	0028      	movs	r0, r5
 8001b34:	f7ff f9c3 	bl	8000ebe <PE_CallHardResetCallback>
 8001b38:	2168      	movs	r1, #104	; 0x68
 8001b3a:	4668      	mov	r0, sp
 8001b3c:	7b40      	ldrb	r0, [r0, #13]
 8001b3e:	f7fe fdbb 	bl	80006b8 <USBPD_PE_Notification>
 8001b42:	836e      	strh	r6, [r5, #26]
 8001b44:	24fa      	movs	r4, #250	; 0xfa
 8001b46:	0064      	lsls	r4, r4, #1
 8001b48:	736f      	strb	r7, [r5, #13]
 8001b4a:	8b68      	ldrh	r0, [r5, #26]
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0209      	lsls	r1, r1, #8
 8001b50:	4288      	cmp	r0, r1
 8001b52:	d13c      	bne.n	8001bce <USBPD_PE_StateMachine_SNK+0x65e>
 8001b54:	2206      	movs	r2, #6
 8001b56:	2100      	movs	r1, #0
 8001b58:	0028      	movs	r0, r5
 8001b5a:	f7ff f9b0 	bl	8000ebe <PE_CallHardResetCallback>
 8001b5e:	0028      	movs	r0, r5
 8001b60:	3078      	adds	r0, #120	; 0x78
 8001b62:	7900      	ldrb	r0, [r0, #4]
 8001b64:	2803      	cmp	r0, #3
 8001b66:	d353      	bcc.n	8001c10 <USBPD_PE_StateMachine_SNK+0x6a0>
 8001b68:	6928      	ldr	r0, [r5, #16]
 8001b6a:	0741      	lsls	r1, r0, #29
 8001b6c:	0fc9      	lsrs	r1, r1, #31
 8001b6e:	d005      	beq.n	8001b7c <USBPD_PE_StateMachine_SNK+0x60c>
 8001b70:	68a8      	ldr	r0, [r5, #8]
 8001b72:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d001      	beq.n	8001b7c <USBPD_PE_StateMachine_SNK+0x60c>
 8001b78:	2092      	movs	r0, #146	; 0x92
 8001b7a:	e6e4      	b.n	8001946 <USBPD_PE_StateMachine_SNK+0x3d6>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e6e2      	b.n	8001946 <USBPD_PE_StateMachine_SNK+0x3d6>
 8001b80:	2000      	movs	r0, #0
 8001b82:	9000      	str	r0, [sp, #0]
 8001b84:	2303      	movs	r3, #3
 8001b86:	2203      	movs	r2, #3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	0028      	movs	r0, r5
 8001b8c:	f7ff fa14 	bl	8000fb8 <PE_Send_CtrlMessage>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d11c      	bne.n	8001bce <USBPD_PE_StateMachine_SNK+0x65e>
 8001b94:	2001      	movs	r0, #1
 8001b96:	7628      	strb	r0, [r5, #24]
 8001b98:	e682      	b.n	80018a0 <USBPD_PE_StateMachine_SNK+0x330>
 8001b9a:	6868      	ldr	r0, [r5, #4]
 8001b9c:	6800      	ldr	r0, [r0, #0]
 8001b9e:	0540      	lsls	r0, r0, #21
 8001ba0:	0f40      	lsrs	r0, r0, #29
 8001ba2:	2804      	cmp	r0, #4
 8001ba4:	d034      	beq.n	8001c10 <USBPD_PE_StateMachine_SNK+0x6a0>
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	9000      	str	r0, [sp, #0]
 8001baa:	2350      	movs	r3, #80	; 0x50
 8001bac:	220d      	movs	r2, #13
 8001bae:	2029      	movs	r0, #41	; 0x29
 8001bb0:	5c29      	ldrb	r1, [r5, r0]
 8001bb2:	0028      	movs	r0, r5
 8001bb4:	f7ff fa00 	bl	8000fb8 <PE_Send_CtrlMessage>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d108      	bne.n	8001bce <USBPD_PE_StateMachine_SNK+0x65e>
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	7628      	strb	r0, [r5, #24]
 8001bc0:	481d      	ldr	r0, [pc, #116]	; (8001c38 <USBPD_PE_StateMachine_SNK+0x6c8>)
 8001bc2:	8368      	strh	r0, [r5, #26]
 8001bc4:	241b      	movs	r4, #27
 8001bc6:	2130      	movs	r1, #48	; 0x30
 8001bc8:	7b28      	ldrb	r0, [r5, #12]
 8001bca:	f7fe fd75 	bl	80006b8 <USBPD_PE_Notification>
 8001bce:	e5dd      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001bd0:	4668      	mov	r0, sp
 8001bd2:	7b00      	ldrb	r0, [r0, #12]
 8001bd4:	2814      	cmp	r0, #20
 8001bd6:	d016      	beq.n	8001c06 <USBPD_PE_StateMachine_SNK+0x696>
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	5c28      	ldrb	r0, [r5, r0]
 8001bdc:	2129      	movs	r1, #41	; 0x29
 8001bde:	5c69      	ldrb	r1, [r5, r1]
 8001be0:	4288      	cmp	r0, r1
 8001be2:	d110      	bne.n	8001c06 <USBPD_PE_StateMachine_SNK+0x696>
 8001be4:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001be6:	4950      	ldr	r1, [pc, #320]	; (8001d28 <USBPD_PE_StateMachine_SNK+0x7b8>)
 8001be8:	4001      	ands	r1, r0
 8001bea:	2903      	cmp	r1, #3
 8001bec:	d10b      	bne.n	8001c06 <USBPD_PE_StateMachine_SNK+0x696>
 8001bee:	2001      	movs	r0, #1
 8001bf0:	7628      	strb	r0, [r5, #24]
 8001bf2:	836e      	strh	r6, [r5, #26]
 8001bf4:	24fa      	movs	r4, #250	; 0xfa
 8001bf6:	0064      	lsls	r4, r4, #1
 8001bf8:	736f      	strb	r7, [r5, #13]
 8001bfa:	2014      	movs	r0, #20
 8001bfc:	4669      	mov	r1, sp
 8001bfe:	7308      	strb	r0, [r1, #12]
 8001c00:	0028      	movs	r0, r5
 8001c02:	f7fe fe76 	bl	80008f2 <PE_Clear_RxEvent>
 8001c06:	8b68      	ldrh	r0, [r5, #26]
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0209      	lsls	r1, r1, #8
 8001c0c:	4288      	cmp	r0, r1
 8001c0e:	d1de      	bne.n	8001bce <USBPD_PE_StateMachine_SNK+0x65e>
 8001c10:	e70e      	b.n	8001a30 <USBPD_PE_StateMachine_SNK+0x4c0>
 8001c12:	9400      	str	r4, [sp, #0]
 8001c14:	2343      	movs	r3, #67	; 0x43
 8001c16:	2207      	movs	r2, #7
 8001c18:	2100      	movs	r1, #0
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	f7ff f9cc 	bl	8000fb8 <PE_Send_CtrlMessage>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1d4      	bne.n	8001bce <USBPD_PE_StateMachine_SNK+0x65e>
 8001c24:	2006      	movs	r0, #6
 8001c26:	7628      	strb	r0, [r5, #24]
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <USBPD_PE_StateMachine_SNK+0x6c8>)
 8001c2a:	8368      	strh	r0, [r5, #26]
 8001c2c:	241b      	movs	r4, #27
 8001c2e:	210b      	movs	r1, #11
 8001c30:	e7ca      	b.n	8001bc8 <USBPD_PE_StateMachine_SNK+0x658>
 8001c32:	bf00      	nop
 8001c34:	ffff7fff 	.word	0xffff7fff
 8001c38:	0000801b 	.word	0x0000801b
 8001c3c:	4668      	mov	r0, sp
 8001c3e:	7b00      	ldrb	r0, [r0, #12]
 8001c40:	2811      	cmp	r0, #17
 8001c42:	d115      	bne.n	8001c70 <USBPD_PE_StateMachine_SNK+0x700>
 8001c44:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001c46:	4938      	ldr	r1, [pc, #224]	; (8001d28 <USBPD_PE_StateMachine_SNK+0x7b8>)
 8001c48:	4001      	ands	r1, r0
 8001c4a:	2906      	cmp	r1, #6
 8001c4c:	d110      	bne.n	8001c70 <USBPD_PE_StateMachine_SNK+0x700>
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	7b28      	ldrb	r0, [r5, #12]
 8001c52:	f7fe fd31 	bl	80006b8 <USBPD_PE_Notification>
 8001c56:	2003      	movs	r0, #3
 8001c58:	7368      	strb	r0, [r5, #13]
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	4668      	mov	r0, sp
 8001c5e:	7b00      	ldrb	r0, [r0, #12]
 8001c60:	2814      	cmp	r0, #20
 8001c62:	d005      	beq.n	8001c70 <USBPD_PE_StateMachine_SNK+0x700>
 8001c64:	2014      	movs	r0, #20
 8001c66:	4669      	mov	r1, sp
 8001c68:	7308      	strb	r0, [r1, #12]
 8001c6a:	0028      	movs	r0, r5
 8001c6c:	f7fe fe41 	bl	80008f2 <PE_Clear_RxEvent>
 8001c70:	e58c      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001c72:	2000      	movs	r0, #0
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	2303      	movs	r3, #3
 8001c78:	2204      	movs	r2, #4
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	0028      	movs	r0, r5
 8001c7e:	f7ff f99b 	bl	8000fb8 <PE_Send_CtrlMessage>
 8001c82:	e583      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001c84:	2904      	cmp	r1, #4
 8001c86:	d006      	beq.n	8001c96 <USBPD_PE_StateMachine_SNK+0x726>
 8001c88:	2100      	movs	r1, #0
 8001c8a:	7629      	strb	r1, [r5, #24]
 8001c8c:	7368      	strb	r0, [r5, #13]
 8001c8e:	2120      	movs	r1, #32
 8001c90:	7b28      	ldrb	r0, [r5, #12]
 8001c92:	f7fe fd11 	bl	80006b8 <USBPD_PE_Notification>
 8001c96:	a903      	add	r1, sp, #12
 8001c98:	0028      	movs	r0, r5
 8001c9a:	f000 f875 	bl	8001d88 <PE_StateMachine_SNK_ReadyWait>
 8001c9e:	0004      	movs	r4, r0
 8001ca0:	e574      	b.n	800178c <USBPD_PE_StateMachine_SNK+0x21c>
 8001ca2:	9400      	str	r4, [sp, #0]
 8001ca4:	2339      	movs	r3, #57	; 0x39
 8001ca6:	2078      	movs	r0, #120	; 0x78
 8001ca8:	5c2a      	ldrb	r2, [r5, r0]
 8001caa:	2100      	movs	r1, #0
 8001cac:	0028      	movs	r0, r5
 8001cae:	f7ff f983 	bl	8000fb8 <PE_Send_CtrlMessage>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d1f4      	bne.n	8001ca0 <USBPD_PE_StateMachine_SNK+0x730>
 8001cb6:	0028      	movs	r0, r5
 8001cb8:	3078      	adds	r0, #120	; 0x78
 8001cba:	7840      	ldrb	r0, [r0, #1]
 8001cbc:	7628      	strb	r0, [r5, #24]
 8001cbe:	2144      	movs	r1, #68	; 0x44
 8001cc0:	7b28      	ldrb	r0, [r5, #12]
 8001cc2:	f7fe fcf9 	bl	80006b8 <USBPD_PE_Notification>
 8001cc6:	e65a      	b.n	800197e <USBPD_PE_StateMachine_SNK+0x40e>
 8001cc8:	4668      	mov	r0, sp
 8001cca:	7b00      	ldrb	r0, [r0, #12]
 8001ccc:	2814      	cmp	r0, #20
 8001cce:	d024      	beq.n	8001d1a <USBPD_PE_StateMachine_SNK+0x7aa>
 8001cd0:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001cd2:	0bc0      	lsrs	r0, r0, #15
 8001cd4:	d00e      	beq.n	8001cf4 <USBPD_PE_StateMachine_SNK+0x784>
 8001cd6:	0028      	movs	r0, r5
 8001cd8:	f7ff f9d6 	bl	8001088 <PE_Check_ExtendedMessage>
 8001cdc:	4668      	mov	r0, sp
 8001cde:	7b00      	ldrb	r0, [r0, #12]
 8001ce0:	2814      	cmp	r0, #20
 8001ce2:	d005      	beq.n	8001cf0 <USBPD_PE_StateMachine_SNK+0x780>
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	4669      	mov	r1, sp
 8001ce8:	7308      	strb	r0, [r1, #12]
 8001cea:	0028      	movs	r0, r5
 8001cec:	f7fe fe01 	bl	80008f2 <PE_Clear_RxEvent>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	8368      	strh	r0, [r5, #26]
 8001cf4:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8001cf6:	490c      	ldr	r1, [pc, #48]	; (8001d28 <USBPD_PE_StateMachine_SNK+0x7b8>)
 8001cf8:	4001      	ands	r1, r0
 8001cfa:	2910      	cmp	r1, #16
 8001cfc:	d10d      	bne.n	8001d1a <USBPD_PE_StateMachine_SNK+0x7aa>
 8001cfe:	2003      	movs	r0, #3
 8001d00:	7368      	strb	r0, [r5, #13]
 8001d02:	2400      	movs	r4, #0
 8001d04:	4668      	mov	r0, sp
 8001d06:	7b00      	ldrb	r0, [r0, #12]
 8001d08:	2814      	cmp	r0, #20
 8001d0a:	d005      	beq.n	8001d18 <USBPD_PE_StateMachine_SNK+0x7a8>
 8001d0c:	2014      	movs	r0, #20
 8001d0e:	4669      	mov	r1, sp
 8001d10:	7308      	strb	r0, [r1, #12]
 8001d12:	0028      	movs	r0, r5
 8001d14:	f7fe fded 	bl	80008f2 <PE_Clear_RxEvent>
 8001d18:	836c      	strh	r4, [r5, #26]
 8001d1a:	8b68      	ldrh	r0, [r5, #26]
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0209      	lsls	r1, r1, #8
 8001d20:	4288      	cmp	r0, r1
 8001d22:	d1bd      	bne.n	8001ca0 <USBPD_PE_StateMachine_SNK+0x730>
 8001d24:	2003      	movs	r0, #3
 8001d26:	e60e      	b.n	8001946 <USBPD_PE_StateMachine_SNK+0x3d6>
 8001d28:	0000f01f 	.word	0x0000f01f
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	f7ff fa35 	bl	800119c <PE_SubStateMachine_ExtendedMessages>
 8001d32:	e7b4      	b.n	8001c9e <USBPD_PE_StateMachine_SNK+0x72e>
 8001d34:	a903      	add	r1, sp, #12
 8001d36:	0028      	movs	r0, r5
 8001d38:	f7fe ff66 	bl	8000c08 <PE_SubStateMachine_Generic>
 8001d3c:	e7af      	b.n	8001c9e <USBPD_PE_StateMachine_SNK+0x72e>
 8001d3e:	6928      	ldr	r0, [r5, #16]
 8001d40:	2701      	movs	r7, #1
 8001d42:	0b41      	lsrs	r1, r0, #13
 8001d44:	4039      	ands	r1, r7
 8001d46:	d019      	beq.n	8001d7c <USBPD_PE_StateMachine_SNK+0x80c>
 8001d48:	0b80      	lsrs	r0, r0, #14
 8001d4a:	4038      	ands	r0, r7
 8001d4c:	d007      	beq.n	8001d5e <USBPD_PE_StateMachine_SNK+0x7ee>
 8001d4e:	215b      	movs	r1, #91	; 0x5b
 8001d50:	7b28      	ldrb	r0, [r5, #12]
 8001d52:	f7fe fcb1 	bl	80006b8 <USBPD_PE_Notification>
 8001d56:	6928      	ldr	r0, [r5, #16]
 8001d58:	4944      	ldr	r1, [pc, #272]	; (8001e6c <.text_6>)
 8001d5a:	4001      	ands	r1, r0
 8001d5c:	6129      	str	r1, [r5, #16]
 8001d5e:	2003      	movs	r0, #3
 8001d60:	7368      	strb	r0, [r5, #13]
 8001d62:	7ba9      	ldrb	r1, [r5, #14]
 8001d64:	2903      	cmp	r1, #3
 8001d66:	d008      	beq.n	8001d7a <USBPD_PE_StateMachine_SNK+0x80a>
 8001d68:	73a8      	strb	r0, [r5, #14]
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	9000      	str	r0, [sp, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2203      	movs	r2, #3
 8001d72:	7b29      	ldrb	r1, [r5, #12]
 8001d74:	2004      	movs	r0, #4
 8001d76:	6834      	ldr	r4, [r6, #0]
 8001d78:	47a0      	blx	r4
 8001d7a:	2401      	movs	r4, #1
 8001d7c:	e534      	b.n	80017e8 <USBPD_PE_StateMachine_SNK+0x278>
	...

08001d80 <.text_3>:
 8001d80:	000083e8 	.word	0x000083e8

08001d84 <.text_4>:
 8001d84:	000088e3 	.word	0x000088e3

08001d88 <PE_StateMachine_SNK_ReadyWait>:
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	0004      	movs	r4, r0
 8001d8c:	000d      	movs	r5, r1
 8001d8e:	2602      	movs	r6, #2
 8001d90:	7828      	ldrb	r0, [r5, #0]
 8001d92:	2814      	cmp	r0, #20
 8001d94:	d00b      	beq.n	8001dae <PE_StateMachine_SNK_ReadyWait+0x26>
 8001d96:	0020      	movs	r0, r4
 8001d98:	f7ff fae0 	bl	800135c <PE_ManageRXEvent>
 8001d9c:	7828      	ldrb	r0, [r5, #0]
 8001d9e:	2814      	cmp	r0, #20
 8001da0:	d062      	beq.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001da2:	2014      	movs	r0, #20
 8001da4:	7028      	strb	r0, [r5, #0]
 8001da6:	0020      	movs	r0, r4
 8001da8:	f7fe fda3 	bl	80008f2 <PE_Clear_RxEvent>
 8001dac:	e05c      	b.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001dae:	6920      	ldr	r0, [r4, #16]
 8001db0:	0cc0      	lsrs	r0, r0, #19
 8001db2:	270f      	movs	r7, #15
 8001db4:	03b5      	lsls	r5, r6, #14
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d020      	beq.n	8001dfc <PE_StateMachine_SNK_ReadyWait+0x74>
 8001dba:	8ba1      	ldrh	r1, [r4, #28]
 8001dbc:	42a9      	cmp	r1, r5
 8001dbe:	d110      	bne.n	8001de2 <PE_StateMachine_SNK_ReadyWait+0x5a>
 8001dc0:	7367      	strb	r7, [r4, #13]
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	9000      	str	r0, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2270      	movs	r2, #112	; 0x70
 8001dca:	7b21      	ldrb	r1, [r4, #12]
 8001dcc:	2009      	movs	r0, #9
 8001dce:	4d28      	ldr	r5, [pc, #160]	; (8001e70 <.text_7>)
 8001dd0:	682d      	ldr	r5, [r5, #0]
 8001dd2:	47a8      	blx	r5
 8001dd4:	207c      	movs	r0, #124	; 0x7c
 8001dd6:	5c20      	ldrb	r0, [r4, r0]
 8001dd8:	1c40      	adds	r0, r0, #1
 8001dda:	217c      	movs	r1, #124	; 0x7c
 8001ddc:	5460      	strb	r0, [r4, r1]
 8001dde:	2600      	movs	r6, #0
 8001de0:	e042      	b.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001de2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001de4:	0509      	lsls	r1, r1, #20
 8001de6:	0f49      	lsrs	r1, r1, #29
 8001de8:	180a      	adds	r2, r1, r0
 8001dea:	2333      	movs	r3, #51	; 0x33
 8001dec:	435a      	muls	r2, r3
 8001dee:	4315      	orrs	r5, r2
 8001df0:	83a5      	strh	r5, [r4, #28]
 8001df2:	180e      	adds	r6, r1, r0
 8001df4:	2033      	movs	r0, #51	; 0x33
 8001df6:	4346      	muls	r6, r0
 8001df8:	b2b6      	uxth	r6, r6
 8001dfa:	e035      	b.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	43f6      	mvns	r6, r6
 8001e00:	7b20      	ldrb	r0, [r4, #12]
 8001e02:	f7fe fd99 	bl	8000938 <PE_PRL_Control_RxEvent>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d129      	bne.n	8001e5e <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001e0a:	202a      	movs	r0, #42	; 0x2a
 8001e0c:	5c20      	ldrb	r0, [r4, r0]
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d02a      	beq.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001e12:	6860      	ldr	r0, [r4, #4]
 8001e14:	6800      	ldr	r0, [r0, #0]
 8001e16:	2103      	movs	r1, #3
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4002      	ands	r2, r0
 8001e1c:	2a01      	cmp	r2, #1
 8001e1e:	d007      	beq.n	8001e30 <PE_StateMachine_SNK_ReadyWait+0xa8>
 8001e20:	4001      	ands	r1, r0
 8001e22:	2902      	cmp	r1, #2
 8001e24:	d11b      	bne.n	8001e5e <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001e26:	7b20      	ldrb	r0, [r4, #12]
 8001e28:	f000 f8ac 	bl	8001f84 <USBPD_PRL_IsResistor_SinkTxOK>
 8001e2c:	2801      	cmp	r0, #1
 8001e2e:	d116      	bne.n	8001e5e <PE_StateMachine_SNK_ReadyWait+0xd6>
 8001e30:	202b      	movs	r0, #43	; 0x2b
 8001e32:	5c20      	ldrb	r0, [r4, r0]
 8001e34:	2129      	movs	r1, #41	; 0x29
 8001e36:	5460      	strb	r0, [r4, r1]
 8001e38:	202a      	movs	r0, #42	; 0x2a
 8001e3a:	5c20      	ldrb	r0, [r4, r0]
 8001e3c:	7360      	strb	r0, [r4, #13]
 8001e3e:	2845      	cmp	r0, #69	; 0x45
 8001e40:	d102      	bne.n	8001e48 <PE_StateMachine_SNK_ReadyWait+0xc0>
 8001e42:	6920      	ldr	r0, [r4, #16]
 8001e44:	4305      	orrs	r5, r0
 8001e46:	6125      	str	r5, [r4, #16]
 8001e48:	2600      	movs	r6, #0
 8001e4a:	212a      	movs	r1, #42	; 0x2a
 8001e4c:	5466      	strb	r6, [r4, r1]
 8001e4e:	6a20      	ldr	r0, [r4, #32]
 8001e50:	6260      	str	r0, [r4, #36]	; 0x24
 8001e52:	6920      	ldr	r0, [r4, #16]
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	01c9      	lsls	r1, r1, #7
 8001e58:	4301      	orrs	r1, r0
 8001e5a:	6121      	str	r1, [r4, #16]
 8001e5c:	e004      	b.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001e5e:	202a      	movs	r0, #42	; 0x2a
 8001e60:	5c20      	ldrb	r0, [r4, r0]
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d000      	beq.n	8001e68 <PE_StateMachine_SNK_ReadyWait+0xe0>
 8001e66:	260f      	movs	r6, #15
 8001e68:	0030      	movs	r0, r6
 8001e6a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001e6c <.text_6>:
 8001e6c:	ffffbfff 	.word	0xffffbfff

08001e70 <.text_7>:
 8001e70:	20000000 	.word	0x20000000

08001e74 <USBPD_PRL_TimerCounter>:
 8001e74:	493f      	ldr	r1, [pc, #252]	; (8001f74 <.text_12>)
 8001e76:	0080      	lsls	r0, r0, #2
 8001e78:	5808      	ldr	r0, [r1, r0]
 8001e7a:	78c1      	ldrb	r1, [r0, #3]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	d002      	beq.n	8001e86 <USBPD_PRL_TimerCounter+0x12>
 8001e80:	78c1      	ldrb	r1, [r0, #3]
 8001e82:	1e49      	subs	r1, r1, #1
 8001e84:	70c1      	strb	r1, [r0, #3]
 8001e86:	4770      	bx	lr

08001e88 <USBPD_PRL_Init>:
 8001e88:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8001e8a:	b081      	sub	sp, #4
 8001e8c:	0014      	movs	r4, r2
 8001e8e:	001d      	movs	r5, r3
 8001e90:	2616      	movs	r6, #22
 8001e92:	2048      	movs	r0, #72	; 0x48
 8001e94:	f015 fcd0 	bl	8017838 <malloc>
 8001e98:	0007      	movs	r7, r0
 8001e9a:	d01d      	beq.n	8001ed8 <USBPD_PRL_Init+0x50>
 8001e9c:	9e02      	ldr	r6, [sp, #8]
 8001e9e:	2148      	movs	r1, #72	; 0x48
 8001ea0:	f015 fe0d 	bl	8017abe <__aeabi_memclr>
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	1d78      	adds	r0, r7, #5
 8001eaa:	f015 fe01 	bl	8017ab0 <__aeabi_memset>
 8001eae:	4831      	ldr	r0, [pc, #196]	; (8001f74 <.text_12>)
 8001eb0:	4669      	mov	r1, sp
 8001eb2:	7909      	ldrb	r1, [r1, #4]
 8001eb4:	0089      	lsls	r1, r1, #2
 8001eb6:	5047      	str	r7, [r0, r1]
 8001eb8:	623c      	str	r4, [r7, #32]
 8001eba:	627d      	str	r5, [r7, #36]	; 0x24
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	9000      	str	r0, [sp, #0]
 8001ec0:	6870      	ldr	r0, [r6, #4]
 8001ec2:	0743      	lsls	r3, r0, #29
 8001ec4:	0fdb      	lsrs	r3, r3, #31
 8001ec6:	003a      	movs	r2, r7
 8001ec8:	3228      	adds	r2, #40	; 0x28
 8001eca:	bf00      	nop
 8001ecc:	a103      	add	r1, pc, #12	; (adr r1, 8001edc <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8001ece:	4668      	mov	r0, sp
 8001ed0:	7900      	ldrb	r0, [r0, #4]
 8001ed2:	f009 fe27 	bl	800bb24 <USBPD_PHY_Init>
 8001ed6:	0006      	movs	r6, r0
 8001ed8:	0030      	movs	r0, r6
 8001eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001edc <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8001edc:	2475 0800 27c1 0800 2811 0800 2825 0800     u$...'...(..%(..
 8001eec:	282d 0800 0000 0000                         -(......

08001ef4 <USBPD_PRL_GetMemoryConsumption>:
 8001ef4:	20d8      	movs	r0, #216	; 0xd8
 8001ef6:	4770      	bx	lr

08001ef8 <USBPD_PRL_SetHeader>:
 8001ef8:	b530      	push	{r4, r5, lr}
 8001efa:	4c1e      	ldr	r4, [pc, #120]	; (8001f74 <.text_12>)
 8001efc:	0080      	lsls	r0, r0, #2
 8001efe:	5820      	ldr	r0, [r4, r0]
 8001f00:	8a04      	ldrh	r4, [r0, #16]
 8001f02:	4d1d      	ldr	r5, [pc, #116]	; (8001f78 <.text_13>)
 8001f04:	4025      	ands	r5, r4
 8001f06:	0209      	lsls	r1, r1, #8
 8001f08:	2480      	movs	r4, #128	; 0x80
 8001f0a:	0064      	lsls	r4, r4, #1
 8001f0c:	4021      	ands	r1, r4
 8001f0e:	4329      	orrs	r1, r5
 8001f10:	8201      	strh	r1, [r0, #16]
 8001f12:	4c1a      	ldr	r4, [pc, #104]	; (8001f7c <.text_14>)
 8001f14:	400c      	ands	r4, r1
 8001f16:	0151      	lsls	r1, r2, #5
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4011      	ands	r1, r2
 8001f1c:	4321      	orrs	r1, r4
 8001f1e:	8201      	strh	r1, [r0, #16]
 8001f20:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <.text_15>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	0199      	lsls	r1, r3, #6
 8001f26:	23c0      	movs	r3, #192	; 0xc0
 8001f28:	400b      	ands	r3, r1
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	8203      	strh	r3, [r0, #16]
 8001f2e:	bd30      	pop	{r4, r5, pc}

08001f30 <USBPD_PRL_SetHeaderPowerRole>:
 8001f30:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <.text_12>)
 8001f32:	0080      	lsls	r0, r0, #2
 8001f34:	5810      	ldr	r0, [r2, r0]
 8001f36:	8a02      	ldrh	r2, [r0, #16]
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <.text_13>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0209      	lsls	r1, r1, #8
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	e007      	b.n	8001f54 <.text_10>

08001f44 <USBPD_PRL_SetHeaderDataRole>:
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <.text_12>)
 8001f46:	0080      	lsls	r0, r0, #2
 8001f48:	5810      	ldr	r0, [r2, r0]
 8001f4a:	8a02      	ldrh	r2, [r0, #16]
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <.text_14>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0149      	lsls	r1, r1, #5
 8001f52:	2220      	movs	r2, #32

08001f54 <.text_10>:
 8001f54:	4011      	ands	r1, r2
 8001f56:	4319      	orrs	r1, r3
 8001f58:	8201      	strh	r1, [r0, #16]
 8001f5a:	4770      	bx	lr

08001f5c <USBPD_PRL_SetHeaderSpecification>:
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <.text_12>)
 8001f5e:	0080      	lsls	r0, r0, #2
 8001f60:	5810      	ldr	r0, [r2, r0]
 8001f62:	8a02      	ldrh	r2, [r0, #16]
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <.text_15>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0189      	lsls	r1, r1, #6
 8001f6a:	22c0      	movs	r2, #192	; 0xc0
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	8202      	strh	r2, [r0, #16]
 8001f72:	4770      	bx	lr

08001f74 <.text_12>:
 8001f74:	20000184 	.word	0x20000184

08001f78 <.text_13>:
 8001f78:	0000feff 	.word	0x0000feff

08001f7c <.text_14>:
 8001f7c:	0000ffdf 	.word	0x0000ffdf

08001f80 <.text_15>:
 8001f80:	0000ff3f 	.word	0x0000ff3f

08001f84 <USBPD_PRL_IsResistor_SinkTxOK>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	f009 fec2 	bl	800bd0e <USBPD_PHY_IsResistor_SinkTxOk>
 8001f8a:	bd02      	pop	{r1, pc}

08001f8c <USBPD_PRL_SendMessage>:
 8001f8c:	b5fd      	push	{r0, r2, r3, r4, r5, r6, r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	2003      	movs	r0, #3
 8001f92:	2503      	movs	r5, #3
 8001f94:	466a      	mov	r2, sp
 8001f96:	7e12      	ldrb	r2, [r2, #24]
 8001f98:	9204      	str	r2, [sp, #16]
 8001f9a:	4ac0      	ldr	r2, [pc, #768]	; (800229c <USBPD_PRL_SendMessage+0x310>)
 8001f9c:	9b04      	ldr	r3, [sp, #16]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	18d2      	adds	r2, r2, r3
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	0014      	movs	r4, r2
 8001fa8:	7923      	ldrb	r3, [r4, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <USBPD_PRL_SendMessage+0x2c>
 8001fae:	7a23      	ldrb	r3, [r4, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <USBPD_PRL_SendMessage+0x2c>
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	7113      	strb	r3, [r2, #4]
 8001fb8:	466b      	mov	r3, sp
 8001fba:	7119      	strb	r1, [r3, #4]
 8001fbc:	4669      	mov	r1, sp
 8001fbe:	7909      	ldrb	r1, [r1, #4]
 8001fc0:	9103      	str	r1, [sp, #12]
 8001fc2:	1861      	adds	r1, r4, r1
 8001fc4:	9b04      	ldr	r3, [sp, #16]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	1c5b      	adds	r3, r3, #1
 8001fca:	466e      	mov	r6, sp
 8001fcc:	7173      	strb	r3, [r6, #5]
 8001fce:	9b03      	ldr	r3, [sp, #12]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	9302      	str	r3, [sp, #8]
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	7923      	ldrb	r3, [r4, #4]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d900      	bls.n	8001fde <USBPD_PRL_SendMessage+0x52>
 8001fdc:	e1d7      	b.n	800238e <USBPD_PRL_SendMessage+0x402>
 8001fde:	a702      	add	r7, pc, #8	; (adr r7, 8001fe8 <USBPD_PRL_SendMessage+0x5c>)
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	5aff      	ldrh	r7, [r7, r3]
 8001fe4:	44bf      	add	pc, r7
 8001fe6:	bf00      	nop
 8001fe8:	03a60022 	.word	0x03a60022
 8001fec:	03a603a6 	.word	0x03a603a6
 8001ff0:	0088004a 	.word	0x0088004a
 8001ff4:	0140006a 	.word	0x0140006a
 8001ff8:	03a603a6 	.word	0x03a603a6
 8001ffc:	02e202b8 	.word	0x02e202b8
 8002000:	0330030e 	.word	0x0330030e
 8002004:	03a003a6 	.word	0x03a003a6
 8002008:	0368      	.short	0x0368
 800200a:	f3ef 8710 	mrs	r7, PRIMASK
 800200e:	b672      	cpsid	i
 8002010:	4668      	mov	r0, sp
 8002012:	7e00      	ldrb	r0, [r0, #24]
 8002014:	f7fe fc90 	bl	8000938 <PE_PRL_Control_RxEvent>
 8002018:	2800      	cmp	r0, #0
 800201a:	d105      	bne.n	8002028 <USBPD_PRL_SendMessage+0x9c>
 800201c:	7a60      	ldrb	r0, [r4, #9]
 800201e:	2800      	cmp	r0, #0
 8002020:	d102      	bne.n	8002028 <USBPD_PRL_SendMessage+0x9c>
 8002022:	20ff      	movs	r0, #255	; 0xff
 8002024:	7220      	strb	r0, [r4, #8]
 8002026:	e000      	b.n	800202a <USBPD_PRL_SendMessage+0x9e>
 8002028:	7226      	strb	r6, [r4, #8]
 800202a:	f387 8810 	msr	PRIMASK, r7
 800202e:	2006      	movs	r0, #6
 8002030:	e076      	b.n	8002120 <USBPD_PRL_SendMessage+0x194>
 8002032:	a80f      	add	r0, sp, #60	; 0x3c
 8002034:	7800      	ldrb	r0, [r0, #0]
 8002036:	2802      	cmp	r0, #2
 8002038:	d109      	bne.n	800204e <USBPD_PRL_SendMessage+0xc2>
 800203a:	4668      	mov	r0, sp
 800203c:	7e00      	ldrb	r0, [r0, #24]
 800203e:	f009 fe66 	bl	800bd0e <USBPD_PHY_IsResistor_SinkTxOk>
 8002042:	2801      	cmp	r0, #1
 8002044:	d101      	bne.n	800204a <USBPD_PRL_SendMessage+0xbe>
 8002046:	2005      	movs	r0, #5
 8002048:	e06a      	b.n	8002120 <USBPD_PRL_SendMessage+0x194>
 800204a:	2509      	movs	r5, #9
 800204c:	e1a1      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 800204e:	2006      	movs	r0, #6
 8002050:	e14f      	b.n	80022f2 <USBPD_PRL_SendMessage+0x366>
 8002052:	9902      	ldr	r1, [sp, #8]
 8002054:	1861      	adds	r1, r4, r1
 8002056:	8a09      	ldrh	r1, [r1, #16]
 8002058:	0989      	lsrs	r1, r1, #6
 800205a:	4008      	ands	r0, r1
 800205c:	2802      	cmp	r0, #2
 800205e:	d105      	bne.n	800206c <USBPD_PRL_SendMessage+0xe0>
 8002060:	a80f      	add	r0, sp, #60	; 0x3c
 8002062:	7800      	ldrb	r0, [r0, #0]
 8002064:	2802      	cmp	r0, #2
 8002066:	d101      	bne.n	800206c <USBPD_PRL_SendMessage+0xe0>
 8002068:	2004      	movs	r0, #4
 800206a:	e142      	b.n	80022f2 <USBPD_PRL_SendMessage+0x366>
 800206c:	2005      	movs	r0, #5
 800206e:	e140      	b.n	80022f2 <USBPD_PRL_SendMessage+0x366>
 8002070:	9802      	ldr	r0, [sp, #8]
 8002072:	1820      	adds	r0, r4, r0
 8002074:	8a03      	ldrh	r3, [r0, #16]
 8002076:	4ac8      	ldr	r2, [pc, #800]	; (8002398 <.text_18>)
 8002078:	401a      	ands	r2, r3
 800207a:	466b      	mov	r3, sp
 800207c:	7f1b      	ldrb	r3, [r3, #28]
 800207e:	06db      	lsls	r3, r3, #27
 8002080:	0edb      	lsrs	r3, r3, #27
 8002082:	4313      	orrs	r3, r2
 8002084:	8203      	strh	r3, [r0, #16]
 8002086:	045a      	lsls	r2, r3, #17
 8002088:	0c52      	lsrs	r2, r2, #17
 800208a:	466b      	mov	r3, sp
 800208c:	7f1b      	ldrb	r3, [r3, #28]
 800208e:	09db      	lsrs	r3, r3, #7
 8002090:	03db      	lsls	r3, r3, #15
 8002092:	4313      	orrs	r3, r2
 8002094:	8203      	strh	r3, [r0, #16]
 8002096:	7066      	strb	r6, [r4, #1]
 8002098:	8a03      	ldrh	r3, [r0, #16]
 800209a:	0bda      	lsrs	r2, r3, #15
 800209c:	d023      	beq.n	80020e6 <USBPD_PRL_SendMessage+0x15a>
 800209e:	9a08      	ldr	r2, [sp, #32]
 80020a0:	7892      	ldrb	r2, [r2, #2]
 80020a2:	9b08      	ldr	r3, [sp, #32]
 80020a4:	78db      	ldrb	r3, [r3, #3]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	18d2      	adds	r2, r2, r3
 80020aa:	82e2      	strh	r2, [r4, #22]
 80020ac:	8ae2      	ldrh	r2, [r4, #22]
 80020ae:	0a93      	lsrs	r3, r2, #10
 80020b0:	07db      	lsls	r3, r3, #31
 80020b2:	d40f      	bmi.n	80020d4 <USBPD_PRL_SendMessage+0x148>
 80020b4:	0ad2      	lsrs	r2, r2, #11
 80020b6:	0712      	lsls	r2, r2, #28
 80020b8:	d122      	bne.n	8002100 <USBPD_PRL_SendMessage+0x174>
 80020ba:	466a      	mov	r2, sp
 80020bc:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80020be:	1f12      	subs	r2, r2, #4
 80020c0:	83a2      	strh	r2, [r4, #28]
 80020c2:	05d2      	lsls	r2, r2, #23
 80020c4:	0dd2      	lsrs	r2, r2, #23
 80020c6:	8ae3      	ldrh	r3, [r4, #22]
 80020c8:	27fe      	movs	r7, #254	; 0xfe
 80020ca:	023f      	lsls	r7, r7, #8
 80020cc:	401f      	ands	r7, r3
 80020ce:	433a      	orrs	r2, r7
 80020d0:	82e2      	strh	r2, [r4, #22]
 80020d2:	e015      	b.n	8002100 <USBPD_PRL_SendMessage+0x174>
 80020d4:	83a6      	strh	r6, [r4, #28]
 80020d6:	8a02      	ldrh	r2, [r0, #16]
 80020d8:	4bc6      	ldr	r3, [pc, #792]	; (80023f4 <.text_20>)
 80020da:	4013      	ands	r3, r2
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	0152      	lsls	r2, r2, #5
 80020e0:	431a      	orrs	r2, r3
 80020e2:	8202      	strh	r2, [r0, #16]
 80020e4:	e00c      	b.n	8002100 <USBPD_PRL_SendMessage+0x174>
 80020e6:	4ac3      	ldr	r2, [pc, #780]	; (80023f4 <.text_20>)
 80020e8:	401a      	ands	r2, r3
 80020ea:	466b      	mov	r3, sp
 80020ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020ee:	1e9b      	subs	r3, r3, #2
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	031b      	lsls	r3, r3, #12
 80020f4:	27e0      	movs	r7, #224	; 0xe0
 80020f6:	01ff      	lsls	r7, r7, #7
 80020f8:	401f      	ands	r7, r3
 80020fa:	4317      	orrs	r7, r2
 80020fc:	8207      	strh	r7, [r0, #16]
 80020fe:	83a6      	strh	r6, [r4, #28]
 8002100:	466a      	mov	r2, sp
 8002102:	7f12      	ldrb	r2, [r2, #28]
 8002104:	2a0d      	cmp	r2, #13
 8002106:	d10a      	bne.n	800211e <USBPD_PRL_SendMessage+0x192>
 8002108:	8a00      	ldrh	r0, [r0, #16]
 800210a:	22f0      	movs	r2, #240	; 0xf0
 800210c:	0212      	lsls	r2, r2, #8
 800210e:	4002      	ands	r2, r0
 8002110:	d105      	bne.n	800211e <USBPD_PRL_SendMessage+0x192>
 8002112:	728e      	strb	r6, [r1, #10]
 8002114:	220f      	movs	r2, #15
 8002116:	2103      	movs	r1, #3
 8002118:	1d60      	adds	r0, r4, #5
 800211a:	f015 fcc9 	bl	8017ab0 <__aeabi_memset>
 800211e:	2007      	movs	r0, #7
 8002120:	9900      	ldr	r1, [sp, #0]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	7108      	strb	r0, [r1, #4]
 8002126:	e134      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 8002128:	4669      	mov	r1, sp
 800212a:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 800212c:	9902      	ldr	r1, [sp, #8]
 800212e:	1851      	adds	r1, r2, r1
 8002130:	8a0b      	ldrh	r3, [r1, #16]
 8002132:	0bdb      	lsrs	r3, r3, #15
 8002134:	d077      	beq.n	8002226 <USBPD_PRL_SendMessage+0x29a>
 8002136:	8ad3      	ldrh	r3, [r2, #22]
 8002138:	2780      	movs	r7, #128	; 0x80
 800213a:	023f      	lsls	r7, r7, #8
 800213c:	431f      	orrs	r7, r3
 800213e:	82d7      	strh	r7, [r2, #22]
 8002140:	0abb      	lsrs	r3, r7, #10
 8002142:	07db      	lsls	r3, r3, #31
 8002144:	d464      	bmi.n	8002210 <USBPD_PRL_SendMessage+0x284>
 8002146:	8b93      	ldrh	r3, [r2, #28]
 8002148:	2b1b      	cmp	r3, #27
 800214a:	d309      	bcc.n	8002160 <USBPD_PRL_SendMessage+0x1d4>
 800214c:	8a08      	ldrh	r0, [r1, #16]
 800214e:	23e0      	movs	r3, #224	; 0xe0
 8002150:	01db      	lsls	r3, r3, #7
 8002152:	4303      	orrs	r3, r0
 8002154:	820b      	strh	r3, [r1, #16]
 8002156:	8b90      	ldrh	r0, [r2, #28]
 8002158:	381a      	subs	r0, #26
 800215a:	8390      	strh	r0, [r2, #28]
 800215c:	241e      	movs	r4, #30
 800215e:	e057      	b.n	8002210 <USBPD_PRL_SendMessage+0x284>
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <USBPD_PRL_SendMessage+0x310>)
 8002162:	466f      	mov	r7, sp
 8002164:	7e3f      	ldrb	r7, [r7, #24]
 8002166:	00bf      	lsls	r7, r7, #2
 8002168:	59db      	ldr	r3, [r3, r7]
 800216a:	8adb      	ldrh	r3, [r3, #22]
 800216c:	0adf      	lsrs	r7, r3, #11
 800216e:	073f      	lsls	r7, r7, #28
 8002170:	d107      	bne.n	8002182 <USBPD_PRL_SendMessage+0x1f6>
 8002172:	27fe      	movs	r7, #254	; 0xfe
 8002174:	023f      	lsls	r7, r7, #8
 8002176:	401f      	ands	r7, r3
 8002178:	8b93      	ldrh	r3, [r2, #28]
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	0ddb      	lsrs	r3, r3, #23
 800217e:	433b      	orrs	r3, r7
 8002180:	82d3      	strh	r3, [r2, #22]
 8002182:	8a0f      	ldrh	r7, [r1, #16]
 8002184:	4b9b      	ldr	r3, [pc, #620]	; (80023f4 <.text_20>)
 8002186:	403b      	ands	r3, r7
 8002188:	820b      	strh	r3, [r1, #16]
 800218a:	8ad7      	ldrh	r7, [r2, #22]
 800218c:	0bff      	lsrs	r7, r7, #15
 800218e:	d03c      	beq.n	800220a <USBPD_PRL_SendMessage+0x27e>
 8002190:	8b94      	ldrh	r4, [r2, #28]
 8002192:	1ca4      	adds	r4, r4, #2
 8002194:	08a4      	lsrs	r4, r4, #2
 8002196:	0324      	lsls	r4, r4, #12
 8002198:	27e0      	movs	r7, #224	; 0xe0
 800219a:	01ff      	lsls	r7, r7, #7
 800219c:	4027      	ands	r7, r4
 800219e:	431f      	orrs	r7, r3
 80021a0:	820f      	strh	r7, [r1, #16]
 80021a2:	8b91      	ldrh	r1, [r2, #28]
 80021a4:	1c89      	adds	r1, r1, #2
 80021a6:	4008      	ands	r0, r1
 80021a8:	0001      	movs	r1, r0
 80021aa:	d025      	beq.n	80021f8 <USBPD_PRL_SendMessage+0x26c>
 80021ac:	2300      	movs	r3, #0
 80021ae:	483b      	ldr	r0, [pc, #236]	; (800229c <USBPD_PRL_SendMessage+0x310>)
 80021b0:	9a04      	ldr	r2, [sp, #16]
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	1880      	adds	r0, r0, r2
 80021b6:	9000      	str	r0, [sp, #0]
 80021b8:	9808      	ldr	r0, [sp, #32]
 80021ba:	9104      	str	r1, [sp, #16]
 80021bc:	e004      	b.n	80021c8 <USBPD_PRL_SendMessage+0x23c>
 80021be:	1d01      	adds	r1, r0, #4
 80021c0:	8ba4      	ldrh	r4, [r4, #28]
 80021c2:	18a2      	adds	r2, r4, r2
 80021c4:	548e      	strb	r6, [r1, r2]
 80021c6:	1c5b      	adds	r3, r3, #1
 80021c8:	9900      	ldr	r1, [sp, #0]
 80021ca:	680c      	ldr	r4, [r1, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	2104      	movs	r1, #4
 80021d0:	9f04      	ldr	r7, [sp, #16]
 80021d2:	1bc9      	subs	r1, r1, r7
 80021d4:	428a      	cmp	r2, r1
 80021d6:	d3f2      	bcc.n	80021be <USBPD_PRL_SendMessage+0x232>
 80021d8:	9008      	str	r0, [sp, #32]
 80021da:	0020      	movs	r0, r4
 80021dc:	3010      	adds	r0, #16
 80021de:	9902      	ldr	r1, [sp, #8]
 80021e0:	1840      	adds	r0, r0, r1
 80021e2:	8801      	ldrh	r1, [r0, #0]
 80021e4:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <.text_20>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	0b09      	lsrs	r1, r1, #12
 80021ea:	1c49      	adds	r1, r1, #1
 80021ec:	0309      	lsls	r1, r1, #12
 80021ee:	23e0      	movs	r3, #224	; 0xe0
 80021f0:	01db      	lsls	r3, r3, #7
 80021f2:	400b      	ands	r3, r1
 80021f4:	4313      	orrs	r3, r2
 80021f6:	8003      	strh	r3, [r0, #0]
 80021f8:	9800      	ldr	r0, [sp, #0]
 80021fa:	6800      	ldr	r0, [r0, #0]
 80021fc:	3010      	adds	r0, #16
 80021fe:	9902      	ldr	r1, [sp, #8]
 8002200:	5a40      	ldrh	r0, [r0, r1]
 8002202:	0440      	lsls	r0, r0, #17
 8002204:	0f40      	lsrs	r0, r0, #29
 8002206:	0084      	lsls	r4, r0, #2
 8002208:	1ca4      	adds	r4, r4, #2
 800220a:	9800      	ldr	r0, [sp, #0]
 800220c:	6800      	ldr	r0, [r0, #0]
 800220e:	8386      	strh	r6, [r0, #28]
 8002210:	9800      	ldr	r0, [sp, #0]
 8002212:	6800      	ldr	r0, [r0, #0]
 8002214:	8ac0      	ldrh	r0, [r0, #22]
 8002216:	9908      	ldr	r1, [sp, #32]
 8002218:	7088      	strb	r0, [r1, #2]
 800221a:	9800      	ldr	r0, [sp, #0]
 800221c:	6800      	ldr	r0, [r0, #0]
 800221e:	8ac0      	ldrh	r0, [r0, #22]
 8002220:	0a00      	lsrs	r0, r0, #8
 8002222:	9908      	ldr	r1, [sp, #32]
 8002224:	70c8      	strb	r0, [r1, #3]
 8002226:	9800      	ldr	r0, [sp, #0]
 8002228:	6802      	ldr	r2, [r0, #0]
 800222a:	0010      	movs	r0, r2
 800222c:	3010      	adds	r0, #16
 800222e:	9902      	ldr	r1, [sp, #8]
 8002230:	1840      	adds	r0, r0, r1
 8002232:	8803      	ldrh	r3, [r0, #0]
 8002234:	4984      	ldr	r1, [pc, #528]	; (8002448 <.text_24>)
 8002236:	4019      	ands	r1, r3
 8002238:	320a      	adds	r2, #10
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	5cd2      	ldrb	r2, [r2, r3]
 800223e:	0253      	lsls	r3, r2, #9
 8002240:	22e0      	movs	r2, #224	; 0xe0
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	401a      	ands	r2, r3
 8002246:	430a      	orrs	r2, r1
 8002248:	8002      	strh	r2, [r0, #0]
 800224a:	9808      	ldr	r0, [sp, #32]
 800224c:	7002      	strb	r2, [r0, #0]
 800224e:	9800      	ldr	r0, [sp, #0]
 8002250:	6800      	ldr	r0, [r0, #0]
 8002252:	3010      	adds	r0, #16
 8002254:	9902      	ldr	r1, [sp, #8]
 8002256:	5a40      	ldrh	r0, [r0, r1]
 8002258:	0a00      	lsrs	r0, r0, #8
 800225a:	9908      	ldr	r1, [sp, #32]
 800225c:	7048      	strb	r0, [r1, #1]
 800225e:	9800      	ldr	r0, [sp, #0]
 8002260:	6800      	ldr	r0, [r0, #0]
 8002262:	8184      	strh	r4, [r0, #12]
 8002264:	210a      	movs	r1, #10
 8002266:	7101      	strb	r1, [r0, #4]
 8002268:	2102      	movs	r1, #2
 800226a:	7381      	strb	r1, [r0, #14]
 800226c:	b2a0      	uxth	r0, r4
 800226e:	9000      	str	r0, [sp, #0]
 8002270:	9b08      	ldr	r3, [sp, #32]
 8002272:	4668      	mov	r0, sp
 8002274:	7902      	ldrb	r2, [r0, #4]
 8002276:	7e01      	ldrb	r1, [r0, #24]
 8002278:	2002      	movs	r0, #2
 800227a:	4e74      	ldr	r6, [pc, #464]	; (800244c <.text_25>)
 800227c:	6836      	ldr	r6, [r6, #0]
 800227e:	47b0      	blx	r6
 8002280:	4973      	ldr	r1, [pc, #460]	; (8002450 <.text_26>)
 8002282:	4668      	mov	r0, sp
 8002284:	7940      	ldrb	r0, [r0, #5]
 8002286:	f00a ffed 	bl	800d264 <USBPD_TIM_Start>
 800228a:	b2a3      	uxth	r3, r4
 800228c:	9a08      	ldr	r2, [sp, #32]
 800228e:	4668      	mov	r0, sp
 8002290:	7901      	ldrb	r1, [r0, #4]
 8002292:	7e00      	ldrb	r0, [r0, #24]
 8002294:	f009 fcf5 	bl	800bc82 <USBPD_PHY_SendMessage>
 8002298:	e07b      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 800229a:	bf00      	nop
 800229c:	20000184 	.word	0x20000184
 80022a0:	f3ef 8410 	mrs	r4, PRIMASK
 80022a4:	b672      	cpsid	i
 80022a6:	9800      	ldr	r0, [sp, #0]
 80022a8:	6800      	ldr	r0, [r0, #0]
 80022aa:	7900      	ldrb	r0, [r0, #4]
 80022ac:	280a      	cmp	r0, #10
 80022ae:	d109      	bne.n	80022c4 <USBPD_PRL_SendMessage+0x338>
 80022b0:	4668      	mov	r0, sp
 80022b2:	7940      	ldrb	r0, [r0, #5]
 80022b4:	f00b f844 	bl	800d340 <USBPD_TIM_IsExpired>
 80022b8:	2801      	cmp	r0, #1
 80022ba:	d103      	bne.n	80022c4 <USBPD_PRL_SendMessage+0x338>
 80022bc:	200d      	movs	r0, #13
 80022be:	9900      	ldr	r1, [sp, #0]
 80022c0:	6809      	ldr	r1, [r1, #0]
 80022c2:	7108      	strb	r0, [r1, #4]
 80022c4:	f384 8810 	msr	PRIMASK, r4
 80022c8:	e063      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 80022ca:	7a88      	ldrb	r0, [r1, #10]
 80022cc:	8aa7      	ldrh	r7, [r4, #20]
 80022ce:	053f      	lsls	r7, r7, #20
 80022d0:	0f7f      	lsrs	r7, r7, #29
 80022d2:	42b8      	cmp	r0, r7
 80022d4:	d10c      	bne.n	80022f0 <USBPD_PRL_SendMessage+0x364>
 80022d6:	7d23      	ldrb	r3, [r4, #20]
 80022d8:	06db      	lsls	r3, r3, #27
 80022da:	0edb      	lsrs	r3, r3, #27
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <USBPD_PRL_SendMessage+0x364>
 80022e0:	1c40      	adds	r0, r0, #1
 80022e2:	0740      	lsls	r0, r0, #29
 80022e4:	0f40      	lsrs	r0, r0, #29
 80022e6:	7288      	strb	r0, [r1, #10]
 80022e8:	9800      	ldr	r0, [sp, #0]
 80022ea:	6800      	ldr	r0, [r0, #0]
 80022ec:	7106      	strb	r6, [r0, #4]
 80022ee:	e011      	b.n	8002314 <USBPD_PRL_SendMessage+0x388>
 80022f0:	200d      	movs	r0, #13
 80022f2:	7110      	strb	r0, [r2, #4]
 80022f4:	e04d      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 80022f6:	7a88      	ldrb	r0, [r1, #10]
 80022f8:	1c40      	adds	r0, r0, #1
 80022fa:	0740      	lsls	r0, r0, #29
 80022fc:	0f40      	lsrs	r0, r0, #29
 80022fe:	7288      	strb	r0, [r1, #10]
 8002300:	9800      	ldr	r0, [sp, #0]
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	7106      	strb	r6, [r0, #4]
 8002306:	8ae1      	ldrh	r1, [r4, #22]
 8002308:	4852      	ldr	r0, [pc, #328]	; (8002454 <.text_27>)
 800230a:	4008      	ands	r0, r1
 800230c:	82e0      	strh	r0, [r4, #22]
 800230e:	4952      	ldr	r1, [pc, #328]	; (8002458 <.text_28>)
 8002310:	4001      	ands	r1, r0
 8002312:	82e1      	strh	r1, [r4, #22]
 8002314:	2505      	movs	r5, #5
 8002316:	e03c      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 8002318:	7862      	ldrb	r2, [r4, #1]
 800231a:	1c52      	adds	r2, r2, #1
 800231c:	7062      	strb	r2, [r4, #1]
 800231e:	9b02      	ldr	r3, [sp, #8]
 8002320:	18e3      	adds	r3, r4, r3
 8002322:	8a1b      	ldrh	r3, [r3, #16]
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	2403      	movs	r4, #3
 8002328:	401c      	ands	r4, r3
 800232a:	2c01      	cmp	r4, #1
 800232c:	d000      	beq.n	8002330 <USBPD_PRL_SendMessage+0x3a4>
 800232e:	2002      	movs	r0, #2
 8002330:	9b00      	ldr	r3, [sp, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	4290      	cmp	r0, r2
 8002338:	d302      	bcc.n	8002340 <USBPD_PRL_SendMessage+0x3b4>
 800233a:	2010      	movs	r0, #16
 800233c:	7118      	strb	r0, [r3, #4]
 800233e:	e028      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 8002340:	711e      	strb	r6, [r3, #4]
 8002342:	2507      	movs	r5, #7
 8002344:	7a88      	ldrb	r0, [r1, #10]
 8002346:	1c40      	adds	r0, r0, #1
 8002348:	2207      	movs	r2, #7
 800234a:	4002      	ands	r2, r0
 800234c:	728a      	strb	r2, [r1, #10]
 800234e:	e020      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 8002350:	200a      	movs	r0, #10
 8002352:	7110      	strb	r0, [r2, #4]
 8002354:	2002      	movs	r0, #2
 8002356:	73a0      	strb	r0, [r4, #14]
 8002358:	493d      	ldr	r1, [pc, #244]	; (8002450 <.text_26>)
 800235a:	4668      	mov	r0, sp
 800235c:	7940      	ldrb	r0, [r0, #5]
 800235e:	f00a ff81 	bl	800d264 <USBPD_TIM_Start>
 8002362:	89a3      	ldrh	r3, [r4, #12]
 8002364:	9a08      	ldr	r2, [sp, #32]
 8002366:	4668      	mov	r0, sp
 8002368:	7901      	ldrb	r1, [r0, #4]
 800236a:	7e00      	ldrb	r0, [r0, #24]
 800236c:	f009 fc89 	bl	800bc82 <USBPD_PHY_SendMessage>
 8002370:	4668      	mov	r0, sp
 8002372:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8002374:	9000      	str	r0, [sp, #0]
 8002376:	9b08      	ldr	r3, [sp, #32]
 8002378:	4668      	mov	r0, sp
 800237a:	7902      	ldrb	r2, [r0, #4]
 800237c:	7e01      	ldrb	r1, [r0, #24]
 800237e:	2002      	movs	r0, #2
 8002380:	4c32      	ldr	r4, [pc, #200]	; (800244c <.text_25>)
 8002382:	6824      	ldr	r4, [r4, #0]
 8002384:	47a0      	blx	r4
 8002386:	e004      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 8002388:	7116      	strb	r6, [r2, #4]
 800238a:	2506      	movs	r5, #6
 800238c:	e001      	b.n	8002392 <USBPD_PRL_SendMessage+0x406>
 800238e:	7116      	strb	r6, [r2, #4]
 8002390:	2510      	movs	r5, #16
 8002392:	0028      	movs	r0, r5
 8002394:	b009      	add	sp, #36	; 0x24
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002398 <.text_18>:
 8002398:	0000ffe0 	.word	0x0000ffe0

0800239c <USBPD_PRL_ResetRequestProcess>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	0005      	movs	r5, r0
 80023a0:	000e      	movs	r6, r1
 80023a2:	482e      	ldr	r0, [pc, #184]	; (800245c <.text_29>)
 80023a4:	00a9      	lsls	r1, r5, #2
 80023a6:	1840      	adds	r0, r0, r1
 80023a8:	9000      	str	r0, [sp, #0]
 80023aa:	6804      	ldr	r4, [r0, #0]
 80023ac:	2700      	movs	r7, #0
 80023ae:	70a7      	strb	r7, [r4, #2]
 80023b0:	72a7      	strb	r7, [r4, #10]
 80023b2:	220f      	movs	r2, #15
 80023b4:	2103      	movs	r1, #3
 80023b6:	1d60      	adds	r0, r4, #5
 80023b8:	f015 fb7a 	bl	8017ab0 <__aeabi_memset>
 80023bc:	9800      	ldr	r0, [sp, #0]
 80023be:	6800      	ldr	r0, [r0, #0]
 80023c0:	7107      	strb	r7, [r0, #4]
 80023c2:	9700      	str	r7, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	0032      	movs	r2, r6
 80023c8:	0029      	movs	r1, r5
 80023ca:	2002      	movs	r0, #2
 80023cc:	4f1f      	ldr	r7, [pc, #124]	; (800244c <.text_25>)
 80023ce:	683f      	ldr	r7, [r7, #0]
 80023d0:	47b8      	blx	r7
 80023d2:	0028      	movs	r0, r5
 80023d4:	f000 f849 	bl	800246a <PRL_DisableRX>
 80023d8:	0031      	movs	r1, r6
 80023da:	0028      	movs	r0, r5
 80023dc:	f009 fc3b 	bl	800bc56 <USBPD_PHY_ResetRequest>
 80023e0:	2005      	movs	r0, #5
 80023e2:	70e0      	strb	r0, [r4, #3]
 80023e4:	78a0      	ldrb	r0, [r4, #2]
 80023e6:	2801      	cmp	r0, #1
 80023e8:	d002      	beq.n	80023f0 <USBPD_PRL_ResetRequestProcess+0x54>
 80023ea:	78e0      	ldrb	r0, [r4, #3]
 80023ec:	2800      	cmp	r0, #0
 80023ee:	d1f9      	bne.n	80023e4 <USBPD_PRL_ResetRequestProcess+0x48>
 80023f0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080023f4 <.text_20>:
 80023f4:	00008fff 	.word	0x00008fff

080023f8 <USBDPD_PRL_BistCarrierEyeMode>:
 80023f8:	b580      	push	{r7, lr}
 80023fa:	2905      	cmp	r1, #5
 80023fc:	d102      	bne.n	8002404 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 80023fe:	f009 fc5f 	bl	800bcc0 <USBPD_PHY_Send_BIST_Pattern>
 8002402:	bd02      	pop	{r1, pc}
 8002404:	2010      	movs	r0, #16
 8002406:	bd02      	pop	{r1, pc}

08002408 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8002408:	b580      	push	{r7, lr}
 800240a:	2905      	cmp	r1, #5
 800240c:	d103      	bne.n	8002416 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 800240e:	2107      	movs	r1, #7
 8002410:	f009 fc66 	bl	800bce0 <USBPD_PHY_ExitTransmit>
 8002414:	bd02      	pop	{r1, pc}
 8002416:	2010      	movs	r0, #16
 8002418:	bd02      	pop	{r1, pc}

0800241a <USBPD_PRL_Reset>:
 800241a:	b570      	push	{r4, r5, r6, lr}
 800241c:	0004      	movs	r4, r0
 800241e:	480f      	ldr	r0, [pc, #60]	; (800245c <.text_29>)
 8002420:	00a1      	lsls	r1, r4, #2
 8002422:	5845      	ldr	r5, [r0, r1]
 8002424:	2600      	movs	r6, #0
 8002426:	712e      	strb	r6, [r5, #4]
 8002428:	702e      	strb	r6, [r5, #0]
 800242a:	70ee      	strb	r6, [r5, #3]
 800242c:	72ae      	strb	r6, [r5, #10]
 800242e:	220f      	movs	r2, #15
 8002430:	2103      	movs	r1, #3
 8002432:	1d68      	adds	r0, r5, #5
 8002434:	f015 fb3c 	bl	8017ab0 <__aeabi_memset>
 8002438:	77ee      	strb	r6, [r5, #31]
 800243a:	0020      	movs	r0, r4
 800243c:	f009 fc01 	bl	800bc42 <USBPD_PHY_Reset>
 8002440:	0020      	movs	r0, r4
 8002442:	f009 fc74 	bl	800bd2e <USBPD_PHY_EnableRX>
 8002446:	bd70      	pop	{r4, r5, r6, pc}

08002448 <.text_24>:
 8002448:	0000f1ff 	.word	0x0000f1ff

0800244c <.text_25>:
 800244c:	20000000 	.word	0x20000000

08002450 <.text_26>:
 8002450:	00002710 	.word	0x00002710

08002454 <.text_27>:
 8002454:	000087ff 	.word	0x000087ff

08002458 <.text_28>:
 8002458:	0000fbff 	.word	0x0000fbff

0800245c <.text_29>:
 800245c:	20000184 	.word	0x20000184

08002460 <USBPD_PRL_Stop>:
 8002460:	b580      	push	{r7, lr}
 8002462:	f009 fc73 	bl	800bd4c <USBPD_PHY_DisableRX>
 8002466:	bd01      	pop	{r0, pc}

08002468 <USBPD_PRL_DeInit>:
 8002468:	4770      	bx	lr

0800246a <PRL_DisableRX>:
 800246a:	b580      	push	{r7, lr}
 800246c:	f009 fc6e 	bl	800bd4c <USBPD_PHY_DisableRX>
 8002470:	bd01      	pop	{r0, pc}
	...

08002474 <PRL_Received>:
 8002474:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	a809      	add	r0, sp, #36	; 0x24
 800247a:	7805      	ldrb	r5, [r0, #0]
 800247c:	48ce      	ldr	r0, [pc, #824]	; (80027b8 <.text_34>)
 800247e:	00a9      	lsls	r1, r5, #2
 8002480:	1846      	adds	r6, r0, r1
 8002482:	6834      	ldr	r4, [r6, #0]
 8002484:	4628      	mov	r0, r5
 8002486:	f009 fbd1 	bl	800bc2c <USBPD_PHY_GetMinGOODCRCTimerValue>
 800248a:	a909      	add	r1, sp, #36	; 0x24
 800248c:	7809      	ldrb	r1, [r1, #0]
 800248e:	0049      	lsls	r1, r1, #1
 8002490:	466a      	mov	r2, sp
 8002492:	7011      	strb	r1, [r2, #0]
 8002494:	0001      	movs	r1, r0
 8002496:	4668      	mov	r0, sp
 8002498:	7800      	ldrb	r0, [r0, #0]
 800249a:	f00a fee3 	bl	800d264 <USBPD_TIM_Start>
 800249e:	2028      	movs	r0, #40	; 0x28
 80024a0:	5c20      	ldrb	r0, [r4, r0]
 80024a2:	2129      	movs	r1, #41	; 0x29
 80024a4:	5c61      	ldrb	r1, [r4, r1]
 80024a6:	0209      	lsls	r1, r1, #8
 80024a8:	1840      	adds	r0, r0, r1
 80024aa:	4669      	mov	r1, sp
 80024ac:	8088      	strh	r0, [r1, #4]
 80024ae:	4668      	mov	r0, sp
 80024b0:	8880      	ldrh	r0, [r0, #4]
 80024b2:	0440      	lsls	r0, r0, #17
 80024b4:	0f40      	lsrs	r0, r0, #29
 80024b6:	0080      	lsls	r0, r0, #2
 80024b8:	9005      	str	r0, [sp, #20]
 80024ba:	1c80      	adds	r0, r0, #2
 80024bc:	9007      	str	r0, [sp, #28]
 80024be:	48bf      	ldr	r0, [pc, #764]	; (80027bc <.text_35>)
 80024c0:	8889      	ldrh	r1, [r1, #4]
 80024c2:	4001      	ands	r1, r0
 80024c4:	2901      	cmp	r1, #1
 80024c6:	d116      	bne.n	80024f6 <PRL_Received+0x82>
 80024c8:	0068      	lsls	r0, r5, #1
 80024ca:	1c40      	adds	r0, r0, #1
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	f00a ff37 	bl	800d340 <USBPD_TIM_IsExpired>
 80024d2:	2801      	cmp	r0, #1
 80024d4:	d04c      	beq.n	8002570 <PRL_Received+0xfc>
 80024d6:	200b      	movs	r0, #11
 80024d8:	6831      	ldr	r1, [r6, #0]
 80024da:	7108      	strb	r0, [r1, #4]
 80024dc:	4668      	mov	r0, sp
 80024de:	8880      	ldrh	r0, [r0, #4]
 80024e0:	82a0      	strh	r0, [r4, #20]
 80024e2:	9807      	ldr	r0, [sp, #28]
 80024e4:	9000      	str	r0, [sp, #0]
 80024e6:	0023      	movs	r3, r4
 80024e8:	3328      	adds	r3, #40	; 0x28
 80024ea:	a80a      	add	r0, sp, #40	; 0x28
 80024ec:	7802      	ldrb	r2, [r0, #0]
 80024ee:	a809      	add	r0, sp, #36	; 0x24
 80024f0:	7801      	ldrb	r1, [r0, #0]
 80024f2:	2001      	movs	r0, #1
 80024f4:	e15b      	b.n	80027ae <PRL_Received+0x33a>
 80024f6:	49c5      	ldr	r1, [pc, #788]	; (800280c <.text_37>)
 80024f8:	880f      	ldrh	r7, [r1, #0]
 80024fa:	2601      	movs	r6, #1
 80024fc:	7266      	strb	r6, [r4, #9]
 80024fe:	a90a      	add	r1, sp, #40	; 0x28
 8002500:	7809      	ldrb	r1, [r1, #0]
 8002502:	1861      	adds	r1, r4, r1
 8002504:	9104      	str	r1, [sp, #16]
 8002506:	2500      	movs	r5, #0
 8002508:	4669      	mov	r1, sp
 800250a:	8889      	ldrh	r1, [r1, #4]
 800250c:	4008      	ands	r0, r1
 800250e:	280d      	cmp	r0, #13
 8002510:	d106      	bne.n	8002520 <PRL_Received+0xac>
 8002512:	9904      	ldr	r1, [sp, #16]
 8002514:	728d      	strb	r5, [r1, #10]
 8002516:	220f      	movs	r2, #15
 8002518:	2103      	movs	r1, #3
 800251a:	1d60      	adds	r0, r4, #5
 800251c:	f015 fac8 	bl	8017ab0 <__aeabi_memset>
 8002520:	a80a      	add	r0, sp, #40	; 0x28
 8002522:	7800      	ldrb	r0, [r0, #0]
 8002524:	2800      	cmp	r0, #0
 8002526:	d10d      	bne.n	8002544 <PRL_Received+0xd0>
 8002528:	8a21      	ldrh	r1, [r4, #16]
 800252a:	094a      	lsrs	r2, r1, #5
 800252c:	2001      	movs	r0, #1
 800252e:	4010      	ands	r0, r2
 8002530:	0a0a      	lsrs	r2, r1, #8
 8002532:	2101      	movs	r1, #1
 8002534:	4011      	ands	r1, r2
 8002536:	4ab9      	ldr	r2, [pc, #740]	; (800281c <.text_39>)
 8002538:	403a      	ands	r2, r7
 800253a:	0143      	lsls	r3, r0, #5
 800253c:	4313      	orrs	r3, r2
 800253e:	0208      	lsls	r0, r1, #8
 8002540:	4318      	orrs	r0, r3
 8002542:	e001      	b.n	8002548 <PRL_Received+0xd4>
 8002544:	48b6      	ldr	r0, [pc, #728]	; (8002820 <.text_40>)
 8002546:	4038      	ands	r0, r7
 8002548:	49c8      	ldr	r1, [pc, #800]	; (800286c <.text_43>)
 800254a:	4001      	ands	r1, r0
 800254c:	4668      	mov	r0, sp
 800254e:	8880      	ldrh	r0, [r0, #4]
 8002550:	22e0      	movs	r2, #224	; 0xe0
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	4002      	ands	r2, r0
 8002556:	430a      	orrs	r2, r1
 8002558:	2040      	movs	r0, #64	; 0x40
 800255a:	4310      	orrs	r0, r2
 800255c:	74a0      	strb	r0, [r4, #18]
 800255e:	0a00      	lsrs	r0, r0, #8
 8002560:	74e0      	strb	r0, [r4, #19]
 8002562:	a80a      	add	r0, sp, #40	; 0x28
 8002564:	7801      	ldrb	r1, [r0, #0]
 8002566:	a809      	add	r0, sp, #36	; 0x24
 8002568:	7800      	ldrb	r0, [r0, #0]
 800256a:	f7fe fad7 	bl	8000b1c <PE_PRL_PostReceiveEvent>
 800256e:	2800      	cmp	r0, #0
 8002570:	d100      	bne.n	8002574 <PRL_Received+0x100>
 8002572:	e11f      	b.n	80027b4 <PRL_Received+0x340>
 8002574:	73a6      	strb	r6, [r4, #14]
 8002576:	4668      	mov	r0, sp
 8002578:	7800      	ldrb	r0, [r0, #0]
 800257a:	f00a fee1 	bl	800d340 <USBPD_TIM_IsExpired>
 800257e:	2800      	cmp	r0, #0
 8002580:	d0f9      	beq.n	8002576 <PRL_Received+0x102>
 8002582:	2302      	movs	r3, #2
 8002584:	0022      	movs	r2, r4
 8002586:	3212      	adds	r2, #18
 8002588:	a80a      	add	r0, sp, #40	; 0x28
 800258a:	7801      	ldrb	r1, [r0, #0]
 800258c:	a809      	add	r0, sp, #36	; 0x24
 800258e:	7800      	ldrb	r0, [r0, #0]
 8002590:	f009 fb77 	bl	800bc82 <USBPD_PHY_SendMessage>
 8002594:	9006      	str	r0, [sp, #24]
 8002596:	a80a      	add	r0, sp, #40	; 0x28
 8002598:	7800      	ldrb	r0, [r0, #0]
 800259a:	7220      	strb	r0, [r4, #8]
 800259c:	0027      	movs	r7, r4
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	0039      	movs	r1, r7
 80025a2:	a809      	add	r0, sp, #36	; 0x24
 80025a4:	7800      	ldrb	r0, [r0, #0]
 80025a6:	f7fe faeb 	bl	8000b80 <PE_PRL_PostReceiveEventCopy>
 80025aa:	202b      	movs	r0, #43	; 0x2b
 80025ac:	5c20      	ldrb	r0, [r4, r0]
 80025ae:	212a      	movs	r1, #42	; 0x2a
 80025b0:	5c61      	ldrb	r1, [r4, r1]
 80025b2:	0203      	lsls	r3, r0, #8
 80025b4:	18ca      	adds	r2, r1, r3
 80025b6:	466b      	mov	r3, sp
 80025b8:	80da      	strh	r2, [r3, #6]
 80025ba:	466a      	mov	r2, sp
 80025bc:	8892      	ldrh	r2, [r2, #4]
 80025be:	0452      	lsls	r2, r2, #17
 80025c0:	0f52      	lsrs	r2, r2, #29
 80025c2:	81da      	strh	r2, [r3, #14]
 80025c4:	466a      	mov	r2, sp
 80025c6:	88d2      	ldrh	r2, [r2, #6]
 80025c8:	05d2      	lsls	r2, r2, #23
 80025ca:	0dd2      	lsrs	r2, r2, #23
 80025cc:	811a      	strh	r2, [r3, #8]
 80025ce:	466a      	mov	r2, sp
 80025d0:	88d2      	ldrh	r2, [r2, #6]
 80025d2:	0bd2      	lsrs	r2, r2, #15
 80025d4:	819a      	strh	r2, [r3, #12]
 80025d6:	466a      	mov	r2, sp
 80025d8:	8892      	ldrh	r2, [r2, #4]
 80025da:	0bd2      	lsrs	r2, r2, #15
 80025dc:	815a      	strh	r2, [r3, #10]
 80025de:	d007      	beq.n	80025f0 <PRL_Received+0x17c>
 80025e0:	466a      	mov	r2, sp
 80025e2:	8992      	ldrh	r2, [r2, #12]
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	d103      	bne.n	80025f0 <PRL_Received+0x17c>
 80025e8:	4668      	mov	r0, sp
 80025ea:	8900      	ldrh	r0, [r0, #8]
 80025ec:	1d00      	adds	r0, r0, #4
 80025ee:	e01b      	b.n	8002628 <PRL_Received+0x1b4>
 80025f0:	7822      	ldrb	r2, [r4, #0]
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d117      	bne.n	8002626 <PRL_Received+0x1b2>
 80025f6:	466a      	mov	r2, sp
 80025f8:	89d2      	ldrh	r2, [r2, #14]
 80025fa:	2a00      	cmp	r2, #0
 80025fc:	d013      	beq.n	8002626 <PRL_Received+0x1b2>
 80025fe:	466a      	mov	r2, sp
 8002600:	8892      	ldrh	r2, [r2, #4]
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	0ed2      	lsrs	r2, r2, #27
 8002606:	2a03      	cmp	r2, #3
 8002608:	d10d      	bne.n	8002626 <PRL_Received+0x1b2>
 800260a:	0200      	lsls	r0, r0, #8
 800260c:	1808      	adds	r0, r1, r0
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	5c61      	ldrb	r1, [r4, r1]
 8002612:	0409      	lsls	r1, r1, #16
 8002614:	1840      	adds	r0, r0, r1
 8002616:	212d      	movs	r1, #45	; 0x2d
 8002618:	5c61      	ldrb	r1, [r4, r1]
 800261a:	0609      	lsls	r1, r1, #24
 800261c:	1840      	adds	r0, r0, r1
 800261e:	0f00      	lsrs	r0, r0, #28
 8002620:	2808      	cmp	r0, #8
 8002622:	d100      	bne.n	8002626 <PRL_Received+0x1b2>
 8002624:	7026      	strb	r6, [r4, #0]
 8002626:	9807      	ldr	r0, [sp, #28]
 8002628:	9000      	str	r0, [sp, #0]
 800262a:	003b      	movs	r3, r7
 800262c:	a80a      	add	r0, sp, #40	; 0x28
 800262e:	7802      	ldrb	r2, [r0, #0]
 8002630:	a809      	add	r0, sp, #36	; 0x24
 8002632:	7801      	ldrb	r1, [r0, #0]
 8002634:	2001      	movs	r0, #1
 8002636:	4fbb      	ldr	r7, [pc, #748]	; (8002924 <.text_46>)
 8002638:	683f      	ldr	r7, [r7, #0]
 800263a:	47b8      	blx	r7
 800263c:	9806      	ldr	r0, [sp, #24]
 800263e:	2800      	cmp	r0, #0
 8002640:	d10b      	bne.n	800265a <PRL_Received+0x1e6>
 8002642:	2002      	movs	r0, #2
 8002644:	9000      	str	r0, [sp, #0]
 8002646:	0023      	movs	r3, r4
 8002648:	3312      	adds	r3, #18
 800264a:	a80a      	add	r0, sp, #40	; 0x28
 800264c:	7802      	ldrb	r2, [r0, #0]
 800264e:	a809      	add	r0, sp, #36	; 0x24
 8002650:	7801      	ldrb	r1, [r0, #0]
 8002652:	2002      	movs	r0, #2
 8002654:	4fb3      	ldr	r7, [pc, #716]	; (8002924 <.text_46>)
 8002656:	683f      	ldr	r7, [r7, #0]
 8002658:	47b8      	blx	r7
 800265a:	4668      	mov	r0, sp
 800265c:	8880      	ldrh	r0, [r0, #4]
 800265e:	0a40      	lsrs	r0, r0, #9
 8002660:	2107      	movs	r1, #7
 8002662:	9a04      	ldr	r2, [sp, #16]
 8002664:	7952      	ldrb	r2, [r2, #5]
 8002666:	2307      	movs	r3, #7
 8002668:	4003      	ands	r3, r0
 800266a:	429a      	cmp	r2, r3
 800266c:	d103      	bne.n	8002676 <PRL_Received+0x202>
 800266e:	9a06      	ldr	r2, [sp, #24]
 8002670:	2a00      	cmp	r2, #0
 8002672:	d100      	bne.n	8002676 <PRL_Received+0x202>
 8002674:	e08b      	b.n	800278e <PRL_Received+0x31a>
 8002676:	4001      	ands	r1, r0
 8002678:	9804      	ldr	r0, [sp, #16]
 800267a:	7141      	strb	r1, [r0, #5]
 800267c:	4668      	mov	r0, sp
 800267e:	8880      	ldrh	r0, [r0, #4]
 8002680:	8360      	strh	r0, [r4, #26]
 8002682:	4668      	mov	r0, sp
 8002684:	8940      	ldrh	r0, [r0, #10]
 8002686:	2800      	cmp	r0, #0
 8002688:	d042      	beq.n	8002710 <PRL_Received+0x29c>
 800268a:	4668      	mov	r0, sp
 800268c:	8980      	ldrh	r0, [r0, #12]
 800268e:	2800      	cmp	r0, #0
 8002690:	d03e      	beq.n	8002710 <PRL_Received+0x29c>
 8002692:	4668      	mov	r0, sp
 8002694:	88c0      	ldrh	r0, [r0, #6]
 8002696:	8320      	strh	r0, [r4, #24]
 8002698:	4668      	mov	r0, sp
 800269a:	88c0      	ldrh	r0, [r0, #6]
 800269c:	0440      	lsls	r0, r0, #17
 800269e:	0f01      	lsrs	r1, r0, #28
 80026a0:	201a      	movs	r0, #26
 80026a2:	4348      	muls	r0, r1
 80026a4:	9905      	ldr	r1, [sp, #20]
 80026a6:	1e89      	subs	r1, r1, #2
 80026a8:	466a      	mov	r2, sp
 80026aa:	88d2      	ldrh	r2, [r2, #6]
 80026ac:	23f8      	movs	r3, #248	; 0xf8
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	d12e      	bne.n	8002712 <PRL_Received+0x29e>
 80026b4:	466a      	mov	r2, sp
 80026b6:	88d2      	ldrh	r2, [r2, #6]
 80026b8:	05d2      	lsls	r2, r2, #23
 80026ba:	0dd2      	lsrs	r2, r2, #23
 80026bc:	466b      	mov	r3, sp
 80026be:	89db      	ldrh	r3, [r3, #14]
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d30a      	bcc.n	80026da <PRL_Received+0x266>
 80026c4:	2a1a      	cmp	r2, #26
 80026c6:	d811      	bhi.n	80026ec <PRL_Received+0x278>
 80026c8:	e007      	b.n	80026da <PRL_Received+0x266>
 80026ca:	0023      	movs	r3, r4
 80026cc:	332c      	adds	r3, #44	; 0x2c
 80026ce:	5d5b      	ldrb	r3, [r3, r5]
 80026d0:	6a26      	ldr	r6, [r4, #32]
 80026d2:	182f      	adds	r7, r5, r0
 80026d4:	55f3      	strb	r3, [r6, r7]
 80026d6:	1c6d      	adds	r5, r5, #1
 80026d8:	b2ad      	uxth	r5, r5
 80026da:	428d      	cmp	r5, r1
 80026dc:	d3f5      	bcc.n	80026ca <PRL_Received+0x256>
 80026de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80026e0:	4291      	cmp	r1, r2
 80026e2:	d301      	bcc.n	80026e8 <PRL_Received+0x274>
 80026e4:	4669      	mov	r1, sp
 80026e6:	8909      	ldrh	r1, [r1, #8]
 80026e8:	8001      	strh	r1, [r0, #0]
 80026ea:	e00b      	b.n	8002704 <PRL_Received+0x290>
 80026ec:	77e6      	strb	r6, [r4, #31]
 80026ee:	0020      	movs	r0, r4
 80026f0:	302c      	adds	r0, #44	; 0x2c
 80026f2:	5d40      	ldrb	r0, [r0, r5]
 80026f4:	6a21      	ldr	r1, [r4, #32]
 80026f6:	5548      	strb	r0, [r1, r5]
 80026f8:	1c6d      	adds	r5, r5, #1
 80026fa:	2d1a      	cmp	r5, #26
 80026fc:	d3f7      	bcc.n	80026ee <PRL_Received+0x27a>
 80026fe:	201a      	movs	r0, #26
 8002700:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002702:	8008      	strh	r0, [r1, #0]
 8002704:	a80a      	add	r0, sp, #40	; 0x28
 8002706:	7801      	ldrb	r1, [r0, #0]
 8002708:	a809      	add	r0, sp, #36	; 0x24
 800270a:	7800      	ldrb	r0, [r0, #0]
 800270c:	f7fe fa06 	bl	8000b1c <PE_PRL_PostReceiveEvent>
 8002710:	e050      	b.n	80027b4 <PRL_Received+0x340>
 8002712:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	9b05      	ldr	r3, [sp, #20]
 8002718:	18d3      	adds	r3, r2, r3
 800271a:	1e9b      	subs	r3, r3, #2
 800271c:	27ff      	movs	r7, #255	; 0xff
 800271e:	1dbf      	adds	r7, r7, #6
 8002720:	321a      	adds	r2, #26
 8002722:	42ba      	cmp	r2, r7
 8002724:	d21a      	bcs.n	800275c <PRL_Received+0x2e8>
 8002726:	466a      	mov	r2, sp
 8002728:	8912      	ldrh	r2, [r2, #8]
 800272a:	4293      	cmp	r3, r2
 800272c:	d216      	bcs.n	800275c <PRL_Received+0x2e8>
 800272e:	77e6      	strb	r6, [r4, #31]
 8002730:	e007      	b.n	8002742 <PRL_Received+0x2ce>
 8002732:	0022      	movs	r2, r4
 8002734:	322c      	adds	r2, #44	; 0x2c
 8002736:	5d52      	ldrb	r2, [r2, r5]
 8002738:	6a23      	ldr	r3, [r4, #32]
 800273a:	182e      	adds	r6, r5, r0
 800273c:	559a      	strb	r2, [r3, r6]
 800273e:	1c6d      	adds	r5, r5, #1
 8002740:	b2ad      	uxth	r5, r5
 8002742:	428d      	cmp	r5, r1
 8002744:	d3f5      	bcc.n	8002732 <PRL_Received+0x2be>
 8002746:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002748:	8801      	ldrh	r1, [r0, #0]
 800274a:	466a      	mov	r2, sp
 800274c:	8892      	ldrh	r2, [r2, #4]
 800274e:	0a92      	lsrs	r2, r2, #10
 8002750:	231c      	movs	r3, #28
 8002752:	4013      	ands	r3, r2
 8002754:	1e9a      	subs	r2, r3, #2
 8002756:	1889      	adds	r1, r1, r2
 8002758:	8001      	strh	r1, [r0, #0]
 800275a:	e02b      	b.n	80027b4 <PRL_Received+0x340>
 800275c:	42bb      	cmp	r3, r7
 800275e:	d214      	bcs.n	800278a <PRL_Received+0x316>
 8002760:	466a      	mov	r2, sp
 8002762:	8912      	ldrh	r2, [r2, #8]
 8002764:	4293      	cmp	r3, r2
 8002766:	d310      	bcc.n	800278a <PRL_Received+0x316>
 8002768:	77e6      	strb	r6, [r4, #31]
 800276a:	e007      	b.n	800277c <PRL_Received+0x308>
 800276c:	0022      	movs	r2, r4
 800276e:	322c      	adds	r2, #44	; 0x2c
 8002770:	5d52      	ldrb	r2, [r2, r5]
 8002772:	6a23      	ldr	r3, [r4, #32]
 8002774:	182e      	adds	r6, r5, r0
 8002776:	559a      	strb	r2, [r3, r6]
 8002778:	1c6d      	adds	r5, r5, #1
 800277a:	b2ad      	uxth	r5, r5
 800277c:	428d      	cmp	r5, r1
 800277e:	d3f5      	bcc.n	800276c <PRL_Received+0x2f8>
 8002780:	4668      	mov	r0, sp
 8002782:	8900      	ldrh	r0, [r0, #8]
 8002784:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002786:	8008      	strh	r0, [r1, #0]
 8002788:	e014      	b.n	80027b4 <PRL_Received+0x340>
 800278a:	77e5      	strb	r5, [r4, #31]
 800278c:	e012      	b.n	80027b4 <PRL_Received+0x340>
 800278e:	20ff      	movs	r0, #255	; 0xff
 8002790:	7220      	strb	r0, [r4, #8]
 8002792:	73a5      	strb	r5, [r4, #14]
 8002794:	a809      	add	r0, sp, #36	; 0x24
 8002796:	7800      	ldrb	r0, [r0, #0]
 8002798:	f7fe f9dc 	bl	8000b54 <PE_PRL_PostReceiveEventError>
 800279c:	7265      	strb	r5, [r4, #9]
 800279e:	2017      	movs	r0, #23
 80027a0:	9000      	str	r0, [sp, #0]
 80027a2:	bf00      	nop
 80027a4:	a363      	add	r3, pc, #396	; (adr r3, 8002934 <.text_50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	a809      	add	r0, sp, #36	; 0x24
 80027aa:	7801      	ldrb	r1, [r0, #0]
 80027ac:	2006      	movs	r0, #6
 80027ae:	4c5d      	ldr	r4, [pc, #372]	; (8002924 <.text_46>)
 80027b0:	6824      	ldr	r4, [r4, #0]
 80027b2:	47a0      	blx	r4
 80027b4:	b00b      	add	sp, #44	; 0x2c
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b8 <.text_34>:
 80027b8:	20000184 	.word	0x20000184

080027bc <.text_35>:
 80027bc:	0000f01f 	.word	0x0000f01f

080027c0 <PRL_ResetIndicate>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	0004      	movs	r4, r0
 80027c4:	000d      	movs	r5, r1
 80027c6:	2d05      	cmp	r5, #5
 80027c8:	d112      	bne.n	80027f0 <PRL_ResetIndicate+0x30>
 80027ca:	4857      	ldr	r0, [pc, #348]	; (8002928 <.text_47>)
 80027cc:	00a1      	lsls	r1, r4, #2
 80027ce:	1840      	adds	r0, r0, r1
 80027d0:	9000      	str	r0, [sp, #0]
 80027d2:	6806      	ldr	r6, [r0, #0]
 80027d4:	2700      	movs	r7, #0
 80027d6:	72b7      	strb	r7, [r6, #10]
 80027d8:	220f      	movs	r2, #15
 80027da:	2103      	movs	r1, #3
 80027dc:	1d70      	adds	r0, r6, #5
 80027de:	f015 f967 	bl	8017ab0 <__aeabi_memset>
 80027e2:	9900      	ldr	r1, [sp, #0]
 80027e4:	6809      	ldr	r1, [r1, #0]
 80027e6:	710f      	strb	r7, [r1, #4]
 80027e8:	7037      	strb	r7, [r6, #0]
 80027ea:	0020      	movs	r0, r4
 80027ec:	f7ff fe3d 	bl	800246a <PRL_DisableRX>
 80027f0:	2000      	movs	r0, #0
 80027f2:	9000      	str	r0, [sp, #0]
 80027f4:	2300      	movs	r3, #0
 80027f6:	002a      	movs	r2, r5
 80027f8:	0021      	movs	r1, r4
 80027fa:	2001      	movs	r0, #1
 80027fc:	4e49      	ldr	r6, [pc, #292]	; (8002924 <.text_46>)
 80027fe:	6836      	ldr	r6, [r6, #0]
 8002800:	47b0      	blx	r6
 8002802:	0029      	movs	r1, r5
 8002804:	0020      	movs	r0, r4
 8002806:	f7fe f8e3 	bl	80009d0 <PE_PRL_ResetReceived>
 800280a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800280c <.text_37>:
 800280c:	08018478 	.word	0x08018478

08002810 <PRL_ResetCompleted>:
 8002810:	2101      	movs	r1, #1
 8002812:	4a45      	ldr	r2, [pc, #276]	; (8002928 <.text_47>)
 8002814:	0080      	lsls	r0, r0, #2
 8002816:	5810      	ldr	r0, [r2, r0]
 8002818:	7081      	strb	r1, [r0, #2]
 800281a:	4770      	bx	lr

0800281c <.text_39>:
 800281c:	0000fedf 	.word	0x0000fedf

08002820 <.text_40>:
 8002820:	0000feff 	.word	0x0000feff

08002824 <PRL_BistCompleted>:
 8002824:	b580      	push	{r7, lr}
 8002826:	f7fe f8f8 	bl	8000a1a <PE_PRL_BistCompleted>
 800282a:	bd01      	pop	{r0, pc}

0800282c <PRL_TxCompleted>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	0004      	movs	r4, r0
 8002830:	4a3d      	ldr	r2, [pc, #244]	; (8002928 <.text_47>)
 8002832:	00a3      	lsls	r3, r4, #2
 8002834:	58d6      	ldr	r6, [r2, r3]
 8002836:	2500      	movs	r5, #0
 8002838:	7bb2      	ldrb	r2, [r6, #14]
 800283a:	2a01      	cmp	r2, #1
 800283c:	d002      	beq.n	8002844 <PRL_TxCompleted+0x18>
 800283e:	2a02      	cmp	r2, #2
 8002840:	d009      	beq.n	8002856 <PRL_TxCompleted+0x2a>
 8002842:	e010      	b.n	8002866 <PRL_TxCompleted+0x3a>
 8002844:	2900      	cmp	r1, #0
 8002846:	d102      	bne.n	800284e <PRL_TxCompleted+0x22>
 8002848:	f7fe f9b4 	bl	8000bb4 <PE_PRL_PostReceiveEventComplete>
 800284c:	e001      	b.n	8002852 <PRL_TxCompleted+0x26>
 800284e:	f7fe f981 	bl	8000b54 <PE_PRL_PostReceiveEventError>
 8002852:	7275      	strb	r5, [r6, #9]
 8002854:	e007      	b.n	8002866 <PRL_TxCompleted+0x3a>
 8002856:	f009 f9db 	bl	800bc10 <USBPD_PHY_GetRetryTimerValue>
 800285a:	0001      	movs	r1, r0
 800285c:	0060      	lsls	r0, r4, #1
 800285e:	1c40      	adds	r0, r0, #1
 8002860:	b2c0      	uxtb	r0, r0
 8002862:	f00a fcff 	bl	800d264 <USBPD_TIM_Start>
 8002866:	73b5      	strb	r5, [r6, #14]
 8002868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800286c <.text_43>:
 800286c:	0000f13f 	.word	0x0000f13f

08002870 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	4c2d      	ldr	r4, [pc, #180]	; (8002928 <.text_47>)
 8002874:	0080      	lsls	r0, r0, #2
 8002876:	5820      	ldr	r0, [r4, r0]
 8002878:	2480      	movs	r4, #128	; 0x80
 800287a:	0224      	lsls	r4, r4, #8
 800287c:	8ac5      	ldrh	r5, [r0, #22]
 800287e:	4e2b      	ldr	r6, [pc, #172]	; (800292c <.text_48>)
 8002880:	402e      	ands	r6, r5
 8002882:	02c9      	lsls	r1, r1, #11
 8002884:	4331      	orrs	r1, r6
 8002886:	25fe      	movs	r5, #254	; 0xfe
 8002888:	022d      	lsls	r5, r5, #8
 800288a:	400d      	ands	r5, r1
 800288c:	05d1      	lsls	r1, r2, #23
 800288e:	0dc9      	lsrs	r1, r1, #23
 8002890:	4329      	orrs	r1, r5
 8002892:	4321      	orrs	r1, r4
 8002894:	82c1      	strh	r1, [r0, #22]
 8002896:	8a01      	ldrh	r1, [r0, #16]
 8002898:	430c      	orrs	r4, r1
 800289a:	8204      	strh	r4, [r0, #16]
 800289c:	4a24      	ldr	r2, [pc, #144]	; (8002930 <.text_49>)
 800289e:	4022      	ands	r2, r4
 80028a0:	7e81      	ldrb	r1, [r0, #26]
 80028a2:	06c9      	lsls	r1, r1, #27
 80028a4:	0ec9      	lsrs	r1, r1, #27
 80028a6:	4311      	orrs	r1, r2
 80028a8:	8201      	strh	r1, [r0, #16]
 80028aa:	7019      	strb	r1, [r3, #0]
 80028ac:	8a01      	ldrh	r1, [r0, #16]
 80028ae:	0a09      	lsrs	r1, r1, #8
 80028b0:	7059      	strb	r1, [r3, #1]
 80028b2:	8ac1      	ldrh	r1, [r0, #22]
 80028b4:	7099      	strb	r1, [r3, #2]
 80028b6:	8ac0      	ldrh	r0, [r0, #22]
 80028b8:	0a00      	lsrs	r0, r0, #8
 80028ba:	70d8      	strb	r0, [r3, #3]
 80028bc:	bd70      	pop	{r4, r5, r6, pc}

080028be <USBPD_PRL_PrepareChunkRequest>:
 80028be:	b510      	push	{r4, lr}
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <.text_47>)
 80028c2:	0080      	lsls	r0, r0, #2
 80028c4:	5810      	ldr	r0, [r2, r0]
 80028c6:	8ac3      	ldrh	r3, [r0, #22]
 80028c8:	2284      	movs	r2, #132	; 0x84
 80028ca:	0212      	lsls	r2, r2, #8
 80028cc:	431a      	orrs	r2, r3
 80028ce:	82c2      	strh	r2, [r0, #22]
 80028d0:	2386      	movs	r3, #134	; 0x86
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	8b02      	ldrh	r2, [r0, #24]
 80028d8:	0ad2      	lsrs	r2, r2, #11
 80028da:	1c52      	adds	r2, r2, #1
 80028dc:	02d2      	lsls	r2, r2, #11
 80028de:	24f0      	movs	r4, #240	; 0xf0
 80028e0:	01e4      	lsls	r4, r4, #7
 80028e2:	4014      	ands	r4, r2
 80028e4:	431c      	orrs	r4, r3
 80028e6:	82c4      	strh	r4, [r0, #22]
 80028e8:	8a03      	ldrh	r3, [r0, #16]
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0212      	lsls	r2, r2, #8
 80028ee:	431a      	orrs	r2, r3
 80028f0:	0003      	movs	r3, r0
 80028f2:	3310      	adds	r3, #16
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	4c0e      	ldr	r4, [pc, #56]	; (8002930 <.text_49>)
 80028f8:	4014      	ands	r4, r2
 80028fa:	7e82      	ldrb	r2, [r0, #26]
 80028fc:	06d2      	lsls	r2, r2, #27
 80028fe:	0ed2      	lsrs	r2, r2, #27
 8002900:	4322      	orrs	r2, r4
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	7102      	strb	r2, [r0, #4]
 8002908:	8a03      	ldrh	r3, [r0, #16]
 800290a:	700b      	strb	r3, [r1, #0]
 800290c:	8a03      	ldrh	r3, [r0, #16]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	704b      	strb	r3, [r1, #1]
 8002912:	8ac3      	ldrh	r3, [r0, #22]
 8002914:	708b      	strb	r3, [r1, #2]
 8002916:	8ac0      	ldrh	r0, [r0, #22]
 8002918:	0a00      	lsrs	r0, r0, #8
 800291a:	70c8      	strb	r0, [r1, #3]
 800291c:	710a      	strb	r2, [r1, #4]
 800291e:	714a      	strb	r2, [r1, #5]
 8002920:	bd10      	pop	{r4, pc}
	...

08002924 <.text_46>:
 8002924:	20000000 	.word	0x20000000

08002928 <.text_47>:
 8002928:	20000184 	.word	0x20000184

0800292c <.text_48>:
 800292c:	000083ff 	.word	0x000083ff

08002930 <.text_49>:
 8002930:	0000ffe0 	.word	0x0000ffe0

08002934 <.text_50>:
 8002934:	5f4c5250 	.word	0x5f4c5250
 8002938:	4e455645 	.word	0x4e455645
 800293c:	58525f54 	.word	0x58525f54
 8002940:	5349445f 	.word	0x5349445f
 8002944:	44524143 	.word	0x44524143
 8002948:	00004445 	.word	0x00004445

0800294c <strlen>:
 800294c:	2300      	movs	r3, #0
 800294e:	5cc2      	ldrb	r2, [r0, r3]
 8002950:	3301      	adds	r3, #1
 8002952:	2a00      	cmp	r2, #0
 8002954:	d1fb      	bne.n	800294e <strlen+0x2>
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	4770      	bx	lr
	...

0800295c <__gnu_thumb1_case_shi>:
 800295c:	b403      	push	{r0, r1}
 800295e:	4671      	mov	r1, lr
 8002960:	0849      	lsrs	r1, r1, #1
 8002962:	0040      	lsls	r0, r0, #1
 8002964:	0049      	lsls	r1, r1, #1
 8002966:	5e09      	ldrsh	r1, [r1, r0]
 8002968:	0049      	lsls	r1, r1, #1
 800296a:	448e      	add	lr, r1
 800296c:	bc03      	pop	{r0, r1}
 800296e:	4770      	bx	lr

08002970 <__udivsi3>:
 8002970:	2200      	movs	r2, #0
 8002972:	0843      	lsrs	r3, r0, #1
 8002974:	428b      	cmp	r3, r1
 8002976:	d374      	bcc.n	8002a62 <__udivsi3+0xf2>
 8002978:	0903      	lsrs	r3, r0, #4
 800297a:	428b      	cmp	r3, r1
 800297c:	d35f      	bcc.n	8002a3e <__udivsi3+0xce>
 800297e:	0a03      	lsrs	r3, r0, #8
 8002980:	428b      	cmp	r3, r1
 8002982:	d344      	bcc.n	8002a0e <__udivsi3+0x9e>
 8002984:	0b03      	lsrs	r3, r0, #12
 8002986:	428b      	cmp	r3, r1
 8002988:	d328      	bcc.n	80029dc <__udivsi3+0x6c>
 800298a:	0c03      	lsrs	r3, r0, #16
 800298c:	428b      	cmp	r3, r1
 800298e:	d30d      	bcc.n	80029ac <__udivsi3+0x3c>
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	0209      	lsls	r1, r1, #8
 8002994:	ba12      	rev	r2, r2
 8002996:	0c03      	lsrs	r3, r0, #16
 8002998:	428b      	cmp	r3, r1
 800299a:	d302      	bcc.n	80029a2 <__udivsi3+0x32>
 800299c:	1212      	asrs	r2, r2, #8
 800299e:	0209      	lsls	r1, r1, #8
 80029a0:	d065      	beq.n	8002a6e <__udivsi3+0xfe>
 80029a2:	0b03      	lsrs	r3, r0, #12
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d319      	bcc.n	80029dc <__udivsi3+0x6c>
 80029a8:	e000      	b.n	80029ac <__udivsi3+0x3c>
 80029aa:	0a09      	lsrs	r1, r1, #8
 80029ac:	0bc3      	lsrs	r3, r0, #15
 80029ae:	428b      	cmp	r3, r1
 80029b0:	d301      	bcc.n	80029b6 <__udivsi3+0x46>
 80029b2:	03cb      	lsls	r3, r1, #15
 80029b4:	1ac0      	subs	r0, r0, r3
 80029b6:	4152      	adcs	r2, r2
 80029b8:	0b83      	lsrs	r3, r0, #14
 80029ba:	428b      	cmp	r3, r1
 80029bc:	d301      	bcc.n	80029c2 <__udivsi3+0x52>
 80029be:	038b      	lsls	r3, r1, #14
 80029c0:	1ac0      	subs	r0, r0, r3
 80029c2:	4152      	adcs	r2, r2
 80029c4:	0b43      	lsrs	r3, r0, #13
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d301      	bcc.n	80029ce <__udivsi3+0x5e>
 80029ca:	034b      	lsls	r3, r1, #13
 80029cc:	1ac0      	subs	r0, r0, r3
 80029ce:	4152      	adcs	r2, r2
 80029d0:	0b03      	lsrs	r3, r0, #12
 80029d2:	428b      	cmp	r3, r1
 80029d4:	d301      	bcc.n	80029da <__udivsi3+0x6a>
 80029d6:	030b      	lsls	r3, r1, #12
 80029d8:	1ac0      	subs	r0, r0, r3
 80029da:	4152      	adcs	r2, r2
 80029dc:	0ac3      	lsrs	r3, r0, #11
 80029de:	428b      	cmp	r3, r1
 80029e0:	d301      	bcc.n	80029e6 <__udivsi3+0x76>
 80029e2:	02cb      	lsls	r3, r1, #11
 80029e4:	1ac0      	subs	r0, r0, r3
 80029e6:	4152      	adcs	r2, r2
 80029e8:	0a83      	lsrs	r3, r0, #10
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d301      	bcc.n	80029f2 <__udivsi3+0x82>
 80029ee:	028b      	lsls	r3, r1, #10
 80029f0:	1ac0      	subs	r0, r0, r3
 80029f2:	4152      	adcs	r2, r2
 80029f4:	0a43      	lsrs	r3, r0, #9
 80029f6:	428b      	cmp	r3, r1
 80029f8:	d301      	bcc.n	80029fe <__udivsi3+0x8e>
 80029fa:	024b      	lsls	r3, r1, #9
 80029fc:	1ac0      	subs	r0, r0, r3
 80029fe:	4152      	adcs	r2, r2
 8002a00:	0a03      	lsrs	r3, r0, #8
 8002a02:	428b      	cmp	r3, r1
 8002a04:	d301      	bcc.n	8002a0a <__udivsi3+0x9a>
 8002a06:	020b      	lsls	r3, r1, #8
 8002a08:	1ac0      	subs	r0, r0, r3
 8002a0a:	4152      	adcs	r2, r2
 8002a0c:	d2cd      	bcs.n	80029aa <__udivsi3+0x3a>
 8002a0e:	09c3      	lsrs	r3, r0, #7
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d301      	bcc.n	8002a18 <__udivsi3+0xa8>
 8002a14:	01cb      	lsls	r3, r1, #7
 8002a16:	1ac0      	subs	r0, r0, r3
 8002a18:	4152      	adcs	r2, r2
 8002a1a:	0983      	lsrs	r3, r0, #6
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d301      	bcc.n	8002a24 <__udivsi3+0xb4>
 8002a20:	018b      	lsls	r3, r1, #6
 8002a22:	1ac0      	subs	r0, r0, r3
 8002a24:	4152      	adcs	r2, r2
 8002a26:	0943      	lsrs	r3, r0, #5
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d301      	bcc.n	8002a30 <__udivsi3+0xc0>
 8002a2c:	014b      	lsls	r3, r1, #5
 8002a2e:	1ac0      	subs	r0, r0, r3
 8002a30:	4152      	adcs	r2, r2
 8002a32:	0903      	lsrs	r3, r0, #4
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d301      	bcc.n	8002a3c <__udivsi3+0xcc>
 8002a38:	010b      	lsls	r3, r1, #4
 8002a3a:	1ac0      	subs	r0, r0, r3
 8002a3c:	4152      	adcs	r2, r2
 8002a3e:	08c3      	lsrs	r3, r0, #3
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d301      	bcc.n	8002a48 <__udivsi3+0xd8>
 8002a44:	00cb      	lsls	r3, r1, #3
 8002a46:	1ac0      	subs	r0, r0, r3
 8002a48:	4152      	adcs	r2, r2
 8002a4a:	0883      	lsrs	r3, r0, #2
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d301      	bcc.n	8002a54 <__udivsi3+0xe4>
 8002a50:	008b      	lsls	r3, r1, #2
 8002a52:	1ac0      	subs	r0, r0, r3
 8002a54:	4152      	adcs	r2, r2
 8002a56:	0843      	lsrs	r3, r0, #1
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d301      	bcc.n	8002a60 <__udivsi3+0xf0>
 8002a5c:	004b      	lsls	r3, r1, #1
 8002a5e:	1ac0      	subs	r0, r0, r3
 8002a60:	4152      	adcs	r2, r2
 8002a62:	1a41      	subs	r1, r0, r1
 8002a64:	d200      	bcs.n	8002a68 <__udivsi3+0xf8>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4152      	adcs	r2, r2
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4770      	bx	lr
 8002a6e:	e7ff      	b.n	8002a70 <__udivsi3+0x100>
 8002a70:	b501      	push	{r0, lr}
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f8f0 	bl	8002c58 <__aeabi_idiv0>
 8002a78:	bd02      	pop	{r1, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)

08002a7c <__aeabi_uidivmod>:
 8002a7c:	2900      	cmp	r1, #0
 8002a7e:	d0f7      	beq.n	8002a70 <__udivsi3+0x100>
 8002a80:	e776      	b.n	8002970 <__udivsi3>
 8002a82:	4770      	bx	lr

08002a84 <__divsi3>:
 8002a84:	4603      	mov	r3, r0
 8002a86:	430b      	orrs	r3, r1
 8002a88:	d47f      	bmi.n	8002b8a <__divsi3+0x106>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	0843      	lsrs	r3, r0, #1
 8002a8e:	428b      	cmp	r3, r1
 8002a90:	d374      	bcc.n	8002b7c <__divsi3+0xf8>
 8002a92:	0903      	lsrs	r3, r0, #4
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d35f      	bcc.n	8002b58 <__divsi3+0xd4>
 8002a98:	0a03      	lsrs	r3, r0, #8
 8002a9a:	428b      	cmp	r3, r1
 8002a9c:	d344      	bcc.n	8002b28 <__divsi3+0xa4>
 8002a9e:	0b03      	lsrs	r3, r0, #12
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d328      	bcc.n	8002af6 <__divsi3+0x72>
 8002aa4:	0c03      	lsrs	r3, r0, #16
 8002aa6:	428b      	cmp	r3, r1
 8002aa8:	d30d      	bcc.n	8002ac6 <__divsi3+0x42>
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	0209      	lsls	r1, r1, #8
 8002aae:	ba12      	rev	r2, r2
 8002ab0:	0c03      	lsrs	r3, r0, #16
 8002ab2:	428b      	cmp	r3, r1
 8002ab4:	d302      	bcc.n	8002abc <__divsi3+0x38>
 8002ab6:	1212      	asrs	r2, r2, #8
 8002ab8:	0209      	lsls	r1, r1, #8
 8002aba:	d065      	beq.n	8002b88 <__divsi3+0x104>
 8002abc:	0b03      	lsrs	r3, r0, #12
 8002abe:	428b      	cmp	r3, r1
 8002ac0:	d319      	bcc.n	8002af6 <__divsi3+0x72>
 8002ac2:	e000      	b.n	8002ac6 <__divsi3+0x42>
 8002ac4:	0a09      	lsrs	r1, r1, #8
 8002ac6:	0bc3      	lsrs	r3, r0, #15
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d301      	bcc.n	8002ad0 <__divsi3+0x4c>
 8002acc:	03cb      	lsls	r3, r1, #15
 8002ace:	1ac0      	subs	r0, r0, r3
 8002ad0:	4152      	adcs	r2, r2
 8002ad2:	0b83      	lsrs	r3, r0, #14
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d301      	bcc.n	8002adc <__divsi3+0x58>
 8002ad8:	038b      	lsls	r3, r1, #14
 8002ada:	1ac0      	subs	r0, r0, r3
 8002adc:	4152      	adcs	r2, r2
 8002ade:	0b43      	lsrs	r3, r0, #13
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d301      	bcc.n	8002ae8 <__divsi3+0x64>
 8002ae4:	034b      	lsls	r3, r1, #13
 8002ae6:	1ac0      	subs	r0, r0, r3
 8002ae8:	4152      	adcs	r2, r2
 8002aea:	0b03      	lsrs	r3, r0, #12
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d301      	bcc.n	8002af4 <__divsi3+0x70>
 8002af0:	030b      	lsls	r3, r1, #12
 8002af2:	1ac0      	subs	r0, r0, r3
 8002af4:	4152      	adcs	r2, r2
 8002af6:	0ac3      	lsrs	r3, r0, #11
 8002af8:	428b      	cmp	r3, r1
 8002afa:	d301      	bcc.n	8002b00 <__divsi3+0x7c>
 8002afc:	02cb      	lsls	r3, r1, #11
 8002afe:	1ac0      	subs	r0, r0, r3
 8002b00:	4152      	adcs	r2, r2
 8002b02:	0a83      	lsrs	r3, r0, #10
 8002b04:	428b      	cmp	r3, r1
 8002b06:	d301      	bcc.n	8002b0c <__divsi3+0x88>
 8002b08:	028b      	lsls	r3, r1, #10
 8002b0a:	1ac0      	subs	r0, r0, r3
 8002b0c:	4152      	adcs	r2, r2
 8002b0e:	0a43      	lsrs	r3, r0, #9
 8002b10:	428b      	cmp	r3, r1
 8002b12:	d301      	bcc.n	8002b18 <__divsi3+0x94>
 8002b14:	024b      	lsls	r3, r1, #9
 8002b16:	1ac0      	subs	r0, r0, r3
 8002b18:	4152      	adcs	r2, r2
 8002b1a:	0a03      	lsrs	r3, r0, #8
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d301      	bcc.n	8002b24 <__divsi3+0xa0>
 8002b20:	020b      	lsls	r3, r1, #8
 8002b22:	1ac0      	subs	r0, r0, r3
 8002b24:	4152      	adcs	r2, r2
 8002b26:	d2cd      	bcs.n	8002ac4 <__divsi3+0x40>
 8002b28:	09c3      	lsrs	r3, r0, #7
 8002b2a:	428b      	cmp	r3, r1
 8002b2c:	d301      	bcc.n	8002b32 <__divsi3+0xae>
 8002b2e:	01cb      	lsls	r3, r1, #7
 8002b30:	1ac0      	subs	r0, r0, r3
 8002b32:	4152      	adcs	r2, r2
 8002b34:	0983      	lsrs	r3, r0, #6
 8002b36:	428b      	cmp	r3, r1
 8002b38:	d301      	bcc.n	8002b3e <__divsi3+0xba>
 8002b3a:	018b      	lsls	r3, r1, #6
 8002b3c:	1ac0      	subs	r0, r0, r3
 8002b3e:	4152      	adcs	r2, r2
 8002b40:	0943      	lsrs	r3, r0, #5
 8002b42:	428b      	cmp	r3, r1
 8002b44:	d301      	bcc.n	8002b4a <__divsi3+0xc6>
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	1ac0      	subs	r0, r0, r3
 8002b4a:	4152      	adcs	r2, r2
 8002b4c:	0903      	lsrs	r3, r0, #4
 8002b4e:	428b      	cmp	r3, r1
 8002b50:	d301      	bcc.n	8002b56 <__divsi3+0xd2>
 8002b52:	010b      	lsls	r3, r1, #4
 8002b54:	1ac0      	subs	r0, r0, r3
 8002b56:	4152      	adcs	r2, r2
 8002b58:	08c3      	lsrs	r3, r0, #3
 8002b5a:	428b      	cmp	r3, r1
 8002b5c:	d301      	bcc.n	8002b62 <__divsi3+0xde>
 8002b5e:	00cb      	lsls	r3, r1, #3
 8002b60:	1ac0      	subs	r0, r0, r3
 8002b62:	4152      	adcs	r2, r2
 8002b64:	0883      	lsrs	r3, r0, #2
 8002b66:	428b      	cmp	r3, r1
 8002b68:	d301      	bcc.n	8002b6e <__divsi3+0xea>
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	1ac0      	subs	r0, r0, r3
 8002b6e:	4152      	adcs	r2, r2
 8002b70:	0843      	lsrs	r3, r0, #1
 8002b72:	428b      	cmp	r3, r1
 8002b74:	d301      	bcc.n	8002b7a <__divsi3+0xf6>
 8002b76:	004b      	lsls	r3, r1, #1
 8002b78:	1ac0      	subs	r0, r0, r3
 8002b7a:	4152      	adcs	r2, r2
 8002b7c:	1a41      	subs	r1, r0, r1
 8002b7e:	d200      	bcs.n	8002b82 <__divsi3+0xfe>
 8002b80:	4601      	mov	r1, r0
 8002b82:	4152      	adcs	r2, r2
 8002b84:	4610      	mov	r0, r2
 8002b86:	4770      	bx	lr
 8002b88:	e05d      	b.n	8002c46 <__divsi3+0x1c2>
 8002b8a:	0fca      	lsrs	r2, r1, #31
 8002b8c:	d000      	beq.n	8002b90 <__divsi3+0x10c>
 8002b8e:	4249      	negs	r1, r1
 8002b90:	1003      	asrs	r3, r0, #32
 8002b92:	d300      	bcc.n	8002b96 <__divsi3+0x112>
 8002b94:	4240      	negs	r0, r0
 8002b96:	4053      	eors	r3, r2
 8002b98:	2200      	movs	r2, #0
 8002b9a:	469c      	mov	ip, r3
 8002b9c:	0903      	lsrs	r3, r0, #4
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d32d      	bcc.n	8002bfe <__divsi3+0x17a>
 8002ba2:	0a03      	lsrs	r3, r0, #8
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	d312      	bcc.n	8002bce <__divsi3+0x14a>
 8002ba8:	22fc      	movs	r2, #252	; 0xfc
 8002baa:	0189      	lsls	r1, r1, #6
 8002bac:	ba12      	rev	r2, r2
 8002bae:	0a03      	lsrs	r3, r0, #8
 8002bb0:	428b      	cmp	r3, r1
 8002bb2:	d30c      	bcc.n	8002bce <__divsi3+0x14a>
 8002bb4:	0189      	lsls	r1, r1, #6
 8002bb6:	1192      	asrs	r2, r2, #6
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d308      	bcc.n	8002bce <__divsi3+0x14a>
 8002bbc:	0189      	lsls	r1, r1, #6
 8002bbe:	1192      	asrs	r2, r2, #6
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	d304      	bcc.n	8002bce <__divsi3+0x14a>
 8002bc4:	0189      	lsls	r1, r1, #6
 8002bc6:	d03a      	beq.n	8002c3e <__divsi3+0x1ba>
 8002bc8:	1192      	asrs	r2, r2, #6
 8002bca:	e000      	b.n	8002bce <__divsi3+0x14a>
 8002bcc:	0989      	lsrs	r1, r1, #6
 8002bce:	09c3      	lsrs	r3, r0, #7
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d301      	bcc.n	8002bd8 <__divsi3+0x154>
 8002bd4:	01cb      	lsls	r3, r1, #7
 8002bd6:	1ac0      	subs	r0, r0, r3
 8002bd8:	4152      	adcs	r2, r2
 8002bda:	0983      	lsrs	r3, r0, #6
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d301      	bcc.n	8002be4 <__divsi3+0x160>
 8002be0:	018b      	lsls	r3, r1, #6
 8002be2:	1ac0      	subs	r0, r0, r3
 8002be4:	4152      	adcs	r2, r2
 8002be6:	0943      	lsrs	r3, r0, #5
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d301      	bcc.n	8002bf0 <__divsi3+0x16c>
 8002bec:	014b      	lsls	r3, r1, #5
 8002bee:	1ac0      	subs	r0, r0, r3
 8002bf0:	4152      	adcs	r2, r2
 8002bf2:	0903      	lsrs	r3, r0, #4
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d301      	bcc.n	8002bfc <__divsi3+0x178>
 8002bf8:	010b      	lsls	r3, r1, #4
 8002bfa:	1ac0      	subs	r0, r0, r3
 8002bfc:	4152      	adcs	r2, r2
 8002bfe:	08c3      	lsrs	r3, r0, #3
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d301      	bcc.n	8002c08 <__divsi3+0x184>
 8002c04:	00cb      	lsls	r3, r1, #3
 8002c06:	1ac0      	subs	r0, r0, r3
 8002c08:	4152      	adcs	r2, r2
 8002c0a:	0883      	lsrs	r3, r0, #2
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d301      	bcc.n	8002c14 <__divsi3+0x190>
 8002c10:	008b      	lsls	r3, r1, #2
 8002c12:	1ac0      	subs	r0, r0, r3
 8002c14:	4152      	adcs	r2, r2
 8002c16:	d2d9      	bcs.n	8002bcc <__divsi3+0x148>
 8002c18:	0843      	lsrs	r3, r0, #1
 8002c1a:	428b      	cmp	r3, r1
 8002c1c:	d301      	bcc.n	8002c22 <__divsi3+0x19e>
 8002c1e:	004b      	lsls	r3, r1, #1
 8002c20:	1ac0      	subs	r0, r0, r3
 8002c22:	4152      	adcs	r2, r2
 8002c24:	1a41      	subs	r1, r0, r1
 8002c26:	d200      	bcs.n	8002c2a <__divsi3+0x1a6>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4663      	mov	r3, ip
 8002c2c:	4152      	adcs	r2, r2
 8002c2e:	105b      	asrs	r3, r3, #1
 8002c30:	4610      	mov	r0, r2
 8002c32:	d301      	bcc.n	8002c38 <__divsi3+0x1b4>
 8002c34:	4240      	negs	r0, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d500      	bpl.n	8002c3c <__divsi3+0x1b8>
 8002c3a:	4249      	negs	r1, r1
 8002c3c:	4770      	bx	lr
 8002c3e:	4663      	mov	r3, ip
 8002c40:	105b      	asrs	r3, r3, #1
 8002c42:	d300      	bcc.n	8002c46 <__divsi3+0x1c2>
 8002c44:	4240      	negs	r0, r0
 8002c46:	b501      	push	{r0, lr}
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f000 f805 	bl	8002c58 <__aeabi_idiv0>
 8002c4e:	bd02      	pop	{r1, pc}

08002c50 <__aeabi_idivmod>:
 8002c50:	2900      	cmp	r1, #0
 8002c52:	d0f8      	beq.n	8002c46 <__divsi3+0x1c2>
 8002c54:	e716      	b.n	8002a84 <__divsi3>
 8002c56:	4770      	bx	lr

08002c58 <__aeabi_idiv0>:
 8002c58:	4770      	bx	lr
 8002c5a:	46c0      	nop			; (mov r8, r8)

08002c5c <__aeabi_uldivmod>:
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <__aeabi_uldivmod+0x28>
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d10f      	bne.n	8002c84 <__aeabi_uldivmod+0x28>
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d100      	bne.n	8002c6a <__aeabi_uldivmod+0xe>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d002      	beq.n	8002c72 <__aeabi_uldivmod+0x16>
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	43c9      	mvns	r1, r1
 8002c70:	0008      	movs	r0, r1
 8002c72:	b407      	push	{r0, r1, r2}
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <__aeabi_uldivmod+0x24>)
 8002c76:	a102      	add	r1, pc, #8	; (adr r1, 8002c80 <__aeabi_uldivmod+0x24>)
 8002c78:	1840      	adds	r0, r0, r1
 8002c7a:	9002      	str	r0, [sp, #8]
 8002c7c:	bd03      	pop	{r0, r1, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	ffffffd9 	.word	0xffffffd9
 8002c84:	b403      	push	{r0, r1}
 8002c86:	4668      	mov	r0, sp
 8002c88:	b501      	push	{r0, lr}
 8002c8a:	9802      	ldr	r0, [sp, #8]
 8002c8c:	f000 f806 	bl	8002c9c <__udivmoddi4>
 8002c90:	9b01      	ldr	r3, [sp, #4]
 8002c92:	469e      	mov	lr, r3
 8002c94:	b002      	add	sp, #8
 8002c96:	bc0c      	pop	{r2, r3}
 8002c98:	4770      	bx	lr
 8002c9a:	46c0      	nop			; (mov r8, r8)

08002c9c <__udivmoddi4>:
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	4657      	mov	r7, sl
 8002ca0:	464e      	mov	r6, r9
 8002ca2:	4645      	mov	r5, r8
 8002ca4:	46de      	mov	lr, fp
 8002ca6:	b5e0      	push	{r5, r6, r7, lr}
 8002ca8:	0004      	movs	r4, r0
 8002caa:	000d      	movs	r5, r1
 8002cac:	4692      	mov	sl, r2
 8002cae:	4699      	mov	r9, r3
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	d830      	bhi.n	8002d18 <__udivmoddi4+0x7c>
 8002cb6:	d02d      	beq.n	8002d14 <__udivmoddi4+0x78>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	4650      	mov	r0, sl
 8002cbc:	f000 f8ba 	bl	8002e34 <__clzdi2>
 8002cc0:	0029      	movs	r1, r5
 8002cc2:	0006      	movs	r6, r0
 8002cc4:	0020      	movs	r0, r4
 8002cc6:	f000 f8b5 	bl	8002e34 <__clzdi2>
 8002cca:	1a33      	subs	r3, r6, r0
 8002ccc:	4698      	mov	r8, r3
 8002cce:	3b20      	subs	r3, #32
 8002cd0:	d434      	bmi.n	8002d3c <__udivmoddi4+0xa0>
 8002cd2:	469b      	mov	fp, r3
 8002cd4:	4653      	mov	r3, sl
 8002cd6:	465a      	mov	r2, fp
 8002cd8:	4093      	lsls	r3, r2
 8002cda:	4642      	mov	r2, r8
 8002cdc:	001f      	movs	r7, r3
 8002cde:	4653      	mov	r3, sl
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	001e      	movs	r6, r3
 8002ce4:	42af      	cmp	r7, r5
 8002ce6:	d83b      	bhi.n	8002d60 <__udivmoddi4+0xc4>
 8002ce8:	42af      	cmp	r7, r5
 8002cea:	d100      	bne.n	8002cee <__udivmoddi4+0x52>
 8002cec:	e079      	b.n	8002de2 <__udivmoddi4+0x146>
 8002cee:	465b      	mov	r3, fp
 8002cf0:	1ba4      	subs	r4, r4, r6
 8002cf2:	41bd      	sbcs	r5, r7
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da00      	bge.n	8002cfa <__udivmoddi4+0x5e>
 8002cf8:	e076      	b.n	8002de8 <__udivmoddi4+0x14c>
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2301      	movs	r3, #1
 8002d04:	465a      	mov	r2, fp
 8002d06:	4093      	lsls	r3, r2
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	e029      	b.n	8002d68 <__udivmoddi4+0xcc>
 8002d14:	4282      	cmp	r2, r0
 8002d16:	d9cf      	bls.n	8002cb8 <__udivmoddi4+0x1c>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <__udivmoddi4+0x8e>
 8002d26:	601c      	str	r4, [r3, #0]
 8002d28:	605d      	str	r5, [r3, #4]
 8002d2a:	9800      	ldr	r0, [sp, #0]
 8002d2c:	9901      	ldr	r1, [sp, #4]
 8002d2e:	b003      	add	sp, #12
 8002d30:	bcf0      	pop	{r4, r5, r6, r7}
 8002d32:	46bb      	mov	fp, r7
 8002d34:	46b2      	mov	sl, r6
 8002d36:	46a9      	mov	r9, r5
 8002d38:	46a0      	mov	r8, r4
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	469b      	mov	fp, r3
 8002d40:	2320      	movs	r3, #32
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	4652      	mov	r2, sl
 8002d46:	40da      	lsrs	r2, r3
 8002d48:	4641      	mov	r1, r8
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	464a      	mov	r2, r9
 8002d4e:	408a      	lsls	r2, r1
 8002d50:	0017      	movs	r7, r2
 8002d52:	4642      	mov	r2, r8
 8002d54:	431f      	orrs	r7, r3
 8002d56:	4653      	mov	r3, sl
 8002d58:	4093      	lsls	r3, r2
 8002d5a:	001e      	movs	r6, r3
 8002d5c:	42af      	cmp	r7, r5
 8002d5e:	d9c3      	bls.n	8002ce8 <__udivmoddi4+0x4c>
 8002d60:	2200      	movs	r2, #0
 8002d62:	2300      	movs	r3, #0
 8002d64:	9200      	str	r2, [sp, #0]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4643      	mov	r3, r8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0d8      	beq.n	8002d20 <__udivmoddi4+0x84>
 8002d6e:	07fb      	lsls	r3, r7, #31
 8002d70:	0872      	lsrs	r2, r6, #1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	4646      	mov	r6, r8
 8002d76:	087b      	lsrs	r3, r7, #1
 8002d78:	e00e      	b.n	8002d98 <__udivmoddi4+0xfc>
 8002d7a:	42ab      	cmp	r3, r5
 8002d7c:	d101      	bne.n	8002d82 <__udivmoddi4+0xe6>
 8002d7e:	42a2      	cmp	r2, r4
 8002d80:	d80c      	bhi.n	8002d9c <__udivmoddi4+0x100>
 8002d82:	1aa4      	subs	r4, r4, r2
 8002d84:	419d      	sbcs	r5, r3
 8002d86:	2001      	movs	r0, #1
 8002d88:	1924      	adds	r4, r4, r4
 8002d8a:	416d      	adcs	r5, r5
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	3e01      	subs	r6, #1
 8002d90:	1824      	adds	r4, r4, r0
 8002d92:	414d      	adcs	r5, r1
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	d006      	beq.n	8002da6 <__udivmoddi4+0x10a>
 8002d98:	42ab      	cmp	r3, r5
 8002d9a:	d9ee      	bls.n	8002d7a <__udivmoddi4+0xde>
 8002d9c:	3e01      	subs	r6, #1
 8002d9e:	1924      	adds	r4, r4, r4
 8002da0:	416d      	adcs	r5, r5
 8002da2:	2e00      	cmp	r6, #0
 8002da4:	d1f8      	bne.n	8002d98 <__udivmoddi4+0xfc>
 8002da6:	9800      	ldr	r0, [sp, #0]
 8002da8:	9901      	ldr	r1, [sp, #4]
 8002daa:	465b      	mov	r3, fp
 8002dac:	1900      	adds	r0, r0, r4
 8002dae:	4169      	adcs	r1, r5
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db24      	blt.n	8002dfe <__udivmoddi4+0x162>
 8002db4:	002b      	movs	r3, r5
 8002db6:	465a      	mov	r2, fp
 8002db8:	4644      	mov	r4, r8
 8002dba:	40d3      	lsrs	r3, r2
 8002dbc:	002a      	movs	r2, r5
 8002dbe:	40e2      	lsrs	r2, r4
 8002dc0:	001c      	movs	r4, r3
 8002dc2:	465b      	mov	r3, fp
 8002dc4:	0015      	movs	r5, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db2a      	blt.n	8002e20 <__udivmoddi4+0x184>
 8002dca:	0026      	movs	r6, r4
 8002dcc:	409e      	lsls	r6, r3
 8002dce:	0033      	movs	r3, r6
 8002dd0:	0026      	movs	r6, r4
 8002dd2:	4647      	mov	r7, r8
 8002dd4:	40be      	lsls	r6, r7
 8002dd6:	0032      	movs	r2, r6
 8002dd8:	1a80      	subs	r0, r0, r2
 8002dda:	4199      	sbcs	r1, r3
 8002ddc:	9000      	str	r0, [sp, #0]
 8002dde:	9101      	str	r1, [sp, #4]
 8002de0:	e79e      	b.n	8002d20 <__udivmoddi4+0x84>
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	d8bc      	bhi.n	8002d60 <__udivmoddi4+0xc4>
 8002de6:	e782      	b.n	8002cee <__udivmoddi4+0x52>
 8002de8:	4642      	mov	r2, r8
 8002dea:	2320      	movs	r3, #32
 8002dec:	2100      	movs	r1, #0
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	9100      	str	r1, [sp, #0]
 8002df4:	9201      	str	r2, [sp, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	40da      	lsrs	r2, r3
 8002dfa:	9201      	str	r2, [sp, #4]
 8002dfc:	e785      	b.n	8002d0a <__udivmoddi4+0x6e>
 8002dfe:	4642      	mov	r2, r8
 8002e00:	2320      	movs	r3, #32
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	002a      	movs	r2, r5
 8002e06:	4646      	mov	r6, r8
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	40f3      	lsrs	r3, r6
 8002e0e:	4644      	mov	r4, r8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	002a      	movs	r2, r5
 8002e14:	40e2      	lsrs	r2, r4
 8002e16:	001c      	movs	r4, r3
 8002e18:	465b      	mov	r3, fp
 8002e1a:	0015      	movs	r5, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dad4      	bge.n	8002dca <__udivmoddi4+0x12e>
 8002e20:	4642      	mov	r2, r8
 8002e22:	002f      	movs	r7, r5
 8002e24:	2320      	movs	r3, #32
 8002e26:	0026      	movs	r6, r4
 8002e28:	4097      	lsls	r7, r2
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	40de      	lsrs	r6, r3
 8002e2e:	003b      	movs	r3, r7
 8002e30:	4333      	orrs	r3, r6
 8002e32:	e7cd      	b.n	8002dd0 <__udivmoddi4+0x134>

08002e34 <__clzdi2>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	2900      	cmp	r1, #0
 8002e38:	d103      	bne.n	8002e42 <__clzdi2+0xe>
 8002e3a:	f000 f807 	bl	8002e4c <__clzsi2>
 8002e3e:	3020      	adds	r0, #32
 8002e40:	e002      	b.n	8002e48 <__clzdi2+0x14>
 8002e42:	0008      	movs	r0, r1
 8002e44:	f000 f802 	bl	8002e4c <__clzsi2>
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)

08002e4c <__clzsi2>:
 8002e4c:	211c      	movs	r1, #28
 8002e4e:	2301      	movs	r3, #1
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4298      	cmp	r0, r3
 8002e54:	d301      	bcc.n	8002e5a <__clzsi2+0xe>
 8002e56:	0c00      	lsrs	r0, r0, #16
 8002e58:	3910      	subs	r1, #16
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	4298      	cmp	r0, r3
 8002e5e:	d301      	bcc.n	8002e64 <__clzsi2+0x18>
 8002e60:	0a00      	lsrs	r0, r0, #8
 8002e62:	3908      	subs	r1, #8
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	4298      	cmp	r0, r3
 8002e68:	d301      	bcc.n	8002e6e <__clzsi2+0x22>
 8002e6a:	0900      	lsrs	r0, r0, #4
 8002e6c:	3904      	subs	r1, #4
 8002e6e:	a202      	add	r2, pc, #8	; (adr r2, 8002e78 <__clzsi2+0x2c>)
 8002e70:	5c10      	ldrb	r0, [r2, r0]
 8002e72:	1840      	adds	r0, r0, r1
 8002e74:	4770      	bx	lr
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	02020304 	.word	0x02020304
 8002e7c:	01010101 	.word	0x01010101
	...

08002e88 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <tx_application_define+0x98>)
 8002e96:	4923      	ldr	r1, [pc, #140]	; (8002f24 <tx_application_define+0x9c>)
 8002e98:	4823      	ldr	r0, [pc, #140]	; (8002f28 <tx_application_define+0xa0>)
 8002e9a:	2434      	movs	r4, #52	; 0x34
 8002e9c:	9400      	str	r4, [sp, #0]
 8002e9e:	f00e f8a3 	bl	8010fe8 <_txe_byte_pool_create>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d105      	bne.n	8002eb2 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <tx_application_define+0xa0>)
 8002ea8:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 f84f 	bl	8002f50 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <tx_application_define+0xa4>)
 8002eb8:	491d      	ldr	r1, [pc, #116]	; (8002f30 <tx_application_define+0xa8>)
 8002eba:	481e      	ldr	r0, [pc, #120]	; (8002f34 <tx_application_define+0xac>)
 8002ebc:	2434      	movs	r4, #52	; 0x34
 8002ebe:	9400      	str	r4, [sp, #0]
 8002ec0:	f00e f892 	bl	8010fe8 <_txe_byte_pool_create>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d105      	bne.n	8002ed4 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <tx_application_define+0xac>)
 8002eca:	60fb      	str	r3, [r7, #12]

    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f012 ff70 	bl	8015db4 <MX_NetXDuo_Init>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8002ed4:	23c0      	movs	r3, #192	; 0xc0
 8002ed6:	01db      	lsls	r3, r3, #7
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <tx_application_define+0xb0>)
 8002eda:	4918      	ldr	r1, [pc, #96]	; (8002f3c <tx_application_define+0xb4>)
 8002edc:	4818      	ldr	r0, [pc, #96]	; (8002f40 <tx_application_define+0xb8>)
 8002ede:	2434      	movs	r4, #52	; 0x34
 8002ee0:	9400      	str	r4, [sp, #0]
 8002ee2:	f00e f881 	bl	8010fe8 <_txe_byte_pool_create>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d105      	bne.n	8002ef6 <tx_application_define+0x6e>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <tx_application_define+0xb8>)
 8002eec:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f013 fd11 	bl	8016918 <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
  if (tx_byte_pool_create(&usbpd_app_byte_pool, "USBPD App memory pool", usbpd_byte_pool_buffer, USBPD_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	015b      	lsls	r3, r3, #5
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <tx_application_define+0xbc>)
 8002efc:	4912      	ldr	r1, [pc, #72]	; (8002f48 <tx_application_define+0xc0>)
 8002efe:	4813      	ldr	r0, [pc, #76]	; (8002f4c <tx_application_define+0xc4>)
 8002f00:	2434      	movs	r4, #52	; 0x34
 8002f02:	9400      	str	r4, [sp, #0]
 8002f04:	f00e f870 	bl	8010fe8 <_txe_byte_pool_create>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d105      	bne.n	8002f18 <tx_application_define+0x90>
  {
    /* USER CODE BEGIN USBPD_Byte_Pool_Success */

    /* USER CODE END USBPD_Byte_Pool_Success */

    memory_ptr = (VOID *)&usbpd_app_byte_pool;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <tx_application_define+0xc4>)
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (MX_USBPD_Init(memory_ptr) != TX_SUCCESS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f012 ff69 	bl	8015dea <MX_USBPD_Init>
    }
    /* USER CODE BEGIN  MX_USBPD_Init_Success */

    /* USER CODE END  MX_USBPD_Init_Success */
  }
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b005      	add	sp, #20
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	20000190 	.word	0x20000190
 8002f24:	080181d0 	.word	0x080181d0
 8002f28:	20000590 	.word	0x20000590
 8002f2c:	200005c4 	.word	0x200005c4
 8002f30:	080181e4 	.word	0x080181e4
 8002f34:	200009c4 	.word	0x200009c4
 8002f38:	200009f8 	.word	0x200009f8
 8002f3c:	080181f8 	.word	0x080181f8
 8002f40:	200069f8 	.word	0x200069f8
 8002f44:	20006a2c 	.word	0x20006a2c
 8002f48:	0801820c 	.word	0x0801820c
 8002f4c:	2000822c 	.word	0x2000822c

08002f50 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b08f      	sub	sp, #60	; 0x3c
 8002f54:	af08      	add	r7, sp, #32
 8002f56:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	613b      	str	r3, [r7, #16]
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  char* pointer;
  if (tx_byte_allocate(byte_pool, (void**)&pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	009a      	lsls	r2, r3, #2
 8002f64:	230c      	movs	r3, #12
 8002f66:	18f9      	adds	r1, r7, r3
 8002f68:	6938      	ldr	r0, [r7, #16]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f00d ffc6 	bl	8010efc <_txe_byte_allocate>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d001      	beq.n	8002f78 <App_ThreadX_Init+0x28>
  {
	  return TX_POOL_ERROR;
 8002f74:	2302      	movs	r3, #2
 8002f76:	e024      	b.n	8002fc2 <App_ThreadX_Init+0x72>
  }
  if (tx_thread_create(&tx_app_thread, "Main Thread", MainThread_Entry, 0, pointer, TX_APP_STACK_SIZE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4c14      	ldr	r4, [pc, #80]	; (8002fcc <App_ThreadX_Init+0x7c>)
 8002f7c:	4914      	ldr	r1, [pc, #80]	; (8002fd0 <App_ThreadX_Init+0x80>)
 8002f7e:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <App_ThreadX_Init+0x84>)
 8002f80:	22b0      	movs	r2, #176	; 0xb0
 8002f82:	9206      	str	r2, [sp, #24]
 8002f84:	2201      	movs	r2, #1
 8002f86:	9205      	str	r2, [sp, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	9204      	str	r2, [sp, #16]
 8002f8c:	221e      	movs	r2, #30
 8002f8e:	9203      	str	r2, [sp, #12]
 8002f90:	221e      	movs	r2, #30
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	0022      	movs	r2, r4
 8002fa0:	f00e fdd0 	bl	8011b44 <_txe_thread_create>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <App_ThreadX_Init+0x5c>
		  TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD, TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
	  return TX_THREAD_ERROR;
 8002fa8:	230e      	movs	r3, #14
 8002faa:	e00a      	b.n	8002fc2 <App_ThreadX_Init+0x72>
  }
  if (tx_semaphore_create(&tx_app_semaphore, "Semaphore", 0) != TX_SUCCESS)
 8002fac:	490a      	ldr	r1, [pc, #40]	; (8002fd8 <App_ThreadX_Init+0x88>)
 8002fae:	480b      	ldr	r0, [pc, #44]	; (8002fdc <App_ThreadX_Init+0x8c>)
 8002fb0:	231c      	movs	r3, #28
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f00e fc8e 	bl	80118d4 <_txe_semaphore_create>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <App_ThreadX_Init+0x70>
  {
	  return TX_SEMAPHORE_ERROR;
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	e000      	b.n	8002fc2 <App_ThreadX_Init+0x72>
  }
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8002fc0:	697b      	ldr	r3, [r7, #20]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b007      	add	sp, #28
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	08003009 	.word	0x08003009
 8002fd0:	08018224 	.word	0x08018224
 8002fd4:	20008260 	.word	0x20008260
 8002fd8:	08018230 	.word	0x08018230
 8002fdc:	20008310 	.word	0x20008310

08002fe0 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8002fe4:	f00b f976 	bl	800e2d4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <App_Delay>:

/* USER CODE BEGIN 1 */

void App_Delay(unsigned long ticks)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
	tx_thread_sleep(ticks);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f00d f84f 	bl	801009c <_tx_thread_sleep>
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <MainThread_Entry>:

void MainThread_Entry(unsigned long thread_input)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b09d      	sub	sp, #116	; 0x74
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		char buf[100] = {};
 8003010:	240c      	movs	r4, #12
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	2260      	movs	r2, #96	; 0x60
 800301c:	2100      	movs	r1, #0
 800301e:	0018      	movs	r0, r3
 8003020:	f014 fcfb 	bl	8017a1a <memset>
		sprintf(buf, "Button: %d\n\r", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	019b      	lsls	r3, r3, #6
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <MainThread_Entry+0x98>)
 800302a:	0019      	movs	r1, r3
 800302c:	0010      	movs	r0, r2
 800302e:	f001 f8f3 	bl	8004218 <HAL_GPIO_ReadPin>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <MainThread_Entry+0x9c>)
 8003038:	193b      	adds	r3, r7, r4
 800303a:	0018      	movs	r0, r3
 800303c:	f014 fcba 	bl	80179b4 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char*)buf, sizeof(buf), 1000);
 8003040:	23fa      	movs	r3, #250	; 0xfa
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	1939      	adds	r1, r7, r4
 8003046:	4818      	ldr	r0, [pc, #96]	; (80030a8 <MainThread_Entry+0xa0>)
 8003048:	2264      	movs	r2, #100	; 0x64
 800304a:	f004 fb1f 	bl	800768c <HAL_UART_Transmit>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <MainThread_Entry+0x98>)
 8003054:	0019      	movs	r1, r3
 8003056:	0010      	movs	r0, r2
 8003058:	f001 f8de 	bl	8004218 <HAL_GPIO_ReadPin>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d11a      	bne.n	8003096 <MainThread_Entry+0x8e>
		//if (1)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003060:	23a0      	movs	r3, #160	; 0xa0
 8003062:	05db      	lsls	r3, r3, #23
 8003064:	2120      	movs	r1, #32
 8003066:	0018      	movs	r0, r3
 8003068:	f001 f910 	bl	800428c <HAL_GPIO_TogglePin>

			USB_Device_State_Msg = START_USB_DEVICE;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <MainThread_Entry+0xa4>)
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]

			/* Send message to start device */
			if (!txSent)
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MainThread_Entry+0xa8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <MainThread_Entry+0x8e>
			{
				if (tx_queue_send(&ux_app_MsgQueue, &USB_Device_State_Msg, TX_WAIT_FOREVER) != TX_SUCCESS)
 800307a:	2301      	movs	r3, #1
 800307c:	425a      	negs	r2, r3
 800307e:	490b      	ldr	r1, [pc, #44]	; (80030ac <MainThread_Entry+0xa4>)
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MainThread_Entry+0xac>)
 8003082:	0018      	movs	r0, r3
 8003084:	f00e fbda 	bl	801183c <_txe_queue_send>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d001      	beq.n	8003090 <MainThread_Entry+0x88>
				{
					Error_Handler();
 800308c:	f000 fc42 	bl	8003914 <Error_Handler>
				}
				txSent = 1;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <MainThread_Entry+0xa8>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
			}
			//if ()
		}
		App_Delay(20);
 8003096:	2014      	movs	r0, #20
 8003098:	f7ff ffa9 	bl	8002fee <App_Delay>
	{
 800309c:	e7b8      	b.n	8003010 <MainThread_Entry+0x8>
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	50000800 	.word	0x50000800
 80030a4:	0801823c 	.word	0x0801823c
 80030a8:	20008334 	.word	0x20008334
 80030ac:	2000832c 	.word	0x2000832c
 80030b0:	20008330 	.word	0x20008330
 80030b4:	20009114 	.word	0x20009114

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	0002      	movs	r2, r0
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b7f      	cmp	r3, #127	; 0x7f
 80030ca:	d809      	bhi.n	80030e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	001a      	movs	r2, r3
 80030d2:	231f      	movs	r3, #31
 80030d4:	401a      	ands	r2, r3
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_EnableIRQ+0x30>)
 80030d8:	2101      	movs	r1, #1
 80030da:	4091      	lsls	r1, r2
 80030dc:	000a      	movs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	0002      	movs	r2, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003100:	d828      	bhi.n	8003154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003102:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <__NVIC_SetPriority+0xd4>)
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b25b      	sxtb	r3, r3
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	33c0      	adds	r3, #192	; 0xc0
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	589b      	ldr	r3, [r3, r2]
 8003112:	1dfa      	adds	r2, r7, #7
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	0011      	movs	r1, r2
 8003118:	2203      	movs	r2, #3
 800311a:	400a      	ands	r2, r1
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	21ff      	movs	r1, #255	; 0xff
 8003120:	4091      	lsls	r1, r2
 8003122:	000a      	movs	r2, r1
 8003124:	43d2      	mvns	r2, r2
 8003126:	401a      	ands	r2, r3
 8003128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	019b      	lsls	r3, r3, #6
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	401a      	ands	r2, r3
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	0018      	movs	r0, r3
 8003138:	2303      	movs	r3, #3
 800313a:	4003      	ands	r3, r0
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003140:	481f      	ldr	r0, [pc, #124]	; (80031c0 <__NVIC_SetPriority+0xd4>)
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b25b      	sxtb	r3, r3
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	430a      	orrs	r2, r1
 800314c:	33c0      	adds	r3, #192	; 0xc0
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003152:	e031      	b.n	80031b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <__NVIC_SetPriority+0xd8>)
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0019      	movs	r1, r3
 800315c:	230f      	movs	r3, #15
 800315e:	400b      	ands	r3, r1
 8003160:	3b08      	subs	r3, #8
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3306      	adds	r3, #6
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	3304      	adds	r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1dfa      	adds	r2, r7, #7
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	0011      	movs	r1, r2
 8003174:	2203      	movs	r2, #3
 8003176:	400a      	ands	r2, r1
 8003178:	00d2      	lsls	r2, r2, #3
 800317a:	21ff      	movs	r1, #255	; 0xff
 800317c:	4091      	lsls	r1, r2
 800317e:	000a      	movs	r2, r1
 8003180:	43d2      	mvns	r2, r2
 8003182:	401a      	ands	r2, r3
 8003184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	401a      	ands	r2, r3
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	0018      	movs	r0, r3
 8003194:	2303      	movs	r3, #3
 8003196:	4003      	ands	r3, r0
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800319c:	4809      	ldr	r0, [pc, #36]	; (80031c4 <__NVIC_SetPriority+0xd8>)
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	001c      	movs	r4, r3
 80031a4:	230f      	movs	r3, #15
 80031a6:	4023      	ands	r3, r4
 80031a8:	3b08      	subs	r3, #8
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	430a      	orrs	r2, r1
 80031ae:	3306      	adds	r3, #6
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	18c3      	adds	r3, r0, r3
 80031b4:	3304      	adds	r3, #4
 80031b6:	601a      	str	r2, [r3, #0]
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b003      	add	sp, #12
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80031d8:	4a0c      	ldr	r2, [pc, #48]	; (800320c <LL_DMA_SetDataTransferDirection+0x44>)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	001a      	movs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a09      	ldr	r2, [pc, #36]	; (8003210 <LL_DMA_SetDataTransferDirection+0x48>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <LL_DMA_SetDataTransferDirection+0x44>)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	001a      	movs	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b006      	add	sp, #24
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	0801847c 	.word	0x0801847c
 8003210:	ffffbfef 	.word	0xffffbfef

08003214 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <LL_DMA_SetMode+0x44>)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	18d3      	adds	r3, r2, r3
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	001a      	movs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	18d3      	adds	r3, r2, r3
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2220      	movs	r2, #32
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <LL_DMA_SetMode+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	18d3      	adds	r3, r2, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	001a      	movs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
             Mode);
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	0801847c 	.word	0x0801847c

0800325c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <LL_DMA_SetPeriphIncMode+0x44>)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	001a      	movs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2240      	movs	r2, #64	; 0x40
 800327e:	4393      	bics	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <LL_DMA_SetPeriphIncMode+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	001a      	movs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	18d3      	adds	r3, r2, r3
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b006      	add	sp, #24
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	0801847c 	.word	0x0801847c

080032a4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80032b4:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <LL_DMA_SetMemoryIncMode+0x44>)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	001a      	movs	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	18d3      	adds	r3, r2, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	4393      	bics	r3, r2
 80032c8:	0019      	movs	r1, r3
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <LL_DMA_SetMemoryIncMode+0x44>)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	18d3      	adds	r3, r2, r3
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	001a      	movs	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b006      	add	sp, #24
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	0801847c 	.word	0x0801847c

080032ec <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80032fc:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <LL_DMA_SetPeriphSize+0x44>)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	18d3      	adds	r3, r2, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	001a      	movs	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <LL_DMA_SetPeriphSize+0x48>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <LL_DMA_SetPeriphSize+0x44>)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	001a      	movs	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	18d3      	adds	r3, r2, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b006      	add	sp, #24
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	0801847c 	.word	0x0801847c
 8003334:	fffffcff 	.word	0xfffffcff

08003338 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <LL_DMA_SetMemorySize+0x44>)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	001a      	movs	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a09      	ldr	r2, [pc, #36]	; (8003380 <LL_DMA_SetMemorySize+0x48>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <LL_DMA_SetMemorySize+0x44>)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	001a      	movs	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	18d3      	adds	r3, r2, r3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	430a      	orrs	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b006      	add	sp, #24
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	0801847c 	.word	0x0801847c
 8003380:	fffff3ff 	.word	0xfffff3ff

08003384 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8003394:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	001a      	movs	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <LL_DMA_SetChannelPriorityLevel+0x48>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	18d3      	adds	r3, r2, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	001a      	movs	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	18d3      	adds	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
             Priority);
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	0801847c 	.word	0x0801847c
 80033cc:	ffffcfff 	.word	0xffffcfff

080033d0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	4a0f      	ldr	r2, [pc, #60]	; (8003420 <LL_DMA_SetPeriphRequest+0x50>)
 80033e2:	405a      	eors	r2, r3
 80033e4:	0013      	movs	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	18d3      	adds	r3, r2, r3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <LL_DMA_SetPeriphRequest+0x54>)
 80033f6:	4694      	mov	ip, r2
 80033f8:	4463      	add	r3, ip
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	227f      	movs	r2, #127	; 0x7f
 80033fe:	4393      	bics	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a06      	ldr	r2, [pc, #24]	; (8003424 <LL_DMA_SetPeriphRequest+0x54>)
 800340c:	4694      	mov	ip, r2
 800340e:	4463      	add	r3, ip
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	00100080 	.word	0x00100080
 8003424:	40020800 	.word	0x40020800

08003428 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <LL_APB1_GRP1_EnableClock+0x28>)
 8003432:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <LL_APB1_GRP1_EnableClock+0x28>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	430a      	orrs	r2, r1
 800343a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <LL_APB1_GRP1_EnableClock+0x28>)
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <LL_IOP_GRP1_EnableClock+0x28>)
 800345e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <LL_IOP_GRP1_EnableClock+0x28>)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	430a      	orrs	r2, r1
 8003466:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <LL_IOP_GRP1_EnableClock+0x28>)
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4013      	ands	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003472:	68fb      	ldr	r3, [r7, #12]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003484:	f000 fc4e 	bl	8003d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003488:	f000 f80f 	bl	80034aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800348c:	f000 f9b8 	bl	8003800 <MX_GPIO_Init>
  MX_DMA_Init();
 8003490:	f000 f992 	bl	80037b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003494:	f000 f90c 	bl	80036b0 <MX_USART2_UART_Init>
  MX_USB_DRD_FS_PCD_Init();
 8003498:	f000 f958 	bl	800374c <MX_USB_DRD_FS_PCD_Init>
  MX_UCPD2_Init();
 800349c:	f000 f868 	bl	8003570 <MX_UCPD2_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 80034a0:	f012 fc95 	bl	8015dce <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80034a4:	f7ff fd9c 	bl	8002fe0 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <main+0x28>

080034aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b095      	sub	sp, #84	; 0x54
 80034ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034b0:	2414      	movs	r4, #20
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	0018      	movs	r0, r3
 80034b6:	233c      	movs	r3, #60	; 0x3c
 80034b8:	001a      	movs	r2, r3
 80034ba:	2100      	movs	r1, #0
 80034bc:	f014 faad 	bl	8017a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	0018      	movs	r0, r3
 80034c4:	2310      	movs	r3, #16
 80034c6:	001a      	movs	r2, r3
 80034c8:	2100      	movs	r1, #0
 80034ca:	f014 faa6 	bl	8017a1a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f002 fe12 	bl	80060fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2222      	movs	r2, #34	; 0x22
 80034dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	0052      	lsls	r2, r2, #1
 80034e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	03d2      	lsls	r2, r2, #15
 80034ec:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034ee:	0021      	movs	r1, r4
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	2202      	movs	r2, #2
 8003500:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003502:	187b      	adds	r3, r7, r1
 8003504:	2202      	movs	r2, #2
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 800350e:	187b      	adds	r3, r7, r1
 8003510:	2209      	movs	r2, #9
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003514:	187b      	adds	r3, r7, r1
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	0292      	lsls	r2, r2, #10
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	0492      	lsls	r2, r2, #18
 8003522:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8003524:	187b      	adds	r3, r7, r1
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	05d2      	lsls	r2, r2, #23
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800352c:	187b      	adds	r3, r7, r1
 800352e:	0018      	movs	r0, r3
 8003530:	f002 fe30 	bl	8006194 <HAL_RCC_OscConfig>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d001      	beq.n	800353c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003538:	f000 f9ec 	bl	8003914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2207      	movs	r2, #7
 8003540:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2202      	movs	r2, #2
 8003546:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003548:	1d3b      	adds	r3, r7, #4
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	2200      	movs	r2, #0
 8003552:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	2101      	movs	r1, #1
 8003558:	0018      	movs	r0, r3
 800355a:	f003 f97b 	bl	8006854 <HAL_RCC_ClockConfig>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003562:	f000 f9d7 	bl	8003914 <Error_Handler>
  }
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b015      	add	sp, #84	; 0x54
 800356c:	bd90      	pop	{r4, r7, pc}
	...

08003570 <MX_UCPD2_Init>:
  * @brief UCPD2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD2_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003576:	003b      	movs	r3, r7
 8003578:	0018      	movs	r0, r3
 800357a:	2318      	movs	r3, #24
 800357c:	001a      	movs	r2, r3
 800357e:	2100      	movs	r1, #0
 8003580:	f014 fa4b 	bl	8017a1a <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	04db      	lsls	r3, r3, #19
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff ff4d 	bl	8003428 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 800358e:	2008      	movs	r0, #8
 8003590:	f7ff ff60 	bl	8003454 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8003594:	003b      	movs	r3, r7
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800359a:	003b      	movs	r3, r7
 800359c:	2203      	movs	r2, #3
 800359e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035a0:	003b      	movs	r3, r7
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a6:	003b      	movs	r3, r7
 80035a8:	4a3f      	ldr	r2, [pc, #252]	; (80036a8 <MX_UCPD2_Init+0x138>)
 80035aa:	0019      	movs	r1, r3
 80035ac:	0010      	movs	r0, r2
 80035ae:	f005 f909 	bl	80087c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80035b2:	003b      	movs	r3, r7
 80035b4:	2204      	movs	r2, #4
 80035b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80035b8:	003b      	movs	r3, r7
 80035ba:	2203      	movs	r2, #3
 80035bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035be:	003b      	movs	r3, r7
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c4:	003b      	movs	r3, r7
 80035c6:	4a38      	ldr	r2, [pc, #224]	; (80036a8 <MX_UCPD2_Init+0x138>)
 80035c8:	0019      	movs	r1, r3
 80035ca:	0010      	movs	r0, r2
 80035cc:	f005 f8fa 	bl	80087c4 <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD2_TX);
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <MX_UCPD2_Init+0x13c>)
 80035d2:	223d      	movs	r2, #61	; 0x3d
 80035d4:	2100      	movs	r1, #0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7ff fefa 	bl	80033d0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80035dc:	4b33      	ldr	r3, [pc, #204]	; (80036ac <MX_UCPD2_Init+0x13c>)
 80035de:	2210      	movs	r2, #16
 80035e0:	2100      	movs	r1, #0
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7ff fdf0 	bl	80031c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80035e8:	4b30      	ldr	r3, [pc, #192]	; (80036ac <MX_UCPD2_Init+0x13c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7ff fec8 	bl	8003384 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <MX_UCPD2_Init+0x13c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7ff fe0a 	bl	8003214 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003600:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff fe28 	bl	800325c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	2100      	movs	r1, #0
 8003612:	0018      	movs	r0, r3
 8003614:	f7ff fe46 	bl	80032a4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	0018      	movs	r0, r3
 8003620:	f7ff fe64 	bl	80032ec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fe84 	bl	8003338 <LL_DMA_SetMemorySize>

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD2_RX);
 8003630:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003632:	223c      	movs	r2, #60	; 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff feca 	bl	80033d0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800363e:	2200      	movs	r2, #0
 8003640:	2101      	movs	r1, #1
 8003642:	0018      	movs	r0, r3
 8003644:	f7ff fdc0 	bl	80031c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800364a:	2200      	movs	r2, #0
 800364c:	2101      	movs	r1, #1
 800364e:	0018      	movs	r0, r3
 8003650:	f7ff fe98 	bl	8003384 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003656:	2200      	movs	r2, #0
 8003658:	2101      	movs	r1, #1
 800365a:	0018      	movs	r0, r3
 800365c:	f7ff fdda 	bl	8003214 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003662:	2200      	movs	r2, #0
 8003664:	2101      	movs	r1, #1
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff fdf8 	bl	800325c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	2101      	movs	r1, #1
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fe16 	bl	80032a4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <MX_UCPD2_Init+0x13c>)
 800367a:	2200      	movs	r2, #0
 800367c:	2101      	movs	r1, #1
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fe34 	bl	80032ec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <MX_UCPD2_Init+0x13c>)
 8003686:	2200      	movs	r2, #0
 8003688:	2101      	movs	r1, #1
 800368a:	0018      	movs	r0, r3
 800368c:	f7ff fe54 	bl	8003338 <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 2);
 8003690:	2102      	movs	r1, #2
 8003692:	2008      	movs	r0, #8
 8003694:	f7ff fd2a 	bl	80030ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8003698:	2008      	movs	r0, #8
 800369a:	f7ff fd0d 	bl	80030b8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	50000c00 	.word	0x50000c00
 80036ac:	40020000 	.word	0x40020000

080036b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036b6:	4a24      	ldr	r2, [pc, #144]	; (8003748 <MX_USART2_UART_Init+0x98>)
 80036b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036bc:	22e1      	movs	r2, #225	; 0xe1
 80036be:	0252      	lsls	r2, r2, #9
 80036c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036d6:	220c      	movs	r2, #12
 80036d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036dc:	2200      	movs	r2, #0
 80036de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <MX_USART2_UART_Init+0x94>)
 80036fa:	0018      	movs	r0, r3
 80036fc:	f003 ff70 	bl	80075e0 <HAL_UART_Init>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003704:	f000 f906 	bl	8003914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <MX_USART2_UART_Init+0x94>)
 800370a:	2100      	movs	r1, #0
 800370c:	0018      	movs	r0, r3
 800370e:	f004 fdb3 	bl	8008278 <HAL_UARTEx_SetTxFifoThreshold>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003716:	f000 f8fd 	bl	8003914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <MX_USART2_UART_Init+0x94>)
 800371c:	2100      	movs	r1, #0
 800371e:	0018      	movs	r0, r3
 8003720:	f004 fdea 	bl	80082f8 <HAL_UARTEx_SetRxFifoThreshold>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003728:	f000 f8f4 	bl	8003914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <MX_USART2_UART_Init+0x94>)
 800372e:	0018      	movs	r0, r3
 8003730:	f004 fd68 	bl	8008204 <HAL_UARTEx_DisableFifoMode>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003738:	f000 f8ec 	bl	8003914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	20008334 	.word	0x20008334
 8003748:	40004400 	.word	0x40004400

0800374c <MX_USB_DRD_FS_PCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_DRD_FS_PCD_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <MX_USB_DRD_FS_PCD_Init+0x68>)
 8003754:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003758:	2208      	movs	r2, #8
 800375a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800375e:	2208      	movs	r2, #8
 8003760:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003764:	2202      	movs	r2, #2
 8003766:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800376a:	2202      	movs	r2, #2
 800376c:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003770:	2200      	movs	r2, #0
 8003772:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003788:	2200      	movs	r2, #0
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800379a:	0018      	movs	r0, r3
 800379c:	f000 fe2c 	bl	80043f8 <HAL_PCD_Init>
 80037a0:	1e03      	subs	r3, r0, #0
 80037a2:	d001      	beq.n	80037a8 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 80037a4:	f000 f8b6 	bl	8003914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	200083c8 	.word	0x200083c8
 80037b4:	40005c00 	.word	0x40005c00

080037b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <MX_DMA_Init+0x44>)
 80037c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_DMA_Init+0x44>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <MX_DMA_Init+0x44>)
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80037d6:	2100      	movs	r1, #0
 80037d8:	2009      	movs	r0, #9
 80037da:	f7ff fc87 	bl	80030ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037de:	2009      	movs	r0, #9
 80037e0:	f7ff fc6a 	bl	80030b8 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 80037e4:	2100      	movs	r1, #0
 80037e6:	200a      	movs	r0, #10
 80037e8:	f7ff fc80 	bl	80030ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80037ec:	200a      	movs	r0, #10
 80037ee:	f7ff fc63 	bl	80030b8 <__NVIC_EnableIRQ>

}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b002      	add	sp, #8
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	40021000 	.word	0x40021000

08003800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b08b      	sub	sp, #44	; 0x2c
 8003804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003806:	2414      	movs	r4, #20
 8003808:	193b      	adds	r3, r7, r4
 800380a:	0018      	movs	r0, r3
 800380c:	2314      	movs	r3, #20
 800380e:	001a      	movs	r2, r3
 8003810:	2100      	movs	r1, #0
 8003812:	f014 f902 	bl	8017a1a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <MX_GPIO_Init+0xe8>)
 800381c:	2104      	movs	r1, #4
 800381e:	430a      	orrs	r2, r1
 8003820:	635a      	str	r2, [r3, #52]	; 0x34
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	2204      	movs	r2, #4
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003834:	2120      	movs	r1, #32
 8003836:	430a      	orrs	r2, r1
 8003838:	635a      	str	r2, [r3, #52]	; 0x34
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <MX_GPIO_Init+0xe8>)
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <MX_GPIO_Init+0xe8>)
 800384c:	2101      	movs	r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
 8003852:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	2201      	movs	r2, #1
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <MX_GPIO_Init+0xe8>)
 8003864:	2108      	movs	r1, #8
 8003866:	430a      	orrs	r2, r1
 8003868:	635a      	str	r2, [r3, #52]	; 0x34
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <MX_GPIO_Init+0xe8>)
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	2208      	movs	r2, #8
 8003870:	4013      	ands	r3, r2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003876:	23a0      	movs	r3, #160	; 0xa0
 8003878:	05db      	lsls	r3, r3, #23
 800387a:	2200      	movs	r2, #0
 800387c:	2120      	movs	r1, #32
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fce7 	bl	8004252 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003884:	193b      	adds	r3, r7, r4
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	0192      	lsls	r2, r2, #6
 800388a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800388c:	193b      	adds	r3, r7, r4
 800388e:	2288      	movs	r2, #136	; 0x88
 8003890:	0352      	lsls	r2, r2, #13
 8003892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389a:	193b      	adds	r3, r7, r4
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <MX_GPIO_Init+0xec>)
 800389e:	0019      	movs	r1, r3
 80038a0:	0010      	movs	r0, r2
 80038a2:	f000 fb4d 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80038a6:	0021      	movs	r1, r4
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	2220      	movs	r2, #32
 80038ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2201      	movs	r2, #1
 80038b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2202      	movs	r2, #2
 80038be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80038c0:	187a      	adds	r2, r7, r1
 80038c2:	23a0      	movs	r3, #160	; 0xa0
 80038c4:	05db      	lsls	r3, r3, #23
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fb39 	bl	8003f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	2007      	movs	r0, #7
 80038d4:	f000 fb0e 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038d8:	2007      	movs	r0, #7
 80038da:	f000 fb20 	bl	8003f1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b00b      	add	sp, #44	; 0x2c
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	40021000 	.word	0x40021000
 80038ec:	50000800 	.word	0x50000800

080038f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003902:	f000 fa2f 	bl	8003d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	40001000 	.word	0x40001000

08003914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003918:	b672      	cpsid	i
}
 800391a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800391c:	e7fe      	b.n	800391c <Error_Handler+0x8>
	...

08003920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_MspInit+0x44>)
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <HAL_MspInit+0x44>)
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_MspInit+0x44>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2201      	movs	r2, #1
 8003938:	4013      	ands	r3, r2
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_MspInit+0x44>)
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_MspInit+0x44>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0549      	lsls	r1, r1, #21
 8003948:	430a      	orrs	r2, r1
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_MspInit+0x44>)
 800394e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	055b      	lsls	r3, r3, #21
 8003954:	4013      	ands	r3, r2
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b09d      	sub	sp, #116	; 0x74
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	235c      	movs	r3, #92	; 0x5c
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	0018      	movs	r0, r3
 8003976:	2314      	movs	r3, #20
 8003978:	001a      	movs	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	f014 f84d 	bl	8017a1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003980:	2410      	movs	r4, #16
 8003982:	193b      	adds	r3, r7, r4
 8003984:	0018      	movs	r0, r3
 8003986:	234c      	movs	r3, #76	; 0x4c
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f014 f845 	bl	8017a1a <memset>
  if(huart->Instance==USART2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_UART_MspInit+0xb8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d13e      	bne.n	8003a18 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800399a:	193b      	adds	r3, r7, r4
 800399c:	2202      	movs	r2, #2
 800399e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	2200      	movs	r2, #0
 80039a4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	0018      	movs	r0, r3
 80039aa:	f003 f927 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039b2:	f7ff ffaf 	bl	8003914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0289      	lsls	r1, r1, #10
 80039c0:	430a      	orrs	r2, r1
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	029b      	lsls	r3, r3, #10
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039d8:	2101      	movs	r1, #1
 80039da:	430a      	orrs	r2, r1
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_UART_MspInit+0xbc>)
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	2201      	movs	r2, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80039ea:	215c      	movs	r1, #92	; 0x5c
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	220c      	movs	r2, #12
 80039f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2202      	movs	r2, #2
 80039f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2201      	movs	r2, #1
 8003a08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	187a      	adds	r2, r7, r1
 8003a0c:	23a0      	movs	r3, #160	; 0xa0
 8003a0e:	05db      	lsls	r3, r3, #23
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fa94 	bl	8003f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b01d      	add	sp, #116	; 0x74
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	40004400 	.word	0x40004400
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b099      	sub	sp, #100	; 0x64
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a30:	2414      	movs	r4, #20
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	0018      	movs	r0, r3
 8003a36:	234c      	movs	r3, #76	; 0x4c
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f013 ffed 	bl	8017a1a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_PCD_MspInit+0xb4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d143      	bne.n	8003ad2 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0452      	lsls	r2, r2, #17
 8003a50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	2200      	movs	r2, #0
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f003 f8ce 	bl	8006bfc <HAL_RCCEx_PeriphCLKConfig>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8003a64:	f7ff ff56 	bl	8003914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	0189      	lsls	r1, r1, #6
 8003a72:	430a      	orrs	r2, r1
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a84:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	055b      	lsls	r3, r3, #21
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d116      	bne.n	8003abe <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	0549      	lsls	r1, r1, #21
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	055b      	lsls	r3, r3, #21
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8003aac:	f002 fb18 	bl	80060e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_PCD_MspInit+0xb8>)
 8003ab6:	490b      	ldr	r1, [pc, #44]	; (8003ae4 <HAL_PCD_MspInit+0xbc>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8003abc:	e001      	b.n	8003ac2 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003abe:	f002 fb0f 	bl	80060e0 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 2, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	2008      	movs	r0, #8
 8003ac8:	f000 fa14 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8003acc:	2008      	movs	r0, #8
 8003ace:	f000 fa26 	bl	8003f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b019      	add	sp, #100	; 0x64
 8003ad8:	bd90      	pop	{r4, r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40005c00 	.word	0x40005c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	efffffff 	.word	0xefffffff

08003ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b5b0      	push	{r4, r5, r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003af0:	232b      	movs	r3, #43	; 0x2b
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_InitTick+0xf0>)
 8003afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003afc:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_InitTick+0xf0>)
 8003afe:	2110      	movs	r1, #16
 8003b00:	430a      	orrs	r2, r1
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <HAL_InitTick+0xf0>)
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b10:	230c      	movs	r3, #12
 8003b12:	18fa      	adds	r2, r7, r3
 8003b14:	2410      	movs	r4, #16
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f003 f844 	bl	8006ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f003 f826 	bl	8006b7c <HAL_RCC_GetPCLK1Freq>
 8003b30:	0003      	movs	r3, r0
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b34:	e004      	b.n	8003b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b36:	f003 f821 	bl	8006b7c <HAL_RCC_GetPCLK1Freq>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	4926      	ldr	r1, [pc, #152]	; (8003bdc <HAL_InitTick+0xf4>)
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7fe ff13 	bl	8002970 <__udivsi3>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b52:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <HAL_InitTick+0xfc>)
 8003b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b58:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <HAL_InitTick+0x100>)
 8003b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b5c:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003b74:	252b      	movs	r5, #43	; 0x2b
 8003b76:	197c      	adds	r4, r7, r5
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f003 fa7a 	bl	8007074 <HAL_TIM_Base_Init>
 8003b80:	0003      	movs	r3, r0
 8003b82:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003b84:	197b      	adds	r3, r7, r5
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11e      	bne.n	8003bca <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b8c:	197c      	adds	r4, r7, r5
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_InitTick+0xf8>)
 8003b90:	0018      	movs	r0, r3
 8003b92:	f003 facf 	bl	8007134 <HAL_TIM_Base_Start_IT>
 8003b96:	0003      	movs	r3, r0
 8003b98:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003ba2:	2011      	movs	r0, #17
 8003ba4:	f000 f9bb 	bl	8003f1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d809      	bhi.n	8003bc2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	2011      	movs	r0, #17
 8003bb6:	f000 f99d 	bl	8003ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_InitTick+0x104>)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e003      	b.n	8003bca <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8003bc2:	232b      	movs	r3, #43	; 0x2b
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8003bca:	232b      	movs	r3, #43	; 0x2b
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b00c      	add	sp, #48	; 0x30
 8003bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	000f4240 	.word	0x000f4240
 8003be0:	200086d0 	.word	0x200086d0
 8003be4:	40001000 	.word	0x40001000
 8003be8:	000003e7 	.word	0x000003e7
 8003bec:	20000008 	.word	0x20000008

08003bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bf4:	e7fe      	b.n	8003bf4 <NMI_Handler+0x4>

08003bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfa:	e7fe      	b.n	8003bfa <HardFault_Handler+0x4>

08003bfc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 fb5d 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <USB_UCPD1_2_IRQHandler+0x18>)
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fd52 	bl	80046c0 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8003c1c:	f007 fda6 	bl	800b76c <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	200083c8 	.word	0x200083c8

08003c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003c46:	0018      	movs	r0, r3
 8003c48:	f003 fad6 	bl	80071f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	200086d0 	.word	0x200086d0

08003c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <_sbrk+0x5c>)
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <_sbrk+0x60>)
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <_sbrk+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <_sbrk+0x64>)
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <_sbrk+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <_sbrk+0x64>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	18d3      	adds	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d207      	bcs.n	8003c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c88:	f013 fee2 	bl	8017a50 <__errno>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	220c      	movs	r2, #12
 8003c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	425b      	negs	r3, r3
 8003c96:	e009      	b.n	8003cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <_sbrk+0x64>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <_sbrk+0x64>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	18d2      	adds	r2, r2, r3
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <_sbrk+0x64>)
 8003ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b006      	add	sp, #24
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20024000 	.word	0x20024000
 8003cb8:	00000800 	.word	0x00000800
 8003cbc:	2000871c 	.word	0x2000871c
 8003cc0:	20009780 	.word	0x20009780

08003cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cd0:	480d      	ldr	r0, [pc, #52]	; (8003d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cd4:	f7ff fff6 	bl	8003cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cd8:	480c      	ldr	r0, [pc, #48]	; (8003d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003cda:	490d      	ldr	r1, [pc, #52]	; (8003d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <LoopForever+0xe>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce0:	e002      	b.n	8003ce8 <LoopCopyDataInit>

08003ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce6:	3304      	adds	r3, #4

08003ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cec:	d3f9      	bcc.n	8003ce2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf0:	4c0a      	ldr	r4, [pc, #40]	; (8003d1c <LoopForever+0x16>)
  movs r3, #0
 8003cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf4:	e001      	b.n	8003cfa <LoopFillZerobss>

08003cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf8:	3204      	adds	r2, #4

08003cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cfc:	d3fb      	bcc.n	8003cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003cfe:	f013 fead 	bl	8017a5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003d02:	f7ff fbbd 	bl	8003480 <main>

08003d06 <LoopForever>:

LoopForever:
  b LoopForever
 8003d06:	e7fe      	b.n	8003d06 <LoopForever>
  ldr   r0, =_estack
 8003d08:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d10:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8003d14:	080186d8 	.word	0x080186d8
  ldr r2, =_sbss
 8003d18:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8003d1c:	2000977c 	.word	0x2000977c

08003d20 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d20:	e7fe      	b.n	8003d20 <ADC1_COMP_IRQHandler>
	...

08003d24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_Init+0x3c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_Init+0x3c>)
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	0049      	lsls	r1, r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d3e:	2003      	movs	r0, #3
 8003d40:	f7ff fed2 	bl	8003ae8 <HAL_InitTick>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e001      	b.n	8003d54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d50:	f7ff fde6 	bl	8003920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	781b      	ldrb	r3, [r3, #0]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40022000 	.word	0x40022000

08003d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_IncTick+0x1c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_IncTick+0x20>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	18d2      	adds	r2, r2, r3
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_IncTick+0x20>)
 8003d76:	601a      	str	r2, [r3, #0]
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	2000000c 	.word	0x2000000c
 8003d84:	20008720 	.word	0x20008720

08003d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <HAL_GetTick+0x10>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	20008720 	.word	0x20008720

08003d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_GetTick>
 8003da8:	0003      	movs	r3, r0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	d005      	beq.n	8003dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_Delay+0x44>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	001a      	movs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	f7ff ffe0 	bl	8003d88 <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8f7      	bhi.n	8003dc4 <HAL_Delay+0x28>
  {
  }
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	2000000c 	.word	0x2000000c

08003de4 <__NVIC_EnableIRQ>:
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	0002      	movs	r2, r0
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b7f      	cmp	r3, #127	; 0x7f
 8003df6:	d809      	bhi.n	8003e0c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	001a      	movs	r2, r3
 8003dfe:	231f      	movs	r3, #31
 8003e00:	401a      	ands	r2, r3
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <__NVIC_EnableIRQ+0x30>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	4091      	lsls	r1, r2
 8003e08:	000a      	movs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	e000e100 	.word	0xe000e100

08003e18 <__NVIC_SetPriority>:
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	0002      	movs	r2, r0
 8003e20:	6039      	str	r1, [r7, #0]
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	1dfb      	adds	r3, r7, #7
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e2c:	d828      	bhi.n	8003e80 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e2e:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <__NVIC_SetPriority+0xd4>)
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	33c0      	adds	r3, #192	; 0xc0
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	589b      	ldr	r3, [r3, r2]
 8003e3e:	1dfa      	adds	r2, r7, #7
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	0011      	movs	r1, r2
 8003e44:	2203      	movs	r2, #3
 8003e46:	400a      	ands	r2, r1
 8003e48:	00d2      	lsls	r2, r2, #3
 8003e4a:	21ff      	movs	r1, #255	; 0xff
 8003e4c:	4091      	lsls	r1, r2
 8003e4e:	000a      	movs	r2, r1
 8003e50:	43d2      	mvns	r2, r2
 8003e52:	401a      	ands	r2, r3
 8003e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	0018      	movs	r0, r3
 8003e64:	2303      	movs	r3, #3
 8003e66:	4003      	ands	r3, r0
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e6c:	481f      	ldr	r0, [pc, #124]	; (8003eec <__NVIC_SetPriority+0xd4>)
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	430a      	orrs	r2, r1
 8003e78:	33c0      	adds	r3, #192	; 0xc0
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	501a      	str	r2, [r3, r0]
}
 8003e7e:	e031      	b.n	8003ee4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <__NVIC_SetPriority+0xd8>)
 8003e82:	1dfb      	adds	r3, r7, #7
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	0019      	movs	r1, r3
 8003e88:	230f      	movs	r3, #15
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	3b08      	subs	r3, #8
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3306      	adds	r3, #6
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	3304      	adds	r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	1dfa      	adds	r2, r7, #7
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	00d2      	lsls	r2, r2, #3
 8003ea6:	21ff      	movs	r1, #255	; 0xff
 8003ea8:	4091      	lsls	r1, r2
 8003eaa:	000a      	movs	r2, r1
 8003eac:	43d2      	mvns	r2, r2
 8003eae:	401a      	ands	r2, r3
 8003eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	401a      	ands	r2, r3
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	4003      	ands	r3, r0
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec8:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <__NVIC_SetPriority+0xd8>)
 8003eca:	1dfb      	adds	r3, r7, #7
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	001c      	movs	r4, r3
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	4023      	ands	r3, r4
 8003ed4:	3b08      	subs	r3, #8
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	3306      	adds	r3, #6
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	18c3      	adds	r3, r0, r3
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b003      	add	sp, #12
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	e000e100 	.word	0xe000e100
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	210f      	movs	r1, #15
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	1c02      	adds	r2, r0, #0
 8003f04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff ff81 	bl	8003e18 <__NVIC_SetPriority>
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	0002      	movs	r2, r0
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff ff57 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4e:	e14d      	b.n	80041ec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2101      	movs	r1, #1
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4091      	lsls	r1, r2
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d100      	bne.n	8003f68 <HAL_GPIO_Init+0x28>
 8003f66:	e13e      	b.n	80041e6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d005      	beq.n	8003f80 <HAL_GPIO_Init+0x40>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d130      	bne.n	8003fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	0013      	movs	r3, r2
 8003f90:	43da      	mvns	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	0013      	movs	r3, r2
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	2201      	movs	r2, #1
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d017      	beq.n	800401e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	0013      	movs	r3, r2
 8003ffe:	43da      	mvns	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	0013      	movs	r3, r2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2203      	movs	r2, #3
 8004024:	4013      	ands	r3, r2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d123      	bne.n	8004072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	08da      	lsrs	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3208      	adds	r2, #8
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	58d3      	ldr	r3, [r2, r3]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2207      	movs	r2, #7
 800403c:	4013      	ands	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	409a      	lsls	r2, r3
 8004044:	0013      	movs	r3, r2
 8004046:	43da      	mvns	r2, r3
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2107      	movs	r1, #7
 8004056:	400b      	ands	r3, r1
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	0092      	lsls	r2, r2, #2
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	2203      	movs	r2, #3
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	43da      	mvns	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2203      	movs	r2, #3
 8004090:	401a      	ands	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	0013      	movs	r3, r2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	23c0      	movs	r3, #192	; 0xc0
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	4013      	ands	r3, r2
 80040b0:	d100      	bne.n	80040b4 <HAL_GPIO_Init+0x174>
 80040b2:	e098      	b.n	80041e6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040b4:	4a53      	ldr	r2, [pc, #332]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3318      	adds	r3, #24
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	589b      	ldr	r3, [r3, r2]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2203      	movs	r2, #3
 80040c6:	4013      	ands	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	220f      	movs	r2, #15
 80040cc:	409a      	lsls	r2, r3
 80040ce:	0013      	movs	r3, r2
 80040d0:	43da      	mvns	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	23a0      	movs	r3, #160	; 0xa0
 80040dc:	05db      	lsls	r3, r3, #23
 80040de:	429a      	cmp	r2, r3
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_Init+0x1d6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a48      	ldr	r2, [pc, #288]	; (8004208 <HAL_GPIO_Init+0x2c8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_GPIO_Init+0x1d2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a47      	ldr	r2, [pc, #284]	; (800420c <HAL_GPIO_Init+0x2cc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00d      	beq.n	800410e <HAL_GPIO_Init+0x1ce>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a46      	ldr	r2, [pc, #280]	; (8004210 <HAL_GPIO_Init+0x2d0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_GPIO_Init+0x1ca>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a45      	ldr	r2, [pc, #276]	; (8004214 <HAL_GPIO_Init+0x2d4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_GPIO_Init+0x1c6>
 8004102:	2304      	movs	r3, #4
 8004104:	e008      	b.n	8004118 <HAL_GPIO_Init+0x1d8>
 8004106:	2305      	movs	r3, #5
 8004108:	e006      	b.n	8004118 <HAL_GPIO_Init+0x1d8>
 800410a:	2303      	movs	r3, #3
 800410c:	e004      	b.n	8004118 <HAL_GPIO_Init+0x1d8>
 800410e:	2302      	movs	r3, #2
 8004110:	e002      	b.n	8004118 <HAL_GPIO_Init+0x1d8>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_GPIO_Init+0x1d8>
 8004116:	2300      	movs	r3, #0
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	2103      	movs	r1, #3
 800411c:	400a      	ands	r2, r1
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	4093      	lsls	r3, r2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004128:	4936      	ldr	r1, [pc, #216]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3318      	adds	r3, #24
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43da      	mvns	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	035b      	lsls	r3, r3, #13
 800414e:	4013      	ands	r3, r2
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004160:	4b28      	ldr	r3, [pc, #160]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	43da      	mvns	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	039b      	lsls	r3, r3, #14
 8004178:	4013      	ands	r3, r2
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004184:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 800418c:	2384      	movs	r3, #132	; 0x84
 800418e:	58d3      	ldr	r3, [r2, r3]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	43da      	mvns	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	4013      	ands	r3, r2
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b0:	4914      	ldr	r1, [pc, #80]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 80041b2:	2284      	movs	r2, #132	; 0x84
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041b8:	4a12      	ldr	r2, [pc, #72]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	58d3      	ldr	r3, [r2, r3]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43da      	mvns	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	025b      	lsls	r3, r3, #9
 80041d2:	4013      	ands	r3, r2
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041de:	4909      	ldr	r1, [pc, #36]	; (8004204 <HAL_GPIO_Init+0x2c4>)
 80041e0:	2280      	movs	r2, #128	; 0x80
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3301      	adds	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	40da      	lsrs	r2, r3
 80041f4:	1e13      	subs	r3, r2, #0
 80041f6:	d000      	beq.n	80041fa <HAL_GPIO_Init+0x2ba>
 80041f8:	e6aa      	b.n	8003f50 <HAL_GPIO_Init+0x10>
  }
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021800 	.word	0x40021800
 8004208:	50000400 	.word	0x50000400
 800420c:	50000800 	.word	0x50000800
 8004210:	50000c00 	.word	0x50000c00
 8004214:	50001000 	.word	0x50001000

08004218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	000a      	movs	r2, r1
 8004222:	1cbb      	adds	r3, r7, #2
 8004224:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	1cba      	adds	r2, r7, #2
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	4013      	ands	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004232:	230f      	movs	r3, #15
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e003      	b.n	8004244 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800423c:	230f      	movs	r3, #15
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004244:	230f      	movs	r3, #15
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b004      	add	sp, #16
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	0008      	movs	r0, r1
 800425c:	0011      	movs	r1, r2
 800425e:	1cbb      	adds	r3, r7, #2
 8004260:	1c02      	adds	r2, r0, #0
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	1c7b      	adds	r3, r7, #1
 8004266:	1c0a      	adds	r2, r1, #0
 8004268:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426a:	1c7b      	adds	r3, r7, #1
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004272:	1cbb      	adds	r3, r7, #2
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800427a:	e003      	b.n	8004284 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800427c:	1cbb      	adds	r3, r7, #2
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	000a      	movs	r2, r1
 8004296:	1cbb      	adds	r3, r7, #2
 8004298:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042a0:	1cbb      	adds	r3, r7, #2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4013      	ands	r3, r2
 80042a8:	041a      	lsls	r2, r3, #16
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	1cb9      	adds	r1, r7, #2
 80042b0:	8809      	ldrh	r1, [r1, #0]
 80042b2:	400b      	ands	r3, r1
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	619a      	str	r2, [r3, #24]
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	0002      	movs	r2, r0
 80042cc:	1dbb      	adds	r3, r7, #6
 80042ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	1dba      	adds	r2, r7, #6
 80042d6:	8812      	ldrh	r2, [r2, #0]
 80042d8:	4013      	ands	r3, r2
 80042da:	d008      	beq.n	80042ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042de:	1dba      	adds	r2, r7, #6
 80042e0:	8812      	ldrh	r2, [r2, #0]
 80042e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80042e4:	1dbb      	adds	r3, r7, #6
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f013 fa8b 	bl	8017804 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	1dba      	adds	r2, r7, #6
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	4013      	ands	r3, r2
 80042f8:	d008      	beq.n	800430c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042fc:	1dba      	adds	r2, r7, #6
 80042fe:	8812      	ldrh	r2, [r2, #0]
 8004300:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004302:	1dbb      	adds	r3, r7, #6
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	0018      	movs	r0, r3
 8004308:	f000 f806 	bl	8004318 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021800 	.word	0x40021800

08004318 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	0002      	movs	r2, r0
 8004320:	1dbb      	adds	r3, r7, #6
 8004322:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	000a      	movs	r2, r1
 8004336:	1cbb      	adds	r3, r7, #2
 8004338:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800433a:	230a      	movs	r3, #10
 800433c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800433e:	e002      	b.n	8004346 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f9      	bne.n	8004340 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800434c:	1cbb      	adds	r3, r7, #2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4a06      	ldr	r2, [pc, #24]	; (800436c <PCD_GET_EP_RX_CNT+0x40>)
 8004354:	4694      	mov	ip, r2
 8004356:	4463      	add	r3, ip
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	b29b      	uxth	r3, r3
 800435e:	059b      	lsls	r3, r3, #22
 8004360:	0d9b      	lsrs	r3, r3, #22
 8004362:	b29b      	uxth	r3, r3
}
 8004364:	0018      	movs	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	b004      	add	sp, #16
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40009800 	.word	0x40009800

08004370 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	000a      	movs	r2, r1
 800437a:	1cbb      	adds	r3, r7, #2
 800437c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800437e:	230a      	movs	r3, #10
 8004380:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004382:	e002      	b.n	800438a <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f9      	bne.n	8004384 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004390:	1cbb      	adds	r3, r7, #2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8004398:	4694      	mov	ip, r2
 800439a:	4463      	add	r3, ip
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	059b      	lsls	r3, r3, #22
 80043a4:	0d9b      	lsrs	r3, r3, #22
 80043a6:	b29b      	uxth	r3, r3
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b004      	add	sp, #16
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40009800 	.word	0x40009800

080043b4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	000a      	movs	r2, r1
 80043be:	1cbb      	adds	r3, r7, #2
 80043c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 80043c2:	230a      	movs	r3, #10
 80043c4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80043c6:	e002      	b.n	80043ce <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f9      	bne.n	80043c8 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80043d4:	1cbb      	adds	r3, r7, #2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4a06      	ldr	r2, [pc, #24]	; (80043f4 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80043dc:	4694      	mov	ip, r2
 80043de:	4463      	add	r3, ip
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	059b      	lsls	r3, r3, #22
 80043e8:	0d9b      	lsrs	r3, r3, #22
 80043ea:	b29b      	uxth	r3, r3
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40009800 	.word	0x40009800

080043f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	b08f      	sub	sp, #60	; 0x3c
 80043fc:	af0a      	add	r7, sp, #40	; 0x28
 80043fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e10a      	b.n	8004620 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a86      	ldr	r2, [pc, #536]	; (8004628 <HAL_PCD_Init+0x230>)
 800440e:	5c9b      	ldrb	r3, [r3, r2]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	23af      	movs	r3, #175	; 0xaf
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	2100      	movs	r1, #0
 800441e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff fb00 	bl	8003a28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a7f      	ldr	r2, [pc, #508]	; (8004628 <HAL_PCD_Init+0x230>)
 800442c:	2103      	movs	r1, #3
 800442e:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	0018      	movs	r0, r3
 800443c:	f004 faa6 	bl	800898c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004440:	230f      	movs	r3, #15
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e05b      	b.n	8004502 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800444a:	240f      	movs	r4, #15
 800444c:	193b      	adds	r3, r7, r4
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	203d      	movs	r0, #61	; 0x3d
 8004454:	0013      	movs	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	189b      	adds	r3, r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	18cb      	adds	r3, r1, r3
 800445e:	181b      	adds	r3, r3, r0
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004464:	193b      	adds	r3, r7, r4
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	203c      	movs	r0, #60	; 0x3c
 800446c:	0013      	movs	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	189b      	adds	r3, r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	18cb      	adds	r3, r1, r3
 8004476:	181b      	adds	r3, r3, r0
 8004478:	193a      	adds	r2, r7, r4
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800447e:	0025      	movs	r5, r4
 8004480:	193b      	adds	r3, r7, r4
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	197b      	adds	r3, r7, r5
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b29c      	uxth	r4, r3
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	2048      	movs	r0, #72	; 0x48
 800448e:	0013      	movs	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	189b      	adds	r3, r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	18cb      	adds	r3, r1, r3
 8004498:	181b      	adds	r3, r3, r0
 800449a:	1c22      	adds	r2, r4, #0
 800449c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800449e:	197b      	adds	r3, r7, r5
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	203f      	movs	r0, #63	; 0x3f
 80044a6:	0013      	movs	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	18cb      	adds	r3, r1, r3
 80044b0:	181b      	adds	r3, r3, r0
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044b6:	197b      	adds	r3, r7, r5
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	0013      	movs	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	18cb      	adds	r3, r1, r3
 80044c6:	334c      	adds	r3, #76	; 0x4c
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044cc:	197b      	adds	r3, r7, r5
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	0013      	movs	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	18cb      	adds	r3, r1, r3
 80044dc:	3350      	adds	r3, #80	; 0x50
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044e2:	197b      	adds	r3, r7, r5
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	0013      	movs	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	18cb      	adds	r3, r1, r3
 80044f2:	3354      	adds	r3, #84	; 0x54
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	197b      	adds	r3, r7, r5
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	197b      	adds	r3, r7, r5
 80044fe:	3201      	adds	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	210f      	movs	r1, #15
 8004504:	187b      	adds	r3, r7, r1
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d39c      	bcc.n	800444a <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	187b      	adds	r3, r7, r1
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e056      	b.n	80045c6 <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004518:	240f      	movs	r4, #15
 800451a:	193b      	adds	r3, r7, r4
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	237e      	movs	r3, #126	; 0x7e
 8004522:	33ff      	adds	r3, #255	; 0xff
 8004524:	0019      	movs	r1, r3
 8004526:	0013      	movs	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	189b      	adds	r3, r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	18c3      	adds	r3, r0, r3
 8004530:	185b      	adds	r3, r3, r1
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004536:	193b      	adds	r3, r7, r4
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	23be      	movs	r3, #190	; 0xbe
 800453e:	0059      	lsls	r1, r3, #1
 8004540:	0013      	movs	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	189b      	adds	r3, r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	18c3      	adds	r3, r0, r3
 800454a:	185b      	adds	r3, r3, r1
 800454c:	193a      	adds	r2, r7, r4
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004552:	193b      	adds	r3, r7, r4
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	33ff      	adds	r3, #255	; 0xff
 800455c:	0019      	movs	r1, r3
 800455e:	0013      	movs	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	189b      	adds	r3, r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	18c3      	adds	r3, r0, r3
 8004568:	185b      	adds	r3, r3, r1
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800456e:	193b      	adds	r3, r7, r4
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	23c6      	movs	r3, #198	; 0xc6
 8004576:	0059      	lsls	r1, r3, #1
 8004578:	0013      	movs	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	189b      	adds	r3, r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	18c3      	adds	r3, r0, r3
 8004582:	185b      	adds	r3, r3, r1
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004588:	193b      	adds	r3, r7, r4
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	23c8      	movs	r3, #200	; 0xc8
 8004590:	0059      	lsls	r1, r3, #1
 8004592:	0013      	movs	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	189b      	adds	r3, r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	18c3      	adds	r3, r0, r3
 800459c:	185b      	adds	r3, r3, r1
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045a2:	193b      	adds	r3, r7, r4
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	23ca      	movs	r3, #202	; 0xca
 80045aa:	0059      	lsls	r1, r3, #1
 80045ac:	0013      	movs	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	18c3      	adds	r3, r0, r3
 80045b6:	185b      	adds	r3, r3, r1
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045bc:	193b      	adds	r3, r7, r4
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	193b      	adds	r3, r7, r4
 80045c2:	3201      	adds	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3a1      	bcc.n	8004518 <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681c      	ldr	r4, [r3, #0]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	466b      	mov	r3, sp
 80045dc:	001a      	movs	r2, r3
 80045de:	0003      	movs	r3, r0
 80045e0:	3310      	adds	r3, #16
 80045e2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80045e4:	c262      	stmia	r2!, {r1, r5, r6}
 80045e6:	cb62      	ldmia	r3!, {r1, r5, r6}
 80045e8:	c262      	stmia	r2!, {r1, r5, r6}
 80045ea:	cb62      	ldmia	r3!, {r1, r5, r6}
 80045ec:	c262      	stmia	r2!, {r1, r5, r6}
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	6841      	ldr	r1, [r0, #4]
 80045f4:	6882      	ldr	r2, [r0, #8]
 80045f6:	68c3      	ldr	r3, [r0, #12]
 80045f8:	0020      	movs	r0, r4
 80045fa:	f004 f9f9 	bl	80089f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2238      	movs	r2, #56	; 0x38
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a07      	ldr	r2, [pc, #28]	; (8004628 <HAL_PCD_Init+0x230>)
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b01      	cmp	r3, #1
 8004614:	d103      	bne.n	800461e <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f001 fd33 	bl	8006084 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b005      	add	sp, #20
 8004626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004628:	000002bd 	.word	0x000002bd

0800462c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	23af      	movs	r3, #175	; 0xaf
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_PCD_Start+0x18>
 8004640:	2302      	movs	r3, #2
 8004642:	e014      	b.n	800466e <HAL_PCD_Start+0x42>
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	23af      	movs	r3, #175	; 0xaf
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	2101      	movs	r1, #1
 800464c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	0018      	movs	r0, r3
 8004654:	f004 f986 	bl	8008964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	0018      	movs	r0, r3
 800465e:	f006 f8ce 	bl	800a7fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	23af      	movs	r3, #175	; 0xaf
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	2100      	movs	r1, #0
 800466a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	23af      	movs	r3, #175	; 0xaf
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_PCD_Stop+0x18>
 800468a:	2302      	movs	r3, #2
 800468c:	e014      	b.n	80046b8 <HAL_PCD_Stop+0x42>
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	23af      	movs	r3, #175	; 0xaf
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	2101      	movs	r1, #1
 8004696:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	f004 f975 	bl	800898c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f006 f8ba 	bl	800a820 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	23af      	movs	r3, #175	; 0xaf
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	2100      	movs	r1, #0
 80046b4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f006 f8b9 	bl	800a844 <USB_ReadInterrupts>
 80046d2:	0003      	movs	r3, r0
 80046d4:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 80046d6:	4a7c      	ldr	r2, [pc, #496]	; (80048c8 <HAL_PCD_IRQHandler+0x208>)
 80046d8:	23a0      	movs	r3, #160	; 0xa0
 80046da:	58d3      	ldr	r3, [r2, r3]
 80046dc:	2204      	movs	r2, #4
 80046de:	4013      	ands	r3, r2
 80046e0:	d100      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x24>
 80046e2:	e0ed      	b.n	80048c0 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 fbb7 	bl	8004e64 <PCD_EP_ISR_Handler>

    return;
 80046f6:	e0e4      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4013      	ands	r3, r2
 8004700:	d011      	beq.n	8004726 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	496f      	ldr	r1, [pc, #444]	; (80048cc <HAL_PCD_IRQHandler+0x20c>)
 800470e:	400a      	ands	r2, r1
 8004710:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f010 ffa3 	bl	8015660 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2100      	movs	r1, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f8fc 	bl	800491c <HAL_PCD_SetAddress>

    return;
 8004724:	e0cd      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4013      	ands	r3, r2
 800472e:	d008      	beq.n	8004742 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4965      	ldr	r1, [pc, #404]	; (80048d0 <HAL_PCD_IRQHandler+0x210>)
 800473c:	400a      	ands	r2, r1
 800473e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8004740:	e0bf      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	019b      	lsls	r3, r3, #6
 8004748:	4013      	ands	r3, r2
 800474a:	d008      	beq.n	800475e <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	495f      	ldr	r1, [pc, #380]	; (80048d4 <HAL_PCD_IRQHandler+0x214>)
 8004758:	400a      	ands	r2, r1
 800475a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800475c:	e0b1      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	015b      	lsls	r3, r3, #5
 8004764:	4013      	ands	r3, r2
 8004766:	d02c      	beq.n	80047c2 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2104      	movs	r1, #4
 8004774:	438a      	bics	r2, r1
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2108      	movs	r1, #8
 8004784:	438a      	bics	r2, r1
 8004786:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	23bd      	movs	r3, #189	; 0xbd
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d109      	bne.n	80047a8 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	23bd      	movs	r3, #189	; 0xbd
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	2100      	movs	r1, #0
 800479c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2100      	movs	r1, #0
 80047a2:	0018      	movs	r0, r3
 80047a4:	f001 fc90 	bl	80060c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f8ae 	bl	800490c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4947      	ldr	r1, [pc, #284]	; (80048d8 <HAL_PCD_IRQHandler+0x218>)
 80047bc:	400a      	ands	r2, r1
 80047be:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80047c0:	e07f      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	4013      	ands	r3, r2
 80047ca:	d01c      	beq.n	8004806 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2108      	movs	r1, #8
 80047d8:	430a      	orrs	r2, r1
 80047da:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	493d      	ldr	r1, [pc, #244]	; (80048dc <HAL_PCD_IRQHandler+0x21c>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2104      	movs	r1, #4
 80047f8:	430a      	orrs	r2, r1
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 f87c 	bl	80048fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004804:	e05d      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	4013      	ands	r3, r2
 800480c:	d038      	beq.n	8004880 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4931      	ldr	r1, [pc, #196]	; (80048e0 <HAL_PCD_IRQHandler+0x220>)
 800481a:	400a      	ands	r2, r1
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	23bd      	movs	r3, #189	; 0xbd
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d125      	bne.n	8004876 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2104      	movs	r1, #4
 8004836:	430a      	orrs	r2, r1
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2108      	movs	r1, #8
 8004846:	430a      	orrs	r2, r1
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	23bd      	movs	r3, #189	; 0xbd
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	2101      	movs	r1, #1
 8004852:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	223c      	movs	r2, #60	; 0x3c
 800485e:	4013      	ands	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	23be      	movs	r3, #190	; 0xbe
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2101      	movs	r1, #1
 800486e:	0018      	movs	r0, r3
 8004870:	f001 fc2a 	bl	80060c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004874:	e025      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f83f 	bl	80048fc <HAL_PCD_SuspendCallback>
    return;
 800487e:	e020      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4013      	ands	r3, r2
 8004888:	d00c      	beq.n	80048a4 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4913      	ldr	r1, [pc, #76]	; (80048e4 <HAL_PCD_IRQHandler+0x224>)
 8004896:	400a      	ands	r2, r1
 8004898:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 f825 	bl	80048ec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048a2:	e00e      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	490b      	ldr	r1, [pc, #44]	; (80048e8 <HAL_PCD_IRQHandler+0x228>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80048be:	e000      	b.n	80048c2 <HAL_PCD_IRQHandler+0x202>
    return;
 80048c0:	46c0      	nop			; (mov r8, r8)
  }
}
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40010000 	.word	0x40010000
 80048cc:	0000fbff 	.word	0x0000fbff
 80048d0:	0000bfff 	.word	0x0000bfff
 80048d4:	0000dfff 	.word	0x0000dfff
 80048d8:	0000efff 	.word	0x0000efff
 80048dc:	0000f7ff 	.word	0x0000f7ff
 80048e0:	0000ff7f 	.word	0x0000ff7f
 80048e4:	0000fdff 	.word	0x0000fdff
 80048e8:	0000feff 	.word	0x0000feff

080048ec <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b002      	add	sp, #8
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b002      	add	sp, #8
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	000a      	movs	r2, r1
 8004926:	1cfb      	adds	r3, r7, #3
 8004928:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	23af      	movs	r3, #175	; 0xaf
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_PCD_SetAddress+0x1e>
 8004936:	2302      	movs	r3, #2
 8004938:	e017      	b.n	800496a <HAL_PCD_SetAddress+0x4e>
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	23af      	movs	r3, #175	; 0xaf
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	2101      	movs	r1, #1
 8004942:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	1cfa      	adds	r2, r7, #3
 8004948:	2138      	movs	r1, #56	; 0x38
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	1cfb      	adds	r3, r7, #3
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f005 ff3d 	bl	800a7d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	23af      	movs	r3, #175	; 0xaf
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	2100      	movs	r1, #0
 8004966:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004972:	b590      	push	{r4, r7, lr}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	000c      	movs	r4, r1
 800497c:	0010      	movs	r0, r2
 800497e:	0019      	movs	r1, r3
 8004980:	1cfb      	adds	r3, r7, #3
 8004982:	1c22      	adds	r2, r4, #0
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	003b      	movs	r3, r7
 8004988:	1c02      	adds	r2, r0, #0
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	1cbb      	adds	r3, r7, #2
 800498e:	1c0a      	adds	r2, r1, #0
 8004990:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004992:	230b      	movs	r3, #11
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800499a:	1cfb      	adds	r3, r7, #3
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	da10      	bge.n	80049c6 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a4:	1cfb      	adds	r3, r7, #3
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2207      	movs	r2, #7
 80049aa:	401a      	ands	r2, r3
 80049ac:	0013      	movs	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	189b      	adds	r3, r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	3338      	adds	r3, #56	; 0x38
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	18d3      	adds	r3, r2, r3
 80049ba:	3304      	adds	r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	705a      	strb	r2, [r3, #1]
 80049c4:	e010      	b.n	80049e8 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049c6:	1cfb      	adds	r3, r7, #3
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2207      	movs	r2, #7
 80049cc:	401a      	ands	r2, r3
 80049ce:	0013      	movs	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	3379      	adds	r3, #121	; 0x79
 80049d8:	33ff      	adds	r3, #255	; 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	18d3      	adds	r3, r2, r3
 80049de:	3304      	adds	r3, #4
 80049e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049e8:	1cfb      	adds	r3, r7, #3
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2207      	movs	r2, #7
 80049ee:	4013      	ands	r3, r2
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049f6:	003b      	movs	r3, r7
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1cba      	adds	r2, r7, #2
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d004      	beq.n	8004a18 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a18:	1cbb      	adds	r3, r7, #2
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d102      	bne.n	8004a26 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	23af      	movs	r3, #175	; 0xaf
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_PCD_EP_Open+0xc4>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e013      	b.n	8004a5e <HAL_PCD_EP_Open+0xec>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	23af      	movs	r3, #175	; 0xaf
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f003 fffb 	bl	8008a44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	23af      	movs	r3, #175	; 0xaf
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	2100      	movs	r1, #0
 8004a56:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004a58:	230b      	movs	r3, #11
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	781b      	ldrb	r3, [r3, #0]
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b005      	add	sp, #20
 8004a64:	bd90      	pop	{r4, r7, pc}

08004a66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	000a      	movs	r2, r1
 8004a70:	1cfb      	adds	r3, r7, #3
 8004a72:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a74:	1cfb      	adds	r3, r7, #3
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da10      	bge.n	8004aa0 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	1cfb      	adds	r3, r7, #3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2207      	movs	r2, #7
 8004a84:	401a      	ands	r2, r3
 8004a86:	0013      	movs	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	3338      	adds	r3, #56	; 0x38
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	705a      	strb	r2, [r3, #1]
 8004a9e:	e010      	b.n	8004ac2 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa0:	1cfb      	adds	r3, r7, #3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	0013      	movs	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3379      	adds	r3, #121	; 0x79
 8004ab2:	33ff      	adds	r3, #255	; 0xff
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	18d3      	adds	r3, r2, r3
 8004ab8:	3304      	adds	r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ac2:	1cfb      	adds	r3, r7, #3
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	4013      	ands	r3, r2
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	23af      	movs	r3, #175	; 0xaf
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_PCD_EP_Close+0x7a>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e011      	b.n	8004b04 <HAL_PCD_EP_Close+0x9e>
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	23af      	movs	r3, #175	; 0xaf
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f004 faea 	bl	80090cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	23af      	movs	r3, #175	; 0xaf
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	2100      	movs	r1, #0
 8004b00:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b004      	add	sp, #16
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	200b      	movs	r0, #11
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	1c0a      	adds	r2, r1, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b20:	0001      	movs	r1, r0
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2207      	movs	r2, #7
 8004b28:	401a      	ands	r2, r3
 8004b2a:	0013      	movs	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	3379      	adds	r3, #121	; 0x79
 8004b34:	33ff      	adds	r3, #255	; 0xff
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b56:	187b      	adds	r3, r7, r1
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2207      	movs	r2, #7
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2207      	movs	r2, #7
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d107      	bne.n	8004b7e <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f004 fc0e 	bl	8009398 <USB_EPStartXfer>
 8004b7c:	e006      	b.n	8004b8c <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	0011      	movs	r1, r2
 8004b86:	0018      	movs	r0, r3
 8004b88:	f004 fc06 	bl	8009398 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b006      	add	sp, #24
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	000a      	movs	r2, r1
 8004ba0:	1cfb      	adds	r3, r7, #3
 8004ba2:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ba4:	1cfb      	adds	r3, r7, #3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2207      	movs	r2, #7
 8004baa:	401a      	ands	r2, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	23cc      	movs	r3, #204	; 0xcc
 8004bb0:	0059      	lsls	r1, r3, #1
 8004bb2:	0013      	movs	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	18c3      	adds	r3, r0, r3
 8004bbc:	185b      	adds	r3, r3, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	200b      	movs	r0, #11
 8004bd6:	183b      	adds	r3, r7, r0
 8004bd8:	1c0a      	adds	r2, r1, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2207      	movs	r2, #7
 8004be2:	401a      	ands	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	189b      	adds	r3, r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	3338      	adds	r3, #56	; 0x38
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	18d3      	adds	r3, r2, r3
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2224      	movs	r2, #36	; 0x24
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1c:	183b      	adds	r3, r7, r0
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2207      	movs	r2, #7
 8004c22:	4013      	ands	r3, r2
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2207      	movs	r2, #7
 8004c30:	4013      	ands	r3, r2
 8004c32:	d107      	bne.n	8004c44 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f004 fbab 	bl	8009398 <USB_EPStartXfer>
 8004c42:	e006      	b.n	8004c52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f004 fba3 	bl	8009398 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b006      	add	sp, #24
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	000a      	movs	r2, r1
 8004c66:	1cfb      	adds	r3, r7, #3
 8004c68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c6a:	1cfb      	adds	r3, r7, #3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2207      	movs	r2, #7
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d901      	bls.n	8004c7e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e048      	b.n	8004d10 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c7e:	1cfb      	adds	r3, r7, #3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da10      	bge.n	8004caa <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c88:	1cfb      	adds	r3, r7, #3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	401a      	ands	r2, r3
 8004c90:	0013      	movs	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	3338      	adds	r3, #56	; 0x38
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	18d3      	adds	r3, r2, r3
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	705a      	strb	r2, [r3, #1]
 8004ca8:	e00e      	b.n	8004cc8 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004caa:	1cfb      	adds	r3, r7, #3
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	0013      	movs	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	3379      	adds	r3, #121	; 0x79
 8004cb8:	33ff      	adds	r3, #255	; 0xff
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cce:	1cfb      	adds	r3, r7, #3
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	23af      	movs	r3, #175	; 0xaf
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	5cd3      	ldrb	r3, [r2, r3]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_PCD_EP_SetStall+0x90>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e011      	b.n	8004d10 <HAL_PCD_EP_SetStall+0xb4>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	23af      	movs	r3, #175	; 0xaf
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f005 fc1e 	bl	800a540 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	23af      	movs	r3, #175	; 0xaf
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b004      	add	sp, #16
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	000a      	movs	r2, r1
 8004d22:	1cfb      	adds	r3, r7, #3
 8004d24:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d26:	1cfb      	adds	r3, r7, #3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d901      	bls.n	8004d3a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e04a      	b.n	8004dd0 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d3a:	1cfb      	adds	r3, r7, #3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da10      	bge.n	8004d66 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d44:	1cfb      	adds	r3, r7, #3
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2207      	movs	r2, #7
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	3338      	adds	r3, #56	; 0x38
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	705a      	strb	r2, [r3, #1]
 8004d64:	e010      	b.n	8004d88 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d66:	1cfb      	adds	r3, r7, #3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2207      	movs	r2, #7
 8004d6c:	401a      	ands	r2, r3
 8004d6e:	0013      	movs	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	3379      	adds	r3, #121	; 0x79
 8004d78:	33ff      	adds	r3, #255	; 0xff
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	18d3      	adds	r3, r2, r3
 8004d7e:	3304      	adds	r3, #4
 8004d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8e:	1cfb      	adds	r3, r7, #3
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2207      	movs	r2, #7
 8004d94:	4013      	ands	r3, r2
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	23af      	movs	r3, #175	; 0xaf
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	5cd3      	ldrb	r3, [r2, r3]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_PCD_EP_ClrStall+0x94>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e011      	b.n	8004dd0 <HAL_PCD_EP_ClrStall+0xb8>
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	23af      	movs	r3, #175	; 0xaf
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	2101      	movs	r1, #1
 8004db4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	0011      	movs	r1, r2
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f005 fc00 	bl	800a5c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	23af      	movs	r3, #175	; 0xaf
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	2100      	movs	r1, #0
 8004dcc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b004      	add	sp, #16
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd8:	b5b0      	push	{r4, r5, r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	000a      	movs	r2, r1
 8004de2:	1cfb      	adds	r3, r7, #3
 8004de4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004de6:	1cfb      	adds	r3, r7, #3
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	b25b      	sxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	da0d      	bge.n	8004e0c <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df0:	1cfb      	adds	r3, r7, #3
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2207      	movs	r2, #7
 8004df6:	401a      	ands	r2, r3
 8004df8:	0013      	movs	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	189b      	adds	r3, r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3338      	adds	r3, #56	; 0x38
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	18d3      	adds	r3, r2, r3
 8004e06:	3304      	adds	r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e00d      	b.n	8004e28 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e0c:	1cfb      	adds	r3, r7, #3
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2207      	movs	r2, #7
 8004e12:	401a      	ands	r2, r3
 8004e14:	0013      	movs	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	3379      	adds	r3, #121	; 0x79
 8004e1e:	33ff      	adds	r3, #255	; 0xff
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	3304      	adds	r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	250b      	movs	r5, #11
 8004e2e:	197c      	adds	r4, r7, r5
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	0011      	movs	r1, r2
 8004e34:	0018      	movs	r0, r3
 8004e36:	f005 fc57 	bl	800a6e8 <USB_EPStopXfer>
 8004e3a:	0003      	movs	r3, r0
 8004e3c:	7023      	strb	r3, [r4, #0]

  return ret;
 8004e3e:	197b      	adds	r3, r7, r5
 8004e40:	781b      	ldrb	r3, [r3, #0]
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b004      	add	sp, #16
 8004e48:	bdb0      	pop	{r4, r5, r7, pc}

08004e4a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	000a      	movs	r2, r1
 8004e54:	1cfb      	adds	r3, r7, #3
 8004e56:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e64:	b5b0      	push	{r4, r5, r7, lr}
 8004e66:	b08e      	sub	sp, #56	; 0x38
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e6c:	f000 fb90 	bl	8005590 <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e76:	202a      	movs	r0, #42	; 0x2a
 8004e78:	183b      	adds	r3, r7, r0
 8004e7a:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8004e7c:	183b      	adds	r3, r7, r0
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	2429      	movs	r4, #41	; 0x29
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	210f      	movs	r1, #15
 8004e88:	400a      	ands	r2, r1
 8004e8a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d000      	beq.n	8004e96 <PCD_EP_ISR_Handler+0x32>
 8004e94:	e136      	b.n	8005104 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e96:	183b      	adds	r3, r7, r0
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d143      	bne.n	8004f28 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4acb      	ldr	r2, [pc, #812]	; (80051d4 <PCD_EP_ISR_Handler+0x370>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	2180      	movs	r1, #128	; 0x80
 8004eb4:	0209      	lsls	r1, r1, #8
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	333c      	adds	r3, #60	; 0x3c
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4ac4      	ldr	r2, [pc, #784]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 8004ec8:	4694      	mov	ip, r2
 8004eca:	4463      	add	r3, ip
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	0c1b      	lsrs	r3, r3, #16
 8004ed0:	059b      	lsls	r3, r3, #22
 8004ed2:	0d9a      	lsrs	r2, r3, #22
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	18d2      	adds	r2, r2, r3
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	0018      	movs	r0, r3
 8004eec:	f010 fa86 	bl	80153fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2238      	movs	r2, #56	; 0x38
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d100      	bne.n	8004efe <PCD_EP_ISR_Handler+0x9a>
 8004efc:	e348      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d000      	beq.n	8004f08 <PCD_EP_ISR_Handler+0xa4>
 8004f06:	e343      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2238      	movs	r2, #56	; 0x38
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	4252      	negs	r2, r2
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2238      	movs	r2, #56	; 0x38
 8004f22:	2100      	movs	r1, #0
 8004f24:	5499      	strb	r1, [r3, r2]
 8004f26:	e333      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	337d      	adds	r3, #125	; 0x7d
 8004f2c:	33ff      	adds	r3, #255	; 0xff
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	2126      	movs	r1, #38	; 0x26
 8004f38:	187b      	adds	r3, r7, r1
 8004f3a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	881a      	ldrh	r2, [r3, #0]
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	d02a      	beq.n	8004f9e <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	0019      	movs	r1, r3
 8004f54:	0010      	movs	r0, r2
 8004f56:	f7ff f9e9 	bl	800432c <PCD_GET_EP_RX_CNT>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	22b1      	movs	r2, #177	; 0xb1
 8004f6a:	0092      	lsls	r2, r2, #2
 8004f6c:	1899      	adds	r1, r3, r2
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f005 fce6 	bl	800a948 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a96      	ldr	r2, [pc, #600]	; (80051dc <PCD_EP_ISR_Handler+0x378>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f010 f9ac 	bl	80152f4 <HAL_PCD_SetupStageCallback>
 8004f9c:	e2f8      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8004f9e:	2326      	movs	r3, #38	; 0x26
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db00      	blt.n	8004fac <PCD_EP_ISR_Handler+0x148>
 8004faa:	e2f1      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a8a      	ldr	r2, [pc, #552]	; (80051dc <PCD_EP_ISR_Handler+0x378>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	0019      	movs	r1, r3
 8004fd0:	0010      	movs	r0, r2
 8004fd2:	f7ff f9ab 	bl	800432c <PCD_GET_EP_RX_CNT>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	001a      	movs	r2, r3
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01a      	beq.n	800501c <PCD_EP_ISR_Handler+0x1b8>
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	6959      	ldr	r1, [r3, #20]
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f005 fca2 	bl	800a948 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	18d2      	adds	r2, r2, r3
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2100      	movs	r1, #0
 8005016:	0018      	movs	r0, r3
 8005018:	f010 fa98 	bl	801554c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2126      	movs	r1, #38	; 0x26
 8005024:	187b      	adds	r3, r7, r1
 8005026:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005028:	187b      	adds	r3, r7, r1
 800502a:	881a      	ldrh	r2, [r3, #0]
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	4013      	ands	r3, r2
 8005032:	d000      	beq.n	8005036 <PCD_EP_ISR_Handler+0x1d2>
 8005034:	e2ac      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
 8005036:	187b      	adds	r3, r7, r1
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	23c0      	movs	r3, #192	; 0xc0
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	401a      	ands	r2, r3
 8005040:	23c0      	movs	r3, #192	; 0xc0
 8005042:	019b      	lsls	r3, r3, #6
 8005044:	429a      	cmp	r2, r3
 8005046:	d100      	bne.n	800504a <PCD_EP_ISR_Handler+0x1e6>
 8005048:	e2a2      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b62      	ldr	r3, [pc, #392]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 8005050:	0412      	lsls	r2, r2, #16
 8005052:	0c12      	lsrs	r2, r2, #16
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b3e      	cmp	r3, #62	; 0x3e
 800505c:	d916      	bls.n	800508c <PCD_EP_ISR_Handler+0x228>
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	221f      	movs	r2, #31
 800506c:	4013      	ands	r3, r2
 800506e:	d102      	bne.n	8005076 <PCD_EP_ISR_Handler+0x212>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	3b01      	subs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	4b58      	ldr	r3, [pc, #352]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	069b      	lsls	r3, r3, #26
 800507e:	431a      	orrs	r2, r3
 8005080:	4b55      	ldr	r3, [pc, #340]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	0609      	lsls	r1, r1, #24
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	e024      	b.n	80050d6 <PCD_EP_ISR_Handler+0x272>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10d      	bne.n	80050b0 <PCD_EP_ISR_Handler+0x24c>
 8005094:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	4b4f      	ldr	r3, [pc, #316]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 800509a:	4951      	ldr	r1, [pc, #324]	; (80051e0 <PCD_EP_ISR_Handler+0x37c>)
 800509c:	400a      	ands	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 80050a6:	2180      	movs	r1, #128	; 0x80
 80050a8:	0609      	lsls	r1, r1, #24
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	e012      	b.n	80050d6 <PCD_EP_ISR_Handler+0x272>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2201      	movs	r2, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d002      	beq.n	80050c8 <PCD_EP_ISR_Handler+0x264>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	069a      	lsls	r2, r3, #26
 80050d0:	4b41      	ldr	r3, [pc, #260]	; (80051d8 <PCD_EP_ISR_Handler+0x374>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a41      	ldr	r2, [pc, #260]	; (80051e4 <PCD_EP_ISR_Handler+0x380>)
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	0152      	lsls	r2, r2, #5
 80050e8:	4053      	eors	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	0192      	lsls	r2, r2, #6
 80050f2:	4053      	eors	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	493a      	ldr	r1, [pc, #232]	; (80051e8 <PCD_EP_ISR_Handler+0x384>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e245      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	001a      	movs	r2, r3
 800510a:	2129      	movs	r1, #41	; 0x29
 800510c:	187b      	adds	r3, r7, r1
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	2026      	movs	r0, #38	; 0x26
 8005118:	183b      	adds	r3, r7, r0
 800511a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800511c:	183b      	adds	r3, r7, r0
 800511e:	2200      	movs	r2, #0
 8005120:	5e9b      	ldrsh	r3, [r3, r2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db00      	blt.n	8005128 <PCD_EP_ISR_Handler+0x2c4>
 8005126:	e0e4      	b.n	80052f2 <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	001a      	movs	r2, r3
 800512e:	187b      	adds	r3, r7, r1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	18d3      	adds	r3, r2, r3
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	; (80051dc <PCD_EP_ISR_Handler+0x378>)
 800513a:	4013      	ands	r3, r2
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	001a      	movs	r2, r3
 8005144:	0008      	movs	r0, r1
 8005146:	187b      	adds	r3, r7, r1
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	18d3      	adds	r3, r2, r3
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005156:	183b      	adds	r3, r7, r0
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	0013      	movs	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	189b      	adds	r3, r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	3379      	adds	r3, #121	; 0x79
 8005164:	33ff      	adds	r3, #255	; 0xff
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	3304      	adds	r3, #4
 800516c:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	7a9b      	ldrb	r3, [r3, #10]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11d      	bne.n	80051b2 <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	252c      	movs	r5, #44	; 0x2c
 8005182:	197c      	adds	r4, r7, r5
 8005184:	0019      	movs	r1, r3
 8005186:	0010      	movs	r0, r2
 8005188:	f7ff f8d0 	bl	800432c <PCD_GET_EP_RX_CNT>
 800518c:	0003      	movs	r3, r0
 800518e:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8005190:	002c      	movs	r4, r5
 8005192:	193b      	adds	r3, r7, r4
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d100      	bne.n	800519c <PCD_EP_ISR_Handler+0x338>
 800519a:	e082      	b.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a2:	6959      	ldr	r1, [r3, #20]
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	889a      	ldrh	r2, [r3, #4]
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	f005 fbcc 	bl	800a948 <USB_ReadPMA>
 80051b0:	e077      	b.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	78db      	ldrb	r3, [r3, #3]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d118      	bne.n	80051ec <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80051ba:	232c      	movs	r3, #44	; 0x2c
 80051bc:	18fc      	adds	r4, r7, r3
 80051be:	2326      	movs	r3, #38	; 0x26
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	881a      	ldrh	r2, [r3, #0]
 80051c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f000 f9ef 	bl	80055ac <HAL_PCD_EP_DB_Receive>
 80051ce:	0003      	movs	r3, r0
 80051d0:	8023      	strh	r3, [r4, #0]
 80051d2:	e066      	b.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
 80051d4:	07ff8f0f 	.word	0x07ff8f0f
 80051d8:	40009800 	.word	0x40009800
 80051dc:	07ff0f8f 	.word	0x07ff0f8f
 80051e0:	83ffffff 	.word	0x83ffffff
 80051e4:	07ffbf8f 	.word	0x07ffbf8f
 80051e8:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	001a      	movs	r2, r3
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4adb      	ldr	r2, [pc, #876]	; (800556c <PCD_EP_ISR_Handler+0x708>)
 80051fe:	4013      	ands	r3, r2
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	001a      	movs	r2, r3
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	18d3      	adds	r3, r2, r3
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	49d7      	ldr	r1, [pc, #860]	; (8005570 <PCD_EP_ISR_Handler+0x70c>)
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	001a      	movs	r2, r3
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	01db      	lsls	r3, r3, #7
 800522c:	4013      	ands	r3, r2
 800522e:	d01c      	beq.n	800526a <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	252c      	movs	r5, #44	; 0x2c
 800523c:	197c      	adds	r4, r7, r5
 800523e:	0019      	movs	r1, r3
 8005240:	0010      	movs	r0, r2
 8005242:	f7ff f895 	bl	8004370 <PCD_GET_EP_DBUF0_CNT>
 8005246:	0003      	movs	r3, r0
 8005248:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800524a:	002c      	movs	r4, r5
 800524c:	193b      	adds	r3, r7, r4
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d026      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525a:	6959      	ldr	r1, [r3, #20]
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	88da      	ldrh	r2, [r3, #6]
 8005260:	193b      	adds	r3, r7, r4
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	f005 fb70 	bl	800a948 <USB_ReadPMA>
 8005268:	e01b      	b.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	252c      	movs	r5, #44	; 0x2c
 8005276:	197c      	adds	r4, r7, r5
 8005278:	0019      	movs	r1, r3
 800527a:	0010      	movs	r0, r2
 800527c:	f7ff f89a 	bl	80043b4 <PCD_GET_EP_DBUF1_CNT>
 8005280:	0003      	movs	r3, r0
 8005282:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8005284:	002c      	movs	r4, r5
 8005286:	193b      	adds	r3, r7, r4
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	6959      	ldr	r1, [r3, #20]
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	891a      	ldrh	r2, [r3, #8]
 800529a:	193b      	adds	r3, r7, r4
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	f005 fb53 	bl	800a948 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	212c      	movs	r1, #44	; 0x2c
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	18d2      	adds	r2, r2, r3
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	187b      	adds	r3, r7, r1
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	18d2      	adds	r2, r2, r3
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <PCD_EP_ISR_Handler+0x470>
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d207      	bcs.n	80052e4 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f010 f935 	bl	801554c <HAL_PCD_DataOutStageCallback>
 80052e2:	e006      	b.n	80052f2 <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ea:	0011      	movs	r1, r2
 80052ec:	0018      	movs	r0, r3
 80052ee:	f004 f853 	bl	8009398 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80052f2:	2026      	movs	r0, #38	; 0x26
 80052f4:	183b      	adds	r3, r7, r0
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	4013      	ands	r3, r2
 80052fc:	d100      	bne.n	8005300 <PCD_EP_ISR_Handler+0x49c>
 80052fe:	e147      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8005300:	2129      	movs	r1, #41	; 0x29
 8005302:	187b      	adds	r3, r7, r1
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	0013      	movs	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	189b      	adds	r3, r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	3338      	adds	r3, #56	; 0x38
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	18d3      	adds	r3, r2, r3
 8005314:	3304      	adds	r3, #4
 8005316:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	001a      	movs	r2, r3
 800531e:	187b      	adds	r3, r7, r1
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	18d3      	adds	r3, r2, r3
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a92      	ldr	r2, [pc, #584]	; (8005574 <PCD_EP_ISR_Handler+0x710>)
 800532a:	4013      	ands	r3, r2
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	001a      	movs	r2, r3
 8005334:	187b      	adds	r3, r7, r1
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	0209      	lsls	r1, r1, #8
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	78db      	ldrb	r3, [r3, #3]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d000      	beq.n	8005350 <PCD_EP_ISR_Handler+0x4ec>
 800534e:	e0c3      	b.n	80054d8 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 8005350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	7a9b      	ldrb	r3, [r3, #10]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d100      	bne.n	8005360 <PCD_EP_ISR_Handler+0x4fc>
 800535e:	e0b3      	b.n	80054c8 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005360:	183b      	adds	r3, r7, r0
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	4013      	ands	r3, r2
 8005368:	d057      	beq.n	800541a <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d131      	bne.n	80053d6 <PCD_EP_ISR_Handler+0x572>
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4a7f      	ldr	r2, [pc, #508]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 800537a:	4694      	mov	ip, r2
 800537c:	4463      	add	r3, ip
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	497c      	ldr	r1, [pc, #496]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005388:	468c      	mov	ip, r1
 800538a:	4463      	add	r3, ip
 800538c:	0412      	lsls	r2, r2, #16
 800538e:	0c12      	lsrs	r2, r2, #16
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4a77      	ldr	r2, [pc, #476]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 800539a:	4694      	mov	ip, r2
 800539c:	4463      	add	r3, ip
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4974      	ldr	r1, [pc, #464]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80053a8:	468c      	mov	ip, r1
 80053aa:	4463      	add	r3, ip
 80053ac:	4973      	ldr	r1, [pc, #460]	; (800557c <PCD_EP_ISR_Handler+0x718>)
 80053ae:	400a      	ands	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4a6f      	ldr	r2, [pc, #444]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80053ba:	4694      	mov	ip, r2
 80053bc:	4463      	add	r3, ip
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	496c      	ldr	r1, [pc, #432]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80053c8:	468c      	mov	ip, r1
 80053ca:	4463      	add	r3, ip
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	0609      	lsls	r1, r1, #24
 80053d0:	430a      	orrs	r2, r1
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	e078      	b.n	80054c8 <PCD_EP_ISR_Handler+0x664>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d174      	bne.n	80054c8 <PCD_EP_ISR_Handler+0x664>
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4a64      	ldr	r2, [pc, #400]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80053e6:	4694      	mov	ip, r2
 80053e8:	4463      	add	r3, ip
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4961      	ldr	r1, [pc, #388]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80053f4:	468c      	mov	ip, r1
 80053f6:	4463      	add	r3, ip
 80053f8:	0412      	lsls	r2, r2, #16
 80053fa:	0c12      	lsrs	r2, r2, #16
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4a5c      	ldr	r2, [pc, #368]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005406:	189a      	adds	r2, r3, r2
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	495a      	ldr	r1, [pc, #360]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005410:	468c      	mov	ip, r1
 8005412:	4463      	add	r3, ip
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	e056      	b.n	80054c8 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d131      	bne.n	8005486 <PCD_EP_ISR_Handler+0x622>
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4a53      	ldr	r2, [pc, #332]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 800542a:	4694      	mov	ip, r2
 800542c:	4463      	add	r3, ip
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4950      	ldr	r1, [pc, #320]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005438:	468c      	mov	ip, r1
 800543a:	4463      	add	r3, ip
 800543c:	0412      	lsls	r2, r2, #16
 800543e:	0c12      	lsrs	r2, r2, #16
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4a4b      	ldr	r2, [pc, #300]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 800544a:	4694      	mov	ip, r2
 800544c:	4463      	add	r3, ip
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4948      	ldr	r1, [pc, #288]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005458:	468c      	mov	ip, r1
 800545a:	4463      	add	r3, ip
 800545c:	4947      	ldr	r1, [pc, #284]	; (800557c <PCD_EP_ISR_Handler+0x718>)
 800545e:	400a      	ands	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4a43      	ldr	r2, [pc, #268]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 800546a:	4694      	mov	ip, r2
 800546c:	4463      	add	r3, ip
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4940      	ldr	r1, [pc, #256]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005478:	468c      	mov	ip, r1
 800547a:	4463      	add	r3, ip
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	0609      	lsls	r1, r1, #24
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e020      	b.n	80054c8 <PCD_EP_ISR_Handler+0x664>
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d11c      	bne.n	80054c8 <PCD_EP_ISR_Handler+0x664>
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4a38      	ldr	r2, [pc, #224]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 8005496:	4694      	mov	ip, r2
 8005498:	4463      	add	r3, ip
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4935      	ldr	r1, [pc, #212]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80054a4:	468c      	mov	ip, r1
 80054a6:	4463      	add	r3, ip
 80054a8:	0412      	lsls	r2, r2, #16
 80054aa:	0c12      	lsrs	r2, r2, #16
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4a30      	ldr	r2, [pc, #192]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80054b6:	189a      	adds	r2, r3, r2
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	492e      	ldr	r1, [pc, #184]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80054c0:	468c      	mov	ip, r1
 80054c2:	4463      	add	r3, ip
 80054c4:	6852      	ldr	r2, [r2, #4]
 80054c6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0011      	movs	r1, r2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f00f ff93 	bl	80153fc <HAL_PCD_DataInStageCallback>
 80054d6:	e05b      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80054d8:	2326      	movs	r3, #38	; 0x26
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4013      	ands	r3, r2
 80054e4:	d14c      	bne.n	8005580 <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <PCD_EP_ISR_Handler+0x714>)
 80054ee:	4694      	mov	ip, r2
 80054f0:	4463      	add	r3, ip
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	212e      	movs	r1, #46	; 0x2e
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	0592      	lsls	r2, r2, #22
 80054fe:	0d92      	lsrs	r2, r2, #22
 8005500:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	187b      	adds	r3, r7, r1
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d907      	bls.n	800551e <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	187b      	adds	r3, r7, r1
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	619a      	str	r2, [r3, #24]
 800551c:	e002      	b.n	8005524 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	2200      	movs	r2, #0
 8005522:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	781a      	ldrb	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	0011      	movs	r1, r2
 8005534:	0018      	movs	r0, r3
 8005536:	f00f ff61 	bl	80153fc <HAL_PCD_DataInStageCallback>
 800553a:	e029      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	695a      	ldr	r2, [r3, #20]
 8005540:	212e      	movs	r1, #46	; 0x2e
 8005542:	187b      	adds	r3, r7, r1
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	18d2      	adds	r2, r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	187b      	adds	r3, r7, r1
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	18d2      	adds	r2, r2, r3
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	0011      	movs	r1, r2
 8005562:	0018      	movs	r0, r3
 8005564:	f003 ff18 	bl	8009398 <USB_EPStartXfer>
 8005568:	e012      	b.n	8005590 <PCD_EP_ISR_Handler+0x72c>
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	07ff8f8f 	.word	0x07ff8f8f
 8005570:	000080c0 	.word	0x000080c0
 8005574:	07ff8f0f 	.word	0x07ff8f0f
 8005578:	40009800 	.word	0x40009800
 800557c:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005580:	2326      	movs	r3, #38	; 0x26
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f8fa 	bl	8005784 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	4013      	ands	r3, r2
 800559c:	d000      	beq.n	80055a0 <PCD_EP_ISR_Handler+0x73c>
 800559e:	e467      	b.n	8004e70 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b00e      	add	sp, #56	; 0x38
 80055a8:	bdb0      	pop	{r4, r5, r7, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)

080055ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055ac:	b5b0      	push	{r4, r5, r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	1dbb      	adds	r3, r7, #6
 80055b8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055ba:	1dbb      	adds	r3, r7, #6
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	4013      	ands	r3, r2
 80055c4:	d068      	beq.n	8005698 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	251e      	movs	r5, #30
 80055d2:	197c      	adds	r4, r7, r5
 80055d4:	0019      	movs	r1, r3
 80055d6:	0010      	movs	r0, r2
 80055d8:	f7fe feca 	bl	8004370 <PCD_GET_EP_DBUF0_CNT>
 80055dc:	0003      	movs	r3, r0
 80055de:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	197b      	adds	r3, r7, r5
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d307      	bcc.n	80055fc <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	699a      	ldr	r2, [r3, #24]
 80055f0:	197b      	adds	r3, r7, r5
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	619a      	str	r2, [r3, #24]
 80055fa:	e002      	b.n	8005602 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11a      	bne.n	8005640 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	001a      	movs	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	18d3      	adds	r3, r2, r3
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a56      	ldr	r2, [pc, #344]	; (8005774 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	0192      	lsls	r2, r2, #6
 8005626:	4053      	eors	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	001a      	movs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	494f      	ldr	r1, [pc, #316]	; (8005778 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005640:	1dbb      	adds	r3, r7, #6
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	4013      	ands	r3, r2
 8005648:	d015      	beq.n	8005676 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	001a      	movs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	18d3      	adds	r3, r2, r3
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a48      	ldr	r2, [pc, #288]	; (800577c <HAL_PCD_EP_DB_Receive+0x1d0>)
 800565c:	4013      	ands	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	001a      	movs	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	18d3      	adds	r3, r2, r3
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4943      	ldr	r1, [pc, #268]	; (8005780 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8005676:	241e      	movs	r4, #30
 8005678:	193b      	adds	r3, r7, r4
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d100      	bne.n	8005682 <HAL_PCD_EP_DB_Receive+0xd6>
 8005680:	e071      	b.n	8005766 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6959      	ldr	r1, [r3, #20]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	88da      	ldrh	r2, [r3, #6]
 800568e:	193b      	adds	r3, r7, r4
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	f005 f959 	bl	800a948 <USB_ReadPMA>
 8005696:	e066      	b.n	8005766 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	251e      	movs	r5, #30
 80056a4:	197c      	adds	r4, r7, r5
 80056a6:	0019      	movs	r1, r3
 80056a8:	0010      	movs	r0, r2
 80056aa:	f7fe fe83 	bl	80043b4 <PCD_GET_EP_DBUF1_CNT>
 80056ae:	0003      	movs	r3, r0
 80056b0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	197b      	adds	r3, r7, r5
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d307      	bcc.n	80056ce <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	197b      	adds	r3, r7, r5
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	619a      	str	r2, [r3, #24]
 80056cc:	e002      	b.n	80056d4 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11a      	bne.n	8005712 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	001a      	movs	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	18d3      	adds	r3, r2, r3
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <HAL_PCD_EP_DB_Receive+0x1c8>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2280      	movs	r2, #128	; 0x80
 80056f6:	0192      	lsls	r2, r2, #6
 80056f8:	4053      	eors	r3, r2
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	001a      	movs	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	491a      	ldr	r1, [pc, #104]	; (8005778 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005712:	1dbb      	adds	r3, r7, #6
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	2240      	movs	r2, #64	; 0x40
 8005718:	4013      	ands	r3, r2
 800571a:	d115      	bne.n	8005748 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	001a      	movs	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	18d3      	adds	r3, r2, r3
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a13      	ldr	r2, [pc, #76]	; (800577c <HAL_PCD_EP_DB_Receive+0x1d0>)
 800572e:	4013      	ands	r3, r2
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	001a      	movs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	490f      	ldr	r1, [pc, #60]	; (8005780 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8005748:	241e      	movs	r4, #30
 800574a:	193b      	adds	r3, r7, r4
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	891a      	ldrh	r2, [r3, #8]
 800575e:	193b      	adds	r3, r7, r4
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	f005 f8f1 	bl	800a948 <USB_ReadPMA>
    }
  }

  return count;
 8005766:	231e      	movs	r3, #30
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	881b      	ldrh	r3, [r3, #0]
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b00a      	add	sp, #40	; 0x28
 8005772:	bdb0      	pop	{r4, r5, r7, pc}
 8005774:	07ffbf8f 	.word	0x07ffbf8f
 8005778:	00008080 	.word	0x00008080
 800577c:	07ff8f8f 	.word	0x07ff8f8f
 8005780:	000080c0 	.word	0x000080c0

08005784 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005784:	b5b0      	push	{r4, r5, r7, lr}
 8005786:	b08e      	sub	sp, #56	; 0x38
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	1dbb      	adds	r3, r7, #6
 8005790:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005792:	1dbb      	adds	r3, r7, #6
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	4013      	ands	r3, r2
 800579a:	d100      	bne.n	800579e <HAL_PCD_EP_DB_Transmit+0x1a>
 800579c:	e1fc      	b.n	8005b98 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2526      	movs	r5, #38	; 0x26
 80057aa:	197c      	adds	r4, r7, r5
 80057ac:	0019      	movs	r1, r3
 80057ae:	0010      	movs	r0, r2
 80057b0:	f7fe fdde 	bl	8004370 <PCD_GET_EP_DBUF0_CNT>
 80057b4:	0003      	movs	r3, r0
 80057b6:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	699a      	ldr	r2, [r3, #24]
 80057bc:	197b      	adds	r3, r7, r5
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d907      	bls.n	80057d4 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	197b      	adds	r3, r7, r5
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	619a      	str	r2, [r3, #24]
 80057d2:	e002      	b.n	80057da <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d000      	beq.n	80057e4 <HAL_PCD_EP_DB_Transmit+0x60>
 80057e2:	e0d2      	b.n	800598a <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d131      	bne.n	8005850 <HAL_PCD_EP_DB_Transmit+0xcc>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4ae5      	ldr	r2, [pc, #916]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80057f4:	4694      	mov	ip, r2
 80057f6:	4463      	add	r3, ip
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	49e1      	ldr	r1, [pc, #900]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005802:	468c      	mov	ip, r1
 8005804:	4463      	add	r3, ip
 8005806:	0412      	lsls	r2, r2, #16
 8005808:	0c12      	lsrs	r2, r2, #16
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4add      	ldr	r2, [pc, #884]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005814:	4694      	mov	ip, r2
 8005816:	4463      	add	r3, ip
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	49d9      	ldr	r1, [pc, #868]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005822:	468c      	mov	ip, r1
 8005824:	4463      	add	r3, ip
 8005826:	49d9      	ldr	r1, [pc, #868]	; (8005b8c <HAL_PCD_EP_DB_Transmit+0x408>)
 8005828:	400a      	ands	r2, r1
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4ad5      	ldr	r2, [pc, #852]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005834:	4694      	mov	ip, r2
 8005836:	4463      	add	r3, ip
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	49d1      	ldr	r1, [pc, #836]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005842:	468c      	mov	ip, r1
 8005844:	4463      	add	r3, ip
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	0609      	lsls	r1, r1, #24
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e020      	b.n	8005892 <HAL_PCD_EP_DB_Transmit+0x10e>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d11c      	bne.n	8005892 <HAL_PCD_EP_DB_Transmit+0x10e>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4aca      	ldr	r2, [pc, #808]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005860:	4694      	mov	ip, r2
 8005862:	4463      	add	r3, ip
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	49c6      	ldr	r1, [pc, #792]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 800586e:	468c      	mov	ip, r1
 8005870:	4463      	add	r3, ip
 8005872:	0412      	lsls	r2, r2, #16
 8005874:	0c12      	lsrs	r2, r2, #16
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4ac2      	ldr	r2, [pc, #776]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005880:	189a      	adds	r2, r3, r2
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	49bf      	ldr	r1, [pc, #764]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 800588a:	468c      	mov	ip, r1
 800588c:	4463      	add	r3, ip
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d131      	bne.n	80058fe <HAL_PCD_EP_DB_Transmit+0x17a>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4ab9      	ldr	r2, [pc, #740]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058a2:	4694      	mov	ip, r2
 80058a4:	4463      	add	r3, ip
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	49b6      	ldr	r1, [pc, #728]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058b0:	468c      	mov	ip, r1
 80058b2:	4463      	add	r3, ip
 80058b4:	0412      	lsls	r2, r2, #16
 80058b6:	0c12      	lsrs	r2, r2, #16
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4ab1      	ldr	r2, [pc, #708]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058c2:	4694      	mov	ip, r2
 80058c4:	4463      	add	r3, ip
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	49ae      	ldr	r1, [pc, #696]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058d0:	468c      	mov	ip, r1
 80058d2:	4463      	add	r3, ip
 80058d4:	49ad      	ldr	r1, [pc, #692]	; (8005b8c <HAL_PCD_EP_DB_Transmit+0x408>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4aa9      	ldr	r2, [pc, #676]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058e2:	4694      	mov	ip, r2
 80058e4:	4463      	add	r3, ip
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	49a6      	ldr	r1, [pc, #664]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 80058f0:	468c      	mov	ip, r1
 80058f2:	4463      	add	r3, ip
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	0609      	lsls	r1, r1, #24
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	e020      	b.n	8005940 <HAL_PCD_EP_DB_Transmit+0x1bc>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d11c      	bne.n	8005940 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4a9e      	ldr	r2, [pc, #632]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 800590e:	4694      	mov	ip, r2
 8005910:	4463      	add	r3, ip
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	499b      	ldr	r1, [pc, #620]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 800591c:	468c      	mov	ip, r1
 800591e:	4463      	add	r3, ip
 8005920:	0412      	lsls	r2, r2, #16
 8005922:	0c12      	lsrs	r2, r2, #16
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4a96      	ldr	r2, [pc, #600]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 800592e:	189a      	adds	r2, r3, r2
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4994      	ldr	r1, [pc, #592]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005938:	468c      	mov	ip, r1
 800593a:	4463      	add	r3, ip
 800593c:	6852      	ldr	r2, [r2, #4]
 800593e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0011      	movs	r1, r2
 8005948:	0018      	movs	r0, r3
 800594a:	f00f fd57 	bl	80153fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800594e:	1dbb      	adds	r3, r7, #6
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4013      	ands	r3, r2
 8005958:	d100      	bne.n	800595c <HAL_PCD_EP_DB_Transmit+0x1d8>
 800595a:	e31a      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	001a      	movs	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	18d3      	adds	r3, r2, r3
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a88      	ldr	r2, [pc, #544]	; (8005b90 <HAL_PCD_EP_DB_Transmit+0x40c>)
 800596e:	4013      	ands	r3, r2
 8005970:	633b      	str	r3, [r7, #48]	; 0x30
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	001a      	movs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	18d3      	adds	r3, r2, r3
 8005980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005982:	4984      	ldr	r1, [pc, #528]	; (8005b94 <HAL_PCD_EP_DB_Transmit+0x410>)
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e303      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	881a      	ldrh	r2, [r3, #0]
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4013      	ands	r3, r2
 8005994:	d015      	beq.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	001a      	movs	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	18d3      	adds	r3, r2, r3
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a7a      	ldr	r2, [pc, #488]	; (8005b90 <HAL_PCD_EP_DB_Transmit+0x40c>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	001a      	movs	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	18d3      	adds	r3, r2, r3
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	4975      	ldr	r1, [pc, #468]	; (8005b94 <HAL_PCD_EP_DB_Transmit+0x410>)
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2224      	movs	r2, #36	; 0x24
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d000      	beq.n	80059ce <HAL_PCD_EP_DB_Transmit+0x24a>
 80059cc:	e2e1      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	2126      	movs	r1, #38	; 0x26
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	18d2      	adds	r2, r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	18d2      	adds	r2, r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d309      	bcc.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	621a      	str	r2, [r3, #32]
 8005a0a:	e016      	b.n	8005a3a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 8005a14:	2326      	movs	r3, #38	; 0x26
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	2100      	movs	r1, #0
 8005a22:	5499      	strb	r1, [r3, r2]
 8005a24:	e009      	b.n	8005a3a <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d172      	bne.n	8005b28 <HAL_PCD_EP_DB_Transmit+0x3a4>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4a4f      	ldr	r2, [pc, #316]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a4a:	4694      	mov	ip, r2
 8005a4c:	4463      	add	r3, ip
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	494c      	ldr	r1, [pc, #304]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a58:	468c      	mov	ip, r1
 8005a5a:	4463      	add	r3, ip
 8005a5c:	0412      	lsls	r2, r2, #16
 8005a5e:	0c12      	lsrs	r2, r2, #16
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b3e      	cmp	r3, #62	; 0x3e
 8005a66:	d91e      	bls.n	8005aa6 <HAL_PCD_EP_DB_Transmit+0x322>
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	221f      	movs	r2, #31
 8005a72:	4013      	ands	r3, r2
 8005a74:	d102      	bne.n	8005a7c <HAL_PCD_EP_DB_Transmit+0x2f8>
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a84:	4694      	mov	ip, r2
 8005a86:	4463      	add	r3, ip
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	069b      	lsls	r3, r3, #26
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	493c      	ldr	r1, [pc, #240]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005a98:	468c      	mov	ip, r1
 8005a9a:	4463      	add	r3, ip
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	0609      	lsls	r1, r1, #24
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e065      	b.n	8005b72 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d121      	bne.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x36c>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4a35      	ldr	r2, [pc, #212]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005ab4:	4694      	mov	ip, r2
 8005ab6:	4463      	add	r3, ip
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4931      	ldr	r1, [pc, #196]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005ac2:	468c      	mov	ip, r1
 8005ac4:	4463      	add	r3, ip
 8005ac6:	4931      	ldr	r1, [pc, #196]	; (8005b8c <HAL_PCD_EP_DB_Transmit+0x408>)
 8005ac8:	400a      	ands	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005ad4:	4694      	mov	ip, r2
 8005ad6:	4463      	add	r3, ip
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4929      	ldr	r1, [pc, #164]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005ae2:	468c      	mov	ip, r1
 8005ae4:	4463      	add	r3, ip
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	0609      	lsls	r1, r1, #24
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e040      	b.n	8005b72 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	2201      	movs	r2, #1
 8005afa:	4013      	ands	r3, r2
 8005afc:	d002      	beq.n	8005b04 <HAL_PCD_EP_DB_Transmit+0x380>
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	3301      	adds	r3, #1
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b0c:	4694      	mov	ip, r2
 8005b0e:	4463      	add	r3, ip
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	069a      	lsls	r2, r3, #26
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	481a      	ldr	r0, [pc, #104]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b1e:	4684      	mov	ip, r0
 8005b20:	4463      	add	r3, ip
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e024      	b.n	8005b72 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d120      	bne.n	8005b72 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4a14      	ldr	r2, [pc, #80]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b38:	4694      	mov	ip, r2
 8005b3a:	4463      	add	r3, ip
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4910      	ldr	r1, [pc, #64]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b46:	468c      	mov	ip, r1
 8005b48:	4463      	add	r3, ip
 8005b4a:	0412      	lsls	r2, r2, #16
 8005b4c:	0c12      	lsrs	r2, r2, #16
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b58:	4694      	mov	ip, r2
 8005b5a:	4463      	add	r3, ip
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	041a      	lsls	r2, r3, #16
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4807      	ldr	r0, [pc, #28]	; (8005b88 <HAL_PCD_EP_DB_Transmit+0x404>)
 8005b6a:	4684      	mov	ip, r0
 8005b6c:	4463      	add	r3, ip
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6959      	ldr	r1, [r3, #20]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	88da      	ldrh	r2, [r3, #6]
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f004 fe6b 	bl	800a85c <USB_WritePMA>
 8005b86:	e204      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
 8005b88:	40009800 	.word	0x40009800
 8005b8c:	83ffffff 	.word	0x83ffffff
 8005b90:	07ff8f8f 	.word	0x07ff8f8f
 8005b94:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2526      	movs	r5, #38	; 0x26
 8005ba4:	197c      	adds	r4, r7, r5
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	0010      	movs	r0, r2
 8005baa:	f7fe fc03 	bl	80043b4 <PCD_GET_EP_DBUF1_CNT>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	197b      	adds	r3, r7, r5
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d307      	bcc.n	8005bce <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	197b      	adds	r3, r7, r5
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	619a      	str	r2, [r3, #24]
 8005bcc:	e002      	b.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d000      	beq.n	8005bde <HAL_PCD_EP_DB_Transmit+0x45a>
 8005bdc:	e0d2      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d131      	bne.n	8005c4a <HAL_PCD_EP_DB_Transmit+0x4c6>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4acd      	ldr	r2, [pc, #820]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005bee:	4694      	mov	ip, r2
 8005bf0:	4463      	add	r3, ip
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	49ca      	ldr	r1, [pc, #808]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005bfc:	468c      	mov	ip, r1
 8005bfe:	4463      	add	r3, ip
 8005c00:	0412      	lsls	r2, r2, #16
 8005c02:	0c12      	lsrs	r2, r2, #16
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4ac5      	ldr	r2, [pc, #788]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c0e:	4694      	mov	ip, r2
 8005c10:	4463      	add	r3, ip
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	49c2      	ldr	r1, [pc, #776]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c1c:	468c      	mov	ip, r1
 8005c1e:	4463      	add	r3, ip
 8005c20:	49c1      	ldr	r1, [pc, #772]	; (8005f28 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8005c22:	400a      	ands	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4abd      	ldr	r2, [pc, #756]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c2e:	4694      	mov	ip, r2
 8005c30:	4463      	add	r3, ip
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	49ba      	ldr	r1, [pc, #744]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c3c:	468c      	mov	ip, r1
 8005c3e:	4463      	add	r3, ip
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	0609      	lsls	r1, r1, #24
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e020      	b.n	8005c8c <HAL_PCD_EP_DB_Transmit+0x508>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d11c      	bne.n	8005c8c <HAL_PCD_EP_DB_Transmit+0x508>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4ab2      	ldr	r2, [pc, #712]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c5a:	4694      	mov	ip, r2
 8005c5c:	4463      	add	r3, ip
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	49af      	ldr	r1, [pc, #700]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c68:	468c      	mov	ip, r1
 8005c6a:	4463      	add	r3, ip
 8005c6c:	0412      	lsls	r2, r2, #16
 8005c6e:	0c12      	lsrs	r2, r2, #16
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4aaa      	ldr	r2, [pc, #680]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c7a:	189a      	adds	r2, r3, r2
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	49a8      	ldr	r1, [pc, #672]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c84:	468c      	mov	ip, r1
 8005c86:	4463      	add	r3, ip
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d131      	bne.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x574>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4aa2      	ldr	r2, [pc, #648]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	499e      	ldr	r1, [pc, #632]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005caa:	468c      	mov	ip, r1
 8005cac:	4463      	add	r3, ip
 8005cae:	0412      	lsls	r2, r2, #16
 8005cb0:	0c12      	lsrs	r2, r2, #16
 8005cb2:	605a      	str	r2, [r3, #4]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4a9a      	ldr	r2, [pc, #616]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005cbc:	4694      	mov	ip, r2
 8005cbe:	4463      	add	r3, ip
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4996      	ldr	r1, [pc, #600]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005cca:	468c      	mov	ip, r1
 8005ccc:	4463      	add	r3, ip
 8005cce:	4996      	ldr	r1, [pc, #600]	; (8005f28 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4a92      	ldr	r2, [pc, #584]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005cdc:	4694      	mov	ip, r2
 8005cde:	4463      	add	r3, ip
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	498e      	ldr	r1, [pc, #568]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005cea:	468c      	mov	ip, r1
 8005cec:	4463      	add	r3, ip
 8005cee:	2180      	movs	r1, #128	; 0x80
 8005cf0:	0609      	lsls	r1, r1, #24
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e020      	b.n	8005d3a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d11c      	bne.n	8005d3a <HAL_PCD_EP_DB_Transmit+0x5b6>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4a87      	ldr	r2, [pc, #540]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d08:	4694      	mov	ip, r2
 8005d0a:	4463      	add	r3, ip
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4983      	ldr	r1, [pc, #524]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d16:	468c      	mov	ip, r1
 8005d18:	4463      	add	r3, ip
 8005d1a:	0412      	lsls	r2, r2, #16
 8005d1c:	0c12      	lsrs	r2, r2, #16
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4a7f      	ldr	r2, [pc, #508]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d28:	189a      	adds	r2, r3, r2
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	497c      	ldr	r1, [pc, #496]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005d32:	468c      	mov	ip, r1
 8005d34:	4463      	add	r3, ip
 8005d36:	6852      	ldr	r2, [r2, #4]
 8005d38:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781a      	ldrb	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0011      	movs	r1, r2
 8005d42:	0018      	movs	r0, r3
 8005d44:	f00f fb5a 	bl	80153fc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d48:	1dbb      	adds	r3, r7, #6
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	01db      	lsls	r3, r3, #7
 8005d50:	4013      	ands	r3, r2
 8005d52:	d000      	beq.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x5d2>
 8005d54:	e11d      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	18d3      	adds	r3, r2, r3
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a71      	ldr	r2, [pc, #452]	; (8005f2c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	001a      	movs	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	496c      	ldr	r1, [pc, #432]	; (8005f30 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e106      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	881a      	ldrh	r2, [r3, #0]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	01db      	lsls	r3, r3, #7
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d115      	bne.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	001a      	movs	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	18d3      	adds	r3, r2, r3
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a62      	ldr	r2, [pc, #392]	; (8005f2c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	001a      	movs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	18d3      	adds	r3, r2, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	495e      	ldr	r1, [pc, #376]	; (8005f30 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005db8:	430a      	orrs	r2, r1
 8005dba:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	5c9b      	ldrb	r3, [r3, r2]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d000      	beq.n	8005dc8 <HAL_PCD_EP_DB_Transmit+0x644>
 8005dc6:	e0e4      	b.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	2126      	movs	r1, #38	; 0x26
 8005dce:	187b      	adds	r3, r7, r1
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	18d2      	adds	r2, r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	187b      	adds	r3, r7, r1
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	18d2      	adds	r2, r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d309      	bcc.n	8005e06 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	621a      	str	r2, [r3, #32]
 8005e04:	e016      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 8005e0e:	2326      	movs	r3, #38	; 0x26
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2224      	movs	r2, #36	; 0x24
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]
 8005e1e:	e009      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	2100      	movs	r1, #0
 8005e32:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d000      	beq.n	8005e3e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005e3c:	e07a      	b.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x7b0>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4a37      	ldr	r2, [pc, #220]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e46:	4694      	mov	ip, r2
 8005e48:	4463      	add	r3, ip
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4934      	ldr	r1, [pc, #208]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e54:	468c      	mov	ip, r1
 8005e56:	4463      	add	r3, ip
 8005e58:	0412      	lsls	r2, r2, #16
 8005e5a:	0c12      	lsrs	r2, r2, #16
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2b3e      	cmp	r3, #62	; 0x3e
 8005e62:	d91e      	bls.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	221f      	movs	r2, #31
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d102      	bne.n	8005e78 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4a29      	ldr	r2, [pc, #164]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e80:	4694      	mov	ip, r2
 8005e82:	4463      	add	r3, ip
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	069b      	lsls	r3, r3, #26
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4924      	ldr	r1, [pc, #144]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005e94:	468c      	mov	ip, r1
 8005e96:	4463      	add	r3, ip
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	0609      	lsls	r1, r1, #24
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
 8005ea0:	e06d      	b.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x7fa>
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d121      	bne.n	8005eec <HAL_PCD_EP_DB_Transmit+0x768>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005eb0:	4694      	mov	ip, r2
 8005eb2:	4463      	add	r3, ip
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4919      	ldr	r1, [pc, #100]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005ebe:	468c      	mov	ip, r1
 8005ec0:	4463      	add	r3, ip
 8005ec2:	4919      	ldr	r1, [pc, #100]	; (8005f28 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8005ec4:	400a      	ands	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005ed0:	4694      	mov	ip, r2
 8005ed2:	4463      	add	r3, ip
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4911      	ldr	r1, [pc, #68]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005ede:	468c      	mov	ip, r1
 8005ee0:	4463      	add	r3, ip
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	0609      	lsls	r1, r1, #24
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	e048      	b.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x7fa>
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d002      	beq.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005f08:	4694      	mov	ip, r2
 8005f0a:	4463      	add	r3, ip
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	069a      	lsls	r2, r3, #26
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4802      	ldr	r0, [pc, #8]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8005f1a:	4684      	mov	ip, r0
 8005f1c:	4463      	add	r3, ip
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	e02c      	b.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x7fa>
 8005f24:	40009800 	.word	0x40009800
 8005f28:	83ffffff 	.word	0x83ffffff
 8005f2c:	07ff8f8f 	.word	0x07ff8f8f
 8005f30:	0000c080 	.word	0x0000c080
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d120      	bne.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x7fa>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <HAL_PCD_EP_DB_Transmit+0x854>)
 8005f44:	4694      	mov	ip, r2
 8005f46:	4463      	add	r3, ip
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4921      	ldr	r1, [pc, #132]	; (8005fd8 <HAL_PCD_EP_DB_Transmit+0x854>)
 8005f52:	468c      	mov	ip, r1
 8005f54:	4463      	add	r3, ip
 8005f56:	0412      	lsls	r2, r2, #16
 8005f58:	0c12      	lsrs	r2, r2, #16
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_PCD_EP_DB_Transmit+0x854>)
 8005f64:	4694      	mov	ip, r2
 8005f66:	4463      	add	r3, ip
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	041a      	lsls	r2, r3, #16
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4818      	ldr	r0, [pc, #96]	; (8005fd8 <HAL_PCD_EP_DB_Transmit+0x854>)
 8005f76:	4684      	mov	ip, r0
 8005f78:	4463      	add	r3, ip
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6959      	ldr	r1, [r3, #20]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	891a      	ldrh	r2, [r3, #8]
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f004 fc65 	bl	800a85c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	001a      	movs	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	18d3      	adds	r3, r2, r3
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a0e      	ldr	r2, [pc, #56]	; (8005fdc <HAL_PCD_EP_DB_Transmit+0x858>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	2210      	movs	r2, #16
 8005fac:	4053      	eors	r3, r2
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	4053      	eors	r3, r2
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc8:	4905      	ldr	r1, [pc, #20]	; (8005fe0 <HAL_PCD_EP_DB_Transmit+0x85c>)
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b00e      	add	sp, #56	; 0x38
 8005fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd8:	40009800 	.word	0x40009800
 8005fdc:	07ff8fbf 	.word	0x07ff8fbf
 8005fe0:	00008080 	.word	0x00008080

08005fe4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	0008      	movs	r0, r1
 8005fee:	0011      	movs	r1, r2
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	240a      	movs	r4, #10
 8005ff4:	193b      	adds	r3, r7, r4
 8005ff6:	1c02      	adds	r2, r0, #0
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	1c0a      	adds	r2, r1, #0
 8006000:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006002:	0021      	movs	r1, r4
 8006004:	187b      	adds	r3, r7, r1
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	4013      	ands	r3, r2
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006012:	187b      	adds	r3, r7, r1
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	2207      	movs	r2, #7
 8006018:	401a      	ands	r2, r3
 800601a:	0013      	movs	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	189b      	adds	r3, r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	3338      	adds	r3, #56	; 0x38
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	18d3      	adds	r3, r2, r3
 8006028:	3304      	adds	r3, #4
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e00c      	b.n	8006048 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800602e:	230a      	movs	r3, #10
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	881a      	ldrh	r2, [r3, #0]
 8006034:	0013      	movs	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	189b      	adds	r3, r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	3379      	adds	r3, #121	; 0x79
 800603e:	33ff      	adds	r3, #255	; 0xff
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	18d3      	adds	r3, r2, r3
 8006044:	3304      	adds	r3, #4
 8006046:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006048:	2308      	movs	r3, #8
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2200      	movs	r2, #0
 8006056:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	b29a      	uxth	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	809a      	strh	r2, [r3, #4]
 8006060:	e00b      	b.n	800607a <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2201      	movs	r2, #1
 8006066:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	b29a      	uxth	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b29a      	uxth	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b007      	add	sp, #28
 8006082:	bd90      	pop	{r4, r7, pc}

08006084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	23bf      	movs	r3, #191	; 0xbf
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	2101      	movs	r1, #1
 800609a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	23bd      	movs	r3, #189	; 0xbd
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	2100      	movs	r1, #0
 80060a4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	2201      	movs	r2, #1
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	2202      	movs	r2, #2
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b004      	add	sp, #16
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	000a      	movs	r2, r1
 80060d2:	1cfb      	adds	r3, r7, #3
 80060d4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	b002      	add	sp, #8
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80060e4:	4b04      	ldr	r3, [pc, #16]	; (80060f8 <HAL_PWREx_EnableVddUSB+0x18>)
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <HAL_PWREx_EnableVddUSB+0x18>)
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	00c9      	lsls	r1, r1, #3
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40007000 	.word	0x40007000

080060fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800610a:	4013      	ands	r3, r2
 800610c:	0019      	movs	r1, r3
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	430a      	orrs	r2, r1
 8006114:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	2380      	movs	r3, #128	; 0x80
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	429a      	cmp	r2, r3
 800611e:	d11f      	bne.n	8006160 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	0013      	movs	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	189b      	adds	r3, r3, r2
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4912      	ldr	r1, [pc, #72]	; (8006178 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800612e:	0018      	movs	r0, r3
 8006130:	f7fc fc1e 	bl	8002970 <__udivsi3>
 8006134:	0003      	movs	r3, r0
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800613a:	e008      	b.n	800614e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3b01      	subs	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e001      	b.n	800614e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e009      	b.n	8006162 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	401a      	ands	r2, r3
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	429a      	cmp	r2, r3
 800615e:	d0ed      	beq.n	800613c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b004      	add	sp, #16
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	40007000 	.word	0x40007000
 8006170:	fffff9ff 	.word	0xfffff9ff
 8006174:	20000004 	.word	0x20000004
 8006178:	000f4240 	.word	0x000f4240

0800617c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	23e0      	movs	r3, #224	; 0xe0
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	4013      	ands	r3, r2
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40021000 	.word	0x40021000

08006194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f000 fb50 	bl	8006848 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	d100      	bne.n	80061b4 <HAL_RCC_OscConfig+0x20>
 80061b2:	e07c      	b.n	80062ae <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b4:	4bc3      	ldr	r3, [pc, #780]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2238      	movs	r2, #56	; 0x38
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061be:	4bc1      	ldr	r3, [pc, #772]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2203      	movs	r2, #3
 80061c4:	4013      	ands	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	d102      	bne.n	80061d4 <HAL_RCC_OscConfig+0x40>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d002      	beq.n	80061da <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d10b      	bne.n	80061f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061da:	4bba      	ldr	r3, [pc, #744]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	4013      	ands	r3, r2
 80061e4:	d062      	beq.n	80062ac <HAL_RCC_OscConfig+0x118>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d15e      	bne.n	80062ac <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e32a      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	025b      	lsls	r3, r3, #9
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d107      	bne.n	800620e <HAL_RCC_OscConfig+0x7a>
 80061fe:	4bb1      	ldr	r3, [pc, #708]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4bb0      	ldr	r3, [pc, #704]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	0249      	lsls	r1, r1, #9
 8006208:	430a      	orrs	r2, r1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e020      	b.n	8006250 <HAL_RCC_OscConfig+0xbc>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	23a0      	movs	r3, #160	; 0xa0
 8006214:	02db      	lsls	r3, r3, #11
 8006216:	429a      	cmp	r2, r3
 8006218:	d10e      	bne.n	8006238 <HAL_RCC_OscConfig+0xa4>
 800621a:	4baa      	ldr	r3, [pc, #680]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4ba9      	ldr	r3, [pc, #676]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	02c9      	lsls	r1, r1, #11
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	4ba6      	ldr	r3, [pc, #664]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4ba5      	ldr	r3, [pc, #660]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800622e:	2180      	movs	r1, #128	; 0x80
 8006230:	0249      	lsls	r1, r1, #9
 8006232:	430a      	orrs	r2, r1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0xbc>
 8006238:	4ba2      	ldr	r3, [pc, #648]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4ba1      	ldr	r3, [pc, #644]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800623e:	49a2      	ldr	r1, [pc, #648]	; (80064c8 <HAL_RCC_OscConfig+0x334>)
 8006240:	400a      	ands	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	4b9f      	ldr	r3, [pc, #636]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4b9e      	ldr	r3, [pc, #632]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800624a:	49a0      	ldr	r1, [pc, #640]	; (80064cc <HAL_RCC_OscConfig+0x338>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d014      	beq.n	8006282 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fd fd96 	bl	8003d88 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006262:	f7fd fd91 	bl	8003d88 <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	; 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e2e9      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006274:	4b93      	ldr	r3, [pc, #588]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	4013      	ands	r3, r2
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0xce>
 8006280:	e015      	b.n	80062ae <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fd fd81 	bl	8003d88 <HAL_GetTick>
 8006286:	0003      	movs	r3, r0
 8006288:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800628c:	f7fd fd7c 	bl	8003d88 <HAL_GetTick>
 8006290:	0002      	movs	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e2d4      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800629e:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	4013      	ands	r3, r2
 80062a8:	d1f0      	bne.n	800628c <HAL_RCC_OscConfig+0xf8>
 80062aa:	e000      	b.n	80062ae <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2202      	movs	r2, #2
 80062b4:	4013      	ands	r3, r2
 80062b6:	d100      	bne.n	80062ba <HAL_RCC_OscConfig+0x126>
 80062b8:	e099      	b.n	80063ee <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ba:	4b82      	ldr	r3, [pc, #520]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2238      	movs	r2, #56	; 0x38
 80062c0:	4013      	ands	r3, r2
 80062c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c4:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2203      	movs	r2, #3
 80062ca:	4013      	ands	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d102      	bne.n	80062da <HAL_RCC_OscConfig+0x146>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d002      	beq.n	80062e0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d135      	bne.n	800634c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e0:	4b78      	ldr	r3, [pc, #480]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	4013      	ands	r3, r2
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_OscConfig+0x164>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e2a7      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f8:	4b72      	ldr	r3, [pc, #456]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a74      	ldr	r2, [pc, #464]	; (80064d0 <HAL_RCC_OscConfig+0x33c>)
 80062fe:	4013      	ands	r3, r2
 8006300:	0019      	movs	r1, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	021a      	lsls	r2, r3, #8
 8006308:	4b6e      	ldr	r3, [pc, #440]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d112      	bne.n	800633a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006314:	4b6b      	ldr	r3, [pc, #428]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6e      	ldr	r2, [pc, #440]	; (80064d4 <HAL_RCC_OscConfig+0x340>)
 800631a:	4013      	ands	r3, r2
 800631c:	0019      	movs	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	4b68      	ldr	r3, [pc, #416]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	0adb      	lsrs	r3, r3, #11
 800632e:	2207      	movs	r2, #7
 8006330:	4013      	ands	r3, r2
 8006332:	4a69      	ldr	r2, [pc, #420]	; (80064d8 <HAL_RCC_OscConfig+0x344>)
 8006334:	40da      	lsrs	r2, r3
 8006336:	4b69      	ldr	r3, [pc, #420]	; (80064dc <HAL_RCC_OscConfig+0x348>)
 8006338:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800633a:	4b69      	ldr	r3, [pc, #420]	; (80064e0 <HAL_RCC_OscConfig+0x34c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	0018      	movs	r0, r3
 8006340:	f7fd fbd2 	bl	8003ae8 <HAL_InitTick>
 8006344:	1e03      	subs	r3, r0, #0
 8006346:	d051      	beq.n	80063ec <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e27d      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d030      	beq.n	80063b6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006354:	4b5b      	ldr	r3, [pc, #364]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5e      	ldr	r2, [pc, #376]	; (80064d4 <HAL_RCC_OscConfig+0x340>)
 800635a:	4013      	ands	r3, r2
 800635c:	0019      	movs	r1, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	4b58      	ldr	r3, [pc, #352]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006368:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b55      	ldr	r3, [pc, #340]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	0049      	lsls	r1, r1, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fd fd07 	bl	8003d88 <HAL_GetTick>
 800637a:	0003      	movs	r3, r0
 800637c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006380:	f7fd fd02 	bl	8003d88 <HAL_GetTick>
 8006384:	0002      	movs	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e25a      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006392:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4013      	ands	r3, r2
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	4b49      	ldr	r3, [pc, #292]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4a4b      	ldr	r2, [pc, #300]	; (80064d0 <HAL_RCC_OscConfig+0x33c>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	0019      	movs	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	021a      	lsls	r2, r3, #8
 80063ae:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
 80063b4:	e01b      	b.n	80063ee <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80063b6:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063bc:	4949      	ldr	r1, [pc, #292]	; (80064e4 <HAL_RCC_OscConfig+0x350>)
 80063be:	400a      	ands	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fd fce1 	bl	8003d88 <HAL_GetTick>
 80063c6:	0003      	movs	r3, r0
 80063c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fd fcdc 	bl	8003d88 <HAL_GetTick>
 80063d0:	0002      	movs	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e234      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4013      	ands	r3, r2
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x238>
 80063ea:	e000      	b.n	80063ee <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2208      	movs	r2, #8
 80063f4:	4013      	ands	r3, r2
 80063f6:	d047      	beq.n	8006488 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2238      	movs	r2, #56	; 0x38
 80063fe:	4013      	ands	r3, r2
 8006400:	2b18      	cmp	r3, #24
 8006402:	d10a      	bne.n	800641a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006404:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	2202      	movs	r2, #2
 800640a:	4013      	ands	r3, r2
 800640c:	d03c      	beq.n	8006488 <HAL_RCC_OscConfig+0x2f4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d138      	bne.n	8006488 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e216      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006422:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006428:	2101      	movs	r1, #1
 800642a:	430a      	orrs	r2, r1
 800642c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fd fcab 	bl	8003d88 <HAL_GetTick>
 8006432:	0003      	movs	r3, r0
 8006434:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006438:	f7fd fca6 	bl	8003d88 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e1fe      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	2202      	movs	r2, #2
 8006450:	4013      	ands	r3, r2
 8006452:	d0f1      	beq.n	8006438 <HAL_RCC_OscConfig+0x2a4>
 8006454:	e018      	b.n	8006488 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006456:	4b1b      	ldr	r3, [pc, #108]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006458:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800645a:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800645c:	2101      	movs	r1, #1
 800645e:	438a      	bics	r2, r1
 8006460:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006462:	f7fd fc91 	bl	8003d88 <HAL_GetTick>
 8006466:	0003      	movs	r3, r0
 8006468:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800646c:	f7fd fc8c 	bl	8003d88 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e1e4      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 8006480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	d1f1      	bne.n	800646c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2204      	movs	r2, #4
 800648e:	4013      	ands	r3, r2
 8006490:	d100      	bne.n	8006494 <HAL_RCC_OscConfig+0x300>
 8006492:	e0c7      	b.n	8006624 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006494:	231f      	movs	r3, #31
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2238      	movs	r2, #56	; 0x38
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d11f      	bne.n	80064e8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <HAL_RCC_OscConfig+0x330>)
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	2202      	movs	r2, #2
 80064ae:	4013      	ands	r3, r2
 80064b0:	d100      	bne.n	80064b4 <HAL_RCC_OscConfig+0x320>
 80064b2:	e0b7      	b.n	8006624 <HAL_RCC_OscConfig+0x490>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d000      	beq.n	80064be <HAL_RCC_OscConfig+0x32a>
 80064bc:	e0b2      	b.n	8006624 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e1c2      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	40021000 	.word	0x40021000
 80064c8:	fffeffff 	.word	0xfffeffff
 80064cc:	fffbffff 	.word	0xfffbffff
 80064d0:	ffff80ff 	.word	0xffff80ff
 80064d4:	ffffc7ff 	.word	0xffffc7ff
 80064d8:	00f42400 	.word	0x00f42400
 80064dc:	20000004 	.word	0x20000004
 80064e0:	20000008 	.word	0x20000008
 80064e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064e8:	4bb5      	ldr	r3, [pc, #724]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80064ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	055b      	lsls	r3, r3, #21
 80064f0:	4013      	ands	r3, r2
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_OscConfig+0x364>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_RCC_OscConfig+0x366>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80064fe:	4bb0      	ldr	r3, [pc, #704]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006502:	4baf      	ldr	r3, [pc, #700]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006504:	2180      	movs	r1, #128	; 0x80
 8006506:	0549      	lsls	r1, r1, #21
 8006508:	430a      	orrs	r2, r1
 800650a:	63da      	str	r2, [r3, #60]	; 0x3c
 800650c:	4bac      	ldr	r3, [pc, #688]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800650e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	055b      	lsls	r3, r3, #21
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800651a:	231f      	movs	r3, #31
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006522:	4ba8      	ldr	r3, [pc, #672]	; (80067c4 <HAL_RCC_OscConfig+0x630>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4013      	ands	r3, r2
 800652c:	d11a      	bne.n	8006564 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800652e:	4ba5      	ldr	r3, [pc, #660]	; (80067c4 <HAL_RCC_OscConfig+0x630>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4ba4      	ldr	r3, [pc, #656]	; (80067c4 <HAL_RCC_OscConfig+0x630>)
 8006534:	2180      	movs	r1, #128	; 0x80
 8006536:	0049      	lsls	r1, r1, #1
 8006538:	430a      	orrs	r2, r1
 800653a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800653c:	f7fd fc24 	bl	8003d88 <HAL_GetTick>
 8006540:	0003      	movs	r3, r0
 8006542:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006546:	f7fd fc1f 	bl	8003d88 <HAL_GetTick>
 800654a:	0002      	movs	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e177      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006558:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <HAL_RCC_OscConfig+0x630>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	4013      	ands	r3, r2
 8006562:	d0f0      	beq.n	8006546 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d106      	bne.n	800657a <HAL_RCC_OscConfig+0x3e6>
 800656c:	4b94      	ldr	r3, [pc, #592]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800656e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006570:	4b93      	ldr	r3, [pc, #588]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006572:	2101      	movs	r1, #1
 8006574:	430a      	orrs	r2, r1
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c
 8006578:	e01c      	b.n	80065b4 <HAL_RCC_OscConfig+0x420>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b05      	cmp	r3, #5
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0x408>
 8006582:	4b8f      	ldr	r3, [pc, #572]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006586:	4b8e      	ldr	r3, [pc, #568]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006588:	2104      	movs	r1, #4
 800658a:	430a      	orrs	r2, r1
 800658c:	65da      	str	r2, [r3, #92]	; 0x5c
 800658e:	4b8c      	ldr	r3, [pc, #560]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006592:	4b8b      	ldr	r3, [pc, #556]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006594:	2101      	movs	r1, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	65da      	str	r2, [r3, #92]	; 0x5c
 800659a:	e00b      	b.n	80065b4 <HAL_RCC_OscConfig+0x420>
 800659c:	4b88      	ldr	r3, [pc, #544]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800659e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a0:	4b87      	ldr	r3, [pc, #540]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80065a2:	2101      	movs	r1, #1
 80065a4:	438a      	bics	r2, r1
 80065a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80065a8:	4b85      	ldr	r3, [pc, #532]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80065aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065ac:	4b84      	ldr	r3, [pc, #528]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80065ae:	2104      	movs	r1, #4
 80065b0:	438a      	bics	r2, r1
 80065b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d014      	beq.n	80065e6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd fbe4 	bl	8003d88 <HAL_GetTick>
 80065c0:	0003      	movs	r3, r0
 80065c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c4:	e009      	b.n	80065da <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fd fbdf 	bl	8003d88 <HAL_GetTick>
 80065ca:	0002      	movs	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	4a7d      	ldr	r2, [pc, #500]	; (80067c8 <HAL_RCC_OscConfig+0x634>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e136      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065da:	4b79      	ldr	r3, [pc, #484]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80065dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065de:	2202      	movs	r2, #2
 80065e0:	4013      	ands	r3, r2
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x432>
 80065e4:	e013      	b.n	800660e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e6:	f7fd fbcf 	bl	8003d88 <HAL_GetTick>
 80065ea:	0003      	movs	r3, r0
 80065ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065ee:	e009      	b.n	8006604 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f0:	f7fd fbca 	bl	8003d88 <HAL_GetTick>
 80065f4:	0002      	movs	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	4a73      	ldr	r2, [pc, #460]	; (80067c8 <HAL_RCC_OscConfig+0x634>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e121      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006604:	4b6e      	ldr	r3, [pc, #440]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	2202      	movs	r2, #2
 800660a:	4013      	ands	r3, r2
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800660e:	231f      	movs	r3, #31
 8006610:	18fb      	adds	r3, r7, r3
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d105      	bne.n	8006624 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006618:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800661a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661c:	4b68      	ldr	r3, [pc, #416]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800661e:	496b      	ldr	r1, [pc, #428]	; (80067cc <HAL_RCC_OscConfig+0x638>)
 8006620:	400a      	ands	r2, r1
 8006622:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2220      	movs	r2, #32
 800662a:	4013      	ands	r3, r2
 800662c:	d039      	beq.n	80066a2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006636:	4b62      	ldr	r3, [pc, #392]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b61      	ldr	r3, [pc, #388]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800663c:	2180      	movs	r1, #128	; 0x80
 800663e:	03c9      	lsls	r1, r1, #15
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fd fba0 	bl	8003d88 <HAL_GetTick>
 8006648:	0003      	movs	r3, r0
 800664a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800664e:	f7fd fb9b 	bl	8003d88 <HAL_GetTick>
 8006652:	0002      	movs	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0f3      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006660:	4b57      	ldr	r3, [pc, #348]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	4013      	ands	r3, r2
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x4ba>
 800666c:	e019      	b.n	80066a2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800666e:	4b54      	ldr	r3, [pc, #336]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b53      	ldr	r3, [pc, #332]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006674:	4956      	ldr	r1, [pc, #344]	; (80067d0 <HAL_RCC_OscConfig+0x63c>)
 8006676:	400a      	ands	r2, r1
 8006678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667a:	f7fd fb85 	bl	8003d88 <HAL_GetTick>
 800667e:	0003      	movs	r3, r0
 8006680:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006684:	f7fd fb80 	bl	8003d88 <HAL_GetTick>
 8006688:	0002      	movs	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e0d8      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006696:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	041b      	lsls	r3, r3, #16
 800669e:	4013      	ands	r3, r2
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d100      	bne.n	80066ac <HAL_RCC_OscConfig+0x518>
 80066aa:	e0cc      	b.n	8006846 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066ac:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2238      	movs	r2, #56	; 0x38
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d100      	bne.n	80066ba <HAL_RCC_OscConfig+0x526>
 80066b8:	e07b      	b.n	80067b2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d156      	bne.n	8006770 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b3f      	ldr	r3, [pc, #252]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80066c8:	4942      	ldr	r1, [pc, #264]	; (80067d4 <HAL_RCC_OscConfig+0x640>)
 80066ca:	400a      	ands	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fd fb5b 	bl	8003d88 <HAL_GetTick>
 80066d2:	0003      	movs	r3, r0
 80066d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fd fb56 	bl	8003d88 <HAL_GetTick>
 80066dc:	0002      	movs	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0ae      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ea:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	049b      	lsls	r3, r3, #18
 80066f2:	4013      	ands	r3, r2
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066f6:	4b32      	ldr	r3, [pc, #200]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	4a37      	ldr	r2, [pc, #220]	; (80067d8 <HAL_RCC_OscConfig+0x644>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	431a      	orrs	r2, r3
 8006724:	4b26      	ldr	r3, [pc, #152]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006726:	430a      	orrs	r2, r1
 8006728:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800672a:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	0449      	lsls	r1, r1, #17
 8006734:	430a      	orrs	r2, r1
 8006736:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006738:	4b21      	ldr	r3, [pc, #132]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800673e:	2180      	movs	r1, #128	; 0x80
 8006740:	0549      	lsls	r1, r1, #21
 8006742:	430a      	orrs	r2, r1
 8006744:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006746:	f7fd fb1f 	bl	8003d88 <HAL_GetTick>
 800674a:	0003      	movs	r3, r0
 800674c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006750:	f7fd fb1a 	bl	8003d88 <HAL_GetTick>
 8006754:	0002      	movs	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e072      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006762:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	049b      	lsls	r3, r3, #18
 800676a:	4013      	ands	r3, r2
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x5bc>
 800676e:	e06a      	b.n	8006846 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006770:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 8006776:	4917      	ldr	r1, [pc, #92]	; (80067d4 <HAL_RCC_OscConfig+0x640>)
 8006778:	400a      	ands	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fd fb04 	bl	8003d88 <HAL_GetTick>
 8006780:	0003      	movs	r3, r0
 8006782:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fd faff 	bl	8003d88 <HAL_GetTick>
 800678a:	0002      	movs	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e057      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	049b      	lsls	r3, r3, #18
 80067a0:	4013      	ands	r3, r2
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_OscConfig+0x62c>)
 80067aa:	490c      	ldr	r1, [pc, #48]	; (80067dc <HAL_RCC_OscConfig+0x648>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e049      	b.n	8006846 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d112      	bne.n	80067e0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e044      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40007000 	.word	0x40007000
 80067c8:	00001388 	.word	0x00001388
 80067cc:	efffffff 	.word	0xefffffff
 80067d0:	ffbfffff 	.word	0xffbfffff
 80067d4:	feffffff 	.word	0xfeffffff
 80067d8:	11c1808c 	.word	0x11c1808c
 80067dc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <HAL_RCC_OscConfig+0x6bc>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2203      	movs	r2, #3
 80067ea:	401a      	ands	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d126      	bne.n	8006842 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2270      	movs	r2, #112	; 0x70
 80067f8:	401a      	ands	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fe:	429a      	cmp	r2, r3
 8006800:	d11f      	bne.n	8006842 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	23fe      	movs	r3, #254	; 0xfe
 8006806:	01db      	lsls	r3, r3, #7
 8006808:	401a      	ands	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006810:	429a      	cmp	r2, r3
 8006812:	d116      	bne.n	8006842 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	23f8      	movs	r3, #248	; 0xf8
 8006818:	039b      	lsls	r3, r3, #14
 800681a:	401a      	ands	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006820:	429a      	cmp	r2, r3
 8006822:	d10e      	bne.n	8006842 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	23e0      	movs	r3, #224	; 0xe0
 8006828:	051b      	lsls	r3, r3, #20
 800682a:	401a      	ands	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d106      	bne.n	8006842 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	0f5b      	lsrs	r3, r3, #29
 8006838:	075a      	lsls	r2, r3, #29
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d001      	beq.n	8006846 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	0018      	movs	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	b008      	add	sp, #32
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000

08006854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0e9      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b76      	ldr	r3, [pc, #472]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2207      	movs	r2, #7
 800686e:	4013      	ands	r3, r2
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d91e      	bls.n	80068b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b73      	ldr	r3, [pc, #460]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2207      	movs	r2, #7
 800687c:	4393      	bics	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	4b70      	ldr	r3, [pc, #448]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006888:	f7fd fa7e 	bl	8003d88 <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006890:	e009      	b.n	80068a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006892:	f7fd fa79 	bl	8003d88 <HAL_GetTick>
 8006896:	0002      	movs	r2, r0
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_RCC_ClockConfig+0x1f4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e0ca      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068a6:	4b67      	ldr	r3, [pc, #412]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2207      	movs	r2, #7
 80068ac:	4013      	ands	r3, r2
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d1ee      	bne.n	8006892 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2202      	movs	r2, #2
 80068ba:	4013      	ands	r3, r2
 80068bc:	d015      	beq.n	80068ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2204      	movs	r2, #4
 80068c4:	4013      	ands	r3, r2
 80068c6:	d006      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80068c8:	4b60      	ldr	r3, [pc, #384]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	4b5f      	ldr	r3, [pc, #380]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80068ce:	21e0      	movs	r1, #224	; 0xe0
 80068d0:	01c9      	lsls	r1, r1, #7
 80068d2:	430a      	orrs	r2, r1
 80068d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d6:	4b5d      	ldr	r3, [pc, #372]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	4a5d      	ldr	r2, [pc, #372]	; (8006a50 <HAL_RCC_ClockConfig+0x1fc>)
 80068dc:	4013      	ands	r3, r2
 80068de:	0019      	movs	r1, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	4b59      	ldr	r3, [pc, #356]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	4013      	ands	r3, r2
 80068f2:	d057      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d107      	bne.n	800690c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068fc:	4b53      	ldr	r3, [pc, #332]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	4013      	ands	r3, r2
 8006906:	d12b      	bne.n	8006960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e097      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d107      	bne.n	8006924 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006914:	4b4d      	ldr	r3, [pc, #308]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	049b      	lsls	r3, r3, #18
 800691c:	4013      	ands	r3, r2
 800691e:	d11f      	bne.n	8006960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e08b      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800692c:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4013      	ands	r3, r2
 8006936:	d113      	bne.n	8006960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e07f      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d106      	bne.n	8006952 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006944:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006948:	2202      	movs	r2, #2
 800694a:	4013      	ands	r3, r2
 800694c:	d108      	bne.n	8006960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e074      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006952:	4b3e      	ldr	r3, [pc, #248]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	2202      	movs	r2, #2
 8006958:	4013      	ands	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e06d      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006960:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2207      	movs	r2, #7
 8006966:	4393      	bics	r3, r2
 8006968:	0019      	movs	r1, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006974:	f7fd fa08 	bl	8003d88 <HAL_GetTick>
 8006978:	0003      	movs	r3, r0
 800697a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697c:	e009      	b.n	8006992 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800697e:	f7fd fa03 	bl	8003d88 <HAL_GetTick>
 8006982:	0002      	movs	r2, r0
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	4a2f      	ldr	r2, [pc, #188]	; (8006a48 <HAL_RCC_ClockConfig+0x1f4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e054      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2238      	movs	r2, #56	; 0x38
 8006998:	401a      	ands	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d1ec      	bne.n	800697e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a4:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2207      	movs	r2, #7
 80069aa:	4013      	ands	r3, r2
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d21e      	bcs.n	80069f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2207      	movs	r2, #7
 80069b8:	4393      	bics	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	4b21      	ldr	r3, [pc, #132]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069c4:	f7fd f9e0 	bl	8003d88 <HAL_GetTick>
 80069c8:	0003      	movs	r3, r0
 80069ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069cc:	e009      	b.n	80069e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ce:	f7fd f9db 	bl	8003d88 <HAL_GetTick>
 80069d2:	0002      	movs	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_RCC_ClockConfig+0x1f4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e02c      	b.n	8006a3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069e2:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <HAL_RCC_ClockConfig+0x1f0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2207      	movs	r2, #7
 80069e8:	4013      	ands	r3, r2
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d1ee      	bne.n	80069ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2204      	movs	r2, #4
 80069f6:	4013      	ands	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <HAL_RCC_ClockConfig+0x200>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	0019      	movs	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a0e:	f000 f829 	bl	8006a64 <HAL_RCC_GetSysClockFreq>
 8006a12:	0001      	movs	r1, r0
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <HAL_RCC_ClockConfig+0x1f8>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	220f      	movs	r2, #15
 8006a1c:	401a      	ands	r2, r3
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <HAL_RCC_ClockConfig+0x204>)
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	58d3      	ldr	r3, [r2, r3]
 8006a24:	221f      	movs	r2, #31
 8006a26:	4013      	ands	r3, r2
 8006a28:	000a      	movs	r2, r1
 8006a2a:	40da      	lsrs	r2, r3
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <HAL_RCC_ClockConfig+0x208>)
 8006a2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCC_ClockConfig+0x20c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fd f857 	bl	8003ae8 <HAL_InitTick>
 8006a3a:	0003      	movs	r3, r0
}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b004      	add	sp, #16
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40022000 	.word	0x40022000
 8006a48:	00001388 	.word	0x00001388
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	fffff0ff 	.word	0xfffff0ff
 8006a54:	ffff8fff 	.word	0xffff8fff
 8006a58:	08018484 	.word	0x08018484
 8006a5c:	20000004 	.word	0x20000004
 8006a60:	20000008 	.word	0x20000008

08006a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2238      	movs	r2, #56	; 0x38
 8006a70:	4013      	ands	r3, r2
 8006a72:	d10f      	bne.n	8006a94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006a74:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	0adb      	lsrs	r3, r3, #11
 8006a7a:	2207      	movs	r2, #7
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2201      	movs	r2, #1
 8006a80:	409a      	lsls	r2, r3
 8006a82:	0013      	movs	r3, r2
 8006a84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	4835      	ldr	r0, [pc, #212]	; (8006b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006a8a:	f7fb ff71 	bl	8002970 <__udivsi3>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e05d      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a94:	4b31      	ldr	r3, [pc, #196]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2238      	movs	r2, #56	; 0x38
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aa0:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	e054      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aa6:	4b2d      	ldr	r3, [pc, #180]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2238      	movs	r2, #56	; 0x38
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d138      	bne.n	8006b24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006ab2:	4b2a      	ldr	r3, [pc, #168]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	091b      	lsrs	r3, r3, #4
 8006ac2:	2207      	movs	r2, #7
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d10d      	bne.n	8006aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4824      	ldr	r0, [pc, #144]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ad4:	f7fb ff4c 	bl	8002970 <__udivsi3>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	0019      	movs	r1, r3
 8006adc:	4b1f      	ldr	r3, [pc, #124]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	227f      	movs	r2, #127	; 0x7f
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	434b      	muls	r3, r1
 8006ae8:	617b      	str	r3, [r7, #20]
        break;
 8006aea:	e00d      	b.n	8006b08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	481c      	ldr	r0, [pc, #112]	; (8006b60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006af0:	f7fb ff3e 	bl	8002970 <__udivsi3>
 8006af4:	0003      	movs	r3, r0
 8006af6:	0019      	movs	r1, r3
 8006af8:	4b18      	ldr	r3, [pc, #96]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	0a1b      	lsrs	r3, r3, #8
 8006afe:	227f      	movs	r2, #127	; 0x7f
 8006b00:	4013      	ands	r3, r2
 8006b02:	434b      	muls	r3, r1
 8006b04:	617b      	str	r3, [r7, #20]
        break;
 8006b06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b08:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	0f5b      	lsrs	r3, r3, #29
 8006b0e:	2207      	movs	r2, #7
 8006b10:	4013      	ands	r3, r2
 8006b12:	3301      	adds	r3, #1
 8006b14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	6978      	ldr	r0, [r7, #20]
 8006b1a:	f7fb ff29 	bl	8002970 <__udivsi3>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e015      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b24:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2238      	movs	r2, #56	; 0x38
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d103      	bne.n	8006b38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e00b      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2238      	movs	r2, #56	; 0x38
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b18      	cmp	r3, #24
 8006b42:	d103      	bne.n	8006b4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006b44:	23fa      	movs	r3, #250	; 0xfa
 8006b46:	01db      	lsls	r3, r3, #7
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e001      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b50:	693b      	ldr	r3, [r7, #16]
}
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b006      	add	sp, #24
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	00f42400 	.word	0x00f42400
 8006b64:	007a1200 	.word	0x007a1200

08006b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	20000004 	.word	0x20000004

08006b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b80:	f7ff fff2 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006b84:	0004      	movs	r4, r0
 8006b86:	f7ff faf9 	bl	800617c <LL_RCC_GetAPB1Prescaler>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	0b1a      	lsrs	r2, r3, #12
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b90:	0092      	lsls	r2, r2, #2
 8006b92:	58d3      	ldr	r3, [r2, r3]
 8006b94:	221f      	movs	r2, #31
 8006b96:	4013      	ands	r3, r2
 8006b98:	40dc      	lsrs	r4, r3
 8006b9a:	0023      	movs	r3, r4
}
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	080184c4 	.word	0x080184c4

08006ba8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <HAL_RCC_GetClockConfig+0x4c>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2207      	movs	r2, #7
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_GetClockConfig+0x4c>)
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	23f0      	movs	r3, #240	; 0xf0
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	401a      	ands	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <HAL_RCC_GetClockConfig+0x4c>)
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	23e0      	movs	r3, #224	; 0xe0
 8006bd8:	01db      	lsls	r3, r3, #7
 8006bda:	401a      	ands	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <HAL_RCC_GetClockConfig+0x50>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2207      	movs	r2, #7
 8006be6:	401a      	ands	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	b002      	add	sp, #8
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40022000 	.word	0x40022000

08006bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006c04:	2313      	movs	r3, #19
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c0c:	2312      	movs	r3, #18
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	2380      	movs	r3, #128	; 0x80
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d100      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006c20:	e0ad      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c22:	2011      	movs	r0, #17
 8006c24:	183b      	adds	r3, r7, r0
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c2a:	4b47      	ldr	r3, [pc, #284]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2e:	2380      	movs	r3, #128	; 0x80
 8006c30:	055b      	lsls	r3, r3, #21
 8006c32:	4013      	ands	r3, r2
 8006c34:	d110      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c36:	4b44      	ldr	r3, [pc, #272]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3a:	4b43      	ldr	r3, [pc, #268]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	0549      	lsls	r1, r1, #21
 8006c40:	430a      	orrs	r2, r1
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c44:	4b40      	ldr	r3, [pc, #256]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	055b      	lsls	r3, r3, #21
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c52:	183b      	adds	r3, r7, r0
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c58:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	4b3b      	ldr	r3, [pc, #236]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	0049      	lsls	r1, r1, #1
 8006c62:	430a      	orrs	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c66:	f7fd f88f 	bl	8003d88 <HAL_GetTick>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c6e:	e00b      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c70:	f7fd f88a 	bl	8003d88 <HAL_GetTick>
 8006c74:	0002      	movs	r2, r0
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d904      	bls.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006c7e:	2313      	movs	r3, #19
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	2203      	movs	r2, #3
 8006c84:	701a      	strb	r2, [r3, #0]
        break;
 8006c86:	e005      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c88:	4b30      	ldr	r3, [pc, #192]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	4013      	ands	r3, r2
 8006c92:	d0ed      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006c94:	2313      	movs	r3, #19
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d15e      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c9e:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ca2:	23c0      	movs	r3, #192	; 0xc0
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d019      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d014      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbe:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cc4:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cc8:	4b1f      	ldr	r3, [pc, #124]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	0249      	lsls	r1, r1, #9
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cd8:	491e      	ldr	r1, [pc, #120]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006cda:	400a      	ands	r2, r1
 8006cdc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cde:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d016      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fd f84c 	bl	8003d88 <HAL_GetTick>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf4:	e00c      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf6:	f7fd f847 	bl	8003d88 <HAL_GetTick>
 8006cfa:	0002      	movs	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d904      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006d06:	2313      	movs	r3, #19
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	701a      	strb	r2, [r3, #0]
            break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d14:	2202      	movs	r2, #2
 8006d16:	4013      	ands	r3, r2
 8006d18:	d0ed      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006d1a:	2313      	movs	r3, #19
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d24:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	0019      	movs	r1, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d34:	430a      	orrs	r2, r1
 8006d36:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d38:	e016      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d3a:	2312      	movs	r3, #18
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	2213      	movs	r2, #19
 8006d40:	18ba      	adds	r2, r7, r2
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e00f      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	fffffcff 	.word	0xfffffcff
 8006d54:	fffeffff 	.word	0xfffeffff
 8006d58:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	2312      	movs	r3, #18
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2213      	movs	r2, #19
 8006d62:	18ba      	adds	r2, r7, r2
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d68:	2311      	movs	r3, #17
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d72:	4bb6      	ldr	r3, [pc, #728]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d76:	4bb5      	ldr	r3, [pc, #724]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d78:	49b5      	ldr	r1, [pc, #724]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006d7a:	400a      	ands	r2, r1
 8006d7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	4013      	ands	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d88:	4bb0      	ldr	r3, [pc, #704]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	4393      	bics	r3, r2
 8006d90:	0019      	movs	r1, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4bad      	ldr	r3, [pc, #692]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2202      	movs	r2, #2
 8006da2:	4013      	ands	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006da6:	4ba9      	ldr	r3, [pc, #676]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	220c      	movs	r2, #12
 8006dac:	4393      	bics	r3, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	4ba5      	ldr	r3, [pc, #660]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006db6:	430a      	orrs	r2, r1
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dc4:	4ba1      	ldr	r3, [pc, #644]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc8:	2230      	movs	r2, #48	; 0x30
 8006dca:	4393      	bics	r3, r2
 8006dcc:	0019      	movs	r1, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	4b9e      	ldr	r3, [pc, #632]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2210      	movs	r2, #16
 8006dde:	4013      	ands	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006de2:	4b9a      	ldr	r3, [pc, #616]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	4a9b      	ldr	r2, [pc, #620]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	0019      	movs	r1, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	4b96      	ldr	r3, [pc, #600]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006df2:	430a      	orrs	r2, r1
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	015b      	lsls	r3, r3, #5
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006e02:	4b92      	ldr	r3, [pc, #584]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	4a94      	ldr	r2, [pc, #592]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	4b8e      	ldr	r3, [pc, #568]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e12:	430a      	orrs	r2, r1
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e22:	4b8a      	ldr	r3, [pc, #552]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	4a8d      	ldr	r2, [pc, #564]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	0019      	movs	r1, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e30:	4b86      	ldr	r3, [pc, #536]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e32:	430a      	orrs	r2, r1
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	2380      	movs	r3, #128	; 0x80
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	4013      	ands	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e42:	4b82      	ldr	r3, [pc, #520]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	4a86      	ldr	r2, [pc, #536]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	4b7e      	ldr	r3, [pc, #504]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e52:	430a      	orrs	r2, r1
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d009      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e60:	4b7a      	ldr	r3, [pc, #488]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	4a7f      	ldr	r2, [pc, #508]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	4b77      	ldr	r3, [pc, #476]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e70:	430a      	orrs	r2, r1
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2240      	movs	r2, #64	; 0x40
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e7e:	4b73      	ldr	r3, [pc, #460]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	4a79      	ldr	r2, [pc, #484]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	0019      	movs	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	4b6f      	ldr	r3, [pc, #444]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	01db      	lsls	r3, r3, #7
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d015      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e9e:	4b6b      	ldr	r3, [pc, #428]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	0899      	lsrs	r1, r3, #2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eaa:	4b68      	ldr	r3, [pc, #416]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eac:	430a      	orrs	r2, r1
 8006eae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	05db      	lsls	r3, r3, #23
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d106      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006ebc:	4b63      	ldr	r3, [pc, #396]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	4b62      	ldr	r3, [pc, #392]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	0249      	lsls	r1, r1, #9
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	2240      	movs	r2, #64	; 0x40
 8006edc:	4393      	bics	r3, r2
 8006ede:	0019      	movs	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	4b59      	ldr	r3, [pc, #356]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	039b      	lsls	r3, r3, #14
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d016      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006ef6:	4b55      	ldr	r3, [pc, #340]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	0019      	movs	r1, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f04:	4b51      	ldr	r3, [pc, #324]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f06:	430a      	orrs	r2, r1
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0e:	2380      	movs	r3, #128	; 0x80
 8006f10:	03db      	lsls	r3, r3, #15
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d106      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f16:	4b4d      	ldr	r3, [pc, #308]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	4b4c      	ldr	r3, [pc, #304]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	0449      	lsls	r1, r1, #17
 8006f20:	430a      	orrs	r2, r1
 8006f22:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	2380      	movs	r3, #128	; 0x80
 8006f2a:	03db      	lsls	r3, r3, #15
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d016      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006f30:	4b46      	ldr	r3, [pc, #280]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	4a4e      	ldr	r2, [pc, #312]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	0019      	movs	r1, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f3e:	4b43      	ldr	r3, [pc, #268]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f40:	430a      	orrs	r2, r1
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	045b      	lsls	r3, r3, #17
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f50:	4b3e      	ldr	r3, [pc, #248]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	4b3d      	ldr	r3, [pc, #244]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f56:	2180      	movs	r1, #128	; 0x80
 8006f58:	0449      	lsls	r1, r1, #17
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4013      	ands	r3, r2
 8006f68:	d014      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006f6a:	4b38      	ldr	r3, [pc, #224]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	2203      	movs	r2, #3
 8006f70:	4393      	bics	r3, r2
 8006f72:	0019      	movs	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	4b34      	ldr	r3, [pc, #208]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d106      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f86:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	4b30      	ldr	r3, [pc, #192]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	0249      	lsls	r1, r1, #9
 8006f90:	430a      	orrs	r2, r1
 8006f92:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	019b      	lsls	r3, r3, #6
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d014      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	220c      	movs	r2, #12
 8006fa6:	4393      	bics	r3, r2
 8006fa8:	0019      	movs	r1, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fae:	4b27      	ldr	r3, [pc, #156]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d106      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006fbc:	4b23      	ldr	r3, [pc, #140]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	4b22      	ldr	r3, [pc, #136]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	0249      	lsls	r1, r1, #9
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	045b      	lsls	r3, r3, #17
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d016      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fda:	4a22      	ldr	r2, [pc, #136]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	0019      	movs	r1, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	019b      	lsls	r3, r3, #6
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d106      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ffc:	2180      	movs	r1, #128	; 0x80
 8006ffe:	0449      	lsls	r1, r1, #17
 8007000:	430a      	orrs	r2, r1
 8007002:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	2380      	movs	r3, #128	; 0x80
 800700a:	049b      	lsls	r3, r3, #18
 800700c:	4013      	ands	r3, r2
 800700e:	d016      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007010:	4b0e      	ldr	r3, [pc, #56]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007014:	4a10      	ldr	r2, [pc, #64]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007016:	4013      	ands	r3, r2
 8007018:	0019      	movs	r1, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007020:	430a      	orrs	r2, r1
 8007022:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	429a      	cmp	r2, r3
 800702e:	d106      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	0449      	lsls	r1, r1, #17
 800703a:	430a      	orrs	r2, r1
 800703c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800703e:	2312      	movs	r3, #18
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	781b      	ldrb	r3, [r3, #0]
}
 8007044:	0018      	movs	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	b006      	add	sp, #24
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40021000 	.word	0x40021000
 8007050:	efffffff 	.word	0xefffffff
 8007054:	fffff3ff 	.word	0xfffff3ff
 8007058:	fffffcff 	.word	0xfffffcff
 800705c:	fff3ffff 	.word	0xfff3ffff
 8007060:	ffcfffff 	.word	0xffcfffff
 8007064:	ffffcfff 	.word	0xffffcfff
 8007068:	ffff3fff 	.word	0xffff3fff
 800706c:	ffbfffff 	.word	0xffbfffff
 8007070:	feffffff 	.word	0xfeffffff

08007074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e04a      	b.n	800711c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	223d      	movs	r2, #61	; 0x3d
 800708a:	5c9b      	ldrb	r3, [r3, r2]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	223c      	movs	r2, #60	; 0x3c
 8007096:	2100      	movs	r1, #0
 8007098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	0018      	movs	r0, r3
 800709e:	f000 f841 	bl	8007124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	223d      	movs	r2, #61	; 0x3d
 80070a6:	2102      	movs	r1, #2
 80070a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	0019      	movs	r1, r3
 80070b4:	0010      	movs	r0, r2
 80070b6:	f000 f9f1 	bl	800749c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2248      	movs	r2, #72	; 0x48
 80070be:	2101      	movs	r1, #1
 80070c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	223e      	movs	r2, #62	; 0x3e
 80070c6:	2101      	movs	r1, #1
 80070c8:	5499      	strb	r1, [r3, r2]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	223f      	movs	r2, #63	; 0x3f
 80070ce:	2101      	movs	r1, #1
 80070d0:	5499      	strb	r1, [r3, r2]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2240      	movs	r2, #64	; 0x40
 80070d6:	2101      	movs	r1, #1
 80070d8:	5499      	strb	r1, [r3, r2]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2241      	movs	r2, #65	; 0x41
 80070de:	2101      	movs	r1, #1
 80070e0:	5499      	strb	r1, [r3, r2]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2242      	movs	r2, #66	; 0x42
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2243      	movs	r2, #67	; 0x43
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2244      	movs	r2, #68	; 0x44
 80070f6:	2101      	movs	r1, #1
 80070f8:	5499      	strb	r1, [r3, r2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2245      	movs	r2, #69	; 0x45
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2246      	movs	r2, #70	; 0x46
 8007106:	2101      	movs	r1, #1
 8007108:	5499      	strb	r1, [r3, r2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2247      	movs	r2, #71	; 0x47
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	223d      	movs	r2, #61	; 0x3d
 8007116:	2101      	movs	r1, #1
 8007118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b002      	add	sp, #8
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800712c:	46c0      	nop			; (mov r8, r8)
 800712e:	46bd      	mov	sp, r7
 8007130:	b002      	add	sp, #8
 8007132:	bd80      	pop	{r7, pc}

08007134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	223d      	movs	r2, #61	; 0x3d
 8007140:	5c9b      	ldrb	r3, [r3, r2]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d001      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e047      	b.n	80071dc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	223d      	movs	r2, #61	; 0x3d
 8007150:	2102      	movs	r1, #2
 8007152:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2101      	movs	r1, #1
 8007160:	430a      	orrs	r2, r1
 8007162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d014      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0x64>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	2380      	movs	r3, #128	; 0x80
 8007174:	05db      	lsls	r3, r3, #23
 8007176:	429a      	cmp	r2, r3
 8007178:	d00e      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0x64>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0x64>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a18      	ldr	r2, [pc, #96]	; (80071ec <HAL_TIM_Base_Start_IT+0xb8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0x64>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d116      	bne.n	80071c6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <HAL_TIM_Base_Start_IT+0xc0>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d016      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0xa4>
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	025b      	lsls	r3, r3, #9
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d011      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2101      	movs	r1, #1
 80071c0:	430a      	orrs	r2, r1
 80071c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	e008      	b.n	80071d8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2101      	movs	r1, #1
 80071d2:	430a      	orrs	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e000      	b.n	80071da <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b004      	add	sp, #16
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40014000 	.word	0x40014000
 80071f4:	00010007 	.word	0x00010007

080071f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2202      	movs	r2, #2
 8007208:	4013      	ands	r3, r2
 800720a:	2b02      	cmp	r3, #2
 800720c:	d124      	bne.n	8007258 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2202      	movs	r2, #2
 8007216:	4013      	ands	r3, r2
 8007218:	2b02      	cmp	r3, #2
 800721a:	d11d      	bne.n	8007258 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2203      	movs	r2, #3
 8007222:	4252      	negs	r2, r2
 8007224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	2203      	movs	r2, #3
 8007234:	4013      	ands	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0018      	movs	r0, r3
 800723c:	f000 f916 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 8007240:	e007      	b.n	8007252 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	0018      	movs	r0, r3
 8007246:	f000 f909 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0018      	movs	r0, r3
 800724e:	f000 f915 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2204      	movs	r2, #4
 8007260:	4013      	ands	r3, r2
 8007262:	2b04      	cmp	r3, #4
 8007264:	d125      	bne.n	80072b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2204      	movs	r2, #4
 800726e:	4013      	ands	r3, r2
 8007270:	2b04      	cmp	r3, #4
 8007272:	d11e      	bne.n	80072b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2205      	movs	r2, #5
 800727a:	4252      	negs	r2, r2
 800727c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	23c0      	movs	r3, #192	; 0xc0
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4013      	ands	r3, r2
 8007290:	d004      	beq.n	800729c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 f8e9 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 800729a:	e007      	b.n	80072ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f8dc 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f8e8 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2208      	movs	r2, #8
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d124      	bne.n	800730a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2208      	movs	r2, #8
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d11d      	bne.n	800730a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2209      	movs	r2, #9
 80072d4:	4252      	negs	r2, r2
 80072d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2204      	movs	r2, #4
 80072dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	2203      	movs	r2, #3
 80072e6:	4013      	ands	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 f8bd 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 80072f2:	e007      	b.n	8007304 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f000 f8b0 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 f8bc 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2210      	movs	r2, #16
 8007312:	4013      	ands	r3, r2
 8007314:	2b10      	cmp	r3, #16
 8007316:	d125      	bne.n	8007364 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2210      	movs	r2, #16
 8007320:	4013      	ands	r3, r2
 8007322:	2b10      	cmp	r3, #16
 8007324:	d11e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2211      	movs	r2, #17
 800732c:	4252      	negs	r2, r2
 800732e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2208      	movs	r2, #8
 8007334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	23c0      	movs	r3, #192	; 0xc0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4013      	ands	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	0018      	movs	r0, r3
 8007348:	f000 f890 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 800734c:	e007      	b.n	800735e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f000 f883 	bl	800745c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f88f 	bl	800747c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2201      	movs	r2, #1
 800736c:	4013      	ands	r3, r2
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10f      	bne.n	8007392 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	4013      	ands	r3, r2
 800737c:	2b01      	cmp	r3, #1
 800737e:	d108      	bne.n	8007392 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2202      	movs	r2, #2
 8007386:	4252      	negs	r2, r2
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0018      	movs	r0, r3
 800738e:	f7fc faaf 	bl	80038f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2280      	movs	r2, #128	; 0x80
 800739a:	4013      	ands	r3, r2
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d10f      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2280      	movs	r2, #128	; 0x80
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d108      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2281      	movs	r2, #129	; 0x81
 80073b4:	4252      	negs	r2, r2
 80073b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	0018      	movs	r0, r3
 80073bc:	f000 f900 	bl	80075c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	2380      	movs	r3, #128	; 0x80
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	401a      	ands	r2, r3
 80073cc:	2380      	movs	r3, #128	; 0x80
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d10e      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2280      	movs	r2, #128	; 0x80
 80073dc:	4013      	ands	r3, r2
 80073de:	2b80      	cmp	r3, #128	; 0x80
 80073e0:	d107      	bne.n	80073f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_TIM_IRQHandler+0x260>)
 80073e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 f8ef 	bl	80075d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2240      	movs	r2, #64	; 0x40
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d10f      	bne.n	8007420 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2240      	movs	r2, #64	; 0x40
 8007408:	4013      	ands	r3, r2
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d108      	bne.n	8007420 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2241      	movs	r2, #65	; 0x41
 8007414:	4252      	negs	r2, r2
 8007416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f836 	bl	800748c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2220      	movs	r2, #32
 8007428:	4013      	ands	r3, r2
 800742a:	2b20      	cmp	r3, #32
 800742c:	d10f      	bne.n	800744e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	4013      	ands	r3, r2
 8007438:	2b20      	cmp	r3, #32
 800743a:	d108      	bne.n	800744e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	4252      	negs	r2, r2
 8007444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	0018      	movs	r0, r3
 800744a:	f000 f8b1 	bl	80075b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	b002      	add	sp, #8
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	fffffeff 	.word	0xfffffeff

0800745c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b002      	add	sp, #8
 800749a:	bd80      	pop	{r7, pc}

0800749c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a38      	ldr	r2, [pc, #224]	; (8007590 <TIM_Base_SetConfig+0xf4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00c      	beq.n	80074ce <TIM_Base_SetConfig+0x32>
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	05db      	lsls	r3, r3, #23
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d007      	beq.n	80074ce <TIM_Base_SetConfig+0x32>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a34      	ldr	r2, [pc, #208]	; (8007594 <TIM_Base_SetConfig+0xf8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_Base_SetConfig+0x32>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a33      	ldr	r2, [pc, #204]	; (8007598 <TIM_Base_SetConfig+0xfc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d108      	bne.n	80074e0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2270      	movs	r2, #112	; 0x70
 80074d2:	4393      	bics	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a2b      	ldr	r2, [pc, #172]	; (8007590 <TIM_Base_SetConfig+0xf4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d01c      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	2380      	movs	r3, #128	; 0x80
 80074ec:	05db      	lsls	r3, r3, #23
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d017      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a27      	ldr	r2, [pc, #156]	; (8007594 <TIM_Base_SetConfig+0xf8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a26      	ldr	r2, [pc, #152]	; (8007598 <TIM_Base_SetConfig+0xfc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00f      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a25      	ldr	r2, [pc, #148]	; (800759c <TIM_Base_SetConfig+0x100>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00b      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a24      	ldr	r2, [pc, #144]	; (80075a0 <TIM_Base_SetConfig+0x104>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d007      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a23      	ldr	r2, [pc, #140]	; (80075a4 <TIM_Base_SetConfig+0x108>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d003      	beq.n	8007522 <TIM_Base_SetConfig+0x86>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a22      	ldr	r2, [pc, #136]	; (80075a8 <TIM_Base_SetConfig+0x10c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d108      	bne.n	8007534 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a21      	ldr	r2, [pc, #132]	; (80075ac <TIM_Base_SetConfig+0x110>)
 8007526:	4013      	ands	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2280      	movs	r2, #128	; 0x80
 8007538:	4393      	bics	r3, r2
 800753a:	001a      	movs	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a0c      	ldr	r2, [pc, #48]	; (8007590 <TIM_Base_SetConfig+0xf4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00b      	beq.n	800757a <TIM_Base_SetConfig+0xde>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a0e      	ldr	r2, [pc, #56]	; (80075a0 <TIM_Base_SetConfig+0x104>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_Base_SetConfig+0xde>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <TIM_Base_SetConfig+0x108>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_Base_SetConfig+0xde>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <TIM_Base_SetConfig+0x10c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d103      	bne.n	8007582 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	691a      	ldr	r2, [r3, #16]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	615a      	str	r2, [r3, #20]
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b004      	add	sp, #16
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40012c00 	.word	0x40012c00
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40002000 	.word	0x40002000
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800
 80075ac:	fffffcff 	.word	0xfffffcff

080075b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b8:	46c0      	nop			; (mov r8, r8)
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b002      	add	sp, #8
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	46bd      	mov	sp, r7
 80075dc:	b002      	add	sp, #8
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e046      	b.n	8007680 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2288      	movs	r2, #136	; 0x88
 80075f6:	589b      	ldr	r3, [r3, r2]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d107      	bne.n	800760c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2284      	movs	r2, #132	; 0x84
 8007600:	2100      	movs	r1, #0
 8007602:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f7fc f9ae 	bl	8003968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2288      	movs	r2, #136	; 0x88
 8007610:	2124      	movs	r1, #36	; 0x24
 8007612:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2101      	movs	r1, #1
 8007620:	438a      	bics	r2, r1
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0018      	movs	r0, r3
 8007628:	f000 f8cc 	bl	80077c4 <UART_SetConfig>
 800762c:	0003      	movs	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e024      	b.n	8007680 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	0018      	movs	r0, r3
 8007642:	f000 fc15 	bl	8007e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	490d      	ldr	r1, [pc, #52]	; (8007688 <HAL_UART_Init+0xa8>)
 8007652:	400a      	ands	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	212a      	movs	r1, #42	; 0x2a
 8007662:	438a      	bics	r2, r1
 8007664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2101      	movs	r1, #1
 8007672:	430a      	orrs	r2, r1
 8007674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 fcad 	bl	8007fd8 <UART_CheckIdleState>
 800767e:	0003      	movs	r3, r0
}
 8007680:	0018      	movs	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	b002      	add	sp, #8
 8007686:	bd80      	pop	{r7, pc}
 8007688:	ffffb7ff 	.word	0xffffb7ff

0800768c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	1dbb      	adds	r3, r7, #6
 800769a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2288      	movs	r2, #136	; 0x88
 80076a0:	589b      	ldr	r3, [r3, r2]
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d000      	beq.n	80076a8 <HAL_UART_Transmit+0x1c>
 80076a6:	e088      	b.n	80077ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_UART_Transmit+0x2a>
 80076ae:	1dbb      	adds	r3, r7, #6
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e080      	b.n	80077bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	2380      	movs	r3, #128	; 0x80
 80076c0:	015b      	lsls	r3, r3, #5
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d109      	bne.n	80076da <HAL_UART_Transmit+0x4e>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2201      	movs	r2, #1
 80076d2:	4013      	ands	r3, r2
 80076d4:	d001      	beq.n	80076da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e070      	b.n	80077bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2290      	movs	r2, #144	; 0x90
 80076de:	2100      	movs	r1, #0
 80076e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2288      	movs	r2, #136	; 0x88
 80076e6:	2121      	movs	r1, #33	; 0x21
 80076e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ea:	f7fc fb4d 	bl	8003d88 <HAL_GetTick>
 80076ee:	0003      	movs	r3, r0
 80076f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1dba      	adds	r2, r7, #6
 80076f6:	2154      	movs	r1, #84	; 0x54
 80076f8:	8812      	ldrh	r2, [r2, #0]
 80076fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	1dba      	adds	r2, r7, #6
 8007700:	2156      	movs	r1, #86	; 0x56
 8007702:	8812      	ldrh	r2, [r2, #0]
 8007704:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	2380      	movs	r3, #128	; 0x80
 800770c:	015b      	lsls	r3, r3, #5
 800770e:	429a      	cmp	r2, r3
 8007710:	d108      	bne.n	8007724 <HAL_UART_Transmit+0x98>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e003      	b.n	800772c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800772c:	e02c      	b.n	8007788 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	0013      	movs	r3, r2
 8007738:	2200      	movs	r2, #0
 800773a:	2180      	movs	r1, #128	; 0x80
 800773c:	f000 fc9a 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007740:	1e03      	subs	r3, r0, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e039      	b.n	80077bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	001a      	movs	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	05d2      	lsls	r2, r2, #23
 800775a:	0dd2      	lsrs	r2, r2, #23
 800775c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3302      	adds	r3, #2
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e007      	b.n	8007776 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2256      	movs	r2, #86	; 0x56
 800777a:	5a9b      	ldrh	r3, [r3, r2]
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b299      	uxth	r1, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2256      	movs	r2, #86	; 0x56
 8007786:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2256      	movs	r2, #86	; 0x56
 800778c:	5a9b      	ldrh	r3, [r3, r2]
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1cc      	bne.n	800772e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	0013      	movs	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	2140      	movs	r1, #64	; 0x40
 80077a2:	f000 fc67 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 80077a6:	1e03      	subs	r3, r0, #0
 80077a8:	d001      	beq.n	80077ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e006      	b.n	80077bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2288      	movs	r2, #136	; 0x88
 80077b2:	2120      	movs	r1, #32
 80077b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b008      	add	sp, #32
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b090      	sub	sp, #64	; 0x40
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077cc:	231a      	movs	r3, #26
 80077ce:	2220      	movs	r2, #32
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	19db      	adds	r3, r3, r7
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4ac1      	ldr	r2, [pc, #772]	; (8007afc <UART_SetConfig+0x338>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	0019      	movs	r1, r3
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	430b      	orrs	r3, r1
 8007804:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4abc      	ldr	r2, [pc, #752]	; (8007b00 <UART_SetConfig+0x33c>)
 800780e:	4013      	ands	r3, r2
 8007810:	0018      	movs	r0, r3
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	68d9      	ldr	r1, [r3, #12]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	0003      	movs	r3, r0
 800781c:	430b      	orrs	r3, r1
 800781e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4ab6      	ldr	r2, [pc, #728]	; (8007b04 <UART_SetConfig+0x340>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <UART_SetConfig+0x80>
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4ab4      	ldr	r2, [pc, #720]	; (8007b08 <UART_SetConfig+0x344>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007840:	4313      	orrs	r3, r2
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4ab0      	ldr	r2, [pc, #704]	; (8007b0c <UART_SetConfig+0x348>)
 800784c:	4013      	ands	r3, r2
 800784e:	0019      	movs	r1, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007856:	430b      	orrs	r3, r1
 8007858:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	220f      	movs	r2, #15
 8007862:	4393      	bics	r3, r2
 8007864:	0018      	movs	r0, r3
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	0003      	movs	r3, r0
 8007870:	430b      	orrs	r3, r1
 8007872:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4aa5      	ldr	r2, [pc, #660]	; (8007b10 <UART_SetConfig+0x34c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d131      	bne.n	80078e2 <UART_SetConfig+0x11e>
 800787e:	4ba5      	ldr	r3, [pc, #660]	; (8007b14 <UART_SetConfig+0x350>)
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	2203      	movs	r2, #3
 8007884:	4013      	ands	r3, r2
 8007886:	2b03      	cmp	r3, #3
 8007888:	d01d      	beq.n	80078c6 <UART_SetConfig+0x102>
 800788a:	d823      	bhi.n	80078d4 <UART_SetConfig+0x110>
 800788c:	2b02      	cmp	r3, #2
 800788e:	d00c      	beq.n	80078aa <UART_SetConfig+0xe6>
 8007890:	d820      	bhi.n	80078d4 <UART_SetConfig+0x110>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <UART_SetConfig+0xd8>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d00e      	beq.n	80078b8 <UART_SetConfig+0xf4>
 800789a:	e01b      	b.n	80078d4 <UART_SetConfig+0x110>
 800789c:	231b      	movs	r3, #27
 800789e:	2220      	movs	r2, #32
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	19db      	adds	r3, r3, r7
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e154      	b.n	8007b54 <UART_SetConfig+0x390>
 80078aa:	231b      	movs	r3, #27
 80078ac:	2220      	movs	r2, #32
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	2202      	movs	r2, #2
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	e14d      	b.n	8007b54 <UART_SetConfig+0x390>
 80078b8:	231b      	movs	r3, #27
 80078ba:	2220      	movs	r2, #32
 80078bc:	189b      	adds	r3, r3, r2
 80078be:	19db      	adds	r3, r3, r7
 80078c0:	2204      	movs	r2, #4
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	e146      	b.n	8007b54 <UART_SetConfig+0x390>
 80078c6:	231b      	movs	r3, #27
 80078c8:	2220      	movs	r2, #32
 80078ca:	189b      	adds	r3, r3, r2
 80078cc:	19db      	adds	r3, r3, r7
 80078ce:	2208      	movs	r2, #8
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e13f      	b.n	8007b54 <UART_SetConfig+0x390>
 80078d4:	231b      	movs	r3, #27
 80078d6:	2220      	movs	r2, #32
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	19db      	adds	r3, r3, r7
 80078dc:	2210      	movs	r2, #16
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e138      	b.n	8007b54 <UART_SetConfig+0x390>
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a8c      	ldr	r2, [pc, #560]	; (8007b18 <UART_SetConfig+0x354>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d131      	bne.n	8007950 <UART_SetConfig+0x18c>
 80078ec:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <UART_SetConfig+0x350>)
 80078ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f0:	220c      	movs	r2, #12
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b0c      	cmp	r3, #12
 80078f6:	d01d      	beq.n	8007934 <UART_SetConfig+0x170>
 80078f8:	d823      	bhi.n	8007942 <UART_SetConfig+0x17e>
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d00c      	beq.n	8007918 <UART_SetConfig+0x154>
 80078fe:	d820      	bhi.n	8007942 <UART_SetConfig+0x17e>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <UART_SetConfig+0x146>
 8007904:	2b04      	cmp	r3, #4
 8007906:	d00e      	beq.n	8007926 <UART_SetConfig+0x162>
 8007908:	e01b      	b.n	8007942 <UART_SetConfig+0x17e>
 800790a:	231b      	movs	r3, #27
 800790c:	2220      	movs	r2, #32
 800790e:	189b      	adds	r3, r3, r2
 8007910:	19db      	adds	r3, r3, r7
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e11d      	b.n	8007b54 <UART_SetConfig+0x390>
 8007918:	231b      	movs	r3, #27
 800791a:	2220      	movs	r2, #32
 800791c:	189b      	adds	r3, r3, r2
 800791e:	19db      	adds	r3, r3, r7
 8007920:	2202      	movs	r2, #2
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e116      	b.n	8007b54 <UART_SetConfig+0x390>
 8007926:	231b      	movs	r3, #27
 8007928:	2220      	movs	r2, #32
 800792a:	189b      	adds	r3, r3, r2
 800792c:	19db      	adds	r3, r3, r7
 800792e:	2204      	movs	r2, #4
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	e10f      	b.n	8007b54 <UART_SetConfig+0x390>
 8007934:	231b      	movs	r3, #27
 8007936:	2220      	movs	r2, #32
 8007938:	189b      	adds	r3, r3, r2
 800793a:	19db      	adds	r3, r3, r7
 800793c:	2208      	movs	r2, #8
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e108      	b.n	8007b54 <UART_SetConfig+0x390>
 8007942:	231b      	movs	r3, #27
 8007944:	2220      	movs	r2, #32
 8007946:	189b      	adds	r3, r3, r2
 8007948:	19db      	adds	r3, r3, r7
 800794a:	2210      	movs	r2, #16
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e101      	b.n	8007b54 <UART_SetConfig+0x390>
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a71      	ldr	r2, [pc, #452]	; (8007b1c <UART_SetConfig+0x358>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d131      	bne.n	80079be <UART_SetConfig+0x1fa>
 800795a:	4b6e      	ldr	r3, [pc, #440]	; (8007b14 <UART_SetConfig+0x350>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	2230      	movs	r2, #48	; 0x30
 8007960:	4013      	ands	r3, r2
 8007962:	2b30      	cmp	r3, #48	; 0x30
 8007964:	d01d      	beq.n	80079a2 <UART_SetConfig+0x1de>
 8007966:	d823      	bhi.n	80079b0 <UART_SetConfig+0x1ec>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d00c      	beq.n	8007986 <UART_SetConfig+0x1c2>
 800796c:	d820      	bhi.n	80079b0 <UART_SetConfig+0x1ec>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <UART_SetConfig+0x1b4>
 8007972:	2b10      	cmp	r3, #16
 8007974:	d00e      	beq.n	8007994 <UART_SetConfig+0x1d0>
 8007976:	e01b      	b.n	80079b0 <UART_SetConfig+0x1ec>
 8007978:	231b      	movs	r3, #27
 800797a:	2220      	movs	r2, #32
 800797c:	189b      	adds	r3, r3, r2
 800797e:	19db      	adds	r3, r3, r7
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e0e6      	b.n	8007b54 <UART_SetConfig+0x390>
 8007986:	231b      	movs	r3, #27
 8007988:	2220      	movs	r2, #32
 800798a:	189b      	adds	r3, r3, r2
 800798c:	19db      	adds	r3, r3, r7
 800798e:	2202      	movs	r2, #2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e0df      	b.n	8007b54 <UART_SetConfig+0x390>
 8007994:	231b      	movs	r3, #27
 8007996:	2220      	movs	r2, #32
 8007998:	189b      	adds	r3, r3, r2
 800799a:	19db      	adds	r3, r3, r7
 800799c:	2204      	movs	r2, #4
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e0d8      	b.n	8007b54 <UART_SetConfig+0x390>
 80079a2:	231b      	movs	r3, #27
 80079a4:	2220      	movs	r2, #32
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	19db      	adds	r3, r3, r7
 80079aa:	2208      	movs	r2, #8
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e0d1      	b.n	8007b54 <UART_SetConfig+0x390>
 80079b0:	231b      	movs	r3, #27
 80079b2:	2220      	movs	r2, #32
 80079b4:	189b      	adds	r3, r3, r2
 80079b6:	19db      	adds	r3, r3, r7
 80079b8:	2210      	movs	r2, #16
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e0ca      	b.n	8007b54 <UART_SetConfig+0x390>
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <UART_SetConfig+0x35c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d106      	bne.n	80079d6 <UART_SetConfig+0x212>
 80079c8:	231b      	movs	r3, #27
 80079ca:	2220      	movs	r2, #32
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	19db      	adds	r3, r3, r7
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e0be      	b.n	8007b54 <UART_SetConfig+0x390>
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a52      	ldr	r2, [pc, #328]	; (8007b24 <UART_SetConfig+0x360>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d106      	bne.n	80079ee <UART_SetConfig+0x22a>
 80079e0:	231b      	movs	r3, #27
 80079e2:	2220      	movs	r2, #32
 80079e4:	189b      	adds	r3, r3, r2
 80079e6:	19db      	adds	r3, r3, r7
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e0b2      	b.n	8007b54 <UART_SetConfig+0x390>
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a4d      	ldr	r2, [pc, #308]	; (8007b28 <UART_SetConfig+0x364>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d106      	bne.n	8007a06 <UART_SetConfig+0x242>
 80079f8:	231b      	movs	r3, #27
 80079fa:	2220      	movs	r2, #32
 80079fc:	189b      	adds	r3, r3, r2
 80079fe:	19db      	adds	r3, r3, r7
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e0a6      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3e      	ldr	r2, [pc, #248]	; (8007b04 <UART_SetConfig+0x340>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d13e      	bne.n	8007a8e <UART_SetConfig+0x2ca>
 8007a10:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <UART_SetConfig+0x350>)
 8007a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a14:	23c0      	movs	r3, #192	; 0xc0
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	4013      	ands	r3, r2
 8007a1a:	22c0      	movs	r2, #192	; 0xc0
 8007a1c:	0112      	lsls	r2, r2, #4
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d027      	beq.n	8007a72 <UART_SetConfig+0x2ae>
 8007a22:	22c0      	movs	r2, #192	; 0xc0
 8007a24:	0112      	lsls	r2, r2, #4
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d82a      	bhi.n	8007a80 <UART_SetConfig+0x2bc>
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	0112      	lsls	r2, r2, #4
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d011      	beq.n	8007a56 <UART_SetConfig+0x292>
 8007a32:	2280      	movs	r2, #128	; 0x80
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d822      	bhi.n	8007a80 <UART_SetConfig+0x2bc>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <UART_SetConfig+0x284>
 8007a3e:	2280      	movs	r2, #128	; 0x80
 8007a40:	00d2      	lsls	r2, r2, #3
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <UART_SetConfig+0x2a0>
 8007a46:	e01b      	b.n	8007a80 <UART_SetConfig+0x2bc>
 8007a48:	231b      	movs	r3, #27
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	19db      	adds	r3, r3, r7
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e07e      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a56:	231b      	movs	r3, #27
 8007a58:	2220      	movs	r2, #32
 8007a5a:	189b      	adds	r3, r3, r2
 8007a5c:	19db      	adds	r3, r3, r7
 8007a5e:	2202      	movs	r2, #2
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e077      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a64:	231b      	movs	r3, #27
 8007a66:	2220      	movs	r2, #32
 8007a68:	189b      	adds	r3, r3, r2
 8007a6a:	19db      	adds	r3, r3, r7
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e070      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a72:	231b      	movs	r3, #27
 8007a74:	2220      	movs	r2, #32
 8007a76:	189b      	adds	r3, r3, r2
 8007a78:	19db      	adds	r3, r3, r7
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e069      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a80:	231b      	movs	r3, #27
 8007a82:	2220      	movs	r2, #32
 8007a84:	189b      	adds	r3, r3, r2
 8007a86:	19db      	adds	r3, r3, r7
 8007a88:	2210      	movs	r2, #16
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e062      	b.n	8007b54 <UART_SetConfig+0x390>
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <UART_SetConfig+0x344>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d157      	bne.n	8007b48 <UART_SetConfig+0x384>
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <UART_SetConfig+0x350>)
 8007a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a9c:	23c0      	movs	r3, #192	; 0xc0
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	22c0      	movs	r2, #192	; 0xc0
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d040      	beq.n	8007b2c <UART_SetConfig+0x368>
 8007aaa:	22c0      	movs	r2, #192	; 0xc0
 8007aac:	0092      	lsls	r2, r2, #2
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d843      	bhi.n	8007b3a <UART_SetConfig+0x376>
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	0092      	lsls	r2, r2, #2
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d011      	beq.n	8007ade <UART_SetConfig+0x31a>
 8007aba:	2280      	movs	r2, #128	; 0x80
 8007abc:	0092      	lsls	r2, r2, #2
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d83b      	bhi.n	8007b3a <UART_SetConfig+0x376>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <UART_SetConfig+0x30c>
 8007ac6:	2280      	movs	r2, #128	; 0x80
 8007ac8:	0052      	lsls	r2, r2, #1
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00e      	beq.n	8007aec <UART_SetConfig+0x328>
 8007ace:	e034      	b.n	8007b3a <UART_SetConfig+0x376>
 8007ad0:	231b      	movs	r3, #27
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	189b      	adds	r3, r3, r2
 8007ad6:	19db      	adds	r3, r3, r7
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	e03a      	b.n	8007b54 <UART_SetConfig+0x390>
 8007ade:	231b      	movs	r3, #27
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	19db      	adds	r3, r3, r7
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e033      	b.n	8007b54 <UART_SetConfig+0x390>
 8007aec:	231b      	movs	r3, #27
 8007aee:	2220      	movs	r2, #32
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	19db      	adds	r3, r3, r7
 8007af4:	2204      	movs	r2, #4
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	e02c      	b.n	8007b54 <UART_SetConfig+0x390>
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	cfff69f3 	.word	0xcfff69f3
 8007b00:	ffffcfff 	.word	0xffffcfff
 8007b04:	40008000 	.word	0x40008000
 8007b08:	40008400 	.word	0x40008400
 8007b0c:	11fff4ff 	.word	0x11fff4ff
 8007b10:	40013800 	.word	0x40013800
 8007b14:	40021000 	.word	0x40021000
 8007b18:	40004400 	.word	0x40004400
 8007b1c:	40004800 	.word	0x40004800
 8007b20:	40004c00 	.word	0x40004c00
 8007b24:	40005000 	.word	0x40005000
 8007b28:	40013c00 	.word	0x40013c00
 8007b2c:	231b      	movs	r3, #27
 8007b2e:	2220      	movs	r2, #32
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	19db      	adds	r3, r3, r7
 8007b34:	2208      	movs	r2, #8
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	e00c      	b.n	8007b54 <UART_SetConfig+0x390>
 8007b3a:	231b      	movs	r3, #27
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	19db      	adds	r3, r3, r7
 8007b42:	2210      	movs	r2, #16
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e005      	b.n	8007b54 <UART_SetConfig+0x390>
 8007b48:	231b      	movs	r3, #27
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	19db      	adds	r3, r3, r7
 8007b50:	2210      	movs	r2, #16
 8007b52:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4ac1      	ldr	r2, [pc, #772]	; (8007e60 <UART_SetConfig+0x69c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d005      	beq.n	8007b6a <UART_SetConfig+0x3a6>
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4ac0      	ldr	r2, [pc, #768]	; (8007e64 <UART_SetConfig+0x6a0>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d000      	beq.n	8007b6a <UART_SetConfig+0x3a6>
 8007b68:	e093      	b.n	8007c92 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b6a:	231b      	movs	r3, #27
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	19db      	adds	r3, r3, r7
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d015      	beq.n	8007ba4 <UART_SetConfig+0x3e0>
 8007b78:	dc18      	bgt.n	8007bac <UART_SetConfig+0x3e8>
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d00d      	beq.n	8007b9a <UART_SetConfig+0x3d6>
 8007b7e:	dc15      	bgt.n	8007bac <UART_SetConfig+0x3e8>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <UART_SetConfig+0x3c6>
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d005      	beq.n	8007b94 <UART_SetConfig+0x3d0>
 8007b88:	e010      	b.n	8007bac <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8a:	f7fe fff7 	bl	8006b7c <HAL_RCC_GetPCLK1Freq>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	e014      	b.n	8007bbe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b94:	4bb4      	ldr	r3, [pc, #720]	; (8007e68 <UART_SetConfig+0x6a4>)
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b98:	e011      	b.n	8007bbe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9a:	f7fe ff63 	bl	8006a64 <HAL_RCC_GetSysClockFreq>
 8007b9e:	0003      	movs	r3, r0
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba2:	e00c      	b.n	8007bbe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba4:	2380      	movs	r3, #128	; 0x80
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007baa:	e008      	b.n	8007bbe <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007bb0:	231a      	movs	r3, #26
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	189b      	adds	r3, r3, r2
 8007bb6:	19db      	adds	r3, r3, r7
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
        break;
 8007bbc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d100      	bne.n	8007bc6 <UART_SetConfig+0x402>
 8007bc4:	e135      	b.n	8007e32 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bca:	4ba8      	ldr	r3, [pc, #672]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007bcc:	0052      	lsls	r2, r2, #1
 8007bce:	5ad3      	ldrh	r3, [r2, r3]
 8007bd0:	0019      	movs	r1, r3
 8007bd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007bd4:	f7fa fecc 	bl	8002970 <__udivsi3>
 8007bd8:	0003      	movs	r3, r0
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	0013      	movs	r3, r2
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d305      	bcc.n	8007bf8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d906      	bls.n	8007c06 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007bf8:	231a      	movs	r3, #26
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	189b      	adds	r3, r3, r2
 8007bfe:	19db      	adds	r3, r3, r7
 8007c00:	2201      	movs	r2, #1
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e044      	b.n	8007c90 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c12:	4b96      	ldr	r3, [pc, #600]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007c14:	0052      	lsls	r2, r2, #1
 8007c16:	5ad3      	ldrh	r3, [r2, r3]
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	f7fb f819 	bl	8002c5c <__aeabi_uldivmod>
 8007c2a:	0002      	movs	r2, r0
 8007c2c:	000b      	movs	r3, r1
 8007c2e:	0e11      	lsrs	r1, r2, #24
 8007c30:	021d      	lsls	r5, r3, #8
 8007c32:	430d      	orrs	r5, r1
 8007c34:	0214      	lsls	r4, r2, #8
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	68b8      	ldr	r0, [r7, #8]
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	1900      	adds	r0, r0, r4
 8007c48:	4169      	adcs	r1, r5
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	2300      	movs	r3, #0
 8007c52:	607b      	str	r3, [r7, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f7fb f800 	bl	8002c5c <__aeabi_uldivmod>
 8007c5c:	0002      	movs	r2, r0
 8007c5e:	000b      	movs	r3, r1
 8007c60:	0013      	movs	r3, r2
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c66:	23c0      	movs	r3, #192	; 0xc0
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d309      	bcc.n	8007c82 <UART_SetConfig+0x4be>
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	035b      	lsls	r3, r3, #13
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d204      	bcs.n	8007c82 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7e:	60da      	str	r2, [r3, #12]
 8007c80:	e006      	b.n	8007c90 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007c82:	231a      	movs	r3, #26
 8007c84:	2220      	movs	r2, #32
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	19db      	adds	r3, r3, r7
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007c8e:	e0d0      	b.n	8007e32 <UART_SetConfig+0x66e>
 8007c90:	e0cf      	b.n	8007e32 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	021b      	lsls	r3, r3, #8
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d000      	beq.n	8007ca0 <UART_SetConfig+0x4dc>
 8007c9e:	e070      	b.n	8007d82 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007ca0:	231b      	movs	r3, #27
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	189b      	adds	r3, r3, r2
 8007ca6:	19db      	adds	r3, r3, r7
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d015      	beq.n	8007cda <UART_SetConfig+0x516>
 8007cae:	dc18      	bgt.n	8007ce2 <UART_SetConfig+0x51e>
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d00d      	beq.n	8007cd0 <UART_SetConfig+0x50c>
 8007cb4:	dc15      	bgt.n	8007ce2 <UART_SetConfig+0x51e>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <UART_SetConfig+0x4fc>
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d005      	beq.n	8007cca <UART_SetConfig+0x506>
 8007cbe:	e010      	b.n	8007ce2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc0:	f7fe ff5c 	bl	8006b7c <HAL_RCC_GetPCLK1Freq>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc8:	e014      	b.n	8007cf4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cca:	4b67      	ldr	r3, [pc, #412]	; (8007e68 <UART_SetConfig+0x6a4>)
 8007ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cce:	e011      	b.n	8007cf4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd0:	f7fe fec8 	bl	8006a64 <HAL_RCC_GetSysClockFreq>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd8:	e00c      	b.n	8007cf4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ce0:	e008      	b.n	8007cf4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007ce6:	231a      	movs	r3, #26
 8007ce8:	2220      	movs	r2, #32
 8007cea:	189b      	adds	r3, r3, r2
 8007cec:	19db      	adds	r3, r3, r7
 8007cee:	2201      	movs	r2, #1
 8007cf0:	701a      	strb	r2, [r3, #0]
        break;
 8007cf2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d100      	bne.n	8007cfc <UART_SetConfig+0x538>
 8007cfa:	e09a      	b.n	8007e32 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d00:	4b5a      	ldr	r3, [pc, #360]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007d02:	0052      	lsls	r2, r2, #1
 8007d04:	5ad3      	ldrh	r3, [r2, r3]
 8007d06:	0019      	movs	r1, r3
 8007d08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d0a:	f7fa fe31 	bl	8002970 <__udivsi3>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	005a      	lsls	r2, r3, #1
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	18d2      	adds	r2, r2, r3
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	0019      	movs	r1, r3
 8007d20:	0010      	movs	r0, r2
 8007d22:	f7fa fe25 	bl	8002970 <__udivsi3>
 8007d26:	0003      	movs	r3, r0
 8007d28:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d921      	bls.n	8007d74 <UART_SetConfig+0x5b0>
 8007d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	025b      	lsls	r3, r3, #9
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d21c      	bcs.n	8007d74 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	200e      	movs	r0, #14
 8007d40:	2420      	movs	r4, #32
 8007d42:	1903      	adds	r3, r0, r4
 8007d44:	19db      	adds	r3, r3, r7
 8007d46:	210f      	movs	r1, #15
 8007d48:	438a      	bics	r2, r1
 8007d4a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2207      	movs	r2, #7
 8007d54:	4013      	ands	r3, r2
 8007d56:	b299      	uxth	r1, r3
 8007d58:	1903      	adds	r3, r0, r4
 8007d5a:	19db      	adds	r3, r3, r7
 8007d5c:	1902      	adds	r2, r0, r4
 8007d5e:	19d2      	adds	r2, r2, r7
 8007d60:	8812      	ldrh	r2, [r2, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	1902      	adds	r2, r0, r4
 8007d6c:	19d2      	adds	r2, r2, r7
 8007d6e:	8812      	ldrh	r2, [r2, #0]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e05e      	b.n	8007e32 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	231a      	movs	r3, #26
 8007d76:	2220      	movs	r2, #32
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	19db      	adds	r3, r3, r7
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	e057      	b.n	8007e32 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d82:	231b      	movs	r3, #27
 8007d84:	2220      	movs	r2, #32
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	19db      	adds	r3, r3, r7
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d015      	beq.n	8007dbc <UART_SetConfig+0x5f8>
 8007d90:	dc18      	bgt.n	8007dc4 <UART_SetConfig+0x600>
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d00d      	beq.n	8007db2 <UART_SetConfig+0x5ee>
 8007d96:	dc15      	bgt.n	8007dc4 <UART_SetConfig+0x600>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <UART_SetConfig+0x5de>
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d005      	beq.n	8007dac <UART_SetConfig+0x5e8>
 8007da0:	e010      	b.n	8007dc4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da2:	f7fe feeb 	bl	8006b7c <HAL_RCC_GetPCLK1Freq>
 8007da6:	0003      	movs	r3, r0
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007daa:	e014      	b.n	8007dd6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dac:	4b2e      	ldr	r3, [pc, #184]	; (8007e68 <UART_SetConfig+0x6a4>)
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007db0:	e011      	b.n	8007dd6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007db2:	f7fe fe57 	bl	8006a64 <HAL_RCC_GetSysClockFreq>
 8007db6:	0003      	movs	r3, r0
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dba:	e00c      	b.n	8007dd6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dc2:	e008      	b.n	8007dd6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007dc8:	231a      	movs	r3, #26
 8007dca:	2220      	movs	r2, #32
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	19db      	adds	r3, r3, r7
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
        break;
 8007dd4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d02a      	beq.n	8007e32 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de0:	4b22      	ldr	r3, [pc, #136]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007de2:	0052      	lsls	r2, r2, #1
 8007de4:	5ad3      	ldrh	r3, [r2, r3]
 8007de6:	0019      	movs	r1, r3
 8007de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007dea:	f7fa fdc1 	bl	8002970 <__udivsi3>
 8007dee:	0003      	movs	r3, r0
 8007df0:	001a      	movs	r2, r3
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	18d2      	adds	r2, r2, r3
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	0019      	movs	r1, r3
 8007e00:	0010      	movs	r0, r2
 8007e02:	f7fa fdb5 	bl	8002970 <__udivsi3>
 8007e06:	0003      	movs	r3, r0
 8007e08:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	2b0f      	cmp	r3, #15
 8007e0e:	d90a      	bls.n	8007e26 <UART_SetConfig+0x662>
 8007e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	025b      	lsls	r3, r3, #9
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d205      	bcs.n	8007e26 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60da      	str	r2, [r3, #12]
 8007e24:	e005      	b.n	8007e32 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007e26:	231a      	movs	r3, #26
 8007e28:	2220      	movs	r2, #32
 8007e2a:	189b      	adds	r3, r3, r2
 8007e2c:	19db      	adds	r3, r3, r7
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	226a      	movs	r2, #106	; 0x6a
 8007e36:	2101      	movs	r1, #1
 8007e38:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	2268      	movs	r2, #104	; 0x68
 8007e3e:	2101      	movs	r1, #1
 8007e40:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	2200      	movs	r2, #0
 8007e46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e4e:	231a      	movs	r3, #26
 8007e50:	2220      	movs	r2, #32
 8007e52:	189b      	adds	r3, r3, r2
 8007e54:	19db      	adds	r3, r3, r7
 8007e56:	781b      	ldrb	r3, [r3, #0]
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b010      	add	sp, #64	; 0x40
 8007e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e60:	40008000 	.word	0x40008000
 8007e64:	40008400 	.word	0x40008400
 8007e68:	00f42400 	.word	0x00f42400
 8007e6c:	080184e4 	.word	0x080184e4

08007e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d00b      	beq.n	8007e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a4a      	ldr	r2, [pc, #296]	; (8007fb4 <UART_AdvFeatureConfig+0x144>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d00b      	beq.n	8007ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4a43      	ldr	r2, [pc, #268]	; (8007fb8 <UART_AdvFeatureConfig+0x148>)
 8007eac:	4013      	ands	r3, r2
 8007eae:	0019      	movs	r1, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d00b      	beq.n	8007ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4a3b      	ldr	r2, [pc, #236]	; (8007fbc <UART_AdvFeatureConfig+0x14c>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	0019      	movs	r1, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	d00b      	beq.n	8007f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	4a34      	ldr	r2, [pc, #208]	; (8007fc0 <UART_AdvFeatureConfig+0x150>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	2210      	movs	r2, #16
 8007f06:	4013      	ands	r3, r2
 8007f08:	d00b      	beq.n	8007f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4a2c      	ldr	r2, [pc, #176]	; (8007fc4 <UART_AdvFeatureConfig+0x154>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	0019      	movs	r1, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	2220      	movs	r2, #32
 8007f28:	4013      	ands	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	4a25      	ldr	r2, [pc, #148]	; (8007fc8 <UART_AdvFeatureConfig+0x158>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	0019      	movs	r1, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d01d      	beq.n	8007f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4a1d      	ldr	r2, [pc, #116]	; (8007fcc <UART_AdvFeatureConfig+0x15c>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	0019      	movs	r1, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	035b      	lsls	r3, r3, #13
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d10b      	bne.n	8007f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4a15      	ldr	r2, [pc, #84]	; (8007fd0 <UART_AdvFeatureConfig+0x160>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	0019      	movs	r1, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	4013      	ands	r3, r2
 8007f92:	d00b      	beq.n	8007fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	4a0e      	ldr	r2, [pc, #56]	; (8007fd4 <UART_AdvFeatureConfig+0x164>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	0019      	movs	r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	605a      	str	r2, [r3, #4]
  }
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b002      	add	sp, #8
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	fffdffff 	.word	0xfffdffff
 8007fb8:	fffeffff 	.word	0xfffeffff
 8007fbc:	fffbffff 	.word	0xfffbffff
 8007fc0:	ffff7fff 	.word	0xffff7fff
 8007fc4:	ffffefff 	.word	0xffffefff
 8007fc8:	ffffdfff 	.word	0xffffdfff
 8007fcc:	ffefffff 	.word	0xffefffff
 8007fd0:	ff9fffff 	.word	0xff9fffff
 8007fd4:	fff7ffff 	.word	0xfff7ffff

08007fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2290      	movs	r2, #144	; 0x90
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fe8:	f7fb fece 	bl	8003d88 <HAL_GetTick>
 8007fec:	0003      	movs	r3, r0
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d10c      	bne.n	8008018 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2280      	movs	r2, #128	; 0x80
 8008002:	0391      	lsls	r1, r2, #14
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	4a1a      	ldr	r2, [pc, #104]	; (8008070 <UART_CheckIdleState+0x98>)
 8008008:	9200      	str	r2, [sp, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	f000 f832 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8008010:	1e03      	subs	r3, r0, #0
 8008012:	d001      	beq.n	8008018 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e026      	b.n	8008066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2204      	movs	r2, #4
 8008020:	4013      	ands	r3, r2
 8008022:	2b04      	cmp	r3, #4
 8008024:	d10c      	bne.n	8008040 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2280      	movs	r2, #128	; 0x80
 800802a:	03d1      	lsls	r1, r2, #15
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4a10      	ldr	r2, [pc, #64]	; (8008070 <UART_CheckIdleState+0x98>)
 8008030:	9200      	str	r2, [sp, #0]
 8008032:	2200      	movs	r2, #0
 8008034:	f000 f81e 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8008038:	1e03      	subs	r3, r0, #0
 800803a:	d001      	beq.n	8008040 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e012      	b.n	8008066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2288      	movs	r2, #136	; 0x88
 8008044:	2120      	movs	r1, #32
 8008046:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	228c      	movs	r2, #140	; 0x8c
 800804c:	2120      	movs	r1, #32
 800804e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2284      	movs	r2, #132	; 0x84
 8008060:	2100      	movs	r1, #0
 8008062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	0018      	movs	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	b004      	add	sp, #16
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	01ffffff 	.word	0x01ffffff

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b094      	sub	sp, #80	; 0x50
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	1dfb      	adds	r3, r7, #7
 8008082:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e0a7      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008088:	3301      	adds	r3, #1
 800808a:	d100      	bne.n	800808e <UART_WaitOnFlagUntilTimeout+0x1a>
 800808c:	e0a3      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fb fe7b 	bl	8003d88 <HAL_GetTick>
 8008092:	0002      	movs	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d13f      	bne.n	8008124 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a4:	f3ef 8310 	mrs	r3, PRIMASK
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	2301      	movs	r3, #1
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	494e      	ldr	r1, [pc, #312]	; (8008200 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80080c6:	400a      	ands	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	f383 8810 	msr	PRIMASK, r3
}
 80080d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d6:	f3ef 8310 	mrs	r3, PRIMASK
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080de:	643b      	str	r3, [r7, #64]	; 0x40
 80080e0:	2301      	movs	r3, #1
 80080e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	f383 8810 	msr	PRIMASK, r3
}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2101      	movs	r1, #1
 80080f8:	438a      	bics	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
 80080fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008102:	f383 8810 	msr	PRIMASK, r3
}
 8008106:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2288      	movs	r2, #136	; 0x88
 800810c:	2120      	movs	r1, #32
 800810e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	228c      	movs	r2, #140	; 0x8c
 8008114:	2120      	movs	r1, #32
 8008116:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2284      	movs	r2, #132	; 0x84
 800811c:	2100      	movs	r1, #0
 800811e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e069      	b.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2204      	movs	r2, #4
 800812c:	4013      	ands	r3, r2
 800812e:	d052      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69da      	ldr	r2, [r3, #28]
 8008136:	2380      	movs	r3, #128	; 0x80
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	401a      	ands	r2, r3
 800813c:	2380      	movs	r3, #128	; 0x80
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	429a      	cmp	r2, r3
 8008142:	d148      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2280      	movs	r2, #128	; 0x80
 800814a:	0112      	lsls	r2, r2, #4
 800814c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800814e:	f3ef 8310 	mrs	r3, PRIMASK
 8008152:	613b      	str	r3, [r7, #16]
  return(result);
 8008154:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008158:	2301      	movs	r3, #1
 800815a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f383 8810 	msr	PRIMASK, r3
}
 8008162:	46c0      	nop			; (mov r8, r8)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4924      	ldr	r1, [pc, #144]	; (8008200 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008170:	400a      	ands	r2, r1
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008176:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f383 8810 	msr	PRIMASK, r3
}
 800817e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008180:	f3ef 8310 	mrs	r3, PRIMASK
 8008184:	61fb      	str	r3, [r7, #28]
  return(result);
 8008186:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008188:	64bb      	str	r3, [r7, #72]	; 0x48
 800818a:	2301      	movs	r3, #1
 800818c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	f383 8810 	msr	PRIMASK, r3
}
 8008194:	46c0      	nop			; (mov r8, r8)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2101      	movs	r1, #1
 80081a2:	438a      	bics	r2, r1
 80081a4:	609a      	str	r2, [r3, #8]
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	f383 8810 	msr	PRIMASK, r3
}
 80081b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2288      	movs	r2, #136	; 0x88
 80081b6:	2120      	movs	r1, #32
 80081b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	228c      	movs	r2, #140	; 0x8c
 80081be:	2120      	movs	r1, #32
 80081c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2290      	movs	r2, #144	; 0x90
 80081c6:	2120      	movs	r1, #32
 80081c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2284      	movs	r2, #132	; 0x84
 80081ce:	2100      	movs	r1, #0
 80081d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e010      	b.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	425a      	negs	r2, r3
 80081e6:	4153      	adcs	r3, r2
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	001a      	movs	r2, r3
 80081ec:	1dfb      	adds	r3, r7, #7
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d100      	bne.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80081f4:	e747      	b.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	0018      	movs	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b014      	add	sp, #80	; 0x50
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	fffffe5f 	.word	0xfffffe5f

08008204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2284      	movs	r2, #132	; 0x84
 8008210:	5c9b      	ldrb	r3, [r3, r2]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_UARTEx_DisableFifoMode+0x16>
 8008216:	2302      	movs	r3, #2
 8008218:	e027      	b.n	800826a <HAL_UARTEx_DisableFifoMode+0x66>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2284      	movs	r2, #132	; 0x84
 800821e:	2101      	movs	r1, #1
 8008220:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2288      	movs	r2, #136	; 0x88
 8008226:	2124      	movs	r1, #36	; 0x24
 8008228:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2101      	movs	r1, #1
 800823e:	438a      	bics	r2, r1
 8008240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008246:	4013      	ands	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2288      	movs	r2, #136	; 0x88
 800825c:	2120      	movs	r1, #32
 800825e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2284      	movs	r2, #132	; 0x84
 8008264:	2100      	movs	r1, #0
 8008266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b004      	add	sp, #16
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	dfffffff 	.word	0xdfffffff

08008278 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2284      	movs	r2, #132	; 0x84
 8008286:	5c9b      	ldrb	r3, [r3, r2]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800828c:	2302      	movs	r3, #2
 800828e:	e02e      	b.n	80082ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2284      	movs	r2, #132	; 0x84
 8008294:	2101      	movs	r1, #1
 8008296:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2288      	movs	r2, #136	; 0x88
 800829c:	2124      	movs	r1, #36	; 0x24
 800829e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2101      	movs	r1, #1
 80082b4:	438a      	bics	r2, r1
 80082b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	08d9      	lsrs	r1, r3, #3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f000 f854 	bl	800837c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2288      	movs	r2, #136	; 0x88
 80082e0:	2120      	movs	r1, #32
 80082e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2284      	movs	r2, #132	; 0x84
 80082e8:	2100      	movs	r1, #0
 80082ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	0018      	movs	r0, r3
 80082f0:	46bd      	mov	sp, r7
 80082f2:	b004      	add	sp, #16
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2284      	movs	r2, #132	; 0x84
 8008306:	5c9b      	ldrb	r3, [r3, r2]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800830c:	2302      	movs	r3, #2
 800830e:	e02f      	b.n	8008370 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2284      	movs	r2, #132	; 0x84
 8008314:	2101      	movs	r1, #1
 8008316:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2288      	movs	r2, #136	; 0x88
 800831c:	2124      	movs	r1, #36	; 0x24
 800831e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2101      	movs	r1, #1
 8008334:	438a      	bics	r2, r1
 8008336:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	4a0e      	ldr	r2, [pc, #56]	; (8008378 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008340:	4013      	ands	r3, r2
 8008342:	0019      	movs	r1, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	0018      	movs	r0, r3
 8008352:	f000 f813 	bl	800837c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2288      	movs	r2, #136	; 0x88
 8008362:	2120      	movs	r1, #32
 8008364:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2284      	movs	r2, #132	; 0x84
 800836a:	2100      	movs	r1, #0
 800836c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	0018      	movs	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	b004      	add	sp, #16
 8008376:	bd80      	pop	{r7, pc}
 8008378:	f1ffffff 	.word	0xf1ffffff

0800837c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008388:	2b00      	cmp	r3, #0
 800838a:	d108      	bne.n	800839e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	226a      	movs	r2, #106	; 0x6a
 8008390:	2101      	movs	r1, #1
 8008392:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2268      	movs	r2, #104	; 0x68
 8008398:	2101      	movs	r1, #1
 800839a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800839c:	e043      	b.n	8008426 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800839e:	260f      	movs	r6, #15
 80083a0:	19bb      	adds	r3, r7, r6
 80083a2:	2208      	movs	r2, #8
 80083a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083a6:	200e      	movs	r0, #14
 80083a8:	183b      	adds	r3, r7, r0
 80083aa:	2208      	movs	r2, #8
 80083ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	0e5b      	lsrs	r3, r3, #25
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	240d      	movs	r4, #13
 80083ba:	193b      	adds	r3, r7, r4
 80083bc:	2107      	movs	r1, #7
 80083be:	400a      	ands	r2, r1
 80083c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	0f5b      	lsrs	r3, r3, #29
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	250c      	movs	r5, #12
 80083ce:	197b      	adds	r3, r7, r5
 80083d0:	2107      	movs	r1, #7
 80083d2:	400a      	ands	r2, r1
 80083d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	197a      	adds	r2, r7, r5
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	4914      	ldr	r1, [pc, #80]	; (8008430 <UARTEx_SetNbDataToProcess+0xb4>)
 80083e0:	5c8a      	ldrb	r2, [r1, r2]
 80083e2:	435a      	muls	r2, r3
 80083e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80083e6:	197b      	adds	r3, r7, r5
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	4a12      	ldr	r2, [pc, #72]	; (8008434 <UARTEx_SetNbDataToProcess+0xb8>)
 80083ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ee:	0019      	movs	r1, r3
 80083f0:	f7fa fb48 	bl	8002a84 <__divsi3>
 80083f4:	0003      	movs	r3, r0
 80083f6:	b299      	uxth	r1, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	226a      	movs	r2, #106	; 0x6a
 80083fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083fe:	19bb      	adds	r3, r7, r6
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	193a      	adds	r2, r7, r4
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	490a      	ldr	r1, [pc, #40]	; (8008430 <UARTEx_SetNbDataToProcess+0xb4>)
 8008408:	5c8a      	ldrb	r2, [r1, r2]
 800840a:	435a      	muls	r2, r3
 800840c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800840e:	193b      	adds	r3, r7, r4
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	4a08      	ldr	r2, [pc, #32]	; (8008434 <UARTEx_SetNbDataToProcess+0xb8>)
 8008414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008416:	0019      	movs	r1, r3
 8008418:	f7fa fb34 	bl	8002a84 <__divsi3>
 800841c:	0003      	movs	r3, r0
 800841e:	b299      	uxth	r1, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2268      	movs	r2, #104	; 0x68
 8008424:	5299      	strh	r1, [r3, r2]
}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	b005      	add	sp, #20
 800842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	080184fc 	.word	0x080184fc
 8008434:	08018504 	.word	0x08018504

08008438 <LL_DMA_ConfigTransfer>:
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8008448:	4a0c      	ldr	r2, [pc, #48]	; (800847c <LL_DMA_ConfigTransfer+0x44>)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	001a      	movs	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	18d3      	adds	r3, r2, r3
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a09      	ldr	r2, [pc, #36]	; (8008480 <LL_DMA_ConfigTransfer+0x48>)
 800845a:	4013      	ands	r3, r2
 800845c:	0019      	movs	r1, r3
 800845e:	4a07      	ldr	r2, [pc, #28]	; (800847c <LL_DMA_ConfigTransfer+0x44>)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	18d3      	adds	r3, r2, r3
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	001a      	movs	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	18d3      	adds	r3, r2, r3
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	430a      	orrs	r2, r1
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	46bd      	mov	sp, r7
 8008476:	b006      	add	sp, #24
 8008478:	bd80      	pop	{r7, pc}
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	0801850c 	.word	0x0801850c
 8008480:	ffff800f 	.word	0xffff800f

08008484 <LL_DMA_SetDataLength>:
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8008494:	4a0b      	ldr	r2, [pc, #44]	; (80084c4 <LL_DMA_SetDataLength+0x40>)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	001a      	movs	r2, r3
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	18d3      	adds	r3, r2, r3
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	0419      	lsls	r1, r3, #16
 80084a8:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <LL_DMA_SetDataLength+0x40>)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	18d3      	adds	r3, r2, r3
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	001a      	movs	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	18d3      	adds	r3, r2, r3
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	605a      	str	r2, [r3, #4]
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	46bd      	mov	sp, r7
 80084c0:	b006      	add	sp, #24
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	0801850c 	.word	0x0801850c

080084c8 <LL_DMA_SetMemoryAddress>:
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80084d8:	4a06      	ldr	r2, [pc, #24]	; (80084f4 <LL_DMA_SetMemoryAddress+0x2c>)
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	18d3      	adds	r3, r2, r3
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	001a      	movs	r2, r3
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	18d3      	adds	r3, r2, r3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
}
 80084ea:	46c0      	nop			; (mov r8, r8)
 80084ec:	46bd      	mov	sp, r7
 80084ee:	b006      	add	sp, #24
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	0801850c 	.word	0x0801850c

080084f8 <LL_DMA_SetPeriphAddress>:
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8008508:	4a06      	ldr	r2, [pc, #24]	; (8008524 <LL_DMA_SetPeriphAddress+0x2c>)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	18d3      	adds	r3, r2, r3
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	001a      	movs	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	18d3      	adds	r3, r2, r3
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	46bd      	mov	sp, r7
 800851e:	b006      	add	sp, #24
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	0801850c 	.word	0x0801850c

08008528 <LL_DMA_SetPeriphRequest>:
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	0a9b      	lsrs	r3, r3, #10
 8008538:	4a0f      	ldr	r2, [pc, #60]	; (8008578 <LL_DMA_SetPeriphRequest+0x50>)
 800853a:	405a      	eors	r2, r3
 800853c:	0013      	movs	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	18d3      	adds	r3, r2, r3
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4a0b      	ldr	r2, [pc, #44]	; (800857c <LL_DMA_SetPeriphRequest+0x54>)
 800854e:	4694      	mov	ip, r2
 8008550:	4463      	add	r3, ip
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	227f      	movs	r2, #127	; 0x7f
 8008556:	4393      	bics	r3, r2
 8008558:	0019      	movs	r1, r3
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	18d3      	adds	r3, r2, r3
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4a06      	ldr	r2, [pc, #24]	; (800857c <LL_DMA_SetPeriphRequest+0x54>)
 8008564:	4694      	mov	ip, r2
 8008566:	4463      	add	r3, ip
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	430a      	orrs	r2, r1
 800856c:	601a      	str	r2, [r3, #0]
}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	46bd      	mov	sp, r7
 8008572:	b006      	add	sp, #24
 8008574:	bd80      	pop	{r7, pc}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	00100080 	.word	0x00100080
 800857c:	40020800 	.word	0x40020800

08008580 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8008594:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800859a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80085a0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80085a6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80085ac:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80085b2:	431a      	orrs	r2, r3
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	0018      	movs	r0, r3
 80085ba:	f7ff ff3d 	bl	8008438 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0018      	movs	r0, r3
 80085c8:	f7ff ff7e 	bl	80084c8 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f7ff ff8f 	bl	80084f8 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1a      	ldr	r2, [r3, #32]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7ff ff4e 	bl	8008484 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	0018      	movs	r0, r3
 80085f2:	f7ff ff99 	bl	8008528 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	0018      	movs	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b004      	add	sp, #16
 80085fe:	bd80      	pop	{r7, pc}

08008600 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	629a      	str	r2, [r3, #40]	; 0x28
}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	46bd      	mov	sp, r7
 800864e:	b002      	add	sp, #8
 8008650:	bd80      	pop	{r7, pc}

08008652 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6819      	ldr	r1, [r3, #0]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	435b      	muls	r3, r3
 8008666:	001a      	movs	r2, r3
 8008668:	0013      	movs	r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	189b      	adds	r3, r3, r2
 800866e:	43db      	mvns	r3, r3
 8008670:	400b      	ands	r3, r1
 8008672:	001a      	movs	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	435b      	muls	r3, r3
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	434b      	muls	r3, r1
 800867c:	431a      	orrs	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	46bd      	mov	sp, r7
 8008686:	b004      	add	sp, #16
 8008688:	bd80      	pop	{r7, pc}

0800868a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	43d2      	mvns	r2, r2
 800869e:	401a      	ands	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	434b      	muls	r3, r1
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	605a      	str	r2, [r3, #4]
}
 80086ac:	46c0      	nop			; (mov r8, r8)
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b004      	add	sp, #16
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	435b      	muls	r3, r3
 80086c8:	001a      	movs	r2, r3
 80086ca:	0013      	movs	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	43db      	mvns	r3, r3
 80086d2:	400b      	ands	r3, r1
 80086d4:	001a      	movs	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	435b      	muls	r3, r3
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	434b      	muls	r3, r1
 80086de:	431a      	orrs	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	46c0      	nop			; (mov r8, r8)
 80086e6:	46bd      	mov	sp, r7
 80086e8:	b004      	add	sp, #16
 80086ea:	bd80      	pop	{r7, pc}

080086ec <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68d9      	ldr	r1, [r3, #12]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	435b      	muls	r3, r3
 8008700:	001a      	movs	r2, r3
 8008702:	0013      	movs	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	189b      	adds	r3, r3, r2
 8008708:	43db      	mvns	r3, r3
 800870a:	400b      	ands	r3, r1
 800870c:	001a      	movs	r2, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	435b      	muls	r3, r3
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	434b      	muls	r3, r1
 8008716:	431a      	orrs	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	60da      	str	r2, [r3, #12]
}
 800871c:	46c0      	nop			; (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b004      	add	sp, #16
 8008722:	bd80      	pop	{r7, pc}

08008724 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a19      	ldr	r1, [r3, #32]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	435b      	muls	r3, r3
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	4353      	muls	r3, r2
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	435a      	muls	r2, r3
 8008740:	0013      	movs	r3, r2
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	43db      	mvns	r3, r3
 8008748:	400b      	ands	r3, r1
 800874a:	001a      	movs	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	435b      	muls	r3, r3
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	434b      	muls	r3, r1
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	434b      	muls	r3, r1
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	434b      	muls	r3, r1
 800875c:	431a      	orrs	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	b004      	add	sp, #16
 8008768:	bd80      	pop	{r7, pc}

0800876a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	0a1b      	lsrs	r3, r3, #8
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	0a12      	lsrs	r2, r2, #8
 8008782:	4353      	muls	r3, r2
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	0a12      	lsrs	r2, r2, #8
 8008788:	4353      	muls	r3, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	0a12      	lsrs	r2, r2, #8
 800878e:	435a      	muls	r2, r3
 8008790:	0013      	movs	r3, r2
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	43db      	mvns	r3, r3
 8008798:	400b      	ands	r3, r1
 800879a:	001a      	movs	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	0a09      	lsrs	r1, r1, #8
 80087a4:	434b      	muls	r3, r1
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	0a09      	lsrs	r1, r1, #8
 80087aa:	434b      	muls	r3, r1
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	0a09      	lsrs	r1, r1, #8
 80087b0:	434b      	muls	r3, r1
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	434b      	muls	r3, r1
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	b004      	add	sp, #16
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80087d2:	e047      	b.n	8008864 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2101      	movs	r1, #1
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4091      	lsls	r1, r2
 80087de:	000a      	movs	r2, r1
 80087e0:	4013      	ands	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d039      	beq.n	800885e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d003      	beq.n	80087fa <LL_GPIO_Init+0x36>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d10d      	bne.n	8008816 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	0018      	movs	r0, r3
 8008804:	f7ff ff56 	bl	80086b4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	68b9      	ldr	r1, [r7, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	0018      	movs	r0, r3
 8008812:	f7ff ff3a 	bl	800868a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff ff64 	bl	80086ec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d111      	bne.n	8008850 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2bff      	cmp	r3, #255	; 0xff
 8008830:	d807      	bhi.n	8008842 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	0018      	movs	r0, r3
 800883c:	f7ff ff72 	bl	8008724 <LL_GPIO_SetAFPin_0_7>
 8008840:	e006      	b.n	8008850 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695a      	ldr	r2, [r3, #20]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0018      	movs	r0, r3
 800884c:	f7ff ff8d 	bl	800876a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	0018      	movs	r0, r3
 800885a:	f7ff fefa 	bl	8008652 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	40da      	lsrs	r2, r3
 800886c:	1e13      	subs	r3, r2, #0
 800886e:	d1b1      	bne.n	80087d4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8008870:	2300      	movs	r3, #0
}
 8008872:	0018      	movs	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	b004      	add	sp, #16
 8008878:	bd80      	pop	{r7, pc}

0800887a <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	085a      	lsrs	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <LL_APB1_GRP1_EnableClock>:
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80088a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80088ac:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80088ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	4013      	ands	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80088b6:	68fb      	ldr	r3, [r7, #12]
}
 80088b8:	46c0      	nop			; (mov r8, r8)
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b004      	add	sp, #16
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	40021000 	.word	0x40021000

080088c4 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a16      	ldr	r2, [pc, #88]	; (800892c <LL_UCPD_Init+0x68>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d104      	bne.n	80088e0 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	049b      	lsls	r3, r3, #18
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff ffdc 	bl	8008898 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a13      	ldr	r2, [pc, #76]	; (8008930 <LL_UCPD_Init+0x6c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d104      	bne.n	80088f2 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 80088e8:	2380      	movs	r3, #128	; 0x80
 80088ea:	04db      	lsls	r3, r3, #19
 80088ec:	0018      	movs	r0, r3
 80088ee:	f7ff ffd3 	bl	8008898 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	0018      	movs	r0, r3
 80088f6:	f7ff ffc0 	bl	800887a <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a0d      	ldr	r2, [pc, #52]	; (8008934 <LL_UCPD_Init+0x70>)
 8008900:	401a      	ands	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	6819      	ldr	r1, [r3, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	02db      	lsls	r3, r3, #11
 800890c:	4319      	orrs	r1, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	019b      	lsls	r3, r3, #6
 8008914:	4319      	orrs	r1, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	430b      	orrs	r3, r1
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8008922:	2300      	movs	r3, #0
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b002      	add	sp, #8
 800892a:	bd80      	pop	{r7, pc}
 800892c:	4000a000 	.word	0x4000a000
 8008930:	4000a400 	.word	0x4000a400
 8008934:	fff10000 	.word	0xfff10000

08008938 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2280      	movs	r2, #128	; 0x80
 8008944:	0292      	lsls	r2, r2, #10
 8008946:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2207      	movs	r2, #7
 800894c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2210      	movs	r2, #16
 8008952:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	220d      	movs	r2, #13
 8008958:	60da      	str	r2, [r3, #12]
}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	46bd      	mov	sp, r7
 800895e:	b002      	add	sp, #8
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <USB_EnableGlobalInt+0x24>)
 8008974:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	0018      	movs	r0, r3
 8008980:	46bd      	mov	sp, r7
 8008982:	b004      	add	sp, #16
 8008984:	bd80      	pop	{r7, pc}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	0000bf80 	.word	0x0000bf80

0800898c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <USB_DisableGlobalInt+0x24>)
 8008996:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	43d2      	mvns	r2, r2
 80089a0:	401a      	ands	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b004      	add	sp, #16
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	0000bf80 	.word	0x0000bf80

080089b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	000a      	movs	r2, r1
 80089be:	1cfb      	adds	r3, r7, #3
 80089c0:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 80089c2:	1cfb      	adds	r3, r7, #3
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	085a      	lsrs	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	641a      	str	r2, [r3, #64]	; 0x40
 80089d6:	e006      	b.n	80089e6 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	2280      	movs	r2, #128	; 0x80
 80089de:	0612      	lsls	r2, r2, #24
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b002      	add	sp, #8
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80089f0:	b084      	sub	sp, #16
 80089f2:	b590      	push	{r4, r7, lr}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	2004      	movs	r0, #4
 80089fc:	2410      	movs	r4, #16
 80089fe:	1900      	adds	r0, r0, r4
 8008a00:	2408      	movs	r4, #8
 8008a02:	46a4      	mov	ip, r4
 8008a04:	44bc      	add	ip, r7
 8008a06:	4460      	add	r0, ip
 8008a08:	6001      	str	r1, [r0, #0]
 8008a0a:	6042      	str	r2, [r0, #4]
 8008a0c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4393      	bics	r3, r2
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2100      	movs	r1, #0
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7ff ffc4 	bl	80089b4 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	0018      	movs	r0, r3
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b003      	add	sp, #12
 8008a3a:	bc90      	pop	{r4, r7}
 8008a3c:	bc08      	pop	{r3}
 8008a3e:	b004      	add	sp, #16
 8008a40:	4718      	bx	r3
	...

08008a44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b09e      	sub	sp, #120	; 0x78
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a4e:	2377      	movs	r3, #119	; 0x77
 8008a50:	18fb      	adds	r3, r7, r3
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	18d3      	adds	r3, r2, r3
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4ad8      	ldr	r2, [pc, #864]	; (8008dc4 <USB_ActivateEndpoint+0x380>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d00e      	beq.n	8008a8e <USB_ActivateEndpoint+0x4a>
 8008a70:	dc19      	bgt.n	8008aa6 <USB_ActivateEndpoint+0x62>
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d01c      	beq.n	8008ab0 <USB_ActivateEndpoint+0x6c>
 8008a76:	dc16      	bgt.n	8008aa6 <USB_ActivateEndpoint+0x62>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <USB_ActivateEndpoint+0x3e>
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d00c      	beq.n	8008a9a <USB_ActivateEndpoint+0x56>
 8008a80:	e011      	b.n	8008aa6 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a84:	2280      	movs	r2, #128	; 0x80
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008a8c:	e011      	b.n	8008ab2 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a90:	22c0      	movs	r2, #192	; 0xc0
 8008a92:	00d2      	lsls	r2, r2, #3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008a98:	e00b      	b.n	8008ab2 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	00d2      	lsls	r2, r2, #3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8008aa4:	e005      	b.n	8008ab2 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8008aa6:	2377      	movs	r3, #119	; 0x77
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	2201      	movs	r2, #1
 8008aac:	701a      	strb	r2, [r3, #0]
      break;
 8008aae:	e000      	b.n	8008ab2 <USB_ActivateEndpoint+0x6e>
      break;
 8008ab0:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	18d3      	adds	r3, r2, r3
 8008abc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008abe:	49c2      	ldr	r1, [pc, #776]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	18d3      	adds	r3, r2, r3
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4abe      	ldr	r2, [pc, #760]	; (8008dcc <USB_ActivateEndpoint+0x388>)
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	18d3      	adds	r3, r2, r3
 8008ae6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ae8:	49b7      	ldr	r1, [pc, #732]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008aea:	430a      	orrs	r2, r1
 8008aec:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	7a9b      	ldrb	r3, [r3, #10]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d000      	beq.n	8008af8 <USB_ActivateEndpoint+0xb4>
 8008af6:	e177      	b.n	8008de8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d06e      	beq.n	8008bde <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4ab2      	ldr	r2, [pc, #712]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008b08:	4694      	mov	ip, r2
 8008b0a:	4463      	add	r3, ip
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	49ae      	ldr	r1, [pc, #696]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008b16:	468c      	mov	ip, r1
 8008b18:	4463      	add	r3, ip
 8008b1a:	0c12      	lsrs	r2, r2, #16
 8008b1c:	0412      	lsls	r2, r2, #16
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4aaa      	ldr	r2, [pc, #680]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008b28:	4694      	mov	ip, r2
 8008b2a:	4463      	add	r3, ip
 8008b2c:	6819      	ldr	r1, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	009a      	lsls	r2, r3, #2
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	48a4      	ldr	r0, [pc, #656]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008b40:	4684      	mov	ip, r0
 8008b42:	4463      	add	r3, ip
 8008b44:	430a      	orrs	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	18d3      	adds	r3, r2, r3
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2240      	movs	r2, #64	; 0x40
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	d011      	beq.n	8008b82 <USB_ActivateEndpoint+0x13e>
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a98      	ldr	r2, [pc, #608]	; (8008dcc <USB_ActivateEndpoint+0x388>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	18d3      	adds	r3, r2, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4995      	ldr	r1, [pc, #596]	; (8008dd4 <USB_ActivateEndpoint+0x390>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	78db      	ldrb	r3, [r3, #3]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d016      	beq.n	8008bb8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	18d3      	adds	r3, r2, r3
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a90      	ldr	r2, [pc, #576]	; (8008dd8 <USB_ActivateEndpoint+0x394>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	4053      	eors	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	18d3      	adds	r3, r2, r3
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4985      	ldr	r1, [pc, #532]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e270      	b.n	800909a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a84      	ldr	r2, [pc, #528]	; (8008dd8 <USB_ActivateEndpoint+0x394>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	18d3      	adds	r3, r2, r3
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	497c      	ldr	r1, [pc, #496]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e25d      	b.n	800909a <USB_ActivateEndpoint+0x656>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4a7a      	ldr	r2, [pc, #488]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008be6:	4694      	mov	ip, r2
 8008be8:	4463      	add	r3, ip
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	4977      	ldr	r1, [pc, #476]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008bf4:	468c      	mov	ip, r1
 8008bf6:	4463      	add	r3, ip
 8008bf8:	0c12      	lsrs	r2, r2, #16
 8008bfa:	0412      	lsls	r2, r2, #16
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4a72      	ldr	r2, [pc, #456]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c06:	4694      	mov	ip, r2
 8008c08:	4463      	add	r3, ip
 8008c0a:	6859      	ldr	r1, [r3, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	889b      	ldrh	r3, [r3, #4]
 8008c10:	089b      	lsrs	r3, r3, #2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	009a      	lsls	r2, r3, #2
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	486c      	ldr	r0, [pc, #432]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c1e:	4684      	mov	ip, r0
 8008c20:	4463      	add	r3, ip
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	4a68      	ldr	r2, [pc, #416]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c2e:	4694      	mov	ip, r2
 8008c30:	4463      	add	r3, ip
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	4965      	ldr	r1, [pc, #404]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c3c:	468c      	mov	ip, r1
 8008c3e:	4463      	add	r3, ip
 8008c40:	0412      	lsls	r2, r2, #16
 8008c42:	0c12      	lsrs	r2, r2, #16
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c4c:	d920      	bls.n	8008c90 <USB_ActivateEndpoint+0x24c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	221f      	movs	r2, #31
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	d102      	bne.n	8008c66 <USB_ActivateEndpoint+0x222>
 8008c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c62:	3b01      	subs	r3, #1
 8008c64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	4a58      	ldr	r2, [pc, #352]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c6e:	4694      	mov	ip, r2
 8008c70:	4463      	add	r3, ip
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	069b      	lsls	r3, r3, #26
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4953      	ldr	r1, [pc, #332]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008c82:	468c      	mov	ip, r1
 8008c84:	4463      	add	r3, ip
 8008c86:	2180      	movs	r1, #128	; 0x80
 8008c88:	0609      	lsls	r1, r1, #24
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	e042      	b.n	8008d16 <USB_ActivateEndpoint+0x2d2>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d121      	bne.n	8008cdc <USB_ActivateEndpoint+0x298>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	4a4c      	ldr	r2, [pc, #304]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008ca0:	4694      	mov	ip, r2
 8008ca2:	4463      	add	r3, ip
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4948      	ldr	r1, [pc, #288]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008cae:	468c      	mov	ip, r1
 8008cb0:	4463      	add	r3, ip
 8008cb2:	494a      	ldr	r1, [pc, #296]	; (8008ddc <USB_ActivateEndpoint+0x398>)
 8008cb4:	400a      	ands	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4a44      	ldr	r2, [pc, #272]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008cc0:	4694      	mov	ip, r2
 8008cc2:	4463      	add	r3, ip
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4940      	ldr	r1, [pc, #256]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008cce:	468c      	mov	ip, r1
 8008cd0:	4463      	add	r3, ip
 8008cd2:	2180      	movs	r1, #128	; 0x80
 8008cd4:	0609      	lsls	r1, r1, #24
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	e01c      	b.n	8008d16 <USB_ActivateEndpoint+0x2d2>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4013      	ands	r3, r2
 8008cec:	d002      	beq.n	8008cf4 <USB_ActivateEndpoint+0x2b0>
 8008cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4a35      	ldr	r2, [pc, #212]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008cfc:	4694      	mov	ip, r2
 8008cfe:	4463      	add	r3, ip
 8008d00:	6859      	ldr	r1, [r3, #4]
 8008d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d04:	069a      	lsls	r2, r3, #26
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	4830      	ldr	r0, [pc, #192]	; (8008dd0 <USB_ActivateEndpoint+0x38c>)
 8008d0e:	4684      	mov	ip, r0
 8008d10:	4463      	add	r3, ip
 8008d12:	430a      	orrs	r2, r1
 8008d14:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	18d3      	adds	r3, r2, r3
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d26:	2380      	movs	r3, #128	; 0x80
 8008d28:	01db      	lsls	r3, r3, #7
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	d011      	beq.n	8008d52 <USB_ActivateEndpoint+0x30e>
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	18d3      	adds	r3, r2, r3
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a24      	ldr	r2, [pc, #144]	; (8008dcc <USB_ActivateEndpoint+0x388>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	18d3      	adds	r3, r2, r3
 8008d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4c:	4924      	ldr	r1, [pc, #144]	; (8008de0 <USB_ActivateEndpoint+0x39c>)
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d11c      	bne.n	8008d94 <USB_ActivateEndpoint+0x350>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	18d3      	adds	r3, r2, r3
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a1f      	ldr	r2, [pc, #124]	; (8008de4 <USB_ActivateEndpoint+0x3a0>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2280      	movs	r2, #128	; 0x80
 8008d70:	0152      	lsls	r2, r2, #5
 8008d72:	4053      	eors	r3, r2
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2280      	movs	r2, #128	; 0x80
 8008d7a:	0192      	lsls	r2, r2, #6
 8008d7c:	4053      	eors	r3, r2
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	e182      	b.n	800909a <USB_ActivateEndpoint+0x656>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	18d3      	adds	r3, r2, r3
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a10      	ldr	r2, [pc, #64]	; (8008de4 <USB_ActivateEndpoint+0x3a0>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	623b      	str	r3, [r7, #32]
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	2280      	movs	r2, #128	; 0x80
 8008daa:	0192      	lsls	r2, r2, #6
 8008dac:	4053      	eors	r3, r2
 8008dae:	623b      	str	r3, [r7, #32]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	4902      	ldr	r1, [pc, #8]	; (8008dc8 <USB_ActivateEndpoint+0x384>)
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e16a      	b.n	800909a <USB_ActivateEndpoint+0x656>
 8008dc4:	07ff898f 	.word	0x07ff898f
 8008dc8:	00008080 	.word	0x00008080
 8008dcc:	07ff8f8f 	.word	0x07ff8f8f
 8008dd0:	40009800 	.word	0x40009800
 8008dd4:	000080c0 	.word	0x000080c0
 8008dd8:	07ff8fbf 	.word	0x07ff8fbf
 8008ddc:	83ffffff 	.word	0x83ffffff
 8008de0:	0000c080 	.word	0x0000c080
 8008de4:	07ffbf8f 	.word	0x07ffbf8f
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	78db      	ldrb	r3, [r3, #3]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d112      	bne.n	8008e16 <USB_ActivateEndpoint+0x3d2>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	18d3      	adds	r3, r2, r3
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4aaa      	ldr	r2, [pc, #680]	; (80090a8 <USB_ActivateEndpoint+0x664>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	663b      	str	r3, [r7, #96]	; 0x60
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	18d3      	adds	r3, r2, r3
 8008e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e0e:	49a7      	ldr	r1, [pc, #668]	; (80090ac <USB_ActivateEndpoint+0x668>)
 8008e10:	430a      	orrs	r2, r1
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e011      	b.n	8008e3a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	18d3      	adds	r3, r2, r3
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4aa3      	ldr	r2, [pc, #652]	; (80090b0 <USB_ActivateEndpoint+0x66c>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	667b      	str	r3, [r7, #100]	; 0x64
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e34:	499f      	ldr	r1, [pc, #636]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 8008e36:	430a      	orrs	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4a9d      	ldr	r2, [pc, #628]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e42:	4694      	mov	ip, r2
 8008e44:	4463      	add	r3, ip
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	499a      	ldr	r1, [pc, #616]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e50:	468c      	mov	ip, r1
 8008e52:	4463      	add	r3, ip
 8008e54:	0c12      	lsrs	r2, r2, #16
 8008e56:	0412      	lsls	r2, r2, #16
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	4a95      	ldr	r2, [pc, #596]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e62:	4694      	mov	ip, r2
 8008e64:	4463      	add	r3, ip
 8008e66:	6819      	ldr	r1, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	88db      	ldrh	r3, [r3, #6]
 8008e6c:	089b      	lsrs	r3, r3, #2
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	009a      	lsls	r2, r3, #2
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	488f      	ldr	r0, [pc, #572]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e7a:	4684      	mov	ip, r0
 8008e7c:	4463      	add	r3, ip
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4a8b      	ldr	r2, [pc, #556]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e8a:	4694      	mov	ip, r2
 8008e8c:	4463      	add	r3, ip
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4988      	ldr	r1, [pc, #544]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008e98:	468c      	mov	ip, r1
 8008e9a:	4463      	add	r3, ip
 8008e9c:	0c12      	lsrs	r2, r2, #16
 8008e9e:	0412      	lsls	r2, r2, #16
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	4a83      	ldr	r2, [pc, #524]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008eaa:	4694      	mov	ip, r2
 8008eac:	4463      	add	r3, ip
 8008eae:	6859      	ldr	r1, [r3, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	891b      	ldrh	r3, [r3, #8]
 8008eb4:	089b      	lsrs	r3, r3, #2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	009a      	lsls	r2, r3, #2
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	487d      	ldr	r0, [pc, #500]	; (80090b8 <USB_ActivateEndpoint+0x674>)
 8008ec2:	4684      	mov	ip, r0
 8008ec4:	4463      	add	r3, ip
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	785b      	ldrb	r3, [r3, #1]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d169      	bne.n	8008fa6 <USB_ActivateEndpoint+0x562>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	18d3      	adds	r3, r2, r3
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ee2:	2380      	movs	r3, #128	; 0x80
 8008ee4:	01db      	lsls	r3, r3, #7
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	d011      	beq.n	8008f0e <USB_ActivateEndpoint+0x4ca>
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	18d3      	adds	r3, r2, r3
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a6c      	ldr	r2, [pc, #432]	; (80090a8 <USB_ActivateEndpoint+0x664>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	18d3      	adds	r3, r2, r3
 8008f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f08:	496c      	ldr	r1, [pc, #432]	; (80090bc <USB_ActivateEndpoint+0x678>)
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	18d3      	adds	r3, r2, r3
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	2240      	movs	r2, #64	; 0x40
 8008f20:	4013      	ands	r3, r2
 8008f22:	d011      	beq.n	8008f48 <USB_ActivateEndpoint+0x504>
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	18d3      	adds	r3, r2, r3
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a5d      	ldr	r2, [pc, #372]	; (80090a8 <USB_ActivateEndpoint+0x664>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	18d3      	adds	r3, r2, r3
 8008f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f42:	495f      	ldr	r1, [pc, #380]	; (80090c0 <USB_ActivateEndpoint+0x67c>)
 8008f44:	430a      	orrs	r2, r1
 8008f46:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	18d3      	adds	r3, r2, r3
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a5b      	ldr	r2, [pc, #364]	; (80090c4 <USB_ActivateEndpoint+0x680>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	2280      	movs	r2, #128	; 0x80
 8008f5e:	0152      	lsls	r2, r2, #5
 8008f60:	4053      	eors	r3, r2
 8008f62:	633b      	str	r3, [r7, #48]	; 0x30
 8008f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f66:	2280      	movs	r2, #128	; 0x80
 8008f68:	0192      	lsls	r2, r2, #6
 8008f6a:	4053      	eors	r3, r2
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	18d3      	adds	r3, r2, r3
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	494e      	ldr	r1, [pc, #312]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	18d3      	adds	r3, r2, r3
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a4e      	ldr	r2, [pc, #312]	; (80090c8 <USB_ActivateEndpoint+0x684>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	18d3      	adds	r3, r2, r3
 8008f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9e:	4945      	ldr	r1, [pc, #276]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e079      	b.n	800909a <USB_ActivateEndpoint+0x656>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	18d3      	adds	r3, r2, r3
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	01db      	lsls	r3, r3, #7
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d011      	beq.n	8008fe2 <USB_ActivateEndpoint+0x59e>
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	18d3      	adds	r3, r2, r3
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a37      	ldr	r2, [pc, #220]	; (80090a8 <USB_ActivateEndpoint+0x664>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	18d3      	adds	r3, r2, r3
 8008fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fdc:	4937      	ldr	r1, [pc, #220]	; (80090bc <USB_ActivateEndpoint+0x678>)
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	18d3      	adds	r3, r2, r3
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff2:	2240      	movs	r2, #64	; 0x40
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d011      	beq.n	800901c <USB_ActivateEndpoint+0x5d8>
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a28      	ldr	r2, [pc, #160]	; (80090a8 <USB_ActivateEndpoint+0x664>)
 8009006:	4013      	ands	r3, r2
 8009008:	653b      	str	r3, [r7, #80]	; 0x50
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	18d3      	adds	r3, r2, r3
 8009014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009016:	492a      	ldr	r1, [pc, #168]	; (80090c0 <USB_ActivateEndpoint+0x67c>)
 8009018:	430a      	orrs	r2, r1
 800901a:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	78db      	ldrb	r3, [r3, #3]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d016      	beq.n	8009052 <USB_ActivateEndpoint+0x60e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a25      	ldr	r2, [pc, #148]	; (80090c8 <USB_ActivateEndpoint+0x684>)
 8009032:	4013      	ands	r3, r2
 8009034:	64bb      	str	r3, [r7, #72]	; 0x48
 8009036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009038:	2220      	movs	r2, #32
 800903a:	4053      	eors	r3, r2
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	18d3      	adds	r3, r2, r3
 8009048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800904a:	491a      	ldr	r1, [pc, #104]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 800904c:	430a      	orrs	r2, r1
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	e011      	b.n	8009076 <USB_ActivateEndpoint+0x632>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	18d3      	adds	r3, r2, r3
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1a      	ldr	r2, [pc, #104]	; (80090c8 <USB_ActivateEndpoint+0x684>)
 8009060:	4013      	ands	r3, r2
 8009062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	18d3      	adds	r3, r2, r3
 800906e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009070:	4910      	ldr	r1, [pc, #64]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 8009072:	430a      	orrs	r2, r1
 8009074:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	18d3      	adds	r3, r2, r3
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a10      	ldr	r2, [pc, #64]	; (80090c4 <USB_ActivateEndpoint+0x680>)
 8009084:	4013      	ands	r3, r2
 8009086:	647b      	str	r3, [r7, #68]	; 0x44
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	18d3      	adds	r3, r2, r3
 8009092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009094:	4907      	ldr	r1, [pc, #28]	; (80090b4 <USB_ActivateEndpoint+0x670>)
 8009096:	430a      	orrs	r2, r1
 8009098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800909a:	2377      	movs	r3, #119	; 0x77
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	781b      	ldrb	r3, [r3, #0]
}
 80090a0:	0018      	movs	r0, r3
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b01e      	add	sp, #120	; 0x78
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	07ff8f8f 	.word	0x07ff8f8f
 80090ac:	00008180 	.word	0x00008180
 80090b0:	07ff8e8f 	.word	0x07ff8e8f
 80090b4:	00008080 	.word	0x00008080
 80090b8:	40009800 	.word	0x40009800
 80090bc:	0000c080 	.word	0x0000c080
 80090c0:	000080c0 	.word	0x000080c0
 80090c4:	07ffbf8f 	.word	0x07ffbf8f
 80090c8:	07ff8fbf 	.word	0x07ff8fbf

080090cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b096      	sub	sp, #88	; 0x58
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	7a9b      	ldrb	r3, [r3, #10]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d164      	bne.n	80091a8 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02f      	beq.n	8009146 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	18d3      	adds	r3, r2, r3
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2240      	movs	r2, #64	; 0x40
 80090f8:	4013      	ands	r3, r2
 80090fa:	d011      	beq.n	8009120 <USB_DeactivateEndpoint+0x54>
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	18d3      	adds	r3, r2, r3
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a9d      	ldr	r2, [pc, #628]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 800910a:	4013      	ands	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	18d3      	adds	r3, r2, r3
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	499a      	ldr	r1, [pc, #616]	; (8009384 <USB_DeactivateEndpoint+0x2b8>)
 800911c:	430a      	orrs	r2, r1
 800911e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	18d3      	adds	r3, r2, r3
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a96      	ldr	r2, [pc, #600]	; (8009388 <USB_DeactivateEndpoint+0x2bc>)
 800912e:	4013      	ands	r3, r2
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	18d3      	adds	r3, r2, r3
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	4993      	ldr	r1, [pc, #588]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 8009140:	430a      	orrs	r2, r1
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e117      	b.n	8009376 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	18d3      	adds	r3, r2, r3
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	61fb      	str	r3, [r7, #28]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	2380      	movs	r3, #128	; 0x80
 8009158:	01db      	lsls	r3, r3, #7
 800915a:	4013      	ands	r3, r2
 800915c:	d011      	beq.n	8009182 <USB_DeactivateEndpoint+0xb6>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	18d3      	adds	r3, r2, r3
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a85      	ldr	r2, [pc, #532]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 800916c:	4013      	ands	r3, r2
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	18d3      	adds	r3, r2, r3
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	4984      	ldr	r1, [pc, #528]	; (8009390 <USB_DeactivateEndpoint+0x2c4>)
 800917e:	430a      	orrs	r2, r1
 8009180:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	18d3      	adds	r3, r2, r3
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a81      	ldr	r2, [pc, #516]	; (8009394 <USB_DeactivateEndpoint+0x2c8>)
 8009190:	4013      	ands	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	18d3      	adds	r3, r2, r3
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	497a      	ldr	r1, [pc, #488]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 80091a2:	430a      	orrs	r2, r1
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	e0e6      	b.n	8009376 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d171      	bne.n	8009294 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	18d3      	adds	r3, r2, r3
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80091be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	01db      	lsls	r3, r3, #7
 80091c4:	4013      	ands	r3, r2
 80091c6:	d011      	beq.n	80091ec <USB_DeactivateEndpoint+0x120>
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	18d3      	adds	r3, r2, r3
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a6a      	ldr	r2, [pc, #424]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 80091d6:	4013      	ands	r3, r2
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	18d3      	adds	r3, r2, r3
 80091e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091e6:	496a      	ldr	r1, [pc, #424]	; (8009390 <USB_DeactivateEndpoint+0x2c4>)
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	18d3      	adds	r3, r2, r3
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	633b      	str	r3, [r7, #48]	; 0x30
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2240      	movs	r2, #64	; 0x40
 80091fe:	4013      	ands	r3, r2
 8009200:	d011      	beq.n	8009226 <USB_DeactivateEndpoint+0x15a>
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	18d3      	adds	r3, r2, r3
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a5c      	ldr	r2, [pc, #368]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 8009210:	4013      	ands	r3, r2
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	18d3      	adds	r3, r2, r3
 800921e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009220:	4958      	ldr	r1, [pc, #352]	; (8009384 <USB_DeactivateEndpoint+0x2b8>)
 8009222:	430a      	orrs	r2, r1
 8009224:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	18d3      	adds	r3, r2, r3
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a53      	ldr	r2, [pc, #332]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 8009234:	4013      	ands	r3, r2
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	18d3      	adds	r3, r2, r3
 8009242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009244:	494f      	ldr	r1, [pc, #316]	; (8009384 <USB_DeactivateEndpoint+0x2b8>)
 8009246:	430a      	orrs	r2, r1
 8009248:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	18d3      	adds	r3, r2, r3
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a4f      	ldr	r2, [pc, #316]	; (8009394 <USB_DeactivateEndpoint+0x2c8>)
 8009258:	4013      	ands	r3, r2
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	18d3      	adds	r3, r2, r3
 8009266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009268:	4948      	ldr	r1, [pc, #288]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 800926a:	430a      	orrs	r2, r1
 800926c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	18d3      	adds	r3, r2, r3
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a43      	ldr	r2, [pc, #268]	; (8009388 <USB_DeactivateEndpoint+0x2bc>)
 800927c:	4013      	ands	r3, r2
 800927e:	623b      	str	r3, [r7, #32]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	18d3      	adds	r3, r2, r3
 800928a:	6a3a      	ldr	r2, [r7, #32]
 800928c:	493f      	ldr	r1, [pc, #252]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 800928e:	430a      	orrs	r2, r1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e070      	b.n	8009376 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	18d3      	adds	r3, r2, r3
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	657b      	str	r3, [r7, #84]	; 0x54
 80092a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	01db      	lsls	r3, r3, #7
 80092a8:	4013      	ands	r3, r2
 80092aa:	d011      	beq.n	80092d0 <USB_DeactivateEndpoint+0x204>
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	18d3      	adds	r3, r2, r3
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a31      	ldr	r2, [pc, #196]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	653b      	str	r3, [r7, #80]	; 0x50
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ca:	4931      	ldr	r1, [pc, #196]	; (8009390 <USB_DeactivateEndpoint+0x2c4>)
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	18d3      	adds	r3, r2, r3
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e0:	2240      	movs	r2, #64	; 0x40
 80092e2:	4013      	ands	r3, r2
 80092e4:	d011      	beq.n	800930a <USB_DeactivateEndpoint+0x23e>
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	18d3      	adds	r3, r2, r3
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a23      	ldr	r2, [pc, #140]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009304:	491f      	ldr	r1, [pc, #124]	; (8009384 <USB_DeactivateEndpoint+0x2b8>)
 8009306:	430a      	orrs	r2, r1
 8009308:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	18d3      	adds	r3, r2, r3
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1a      	ldr	r2, [pc, #104]	; (8009380 <USB_DeactivateEndpoint+0x2b4>)
 8009318:	4013      	ands	r3, r2
 800931a:	647b      	str	r3, [r7, #68]	; 0x44
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	18d3      	adds	r3, r2, r3
 8009326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009328:	4919      	ldr	r1, [pc, #100]	; (8009390 <USB_DeactivateEndpoint+0x2c4>)
 800932a:	430a      	orrs	r2, r1
 800932c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a13      	ldr	r2, [pc, #76]	; (8009388 <USB_DeactivateEndpoint+0x2bc>)
 800933c:	4013      	ands	r3, r2
 800933e:	643b      	str	r3, [r7, #64]	; 0x40
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	18d3      	adds	r3, r2, r3
 800934a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934c:	490f      	ldr	r1, [pc, #60]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 800934e:	430a      	orrs	r2, r1
 8009350:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	18d3      	adds	r3, r2, r3
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a0d      	ldr	r2, [pc, #52]	; (8009394 <USB_DeactivateEndpoint+0x2c8>)
 8009360:	4013      	ands	r3, r2
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	18d3      	adds	r3, r2, r3
 800936e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009370:	4906      	ldr	r1, [pc, #24]	; (800938c <USB_DeactivateEndpoint+0x2c0>)
 8009372:	430a      	orrs	r2, r1
 8009374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	b016      	add	sp, #88	; 0x58
 800937e:	bd80      	pop	{r7, pc}
 8009380:	07ff8f8f 	.word	0x07ff8f8f
 8009384:	000080c0 	.word	0x000080c0
 8009388:	07ff8fbf 	.word	0x07ff8fbf
 800938c:	00008080 	.word	0x00008080
 8009390:	0000c080 	.word	0x0000c080
 8009394:	07ffbf8f 	.word	0x07ffbf8f

08009398 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b097      	sub	sp, #92	; 0x5c
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d001      	beq.n	80093ae <USB_EPStartXfer+0x16>
 80093aa:	f000 fd24 	bl	8009df6 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d903      	bls.n	80093c2 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	657b      	str	r3, [r7, #84]	; 0x54
 80093c0:	e002      	b.n	80093c8 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	7a9b      	ldrb	r3, [r3, #10]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d12b      	bne.n	8009428 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	6959      	ldr	r1, [r3, #20]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	889a      	ldrh	r2, [r3, #4]
 80093d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093da:	b29b      	uxth	r3, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 fa3d 	bl	800a85c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	4ade      	ldr	r2, [pc, #888]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80093ea:	4694      	mov	ip, r2
 80093ec:	4463      	add	r3, ip
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	00db      	lsls	r3, r3, #3
 80093f6:	49db      	ldr	r1, [pc, #876]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80093f8:	468c      	mov	ip, r1
 80093fa:	4463      	add	r3, ip
 80093fc:	0412      	lsls	r2, r2, #16
 80093fe:	0c12      	lsrs	r2, r2, #16
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4ad6      	ldr	r2, [pc, #856]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800940a:	4694      	mov	ip, r2
 800940c:	4463      	add	r3, ip
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	041a      	lsls	r2, r3, #16
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	48d2      	ldr	r0, [pc, #840]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800941c:	4684      	mov	ip, r0
 800941e:	4463      	add	r3, ip
 8009420:	430a      	orrs	r2, r1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f000 fccb 	bl	8009dbe <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	78db      	ldrb	r3, [r3, #3]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d000      	beq.n	8009432 <USB_EPStartXfer+0x9a>
 8009430:	e35e      	b.n	8009af0 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6a1a      	ldr	r2, [r3, #32]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	429a      	cmp	r2, r3
 800943c:	d800      	bhi.n	8009440 <USB_EPStartXfer+0xa8>
 800943e:	e309      	b.n	8009a54 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	18d3      	adds	r3, r2, r3
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4ac6      	ldr	r2, [pc, #792]	; (8009768 <USB_EPStartXfer+0x3d0>)
 800944e:	4013      	ands	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	18d3      	adds	r3, r2, r3
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	49c3      	ldr	r1, [pc, #780]	; (800976c <USB_EPStartXfer+0x3d4>)
 8009460:	430a      	orrs	r2, r1
 8009462:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	18d3      	adds	r3, r2, r3
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2240      	movs	r2, #64	; 0x40
 800947e:	4013      	ands	r3, r2
 8009480:	d100      	bne.n	8009484 <USB_EPStartXfer+0xec>
 8009482:	e177      	b.n	8009774 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d172      	bne.n	8009572 <USB_EPStartXfer+0x1da>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	4ab4      	ldr	r2, [pc, #720]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009494:	4694      	mov	ip, r2
 8009496:	4463      	add	r3, ip
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	49b0      	ldr	r1, [pc, #704]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80094a2:	468c      	mov	ip, r1
 80094a4:	4463      	add	r3, ip
 80094a6:	0412      	lsls	r2, r2, #16
 80094a8:	0c12      	lsrs	r2, r2, #16
 80094aa:	605a      	str	r2, [r3, #4]
 80094ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ae:	2b3e      	cmp	r3, #62	; 0x3e
 80094b0:	d91e      	bls.n	80094f0 <USB_EPStartXfer+0x158>
 80094b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b4:	095b      	lsrs	r3, r3, #5
 80094b6:	653b      	str	r3, [r7, #80]	; 0x50
 80094b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ba:	221f      	movs	r2, #31
 80094bc:	4013      	ands	r3, r2
 80094be:	d102      	bne.n	80094c6 <USB_EPStartXfer+0x12e>
 80094c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c2:	3b01      	subs	r3, #1
 80094c4:	653b      	str	r3, [r7, #80]	; 0x50
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4aa5      	ldr	r2, [pc, #660]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80094ce:	4694      	mov	ip, r2
 80094d0:	4463      	add	r3, ip
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d6:	069b      	lsls	r3, r3, #26
 80094d8:	431a      	orrs	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	49a0      	ldr	r1, [pc, #640]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80094e2:	468c      	mov	ip, r1
 80094e4:	4463      	add	r3, ip
 80094e6:	2180      	movs	r1, #128	; 0x80
 80094e8:	0609      	lsls	r1, r1, #24
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	e065      	b.n	80095bc <USB_EPStartXfer+0x224>
 80094f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d121      	bne.n	800953a <USB_EPStartXfer+0x1a2>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4a99      	ldr	r2, [pc, #612]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80094fe:	4694      	mov	ip, r2
 8009500:	4463      	add	r3, ip
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	4996      	ldr	r1, [pc, #600]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800950c:	468c      	mov	ip, r1
 800950e:	4463      	add	r3, ip
 8009510:	4997      	ldr	r1, [pc, #604]	; (8009770 <USB_EPStartXfer+0x3d8>)
 8009512:	400a      	ands	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4a91      	ldr	r2, [pc, #580]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800951e:	4694      	mov	ip, r2
 8009520:	4463      	add	r3, ip
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	498e      	ldr	r1, [pc, #568]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800952c:	468c      	mov	ip, r1
 800952e:	4463      	add	r3, ip
 8009530:	2180      	movs	r1, #128	; 0x80
 8009532:	0609      	lsls	r1, r1, #24
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
 8009538:	e040      	b.n	80095bc <USB_EPStartXfer+0x224>
 800953a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	653b      	str	r3, [r7, #80]	; 0x50
 8009540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009542:	2201      	movs	r2, #1
 8009544:	4013      	ands	r3, r2
 8009546:	d002      	beq.n	800954e <USB_EPStartXfer+0x1b6>
 8009548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954a:	3301      	adds	r3, #1
 800954c:	653b      	str	r3, [r7, #80]	; 0x50
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	4a83      	ldr	r2, [pc, #524]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009556:	4694      	mov	ip, r2
 8009558:	4463      	add	r3, ip
 800955a:	6859      	ldr	r1, [r3, #4]
 800955c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800955e:	069a      	lsls	r2, r3, #26
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	487f      	ldr	r0, [pc, #508]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009568:	4684      	mov	ip, r0
 800956a:	4463      	add	r3, ip
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
 8009570:	e024      	b.n	80095bc <USB_EPStartXfer+0x224>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	785b      	ldrb	r3, [r3, #1]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d120      	bne.n	80095bc <USB_EPStartXfer+0x224>
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4a78      	ldr	r2, [pc, #480]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009582:	4694      	mov	ip, r2
 8009584:	4463      	add	r3, ip
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4975      	ldr	r1, [pc, #468]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009590:	468c      	mov	ip, r1
 8009592:	4463      	add	r3, ip
 8009594:	0412      	lsls	r2, r2, #16
 8009596:	0c12      	lsrs	r2, r2, #16
 8009598:	605a      	str	r2, [r3, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4a70      	ldr	r2, [pc, #448]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80095a2:	4694      	mov	ip, r2
 80095a4:	4463      	add	r3, ip
 80095a6:	6859      	ldr	r1, [r3, #4]
 80095a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095aa:	041a      	lsls	r2, r3, #16
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	486c      	ldr	r0, [pc, #432]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80095b4:	4684      	mov	ip, r0
 80095b6:	4463      	add	r3, ip
 80095b8:	430a      	orrs	r2, r1
 80095ba:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80095bc:	201a      	movs	r0, #26
 80095be:	183b      	adds	r3, r7, r0
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	8912      	ldrh	r2, [r2, #8]
 80095c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	6959      	ldr	r1, [r3, #20]
 80095ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095cc:	b29c      	uxth	r4, r3
 80095ce:	183b      	adds	r3, r7, r0
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	0023      	movs	r3, r4
 80095d6:	f001 f941 	bl	800a85c <USB_WritePMA>
            ep->xfer_buff += len;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	695a      	ldr	r2, [r3, #20]
 80095de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e0:	18d2      	adds	r2, r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	6a1a      	ldr	r2, [r3, #32]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d906      	bls.n	8009600 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6a1a      	ldr	r2, [r3, #32]
 80095f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	621a      	str	r2, [r3, #32]
 80095fe:	e005      	b.n	800960c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d172      	bne.n	80096fa <USB_EPStartXfer+0x362>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4a52      	ldr	r2, [pc, #328]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800961c:	4694      	mov	ip, r2
 800961e:	4463      	add	r3, ip
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	494e      	ldr	r1, [pc, #312]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800962a:	468c      	mov	ip, r1
 800962c:	4463      	add	r3, ip
 800962e:	0412      	lsls	r2, r2, #16
 8009630:	0c12      	lsrs	r2, r2, #16
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009636:	2b3e      	cmp	r3, #62	; 0x3e
 8009638:	d91e      	bls.n	8009678 <USB_EPStartXfer+0x2e0>
 800963a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009642:	221f      	movs	r2, #31
 8009644:	4013      	ands	r3, r2
 8009646:	d102      	bne.n	800964e <USB_EPStartXfer+0x2b6>
 8009648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964a:	3b01      	subs	r3, #1
 800964c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	4a43      	ldr	r2, [pc, #268]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009656:	4694      	mov	ip, r2
 8009658:	4463      	add	r3, ip
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	069b      	lsls	r3, r3, #26
 8009660:	431a      	orrs	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	493e      	ldr	r1, [pc, #248]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800966a:	468c      	mov	ip, r1
 800966c:	4463      	add	r3, ip
 800966e:	2180      	movs	r1, #128	; 0x80
 8009670:	0609      	lsls	r1, r1, #24
 8009672:	430a      	orrs	r2, r1
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	e065      	b.n	8009744 <USB_EPStartXfer+0x3ac>
 8009678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967a:	2b00      	cmp	r3, #0
 800967c:	d121      	bne.n	80096c2 <USB_EPStartXfer+0x32a>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	4a37      	ldr	r2, [pc, #220]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009686:	4694      	mov	ip, r2
 8009688:	4463      	add	r3, ip
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	4934      	ldr	r1, [pc, #208]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009694:	468c      	mov	ip, r1
 8009696:	4463      	add	r3, ip
 8009698:	4935      	ldr	r1, [pc, #212]	; (8009770 <USB_EPStartXfer+0x3d8>)
 800969a:	400a      	ands	r2, r1
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	4a2f      	ldr	r2, [pc, #188]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80096a6:	4694      	mov	ip, r2
 80096a8:	4463      	add	r3, ip
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	492c      	ldr	r1, [pc, #176]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80096b4:	468c      	mov	ip, r1
 80096b6:	4463      	add	r3, ip
 80096b8:	2180      	movs	r1, #128	; 0x80
 80096ba:	0609      	lsls	r1, r1, #24
 80096bc:	430a      	orrs	r2, r1
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	e040      	b.n	8009744 <USB_EPStartXfer+0x3ac>
 80096c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c4:	085b      	lsrs	r3, r3, #1
 80096c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ca:	2201      	movs	r2, #1
 80096cc:	4013      	ands	r3, r2
 80096ce:	d002      	beq.n	80096d6 <USB_EPStartXfer+0x33e>
 80096d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d2:	3301      	adds	r3, #1
 80096d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4a21      	ldr	r2, [pc, #132]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80096de:	4694      	mov	ip, r2
 80096e0:	4463      	add	r3, ip
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e6:	069a      	lsls	r2, r3, #26
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	481d      	ldr	r0, [pc, #116]	; (8009764 <USB_EPStartXfer+0x3cc>)
 80096f0:	4684      	mov	ip, r0
 80096f2:	4463      	add	r3, ip
 80096f4:	430a      	orrs	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	e024      	b.n	8009744 <USB_EPStartXfer+0x3ac>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d120      	bne.n	8009744 <USB_EPStartXfer+0x3ac>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	4a16      	ldr	r2, [pc, #88]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800970a:	4694      	mov	ip, r2
 800970c:	4463      	add	r3, ip
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4913      	ldr	r1, [pc, #76]	; (8009764 <USB_EPStartXfer+0x3cc>)
 8009718:	468c      	mov	ip, r1
 800971a:	4463      	add	r3, ip
 800971c:	0412      	lsls	r2, r2, #16
 800971e:	0c12      	lsrs	r2, r2, #16
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4a0e      	ldr	r2, [pc, #56]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800972a:	4694      	mov	ip, r2
 800972c:	4463      	add	r3, ip
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009732:	041a      	lsls	r2, r3, #16
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	480a      	ldr	r0, [pc, #40]	; (8009764 <USB_EPStartXfer+0x3cc>)
 800973c:	4684      	mov	ip, r0
 800973e:	4463      	add	r3, ip
 8009740:	430a      	orrs	r2, r1
 8009742:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009744:	201a      	movs	r0, #26
 8009746:	183b      	adds	r3, r7, r0
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	88d2      	ldrh	r2, [r2, #6]
 800974c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6959      	ldr	r1, [r3, #20]
 8009752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009754:	b29c      	uxth	r4, r3
 8009756:	183b      	adds	r3, r7, r0
 8009758:	881a      	ldrh	r2, [r3, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	0023      	movs	r3, r4
 800975e:	f001 f87d 	bl	800a85c <USB_WritePMA>
 8009762:	e32c      	b.n	8009dbe <USB_EPStartXfer+0xa26>
 8009764:	40009800 	.word	0x40009800
 8009768:	07ff8f8f 	.word	0x07ff8f8f
 800976c:	00008180 	.word	0x00008180
 8009770:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d172      	bne.n	8009862 <USB_EPStartXfer+0x4ca>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	4ad7      	ldr	r2, [pc, #860]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009784:	4694      	mov	ip, r2
 8009786:	4463      	add	r3, ip
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	49d3      	ldr	r1, [pc, #844]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009792:	468c      	mov	ip, r1
 8009794:	4463      	add	r3, ip
 8009796:	0412      	lsls	r2, r2, #16
 8009798:	0c12      	lsrs	r2, r2, #16
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979e:	2b3e      	cmp	r3, #62	; 0x3e
 80097a0:	d91e      	bls.n	80097e0 <USB_EPStartXfer+0x448>
 80097a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80097a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097aa:	221f      	movs	r2, #31
 80097ac:	4013      	ands	r3, r2
 80097ae:	d102      	bne.n	80097b6 <USB_EPStartXfer+0x41e>
 80097b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b2:	3b01      	subs	r3, #1
 80097b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4ac8      	ldr	r2, [pc, #800]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80097be:	4694      	mov	ip, r2
 80097c0:	4463      	add	r3, ip
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c6:	069b      	lsls	r3, r3, #26
 80097c8:	431a      	orrs	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	49c3      	ldr	r1, [pc, #780]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80097d2:	468c      	mov	ip, r1
 80097d4:	4463      	add	r3, ip
 80097d6:	2180      	movs	r1, #128	; 0x80
 80097d8:	0609      	lsls	r1, r1, #24
 80097da:	430a      	orrs	r2, r1
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	e065      	b.n	80098ac <USB_EPStartXfer+0x514>
 80097e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d121      	bne.n	800982a <USB_EPStartXfer+0x492>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4abc      	ldr	r2, [pc, #752]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80097ee:	4694      	mov	ip, r2
 80097f0:	4463      	add	r3, ip
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	49b9      	ldr	r1, [pc, #740]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80097fc:	468c      	mov	ip, r1
 80097fe:	4463      	add	r3, ip
 8009800:	49b8      	ldr	r1, [pc, #736]	; (8009ae4 <USB_EPStartXfer+0x74c>)
 8009802:	400a      	ands	r2, r1
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4ab4      	ldr	r2, [pc, #720]	; (8009ae0 <USB_EPStartXfer+0x748>)
 800980e:	4694      	mov	ip, r2
 8009810:	4463      	add	r3, ip
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	49b1      	ldr	r1, [pc, #708]	; (8009ae0 <USB_EPStartXfer+0x748>)
 800981c:	468c      	mov	ip, r1
 800981e:	4463      	add	r3, ip
 8009820:	2180      	movs	r1, #128	; 0x80
 8009822:	0609      	lsls	r1, r1, #24
 8009824:	430a      	orrs	r2, r1
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e040      	b.n	80098ac <USB_EPStartXfer+0x514>
 800982a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009832:	2201      	movs	r2, #1
 8009834:	4013      	ands	r3, r2
 8009836:	d002      	beq.n	800983e <USB_EPStartXfer+0x4a6>
 8009838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983a:	3301      	adds	r3, #1
 800983c:	64bb      	str	r3, [r7, #72]	; 0x48
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4aa6      	ldr	r2, [pc, #664]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009846:	4694      	mov	ip, r2
 8009848:	4463      	add	r3, ip
 800984a:	6819      	ldr	r1, [r3, #0]
 800984c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984e:	069a      	lsls	r2, r3, #26
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	48a2      	ldr	r0, [pc, #648]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009858:	4684      	mov	ip, r0
 800985a:	4463      	add	r3, ip
 800985c:	430a      	orrs	r2, r1
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	e024      	b.n	80098ac <USB_EPStartXfer+0x514>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d120      	bne.n	80098ac <USB_EPStartXfer+0x514>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	4a9b      	ldr	r2, [pc, #620]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009872:	4694      	mov	ip, r2
 8009874:	4463      	add	r3, ip
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	4998      	ldr	r1, [pc, #608]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009880:	468c      	mov	ip, r1
 8009882:	4463      	add	r3, ip
 8009884:	0412      	lsls	r2, r2, #16
 8009886:	0c12      	lsrs	r2, r2, #16
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4a93      	ldr	r2, [pc, #588]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009892:	4694      	mov	ip, r2
 8009894:	4463      	add	r3, ip
 8009896:	6819      	ldr	r1, [r3, #0]
 8009898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800989a:	041a      	lsls	r2, r3, #16
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	488f      	ldr	r0, [pc, #572]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80098a4:	4684      	mov	ip, r0
 80098a6:	4463      	add	r3, ip
 80098a8:	430a      	orrs	r2, r1
 80098aa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098ac:	201a      	movs	r0, #26
 80098ae:	183b      	adds	r3, r7, r0
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	88d2      	ldrh	r2, [r2, #6]
 80098b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	6959      	ldr	r1, [r3, #20]
 80098ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098bc:	b29c      	uxth	r4, r3
 80098be:	183b      	adds	r3, r7, r0
 80098c0:	881a      	ldrh	r2, [r3, #0]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	0023      	movs	r3, r4
 80098c6:	f000 ffc9 	bl	800a85c <USB_WritePMA>
            ep->xfer_buff += len;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	695a      	ldr	r2, [r3, #20]
 80098ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d0:	18d2      	adds	r2, r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	6a1a      	ldr	r2, [r3, #32]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d906      	bls.n	80098f0 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e8:	1ad2      	subs	r2, r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	621a      	str	r2, [r3, #32]
 80098ee:	e005      	b.n	80098fc <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2200      	movs	r2, #0
 80098fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	785b      	ldrb	r3, [r3, #1]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d172      	bne.n	80099ea <USB_EPStartXfer+0x652>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	4a75      	ldr	r2, [pc, #468]	; (8009ae0 <USB_EPStartXfer+0x748>)
 800990c:	4694      	mov	ip, r2
 800990e:	4463      	add	r3, ip
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4971      	ldr	r1, [pc, #452]	; (8009ae0 <USB_EPStartXfer+0x748>)
 800991a:	468c      	mov	ip, r1
 800991c:	4463      	add	r3, ip
 800991e:	0412      	lsls	r2, r2, #16
 8009920:	0c12      	lsrs	r2, r2, #16
 8009922:	605a      	str	r2, [r3, #4]
 8009924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009926:	2b3e      	cmp	r3, #62	; 0x3e
 8009928:	d91e      	bls.n	8009968 <USB_EPStartXfer+0x5d0>
 800992a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	647b      	str	r3, [r7, #68]	; 0x44
 8009930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009932:	221f      	movs	r2, #31
 8009934:	4013      	ands	r3, r2
 8009936:	d102      	bne.n	800993e <USB_EPStartXfer+0x5a6>
 8009938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993a:	3b01      	subs	r3, #1
 800993c:	647b      	str	r3, [r7, #68]	; 0x44
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	4a66      	ldr	r2, [pc, #408]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009946:	4694      	mov	ip, r2
 8009948:	4463      	add	r3, ip
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994e:	069b      	lsls	r3, r3, #26
 8009950:	431a      	orrs	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	4961      	ldr	r1, [pc, #388]	; (8009ae0 <USB_EPStartXfer+0x748>)
 800995a:	468c      	mov	ip, r1
 800995c:	4463      	add	r3, ip
 800995e:	2180      	movs	r1, #128	; 0x80
 8009960:	0609      	lsls	r1, r1, #24
 8009962:	430a      	orrs	r2, r1
 8009964:	605a      	str	r2, [r3, #4]
 8009966:	e065      	b.n	8009a34 <USB_EPStartXfer+0x69c>
 8009968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800996a:	2b00      	cmp	r3, #0
 800996c:	d121      	bne.n	80099b2 <USB_EPStartXfer+0x61a>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	4a5a      	ldr	r2, [pc, #360]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009976:	4694      	mov	ip, r2
 8009978:	4463      	add	r3, ip
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	4957      	ldr	r1, [pc, #348]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009984:	468c      	mov	ip, r1
 8009986:	4463      	add	r3, ip
 8009988:	4956      	ldr	r1, [pc, #344]	; (8009ae4 <USB_EPStartXfer+0x74c>)
 800998a:	400a      	ands	r2, r1
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	4a52      	ldr	r2, [pc, #328]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009996:	4694      	mov	ip, r2
 8009998:	4463      	add	r3, ip
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	494f      	ldr	r1, [pc, #316]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80099a4:	468c      	mov	ip, r1
 80099a6:	4463      	add	r3, ip
 80099a8:	2180      	movs	r1, #128	; 0x80
 80099aa:	0609      	lsls	r1, r1, #24
 80099ac:	430a      	orrs	r2, r1
 80099ae:	605a      	str	r2, [r3, #4]
 80099b0:	e040      	b.n	8009a34 <USB_EPStartXfer+0x69c>
 80099b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	647b      	str	r3, [r7, #68]	; 0x44
 80099b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ba:	2201      	movs	r2, #1
 80099bc:	4013      	ands	r3, r2
 80099be:	d002      	beq.n	80099c6 <USB_EPStartXfer+0x62e>
 80099c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c2:	3301      	adds	r3, #1
 80099c4:	647b      	str	r3, [r7, #68]	; 0x44
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4a44      	ldr	r2, [pc, #272]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80099ce:	4694      	mov	ip, r2
 80099d0:	4463      	add	r3, ip
 80099d2:	6859      	ldr	r1, [r3, #4]
 80099d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d6:	069a      	lsls	r2, r3, #26
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	4840      	ldr	r0, [pc, #256]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80099e0:	4684      	mov	ip, r0
 80099e2:	4463      	add	r3, ip
 80099e4:	430a      	orrs	r2, r1
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	e024      	b.n	8009a34 <USB_EPStartXfer+0x69c>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d120      	bne.n	8009a34 <USB_EPStartXfer+0x69c>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	4a39      	ldr	r2, [pc, #228]	; (8009ae0 <USB_EPStartXfer+0x748>)
 80099fa:	4694      	mov	ip, r2
 80099fc:	4463      	add	r3, ip
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	4936      	ldr	r1, [pc, #216]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009a08:	468c      	mov	ip, r1
 8009a0a:	4463      	add	r3, ip
 8009a0c:	0412      	lsls	r2, r2, #16
 8009a0e:	0c12      	lsrs	r2, r2, #16
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4a31      	ldr	r2, [pc, #196]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009a1a:	4694      	mov	ip, r2
 8009a1c:	4463      	add	r3, ip
 8009a1e:	6859      	ldr	r1, [r3, #4]
 8009a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a22:	041a      	lsls	r2, r3, #16
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	00db      	lsls	r3, r3, #3
 8009a2a:	482d      	ldr	r0, [pc, #180]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009a2c:	4684      	mov	ip, r0
 8009a2e:	4463      	add	r3, ip
 8009a30:	430a      	orrs	r2, r1
 8009a32:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8009a34:	201a      	movs	r0, #26
 8009a36:	183b      	adds	r3, r7, r0
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	8912      	ldrh	r2, [r2, #8]
 8009a3c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6959      	ldr	r1, [r3, #20]
 8009a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a44:	b29c      	uxth	r4, r3
 8009a46:	183b      	adds	r3, r7, r0
 8009a48:	881a      	ldrh	r2, [r3, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	0023      	movs	r3, r4
 8009a4e:	f000 ff05 	bl	800a85c <USB_WritePMA>
 8009a52:	e1b4      	b.n	8009dbe <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	18d3      	adds	r3, r2, r3
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a20      	ldr	r2, [pc, #128]	; (8009ae8 <USB_EPStartXfer+0x750>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	18d3      	adds	r3, r2, r3
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	491c      	ldr	r1, [pc, #112]	; (8009aec <USB_EPStartXfer+0x754>)
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009a86:	4694      	mov	ip, r2
 8009a88:	4463      	add	r3, ip
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4913      	ldr	r1, [pc, #76]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009a94:	468c      	mov	ip, r1
 8009a96:	4463      	add	r3, ip
 8009a98:	0412      	lsls	r2, r2, #16
 8009a9a:	0c12      	lsrs	r2, r2, #16
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009aa6:	4694      	mov	ip, r2
 8009aa8:	4463      	add	r3, ip
 8009aaa:	6819      	ldr	r1, [r3, #0]
 8009aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aae:	041a      	lsls	r2, r3, #16
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	480a      	ldr	r0, [pc, #40]	; (8009ae0 <USB_EPStartXfer+0x748>)
 8009ab8:	4684      	mov	ip, r0
 8009aba:	4463      	add	r3, ip
 8009abc:	430a      	orrs	r2, r1
 8009abe:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ac0:	201a      	movs	r0, #26
 8009ac2:	183b      	adds	r3, r7, r0
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	88d2      	ldrh	r2, [r2, #6]
 8009ac8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6959      	ldr	r1, [r3, #20]
 8009ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad0:	b29c      	uxth	r4, r3
 8009ad2:	183b      	adds	r3, r7, r0
 8009ad4:	881a      	ldrh	r2, [r3, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	0023      	movs	r3, r4
 8009ada:	f000 febf 	bl	800a85c <USB_WritePMA>
 8009ade:	e16e      	b.n	8009dbe <USB_EPStartXfer+0xa26>
 8009ae0:	40009800 	.word	0x40009800
 8009ae4:	83ffffff 	.word	0x83ffffff
 8009ae8:	07ff8e8f 	.word	0x07ff8e8f
 8009aec:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	6a1a      	ldr	r2, [r3, #32]
 8009af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	18d3      	adds	r3, r2, r3
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2240      	movs	r2, #64	; 0x40
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	d100      	bne.n	8009b10 <USB_EPStartXfer+0x778>
 8009b0e:	e0ab      	b.n	8009c68 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d172      	bne.n	8009bfe <USB_EPStartXfer+0x866>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	4adc      	ldr	r2, [pc, #880]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b20:	4694      	mov	ip, r2
 8009b22:	4463      	add	r3, ip
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	49d8      	ldr	r1, [pc, #864]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b2e:	468c      	mov	ip, r1
 8009b30:	4463      	add	r3, ip
 8009b32:	0412      	lsls	r2, r2, #16
 8009b34:	0c12      	lsrs	r2, r2, #16
 8009b36:	605a      	str	r2, [r3, #4]
 8009b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8009b3c:	d91e      	bls.n	8009b7c <USB_EPStartXfer+0x7e4>
 8009b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	643b      	str	r3, [r7, #64]	; 0x40
 8009b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b46:	221f      	movs	r2, #31
 8009b48:	4013      	ands	r3, r2
 8009b4a:	d102      	bne.n	8009b52 <USB_EPStartXfer+0x7ba>
 8009b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	643b      	str	r3, [r7, #64]	; 0x40
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4acd      	ldr	r2, [pc, #820]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b5a:	4694      	mov	ip, r2
 8009b5c:	4463      	add	r3, ip
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b62:	069b      	lsls	r3, r3, #26
 8009b64:	431a      	orrs	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	49c8      	ldr	r1, [pc, #800]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b6e:	468c      	mov	ip, r1
 8009b70:	4463      	add	r3, ip
 8009b72:	2180      	movs	r1, #128	; 0x80
 8009b74:	0609      	lsls	r1, r1, #24
 8009b76:	430a      	orrs	r2, r1
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	e065      	b.n	8009c48 <USB_EPStartXfer+0x8b0>
 8009b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d121      	bne.n	8009bc6 <USB_EPStartXfer+0x82e>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	4ac1      	ldr	r2, [pc, #772]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	4463      	add	r3, ip
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	49be      	ldr	r1, [pc, #760]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009b98:	468c      	mov	ip, r1
 8009b9a:	4463      	add	r3, ip
 8009b9c:	49bd      	ldr	r1, [pc, #756]	; (8009e94 <USB_EPStartXfer+0xafc>)
 8009b9e:	400a      	ands	r2, r1
 8009ba0:	605a      	str	r2, [r3, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	4ab9      	ldr	r2, [pc, #740]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009baa:	4694      	mov	ip, r2
 8009bac:	4463      	add	r3, ip
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	49b6      	ldr	r1, [pc, #728]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009bb8:	468c      	mov	ip, r1
 8009bba:	4463      	add	r3, ip
 8009bbc:	2180      	movs	r1, #128	; 0x80
 8009bbe:	0609      	lsls	r1, r1, #24
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	605a      	str	r2, [r3, #4]
 8009bc4:	e040      	b.n	8009c48 <USB_EPStartXfer+0x8b0>
 8009bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc8:	085b      	lsrs	r3, r3, #1
 8009bca:	643b      	str	r3, [r7, #64]	; 0x40
 8009bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	d002      	beq.n	8009bda <USB_EPStartXfer+0x842>
 8009bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	4aab      	ldr	r2, [pc, #684]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009be2:	4694      	mov	ip, r2
 8009be4:	4463      	add	r3, ip
 8009be6:	6859      	ldr	r1, [r3, #4]
 8009be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bea:	069a      	lsls	r2, r3, #26
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	48a7      	ldr	r0, [pc, #668]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009bf4:	4684      	mov	ip, r0
 8009bf6:	4463      	add	r3, ip
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	605a      	str	r2, [r3, #4]
 8009bfc:	e024      	b.n	8009c48 <USB_EPStartXfer+0x8b0>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d120      	bne.n	8009c48 <USB_EPStartXfer+0x8b0>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4aa0      	ldr	r2, [pc, #640]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c0e:	4694      	mov	ip, r2
 8009c10:	4463      	add	r3, ip
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	499d      	ldr	r1, [pc, #628]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c1c:	468c      	mov	ip, r1
 8009c1e:	4463      	add	r3, ip
 8009c20:	0412      	lsls	r2, r2, #16
 8009c22:	0c12      	lsrs	r2, r2, #16
 8009c24:	605a      	str	r2, [r3, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4a98      	ldr	r2, [pc, #608]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c2e:	4694      	mov	ip, r2
 8009c30:	4463      	add	r3, ip
 8009c32:	6859      	ldr	r1, [r3, #4]
 8009c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c36:	041a      	lsls	r2, r3, #16
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	4894      	ldr	r0, [pc, #592]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c40:	4684      	mov	ip, r0
 8009c42:	4463      	add	r3, ip
 8009c44:	430a      	orrs	r2, r1
 8009c46:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8009c48:	201a      	movs	r0, #26
 8009c4a:	183b      	adds	r3, r7, r0
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	8912      	ldrh	r2, [r2, #8]
 8009c50:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6959      	ldr	r1, [r3, #20]
 8009c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c58:	b29c      	uxth	r4, r3
 8009c5a:	183b      	adds	r3, r7, r0
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	0023      	movs	r3, r4
 8009c62:	f000 fdfb 	bl	800a85c <USB_WritePMA>
 8009c66:	e0aa      	b.n	8009dbe <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d172      	bne.n	8009d56 <USB_EPStartXfer+0x9be>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	4a86      	ldr	r2, [pc, #536]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c78:	4694      	mov	ip, r2
 8009c7a:	4463      	add	r3, ip
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	4982      	ldr	r1, [pc, #520]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009c86:	468c      	mov	ip, r1
 8009c88:	4463      	add	r3, ip
 8009c8a:	0412      	lsls	r2, r2, #16
 8009c8c:	0c12      	lsrs	r2, r2, #16
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c92:	2b3e      	cmp	r3, #62	; 0x3e
 8009c94:	d91e      	bls.n	8009cd4 <USB_EPStartXfer+0x93c>
 8009c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c98:	095b      	lsrs	r3, r3, #5
 8009c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9e:	221f      	movs	r2, #31
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d102      	bne.n	8009caa <USB_EPStartXfer+0x912>
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	4a77      	ldr	r2, [pc, #476]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009cb2:	4694      	mov	ip, r2
 8009cb4:	4463      	add	r3, ip
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cba:	069b      	lsls	r3, r3, #26
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4972      	ldr	r1, [pc, #456]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009cc6:	468c      	mov	ip, r1
 8009cc8:	4463      	add	r3, ip
 8009cca:	2180      	movs	r1, #128	; 0x80
 8009ccc:	0609      	lsls	r1, r1, #24
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	e065      	b.n	8009da0 <USB_EPStartXfer+0xa08>
 8009cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d121      	bne.n	8009d1e <USB_EPStartXfer+0x986>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4a6b      	ldr	r2, [pc, #428]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009ce2:	4694      	mov	ip, r2
 8009ce4:	4463      	add	r3, ip
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4968      	ldr	r1, [pc, #416]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009cf0:	468c      	mov	ip, r1
 8009cf2:	4463      	add	r3, ip
 8009cf4:	4967      	ldr	r1, [pc, #412]	; (8009e94 <USB_EPStartXfer+0xafc>)
 8009cf6:	400a      	ands	r2, r1
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	4a63      	ldr	r2, [pc, #396]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d02:	4694      	mov	ip, r2
 8009d04:	4463      	add	r3, ip
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	4960      	ldr	r1, [pc, #384]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d10:	468c      	mov	ip, r1
 8009d12:	4463      	add	r3, ip
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	0609      	lsls	r1, r1, #24
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	e040      	b.n	8009da0 <USB_EPStartXfer+0xa08>
 8009d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d26:	2201      	movs	r2, #1
 8009d28:	4013      	ands	r3, r2
 8009d2a:	d002      	beq.n	8009d32 <USB_EPStartXfer+0x99a>
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	3301      	adds	r3, #1
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	4a55      	ldr	r2, [pc, #340]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d3a:	4694      	mov	ip, r2
 8009d3c:	4463      	add	r3, ip
 8009d3e:	6819      	ldr	r1, [r3, #0]
 8009d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d42:	069a      	lsls	r2, r3, #26
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	4851      	ldr	r0, [pc, #324]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d4c:	4684      	mov	ip, r0
 8009d4e:	4463      	add	r3, ip
 8009d50:	430a      	orrs	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	e024      	b.n	8009da0 <USB_EPStartXfer+0xa08>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d120      	bne.n	8009da0 <USB_EPStartXfer+0xa08>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	4a4a      	ldr	r2, [pc, #296]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d66:	4694      	mov	ip, r2
 8009d68:	4463      	add	r3, ip
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	4947      	ldr	r1, [pc, #284]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d74:	468c      	mov	ip, r1
 8009d76:	4463      	add	r3, ip
 8009d78:	0412      	lsls	r2, r2, #16
 8009d7a:	0c12      	lsrs	r2, r2, #16
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	4a42      	ldr	r2, [pc, #264]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d86:	4694      	mov	ip, r2
 8009d88:	4463      	add	r3, ip
 8009d8a:	6819      	ldr	r1, [r3, #0]
 8009d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d8e:	041a      	lsls	r2, r3, #16
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	483e      	ldr	r0, [pc, #248]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009d98:	4684      	mov	ip, r0
 8009d9a:	4463      	add	r3, ip
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009da0:	201a      	movs	r0, #26
 8009da2:	183b      	adds	r3, r7, r0
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	88d2      	ldrh	r2, [r2, #6]
 8009da8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	6959      	ldr	r1, [r3, #20]
 8009dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db0:	b29c      	uxth	r4, r3
 8009db2:	183b      	adds	r3, r7, r0
 8009db4:	881a      	ldrh	r2, [r3, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	0023      	movs	r3, r4
 8009dba:	f000 fd4f 	bl	800a85c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	18d3      	adds	r3, r2, r3
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a33      	ldr	r2, [pc, #204]	; (8009e98 <USB_EPStartXfer+0xb00>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2210      	movs	r2, #16
 8009dd4:	4053      	eors	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	4053      	eors	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	18d3      	adds	r3, r2, r3
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	492b      	ldr	r1, [pc, #172]	; (8009e9c <USB_EPStartXfer+0xb04>)
 8009dee:	430a      	orrs	r2, r1
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	f000 fb97 	bl	800a524 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	7a9b      	ldrb	r3, [r3, #10]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d000      	beq.n	8009e00 <USB_EPStartXfer+0xa68>
 8009dfe:	e090      	b.n	8009f22 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	699a      	ldr	r2, [r3, #24]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d909      	bls.n	8009e20 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	699a      	ldr	r2, [r3, #24]
 8009e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	619a      	str	r2, [r3, #24]
 8009e1e:	e005      	b.n	8009e2c <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	00db      	lsls	r3, r3, #3
 8009e32:	4a17      	ldr	r2, [pc, #92]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009e34:	4694      	mov	ip, r2
 8009e36:	4463      	add	r3, ip
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	4913      	ldr	r1, [pc, #76]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009e42:	468c      	mov	ip, r1
 8009e44:	4463      	add	r3, ip
 8009e46:	0412      	lsls	r2, r2, #16
 8009e48:	0c12      	lsrs	r2, r2, #16
 8009e4a:	605a      	str	r2, [r3, #4]
 8009e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e50:	d926      	bls.n	8009ea0 <USB_EPStartXfer+0xb08>
 8009e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e5a:	221f      	movs	r2, #31
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	d102      	bne.n	8009e66 <USB_EPStartXfer+0xace>
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	3b01      	subs	r3, #1
 8009e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009e6e:	4694      	mov	ip, r2
 8009e70:	4463      	add	r3, ip
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	069b      	lsls	r3, r3, #26
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	4903      	ldr	r1, [pc, #12]	; (8009e90 <USB_EPStartXfer+0xaf8>)
 8009e82:	468c      	mov	ip, r1
 8009e84:	4463      	add	r3, ip
 8009e86:	2180      	movs	r1, #128	; 0x80
 8009e88:	0609      	lsls	r1, r1, #24
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	e32d      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 8009e90:	40009800 	.word	0x40009800
 8009e94:	83ffffff 	.word	0x83ffffff
 8009e98:	07ff8fbf 	.word	0x07ff8fbf
 8009e9c:	00008080 	.word	0x00008080
 8009ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d121      	bne.n	8009eea <USB_EPStartXfer+0xb52>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	4ae0      	ldr	r2, [pc, #896]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009eae:	4694      	mov	ip, r2
 8009eb0:	4463      	add	r3, ip
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	49dd      	ldr	r1, [pc, #884]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009ebc:	468c      	mov	ip, r1
 8009ebe:	4463      	add	r3, ip
 8009ec0:	49dc      	ldr	r1, [pc, #880]	; (800a234 <USB_EPStartXfer+0xe9c>)
 8009ec2:	400a      	ands	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	4ad8      	ldr	r2, [pc, #864]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009ece:	4694      	mov	ip, r2
 8009ed0:	4463      	add	r3, ip
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	49d5      	ldr	r1, [pc, #852]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009edc:	468c      	mov	ip, r1
 8009ede:	4463      	add	r3, ip
 8009ee0:	2180      	movs	r1, #128	; 0x80
 8009ee2:	0609      	lsls	r1, r1, #24
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	e300      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 8009eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	d002      	beq.n	8009efe <USB_EPStartXfer+0xb66>
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	3301      	adds	r3, #1
 8009efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	4aca      	ldr	r2, [pc, #808]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f06:	4694      	mov	ip, r2
 8009f08:	4463      	add	r3, ip
 8009f0a:	6859      	ldr	r1, [r3, #4]
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	069a      	lsls	r2, r3, #26
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	48c6      	ldr	r0, [pc, #792]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f18:	4684      	mov	ip, r0
 8009f1a:	4463      	add	r3, ip
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
 8009f20:	e2e4      	b.n	800a4ec <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	78db      	ldrb	r3, [r3, #3]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d000      	beq.n	8009f2c <USB_EPStartXfer+0xb94>
 8009f2a:	e189      	b.n	800a240 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d000      	beq.n	8009f36 <USB_EPStartXfer+0xb9e>
 8009f34:	e078      	b.n	800a028 <USB_EPStartXfer+0xc90>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	4abc      	ldr	r2, [pc, #752]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f3e:	4694      	mov	ip, r2
 8009f40:	4463      	add	r3, ip
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	49b9      	ldr	r1, [pc, #740]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f4c:	468c      	mov	ip, r1
 8009f4e:	4463      	add	r3, ip
 8009f50:	0412      	lsls	r2, r2, #16
 8009f52:	0c12      	lsrs	r2, r2, #16
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f5c:	d920      	bls.n	8009fa0 <USB_EPStartXfer+0xc08>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	095b      	lsrs	r3, r3, #5
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	221f      	movs	r2, #31
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	d102      	bne.n	8009f76 <USB_EPStartXfer+0xbde>
 8009f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f72:	3b01      	subs	r3, #1
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4aac      	ldr	r2, [pc, #688]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f7e:	4694      	mov	ip, r2
 8009f80:	4463      	add	r3, ip
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f86:	069b      	lsls	r3, r3, #26
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	00db      	lsls	r3, r3, #3
 8009f90:	49a7      	ldr	r1, [pc, #668]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009f92:	468c      	mov	ip, r1
 8009f94:	4463      	add	r3, ip
 8009f96:	2180      	movs	r1, #128	; 0x80
 8009f98:	0609      	lsls	r1, r1, #24
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	e069      	b.n	800a074 <USB_EPStartXfer+0xcdc>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d121      	bne.n	8009fec <USB_EPStartXfer+0xc54>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	4aa0      	ldr	r2, [pc, #640]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009fb0:	4694      	mov	ip, r2
 8009fb2:	4463      	add	r3, ip
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	499c      	ldr	r1, [pc, #624]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009fbe:	468c      	mov	ip, r1
 8009fc0:	4463      	add	r3, ip
 8009fc2:	499c      	ldr	r1, [pc, #624]	; (800a234 <USB_EPStartXfer+0xe9c>)
 8009fc4:	400a      	ands	r2, r1
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	4a98      	ldr	r2, [pc, #608]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009fd0:	4694      	mov	ip, r2
 8009fd2:	4463      	add	r3, ip
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	4994      	ldr	r1, [pc, #592]	; (800a230 <USB_EPStartXfer+0xe98>)
 8009fde:	468c      	mov	ip, r1
 8009fe0:	4463      	add	r3, ip
 8009fe2:	2180      	movs	r1, #128	; 0x80
 8009fe4:	0609      	lsls	r1, r1, #24
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e043      	b.n	800a074 <USB_EPStartXfer+0xcdc>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d002      	beq.n	800a004 <USB_EPStartXfer+0xc6c>
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a000:	3301      	adds	r3, #1
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4a89      	ldr	r2, [pc, #548]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a00c:	4694      	mov	ip, r2
 800a00e:	4463      	add	r3, ip
 800a010:	6819      	ldr	r1, [r3, #0]
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	069a      	lsls	r2, r3, #26
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	4884      	ldr	r0, [pc, #528]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a01e:	4684      	mov	ip, r0
 800a020:	4463      	add	r3, ip
 800a022:	430a      	orrs	r2, r1
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e025      	b.n	800a074 <USB_EPStartXfer+0xcdc>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d121      	bne.n	800a074 <USB_EPStartXfer+0xcdc>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	00db      	lsls	r3, r3, #3
 800a036:	4a7e      	ldr	r2, [pc, #504]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a038:	4694      	mov	ip, r2
 800a03a:	4463      	add	r3, ip
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	497a      	ldr	r1, [pc, #488]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a046:	468c      	mov	ip, r1
 800a048:	4463      	add	r3, ip
 800a04a:	0412      	lsls	r2, r2, #16
 800a04c:	0c12      	lsrs	r2, r2, #16
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	00db      	lsls	r3, r3, #3
 800a056:	4a76      	ldr	r2, [pc, #472]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a058:	4694      	mov	ip, r2
 800a05a:	4463      	add	r3, ip
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	041a      	lsls	r2, r3, #16
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	00db      	lsls	r3, r3, #3
 800a06a:	4871      	ldr	r0, [pc, #452]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a06c:	4684      	mov	ip, r0
 800a06e:	4463      	add	r3, ip
 800a070:	430a      	orrs	r2, r1
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	785b      	ldrb	r3, [r3, #1]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d000      	beq.n	800a07e <USB_EPStartXfer+0xce6>
 800a07c:	e078      	b.n	800a170 <USB_EPStartXfer+0xdd8>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4a6a      	ldr	r2, [pc, #424]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a086:	4694      	mov	ip, r2
 800a088:	4463      	add	r3, ip
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	4967      	ldr	r1, [pc, #412]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a094:	468c      	mov	ip, r1
 800a096:	4463      	add	r3, ip
 800a098:	0412      	lsls	r2, r2, #16
 800a09a:	0c12      	lsrs	r2, r2, #16
 800a09c:	605a      	str	r2, [r3, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a4:	d920      	bls.n	800a0e8 <USB_EPStartXfer+0xd50>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	633b      	str	r3, [r7, #48]	; 0x30
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	221f      	movs	r2, #31
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d102      	bne.n	800a0be <USB_EPStartXfer+0xd26>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	633b      	str	r3, [r7, #48]	; 0x30
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	4a5a      	ldr	r2, [pc, #360]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a0c6:	4694      	mov	ip, r2
 800a0c8:	4463      	add	r3, ip
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	069b      	lsls	r3, r3, #26
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4955      	ldr	r1, [pc, #340]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a0da:	468c      	mov	ip, r1
 800a0dc:	4463      	add	r3, ip
 800a0de:	2180      	movs	r1, #128	; 0x80
 800a0e0:	0609      	lsls	r1, r1, #24
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
 800a0e6:	e069      	b.n	800a1bc <USB_EPStartXfer+0xe24>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d121      	bne.n	800a134 <USB_EPStartXfer+0xd9c>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	4a4e      	ldr	r2, [pc, #312]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a0f8:	4694      	mov	ip, r2
 800a0fa:	4463      	add	r3, ip
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	494a      	ldr	r1, [pc, #296]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a106:	468c      	mov	ip, r1
 800a108:	4463      	add	r3, ip
 800a10a:	494a      	ldr	r1, [pc, #296]	; (800a234 <USB_EPStartXfer+0xe9c>)
 800a10c:	400a      	ands	r2, r1
 800a10e:	605a      	str	r2, [r3, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	4a46      	ldr	r2, [pc, #280]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a118:	4694      	mov	ip, r2
 800a11a:	4463      	add	r3, ip
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4942      	ldr	r1, [pc, #264]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a126:	468c      	mov	ip, r1
 800a128:	4463      	add	r3, ip
 800a12a:	2180      	movs	r1, #128	; 0x80
 800a12c:	0609      	lsls	r1, r1, #24
 800a12e:	430a      	orrs	r2, r1
 800a130:	605a      	str	r2, [r3, #4]
 800a132:	e043      	b.n	800a1bc <USB_EPStartXfer+0xe24>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	085b      	lsrs	r3, r3, #1
 800a13a:	633b      	str	r3, [r7, #48]	; 0x30
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2201      	movs	r2, #1
 800a142:	4013      	ands	r3, r2
 800a144:	d002      	beq.n	800a14c <USB_EPStartXfer+0xdb4>
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	3301      	adds	r3, #1
 800a14a:	633b      	str	r3, [r7, #48]	; 0x30
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4a37      	ldr	r2, [pc, #220]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a154:	4694      	mov	ip, r2
 800a156:	4463      	add	r3, ip
 800a158:	6859      	ldr	r1, [r3, #4]
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	069a      	lsls	r2, r3, #26
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4832      	ldr	r0, [pc, #200]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a166:	4684      	mov	ip, r0
 800a168:	4463      	add	r3, ip
 800a16a:	430a      	orrs	r2, r1
 800a16c:	605a      	str	r2, [r3, #4]
 800a16e:	e025      	b.n	800a1bc <USB_EPStartXfer+0xe24>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d121      	bne.n	800a1bc <USB_EPStartXfer+0xe24>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4a2c      	ldr	r2, [pc, #176]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a180:	4694      	mov	ip, r2
 800a182:	4463      	add	r3, ip
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4928      	ldr	r1, [pc, #160]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a18e:	468c      	mov	ip, r1
 800a190:	4463      	add	r3, ip
 800a192:	0412      	lsls	r2, r2, #16
 800a194:	0c12      	lsrs	r2, r2, #16
 800a196:	605a      	str	r2, [r3, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	4a24      	ldr	r2, [pc, #144]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a1a0:	4694      	mov	ip, r2
 800a1a2:	4463      	add	r3, ip
 800a1a4:	6859      	ldr	r1, [r3, #4]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	041a      	lsls	r2, r3, #16
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	481f      	ldr	r0, [pc, #124]	; (800a230 <USB_EPStartXfer+0xe98>)
 800a1b4:	4684      	mov	ip, r0
 800a1b6:	4463      	add	r3, ip
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d100      	bne.n	800a1c6 <USB_EPStartXfer+0xe2e>
 800a1c4:	e192      	b.n	800a4ec <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	18d3      	adds	r3, r2, r3
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	2126      	movs	r1, #38	; 0x26
 800a1d4:	187b      	adds	r3, r7, r1
 800a1d6:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1d8:	187b      	adds	r3, r7, r1
 800a1da:	881a      	ldrh	r2, [r3, #0]
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	01db      	lsls	r3, r3, #7
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	d004      	beq.n	800a1ee <USB_EPStartXfer+0xe56>
 800a1e4:	187b      	adds	r3, r7, r1
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	2240      	movs	r2, #64	; 0x40
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	d10d      	bne.n	800a20a <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1ee:	2126      	movs	r1, #38	; 0x26
 800a1f0:	187b      	adds	r3, r7, r1
 800a1f2:	881a      	ldrh	r2, [r3, #0]
 800a1f4:	2380      	movs	r3, #128	; 0x80
 800a1f6:	01db      	lsls	r3, r3, #7
 800a1f8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1fa:	d000      	beq.n	800a1fe <USB_EPStartXfer+0xe66>
 800a1fc:	e176      	b.n	800a4ec <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1fe:	187b      	adds	r3, r7, r1
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	4013      	ands	r3, r2
 800a206:	d000      	beq.n	800a20a <USB_EPStartXfer+0xe72>
 800a208:	e170      	b.n	800a4ec <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	18d3      	adds	r3, r2, r3
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a08      	ldr	r2, [pc, #32]	; (800a238 <USB_EPStartXfer+0xea0>)
 800a218:	4013      	ands	r3, r2
 800a21a:	623b      	str	r3, [r7, #32]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	18d3      	adds	r3, r2, r3
 800a226:	6a3a      	ldr	r2, [r7, #32]
 800a228:	4904      	ldr	r1, [pc, #16]	; (800a23c <USB_EPStartXfer+0xea4>)
 800a22a:	430a      	orrs	r2, r1
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	e15d      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 800a230:	40009800 	.word	0x40009800
 800a234:	83ffffff 	.word	0x83ffffff
 800a238:	07ff8f8f 	.word	0x07ff8f8f
 800a23c:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	78db      	ldrb	r3, [r3, #3]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d000      	beq.n	800a24a <USB_EPStartXfer+0xeb2>
 800a248:	e14e      	b.n	800a4e8 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	699a      	ldr	r2, [r3, #24]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	429a      	cmp	r2, r3
 800a254:	d909      	bls.n	800a26a <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	699a      	ldr	r2, [r3, #24]
 800a260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	619a      	str	r2, [r3, #24]
 800a268:	e005      	b.n	800a276 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2200      	movs	r2, #0
 800a274:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d172      	bne.n	800a364 <USB_EPStartXfer+0xfcc>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	4aaa      	ldr	r2, [pc, #680]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a286:	4694      	mov	ip, r2
 800a288:	4463      	add	r3, ip
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	49a7      	ldr	r1, [pc, #668]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a294:	468c      	mov	ip, r1
 800a296:	4463      	add	r3, ip
 800a298:	0412      	lsls	r2, r2, #16
 800a29a:	0c12      	lsrs	r2, r2, #16
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a2a2:	d91e      	bls.n	800a2e2 <USB_EPStartXfer+0xf4a>
 800a2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a6:	095b      	lsrs	r3, r3, #5
 800a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ac:	221f      	movs	r2, #31
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d102      	bne.n	800a2b8 <USB_EPStartXfer+0xf20>
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	4a9c      	ldr	r2, [pc, #624]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a2c0:	4694      	mov	ip, r2
 800a2c2:	4463      	add	r3, ip
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	069b      	lsls	r3, r3, #26
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	00db      	lsls	r3, r3, #3
 800a2d2:	4997      	ldr	r1, [pc, #604]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a2d4:	468c      	mov	ip, r1
 800a2d6:	4463      	add	r3, ip
 800a2d8:	2180      	movs	r1, #128	; 0x80
 800a2da:	0609      	lsls	r1, r1, #24
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	e065      	b.n	800a3ae <USB_EPStartXfer+0x1016>
 800a2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d121      	bne.n	800a32c <USB_EPStartXfer+0xf94>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	4a90      	ldr	r2, [pc, #576]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a2f0:	4694      	mov	ip, r2
 800a2f2:	4463      	add	r3, ip
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	498c      	ldr	r1, [pc, #560]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a2fe:	468c      	mov	ip, r1
 800a300:	4463      	add	r3, ip
 800a302:	498c      	ldr	r1, [pc, #560]	; (800a534 <USB_EPStartXfer+0x119c>)
 800a304:	400a      	ands	r2, r1
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	4a88      	ldr	r2, [pc, #544]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a310:	4694      	mov	ip, r2
 800a312:	4463      	add	r3, ip
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4984      	ldr	r1, [pc, #528]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a31e:	468c      	mov	ip, r1
 800a320:	4463      	add	r3, ip
 800a322:	2180      	movs	r1, #128	; 0x80
 800a324:	0609      	lsls	r1, r1, #24
 800a326:	430a      	orrs	r2, r1
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e040      	b.n	800a3ae <USB_EPStartXfer+0x1016>
 800a32c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a334:	2201      	movs	r2, #1
 800a336:	4013      	ands	r3, r2
 800a338:	d002      	beq.n	800a340 <USB_EPStartXfer+0xfa8>
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	3301      	adds	r3, #1
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	4a7a      	ldr	r2, [pc, #488]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a348:	4694      	mov	ip, r2
 800a34a:	4463      	add	r3, ip
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	069a      	lsls	r2, r3, #26
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	00db      	lsls	r3, r3, #3
 800a358:	4875      	ldr	r0, [pc, #468]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a35a:	4684      	mov	ip, r0
 800a35c:	4463      	add	r3, ip
 800a35e:	430a      	orrs	r2, r1
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	e024      	b.n	800a3ae <USB_EPStartXfer+0x1016>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d120      	bne.n	800a3ae <USB_EPStartXfer+0x1016>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	4a6f      	ldr	r2, [pc, #444]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a374:	4694      	mov	ip, r2
 800a376:	4463      	add	r3, ip
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	496b      	ldr	r1, [pc, #428]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a382:	468c      	mov	ip, r1
 800a384:	4463      	add	r3, ip
 800a386:	0412      	lsls	r2, r2, #16
 800a388:	0c12      	lsrs	r2, r2, #16
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	4a67      	ldr	r2, [pc, #412]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a394:	4694      	mov	ip, r2
 800a396:	4463      	add	r3, ip
 800a398:	6819      	ldr	r1, [r3, #0]
 800a39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a39c:	041a      	lsls	r2, r3, #16
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4862      	ldr	r0, [pc, #392]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a3a6:	4684      	mov	ip, r0
 800a3a8:	4463      	add	r3, ip
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	785b      	ldrb	r3, [r3, #1]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d172      	bne.n	800a49c <USB_EPStartXfer+0x1104>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	4a5c      	ldr	r2, [pc, #368]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a3be:	4694      	mov	ip, r2
 800a3c0:	4463      	add	r3, ip
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	00db      	lsls	r3, r3, #3
 800a3ca:	4959      	ldr	r1, [pc, #356]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a3cc:	468c      	mov	ip, r1
 800a3ce:	4463      	add	r3, ip
 800a3d0:	0412      	lsls	r2, r2, #16
 800a3d2:	0c12      	lsrs	r2, r2, #16
 800a3d4:	605a      	str	r2, [r3, #4]
 800a3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a3da:	d91e      	bls.n	800a41a <USB_EPStartXfer+0x1082>
 800a3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3de:	095b      	lsrs	r3, r3, #5
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3e4:	221f      	movs	r2, #31
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	d102      	bne.n	800a3f0 <USB_EPStartXfer+0x1058>
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	4a4e      	ldr	r2, [pc, #312]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a3f8:	4694      	mov	ip, r2
 800a3fa:	4463      	add	r3, ip
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	069b      	lsls	r3, r3, #26
 800a402:	431a      	orrs	r2, r3
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	4949      	ldr	r1, [pc, #292]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a40c:	468c      	mov	ip, r1
 800a40e:	4463      	add	r3, ip
 800a410:	2180      	movs	r1, #128	; 0x80
 800a412:	0609      	lsls	r1, r1, #24
 800a414:	430a      	orrs	r2, r1
 800a416:	605a      	str	r2, [r3, #4]
 800a418:	e068      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 800a41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d121      	bne.n	800a464 <USB_EPStartXfer+0x10cc>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	4a42      	ldr	r2, [pc, #264]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a428:	4694      	mov	ip, r2
 800a42a:	4463      	add	r3, ip
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	493e      	ldr	r1, [pc, #248]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a436:	468c      	mov	ip, r1
 800a438:	4463      	add	r3, ip
 800a43a:	493e      	ldr	r1, [pc, #248]	; (800a534 <USB_EPStartXfer+0x119c>)
 800a43c:	400a      	ands	r2, r1
 800a43e:	605a      	str	r2, [r3, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	4a3a      	ldr	r2, [pc, #232]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a448:	4694      	mov	ip, r2
 800a44a:	4463      	add	r3, ip
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4936      	ldr	r1, [pc, #216]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a456:	468c      	mov	ip, r1
 800a458:	4463      	add	r3, ip
 800a45a:	2180      	movs	r1, #128	; 0x80
 800a45c:	0609      	lsls	r1, r1, #24
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	e043      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 800a464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a466:	085b      	lsrs	r3, r3, #1
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
 800a46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a46c:	2201      	movs	r2, #1
 800a46e:	4013      	ands	r3, r2
 800a470:	d002      	beq.n	800a478 <USB_EPStartXfer+0x10e0>
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	3301      	adds	r3, #1
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	4a2c      	ldr	r2, [pc, #176]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a480:	4694      	mov	ip, r2
 800a482:	4463      	add	r3, ip
 800a484:	6859      	ldr	r1, [r3, #4]
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	069a      	lsls	r2, r3, #26
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	4827      	ldr	r0, [pc, #156]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a492:	4684      	mov	ip, r0
 800a494:	4463      	add	r3, ip
 800a496:	430a      	orrs	r2, r1
 800a498:	605a      	str	r2, [r3, #4]
 800a49a:	e027      	b.n	800a4ec <USB_EPStartXfer+0x1154>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d123      	bne.n	800a4ec <USB_EPStartXfer+0x1154>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	4a21      	ldr	r2, [pc, #132]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a4ac:	4694      	mov	ip, r2
 800a4ae:	4463      	add	r3, ip
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	491d      	ldr	r1, [pc, #116]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a4ba:	468c      	mov	ip, r1
 800a4bc:	4463      	add	r3, ip
 800a4be:	0412      	lsls	r2, r2, #16
 800a4c0:	0c12      	lsrs	r2, r2, #16
 800a4c2:	605a      	str	r2, [r3, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	4a19      	ldr	r2, [pc, #100]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a4cc:	4694      	mov	ip, r2
 800a4ce:	4463      	add	r3, ip
 800a4d0:	6859      	ldr	r1, [r3, #4]
 800a4d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d4:	041a      	lsls	r2, r3, #16
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	4814      	ldr	r0, [pc, #80]	; (800a530 <USB_EPStartXfer+0x1198>)
 800a4de:	4684      	mov	ip, r0
 800a4e0:	4463      	add	r3, ip
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	605a      	str	r2, [r3, #4]
 800a4e6:	e001      	b.n	800a4ec <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e01c      	b.n	800a526 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	18d3      	adds	r3, r2, r3
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a0f      	ldr	r2, [pc, #60]	; (800a538 <USB_EPStartXfer+0x11a0>)
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	2280      	movs	r2, #128	; 0x80
 800a502:	0152      	lsls	r2, r2, #5
 800a504:	4053      	eors	r3, r2
 800a506:	61fb      	str	r3, [r7, #28]
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2280      	movs	r2, #128	; 0x80
 800a50c:	0192      	lsls	r2, r2, #6
 800a50e:	4053      	eors	r3, r2
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	18d3      	adds	r3, r2, r3
 800a51c:	69fa      	ldr	r2, [r7, #28]
 800a51e:	4907      	ldr	r1, [pc, #28]	; (800a53c <USB_EPStartXfer+0x11a4>)
 800a520:	430a      	orrs	r2, r1
 800a522:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	0018      	movs	r0, r3
 800a528:	46bd      	mov	sp, r7
 800a52a:	b017      	add	sp, #92	; 0x5c
 800a52c:	bd90      	pop	{r4, r7, pc}
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	40009800 	.word	0x40009800
 800a534:	83ffffff 	.word	0x83ffffff
 800a538:	07ffbf8f 	.word	0x07ffbf8f
 800a53c:	00008080 	.word	0x00008080

0800a540 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	785b      	ldrb	r3, [r3, #1]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d016      	beq.n	800a580 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	18d3      	adds	r3, r2, r3
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a16      	ldr	r2, [pc, #88]	; (800a5b8 <USB_EPSetStall+0x78>)
 800a560:	4013      	ands	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2210      	movs	r2, #16
 800a568:	4053      	eors	r3, r2
 800a56a:	60bb      	str	r3, [r7, #8]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	18d3      	adds	r3, r2, r3
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	4910      	ldr	r1, [pc, #64]	; (800a5bc <USB_EPSetStall+0x7c>)
 800a57a:	430a      	orrs	r2, r1
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e016      	b.n	800a5ae <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	18d3      	adds	r3, r2, r3
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <USB_EPSetStall+0x80>)
 800a58e:	4013      	ands	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2280      	movs	r2, #128	; 0x80
 800a596:	0152      	lsls	r2, r2, #5
 800a598:	4053      	eors	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	18d3      	adds	r3, r2, r3
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4904      	ldr	r1, [pc, #16]	; (800a5bc <USB_EPSetStall+0x7c>)
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b004      	add	sp, #16
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	07ff8fbf 	.word	0x07ff8fbf
 800a5bc:	00008080 	.word	0x00008080
 800a5c0:	07ffbf8f 	.word	0x07ffbf8f

0800a5c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	7a9b      	ldrb	r3, [r3, #10]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d000      	beq.n	800a5d8 <USB_EPClearStall+0x14>
 800a5d6:	e075      	b.n	800a6c4 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d037      	beq.n	800a650 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	18d3      	adds	r3, r2, r3
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2240      	movs	r2, #64	; 0x40
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d011      	beq.n	800a61a <USB_EPClearStall+0x56>
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	18d3      	adds	r3, r2, r3
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a33      	ldr	r2, [pc, #204]	; (800a6d0 <USB_EPClearStall+0x10c>)
 800a604:	4013      	ands	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	18d3      	adds	r3, r2, r3
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	492f      	ldr	r1, [pc, #188]	; (800a6d4 <USB_EPClearStall+0x110>)
 800a616:	430a      	orrs	r2, r1
 800a618:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	78db      	ldrb	r3, [r3, #3]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d050      	beq.n	800a6c4 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	18d3      	adds	r3, r2, r3
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a2a      	ldr	r2, [pc, #168]	; (800a6d8 <USB_EPClearStall+0x114>)
 800a630:	4013      	ands	r3, r2
 800a632:	60bb      	str	r3, [r7, #8]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2220      	movs	r2, #32
 800a638:	4053      	eors	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	18d3      	adds	r3, r2, r3
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	4924      	ldr	r1, [pc, #144]	; (800a6dc <USB_EPClearStall+0x118>)
 800a64a:	430a      	orrs	r2, r1
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	e039      	b.n	800a6c4 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	18d3      	adds	r3, r2, r3
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	01db      	lsls	r3, r3, #7
 800a664:	4013      	ands	r3, r2
 800a666:	d011      	beq.n	800a68c <USB_EPClearStall+0xc8>
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	18d3      	adds	r3, r2, r3
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a16      	ldr	r2, [pc, #88]	; (800a6d0 <USB_EPClearStall+0x10c>)
 800a676:	4013      	ands	r3, r2
 800a678:	61bb      	str	r3, [r7, #24]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	18d3      	adds	r3, r2, r3
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	4916      	ldr	r1, [pc, #88]	; (800a6e0 <USB_EPClearStall+0x11c>)
 800a688:	430a      	orrs	r2, r1
 800a68a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	18d3      	adds	r3, r2, r3
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a12      	ldr	r2, [pc, #72]	; (800a6e4 <USB_EPClearStall+0x120>)
 800a69a:	4013      	ands	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2280      	movs	r2, #128	; 0x80
 800a6a2:	0152      	lsls	r2, r2, #5
 800a6a4:	4053      	eors	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2280      	movs	r2, #128	; 0x80
 800a6ac:	0192      	lsls	r2, r2, #6
 800a6ae:	4053      	eors	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	18d3      	adds	r3, r2, r3
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4907      	ldr	r1, [pc, #28]	; (800a6dc <USB_EPClearStall+0x118>)
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	b008      	add	sp, #32
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	46c0      	nop			; (mov r8, r8)
 800a6d0:	07ff8f8f 	.word	0x07ff8f8f
 800a6d4:	000080c0 	.word	0x000080c0
 800a6d8:	07ff8fbf 	.word	0x07ff8fbf
 800a6dc:	00008080 	.word	0x00008080
 800a6e0:	0000c080 	.word	0x0000c080
 800a6e4:	07ffbf8f 	.word	0x07ffbf8f

0800a6e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	785b      	ldrb	r3, [r3, #1]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d131      	bne.n	800a75e <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	7a9b      	ldrb	r3, [r3, #10]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d15f      	bne.n	800a7c2 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	78db      	ldrb	r3, [r3, #3]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d016      	beq.n	800a738 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	18d3      	adds	r3, r2, r3
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a2d      	ldr	r2, [pc, #180]	; (800a7cc <USB_EPStopXfer+0xe4>)
 800a718:	4013      	ands	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2220      	movs	r2, #32
 800a720:	4053      	eors	r3, r2
 800a722:	60bb      	str	r3, [r7, #8]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	18d3      	adds	r3, r2, r3
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	4927      	ldr	r1, [pc, #156]	; (800a7d0 <USB_EPStopXfer+0xe8>)
 800a732:	430a      	orrs	r2, r1
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	e044      	b.n	800a7c2 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	18d3      	adds	r3, r2, r3
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a21      	ldr	r2, [pc, #132]	; (800a7cc <USB_EPStopXfer+0xe4>)
 800a746:	4013      	ands	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	18d3      	adds	r3, r2, r3
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	491e      	ldr	r1, [pc, #120]	; (800a7d0 <USB_EPStopXfer+0xe8>)
 800a758:	430a      	orrs	r2, r1
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	e031      	b.n	800a7c2 <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	7a9b      	ldrb	r3, [r3, #10]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d12d      	bne.n	800a7c2 <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	78db      	ldrb	r3, [r3, #3]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d017      	beq.n	800a79e <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	18d3      	adds	r3, r2, r3
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a16      	ldr	r2, [pc, #88]	; (800a7d4 <USB_EPStopXfer+0xec>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2280      	movs	r2, #128	; 0x80
 800a784:	0192      	lsls	r2, r2, #6
 800a786:	4053      	eors	r3, r2
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	18d3      	adds	r3, r2, r3
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	490e      	ldr	r1, [pc, #56]	; (800a7d0 <USB_EPStopXfer+0xe8>)
 800a798:	430a      	orrs	r2, r1
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	e011      	b.n	800a7c2 <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	18d3      	adds	r3, r2, r3
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <USB_EPStopXfer+0xec>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	18d3      	adds	r3, r2, r3
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4904      	ldr	r1, [pc, #16]	; (800a7d0 <USB_EPStopXfer+0xe8>)
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b006      	add	sp, #24
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	07ff8fbf 	.word	0x07ff8fbf
 800a7d0:	00008080 	.word	0x00008080
 800a7d4:	07ffbf8f 	.word	0x07ffbf8f

0800a7d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	000a      	movs	r2, r1
 800a7e2:	1cfb      	adds	r3, r7, #3
 800a7e4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a7e6:	1cfb      	adds	r3, r7, #3
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d102      	bne.n	800a7f4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2280      	movs	r2, #128	; 0x80
 800a7f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b002      	add	sp, #8
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80a:	2280      	movs	r2, #128	; 0x80
 800a80c:	0212      	lsls	r2, r2, #8
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b002      	add	sp, #8
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a82c:	4a04      	ldr	r2, [pc, #16]	; (800a840 <USB_DevDisconnect+0x20>)
 800a82e:	401a      	ands	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	0018      	movs	r0, r3
 800a838:	46bd      	mov	sp, r7
 800a83a:	b002      	add	sp, #8
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	46c0      	nop			; (mov r8, r8)
 800a840:	ffff7fff 	.word	0xffff7fff

0800a844 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a850:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a852:	68fb      	ldr	r3, [r7, #12]
}
 800a854:	0018      	movs	r0, r3
 800a856:	46bd      	mov	sp, r7
 800a858:	b004      	add	sp, #16
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	0019      	movs	r1, r3
 800a868:	1dbb      	adds	r3, r7, #6
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	1d3b      	adds	r3, r7, #4
 800a86e:	1c0a      	adds	r2, r1, #0
 800a870:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800a872:	1d3b      	adds	r3, r7, #4
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	3303      	adds	r3, #3
 800a878:	089b      	lsrs	r3, r3, #2
 800a87a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800a87c:	2016      	movs	r0, #22
 800a87e:	183b      	adds	r3, r7, r0
 800a880:	1d3a      	adds	r2, r7, #4
 800a882:	8812      	ldrh	r2, [r2, #0]
 800a884:	2103      	movs	r1, #3
 800a886:	400a      	ands	r2, r1
 800a888:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800a88e:	183b      	adds	r3, r7, r0
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <USB_WritePMA+0x40>
  {
    NbWords--;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	3b01      	subs	r3, #1
 800a89a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800a89c:	1dbb      	adds	r3, r7, #6
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	4a28      	ldr	r2, [pc, #160]	; (800a944 <USB_WritePMA+0xe8>)
 800a8a2:	4694      	mov	ip, r2
 800a8a4:	4463      	add	r3, ip
 800a8a6:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	623b      	str	r3, [r7, #32]
 800a8ac:	e01f      	b.n	800a8ee <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	781a      	ldrb	r2, [r3, #0]
 800a8b2:	7859      	ldrb	r1, [r3, #1]
 800a8b4:	0209      	lsls	r1, r1, #8
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	7899      	ldrb	r1, [r3, #2]
 800a8ba:	0409      	lsls	r1, r1, #16
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	78db      	ldrb	r3, [r3, #3]
 800a8c0:	061b      	lsls	r3, r3, #24
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	001a      	movs	r2, r3
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	623b      	str	r3, [r7, #32]
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1dc      	bne.n	800a8ae <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800a8f4:	2316      	movs	r3, #22
 800a8f6:	18fb      	adds	r3, r7, r3
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01e      	beq.n	800a93c <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800a8fe:	2300      	movs	r3, #0
 800a900:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	001a      	movs	r2, r3
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	409a      	lsls	r2, r3
 800a90e:	0013      	movs	r3, r2
 800a910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a912:	4313      	orrs	r3, r2
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	3301      	adds	r3, #1
 800a91a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3301      	adds	r3, #1
 800a920:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800a922:	2116      	movs	r1, #22
 800a924:	187b      	adds	r3, r7, r1
 800a926:	881a      	ldrh	r2, [r3, #0]
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	3a01      	subs	r2, #1
 800a92c:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e5      	bne.n	800a902 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93a:	601a      	str	r2, [r3, #0]
  }
}
 800a93c:	46c0      	nop			; (mov r8, r8)
 800a93e:	46bd      	mov	sp, r7
 800a940:	b00a      	add	sp, #40	; 0x28
 800a942:	bd80      	pop	{r7, pc}
 800a944:	40009800 	.word	0x40009800

0800a948 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b08b      	sub	sp, #44	; 0x2c
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	0019      	movs	r1, r3
 800a954:	1dbb      	adds	r3, r7, #6
 800a956:	801a      	strh	r2, [r3, #0]
 800a958:	1d3b      	adds	r3, r7, #4
 800a95a:	1c0a      	adds	r2, r1, #0
 800a95c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800a95e:	1d3b      	adds	r3, r7, #4
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	3303      	adds	r3, #3
 800a964:	089b      	lsrs	r3, r3, #2
 800a966:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800a968:	201a      	movs	r0, #26
 800a96a:	183b      	adds	r3, r7, r0
 800a96c:	1d3a      	adds	r2, r7, #4
 800a96e:	8812      	ldrh	r2, [r2, #0]
 800a970:	2103      	movs	r1, #3
 800a972:	400a      	ands	r2, r1
 800a974:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800a97a:	1dbb      	adds	r3, r7, #6
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	4a39      	ldr	r2, [pc, #228]	; (800aa64 <USB_ReadPMA+0x11c>)
 800a980:	4694      	mov	ip, r2
 800a982:	4463      	add	r3, ip
 800a984:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800a986:	183b      	adds	r3, r7, r0
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	3b01      	subs	r3, #1
 800a992:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
 800a998:	e03c      	b.n	800aa14 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	21ff      	movs	r1, #255	; 0xff
 800a9a2:	4011      	ands	r1, r2
 800a9a4:	000c      	movs	r4, r1
 800a9a6:	7819      	ldrb	r1, [r3, #0]
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4001      	ands	r1, r0
 800a9ac:	1c08      	adds	r0, r1, #0
 800a9ae:	1c21      	adds	r1, r4, #0
 800a9b0:	4301      	orrs	r1, r0
 800a9b2:	7019      	strb	r1, [r3, #0]
 800a9b4:	0a11      	lsrs	r1, r2, #8
 800a9b6:	20ff      	movs	r0, #255	; 0xff
 800a9b8:	4001      	ands	r1, r0
 800a9ba:	000c      	movs	r4, r1
 800a9bc:	7859      	ldrb	r1, [r3, #1]
 800a9be:	2000      	movs	r0, #0
 800a9c0:	4001      	ands	r1, r0
 800a9c2:	1c08      	adds	r0, r1, #0
 800a9c4:	1c21      	adds	r1, r4, #0
 800a9c6:	4301      	orrs	r1, r0
 800a9c8:	7059      	strb	r1, [r3, #1]
 800a9ca:	0c11      	lsrs	r1, r2, #16
 800a9cc:	20ff      	movs	r0, #255	; 0xff
 800a9ce:	4001      	ands	r1, r0
 800a9d0:	000c      	movs	r4, r1
 800a9d2:	7899      	ldrb	r1, [r3, #2]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	4001      	ands	r1, r0
 800a9d8:	1c08      	adds	r0, r1, #0
 800a9da:	1c21      	adds	r1, r4, #0
 800a9dc:	4301      	orrs	r1, r0
 800a9de:	7099      	strb	r1, [r3, #2]
 800a9e0:	0e10      	lsrs	r0, r2, #24
 800a9e2:	78da      	ldrb	r2, [r3, #3]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	400a      	ands	r2, r1
 800a9e8:	1c11      	adds	r1, r2, #0
 800a9ea:	1c02      	adds	r2, r0, #0
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	617b      	str	r3, [r7, #20]
    pBuf++;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	617b      	str	r3, [r7, #20]
    pBuf++;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	3301      	adds	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
    pBuf++;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	3b01      	subs	r3, #1
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1bf      	bne.n	800a99a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800aa1a:	231a      	movs	r3, #26
 800aa1c:	18fb      	adds	r3, r7, r3
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01b      	beq.n	800aa5c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	40da      	lsrs	r2, r3
 800aa34:	0013      	movs	r3, r2
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	701a      	strb	r2, [r3, #0]
      count++;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	3301      	adds	r3, #1
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	3301      	adds	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800aa48:	211a      	movs	r1, #26
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	881a      	ldrh	r2, [r3, #0]
 800aa4e:	187b      	adds	r3, r7, r1
 800aa50:	3a01      	subs	r2, #1
 800aa52:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800aa54:	187b      	adds	r3, r7, r1
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e6      	bne.n	800aa2a <USB_ReadPMA+0xe2>
  }
}
 800aa5c:	46c0      	nop			; (mov r8, r8)
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	b00b      	add	sp, #44	; 0x2c
 800aa62:	bd90      	pop	{r4, r7, pc}
 800aa64:	40009800 	.word	0x40009800

0800aa68 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	0004      	movs	r4, r0
 800aa70:	0008      	movs	r0, r1
 800aa72:	0011      	movs	r1, r2
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	1dfb      	adds	r3, r7, #7
 800aa78:	1c22      	adds	r2, r4, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	1dbb      	adds	r3, r7, #6
 800aa7e:	1c02      	adds	r2, r0, #0
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	1d7b      	adds	r3, r7, #5
 800aa84:	1c0a      	adds	r2, r1, #0
 800aa86:	701a      	strb	r2, [r3, #0]

  TRACER_EMB_UnLock();

  TRACER_EMB_SendData();
#else
  return;
 800aa88:	46c0      	nop			; (mov r8, r8)
#endif /* _TRACE */
}
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bd90      	pop	{r4, r7, pc}

0800aa90 <__NVIC_EnableIRQ>:
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	0002      	movs	r2, r0
 800aa98:	1dfb      	adds	r3, r7, #7
 800aa9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aa9c:	1dfb      	adds	r3, r7, #7
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b7f      	cmp	r3, #127	; 0x7f
 800aaa2:	d809      	bhi.n	800aab8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aaa4:	1dfb      	adds	r3, r7, #7
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	231f      	movs	r3, #31
 800aaac:	401a      	ands	r2, r3
 800aaae:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <__NVIC_EnableIRQ+0x30>)
 800aab0:	2101      	movs	r1, #1
 800aab2:	4091      	lsls	r1, r2
 800aab4:	000a      	movs	r2, r1
 800aab6:	601a      	str	r2, [r3, #0]
}
 800aab8:	46c0      	nop			; (mov r8, r8)
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b002      	add	sp, #8
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	e000e100 	.word	0xe000e100

0800aac4 <__NVIC_SetPriority>:
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	0002      	movs	r2, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	1dfb      	adds	r3, r7, #7
 800aad0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aad2:	1dfb      	adds	r3, r7, #7
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b7f      	cmp	r3, #127	; 0x7f
 800aad8:	d828      	bhi.n	800ab2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aada:	4a2f      	ldr	r2, [pc, #188]	; (800ab98 <__NVIC_SetPriority+0xd4>)
 800aadc:	1dfb      	adds	r3, r7, #7
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	089b      	lsrs	r3, r3, #2
 800aae4:	33c0      	adds	r3, #192	; 0xc0
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	589b      	ldr	r3, [r3, r2]
 800aaea:	1dfa      	adds	r2, r7, #7
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	0011      	movs	r1, r2
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	400a      	ands	r2, r1
 800aaf4:	00d2      	lsls	r2, r2, #3
 800aaf6:	21ff      	movs	r1, #255	; 0xff
 800aaf8:	4091      	lsls	r1, r2
 800aafa:	000a      	movs	r2, r1
 800aafc:	43d2      	mvns	r2, r2
 800aafe:	401a      	ands	r2, r3
 800ab00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	019b      	lsls	r3, r3, #6
 800ab06:	22ff      	movs	r2, #255	; 0xff
 800ab08:	401a      	ands	r2, r3
 800ab0a:	1dfb      	adds	r3, r7, #7
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	0018      	movs	r0, r3
 800ab10:	2303      	movs	r3, #3
 800ab12:	4003      	ands	r3, r0
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab18:	481f      	ldr	r0, [pc, #124]	; (800ab98 <__NVIC_SetPriority+0xd4>)
 800ab1a:	1dfb      	adds	r3, r7, #7
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	089b      	lsrs	r3, r3, #2
 800ab22:	430a      	orrs	r2, r1
 800ab24:	33c0      	adds	r3, #192	; 0xc0
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	501a      	str	r2, [r3, r0]
}
 800ab2a:	e031      	b.n	800ab90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab2c:	4a1b      	ldr	r2, [pc, #108]	; (800ab9c <__NVIC_SetPriority+0xd8>)
 800ab2e:	1dfb      	adds	r3, r7, #7
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	0019      	movs	r1, r3
 800ab34:	230f      	movs	r3, #15
 800ab36:	400b      	ands	r3, r1
 800ab38:	3b08      	subs	r3, #8
 800ab3a:	089b      	lsrs	r3, r3, #2
 800ab3c:	3306      	adds	r3, #6
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	18d3      	adds	r3, r2, r3
 800ab42:	3304      	adds	r3, #4
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	1dfa      	adds	r2, r7, #7
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	0011      	movs	r1, r2
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	400a      	ands	r2, r1
 800ab50:	00d2      	lsls	r2, r2, #3
 800ab52:	21ff      	movs	r1, #255	; 0xff
 800ab54:	4091      	lsls	r1, r2
 800ab56:	000a      	movs	r2, r1
 800ab58:	43d2      	mvns	r2, r2
 800ab5a:	401a      	ands	r2, r3
 800ab5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	019b      	lsls	r3, r3, #6
 800ab62:	22ff      	movs	r2, #255	; 0xff
 800ab64:	401a      	ands	r2, r3
 800ab66:	1dfb      	adds	r3, r7, #7
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	4003      	ands	r3, r0
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab74:	4809      	ldr	r0, [pc, #36]	; (800ab9c <__NVIC_SetPriority+0xd8>)
 800ab76:	1dfb      	adds	r3, r7, #7
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	001c      	movs	r4, r3
 800ab7c:	230f      	movs	r3, #15
 800ab7e:	4023      	ands	r3, r4
 800ab80:	3b08      	subs	r3, #8
 800ab82:	089b      	lsrs	r3, r3, #2
 800ab84:	430a      	orrs	r2, r1
 800ab86:	3306      	adds	r3, #6
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	18c3      	adds	r3, r0, r3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	601a      	str	r2, [r3, #0]
}
 800ab90:	46c0      	nop			; (mov r8, r8)
 800ab92:	46bd      	mov	sp, r7
 800ab94:	b003      	add	sp, #12
 800ab96:	bd90      	pop	{r4, r7, pc}
 800ab98:	e000e100 	.word	0xe000e100
 800ab9c:	e000ed00 	.word	0xe000ed00

0800aba0 <LL_UCPD_Enable>:
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2280      	movs	r2, #128	; 0x80
 800abae:	0612      	lsls	r2, r2, #24
 800abb0:	431a      	orrs	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	601a      	str	r2, [r3, #0]
}
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	46bd      	mov	sp, r7
 800abba:	b002      	add	sp, #8
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a05      	ldr	r2, [pc, #20]	; (800abe4 <LL_UCPD_SetRxOrderSet+0x24>)
 800abd0:	401a      	ands	r2, r3
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	601a      	str	r2, [r3, #0]
}
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	46bd      	mov	sp, r7
 800abde:	b002      	add	sp, #8
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	e00fffff 	.word	0xe00fffff

0800abe8 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	4a05      	ldr	r2, [pc, #20]	; (800ac0c <LL_UCPD_SetccEnable+0x24>)
 800abf8:	401a      	ands	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60da      	str	r2, [r3, #12]
}
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	46bd      	mov	sp, r7
 800ac06:	b002      	add	sp, #8
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	fffff3ff 	.word	0xfffff3ff

0800ac10 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	2280      	movs	r2, #128	; 0x80
 800ac1e:	0212      	lsls	r2, r2, #8
 800ac20:	431a      	orrs	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	611a      	str	r2, [r3, #16]
}
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	b002      	add	sp, #8
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2280      	movs	r2, #128	; 0x80
 800ac3c:	01d2      	lsls	r2, r2, #7
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	611a      	str	r2, [r3, #16]
}
 800ac44:	46c0      	nop			; (mov r8, r8)
 800ac46:	46bd      	mov	sp, r7
 800ac48:	b002      	add	sp, #8
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4e:	b08b      	sub	sp, #44	; 0x2c
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	240f      	movs	r4, #15
 800ac5a:	193b      	adds	r3, r7, r4
 800ac5c:	1c02      	adds	r2, r0, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ac60:	193b      	adds	r3, r7, r4
 800ac62:	781a      	ldrb	r2, [r3, #0]
 800ac64:	0013      	movs	r3, r2
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	189b      	adds	r3, r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4a65      	ldr	r2, [pc, #404]	; (800ae04 <CAD_Init+0x1b8>)
 800ac6e:	189b      	adds	r3, r3, r2
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800ac72:	193b      	adds	r3, r7, r4
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	4964      	ldr	r1, [pc, #400]	; (800ae08 <CAD_Init+0x1bc>)
 800ac78:	0013      	movs	r3, r2
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	18cb      	adds	r3, r1, r3
 800ac82:	3310      	adds	r3, #16
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800ac88:	193b      	adds	r3, r7, r4
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	495e      	ldr	r1, [pc, #376]	; (800ae08 <CAD_Init+0x1bc>)
 800ac8e:	0013      	movs	r3, r2
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	18cb      	adds	r3, r1, r3
 800ac98:	330c      	adds	r3, #12
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800ac9e:	193b      	adds	r3, r7, r4
 800aca0:	781a      	ldrb	r2, [r3, #0]
 800aca2:	4959      	ldr	r1, [pc, #356]	; (800ae08 <CAD_Init+0x1bc>)
 800aca4:	0013      	movs	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	1a9b      	subs	r3, r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	18cb      	adds	r3, r1, r3
 800acae:	330c      	adds	r3, #12
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	193b      	adds	r3, r7, r4
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	4854      	ldr	r0, [pc, #336]	; (800ae08 <CAD_Init+0x1bc>)
 800acb8:	0013      	movs	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	1a9b      	subs	r3, r3, r2
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	18c3      	adds	r3, r0, r3
 800acc2:	3310      	adds	r3, #16
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	794a      	ldrb	r2, [r1, #5]
 800acc8:	0612      	lsls	r2, r2, #24
 800acca:	0f92      	lsrs	r2, r2, #30
 800accc:	b2d2      	uxtb	r2, r2
 800acce:	2103      	movs	r1, #3
 800acd0:	400a      	ands	r2, r1
 800acd2:	0010      	movs	r0, r2
 800acd4:	789a      	ldrb	r2, [r3, #2]
 800acd6:	2103      	movs	r1, #3
 800acd8:	438a      	bics	r2, r1
 800acda:	1c11      	adds	r1, r2, #0
 800acdc:	1c02      	adds	r2, r0, #0
 800acde:	430a      	orrs	r2, r1
 800ace0:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800ace2:	193b      	adds	r3, r7, r4
 800ace4:	781a      	ldrb	r2, [r3, #0]
 800ace6:	4948      	ldr	r1, [pc, #288]	; (800ae08 <CAD_Init+0x1bc>)
 800ace8:	0013      	movs	r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	18cb      	adds	r3, r1, r3
 800acf2:	3310      	adds	r3, #16
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	789a      	ldrb	r2, [r3, #2]
 800acf8:	210c      	movs	r1, #12
 800acfa:	438a      	bics	r2, r1
 800acfc:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	220c      	movs	r2, #12
 800ad02:	2100      	movs	r1, #0
 800ad04:	0018      	movs	r0, r3
 800ad06:	f00c fe88 	bl	8017a1a <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800ad0a:	193b      	adds	r3, r7, r4
 800ad0c:	781a      	ldrb	r2, [r3, #0]
 800ad0e:	493e      	ldr	r1, [pc, #248]	; (800ae08 <CAD_Init+0x1bc>)
 800ad10:	0013      	movs	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	18cb      	adds	r3, r1, r3
 800ad1a:	332c      	adds	r3, #44	; 0x2c
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800ad20:	0025      	movs	r5, r4
 800ad22:	193b      	adds	r3, r7, r4
 800ad24:	781c      	ldrb	r4, [r3, #0]
 800ad26:	197b      	adds	r3, r7, r5
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f000 fbb4 	bl	800b498 <USBPD_HW_GetUSPDInstance>
 800ad30:	0001      	movs	r1, r0
 800ad32:	4a35      	ldr	r2, [pc, #212]	; (800ae08 <CAD_Init+0x1bc>)
 800ad34:	0023      	movs	r3, r4
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	1b1b      	subs	r3, r3, r4
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800ad3e:	2614      	movs	r6, #20
 800ad40:	19bb      	adds	r3, r7, r6
 800ad42:	0018      	movs	r0, r3
 800ad44:	f7fd fdf8 	bl	8008938 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800ad48:	002c      	movs	r4, r5
 800ad4a:	193b      	adds	r3, r7, r4
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	492e      	ldr	r1, [pc, #184]	; (800ae08 <CAD_Init+0x1bc>)
 800ad50:	0013      	movs	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	585b      	ldr	r3, [r3, r1]
 800ad5a:	19ba      	adds	r2, r7, r6
 800ad5c:	0011      	movs	r1, r2
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f7fd fdb0 	bl	80088c4 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800ad64:	193b      	adds	r3, r7, r4
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	4927      	ldr	r1, [pc, #156]	; (800ae08 <CAD_Init+0x1bc>)
 800ad6a:	0013      	movs	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	1a9b      	subs	r3, r3, r2
 800ad70:	00db      	lsls	r3, r3, #3
 800ad72:	585b      	ldr	r3, [r3, r1]
 800ad74:	22f8      	movs	r2, #248	; 0xf8
 800ad76:	0452      	lsls	r2, r2, #17
 800ad78:	0011      	movs	r1, r2
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	f7ff ff20 	bl	800abc0 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800ad80:	193b      	adds	r3, r7, r4
 800ad82:	781a      	ldrb	r2, [r3, #0]
 800ad84:	4920      	ldr	r1, [pc, #128]	; (800ae08 <CAD_Init+0x1bc>)
 800ad86:	0013      	movs	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	585b      	ldr	r3, [r3, r1]
 800ad90:	22c0      	movs	r2, #192	; 0xc0
 800ad92:	0112      	lsls	r2, r2, #4
 800ad94:	0011      	movs	r1, r2
 800ad96:	0018      	movs	r0, r3
 800ad98:	f7ff ff26 	bl	800abe8 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800ad9c:	193b      	adds	r3, r7, r4
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f00b fd6c 	bl	801687e <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800ada6:	193b      	adds	r3, r7, r4
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	4917      	ldr	r1, [pc, #92]	; (800ae08 <CAD_Init+0x1bc>)
 800adac:	0013      	movs	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	1a9b      	subs	r3, r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	585b      	ldr	r3, [r3, r1]
 800adb6:	0018      	movs	r0, r3
 800adb8:	f7ff fef2 	bl	800aba0 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800adbc:	193b      	adds	r3, r7, r4
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	0018      	movs	r0, r3
 800adc2:	f001 fc35 	bl	800c630 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	4a10      	ldr	r2, [pc, #64]	; (800ae0c <CAD_Init+0x1c0>)
 800adca:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800adcc:	193b      	adds	r3, r7, r4
 800adce:	781a      	ldrb	r2, [r3, #0]
 800add0:	490d      	ldr	r1, [pc, #52]	; (800ae08 <CAD_Init+0x1bc>)
 800add2:	0013      	movs	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	1a9b      	subs	r3, r3, r2
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	18cb      	adds	r3, r1, r3
 800addc:	330c      	adds	r3, #12
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	795b      	ldrb	r3, [r3, #5]
 800ade2:	06db      	lsls	r3, r3, #27
 800ade4:	0fdb      	lsrs	r3, r3, #31
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	01d0      	lsls	r0, r2, #7
 800adec:	785a      	ldrb	r2, [r3, #1]
 800adee:	217f      	movs	r1, #127	; 0x7f
 800adf0:	400a      	ands	r2, r1
 800adf2:	1c11      	adds	r1, r2, #0
 800adf4:	1c02      	adds	r2, r0, #0
 800adf6:	430a      	orrs	r2, r1
 800adf8:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b00b      	add	sp, #44	; 0x2c
 800ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	20008724 	.word	0x20008724
 800ae08:	2000873c 	.word	0x2000873c
 800ae0c:	0800ae65 	.word	0x0800ae65

0800ae10 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	0002      	movs	r2, r0
 800ae18:	1dfb      	adds	r3, r7, #7
 800ae1a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800ae1c:	1dfb      	adds	r3, r7, #7
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	0018      	movs	r0, r3
 800ae22:	f001 fcb5 	bl	800c790 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800ae26:	1dfb      	adds	r3, r7, #7
 800ae28:	7819      	ldrb	r1, [r3, #0]
 800ae2a:	4a0c      	ldr	r2, [pc, #48]	; (800ae5c <CAD_Enter_ErrorRecovery+0x4c>)
 800ae2c:	000b      	movs	r3, r1
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	185b      	adds	r3, r3, r1
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	5c99      	ldrb	r1, [r3, r2]
 800ae36:	2080      	movs	r0, #128	; 0x80
 800ae38:	4240      	negs	r0, r0
 800ae3a:	4301      	orrs	r1, r0
 800ae3c:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ae3e:	1dfb      	adds	r3, r7, #7
 800ae40:	781a      	ldrb	r2, [r3, #0]
 800ae42:	4907      	ldr	r1, [pc, #28]	; (800ae60 <CAD_Enter_ErrorRecovery+0x50>)
 800ae44:	0013      	movs	r3, r2
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	1a9b      	subs	r3, r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	18cb      	adds	r3, r1, r3
 800ae4e:	332c      	adds	r3, #44	; 0x2c
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4798      	blx	r3
}
 800ae54:	46c0      	nop			; (mov r8, r8)
 800ae56:	46bd      	mov	sp, r7
 800ae58:	b002      	add	sp, #8
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20008724 	.word	0x20008724
 800ae60:	2000873c 	.word	0x2000873c

0800ae64 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	607a      	str	r2, [r7, #4]
 800ae6e:	210f      	movs	r1, #15
 800ae70:	187b      	adds	r3, r7, r1
 800ae72:	1c02      	adds	r2, r0, #0
 800ae74:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ae76:	187b      	adds	r3, r7, r1
 800ae78:	781a      	ldrb	r2, [r3, #0]
 800ae7a:	0013      	movs	r3, r2
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	189b      	adds	r3, r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <CAD_StateMachine_SNK+0x8c>)
 800ae84:	189b      	adds	r3, r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ae88:	2302      	movs	r3, #2
 800ae8a:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	785b      	ldrb	r3, [r3, #1]
 800ae90:	069b      	lsls	r3, r3, #26
 800ae92:	0edb      	lsrs	r3, r3, #27
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d019      	beq.n	800aece <CAD_StateMachine_SNK+0x6a>
 800ae9a:	dc23      	bgt.n	800aee4 <CAD_StateMachine_SNK+0x80>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d002      	beq.n	800aea6 <CAD_StateMachine_SNK+0x42>
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d009      	beq.n	800aeb8 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 800aea4:	e01e      	b.n	800aee4 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 800aea6:	230f      	movs	r3, #15
 800aea8:	18fb      	adds	r3, r7, r3
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	0018      	movs	r0, r3
 800aeae:	f000 f98b 	bl	800b1c8 <ManageStateDetached_SNK>
 800aeb2:	0003      	movs	r3, r0
 800aeb4:	617b      	str	r3, [r7, #20]
      break;
 800aeb6:	e016      	b.n	800aee6 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	230f      	movs	r3, #15
 800aebe:	18fb      	adds	r3, r7, r3
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	0018      	movs	r0, r3
 800aec4:	f000 f9d2 	bl	800b26c <ManageStateAttachedWait_SNK>
 800aec8:	0003      	movs	r3, r0
 800aeca:	617b      	str	r3, [r7, #20]
      break;
 800aecc:	e00b      	b.n	800aee6 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	230f      	movs	r3, #15
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	0018      	movs	r0, r3
 800aeda:	f000 fa55 	bl	800b388 <ManageStateAttached_SNK>
 800aede:	0003      	movs	r3, r0
 800aee0:	617b      	str	r3, [r7, #20]
      break;
 800aee2:	e000      	b.n	800aee6 <CAD_StateMachine_SNK+0x82>
      break;
 800aee4:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800aee6:	697b      	ldr	r3, [r7, #20]
}
 800aee8:	0018      	movs	r0, r3
 800aeea:	46bd      	mov	sp, r7
 800aeec:	b006      	add	sp, #24
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20008724 	.word	0x20008724

0800aef4 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800aef4:	b590      	push	{r4, r7, lr}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	210f      	movs	r1, #15
 800af00:	187b      	adds	r3, r7, r1
 800af02:	1c02      	adds	r2, r0, #0
 800af04:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800af06:	187b      	adds	r3, r7, r1
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	0013      	movs	r3, r2
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	189b      	adds	r3, r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4a5d      	ldr	r2, [pc, #372]	; (800b088 <CAD_StateMachine+0x194>)
 800af14:	189b      	adds	r3, r3, r2
 800af16:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800af18:	2302      	movs	r3, #2
 800af1a:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800af22:	187b      	adds	r3, r7, r1
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	4959      	ldr	r1, [pc, #356]	; (800b08c <CAD_StateMachine+0x198>)
 800af28:	0013      	movs	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	18cb      	adds	r3, r1, r3
 800af32:	3310      	adds	r3, #16
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2210      	movs	r2, #16
 800af3a:	4013      	ands	r3, r2
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <CAD_StateMachine+0x52>
  {
    return _timing;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	e09c      	b.n	800b080 <CAD_StateMachine+0x18c>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	227f      	movs	r2, #127	; 0x7f
 800af4c:	4393      	bics	r3, r2
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00c      	beq.n	800af6e <CAD_StateMachine+0x7a>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	217f      	movs	r1, #127	; 0x7f
 800af5a:	400a      	ands	r2, r1
 800af5c:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	785a      	ldrb	r2, [r3, #1]
 800af62:	213e      	movs	r1, #62	; 0x3e
 800af64:	438a      	bics	r2, r1
 800af66:	1c11      	adds	r1, r2, #0
 800af68:	2218      	movs	r2, #24
 800af6a:	430a      	orrs	r2, r1
 800af6c:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	069b      	lsls	r3, r3, #26
 800af74:	0edb      	lsrs	r3, r3, #27
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b0d      	cmp	r3, #13
 800af7a:	d05c      	beq.n	800b036 <CAD_StateMachine+0x142>
 800af7c:	dc72      	bgt.n	800b064 <CAD_StateMachine+0x170>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <CAD_StateMachine+0x94>
 800af82:	2b0c      	cmp	r3, #12
 800af84:	d02b      	beq.n	800afde <CAD_StateMachine+0xea>
 800af86:	e06d      	b.n	800b064 <CAD_StateMachine+0x170>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800af88:	240f      	movs	r4, #15
 800af8a:	193b      	adds	r3, r7, r4
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	493f      	ldr	r1, [pc, #252]	; (800b08c <CAD_StateMachine+0x198>)
 800af90:	0013      	movs	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	585b      	ldr	r3, [r3, r1]
 800af9a:	0018      	movs	r0, r3
 800af9c:	f7ff fe38 	bl	800ac10 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800afa0:	193b      	adds	r3, r7, r4
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	4939      	ldr	r1, [pc, #228]	; (800b08c <CAD_StateMachine+0x198>)
 800afa6:	0013      	movs	r3, r2
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	00db      	lsls	r3, r3, #3
 800afae:	585b      	ldr	r3, [r3, r1]
 800afb0:	0018      	movs	r0, r3
 800afb2:	f7ff fe3c 	bl	800ac2e <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      if (0 == PortNum)
 800afb6:	193b      	adds	r3, r7, r4
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <CAD_StateMachine+0xd8>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800afbe:	2102      	movs	r1, #2
 800afc0:	2008      	movs	r0, #8
 800afc2:	f7ff fd7f 	bl	800aac4 <__NVIC_SetPriority>
 800afc6:	2008      	movs	r0, #8
 800afc8:	f7ff fd62 	bl	800aa90 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	785a      	ldrb	r2, [r3, #1]
 800afd0:	213e      	movs	r1, #62	; 0x3e
 800afd2:	438a      	bics	r2, r1
 800afd4:	1c11      	adds	r1, r2, #0
 800afd6:	2202      	movs	r2, #2
 800afd8:	430a      	orrs	r2, r1
 800afda:	705a      	strb	r2, [r3, #1]
      break;
 800afdc:	e04f      	b.n	800b07e <CAD_StateMachine+0x18a>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800afde:	240f      	movs	r4, #15
 800afe0:	193b      	adds	r3, r7, r4
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	0018      	movs	r0, r3
 800afe6:	f001 fbd3 	bl	800c790 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800afea:	193b      	adds	r3, r7, r4
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	4927      	ldr	r1, [pc, #156]	; (800b08c <CAD_StateMachine+0x198>)
 800aff0:	0013      	movs	r3, r2
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	18cb      	adds	r3, r1, r3
 800affa:	3334      	adds	r3, #52	; 0x34
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	2103      	movs	r1, #3
 800b00c:	438a      	bics	r2, r1
 800b00e:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2201      	movs	r2, #1
 800b014:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800b016:	f7f8 feb7 	bl	8003d88 <HAL_GetTick>
 800b01a:	0002      	movs	r2, r0
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800b020:	231a      	movs	r3, #26
 800b022:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	785a      	ldrb	r2, [r3, #1]
 800b028:	213e      	movs	r1, #62	; 0x3e
 800b02a:	438a      	bics	r2, r1
 800b02c:	1c11      	adds	r1, r2, #0
 800b02e:	221a      	movs	r2, #26
 800b030:	430a      	orrs	r2, r1
 800b032:	705a      	strb	r2, [r3, #1]
      break;
 800b034:	e023      	b.n	800b07e <CAD_StateMachine+0x18a>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800b036:	f7f8 fea7 	bl	8003d88 <HAL_GetTick>
 800b03a:	0002      	movs	r2, r0
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b1a      	cmp	r3, #26
 800b044:	d91a      	bls.n	800b07c <CAD_StateMachine+0x188>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800b046:	230f      	movs	r3, #15
 800b048:	18fb      	adds	r3, r7, r3
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	0018      	movs	r0, r3
 800b04e:	f001 faef 	bl	800c630 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	785a      	ldrb	r2, [r3, #1]
 800b056:	213e      	movs	r1, #62	; 0x3e
 800b058:	438a      	bics	r2, r1
 800b05a:	1c11      	adds	r1, r2, #0
 800b05c:	2202      	movs	r2, #2
 800b05e:	430a      	orrs	r2, r1
 800b060:	705a      	strb	r2, [r3, #1]
      }
      break;
 800b062:	e00b      	b.n	800b07c <CAD_StateMachine+0x188>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	687c      	ldr	r4, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	220f      	movs	r2, #15
 800b06e:	18ba      	adds	r2, r7, r2
 800b070:	7810      	ldrb	r0, [r2, #0]
 800b072:	0022      	movs	r2, r4
 800b074:	4798      	blx	r3
 800b076:	0003      	movs	r3, r0
 800b078:	617b      	str	r3, [r7, #20]
      break;
 800b07a:	e000      	b.n	800b07e <CAD_StateMachine+0x18a>
      break;
 800b07c:	46c0      	nop			; (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800b07e:	697b      	ldr	r3, [r7, #20]
}
 800b080:	0018      	movs	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	b007      	add	sp, #28
 800b086:	bd90      	pop	{r4, r7, pc}
 800b088:	20008724 	.word	0x20008724
 800b08c:	2000873c 	.word	0x2000873c

0800b090 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	0002      	movs	r2, r0
 800b098:	1dfb      	adds	r3, r7, #7
 800b09a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800b09c:	1dfb      	adds	r3, r7, #7
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	0013      	movs	r3, r2
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	189b      	adds	r3, r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a45      	ldr	r2, [pc, #276]	; (800b1c0 <CAD_Check_HW_SNK+0x130>)
 800b0aa:	189b      	adds	r3, r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800b0ae:	1dfb      	adds	r3, r7, #7
 800b0b0:	781a      	ldrb	r2, [r3, #0]
 800b0b2:	4944      	ldr	r1, [pc, #272]	; (800b1c4 <CAD_Check_HW_SNK+0x134>)
 800b0b4:	0013      	movs	r3, r2
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	1a9b      	subs	r3, r3, r2
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	585b      	ldr	r3, [r3, r1]
 800b0be:	695a      	ldr	r2, [r3, #20]
 800b0c0:	23c0      	movs	r3, #192	; 0xc0
 800b0c2:	029b      	lsls	r3, r3, #10
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800b0c8:	1dfb      	adds	r3, r7, #7
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	493d      	ldr	r1, [pc, #244]	; (800b1c4 <CAD_Check_HW_SNK+0x134>)
 800b0ce:	0013      	movs	r3, r2
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	585b      	ldr	r3, [r3, r1]
 800b0d8:	695a      	ldr	r2, [r3, #20]
 800b0da:	23c0      	movs	r3, #192	; 0xc0
 800b0dc:	031b      	lsls	r3, r3, #12
 800b0de:	4013      	ands	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	781a      	ldrb	r2, [r3, #0]
 800b0e6:	2103      	movs	r1, #3
 800b0e8:	438a      	bics	r2, r1
 800b0ea:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	211c      	movs	r1, #28
 800b0f2:	438a      	bics	r2, r1
 800b0f4:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d02c      	beq.n	800b156 <CAD_Check_HW_SNK+0xc6>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d129      	bne.n	800b156 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	211c      	movs	r1, #28
 800b108:	438a      	bics	r2, r1
 800b10a:	1c11      	adds	r1, r2, #0
 800b10c:	2204      	movs	r2, #4
 800b10e:	430a      	orrs	r2, r1
 800b110:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	2103      	movs	r1, #3
 800b118:	438a      	bics	r2, r1
 800b11a:	1c11      	adds	r1, r2, #0
 800b11c:	2201      	movs	r2, #1
 800b11e:	430a      	orrs	r2, r1
 800b120:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	0c18      	lsrs	r0, r3, #16
 800b126:	1dfb      	adds	r3, r7, #7
 800b128:	781a      	ldrb	r2, [r3, #0]
 800b12a:	4926      	ldr	r1, [pc, #152]	; (800b1c4 <CAD_Check_HW_SNK+0x134>)
 800b12c:	0013      	movs	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	18cb      	adds	r3, r1, r3
 800b136:	3310      	adds	r3, #16
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	1c01      	adds	r1, r0, #0
 800b13c:	2203      	movs	r2, #3
 800b13e:	400a      	ands	r2, r1
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	2103      	movs	r1, #3
 800b144:	400a      	ands	r2, r1
 800b146:	0090      	lsls	r0, r2, #2
 800b148:	789a      	ldrb	r2, [r3, #2]
 800b14a:	210c      	movs	r1, #12
 800b14c:	438a      	bics	r2, r1
 800b14e:	1c11      	adds	r1, r2, #0
 800b150:	1c02      	adds	r2, r0, #0
 800b152:	430a      	orrs	r2, r1
 800b154:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d12c      	bne.n	800b1b6 <CAD_Check_HW_SNK+0x126>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d029      	beq.n	800b1b6 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	211c      	movs	r1, #28
 800b168:	438a      	bics	r2, r1
 800b16a:	1c11      	adds	r1, r2, #0
 800b16c:	2204      	movs	r2, #4
 800b16e:	430a      	orrs	r2, r1
 800b170:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	781a      	ldrb	r2, [r3, #0]
 800b176:	2103      	movs	r1, #3
 800b178:	438a      	bics	r2, r1
 800b17a:	1c11      	adds	r1, r2, #0
 800b17c:	2202      	movs	r2, #2
 800b17e:	430a      	orrs	r2, r1
 800b180:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	0c98      	lsrs	r0, r3, #18
 800b186:	1dfb      	adds	r3, r7, #7
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	490e      	ldr	r1, [pc, #56]	; (800b1c4 <CAD_Check_HW_SNK+0x134>)
 800b18c:	0013      	movs	r3, r2
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	18cb      	adds	r3, r1, r3
 800b196:	3310      	adds	r3, #16
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	1c01      	adds	r1, r0, #0
 800b19c:	2203      	movs	r2, #3
 800b19e:	400a      	ands	r2, r1
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	2103      	movs	r1, #3
 800b1a4:	400a      	ands	r2, r1
 800b1a6:	0090      	lsls	r0, r2, #2
 800b1a8:	789a      	ldrb	r2, [r3, #2]
 800b1aa:	210c      	movs	r1, #12
 800b1ac:	438a      	bics	r2, r1
 800b1ae:	1c11      	adds	r1, r2, #0
 800b1b0:	1c02      	adds	r2, r0, #0
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	709a      	strb	r2, [r3, #2]
  }
}
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	b006      	add	sp, #24
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	20008724 	.word	0x20008724
 800b1c4:	2000873c 	.word	0x2000873c

0800b1c8 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	0002      	movs	r2, r0
 800b1d0:	1dfb      	adds	r3, r7, #7
 800b1d2:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800b1d4:	1dfb      	adds	r3, r7, #7
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	0013      	movs	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	189b      	adds	r3, r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4a21      	ldr	r2, [pc, #132]	; (800b268 <ManageStateDetached_SNK+0xa0>)
 800b1e2:	189b      	adds	r3, r3, r2
 800b1e4:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800b1ea:	1dfb      	adds	r3, r7, #7
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f7ff ff4e 	bl	800b090 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	221c      	movs	r2, #28
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d103      	bne.n	800b20a <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800b202:	2301      	movs	r3, #1
 800b204:	425b      	negs	r3, r3
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	e029      	b.n	800b25e <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800b20a:	f7f8 fdbd 	bl	8003d88 <HAL_GetTick>
 800b20e:	0002      	movs	r2, r0
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	785a      	ldrb	r2, [r3, #1]
 800b218:	213e      	movs	r1, #62	; 0x3e
 800b21a:	438a      	bics	r2, r1
 800b21c:	1c11      	adds	r1, r2, #0
 800b21e:	2204      	movs	r2, #4
 800b220:	430a      	orrs	r2, r1
 800b222:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800b224:	2001      	movs	r0, #1
 800b226:	f7f8 fdb9 	bl	8003d9c <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800b22a:	1dfb      	adds	r3, r7, #7
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	0018      	movs	r0, r3
 800b230:	f7ff ff2e 	bl	800b090 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	221c      	movs	r2, #28
 800b23a:	4013      	ands	r3, r2
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d108      	bne.n	800b254 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	785a      	ldrb	r2, [r3, #1]
 800b246:	213e      	movs	r1, #62	; 0x3e
 800b248:	438a      	bics	r2, r1
 800b24a:	1c11      	adds	r1, r2, #0
 800b24c:	2202      	movs	r2, #2
 800b24e:	430a      	orrs	r2, r1
 800b250:	705a      	strb	r2, [r3, #1]
 800b252:	e004      	b.n	800b25e <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800b254:	1dfb      	adds	r3, r7, #7
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	0018      	movs	r0, r3
 800b25a:	f00b fb21 	bl	80168a0 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800b25e:	68fb      	ldr	r3, [r7, #12]
}
 800b260:	0018      	movs	r0, r3
 800b262:	46bd      	mov	sp, r7
 800b264:	b004      	add	sp, #16
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20008724 	.word	0x20008724

0800b26c <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800b26c:	b590      	push	{r4, r7, lr}
 800b26e:	b089      	sub	sp, #36	; 0x24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	240f      	movs	r4, #15
 800b278:	193b      	adds	r3, r7, r4
 800b27a:	1c02      	adds	r2, r0, #0
 800b27c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800b27e:	193b      	adds	r3, r7, r4
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	0013      	movs	r3, r2
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	189b      	adds	r3, r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4a3e      	ldr	r2, [pc, #248]	; (800b384 <ManageStateAttachedWait_SNK+0x118>)
 800b28c:	189b      	adds	r3, r3, r2
 800b28e:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800b290:	2302      	movs	r3, #2
 800b292:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800b294:	f7f8 fd78 	bl	8003d88 <HAL_GetTick>
 800b298:	0002      	movs	r2, r0
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800b2a2:	193b      	adds	r3, r7, r4
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f7ff fef2 	bl	800b090 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	221c      	movs	r2, #28
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d130      	bne.n	800b31c <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b78      	cmp	r3, #120	; 0x78
 800b2be:	d927      	bls.n	800b310 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800b2c0:	193b      	adds	r3, r7, r4
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	0018      	movs	r0, r3
 800b2c8:	f00b f8a8 	bl	801641c <USBPD_PWR_IF_GetVBUSStatus>
 800b2cc:	0003      	movs	r3, r0
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d11e      	bne.n	800b310 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	079b      	lsls	r3, r3, #30
 800b2d8:	0f9b      	lsrs	r3, r3, #30
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	001a      	movs	r2, r3
 800b2de:	193b      	adds	r3, r7, r4
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f001 faf5 	bl	800c8d4 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	785a      	ldrb	r2, [r3, #1]
 800b2ee:	213e      	movs	r1, #62	; 0x3e
 800b2f0:	438a      	bics	r2, r1
 800b2f2:	1c11      	adds	r1, r2, #0
 800b2f4:	2206      	movs	r2, #6
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	079b      	lsls	r3, r3, #30
 800b306:	0f9b      	lsrs	r3, r3, #30
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	001a      	movs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	2120      	movs	r1, #32
 800b316:	438a      	bics	r2, r1
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e02e      	b.n	800b37a <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2220      	movs	r2, #32
 800b322:	4013      	ands	r3, r2
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10c      	bne.n	800b344 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800b32a:	f7f8 fd2d 	bl	8003d88 <HAL_GetTick>
 800b32e:	0002      	movs	r2, r0
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	2120      	movs	r1, #32
 800b33a:	430a      	orrs	r2, r1
 800b33c:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800b33e:	230c      	movs	r3, #12
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	e01a      	b.n	800b37a <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800b344:	f7f8 fd20 	bl	8003d88 <HAL_GetTick>
 800b348:	0002      	movs	r2, r0
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	2b0c      	cmp	r3, #12
 800b352:	d912      	bls.n	800b37a <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	781a      	ldrb	r2, [r3, #0]
 800b358:	2120      	movs	r1, #32
 800b35a:	438a      	bics	r2, r1
 800b35c:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	785a      	ldrb	r2, [r3, #1]
 800b362:	213e      	movs	r1, #62	; 0x3e
 800b364:	438a      	bics	r2, r1
 800b366:	1c11      	adds	r1, r2, #0
 800b368:	2202      	movs	r2, #2
 800b36a:	430a      	orrs	r2, r1
 800b36c:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800b36e:	230f      	movs	r3, #15
 800b370:	18fb      	adds	r3, r7, r3
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	0018      	movs	r0, r3
 800b376:	f00b faa4 	bl	80168c2 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800b37a:	69fb      	ldr	r3, [r7, #28]
}
 800b37c:	0018      	movs	r0, r3
 800b37e:	46bd      	mov	sp, r7
 800b380:	b009      	add	sp, #36	; 0x24
 800b382:	bd90      	pop	{r4, r7, pc}
 800b384:	20008724 	.word	0x20008724

0800b388 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b089      	sub	sp, #36	; 0x24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
 800b392:	210f      	movs	r1, #15
 800b394:	187b      	adds	r3, r7, r1
 800b396:	1c02      	adds	r2, r0, #0
 800b398:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800b39a:	0008      	movs	r0, r1
 800b39c:	183b      	adds	r3, r7, r0
 800b39e:	781a      	ldrb	r2, [r3, #0]
 800b3a0:	0013      	movs	r3, r2
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	189b      	adds	r3, r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4a2e      	ldr	r2, [pc, #184]	; (800b464 <ManageStateAttached_SNK+0xdc>)
 800b3aa:	189b      	adds	r3, r3, r2
 800b3ac:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800b3b6:	183b      	adds	r3, r7, r0
 800b3b8:	781a      	ldrb	r2, [r3, #0]
 800b3ba:	492b      	ldr	r1, [pc, #172]	; (800b468 <ManageStateAttached_SNK+0xe0>)
 800b3bc:	0013      	movs	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	00db      	lsls	r3, r3, #3
 800b3c4:	18cb      	adds	r3, r1, r3
 800b3c6:	3334      	adds	r3, #52	; 0x34
 800b3c8:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d10c      	bne.n	800b3e8 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800b3ce:	183b      	adds	r3, r7, r0
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	4925      	ldr	r1, [pc, #148]	; (800b468 <ManageStateAttached_SNK+0xe0>)
 800b3d4:	0013      	movs	r3, r2
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	1a9b      	subs	r3, r3, r2
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	585b      	ldr	r3, [r3, r1]
 800b3de:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800b3e0:	23c0      	movs	r3, #192	; 0xc0
 800b3e2:	029b      	lsls	r3, r3, #10
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	e00c      	b.n	800b402 <ManageStateAttached_SNK+0x7a>
 800b3e8:	230f      	movs	r3, #15
 800b3ea:	18fb      	adds	r3, r7, r3
 800b3ec:	781a      	ldrb	r2, [r3, #0]
 800b3ee:	491e      	ldr	r1, [pc, #120]	; (800b468 <ManageStateAttached_SNK+0xe0>)
 800b3f0:	0013      	movs	r3, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	00db      	lsls	r3, r3, #3
 800b3f8:	585b      	ldr	r3, [r3, r1]
 800b3fa:	695a      	ldr	r2, [r3, #20]
 800b3fc:	23c0      	movs	r3, #192	; 0xc0
 800b3fe:	031b      	lsls	r3, r3, #12
 800b400:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800b402:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800b404:	240f      	movs	r4, #15
 800b406:	193b      	adds	r3, r7, r4
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2102      	movs	r1, #2
 800b40c:	0018      	movs	r0, r3
 800b40e:	f00b f805 	bl	801641c <USBPD_PWR_IF_GetVBUSStatus>
 800b412:	0003      	movs	r3, r0
 800b414:	2b01      	cmp	r3, #1
 800b416:	d11e      	bne.n	800b456 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d11a      	bne.n	800b456 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800b420:	193b      	adds	r3, r7, r4
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	0018      	movs	r0, r3
 800b426:	f001 fbb7 	bl	800cb98 <HW_SignalDetachment>
    /* restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	781a      	ldrb	r2, [r3, #0]
 800b42e:	211c      	movs	r1, #28
 800b430:	438a      	bics	r2, r1
 800b432:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	785a      	ldrb	r2, [r3, #1]
 800b438:	213e      	movs	r1, #62	; 0x3e
 800b43a:	438a      	bics	r2, r1
 800b43c:	1c11      	adds	r1, r2, #0
 800b43e:	2202      	movs	r2, #2
 800b440:	430a      	orrs	r2, r1
 800b442:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2201      	movs	r2, #1
 800b448:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	61fb      	str	r3, [r7, #28]
 800b454:	e001      	b.n	800b45a <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800b456:	230a      	movs	r3, #10
 800b458:	61fb      	str	r3, [r7, #28]
  }

  return _timing;
 800b45a:	69fb      	ldr	r3, [r7, #28]
}
 800b45c:	0018      	movs	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	b009      	add	sp, #36	; 0x24
 800b462:	bd90      	pop	{r4, r7, pc}
 800b464:	20008724 	.word	0x20008724
 800b468:	2000873c 	.word	0x2000873c

0800b46c <LL_AHB1_GRP1_EnableClock>:
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800b474:	4b07      	ldr	r3, [pc, #28]	; (800b494 <LL_AHB1_GRP1_EnableClock+0x28>)
 800b476:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b478:	4b06      	ldr	r3, [pc, #24]	; (800b494 <LL_AHB1_GRP1_EnableClock+0x28>)
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800b480:	4b04      	ldr	r3, [pc, #16]	; (800b494 <LL_AHB1_GRP1_EnableClock+0x28>)
 800b482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	4013      	ands	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b48a:	68fb      	ldr	r3, [r7, #12]
}
 800b48c:	46c0      	nop			; (mov r8, r8)
 800b48e:	46bd      	mov	sp, r7
 800b490:	b004      	add	sp, #16
 800b492:	bd80      	pop	{r7, pc}
 800b494:	40021000 	.word	0x40021000

0800b498 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	0002      	movs	r2, r0
 800b4a0:	1dfb      	adds	r3, r7, #7
 800b4a2:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800b4a4:	4b02      	ldr	r3, [pc, #8]	; (800b4b0 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	b002      	add	sp, #8
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	46c0      	nop			; (mov r8, r8)
 800b4b0:	4000a400 	.word	0x4000a400

0800b4b4 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b08f      	sub	sp, #60	; 0x3c
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	0002      	movs	r2, r0
 800b4bc:	1dfb      	adds	r3, r7, #7
 800b4be:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800b4c0:	240c      	movs	r4, #12
 800b4c2:	193b      	adds	r3, r7, r4
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	f7fd f89b 	bl	8008600 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800b4ca:	193b      	adds	r3, r7, r4
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800b4d0:	193b      	adds	r3, r7, r4
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800b4d6:	193b      	adds	r3, r7, r4
 800b4d8:	2200      	movs	r2, #0
 800b4da:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800b4dc:	193b      	adds	r3, r7, r4
 800b4de:	2280      	movs	r2, #128	; 0x80
 800b4e0:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800b4e2:	193b      	adds	r3, r7, r4
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800b4e8:	193b      	adds	r3, r7, r4
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800b4ee:	193b      	adds	r3, r7, r4
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800b4f4:	193b      	adds	r3, r7, r4
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800b4fa:	193b      	adds	r3, r7, r4
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800b500:	193b      	adds	r3, r7, r4
 800b502:	2280      	movs	r2, #128	; 0x80
 800b504:	0192      	lsls	r2, r2, #6
 800b506:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800b508:	1dfb      	adds	r3, r7, #7
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10c      	bne.n	800b52a <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800b510:	2001      	movs	r0, #1
 800b512:	f7ff ffab 	bl	800b46c <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800b516:	193b      	adds	r3, r7, r4
 800b518:	223c      	movs	r2, #60	; 0x3c
 800b51a:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800b51c:	193b      	adds	r3, r7, r4
 800b51e:	4806      	ldr	r0, [pc, #24]	; (800b538 <USBPD_HW_Init_DMARxInstance+0x84>)
 800b520:	001a      	movs	r2, r3
 800b522:	2101      	movs	r1, #1
 800b524:	f7fd f82c 	bl	8008580 <LL_DMA_Init>
      break;
 800b528:	e000      	b.n	800b52c <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800b52a:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800b52c:	4b03      	ldr	r3, [pc, #12]	; (800b53c <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800b52e:	0018      	movs	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	b00f      	add	sp, #60	; 0x3c
 800b534:	bd90      	pop	{r4, r7, pc}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	40020000 	.word	0x40020000
 800b53c:	4002001c 	.word	0x4002001c

0800b540 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	0002      	movs	r2, r0
 800b548:	1dfb      	adds	r3, r7, #7
 800b54a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800b54c:	46c0      	nop			; (mov r8, r8)
 800b54e:	46bd      	mov	sp, r7
 800b550:	b002      	add	sp, #8
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b08f      	sub	sp, #60	; 0x3c
 800b558:	af00      	add	r7, sp, #0
 800b55a:	0002      	movs	r2, r0
 800b55c:	1dfb      	adds	r3, r7, #7
 800b55e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800b560:	240c      	movs	r4, #12
 800b562:	193b      	adds	r3, r7, r4
 800b564:	0018      	movs	r0, r3
 800b566:	f7fd f84b 	bl	8008600 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800b56a:	193b      	adds	r3, r7, r4
 800b56c:	2210      	movs	r2, #16
 800b56e:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800b570:	193b      	adds	r3, r7, r4
 800b572:	2200      	movs	r2, #0
 800b574:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800b576:	193b      	adds	r3, r7, r4
 800b578:	2200      	movs	r2, #0
 800b57a:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800b57c:	193b      	adds	r3, r7, r4
 800b57e:	2280      	movs	r2, #128	; 0x80
 800b580:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800b582:	193b      	adds	r3, r7, r4
 800b584:	2200      	movs	r2, #0
 800b586:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800b588:	193b      	adds	r3, r7, r4
 800b58a:	2200      	movs	r2, #0
 800b58c:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800b58e:	193b      	adds	r3, r7, r4
 800b590:	2200      	movs	r2, #0
 800b592:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800b594:	193b      	adds	r3, r7, r4
 800b596:	2200      	movs	r2, #0
 800b598:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800b59a:	193b      	adds	r3, r7, r4
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800b5a0:	1dfb      	adds	r3, r7, #7
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d110      	bne.n	800b5ca <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800b5a8:	2001      	movs	r0, #1
 800b5aa:	f7ff ff5f 	bl	800b46c <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800b5ae:	193b      	adds	r3, r7, r4
 800b5b0:	223d      	movs	r2, #61	; 0x3d
 800b5b2:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800b5b4:	193b      	adds	r3, r7, r4
 800b5b6:	2280      	movs	r2, #128	; 0x80
 800b5b8:	0152      	lsls	r2, r2, #5
 800b5ba:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800b5bc:	193b      	adds	r3, r7, r4
 800b5be:	4806      	ldr	r0, [pc, #24]	; (800b5d8 <USBPD_HW_Init_DMATxInstance+0x84>)
 800b5c0:	001a      	movs	r2, r3
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	f7fc ffdc 	bl	8008580 <LL_DMA_Init>
      break;
 800b5c8:	e000      	b.n	800b5cc <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800b5ca:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800b5cc:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	b00f      	add	sp, #60	; 0x3c
 800b5d4:	bd90      	pop	{r4, r7, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	40020000 	.word	0x40020000
 800b5dc:	40020008 	.word	0x40020008

0800b5e0 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	0002      	movs	r2, r0
 800b5e8:	1dfb      	adds	r3, r7, #7
 800b5ea:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800b5ec:	46c0      	nop			; (mov r8, r8)
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b002      	add	sp, #8
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	0002      	movs	r2, r0
 800b5fc:	1dfb      	adds	r3, r7, #7
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	1dbb      	adds	r3, r7, #6
 800b602:	1c0a      	adds	r2, r1, #0
 800b604:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800b606:	46c0      	nop			; (mov r8, r8)
  }
}
 800b608:	46c0      	nop			; (mov r8, r8)
 800b60a:	46bd      	mov	sp, r7
 800b60c:	b002      	add	sp, #8
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	2280      	movs	r2, #128	; 0x80
 800b61e:	0212      	lsls	r2, r2, #8
 800b620:	431a      	orrs	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	619a      	str	r2, [r3, #24]
}
 800b626:	46c0      	nop			; (mov r8, r8)
 800b628:	46bd      	mov	sp, r7
 800b62a:	b002      	add	sp, #8
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	2280      	movs	r2, #128	; 0x80
 800b63c:	01d2      	lsls	r2, r2, #7
 800b63e:	431a      	orrs	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	619a      	str	r2, [r3, #24]
}
 800b644:	46c0      	nop			; (mov r8, r8)
 800b646:	46bd      	mov	sp, r7
 800b648:	b002      	add	sp, #8
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	2280      	movs	r2, #128	; 0x80
 800b65a:	0152      	lsls	r2, r2, #5
 800b65c:	431a      	orrs	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	619a      	str	r2, [r3, #24]
}
 800b662:	46c0      	nop			; (mov r8, r8)
 800b664:	46bd      	mov	sp, r7
 800b666:	b002      	add	sp, #8
 800b668:	bd80      	pop	{r7, pc}

0800b66a <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2280      	movs	r2, #128	; 0x80
 800b678:	0112      	lsls	r2, r2, #4
 800b67a:	431a      	orrs	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	619a      	str	r2, [r3, #24]
}
 800b680:	46c0      	nop			; (mov r8, r8)
 800b682:	46bd      	mov	sp, r7
 800b684:	b002      	add	sp, #8
 800b686:	bd80      	pop	{r7, pc}

0800b688 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	2280      	movs	r2, #128	; 0x80
 800b696:	00d2      	lsls	r2, r2, #3
 800b698:	431a      	orrs	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	619a      	str	r2, [r3, #24]
}
 800b69e:	46c0      	nop			; (mov r8, r8)
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	b002      	add	sp, #8
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	2280      	movs	r2, #128	; 0x80
 800b6b4:	0092      	lsls	r2, r2, #2
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	619a      	str	r2, [r3, #24]
}
 800b6bc:	46c0      	nop			; (mov r8, r8)
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	b002      	add	sp, #8
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	2240      	movs	r2, #64	; 0x40
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	619a      	str	r2, [r3, #24]
}
 800b6d8:	46c0      	nop			; (mov r8, r8)
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	b002      	add	sp, #8
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	619a      	str	r2, [r3, #24]
}
 800b6f4:	46c0      	nop			; (mov r8, r8)
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	b002      	add	sp, #8
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2210      	movs	r2, #16
 800b70a:	431a      	orrs	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	619a      	str	r2, [r3, #24]
}
 800b710:	46c0      	nop			; (mov r8, r8)
 800b712:	46bd      	mov	sp, r7
 800b714:	b002      	add	sp, #8
 800b716:	bd80      	pop	{r7, pc}

0800b718 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	2208      	movs	r2, #8
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	619a      	str	r2, [r3, #24]
}
 800b72c:	46c0      	nop			; (mov r8, r8)
 800b72e:	46bd      	mov	sp, r7
 800b730:	b002      	add	sp, #8
 800b732:	bd80      	pop	{r7, pc}

0800b734 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2204      	movs	r2, #4
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	619a      	str	r2, [r3, #24]
}
 800b748:	46c0      	nop			; (mov r8, r8)
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b002      	add	sp, #8
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	2202      	movs	r2, #2
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	619a      	str	r2, [r3, #24]
}
 800b764:	46c0      	nop			; (mov r8, r8)
 800b766:	46bd      	mov	sp, r7
 800b768:	b002      	add	sp, #8
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800b770:	2000      	movs	r0, #0
 800b772:	f000 f803 	bl	800b77c <PORTx_IRQHandler>
}
 800b776:	46c0      	nop			; (mov r8, r8)
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	0002      	movs	r2, r0
 800b784:	1dfb      	adds	r3, r7, #7
 800b786:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800b788:	1dfb      	adds	r3, r7, #7
 800b78a:	781a      	ldrb	r2, [r3, #0]
 800b78c:	49d1      	ldr	r1, [pc, #836]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b78e:	0013      	movs	r3, r2
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	585b      	ldr	r3, [r3, r1]
 800b798:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	d100      	bne.n	800b7ac <PORTx_IRQHandler+0x30>
 800b7aa:	e1b5      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	d02c      	beq.n	800b80e <PORTx_IRQHandler+0x92>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f7ff ffca 	bl	800b750 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800b7bc:	1dfb      	adds	r3, r7, #7
 800b7be:	781a      	ldrb	r2, [r3, #0]
 800b7c0:	49c4      	ldr	r1, [pc, #784]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b7c2:	0013      	movs	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	1a9b      	subs	r3, r3, r2
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	18cb      	adds	r3, r1, r3
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6819      	ldr	r1, [r3, #0]
 800b7d2:	1dfb      	adds	r3, r7, #7
 800b7d4:	781a      	ldrb	r2, [r3, #0]
 800b7d6:	48bf      	ldr	r0, [pc, #764]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b7d8:	0013      	movs	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	1a9b      	subs	r3, r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	18c3      	adds	r3, r0, r3
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	4391      	bics	r1, r2
 800b7ea:	000a      	movs	r2, r1
 800b7ec:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800b7ee:	1dfb      	adds	r3, r7, #7
 800b7f0:	781a      	ldrb	r2, [r3, #0]
 800b7f2:	49b8      	ldr	r1, [pc, #736]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b7f4:	0013      	movs	r3, r2
 800b7f6:	00db      	lsls	r3, r3, #3
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	18cb      	adds	r3, r1, r3
 800b7fe:	3314      	adds	r3, #20
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	1dfa      	adds	r2, r7, #7
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	2101      	movs	r1, #1
 800b808:	0010      	movs	r0, r2
 800b80a:	4798      	blx	r3
      return;
 800b80c:	e184      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2204      	movs	r2, #4
 800b812:	4013      	ands	r3, r2
 800b814:	d02c      	beq.n	800b870 <PORTx_IRQHandler+0xf4>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	0018      	movs	r0, r3
 800b81a:	f7ff ff8b 	bl	800b734 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800b81e:	1dfb      	adds	r3, r7, #7
 800b820:	781a      	ldrb	r2, [r3, #0]
 800b822:	49ac      	ldr	r1, [pc, #688]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b824:	0013      	movs	r3, r2
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	18cb      	adds	r3, r1, r3
 800b82e:	3304      	adds	r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6819      	ldr	r1, [r3, #0]
 800b834:	1dfb      	adds	r3, r7, #7
 800b836:	781a      	ldrb	r2, [r3, #0]
 800b838:	48a6      	ldr	r0, [pc, #664]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b83a:	0013      	movs	r3, r2
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	1a9b      	subs	r3, r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	18c3      	adds	r3, r0, r3
 800b844:	3304      	adds	r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2201      	movs	r2, #1
 800b84a:	4391      	bics	r1, r2
 800b84c:	000a      	movs	r2, r1
 800b84e:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800b850:	1dfb      	adds	r3, r7, #7
 800b852:	781a      	ldrb	r2, [r3, #0]
 800b854:	499f      	ldr	r1, [pc, #636]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b856:	0013      	movs	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	18cb      	adds	r3, r1, r3
 800b860:	3314      	adds	r3, #20
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	1dfa      	adds	r2, r7, #7
 800b866:	7812      	ldrb	r2, [r2, #0]
 800b868:	2100      	movs	r1, #0
 800b86a:	0010      	movs	r0, r2
 800b86c:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800b86e:	e153      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2208      	movs	r2, #8
 800b874:	4013      	ands	r3, r2
 800b876:	d02c      	beq.n	800b8d2 <PORTx_IRQHandler+0x156>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	0018      	movs	r0, r3
 800b87c:	f7ff ff4c 	bl	800b718 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800b880:	1dfb      	adds	r3, r7, #7
 800b882:	781a      	ldrb	r2, [r3, #0]
 800b884:	4993      	ldr	r1, [pc, #588]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b886:	0013      	movs	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	00db      	lsls	r3, r3, #3
 800b88e:	18cb      	adds	r3, r1, r3
 800b890:	3304      	adds	r3, #4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6819      	ldr	r1, [r3, #0]
 800b896:	1dfb      	adds	r3, r7, #7
 800b898:	781a      	ldrb	r2, [r3, #0]
 800b89a:	488e      	ldr	r0, [pc, #568]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b89c:	0013      	movs	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	1a9b      	subs	r3, r3, r2
 800b8a2:	00db      	lsls	r3, r3, #3
 800b8a4:	18c3      	adds	r3, r0, r3
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	4391      	bics	r1, r2
 800b8ae:	000a      	movs	r2, r1
 800b8b0:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800b8b2:	1dfb      	adds	r3, r7, #7
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	4987      	ldr	r1, [pc, #540]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b8b8:	0013      	movs	r3, r2
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	18cb      	adds	r3, r1, r3
 800b8c2:	3314      	adds	r3, #20
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	1dfa      	adds	r2, r7, #7
 800b8c8:	7812      	ldrb	r2, [r2, #0]
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	0010      	movs	r0, r2
 800b8ce:	4798      	blx	r3
      return;
 800b8d0:	e122      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* HRSTDISC : the sent of the hrad reset has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2210      	movs	r2, #16
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	d004      	beq.n	800b8e4 <PORTx_IRQHandler+0x168>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f7ff ff0d 	bl	800b6fc <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800b8e2:	e119      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	d013      	beq.n	800b914 <PORTx_IRQHandler+0x198>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	f7ff fef6 	bl	800b6e0 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800b8f4:	1dfb      	adds	r3, r7, #7
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	4976      	ldr	r1, [pc, #472]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b8fa:	0013      	movs	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	1a9b      	subs	r3, r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	18cb      	adds	r3, r1, r3
 800b904:	3324      	adds	r3, #36	; 0x24
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	1dfa      	adds	r2, r7, #7
 800b90a:	7812      	ldrb	r2, [r2, #0]
 800b90c:	2105      	movs	r1, #5
 800b90e:	0010      	movs	r0, r2
 800b910:	4798      	blx	r3
      return;
 800b912:	e101      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2240      	movs	r2, #64	; 0x40
 800b918:	4013      	ands	r3, r2
 800b91a:	d004      	beq.n	800b926 <PORTx_IRQHandler+0x1aa>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	0018      	movs	r0, r3
 800b920:	f7ff fed0 	bl	800b6c4 <LL_UCPD_ClearFlag_TxUND>
      return;
 800b924:	e0f8      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	2380      	movs	r3, #128	; 0x80
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4013      	ands	r3, r2
 800b92e:	d017      	beq.n	800b960 <PORTx_IRQHandler+0x1e4>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	2b05      	cmp	r3, #5
 800b936:	d10e      	bne.n	800b956 <PORTx_IRQHandler+0x1da>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800b938:	1dfb      	adds	r3, r7, #7
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	4965      	ldr	r1, [pc, #404]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b93e:	0013      	movs	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	18cb      	adds	r3, r1, r3
 800b948:	331c      	adds	r3, #28
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	1dfa      	adds	r2, r7, #7
 800b94e:	7812      	ldrb	r2, [r2, #0]
 800b950:	2106      	movs	r1, #6
 800b952:	0010      	movs	r0, r2
 800b954:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	0018      	movs	r0, r3
 800b95a:	f7ff fea4 	bl	800b6a6 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      return;
 800b95e:	e0db      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	2380      	movs	r3, #128	; 0x80
 800b964:	00db      	lsls	r3, r3, #3
 800b966:	4013      	ands	r3, r2
 800b968:	d013      	beq.n	800b992 <PORTx_IRQHandler+0x216>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800b96a:	1dfb      	adds	r3, r7, #7
 800b96c:	781a      	ldrb	r2, [r3, #0]
 800b96e:	4959      	ldr	r1, [pc, #356]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b970:	0013      	movs	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	18cb      	adds	r3, r1, r3
 800b97a:	331c      	adds	r3, #28
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	1dfa      	adds	r2, r7, #7
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	2105      	movs	r1, #5
 800b984:	0010      	movs	r0, r2
 800b986:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0018      	movs	r0, r3
 800b98c:	f7ff fe7c 	bl	800b688 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800b990:	e0c2      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	4013      	ands	r3, r2
 800b99a:	d009      	beq.n	800b9b0 <PORTx_IRQHandler+0x234>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag[PortNum] = 1;
 800b99c:	1dfb      	adds	r3, r7, #7
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	4a4d      	ldr	r2, [pc, #308]	; (800bad8 <PORTx_IRQHandler+0x35c>)
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f7ff fe5e 	bl	800b66a <LL_UCPD_ClearFlag_RxOvr>
      return;
 800b9ae:	e0b3      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	2380      	movs	r3, #128	; 0x80
 800b9b4:	015b      	lsls	r3, r3, #5
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	d100      	bne.n	800b9bc <PORTx_IRQHandler+0x240>
 800b9ba:	e08f      	b.n	800badc <PORTx_IRQHandler+0x360>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	0018      	movs	r0, r3
 800b9c0:	f7ff fe44 	bl	800b64c <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800b9c4:	1dfb      	adds	r3, r7, #7
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	4942      	ldr	r1, [pc, #264]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b9ca:	0013      	movs	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	18cb      	adds	r3, r1, r3
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6819      	ldr	r1, [r3, #0]
 800b9da:	1dfb      	adds	r3, r7, #7
 800b9dc:	781a      	ldrb	r2, [r3, #0]
 800b9de:	483d      	ldr	r0, [pc, #244]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b9e0:	0013      	movs	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	18c3      	adds	r3, r0, r3
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4391      	bics	r1, r2
 800b9f2:	000a      	movs	r2, r1
 800b9f4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	1dfb      	adds	r3, r7, #7
 800b9fa:	781a      	ldrb	r2, [r3, #0]
 800b9fc:	4935      	ldr	r1, [pc, #212]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800b9fe:	0013      	movs	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	00db      	lsls	r3, r3, #3
 800ba06:	18cb      	adds	r3, r1, r3
 800ba08:	3308      	adds	r3, #8
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4013      	ands	r3, r2
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d0f0      	beq.n	800b9f8 <PORTx_IRQHandler+0x27c>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800ba16:	1dfb      	adds	r3, r7, #7
 800ba18:	781a      	ldrb	r2, [r3, #0]
 800ba1a:	492e      	ldr	r1, [pc, #184]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800ba1c:	0013      	movs	r3, r2
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	1a9b      	subs	r3, r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	18cb      	adds	r3, r1, r3
 800ba26:	3330      	adds	r3, #48	; 0x30
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	1dfb      	adds	r3, r7, #7
 800ba2c:	781a      	ldrb	r2, [r3, #0]
 800ba2e:	4929      	ldr	r1, [pc, #164]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800ba30:	0013      	movs	r3, r2
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	18cb      	adds	r3, r1, r3
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	0002      	movs	r2, r0
 800ba40:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800ba42:	1dfb      	adds	r3, r7, #7
 800ba44:	781a      	ldrb	r2, [r3, #0]
 800ba46:	4923      	ldr	r1, [pc, #140]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800ba48:	0013      	movs	r3, r2
 800ba4a:	00db      	lsls	r3, r3, #3
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	18cb      	adds	r3, r1, r3
 800ba52:	3308      	adds	r3, #8
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2284      	movs	r2, #132	; 0x84
 800ba58:	0052      	lsls	r2, r2, #1
 800ba5a:	605a      	str	r2, [r3, #4]

      /* enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800ba5c:	1dfb      	adds	r3, r7, #7
 800ba5e:	781a      	ldrb	r2, [r3, #0]
 800ba60:	491c      	ldr	r1, [pc, #112]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800ba62:	0013      	movs	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	1a9b      	subs	r3, r3, r2
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	18cb      	adds	r3, r1, r3
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	1dfb      	adds	r3, r7, #7
 800ba74:	781a      	ldrb	r2, [r3, #0]
 800ba76:	4817      	ldr	r0, [pc, #92]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800ba78:	0013      	movs	r3, r2
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	00db      	lsls	r3, r3, #3
 800ba80:	18c3      	adds	r3, r0, r3
 800ba82:	3308      	adds	r3, #8
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2201      	movs	r2, #1
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	2380      	movs	r3, #128	; 0x80
 800ba90:	019b      	lsls	r3, r3, #6
 800ba92:	4013      	ands	r3, r2
 800ba94:	d117      	bne.n	800bac6 <PORTx_IRQHandler+0x34a>
 800ba96:	1dfb      	adds	r3, r7, #7
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	4a0f      	ldr	r2, [pc, #60]	; (800bad8 <PORTx_IRQHandler+0x35c>)
 800ba9c:	5cd3      	ldrb	r3, [r2, r3]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d111      	bne.n	800bac6 <PORTx_IRQHandler+0x34a>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800baa2:	1dfb      	adds	r3, r7, #7
 800baa4:	781a      	ldrb	r2, [r3, #0]
 800baa6:	490b      	ldr	r1, [pc, #44]	; (800bad4 <PORTx_IRQHandler+0x358>)
 800baa8:	0013      	movs	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	18cb      	adds	r3, r1, r3
 800bab2:	3320      	adds	r3, #32
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baba:	2107      	movs	r1, #7
 800babc:	4019      	ands	r1, r3
 800babe:	1dfb      	adds	r3, r7, #7
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	0018      	movs	r0, r3
 800bac4:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800bac6:	1dfb      	adds	r3, r7, #7
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	4a03      	ldr	r2, [pc, #12]	; (800bad8 <PORTx_IRQHandler+0x35c>)
 800bacc:	2100      	movs	r1, #0
 800bace:	54d1      	strb	r1, [r2, r3]
      return;
 800bad0:	e022      	b.n	800bb18 <PORTx_IRQHandler+0x39c>
 800bad2:	46c0      	nop			; (mov r8, r8)
 800bad4:	2000873c 	.word	0x2000873c
 800bad8:	20008730 	.word	0x20008730
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	2380      	movs	r3, #128	; 0x80
 800bae0:	01db      	lsls	r3, r3, #7
 800bae2:	4013      	ands	r3, r2
 800bae4:	d104      	bne.n	800baf0 <PORTx_IRQHandler+0x374>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	2380      	movs	r3, #128	; 0x80
 800baea:	021b      	lsls	r3, r3, #8
 800baec:	4013      	ands	r3, r2
 800baee:	d013      	beq.n	800bb18 <PORTx_IRQHandler+0x39c>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	0018      	movs	r0, r3
 800baf4:	f7ff fd9b 	bl	800b62e <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	0018      	movs	r0, r3
 800bafc:	f7ff fd88 	bl	800b610 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800bb00:	1dfb      	adds	r3, r7, #7
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <PORTx_IRQHandler+0x3a4>)
 800bb06:	0013      	movs	r3, r2
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	1a9b      	subs	r3, r3, r2
 800bb0c:	00db      	lsls	r3, r3, #3
 800bb0e:	18cb      	adds	r3, r1, r3
 800bb10:	332c      	adds	r3, #44	; 0x2c
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800bb16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	b004      	add	sp, #16
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	2000873c 	.word	0x2000873c

0800bb24 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	240f      	movs	r4, #15
 800bb32:	193b      	adds	r3, r7, r4
 800bb34:	1c02      	adds	r2, r0, #0
 800bb36:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800bb38:	193b      	adds	r3, r7, r4
 800bb3a:	781a      	ldrb	r2, [r3, #0]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6919      	ldr	r1, [r3, #16]
 800bb40:	4830      	ldr	r0, [pc, #192]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bb42:	0013      	movs	r3, r2
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	1a9b      	subs	r3, r3, r2
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	18c3      	adds	r3, r0, r3
 800bb4c:	3314      	adds	r3, #20
 800bb4e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800bb50:	193b      	adds	r3, r7, r4
 800bb52:	781a      	ldrb	r2, [r3, #0]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	68d9      	ldr	r1, [r3, #12]
 800bb58:	482a      	ldr	r0, [pc, #168]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bb5a:	0013      	movs	r3, r2
 800bb5c:	00db      	lsls	r3, r3, #3
 800bb5e:	1a9b      	subs	r3, r3, r2
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	18c3      	adds	r3, r0, r3
 800bb64:	3318      	adds	r3, #24
 800bb66:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	781a      	ldrb	r2, [r3, #0]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6859      	ldr	r1, [r3, #4]
 800bb70:	4824      	ldr	r0, [pc, #144]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bb72:	0013      	movs	r3, r2
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	18c3      	adds	r3, r0, r3
 800bb7c:	331c      	adds	r3, #28
 800bb7e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800bb80:	193b      	adds	r3, r7, r4
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	491f      	ldr	r1, [pc, #124]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bb86:	0013      	movs	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	1a9b      	subs	r3, r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	18cb      	adds	r3, r1, r3
 800bb90:	3320      	adds	r3, #32
 800bb92:	4a1d      	ldr	r2, [pc, #116]	; (800bc08 <USBPD_PHY_Init+0xe4>)
 800bb94:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800bb96:	193b      	adds	r3, r7, r4
 800bb98:	781a      	ldrb	r2, [r3, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6899      	ldr	r1, [r3, #8]
 800bb9e:	4819      	ldr	r0, [pc, #100]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bba0:	0013      	movs	r3, r2
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	18c3      	adds	r3, r0, r3
 800bbaa:	3324      	adds	r3, #36	; 0x24
 800bbac:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800bbae:	193b      	adds	r3, r7, r4
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	6959      	ldr	r1, [r3, #20]
 800bbb6:	4813      	ldr	r0, [pc, #76]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bbb8:	0013      	movs	r3, r2
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	1a9b      	subs	r3, r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	18c3      	adds	r3, r0, r3
 800bbc2:	3328      	adds	r3, #40	; 0x28
 800bbc4:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800bbc6:	193b      	adds	r3, r7, r4
 800bbc8:	781a      	ldrb	r2, [r3, #0]
 800bbca:	490e      	ldr	r1, [pc, #56]	; (800bc04 <USBPD_PHY_Init+0xe0>)
 800bbcc:	0013      	movs	r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	1a9b      	subs	r3, r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	18cb      	adds	r3, r1, r3
 800bbd6:	3330      	adds	r3, #48	; 0x30
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800bbdc:	193b      	adds	r3, r7, r4
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <USBPD_PHY_Init+0xe8>)
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	18d3      	adds	r3, r2, r3
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	6a3a      	ldr	r2, [r7, #32]
 800bbea:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800bbec:	193b      	adds	r3, r7, r4
 800bbee:	781a      	ldrb	r2, [r3, #0]
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	6819      	ldr	r1, [r3, #0]
 800bbf4:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <USBPD_PHY_Init+0xe8>)
 800bbf6:	00d2      	lsls	r2, r2, #3
 800bbf8:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	b005      	add	sp, #20
 800bc02:	bd90      	pop	{r4, r7, pc}
 800bc04:	2000873c 	.word	0x2000873c
 800bc08:	0800bd6d 	.word	0x0800bd6d
 800bc0c:	20008734 	.word	0x20008734

0800bc10 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	0002      	movs	r2, r0
 800bc18:	1dfb      	adds	r3, r7, #7
 800bc1a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800bc1c:	4b02      	ldr	r3, [pc, #8]	; (800bc28 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800bc1e:	0018      	movs	r0, r3
 800bc20:	46bd      	mov	sp, r7
 800bc22:	b002      	add	sp, #8
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	00000389 	.word	0x00000389

0800bc2c <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	0002      	movs	r2, r0
 800bc34:	1dfb      	adds	r3, r7, #7
 800bc36:	701a      	strb	r2, [r3, #0]
  return 30u;
 800bc38:	231e      	movs	r3, #30
}
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	b002      	add	sp, #8
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	0002      	movs	r2, r0
 800bc4a:	1dfb      	adds	r3, r7, #7
 800bc4c:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b002      	add	sp, #8
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	0002      	movs	r2, r0
 800bc5e:	1dfb      	adds	r3, r7, #7
 800bc60:	701a      	strb	r2, [r3, #0]
 800bc62:	1dbb      	adds	r3, r7, #6
 800bc64:	1c0a      	adds	r2, r1, #0
 800bc66:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800bc68:	1dbb      	adds	r3, r7, #6
 800bc6a:	7819      	ldrb	r1, [r3, #0]
 800bc6c:	1dfb      	adds	r3, r7, #7
 800bc6e:	7818      	ldrb	r0, [r3, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	2200      	movs	r2, #0
 800bc74:	f000 f805 	bl	800bc82 <USBPD_PHY_SendMessage>
 800bc78:	0003      	movs	r3, r0
}
 800bc7a:	0018      	movs	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	b002      	add	sp, #8
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800bc82:	b590      	push	{r4, r7, lr}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	0004      	movs	r4, r0
 800bc8a:	0008      	movs	r0, r1
 800bc8c:	603a      	str	r2, [r7, #0]
 800bc8e:	0019      	movs	r1, r3
 800bc90:	1dfb      	adds	r3, r7, #7
 800bc92:	1c22      	adds	r2, r4, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	1dbb      	adds	r3, r7, #6
 800bc98:	1c02      	adds	r2, r0, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
 800bc9c:	1d3b      	adds	r3, r7, #4
 800bc9e:	1c0a      	adds	r2, r1, #0
 800bca0:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800bca2:	1d3b      	adds	r3, r7, #4
 800bca4:	881c      	ldrh	r4, [r3, #0]
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	1dbb      	adds	r3, r7, #6
 800bcaa:	7819      	ldrb	r1, [r3, #0]
 800bcac:	1dfb      	adds	r3, r7, #7
 800bcae:	7818      	ldrb	r0, [r3, #0]
 800bcb0:	0023      	movs	r3, r4
 800bcb2:	f000 fadb 	bl	800c26c <USBPD_HW_IF_SendBuffer>
 800bcb6:	0003      	movs	r3, r0
}
 800bcb8:	0018      	movs	r0, r3
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	b003      	add	sp, #12
 800bcbe:	bd90      	pop	{r4, r7, pc}

0800bcc0 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	0002      	movs	r2, r0
 800bcc8:	1dfb      	adds	r3, r7, #7
 800bcca:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800bccc:	1dfb      	adds	r3, r7, #7
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f000 fbc7 	bl	800c464 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	0018      	movs	r0, r3
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	b002      	add	sp, #8
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	0002      	movs	r2, r0
 800bce8:	1dfb      	adds	r3, r7, #7
 800bcea:	701a      	strb	r2, [r3, #0]
 800bcec:	1dbb      	adds	r3, r7, #6
 800bcee:	1c0a      	adds	r2, r1, #0
 800bcf0:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800bcf2:	1dbb      	adds	r3, r7, #6
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b07      	cmp	r3, #7
 800bcf8:	d104      	bne.n	800bd04 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800bcfa:	1dfb      	adds	r3, r7, #7
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	0018      	movs	r0, r3
 800bd00:	f000 fa7c 	bl	800c1fc <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	0018      	movs	r0, r3
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	b002      	add	sp, #8
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	0002      	movs	r2, r0
 800bd16:	1dfb      	adds	r3, r7, #7
 800bd18:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800bd1a:	1dfb      	adds	r3, r7, #7
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f000 ffc8 	bl	800ccb4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800bd24:	0003      	movs	r3, r0
}
 800bd26:	0018      	movs	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	b002      	add	sp, #8
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	0002      	movs	r2, r0
 800bd36:	1dfb      	adds	r3, r7, #7
 800bd38:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800bd3a:	1dfb      	adds	r3, r7, #7
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f000 fd98 	bl	800c874 <USBPD_HW_IF_EnableRX>
}
 800bd44:	46c0      	nop			; (mov r8, r8)
 800bd46:	46bd      	mov	sp, r7
 800bd48:	b002      	add	sp, #8
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	0002      	movs	r2, r0
 800bd54:	1dfb      	adds	r3, r7, #7
 800bd56:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800bd58:	1dfb      	adds	r3, r7, #7
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f000 fda1 	bl	800c8a4 <USBPD_HW_IF_DisableRX>
}
 800bd62:	46c0      	nop			; (mov r8, r8)
 800bd64:	46bd      	mov	sp, r7
 800bd66:	b002      	add	sp, #8
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	0002      	movs	r2, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	1dfb      	adds	r3, r7, #7
 800bd78:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800bd7a:	2008      	movs	r0, #8
 800bd7c:	183b      	adds	r3, r7, r0
 800bd7e:	4a2e      	ldr	r2, [pc, #184]	; (800be38 <PHY_Rx_Completed+0xcc>)
 800bd80:	6811      	ldr	r1, [r2, #0]
 800bd82:	6019      	str	r1, [r3, #0]
 800bd84:	8892      	ldrh	r2, [r2, #4]
 800bd86:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800bd88:	240f      	movs	r4, #15
 800bd8a:	193b      	adds	r3, r7, r4
 800bd8c:	1839      	adds	r1, r7, r0
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	188a      	adds	r2, r1, r2
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800bd96:	193b      	adds	r3, r7, r4
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	dc02      	bgt.n	800bda4 <PHY_Rx_Completed+0x38>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da1d      	bge.n	800bdde <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800bda2:	e040      	b.n	800be26 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800bda4:	2b06      	cmp	r3, #6
 800bda6:	d13e      	bne.n	800be26 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800bda8:	1dfb      	adds	r3, r7, #7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	4a23      	ldr	r2, [pc, #140]	; (800be3c <PHY_Rx_Completed+0xd0>)
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	18d3      	adds	r3, r2, r3
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	221e      	movs	r2, #30
 800bdb8:	4013      	ands	r3, r2
 800bdba:	2b1e      	cmp	r3, #30
 800bdbc:	d135      	bne.n	800be2a <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800bdbe:	1dfb      	adds	r3, r7, #7
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	491f      	ldr	r1, [pc, #124]	; (800be40 <PHY_Rx_Completed+0xd4>)
 800bdc4:	0013      	movs	r3, r2
 800bdc6:	00db      	lsls	r3, r3, #3
 800bdc8:	1a9b      	subs	r3, r3, r2
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	18cb      	adds	r3, r1, r3
 800bdce:	331c      	adds	r3, #28
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	1dfa      	adds	r2, r7, #7
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	2106      	movs	r1, #6
 800bdd8:	0010      	movs	r0, r2
 800bdda:	4798      	blx	r3
      break;
 800bddc:	e025      	b.n	800be2a <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800bdde:	240f      	movs	r4, #15
 800bde0:	193b      	adds	r3, r7, r4
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2201      	movs	r2, #1
 800bde6:	409a      	lsls	r2, r3
 800bde8:	0013      	movs	r3, r2
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	0018      	movs	r0, r3
 800bdee:	1dfb      	adds	r3, r7, #7
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	4a12      	ldr	r2, [pc, #72]	; (800be3c <PHY_Rx_Completed+0xd0>)
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	18d3      	adds	r3, r2, r3
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	193a      	adds	r2, r7, r4
 800bdfe:	7812      	ldrb	r2, [r2, #0]
 800be00:	2101      	movs	r1, #1
 800be02:	4091      	lsls	r1, r2
 800be04:	000a      	movs	r2, r1
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	4013      	ands	r3, r2
 800be0a:	4298      	cmp	r0, r3
 800be0c:	d10f      	bne.n	800be2e <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800be0e:	1dfb      	adds	r3, r7, #7
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <PHY_Rx_Completed+0xd0>)
 800be14:	00d2      	lsls	r2, r2, #3
 800be16:	58d3      	ldr	r3, [r2, r3]
 800be18:	193a      	adds	r2, r7, r4
 800be1a:	7811      	ldrb	r1, [r2, #0]
 800be1c:	1dfa      	adds	r2, r7, #7
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	0010      	movs	r0, r2
 800be22:	4798      	blx	r3
      break;
 800be24:	e003      	b.n	800be2e <PHY_Rx_Completed+0xc2>
      break;
 800be26:	46c0      	nop			; (mov r8, r8)
 800be28:	e002      	b.n	800be30 <PHY_Rx_Completed+0xc4>
      break;
 800be2a:	46c0      	nop			; (mov r8, r8)
 800be2c:	e000      	b.n	800be30 <PHY_Rx_Completed+0xc4>
      break;
 800be2e:	46c0      	nop			; (mov r8, r8)
  }
}
 800be30:	46c0      	nop			; (mov r8, r8)
 800be32:	46bd      	mov	sp, r7
 800be34:	b005      	add	sp, #20
 800be36:	bd90      	pop	{r4, r7, pc}
 800be38:	0801824c 	.word	0x0801824c
 800be3c:	20008734 	.word	0x20008734
 800be40:	2000873c 	.word	0x2000873c

0800be44 <LL_AHB1_GRP1_EnableClock>:
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800be4c:	4b07      	ldr	r3, [pc, #28]	; (800be6c <LL_AHB1_GRP1_EnableClock+0x28>)
 800be4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <LL_AHB1_GRP1_EnableClock+0x28>)
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	430a      	orrs	r2, r1
 800be56:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800be58:	4b04      	ldr	r3, [pc, #16]	; (800be6c <LL_AHB1_GRP1_EnableClock+0x28>)
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	4013      	ands	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be62:	68fb      	ldr	r3, [r7, #12]
}
 800be64:	46c0      	nop			; (mov r8, r8)
 800be66:	46bd      	mov	sp, r7
 800be68:	b004      	add	sp, #16
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	40021000 	.word	0x40021000

0800be70 <LL_APB1_GRP1_EnableClock>:
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <LL_APB1_GRP1_EnableClock+0x28>)
 800be7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <LL_APB1_GRP1_EnableClock+0x28>)
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	430a      	orrs	r2, r1
 800be82:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800be84:	4b04      	ldr	r3, [pc, #16]	; (800be98 <LL_APB1_GRP1_EnableClock+0x28>)
 800be86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	4013      	ands	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be8e:	68fb      	ldr	r3, [r7, #12]
}
 800be90:	46c0      	nop			; (mov r8, r8)
 800be92:	46bd      	mov	sp, r7
 800be94:	b004      	add	sp, #16
 800be96:	bd80      	pop	{r7, pc}
 800be98:	40021000 	.word	0x40021000

0800be9c <LL_APB2_GRP1_EnableClock>:
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800bea4:	4b07      	ldr	r3, [pc, #28]	; (800bec4 <LL_APB2_GRP1_EnableClock+0x28>)
 800bea6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bea8:	4b06      	ldr	r3, [pc, #24]	; (800bec4 <LL_APB2_GRP1_EnableClock+0x28>)
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	430a      	orrs	r2, r1
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <LL_APB2_GRP1_EnableClock+0x28>)
 800beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	4013      	ands	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800beba:	68fb      	ldr	r3, [r7, #12]
}
 800bebc:	46c0      	nop			; (mov r8, r8)
 800bebe:	46bd      	mov	sp, r7
 800bec0:	b004      	add	sp, #16
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	40021000 	.word	0x40021000

0800bec8 <LL_UCPD_Enable>:
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2280      	movs	r2, #128	; 0x80
 800bed6:	0612      	lsls	r2, r2, #24
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	601a      	str	r2, [r3, #0]
}
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	46bd      	mov	sp, r7
 800bee2:	b002      	add	sp, #8
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <LL_UCPD_Disable>:
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	085a      	lsrs	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
}
 800befa:	46c0      	nop			; (mov r8, r8)
 800befc:	46bd      	mov	sp, r7
 800befe:	b002      	add	sp, #8
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	4a03      	ldr	r2, [pc, #12]	; (800bf20 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800bf12:	401a      	ands	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60da      	str	r2, [r3, #12]
}
 800bf18:	46c0      	nop			; (mov r8, r8)
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	b002      	add	sp, #8
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	ffdfffff 	.word	0xffdfffff

0800bf24 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	2280      	movs	r2, #128	; 0x80
 800bf32:	0392      	lsls	r2, r2, #14
 800bf34:	431a      	orrs	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60da      	str	r2, [r3, #12]
}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b002      	add	sp, #8
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	4a03      	ldr	r2, [pc, #12]	; (800bf60 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800bf52:	401a      	ands	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]
}
 800bf58:	46c0      	nop			; (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	ffefffff 	.word	0xffefffff

0800bf64 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	2280      	movs	r2, #128	; 0x80
 800bf72:	0352      	lsls	r2, r2, #13
 800bf74:	431a      	orrs	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	60da      	str	r2, [r3, #12]
}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	b002      	add	sp, #8
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <LL_UCPD_FRSDetectionEnable>:
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	2280      	movs	r2, #128	; 0x80
 800bf90:	0252      	lsls	r2, r2, #9
 800bf92:	431a      	orrs	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	60da      	str	r2, [r3, #12]
}
 800bf98:	46c0      	nop			; (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <LL_UCPD_FRSDetectionDisable>:
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	4a03      	ldr	r2, [pc, #12]	; (800bfbc <LL_UCPD_FRSDetectionDisable+0x1c>)
 800bfae:	401a      	ands	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]
}
 800bfb4:	46c0      	nop			; (mov r8, r8)
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	b002      	add	sp, #8
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	fffeffff 	.word	0xfffeffff

0800bfc0 <LL_UCPD_SetccEnable>:
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	4a05      	ldr	r2, [pc, #20]	; (800bfe4 <LL_UCPD_SetccEnable+0x24>)
 800bfd0:	401a      	ands	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60da      	str	r2, [r3, #12]
}
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	b002      	add	sp, #8
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	fffff3ff 	.word	0xfffff3ff

0800bfe8 <LL_UCPD_SetSNKRole>:
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2280      	movs	r2, #128	; 0x80
 800bff6:	0092      	lsls	r2, r2, #2
 800bff8:	431a      	orrs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	60da      	str	r2, [r3, #12]
}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	46bd      	mov	sp, r7
 800c002:	b002      	add	sp, #8
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <LL_UCPD_SetSRCRole>:
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	4a03      	ldr	r2, [pc, #12]	; (800c024 <LL_UCPD_SetSRCRole+0x1c>)
 800c016:	401a      	ands	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60da      	str	r2, [r3, #12]
}
 800c01c:	46c0      	nop			; (mov r8, r8)
 800c01e:	46bd      	mov	sp, r7
 800c020:	b002      	add	sp, #8
 800c022:	bd80      	pop	{r7, pc}
 800c024:	fffffdff 	.word	0xfffffdff

0800c028 <LL_UCPD_SetRpResistor>:
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	4a05      	ldr	r2, [pc, #20]	; (800c04c <LL_UCPD_SetRpResistor+0x24>)
 800c038:	401a      	ands	r2, r3
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	60da      	str	r2, [r3, #12]
}
 800c042:	46c0      	nop			; (mov r8, r8)
 800c044:	46bd      	mov	sp, r7
 800c046:	b002      	add	sp, #8
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	fffffe7f 	.word	0xfffffe7f

0800c050 <LL_UCPD_SetCCPin>:
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	2240      	movs	r2, #64	; 0x40
 800c060:	4393      	bics	r3, r2
 800c062:	001a      	movs	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	431a      	orrs	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	60da      	str	r2, [r3, #12]
}
 800c06c:	46c0      	nop			; (mov r8, r8)
 800c06e:	46bd      	mov	sp, r7
 800c070:	b002      	add	sp, #8
 800c072:	bd80      	pop	{r7, pc}

0800c074 <LL_UCPD_RxEnable>:
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	2220      	movs	r2, #32
 800c082:	431a      	orrs	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]
}
 800c088:	46c0      	nop			; (mov r8, r8)
 800c08a:	46bd      	mov	sp, r7
 800c08c:	b002      	add	sp, #8
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <LL_UCPD_RxDisable>:
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	2220      	movs	r2, #32
 800c09e:	4393      	bics	r3, r2
 800c0a0:	001a      	movs	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	60da      	str	r2, [r3, #12]
}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b002      	add	sp, #8
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <LL_UCPD_SetRxMode>:
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	4393      	bics	r3, r2
 800c0c0:	001a      	movs	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60da      	str	r2, [r3, #12]
}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	b002      	add	sp, #8
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <LL_UCPD_SendHardReset>:
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	2208      	movs	r2, #8
 800c0e0:	431a      	orrs	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	60da      	str	r2, [r3, #12]
}
 800c0e6:	46c0      	nop			; (mov r8, r8)
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	b002      	add	sp, #8
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <LL_UCPD_SendMessage>:
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	2204      	movs	r2, #4
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60da      	str	r2, [r3, #12]
}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	46bd      	mov	sp, r7
 800c106:	b002      	add	sp, #8
 800c108:	bd80      	pop	{r7, pc}

0800c10a <LL_UCPD_SetTxMode>:
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2203      	movs	r2, #3
 800c11a:	4393      	bics	r3, r2
 800c11c:	001a      	movs	r2, r3
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60da      	str	r2, [r3, #12]
}
 800c126:	46c0      	nop			; (mov r8, r8)
 800c128:	46bd      	mov	sp, r7
 800c12a:	b002      	add	sp, #8
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2280      	movs	r2, #128	; 0x80
 800c13c:	05d2      	lsls	r2, r2, #23
 800c13e:	431a      	orrs	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
}
 800c144:	46c0      	nop			; (mov r8, r8)
 800c146:	46bd      	mov	sp, r7
 800c148:	b002      	add	sp, #8
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a03      	ldr	r2, [pc, #12]	; (800c168 <LL_UCPD_RxDMADisable+0x1c>)
 800c15a:	401a      	ands	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	601a      	str	r2, [r3, #0]
}
 800c160:	46c0      	nop			; (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	b002      	add	sp, #8
 800c166:	bd80      	pop	{r7, pc}
 800c168:	bfffffff 	.word	0xbfffffff

0800c16c <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2280      	movs	r2, #128	; 0x80
 800c17a:	0592      	lsls	r2, r2, #22
 800c17c:	431a      	orrs	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	601a      	str	r2, [r3, #0]
}
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	46bd      	mov	sp, r7
 800c186:	b002      	add	sp, #8
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a03      	ldr	r2, [pc, #12]	; (800c1a8 <LL_UCPD_TxDMADisable+0x1c>)
 800c19a:	401a      	ands	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	601a      	str	r2, [r3, #0]
}
 800c1a0:	46c0      	nop			; (mov r8, r8)
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	b002      	add	sp, #8
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	dfffffff 	.word	0xdfffffff

0800c1ac <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	61da      	str	r2, [r3, #28]
}
 800c1bc:	46c0      	nop			; (mov r8, r8)
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	b002      	add	sp, #8
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	621a      	str	r2, [r3, #32]
}
 800c1d4:	46c0      	nop			; (mov r8, r8)
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	b002      	add	sp, #8
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800c1e0:	2380      	movs	r3, #128	; 0x80
 800c1e2:	055b      	lsls	r3, r3, #21
 800c1e4:	0018      	movs	r0, r3
 800c1e6:	f7ff fe43 	bl	800be70 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800c1ea:	2380      	movs	r3, #128	; 0x80
 800c1ec:	015b      	lsls	r3, r3, #5
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f7ff fe28 	bl	800be44 <LL_AHB1_GRP1_EnableClock>
}
 800c1f4:	46c0      	nop			; (mov r8, r8)
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
	...

0800c1fc <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	0002      	movs	r2, r0
 800c204:	1dfb      	adds	r3, r7, #7
 800c206:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800c208:	1dfb      	adds	r3, r7, #7
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	4916      	ldr	r1, [pc, #88]	; (800c268 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800c20e:	0013      	movs	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	1a9b      	subs	r3, r3, r2
 800c214:	00db      	lsls	r3, r3, #3
 800c216:	585b      	ldr	r3, [r3, r1]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2207      	movs	r2, #7
 800c21c:	4393      	bics	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800c220:	1dfb      	adds	r3, r7, #7
 800c222:	781a      	ldrb	r2, [r3, #0]
 800c224:	4910      	ldr	r1, [pc, #64]	; (800c268 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800c226:	0013      	movs	r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	1a9b      	subs	r3, r3, r2
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	585b      	ldr	r3, [r3, r1]
 800c230:	0018      	movs	r0, r3
 800c232:	f7ff fe58 	bl	800bee6 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800c236:	1dfb      	adds	r3, r7, #7
 800c238:	781a      	ldrb	r2, [r3, #0]
 800c23a:	490b      	ldr	r1, [pc, #44]	; (800c268 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800c23c:	0013      	movs	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	585b      	ldr	r3, [r3, r1]
 800c246:	0018      	movs	r0, r3
 800c248:	f7ff fe3e 	bl	800bec8 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800c24c:	1dfb      	adds	r3, r7, #7
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	4905      	ldr	r1, [pc, #20]	; (800c268 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800c252:	0013      	movs	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	585b      	ldr	r3, [r3, r1]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	60da      	str	r2, [r3, #12]
}
 800c260:	46c0      	nop			; (mov r8, r8)
 800c262:	46bd      	mov	sp, r7
 800c264:	b004      	add	sp, #16
 800c266:	bd80      	pop	{r7, pc}
 800c268:	2000873c 	.word	0x2000873c

0800c26c <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	60ba      	str	r2, [r7, #8]
 800c274:	607b      	str	r3, [r7, #4]
 800c276:	240f      	movs	r4, #15
 800c278:	193b      	adds	r3, r7, r4
 800c27a:	1c02      	adds	r2, r0, #0
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	200e      	movs	r0, #14
 800c280:	183b      	adds	r3, r7, r0
 800c282:	1c0a      	adds	r2, r1, #0
 800c284:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800c286:	2317      	movs	r3, #23
 800c288:	18fb      	adds	r3, r7, r3
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800c28e:	183b      	adds	r3, r7, r0
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b05      	cmp	r3, #5
 800c294:	d10b      	bne.n	800c2ae <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800c296:	193b      	adds	r3, r7, r4
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	496d      	ldr	r1, [pc, #436]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c29c:	0013      	movs	r3, r2
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	1a9b      	subs	r3, r3, r2
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	585b      	ldr	r3, [r3, r1]
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f7ff ff13 	bl	800c0d2 <LL_UCPD_SendHardReset>
 800c2ac:	e0c9      	b.n	800c442 <USBPD_HW_IF_SendBuffer+0x1d6>
  }
  else
  {
    switch (Type)
 800c2ae:	230e      	movs	r3, #14
 800c2b0:	18fb      	adds	r3, r7, r3
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b07      	cmp	r3, #7
 800c2b6:	d871      	bhi.n	800c39c <USBPD_HW_IF_SendBuffer+0x130>
 800c2b8:	009a      	lsls	r2, r3, #2
 800c2ba:	4b66      	ldr	r3, [pc, #408]	; (800c454 <USBPD_HW_IF_SendBuffer+0x1e8>)
 800c2bc:	18d3      	adds	r3, r2, r3
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	469f      	mov	pc, r3
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800c2c2:	240f      	movs	r4, #15
 800c2c4:	193b      	adds	r3, r7, r4
 800c2c6:	781a      	ldrb	r2, [r3, #0]
 800c2c8:	4961      	ldr	r1, [pc, #388]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c2ca:	0013      	movs	r3, r2
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	1a9b      	subs	r3, r3, r2
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	585b      	ldr	r3, [r3, r1]
 800c2d4:	4a60      	ldr	r2, [pc, #384]	; (800c458 <USBPD_HW_IF_SendBuffer+0x1ec>)
 800c2d6:	0011      	movs	r1, r2
 800c2d8:	0018      	movs	r0, r3
 800c2da:	f7ff ff67 	bl	800c1ac <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800c2de:	193b      	adds	r3, r7, r4
 800c2e0:	781a      	ldrb	r2, [r3, #0]
 800c2e2:	495b      	ldr	r1, [pc, #364]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c2e4:	0013      	movs	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	1a9b      	subs	r3, r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	585b      	ldr	r3, [r3, r1]
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f7ff ff0a 	bl	800c10a <LL_UCPD_SetTxMode>
        break;
 800c2f6:	e056      	b.n	800c3a6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800c2f8:	240f      	movs	r4, #15
 800c2fa:	193b      	adds	r3, r7, r4
 800c2fc:	781a      	ldrb	r2, [r3, #0]
 800c2fe:	4954      	ldr	r1, [pc, #336]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c300:	0013      	movs	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	585b      	ldr	r3, [r3, r1]
 800c30a:	4a54      	ldr	r2, [pc, #336]	; (800c45c <USBPD_HW_IF_SendBuffer+0x1f0>)
 800c30c:	0011      	movs	r1, r2
 800c30e:	0018      	movs	r0, r3
 800c310:	f7ff ff4c 	bl	800c1ac <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800c314:	193b      	adds	r3, r7, r4
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	494d      	ldr	r1, [pc, #308]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c31a:	0013      	movs	r3, r2
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	585b      	ldr	r3, [r3, r1]
 800c324:	2100      	movs	r1, #0
 800c326:	0018      	movs	r0, r3
 800c328:	f7ff feef 	bl	800c10a <LL_UCPD_SetTxMode>
        break;
 800c32c:	e03b      	b.n	800c3a6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800c32e:	240f      	movs	r4, #15
 800c330:	193b      	adds	r3, r7, r4
 800c332:	781a      	ldrb	r2, [r3, #0]
 800c334:	4946      	ldr	r1, [pc, #280]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c336:	0013      	movs	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	585b      	ldr	r3, [r3, r1]
 800c340:	4a47      	ldr	r2, [pc, #284]	; (800c460 <USBPD_HW_IF_SendBuffer+0x1f4>)
 800c342:	0011      	movs	r1, r2
 800c344:	0018      	movs	r0, r3
 800c346:	f7ff ff31 	bl	800c1ac <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800c34a:	193b      	adds	r3, r7, r4
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	4940      	ldr	r1, [pc, #256]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c350:	0013      	movs	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	1a9b      	subs	r3, r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	585b      	ldr	r3, [r3, r1]
 800c35a:	2100      	movs	r1, #0
 800c35c:	0018      	movs	r0, r3
 800c35e:	f7ff fed4 	bl	800c10a <LL_UCPD_SetTxMode>
        break;
 800c362:	e020      	b.n	800c3a6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800c364:	230f      	movs	r3, #15
 800c366:	18fb      	adds	r3, r7, r3
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	4939      	ldr	r1, [pc, #228]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c36c:	0013      	movs	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	1a9b      	subs	r3, r3, r2
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	585b      	ldr	r3, [r3, r1]
 800c376:	2101      	movs	r1, #1
 800c378:	0018      	movs	r0, r3
 800c37a:	f7ff fec6 	bl	800c10a <LL_UCPD_SetTxMode>
        break;
 800c37e:	e012      	b.n	800c3a6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800c380:	230f      	movs	r3, #15
 800c382:	18fb      	adds	r3, r7, r3
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	4932      	ldr	r1, [pc, #200]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c388:	0013      	movs	r3, r2
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	1a9b      	subs	r3, r3, r2
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	585b      	ldr	r3, [r3, r1]
 800c392:	2102      	movs	r1, #2
 800c394:	0018      	movs	r0, r3
 800c396:	f7ff feb8 	bl	800c10a <LL_UCPD_SetTxMode>
        break;
 800c39a:	e004      	b.n	800c3a6 <USBPD_HW_IF_SendBuffer+0x13a>
      }
      default :
        _status = USBPD_ERROR;
 800c39c:	2317      	movs	r3, #23
 800c39e:	18fb      	adds	r3, r7, r3
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	701a      	strb	r2, [r3, #0]
        break;
 800c3a4:	46c0      	nop			; (mov r8, r8)
    }

    if (USBPD_OK == _status)
 800c3a6:	2317      	movs	r3, #23
 800c3a8:	18fb      	adds	r3, r7, r3
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d148      	bne.n	800c442 <USBPD_HW_IF_SendBuffer+0x1d6>
    {
#if defined(_LOW_POWER)
      UTIL_LPM_SetOffMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800c3b0:	240f      	movs	r4, #15
 800c3b2:	193b      	adds	r3, r7, r4
 800c3b4:	781a      	ldrb	r2, [r3, #0]
 800c3b6:	4926      	ldr	r1, [pc, #152]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c3b8:	0013      	movs	r3, r2
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	1a9b      	subs	r3, r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	18cb      	adds	r3, r1, r3
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800c3ca:	193b      	adds	r3, r7, r4
 800c3cc:	781a      	ldrb	r2, [r3, #0]
 800c3ce:	4920      	ldr	r1, [pc, #128]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c3d0:	0013      	movs	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	1a9b      	subs	r3, r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	18cb      	adds	r3, r1, r3
 800c3da:	3304      	adds	r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800c3e2:	193b      	adds	r3, r7, r4
 800c3e4:	781a      	ldrb	r2, [r3, #0]
 800c3e6:	491a      	ldr	r1, [pc, #104]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c3e8:	0013      	movs	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	1a9b      	subs	r3, r3, r2
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	18cb      	adds	r3, r1, r3
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6819      	ldr	r1, [r3, #0]
 800c3f8:	193b      	adds	r3, r7, r4
 800c3fa:	781a      	ldrb	r2, [r3, #0]
 800c3fc:	4814      	ldr	r0, [pc, #80]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c3fe:	0013      	movs	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	18c3      	adds	r3, r0, r3
 800c408:	3304      	adds	r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2201      	movs	r2, #1
 800c40e:	430a      	orrs	r2, r1
 800c410:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800c412:	193b      	adds	r3, r7, r4
 800c414:	781a      	ldrb	r2, [r3, #0]
 800c416:	490e      	ldr	r1, [pc, #56]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c418:	0013      	movs	r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	1a9b      	subs	r3, r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	585b      	ldr	r3, [r3, r1]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	0011      	movs	r1, r2
 800c426:	0018      	movs	r0, r3
 800c428:	f7ff fecc 	bl	800c1c4 <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800c42c:	193b      	adds	r3, r7, r4
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	4907      	ldr	r1, [pc, #28]	; (800c450 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800c432:	0013      	movs	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	585b      	ldr	r3, [r3, r1]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f7ff fe56 	bl	800c0ee <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800c442:	2317      	movs	r3, #23
 800c444:	18fb      	adds	r3, r7, r3
 800c446:	781b      	ldrb	r3, [r3, #0]
}
 800c448:	0018      	movs	r0, r3
 800c44a:	46bd      	mov	sp, r7
 800c44c:	b007      	add	sp, #28
 800c44e:	bd90      	pop	{r4, r7, pc}
 800c450:	2000873c 	.word	0x2000873c
 800c454:	08018514 	.word	0x08018514
 800c458:	0008e318 	.word	0x0008e318
 800c45c:	00031b18 	.word	0x00031b18
 800c460:	000360d8 	.word	0x000360d8

0800c464 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	0002      	movs	r2, r0
 800c46c:	1dfb      	adds	r3, r7, #7
 800c46e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800c470:	1dfb      	adds	r3, r7, #7
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	490c      	ldr	r1, [pc, #48]	; (800c4a8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800c476:	0013      	movs	r3, r2
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	585b      	ldr	r3, [r3, r1]
 800c480:	2102      	movs	r1, #2
 800c482:	0018      	movs	r0, r3
 800c484:	f7ff fe41 	bl	800c10a <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800c488:	1dfb      	adds	r3, r7, #7
 800c48a:	781a      	ldrb	r2, [r3, #0]
 800c48c:	4906      	ldr	r1, [pc, #24]	; (800c4a8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800c48e:	0013      	movs	r3, r2
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	1a9b      	subs	r3, r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	585b      	ldr	r3, [r3, r1]
 800c498:	0018      	movs	r0, r3
 800c49a:	f7ff fe28 	bl	800c0ee <LL_UCPD_SendMessage>
}
 800c49e:	46c0      	nop			; (mov r8, r8)
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	b002      	add	sp, #8
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	2000873c 	.word	0x2000873c

0800c4ac <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	0002      	movs	r2, r0
 800c4b4:	1dfb      	adds	r3, r7, #7
 800c4b6:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800c4b8:	2001      	movs	r0, #1
 800c4ba:	f7ff fcef 	bl	800be9c <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800c4be:	1dfb      	adds	r3, r7, #7
 800c4c0:	781a      	ldrb	r2, [r3, #0]
 800c4c2:	4953      	ldr	r1, [pc, #332]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c4c4:	0013      	movs	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	1a9b      	subs	r3, r3, r2
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	18cb      	adds	r3, r1, r3
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	789b      	ldrb	r3, [r3, #2]
 800c4d4:	079b      	lsls	r3, r3, #30
 800c4d6:	0f9b      	lsrs	r3, r3, #30
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d021      	beq.n	800c522 <USBPDM1_AssertRp+0x76>
 800c4de:	dc2f      	bgt.n	800c540 <USBPDM1_AssertRp+0x94>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <USBPDM1_AssertRp+0x3e>
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d00d      	beq.n	800c504 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800c4e8:	e02a      	b.n	800c540 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800c4ea:	1dfb      	adds	r3, r7, #7
 800c4ec:	781a      	ldrb	r2, [r3, #0]
 800c4ee:	4948      	ldr	r1, [pc, #288]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c4f0:	0013      	movs	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	585b      	ldr	r3, [r3, r1]
 800c4fa:	2180      	movs	r1, #128	; 0x80
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f7ff fd93 	bl	800c028 <LL_UCPD_SetRpResistor>
      break;
 800c502:	e01e      	b.n	800c542 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800c504:	1dfb      	adds	r3, r7, #7
 800c506:	781a      	ldrb	r2, [r3, #0]
 800c508:	4941      	ldr	r1, [pc, #260]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c50a:	0013      	movs	r3, r2
 800c50c:	00db      	lsls	r3, r3, #3
 800c50e:	1a9b      	subs	r3, r3, r2
 800c510:	00db      	lsls	r3, r3, #3
 800c512:	585b      	ldr	r3, [r3, r1]
 800c514:	2280      	movs	r2, #128	; 0x80
 800c516:	0052      	lsls	r2, r2, #1
 800c518:	0011      	movs	r1, r2
 800c51a:	0018      	movs	r0, r3
 800c51c:	f7ff fd84 	bl	800c028 <LL_UCPD_SetRpResistor>
      break;
 800c520:	e00f      	b.n	800c542 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800c522:	1dfb      	adds	r3, r7, #7
 800c524:	781a      	ldrb	r2, [r3, #0]
 800c526:	493a      	ldr	r1, [pc, #232]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c528:	0013      	movs	r3, r2
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	585b      	ldr	r3, [r3, r1]
 800c532:	22c0      	movs	r2, #192	; 0xc0
 800c534:	0052      	lsls	r2, r2, #1
 800c536:	0011      	movs	r1, r2
 800c538:	0018      	movs	r0, r3
 800c53a:	f7ff fd75 	bl	800c028 <LL_UCPD_SetRpResistor>
      break;
 800c53e:	e000      	b.n	800c542 <USBPDM1_AssertRp+0x96>
      break;
 800c540:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800c542:	1dfb      	adds	r3, r7, #7
 800c544:	781a      	ldrb	r2, [r3, #0]
 800c546:	4932      	ldr	r1, [pc, #200]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c548:	0013      	movs	r3, r2
 800c54a:	00db      	lsls	r3, r3, #3
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	585b      	ldr	r3, [r3, r1]
 800c552:	2100      	movs	r1, #0
 800c554:	0018      	movs	r0, r3
 800c556:	f7ff fd33 	bl	800bfc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800c55a:	1dfb      	adds	r3, r7, #7
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	492c      	ldr	r1, [pc, #176]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c560:	0013      	movs	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	585b      	ldr	r3, [r3, r1]
 800c56a:	0018      	movs	r0, r3
 800c56c:	f7ff fd4c 	bl	800c008 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800c570:	1dfb      	adds	r3, r7, #7
 800c572:	781a      	ldrb	r2, [r3, #0]
 800c574:	4926      	ldr	r1, [pc, #152]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c576:	0013      	movs	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	1a9b      	subs	r3, r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	18cb      	adds	r3, r1, r3
 800c580:	3334      	adds	r3, #52	; 0x34
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10e      	bne.n	800c5a6 <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800c588:	1dfb      	adds	r3, r7, #7
 800c58a:	781a      	ldrb	r2, [r3, #0]
 800c58c:	4920      	ldr	r1, [pc, #128]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c58e:	0013      	movs	r3, r2
 800c590:	00db      	lsls	r3, r3, #3
 800c592:	1a9b      	subs	r3, r3, r2
 800c594:	00db      	lsls	r3, r3, #3
 800c596:	585b      	ldr	r3, [r3, r1]
 800c598:	22c0      	movs	r2, #192	; 0xc0
 800c59a:	0112      	lsls	r2, r2, #4
 800c59c:	0011      	movs	r1, r2
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f7ff fd0e 	bl	800bfc0 <LL_UCPD_SetccEnable>
 800c5a4:	e01b      	b.n	800c5de <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800c5a6:	1dfb      	adds	r3, r7, #7
 800c5a8:	781a      	ldrb	r2, [r3, #0]
 800c5aa:	4919      	ldr	r1, [pc, #100]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c5ac:	0013      	movs	r3, r2
 800c5ae:	00db      	lsls	r3, r3, #3
 800c5b0:	1a9b      	subs	r3, r3, r2
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800c5b6:	1dfb      	adds	r3, r7, #7
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	4915      	ldr	r1, [pc, #84]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c5bc:	0013      	movs	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	18cb      	adds	r3, r1, r3
 800c5c6:	3334      	adds	r3, #52	; 0x34
 800c5c8:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d102      	bne.n	800c5d4 <USBPDM1_AssertRp+0x128>
 800c5ce:	2380      	movs	r3, #128	; 0x80
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	e001      	b.n	800c5d8 <USBPDM1_AssertRp+0x12c>
 800c5d4:	2380      	movs	r3, #128	; 0x80
 800c5d6:	011b      	lsls	r3, r3, #4
 800c5d8:	0019      	movs	r1, r3
 800c5da:	f7ff fcf1 	bl	800bfc0 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800c5de:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <USBPDM1_AssertRp+0x168>)
 800c5e0:	6819      	ldr	r1, [r3, #0]
 800c5e2:	1dfb      	adds	r3, r7, #7
 800c5e4:	781a      	ldrb	r2, [r3, #0]
 800c5e6:	480a      	ldr	r0, [pc, #40]	; (800c610 <USBPDM1_AssertRp+0x164>)
 800c5e8:	0013      	movs	r3, r2
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	1a9b      	subs	r3, r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	581b      	ldr	r3, [r3, r0]
 800c5f2:	4a09      	ldr	r2, [pc, #36]	; (800c618 <USBPDM1_AssertRp+0x16c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d102      	bne.n	800c5fe <USBPDM1_AssertRp+0x152>
 800c5f8:	2380      	movs	r3, #128	; 0x80
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	e001      	b.n	800c602 <USBPDM1_AssertRp+0x156>
 800c5fe:	2380      	movs	r3, #128	; 0x80
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	4a04      	ldr	r2, [pc, #16]	; (800c614 <USBPDM1_AssertRp+0x168>)
 800c604:	430b      	orrs	r3, r1
 800c606:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 800c608:	46c0      	nop			; (mov r8, r8)
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b002      	add	sp, #8
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	2000873c 	.word	0x2000873c
 800c614:	40010000 	.word	0x40010000
 800c618:	4000a000 	.word	0x4000a000

0800c61c <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	0002      	movs	r2, r0
 800c624:	1dfb      	adds	r3, r7, #7
 800c626:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800c628:	46c0      	nop			; (mov r8, r8)
 800c62a:	46bd      	mov	sp, r7
 800c62c:	b002      	add	sp, #8
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	0002      	movs	r2, r0
 800c638:	1dfb      	adds	r3, r7, #7
 800c63a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800c63c:	1dfb      	adds	r3, r7, #7
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	494b      	ldr	r1, [pc, #300]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c642:	0013      	movs	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	585b      	ldr	r3, [r3, r1]
 800c64c:	0018      	movs	r0, r3
 800c64e:	f7ff fc69 	bl	800bf24 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800c652:	1dfb      	adds	r3, r7, #7
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	4946      	ldr	r1, [pc, #280]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c658:	0013      	movs	r3, r2
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	585b      	ldr	r3, [r3, r1]
 800c662:	0018      	movs	r0, r3
 800c664:	f7ff fc7e 	bl	800bf64 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800c668:	2001      	movs	r0, #1
 800c66a:	f7ff fc17 	bl	800be9c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800c66e:	1dfb      	adds	r3, r7, #7
 800c670:	781a      	ldrb	r2, [r3, #0]
 800c672:	493f      	ldr	r1, [pc, #252]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c674:	0013      	movs	r3, r2
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	1a9b      	subs	r3, r3, r2
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	585b      	ldr	r3, [r3, r1]
 800c67e:	2100      	movs	r1, #0
 800c680:	0018      	movs	r0, r3
 800c682:	f7ff fc9d 	bl	800bfc0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800c686:	1dfb      	adds	r3, r7, #7
 800c688:	781a      	ldrb	r2, [r3, #0]
 800c68a:	4939      	ldr	r1, [pc, #228]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c68c:	0013      	movs	r3, r2
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	1a9b      	subs	r3, r3, r2
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	585b      	ldr	r3, [r3, r1]
 800c696:	0018      	movs	r0, r3
 800c698:	f7ff fca6 	bl	800bfe8 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800c69c:	1dfb      	adds	r3, r7, #7
 800c69e:	781a      	ldrb	r2, [r3, #0]
 800c6a0:	4933      	ldr	r1, [pc, #204]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c6a2:	0013      	movs	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	1a9b      	subs	r3, r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	18cb      	adds	r3, r1, r3
 800c6ac:	3334      	adds	r3, #52	; 0x34
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10e      	bne.n	800c6d2 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800c6b4:	1dfb      	adds	r3, r7, #7
 800c6b6:	781a      	ldrb	r2, [r3, #0]
 800c6b8:	492d      	ldr	r1, [pc, #180]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c6ba:	0013      	movs	r3, r2
 800c6bc:	00db      	lsls	r3, r3, #3
 800c6be:	1a9b      	subs	r3, r3, r2
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	585b      	ldr	r3, [r3, r1]
 800c6c4:	22c0      	movs	r2, #192	; 0xc0
 800c6c6:	0112      	lsls	r2, r2, #4
 800c6c8:	0011      	movs	r1, r2
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f7ff fc78 	bl	800bfc0 <LL_UCPD_SetccEnable>
 800c6d0:	e01b      	b.n	800c70a <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800c6d2:	1dfb      	adds	r3, r7, #7
 800c6d4:	781a      	ldrb	r2, [r3, #0]
 800c6d6:	4926      	ldr	r1, [pc, #152]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c6d8:	0013      	movs	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	1a9b      	subs	r3, r3, r2
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800c6e2:	1dfb      	adds	r3, r7, #7
 800c6e4:	781a      	ldrb	r2, [r3, #0]
 800c6e6:	4922      	ldr	r1, [pc, #136]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c6e8:	0013      	movs	r3, r2
 800c6ea:	00db      	lsls	r3, r3, #3
 800c6ec:	1a9b      	subs	r3, r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	18cb      	adds	r3, r1, r3
 800c6f2:	3334      	adds	r3, #52	; 0x34
 800c6f4:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d102      	bne.n	800c700 <USBPDM1_AssertRd+0xd0>
 800c6fa:	2380      	movs	r3, #128	; 0x80
 800c6fc:	00db      	lsls	r3, r3, #3
 800c6fe:	e001      	b.n	800c704 <USBPDM1_AssertRd+0xd4>
 800c700:	2380      	movs	r3, #128	; 0x80
 800c702:	011b      	lsls	r3, r3, #4
 800c704:	0019      	movs	r1, r3
 800c706:	f7ff fc5b 	bl	800bfc0 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800c70a:	4b1a      	ldr	r3, [pc, #104]	; (800c774 <USBPDM1_AssertRd+0x144>)
 800c70c:	6819      	ldr	r1, [r3, #0]
 800c70e:	1dfb      	adds	r3, r7, #7
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	4817      	ldr	r0, [pc, #92]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c714:	0013      	movs	r3, r2
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	1a9b      	subs	r3, r3, r2
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	581b      	ldr	r3, [r3, r0]
 800c71e:	4a16      	ldr	r2, [pc, #88]	; (800c778 <USBPDM1_AssertRd+0x148>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d102      	bne.n	800c72a <USBPDM1_AssertRd+0xfa>
 800c724:	2380      	movs	r3, #128	; 0x80
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	e001      	b.n	800c72e <USBPDM1_AssertRd+0xfe>
 800c72a:	2380      	movs	r3, #128	; 0x80
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	4a11      	ldr	r2, [pc, #68]	; (800c774 <USBPDM1_AssertRd+0x144>)
 800c730:	430b      	orrs	r3, r1
 800c732:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800c734:	2001      	movs	r0, #1
 800c736:	f7f7 fb31 	bl	8003d9c <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800c73a:	1dfb      	adds	r3, r7, #7
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	490c      	ldr	r1, [pc, #48]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c740:	0013      	movs	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	1a9b      	subs	r3, r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	585b      	ldr	r3, [r3, r1]
 800c74a:	0018      	movs	r0, r3
 800c74c:	f7ff fbda 	bl	800bf04 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800c750:	1dfb      	adds	r3, r7, #7
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	4906      	ldr	r1, [pc, #24]	; (800c770 <USBPDM1_AssertRd+0x140>)
 800c756:	0013      	movs	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	585b      	ldr	r3, [r3, r1]
 800c760:	0018      	movs	r0, r3
 800c762:	f7ff fbef 	bl	800bf44 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	46bd      	mov	sp, r7
 800c76a:	b002      	add	sp, #8
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	46c0      	nop			; (mov r8, r8)
 800c770:	2000873c 	.word	0x2000873c
 800c774:	40010000 	.word	0x40010000
 800c778:	4000a000 	.word	0x4000a000

0800c77c <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	0002      	movs	r2, r0
 800c784:	1dfb      	adds	r3, r7, #7
 800c786:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800c788:	46c0      	nop			; (mov r8, r8)
 800c78a:	46bd      	mov	sp, r7
 800c78c:	b002      	add	sp, #8
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	0002      	movs	r2, r0
 800c798:	1dfb      	adds	r3, r7, #7
 800c79a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800c79c:	2001      	movs	r0, #1
 800c79e:	f7ff fb7d 	bl	800be9c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800c7a2:	1dfb      	adds	r3, r7, #7
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	4930      	ldr	r1, [pc, #192]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c7a8:	0013      	movs	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	1a9b      	subs	r3, r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	585b      	ldr	r3, [r3, r1]
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	f7ff fc28 	bl	800c008 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800c7b8:	1dfb      	adds	r3, r7, #7
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	492a      	ldr	r1, [pc, #168]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c7be:	0013      	movs	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	585b      	ldr	r3, [r3, r1]
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	f7ff fc2c 	bl	800c028 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800c7d0:	1dfb      	adds	r3, r7, #7
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	4924      	ldr	r1, [pc, #144]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c7d6:	0013      	movs	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	585b      	ldr	r3, [r3, r1]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	f7ff fbec 	bl	800bfc0 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800c7e8:	4b20      	ldr	r3, [pc, #128]	; (800c86c <USBPDM1_EnterErrorRecovery+0xdc>)
 800c7ea:	6819      	ldr	r1, [r3, #0]
 800c7ec:	1dfb      	adds	r3, r7, #7
 800c7ee:	781a      	ldrb	r2, [r3, #0]
 800c7f0:	481d      	ldr	r0, [pc, #116]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c7f2:	0013      	movs	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	1a9b      	subs	r3, r3, r2
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	581b      	ldr	r3, [r3, r0]
 800c7fc:	4a1c      	ldr	r2, [pc, #112]	; (800c870 <USBPDM1_EnterErrorRecovery+0xe0>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d102      	bne.n	800c808 <USBPDM1_EnterErrorRecovery+0x78>
 800c802:	2380      	movs	r3, #128	; 0x80
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	e001      	b.n	800c80c <USBPDM1_EnterErrorRecovery+0x7c>
 800c808:	2380      	movs	r3, #128	; 0x80
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	4a17      	ldr	r2, [pc, #92]	; (800c86c <USBPDM1_EnterErrorRecovery+0xdc>)
 800c80e:	430b      	orrs	r3, r1
 800c810:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800c812:	1dfb      	adds	r3, r7, #7
 800c814:	781a      	ldrb	r2, [r3, #0]
 800c816:	4914      	ldr	r1, [pc, #80]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c818:	0013      	movs	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	585b      	ldr	r3, [r3, r1]
 800c822:	0018      	movs	r0, r3
 800c824:	f7ff fc34 	bl	800c090 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800c828:	1dfb      	adds	r3, r7, #7
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	490e      	ldr	r1, [pc, #56]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c82e:	0013      	movs	r3, r2
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	1a9b      	subs	r3, r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	18cb      	adds	r3, r1, r3
 800c838:	330c      	adds	r3, #12
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	7a1b      	ldrb	r3, [r3, #8]
 800c83e:	2202      	movs	r2, #2
 800c840:	4013      	ands	r3, r2
 800c842:	b2db      	uxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00a      	beq.n	800c85e <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800c848:	1dfb      	adds	r3, r7, #7
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	4906      	ldr	r1, [pc, #24]	; (800c868 <USBPDM1_EnterErrorRecovery+0xd8>)
 800c84e:	0013      	movs	r3, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	585b      	ldr	r3, [r3, r1]
 800c858:	0018      	movs	r0, r3
 800c85a:	f7ff fba1 	bl	800bfa0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b002      	add	sp, #8
 800c864:	bd80      	pop	{r7, pc}
 800c866:	46c0      	nop			; (mov r8, r8)
 800c868:	2000873c 	.word	0x2000873c
 800c86c:	40010000 	.word	0x40010000
 800c870:	4000a000 	.word	0x4000a000

0800c874 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	0002      	movs	r2, r0
 800c87c:	1dfb      	adds	r3, r7, #7
 800c87e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800c880:	1dfb      	adds	r3, r7, #7
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	4906      	ldr	r1, [pc, #24]	; (800c8a0 <USBPD_HW_IF_EnableRX+0x2c>)
 800c886:	0013      	movs	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	585b      	ldr	r3, [r3, r1]
 800c890:	0018      	movs	r0, r3
 800c892:	f7ff fbef 	bl	800c074 <LL_UCPD_RxEnable>
}
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	46bd      	mov	sp, r7
 800c89a:	b002      	add	sp, #8
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	2000873c 	.word	0x2000873c

0800c8a4 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	0002      	movs	r2, r0
 800c8ac:	1dfb      	adds	r3, r7, #7
 800c8ae:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800c8b0:	1dfb      	adds	r3, r7, #7
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	4906      	ldr	r1, [pc, #24]	; (800c8d0 <USBPD_HW_IF_DisableRX+0x2c>)
 800c8b6:	0013      	movs	r3, r2
 800c8b8:	00db      	lsls	r3, r3, #3
 800c8ba:	1a9b      	subs	r3, r3, r2
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	585b      	ldr	r3, [r3, r1]
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f7ff fbe5 	bl	800c090 <LL_UCPD_RxDisable>
}
 800c8c6:	46c0      	nop			; (mov r8, r8)
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b002      	add	sp, #8
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	46c0      	nop			; (mov r8, r8)
 800c8d0:	2000873c 	.word	0x2000873c

0800c8d4 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800c8d4:	b590      	push	{r4, r7, lr}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	0002      	movs	r2, r0
 800c8dc:	6039      	str	r1, [r7, #0]
 800c8de:	1dfb      	adds	r3, r7, #7
 800c8e0:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800c8e2:	f000 fc05 	bl	800d0f0 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800c8e6:	1dfb      	adds	r3, r7, #7
 800c8e8:	781c      	ldrb	r4, [r3, #0]
 800c8ea:	1dfb      	adds	r3, r7, #7
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	0018      	movs	r0, r3
 800c8f0:	f7fe fe30 	bl	800b554 <USBPD_HW_Init_DMATxInstance>
 800c8f4:	0001      	movs	r1, r0
 800c8f6:	4aa6      	ldr	r2, [pc, #664]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c8f8:	0023      	movs	r3, r4
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	1b1b      	subs	r3, r3, r4
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	18d3      	adds	r3, r2, r3
 800c902:	3304      	adds	r3, #4
 800c904:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800c906:	1dfb      	adds	r3, r7, #7
 800c908:	781c      	ldrb	r4, [r3, #0]
 800c90a:	1dfb      	adds	r3, r7, #7
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	0018      	movs	r0, r3
 800c910:	f7fe fdd0 	bl	800b4b4 <USBPD_HW_Init_DMARxInstance>
 800c914:	0001      	movs	r1, r0
 800c916:	4a9e      	ldr	r2, [pc, #632]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c918:	0023      	movs	r3, r4
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	1b1b      	subs	r3, r3, r4
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	18d3      	adds	r3, r2, r3
 800c922:	3308      	adds	r3, #8
 800c924:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800c926:	1dfb      	adds	r3, r7, #7
 800c928:	781a      	ldrb	r2, [r3, #0]
 800c92a:	4999      	ldr	r1, [pc, #612]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c92c:	0013      	movs	r3, r2
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	585b      	ldr	r3, [r3, r1]
 800c936:	3330      	adds	r3, #48	; 0x30
 800c938:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800c93a:	1dfb      	adds	r3, r7, #7
 800c93c:	781a      	ldrb	r2, [r3, #0]
 800c93e:	4994      	ldr	r1, [pc, #592]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c940:	0013      	movs	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	18cb      	adds	r3, r1, r3
 800c94a:	3308      	adds	r3, #8
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800c952:	1dfb      	adds	r3, r7, #7
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	498e      	ldr	r1, [pc, #568]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c958:	0013      	movs	r3, r2
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	1a9b      	subs	r3, r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	18cb      	adds	r3, r1, r3
 800c962:	3330      	adds	r3, #48	; 0x30
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	1dfb      	adds	r3, r7, #7
 800c968:	781a      	ldrb	r2, [r3, #0]
 800c96a:	4989      	ldr	r1, [pc, #548]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c96c:	0013      	movs	r3, r2
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	1a9b      	subs	r3, r3, r2
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	18cb      	adds	r3, r1, r3
 800c976:	3308      	adds	r3, #8
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	0002      	movs	r2, r0
 800c97c:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800c97e:	1dfb      	adds	r3, r7, #7
 800c980:	781a      	ldrb	r2, [r3, #0]
 800c982:	4983      	ldr	r1, [pc, #524]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c984:	0013      	movs	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	1a9b      	subs	r3, r3, r2
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	18cb      	adds	r3, r1, r3
 800c98e:	3308      	adds	r3, #8
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2284      	movs	r2, #132	; 0x84
 800c994:	0052      	lsls	r2, r2, #1
 800c996:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800c998:	1dfb      	adds	r3, r7, #7
 800c99a:	781a      	ldrb	r2, [r3, #0]
 800c99c:	497c      	ldr	r1, [pc, #496]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c99e:	0013      	movs	r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	18cb      	adds	r3, r1, r3
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6819      	ldr	r1, [r3, #0]
 800c9ae:	1dfb      	adds	r3, r7, #7
 800c9b0:	781a      	ldrb	r2, [r3, #0]
 800c9b2:	4877      	ldr	r0, [pc, #476]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c9b4:	0013      	movs	r3, r2
 800c9b6:	00db      	lsls	r3, r3, #3
 800c9b8:	1a9b      	subs	r3, r3, r2
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	18c3      	adds	r3, r0, r3
 800c9be:	3308      	adds	r3, #8
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800c9c8:	1dfb      	adds	r3, r7, #7
 800c9ca:	781a      	ldrb	r2, [r3, #0]
 800c9cc:	4970      	ldr	r1, [pc, #448]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c9ce:	0013      	movs	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	585b      	ldr	r3, [r3, r1]
 800c9d8:	3324      	adds	r3, #36	; 0x24
 800c9da:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800c9dc:	1dfb      	adds	r3, r7, #7
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	496b      	ldr	r1, [pc, #428]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c9e2:	0013      	movs	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	1a9b      	subs	r3, r3, r2
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	18cb      	adds	r3, r1, r3
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800c9f4:	1dfb      	adds	r3, r7, #7
 800c9f6:	781a      	ldrb	r2, [r3, #0]
 800c9f8:	4965      	ldr	r1, [pc, #404]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800c9fa:	0013      	movs	r3, r2
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	585b      	ldr	r3, [r3, r1]
 800ca04:	6919      	ldr	r1, [r3, #16]
 800ca06:	1dfb      	adds	r3, r7, #7
 800ca08:	781a      	ldrb	r2, [r3, #0]
 800ca0a:	4861      	ldr	r0, [pc, #388]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca0c:	0013      	movs	r3, r2
 800ca0e:	00db      	lsls	r3, r3, #3
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	00db      	lsls	r3, r3, #3
 800ca14:	581b      	ldr	r3, [r3, r0]
 800ca16:	4a5f      	ldr	r2, [pc, #380]	; (800cb94 <HW_SignalAttachement+0x2c0>)
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800ca1c:	1dfb      	adds	r3, r7, #7
 800ca1e:	781a      	ldrb	r2, [r3, #0]
 800ca20:	495b      	ldr	r1, [pc, #364]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca22:	0013      	movs	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	18cb      	adds	r3, r1, r3
 800ca2c:	3334      	adds	r3, #52	; 0x34
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800ca32:	1dfb      	adds	r3, r7, #7
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	4956      	ldr	r1, [pc, #344]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca38:	0013      	movs	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	1a9b      	subs	r3, r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	5858      	ldr	r0, [r3, r1]
 800ca42:	1dfb      	adds	r3, r7, #7
 800ca44:	781a      	ldrb	r2, [r3, #0]
 800ca46:	4952      	ldr	r1, [pc, #328]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca48:	0013      	movs	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	1a9b      	subs	r3, r3, r2
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	18cb      	adds	r3, r1, r3
 800ca52:	3334      	adds	r3, #52	; 0x34
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <HW_SignalAttachement+0x18a>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	e000      	b.n	800ca60 <HW_SignalAttachement+0x18c>
 800ca5e:	2340      	movs	r3, #64	; 0x40
 800ca60:	0019      	movs	r1, r3
 800ca62:	f7ff faf5 	bl	800c050 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800ca66:	1dfb      	adds	r3, r7, #7
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	4949      	ldr	r1, [pc, #292]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca6c:	0013      	movs	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	00db      	lsls	r3, r3, #3
 800ca74:	18cb      	adds	r3, r1, r3
 800ca76:	330c      	adds	r3, #12
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	7a1b      	ldrb	r3, [r3, #8]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	4013      	ands	r3, r2
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d034      	beq.n	800caf0 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800ca86:	1dfb      	adds	r3, r7, #7
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	4941      	ldr	r1, [pc, #260]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800ca8c:	0013      	movs	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	1a9b      	subs	r3, r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	18cb      	adds	r3, r1, r3
 800ca96:	3334      	adds	r3, #52	; 0x34
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d101      	bne.n	800caa2 <HW_SignalAttachement+0x1ce>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <HW_SignalAttachement+0x1d0>
 800caa2:	2302      	movs	r3, #2
 800caa4:	1dfa      	adds	r2, r7, #7
 800caa6:	7812      	ldrb	r2, [r2, #0]
 800caa8:	0019      	movs	r1, r3
 800caaa:	0010      	movs	r0, r2
 800caac:	f7fe fda2 	bl	800b5f4 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800cab0:	1dfb      	adds	r3, r7, #7
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	4936      	ldr	r1, [pc, #216]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cab6:	0013      	movs	r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	1a9b      	subs	r3, r3, r2
 800cabc:	00db      	lsls	r3, r3, #3
 800cabe:	585b      	ldr	r3, [r3, r1]
 800cac0:	0018      	movs	r0, r3
 800cac2:	f7ff fa5e 	bl	800bf82 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800cac6:	1dfb      	adds	r3, r7, #7
 800cac8:	781a      	ldrb	r2, [r3, #0]
 800caca:	4931      	ldr	r1, [pc, #196]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cacc:	0013      	movs	r3, r2
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	1a9b      	subs	r3, r3, r2
 800cad2:	00db      	lsls	r3, r3, #3
 800cad4:	585b      	ldr	r3, [r3, r1]
 800cad6:	6919      	ldr	r1, [r3, #16]
 800cad8:	1dfb      	adds	r3, r7, #7
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	482c      	ldr	r0, [pc, #176]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cade:	0013      	movs	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	581b      	ldr	r3, [r3, r0]
 800cae8:	2280      	movs	r2, #128	; 0x80
 800caea:	0352      	lsls	r2, r2, #13
 800caec:	430a      	orrs	r2, r1
 800caee:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 800caf0:	1dfb      	adds	r3, r7, #7
 800caf2:	781a      	ldrb	r2, [r3, #0]
 800caf4:	4926      	ldr	r1, [pc, #152]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800caf6:	0013      	movs	r3, r2
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	1a9b      	subs	r3, r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	18cb      	adds	r3, r1, r3
 800cb00:	3334      	adds	r3, #52	; 0x34
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d10e      	bne.n	800cb26 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 800cb08:	1dfb      	adds	r3, r7, #7
 800cb0a:	781a      	ldrb	r2, [r3, #0]
 800cb0c:	4920      	ldr	r1, [pc, #128]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cb0e:	0013      	movs	r3, r2
 800cb10:	00db      	lsls	r3, r3, #3
 800cb12:	1a9b      	subs	r3, r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	585b      	ldr	r3, [r3, r1]
 800cb18:	2280      	movs	r2, #128	; 0x80
 800cb1a:	00d2      	lsls	r2, r2, #3
 800cb1c:	0011      	movs	r1, r2
 800cb1e:	0018      	movs	r0, r3
 800cb20:	f7ff fa4e 	bl	800bfc0 <LL_UCPD_SetccEnable>
 800cb24:	e00d      	b.n	800cb42 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800cb26:	1dfb      	adds	r3, r7, #7
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	4919      	ldr	r1, [pc, #100]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cb2c:	0013      	movs	r3, r2
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	1a9b      	subs	r3, r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	585b      	ldr	r3, [r3, r1]
 800cb36:	2280      	movs	r2, #128	; 0x80
 800cb38:	0112      	lsls	r2, r2, #4
 800cb3a:	0011      	movs	r1, r2
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	f7ff fa3f 	bl	800bfc0 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800cb42:	1dfb      	adds	r3, r7, #7
 800cb44:	781a      	ldrb	r2, [r3, #0]
 800cb46:	4912      	ldr	r1, [pc, #72]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cb48:	0013      	movs	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	585b      	ldr	r3, [r3, r1]
 800cb52:	2100      	movs	r1, #0
 800cb54:	0018      	movs	r0, r3
 800cb56:	f7ff faaa 	bl	800c0ae <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800cb5a:	1dfb      	adds	r3, r7, #7
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	490c      	ldr	r1, [pc, #48]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cb60:	0013      	movs	r3, r2
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	585b      	ldr	r3, [r3, r1]
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f7ff fadf 	bl	800c12e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800cb70:	1dfb      	adds	r3, r7, #7
 800cb72:	781a      	ldrb	r2, [r3, #0]
 800cb74:	4906      	ldr	r1, [pc, #24]	; (800cb90 <HW_SignalAttachement+0x2bc>)
 800cb76:	0013      	movs	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	1a9b      	subs	r3, r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	585b      	ldr	r3, [r3, r1]
 800cb80:	0018      	movs	r0, r3
 800cb82:	f7ff faf3 	bl	800c16c <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800cb86:	46c0      	nop			; (mov r8, r8)
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	b005      	add	sp, #20
 800cb8c:	bd90      	pop	{r4, r7, pc}
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	2000873c 	.word	0x2000873c
 800cb94:	00001e7e 	.word	0x00001e7e

0800cb98 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	0002      	movs	r2, r0
 800cba0:	1dfb      	adds	r3, r7, #7
 800cba2:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800cba4:	1dfb      	adds	r3, r7, #7
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	4941      	ldr	r1, [pc, #260]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cbaa:	0013      	movs	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	1a9b      	subs	r3, r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	585b      	ldr	r3, [r3, r1]
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f7ff fac9 	bl	800c14c <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800cbba:	1dfb      	adds	r3, r7, #7
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	493c      	ldr	r1, [pc, #240]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cbc0:	0013      	movs	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	1a9b      	subs	r3, r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	585b      	ldr	r3, [r3, r1]
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f7ff fade 	bl	800c18c <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800cbd0:	1dfb      	adds	r3, r7, #7
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	4936      	ldr	r1, [pc, #216]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cbd6:	0013      	movs	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	585b      	ldr	r3, [r3, r1]
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	f7ff fa55 	bl	800c090 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800cbe6:	1dfb      	adds	r3, r7, #7
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	4931      	ldr	r1, [pc, #196]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cbec:	0013      	movs	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	585b      	ldr	r3, [r3, r1]
 800cbf6:	22c0      	movs	r2, #192	; 0xc0
 800cbf8:	0212      	lsls	r2, r2, #8
 800cbfa:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800cbfc:	1dfb      	adds	r3, r7, #7
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	0018      	movs	r0, r3
 800cc02:	f7fe fced 	bl	800b5e0 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800cc06:	1dfb      	adds	r3, r7, #7
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	0018      	movs	r0, r3
 800cc0c:	f7fe fc98 	bl	800b540 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800cc10:	1dfb      	adds	r3, r7, #7
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	4926      	ldr	r1, [pc, #152]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cc16:	0013      	movs	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	585b      	ldr	r3, [r3, r1]
 800cc20:	22c0      	movs	r2, #192	; 0xc0
 800cc22:	0112      	lsls	r2, r2, #4
 800cc24:	0011      	movs	r1, r2
 800cc26:	0018      	movs	r0, r3
 800cc28:	f7ff f9ca 	bl	800bfc0 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800cc2c:	1dfb      	adds	r3, r7, #7
 800cc2e:	781a      	ldrb	r2, [r3, #0]
 800cc30:	491f      	ldr	r1, [pc, #124]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cc32:	0013      	movs	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	18cb      	adds	r3, r1, r3
 800cc3c:	3310      	adds	r3, #16
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2204      	movs	r2, #4
 800cc44:	4013      	ands	r3, r2
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d104      	bne.n	800cc56 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800cc4c:	1dfb      	adds	r3, r7, #7
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	0018      	movs	r0, r3
 800cc52:	f009 fe36 	bl	80168c2 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800cc56:	1dfb      	adds	r3, r7, #7
 800cc58:	781a      	ldrb	r2, [r3, #0]
 800cc5a:	4915      	ldr	r1, [pc, #84]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cc5c:	0013      	movs	r3, r2
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	1a9b      	subs	r3, r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	18cb      	adds	r3, r1, r3
 800cc66:	330c      	adds	r3, #12
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	7a1b      	ldrb	r3, [r3, #8]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	4013      	ands	r3, r2
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00a      	beq.n	800cc8c <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 800cc76:	1dfb      	adds	r3, r7, #7
 800cc78:	781a      	ldrb	r2, [r3, #0]
 800cc7a:	490d      	ldr	r1, [pc, #52]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cc7c:	0013      	movs	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	1a9b      	subs	r3, r3, r2
 800cc82:	00db      	lsls	r3, r3, #3
 800cc84:	585b      	ldr	r3, [r3, r1]
 800cc86:	0018      	movs	r0, r3
 800cc88:	f7ff f98a 	bl	800bfa0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 800cc8c:	1dfb      	adds	r3, r7, #7
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	4907      	ldr	r1, [pc, #28]	; (800ccb0 <HW_SignalDetachment+0x118>)
 800cc92:	0013      	movs	r3, r2
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	1a9b      	subs	r3, r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	18cb      	adds	r3, r1, r3
 800cc9c:	3334      	adds	r3, #52	; 0x34
 800cc9e:	2200      	movs	r2, #0
 800cca0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800cca2:	f000 fac5 	bl	800d230 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b002      	add	sp, #8
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	46c0      	nop			; (mov r8, r8)
 800ccb0:	2000873c 	.word	0x2000873c

0800ccb4 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
}

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	0002      	movs	r2, r0
 800ccbc:	1dfb      	adds	r3, r7, #7
 800ccbe:	701a      	strb	r2, [r3, #0]
  switch (Ports[PortNum].CCx)
 800ccc0:	1dfb      	adds	r3, r7, #7
 800ccc2:	781a      	ldrb	r2, [r3, #0]
 800ccc4:	491c      	ldr	r1, [pc, #112]	; (800cd38 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800ccc6:	0013      	movs	r3, r2
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	1a9b      	subs	r3, r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	18cb      	adds	r3, r1, r3
 800ccd0:	3334      	adds	r3, #52	; 0x34
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d002      	beq.n	800ccde <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d012      	beq.n	800cd02 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800ccdc:	e026      	b.n	800cd2c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800ccde:	1dfb      	adds	r3, r7, #7
 800cce0:	781a      	ldrb	r2, [r3, #0]
 800cce2:	4915      	ldr	r1, [pc, #84]	; (800cd38 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800cce4:	0013      	movs	r3, r2
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	1a9b      	subs	r3, r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	585b      	ldr	r3, [r3, r1]
 800ccee:	695a      	ldr	r2, [r3, #20]
 800ccf0:	23c0      	movs	r3, #192	; 0xc0
 800ccf2:	029b      	lsls	r3, r3, #10
 800ccf4:	401a      	ands	r2, r3
 800ccf6:	23c0      	movs	r3, #192	; 0xc0
 800ccf8:	029b      	lsls	r3, r3, #10
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d113      	bne.n	800cd26 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e015      	b.n	800cd2e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800cd02:	1dfb      	adds	r3, r7, #7
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	490c      	ldr	r1, [pc, #48]	; (800cd38 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800cd08:	0013      	movs	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	1a9b      	subs	r3, r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	585b      	ldr	r3, [r3, r1]
 800cd12:	695a      	ldr	r2, [r3, #20]
 800cd14:	23c0      	movs	r3, #192	; 0xc0
 800cd16:	031b      	lsls	r3, r3, #12
 800cd18:	401a      	ands	r2, r3
 800cd1a:	23c0      	movs	r3, #192	; 0xc0
 800cd1c:	031b      	lsls	r3, r3, #12
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d103      	bne.n	800cd2a <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e003      	b.n	800cd2e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800cd26:	46c0      	nop			; (mov r8, r8)
 800cd28:	e000      	b.n	800cd2c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800cd2a:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	0018      	movs	r0, r3
 800cd30:	46bd      	mov	sp, r7
 800cd32:	b002      	add	sp, #8
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	46c0      	nop			; (mov r8, r8)
 800cd38:	2000873c 	.word	0x2000873c

0800cd3c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	0002      	movs	r2, r0
 800cd44:	1dfb      	adds	r3, r7, #7
 800cd46:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800cd48:	1dfb      	adds	r3, r7, #7
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	220c      	movs	r2, #12
 800cd4e:	18ba      	adds	r2, r7, r2
 800cd50:	0011      	movs	r1, r2
 800cd52:	0018      	movs	r0, r3
 800cd54:	f009 fdc7 	bl	80168e6 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	b29b      	uxth	r3, r3
}
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	b004      	add	sp, #16
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <LL_APB2_GRP1_EnableClock>:
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <LL_APB2_GRP1_EnableClock+0x28>)
 800cd6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <LL_APB2_GRP1_EnableClock+0x28>)
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	430a      	orrs	r2, r1
 800cd76:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800cd78:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <LL_APB2_GRP1_EnableClock+0x28>)
 800cd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4013      	ands	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cd82:	68fb      	ldr	r3, [r7, #12]
}
 800cd84:	46c0      	nop			; (mov r8, r8)
 800cd86:	46bd      	mov	sp, r7
 800cd88:	b004      	add	sp, #16
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40021000 	.word	0x40021000

0800cd90 <LL_APB2_GRP1_DisableClock>:
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800cd98:	4b05      	ldr	r3, [pc, #20]	; (800cdb0 <LL_APB2_GRP1_DisableClock+0x20>)
 800cd9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	43d9      	mvns	r1, r3
 800cda0:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <LL_APB2_GRP1_DisableClock+0x20>)
 800cda2:	400a      	ands	r2, r1
 800cda4:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	b002      	add	sp, #8
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	40021000 	.word	0x40021000

0800cdb4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	601a      	str	r2, [r3, #0]
}
 800cdc8:	46c0      	nop			; (mov r8, r8)
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	b002      	add	sp, #8
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2270      	movs	r2, #112	; 0x70
 800cde0:	4393      	bics	r3, r2
 800cde2:	001a      	movs	r2, r3
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	601a      	str	r2, [r3, #0]
}
 800cdec:	46c0      	nop			; (mov r8, r8)
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	b002      	add	sp, #8
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ce04:	46c0      	nop			; (mov r8, r8)
 800ce06:	46bd      	mov	sp, r7
 800ce08:	b002      	add	sp, #8
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ce18:	0018      	movs	r0, r3
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	b002      	add	sp, #8
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ce30:	46c0      	nop			; (mov r8, r8)
 800ce32:	46bd      	mov	sp, r7
 800ce34:	b002      	add	sp, #8
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d02c      	beq.n	800cea4 <LL_TIM_OC_SetMode+0x6c>
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d027      	beq.n	800cea0 <LL_TIM_OC_SetMode+0x68>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b10      	cmp	r3, #16
 800ce54:	d022      	beq.n	800ce9c <LL_TIM_OC_SetMode+0x64>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b40      	cmp	r3, #64	; 0x40
 800ce5a:	d01d      	beq.n	800ce98 <LL_TIM_OC_SetMode+0x60>
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	2380      	movs	r3, #128	; 0x80
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d016      	beq.n	800ce94 <LL_TIM_OC_SetMode+0x5c>
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	2380      	movs	r3, #128	; 0x80
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d00f      	beq.n	800ce90 <LL_TIM_OC_SetMode+0x58>
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	2380      	movs	r3, #128	; 0x80
 800ce74:	015b      	lsls	r3, r3, #5
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d008      	beq.n	800ce8c <LL_TIM_OC_SetMode+0x54>
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	2380      	movs	r3, #128	; 0x80
 800ce7e:	025b      	lsls	r3, r3, #9
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d101      	bne.n	800ce88 <LL_TIM_OC_SetMode+0x50>
 800ce84:	2307      	movs	r3, #7
 800ce86:	e00e      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce88:	2308      	movs	r3, #8
 800ce8a:	e00c      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce8c:	2306      	movs	r3, #6
 800ce8e:	e00a      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce90:	2305      	movs	r3, #5
 800ce92:	e008      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce94:	2304      	movs	r3, #4
 800ce96:	e006      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e004      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	e002      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <LL_TIM_OC_SetMode+0x6e>
 800cea4:	2300      	movs	r3, #0
 800cea6:	2017      	movs	r0, #23
 800cea8:	183a      	adds	r2, r7, r0
 800ceaa:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3318      	adds	r3, #24
 800ceb0:	0019      	movs	r1, r3
 800ceb2:	183b      	adds	r3, r7, r0
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	4a0e      	ldr	r2, [pc, #56]	; (800cef0 <LL_TIM_OC_SetMode+0xb8>)
 800ceb8:	5cd3      	ldrb	r3, [r2, r3]
 800ceba:	18cb      	adds	r3, r1, r3
 800cebc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	183a      	adds	r2, r7, r0
 800cec4:	7812      	ldrb	r2, [r2, #0]
 800cec6:	490b      	ldr	r1, [pc, #44]	; (800cef4 <LL_TIM_OC_SetMode+0xbc>)
 800cec8:	5c8a      	ldrb	r2, [r1, r2]
 800ceca:	0011      	movs	r1, r2
 800cecc:	4a0a      	ldr	r2, [pc, #40]	; (800cef8 <LL_TIM_OC_SetMode+0xc0>)
 800cece:	408a      	lsls	r2, r1
 800ced0:	43d2      	mvns	r2, r2
 800ced2:	401a      	ands	r2, r3
 800ced4:	183b      	adds	r3, r7, r0
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	4906      	ldr	r1, [pc, #24]	; (800cef4 <LL_TIM_OC_SetMode+0xbc>)
 800ceda:	5ccb      	ldrb	r3, [r1, r3]
 800cedc:	0019      	movs	r1, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	408b      	lsls	r3, r1
 800cee2:	431a      	orrs	r2, r3
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	601a      	str	r2, [r3, #0]
}
 800cee8:	46c0      	nop			; (mov r8, r8)
 800ceea:	46bd      	mov	sp, r7
 800ceec:	b006      	add	sp, #24
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	08018534 	.word	0x08018534
 800cef4:	08018540 	.word	0x08018540
 800cef8:	00010073 	.word	0x00010073

0800cefc <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b086      	sub	sp, #24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d02c      	beq.n	800cf68 <LL_TIM_OC_SetPolarity+0x6c>
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	d027      	beq.n	800cf64 <LL_TIM_OC_SetPolarity+0x68>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b10      	cmp	r3, #16
 800cf18:	d022      	beq.n	800cf60 <LL_TIM_OC_SetPolarity+0x64>
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b40      	cmp	r3, #64	; 0x40
 800cf1e:	d01d      	beq.n	800cf5c <LL_TIM_OC_SetPolarity+0x60>
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	2380      	movs	r3, #128	; 0x80
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d016      	beq.n	800cf58 <LL_TIM_OC_SetPolarity+0x5c>
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	2380      	movs	r3, #128	; 0x80
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d00f      	beq.n	800cf54 <LL_TIM_OC_SetPolarity+0x58>
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	2380      	movs	r3, #128	; 0x80
 800cf38:	015b      	lsls	r3, r3, #5
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d008      	beq.n	800cf50 <LL_TIM_OC_SetPolarity+0x54>
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	2380      	movs	r3, #128	; 0x80
 800cf42:	025b      	lsls	r3, r3, #9
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d101      	bne.n	800cf4c <LL_TIM_OC_SetPolarity+0x50>
 800cf48:	2307      	movs	r3, #7
 800cf4a:	e00e      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf4c:	2308      	movs	r3, #8
 800cf4e:	e00c      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf50:	2306      	movs	r3, #6
 800cf52:	e00a      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf54:	2305      	movs	r3, #5
 800cf56:	e008      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	e006      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e004      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf60:	2302      	movs	r3, #2
 800cf62:	e002      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf64:	2301      	movs	r3, #1
 800cf66:	e000      	b.n	800cf6a <LL_TIM_OC_SetPolarity+0x6e>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	2017      	movs	r0, #23
 800cf6c:	183a      	adds	r2, r7, r0
 800cf6e:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a1b      	ldr	r3, [r3, #32]
 800cf74:	183a      	adds	r2, r7, r0
 800cf76:	7812      	ldrb	r2, [r2, #0]
 800cf78:	490a      	ldr	r1, [pc, #40]	; (800cfa4 <LL_TIM_OC_SetPolarity+0xa8>)
 800cf7a:	5c8a      	ldrb	r2, [r1, r2]
 800cf7c:	0011      	movs	r1, r2
 800cf7e:	2202      	movs	r2, #2
 800cf80:	408a      	lsls	r2, r1
 800cf82:	43d2      	mvns	r2, r2
 800cf84:	401a      	ands	r2, r3
 800cf86:	183b      	adds	r3, r7, r0
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	4906      	ldr	r1, [pc, #24]	; (800cfa4 <LL_TIM_OC_SetPolarity+0xa8>)
 800cf8c:	5ccb      	ldrb	r3, [r1, r3]
 800cf8e:	0019      	movs	r1, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	408b      	lsls	r3, r1
 800cf94:	431a      	orrs	r2, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	621a      	str	r2, [r3, #32]
}
 800cf9a:	46c0      	nop			; (mov r8, r8)
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	b006      	add	sp, #24
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	46c0      	nop			; (mov r8, r8)
 800cfa4:	0801854c 	.word	0x0801854c

0800cfa8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 800cfb8:	46c0      	nop			; (mov r8, r8)
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	b002      	add	sp, #8
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	639a      	str	r2, [r3, #56]	; 0x38
}
 800cfd0:	46c0      	nop			; (mov r8, r8)
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	b002      	add	sp, #8
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cfe8:	46c0      	nop			; (mov r8, r8)
 800cfea:	46bd      	mov	sp, r7
 800cfec:	b002      	add	sp, #8
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d000:	46c0      	nop			; (mov r8, r8)
 800d002:	46bd      	mov	sp, r7
 800d004:	b002      	add	sp, #8
 800d006:	bd80      	pop	{r7, pc}

0800d008 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2203      	movs	r2, #3
 800d014:	4252      	negs	r2, r2
 800d016:	611a      	str	r2, [r3, #16]
}
 800d018:	46c0      	nop			; (mov r8, r8)
 800d01a:	46bd      	mov	sp, r7
 800d01c:	b002      	add	sp, #8
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	2202      	movs	r2, #2
 800d02e:	4013      	ands	r3, r2
 800d030:	2b02      	cmp	r3, #2
 800d032:	d101      	bne.n	800d038 <LL_TIM_IsActiveFlag_CC1+0x18>
 800d034:	2301      	movs	r3, #1
 800d036:	e000      	b.n	800d03a <LL_TIM_IsActiveFlag_CC1+0x1a>
 800d038:	2300      	movs	r3, #0
}
 800d03a:	0018      	movs	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b002      	add	sp, #8
 800d040:	bd80      	pop	{r7, pc}

0800d042 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2205      	movs	r2, #5
 800d04e:	4252      	negs	r2, r2
 800d050:	611a      	str	r2, [r3, #16]
}
 800d052:	46c0      	nop			; (mov r8, r8)
 800d054:	46bd      	mov	sp, r7
 800d056:	b002      	add	sp, #8
 800d058:	bd80      	pop	{r7, pc}

0800d05a <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2204      	movs	r2, #4
 800d068:	4013      	ands	r3, r2
 800d06a:	2b04      	cmp	r3, #4
 800d06c:	d101      	bne.n	800d072 <LL_TIM_IsActiveFlag_CC2+0x18>
 800d06e:	2301      	movs	r3, #1
 800d070:	e000      	b.n	800d074 <LL_TIM_IsActiveFlag_CC2+0x1a>
 800d072:	2300      	movs	r3, #0
}
 800d074:	0018      	movs	r0, r3
 800d076:	46bd      	mov	sp, r7
 800d078:	b002      	add	sp, #8
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2209      	movs	r2, #9
 800d088:	4252      	negs	r2, r2
 800d08a:	611a      	str	r2, [r3, #16]
}
 800d08c:	46c0      	nop			; (mov r8, r8)
 800d08e:	46bd      	mov	sp, r7
 800d090:	b002      	add	sp, #8
 800d092:	bd80      	pop	{r7, pc}

0800d094 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	2208      	movs	r2, #8
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	2b08      	cmp	r3, #8
 800d0a6:	d101      	bne.n	800d0ac <LL_TIM_IsActiveFlag_CC3+0x18>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <LL_TIM_IsActiveFlag_CC3+0x1a>
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	0018      	movs	r0, r3
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	b002      	add	sp, #8
 800d0b4:	bd80      	pop	{r7, pc}

0800d0b6 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2211      	movs	r2, #17
 800d0c2:	4252      	negs	r2, r2
 800d0c4:	611a      	str	r2, [r3, #16]
}
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	b002      	add	sp, #8
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	2210      	movs	r2, #16
 800d0dc:	4013      	ands	r3, r2
 800d0de:	2b10      	cmp	r3, #16
 800d0e0:	d101      	bne.n	800d0e6 <LL_TIM_IsActiveFlag_CC4+0x18>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	0018      	movs	r0, r3
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	b002      	add	sp, #8
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800d0f0:	b5b0      	push	{r4, r5, r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800d0f4:	4b48      	ldr	r3, [pc, #288]	; (800d218 <USBPD_TIM_Init+0x128>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	b25b      	sxtb	r3, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d000      	beq.n	800d100 <USBPD_TIM_Init+0x10>
 800d0fe:	e07e      	b.n	800d1fe <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 800d100:	2380      	movs	r3, #128	; 0x80
 800d102:	011b      	lsls	r3, r3, #4
 800d104:	0018      	movs	r0, r3
 800d106:	f7ff fe2d 	bl	800cd64 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800d10a:	4b44      	ldr	r3, [pc, #272]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d10c:	2100      	movs	r1, #0
 800d10e:	0018      	movs	r0, r3
 800d110:	f7ff fe5e 	bl	800cdd0 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800d114:	4b42      	ldr	r3, [pc, #264]	; (800d220 <USBPD_TIM_Init+0x130>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a42      	ldr	r2, [pc, #264]	; (800d224 <USBPD_TIM_Init+0x134>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d90b      	bls.n	800d136 <USBPD_TIM_Init+0x46>
 800d11e:	4b40      	ldr	r3, [pc, #256]	; (800d220 <USBPD_TIM_Init+0x130>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a41      	ldr	r2, [pc, #260]	; (800d228 <USBPD_TIM_Init+0x138>)
 800d124:	4694      	mov	ip, r2
 800d126:	4463      	add	r3, ip
 800d128:	4940      	ldr	r1, [pc, #256]	; (800d22c <USBPD_TIM_Init+0x13c>)
 800d12a:	0018      	movs	r0, r3
 800d12c:	f7f5 fc20 	bl	8002970 <__udivsi3>
 800d130:	0003      	movs	r3, r0
 800d132:	3b01      	subs	r3, #1
 800d134:	e000      	b.n	800d138 <USBPD_TIM_Init+0x48>
 800d136:	2300      	movs	r3, #0
 800d138:	4a38      	ldr	r2, [pc, #224]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d13a:	0019      	movs	r1, r3
 800d13c:	0010      	movs	r0, r2
 800d13e:	f7ff fe59 	bl	800cdf4 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800d142:	4b37      	ldr	r3, [pc, #220]	; (800d220 <USBPD_TIM_Init+0x130>)
 800d144:	681c      	ldr	r4, [r3, #0]
 800d146:	4b35      	ldr	r3, [pc, #212]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d148:	0018      	movs	r0, r3
 800d14a:	f7ff fe5f 	bl	800ce0c <LL_TIM_GetPrescaler>
 800d14e:	0003      	movs	r3, r0
 800d150:	3301      	adds	r3, #1
 800d152:	0019      	movs	r1, r3
 800d154:	0020      	movs	r0, r4
 800d156:	f7f5 fc0b 	bl	8002970 <__udivsi3>
 800d15a:	0003      	movs	r3, r0
 800d15c:	2b63      	cmp	r3, #99	; 0x63
 800d15e:	d910      	bls.n	800d182 <USBPD_TIM_Init+0x92>
 800d160:	4b2f      	ldr	r3, [pc, #188]	; (800d220 <USBPD_TIM_Init+0x130>)
 800d162:	681c      	ldr	r4, [r3, #0]
 800d164:	4b2d      	ldr	r3, [pc, #180]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d166:	0018      	movs	r0, r3
 800d168:	f7ff fe50 	bl	800ce0c <LL_TIM_GetPrescaler>
 800d16c:	0003      	movs	r3, r0
 800d16e:	3301      	adds	r3, #1
 800d170:	2264      	movs	r2, #100	; 0x64
 800d172:	4353      	muls	r3, r2
 800d174:	0019      	movs	r1, r3
 800d176:	0020      	movs	r0, r4
 800d178:	f7f5 fbfa 	bl	8002970 <__udivsi3>
 800d17c:	0003      	movs	r3, r0
 800d17e:	3b01      	subs	r3, #1
 800d180:	e000      	b.n	800d184 <USBPD_TIM_Init+0x94>
 800d182:	2300      	movs	r3, #0
 800d184:	4a25      	ldr	r2, [pc, #148]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d186:	0019      	movs	r1, r3
 800d188:	0010      	movs	r0, r2
 800d18a:	f7ff fe49 	bl	800ce20 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 800d18e:	4b23      	ldr	r3, [pc, #140]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d190:	2230      	movs	r2, #48	; 0x30
 800d192:	2101      	movs	r1, #1
 800d194:	0018      	movs	r0, r3
 800d196:	f7ff fe4f 	bl	800ce38 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 800d19a:	4b20      	ldr	r3, [pc, #128]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d19c:	2230      	movs	r2, #48	; 0x30
 800d19e:	2110      	movs	r1, #16
 800d1a0:	0018      	movs	r0, r3
 800d1a2:	f7ff fe49 	bl	800ce38 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 800d1a6:	2380      	movs	r3, #128	; 0x80
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	481c      	ldr	r0, [pc, #112]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1ac:	2230      	movs	r2, #48	; 0x30
 800d1ae:	0019      	movs	r1, r3
 800d1b0:	f7ff fe42 	bl	800ce38 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 800d1b4:	2380      	movs	r3, #128	; 0x80
 800d1b6:	015b      	lsls	r3, r3, #5
 800d1b8:	4818      	ldr	r0, [pc, #96]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1ba:	2230      	movs	r2, #48	; 0x30
 800d1bc:	0019      	movs	r1, r3
 800d1be:	f7ff fe3b 	bl	800ce38 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800d1c2:	4b16      	ldr	r3, [pc, #88]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	f7ff fe97 	bl	800cefc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 800d1ce:	4b13      	ldr	r3, [pc, #76]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2110      	movs	r1, #16
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f7ff fe91 	bl	800cefc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800d1da:	2380      	movs	r3, #128	; 0x80
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	480f      	ldr	r0, [pc, #60]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	0019      	movs	r1, r3
 800d1e4:	f7ff fe8a 	bl	800cefc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800d1e8:	2380      	movs	r3, #128	; 0x80
 800d1ea:	015b      	lsls	r3, r3, #5
 800d1ec:	480b      	ldr	r0, [pc, #44]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	0019      	movs	r1, r3
 800d1f2:	f7ff fe83 	bl	800cefc <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 800d1f6:	4b09      	ldr	r3, [pc, #36]	; (800d21c <USBPD_TIM_Init+0x12c>)
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f7ff fddb 	bl	800cdb4 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 800d1fe:	4b06      	ldr	r3, [pc, #24]	; (800d218 <USBPD_TIM_Init+0x128>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	b25b      	sxtb	r3, r3
 800d204:	b2db      	uxtb	r3, r3
 800d206:	3301      	adds	r3, #1
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	b25a      	sxtb	r2, r3
 800d20c:	4b02      	ldr	r3, [pc, #8]	; (800d218 <USBPD_TIM_Init+0x128>)
 800d20e:	701a      	strb	r2, [r3, #0]
}
 800d210:	46c0      	nop			; (mov r8, r8)
 800d212:	46bd      	mov	sp, r7
 800d214:	bdb0      	pop	{r4, r5, r7, pc}
 800d216:	46c0      	nop			; (mov r8, r8)
 800d218:	20008774 	.word	0x20008774
 800d21c:	40012c00 	.word	0x40012c00
 800d220:	20000004 	.word	0x20000004
 800d224:	000f423f 	.word	0x000f423f
 800d228:	0007a120 	.word	0x0007a120
 800d22c:	000f4240 	.word	0x000f4240

0800d230 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
  timer_initcounter--;
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <USBPD_TIM_DeInit+0x30>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	b25b      	sxtb	r3, r3
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	3b01      	subs	r3, #1
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	b25a      	sxtb	r2, r3
 800d242:	4b07      	ldr	r3, [pc, #28]	; (800d260 <USBPD_TIM_DeInit+0x30>)
 800d244:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 800d246:	4b06      	ldr	r3, [pc, #24]	; (800d260 <USBPD_TIM_DeInit+0x30>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	b25b      	sxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d104      	bne.n	800d25a <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 800d250:	2380      	movs	r3, #128	; 0x80
 800d252:	011b      	lsls	r3, r3, #4
 800d254:	0018      	movs	r0, r3
 800d256:	f7ff fd9b 	bl	800cd90 <LL_APB2_GRP1_DisableClock>
  }
}
 800d25a:	46c0      	nop			; (mov r8, r8)
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20008774 	.word	0x20008774

0800d264 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	0002      	movs	r2, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 800d272:	1dfb      	adds	r3, r7, #7
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b03      	cmp	r3, #3
 800d278:	d044      	beq.n	800d304 <USBPD_TIM_Start+0xa0>
 800d27a:	dc57      	bgt.n	800d32c <USBPD_TIM_Start+0xc8>
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d02d      	beq.n	800d2dc <USBPD_TIM_Start+0x78>
 800d280:	dc54      	bgt.n	800d32c <USBPD_TIM_Start+0xc8>
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <USBPD_TIM_Start+0x28>
 800d286:	2b01      	cmp	r3, #1
 800d288:	d014      	beq.n	800d2b4 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 800d28a:	e04f      	b.n	800d32c <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 800d28c:	4b2a      	ldr	r3, [pc, #168]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d28e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	18d3      	adds	r3, r2, r3
 800d294:	4929      	ldr	r1, [pc, #164]	; (800d33c <USBPD_TIM_Start+0xd8>)
 800d296:	0018      	movs	r0, r3
 800d298:	f7f5 fbf0 	bl	8002a7c <__aeabi_uidivmod>
 800d29c:	000b      	movs	r3, r1
 800d29e:	001a      	movs	r2, r3
 800d2a0:	4b25      	ldr	r3, [pc, #148]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2a2:	0011      	movs	r1, r2
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f7ff fe7f 	bl	800cfa8 <LL_TIM_OC_SetCompareCH1>
 800d2aa:	4b23      	ldr	r3, [pc, #140]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f7ff feab 	bl	800d008 <LL_TIM_ClearFlag_CC1>
      break;
 800d2b2:	e03c      	b.n	800d32e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 800d2b4:	4b20      	ldr	r3, [pc, #128]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	18d3      	adds	r3, r2, r3
 800d2bc:	491f      	ldr	r1, [pc, #124]	; (800d33c <USBPD_TIM_Start+0xd8>)
 800d2be:	0018      	movs	r0, r3
 800d2c0:	f7f5 fbdc 	bl	8002a7c <__aeabi_uidivmod>
 800d2c4:	000b      	movs	r3, r1
 800d2c6:	001a      	movs	r2, r3
 800d2c8:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2ca:	0011      	movs	r1, r2
 800d2cc:	0018      	movs	r0, r3
 800d2ce:	f7ff fe77 	bl	800cfc0 <LL_TIM_OC_SetCompareCH2>
 800d2d2:	4b19      	ldr	r3, [pc, #100]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f7ff feb4 	bl	800d042 <LL_TIM_ClearFlag_CC2>
      break;
 800d2da:	e028      	b.n	800d32e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 800d2dc:	4b16      	ldr	r3, [pc, #88]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	18d3      	adds	r3, r2, r3
 800d2e4:	4915      	ldr	r1, [pc, #84]	; (800d33c <USBPD_TIM_Start+0xd8>)
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	f7f5 fbc8 	bl	8002a7c <__aeabi_uidivmod>
 800d2ec:	000b      	movs	r3, r1
 800d2ee:	001a      	movs	r2, r3
 800d2f0:	4b11      	ldr	r3, [pc, #68]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2f2:	0011      	movs	r1, r2
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f7ff fe6f 	bl	800cfd8 <LL_TIM_OC_SetCompareCH3>
 800d2fa:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	f7ff febd 	bl	800d07c <LL_TIM_ClearFlag_CC3>
      break;
 800d302:	e014      	b.n	800d32e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 800d304:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	18d3      	adds	r3, r2, r3
 800d30c:	490b      	ldr	r1, [pc, #44]	; (800d33c <USBPD_TIM_Start+0xd8>)
 800d30e:	0018      	movs	r0, r3
 800d310:	f7f5 fbb4 	bl	8002a7c <__aeabi_uidivmod>
 800d314:	000b      	movs	r3, r1
 800d316:	001a      	movs	r2, r3
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d31a:	0011      	movs	r1, r2
 800d31c:	0018      	movs	r0, r3
 800d31e:	f7ff fe67 	bl	800cff0 <LL_TIM_OC_SetCompareCH4>
 800d322:	4b05      	ldr	r3, [pc, #20]	; (800d338 <USBPD_TIM_Start+0xd4>)
 800d324:	0018      	movs	r0, r3
 800d326:	f7ff fec6 	bl	800d0b6 <LL_TIM_ClearFlag_CC4>
      break;
 800d32a:	e000      	b.n	800d32e <USBPD_TIM_Start+0xca>
      break;
 800d32c:	46c0      	nop			; (mov r8, r8)
  }
}
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	46bd      	mov	sp, r7
 800d332:	b002      	add	sp, #8
 800d334:	bd80      	pop	{r7, pc}
 800d336:	46c0      	nop			; (mov r8, r8)
 800d338:	40012c00 	.word	0x40012c00
 800d33c:	00002710 	.word	0x00002710

0800d340 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	0002      	movs	r2, r0
 800d348:	1dfb      	adds	r3, r7, #7
 800d34a:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 800d34c:	2301      	movs	r3, #1
 800d34e:	60fb      	str	r3, [r7, #12]
  switch (Id)
 800d350:	1dfb      	adds	r3, r7, #7
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b03      	cmp	r3, #3
 800d356:	d01d      	beq.n	800d394 <USBPD_TIM_IsExpired+0x54>
 800d358:	dc23      	bgt.n	800d3a2 <USBPD_TIM_IsExpired+0x62>
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d013      	beq.n	800d386 <USBPD_TIM_IsExpired+0x46>
 800d35e:	dc20      	bgt.n	800d3a2 <USBPD_TIM_IsExpired+0x62>
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <USBPD_TIM_IsExpired+0x2a>
 800d364:	2b01      	cmp	r3, #1
 800d366:	d007      	beq.n	800d378 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 800d368:	e01b      	b.n	800d3a2 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 800d36a:	4b11      	ldr	r3, [pc, #68]	; (800d3b0 <USBPD_TIM_IsExpired+0x70>)
 800d36c:	0018      	movs	r0, r3
 800d36e:	f7ff fe57 	bl	800d020 <LL_TIM_IsActiveFlag_CC1>
 800d372:	0003      	movs	r3, r0
 800d374:	60fb      	str	r3, [r7, #12]
      break;
 800d376:	e015      	b.n	800d3a4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 800d378:	4b0d      	ldr	r3, [pc, #52]	; (800d3b0 <USBPD_TIM_IsExpired+0x70>)
 800d37a:	0018      	movs	r0, r3
 800d37c:	f7ff fe6d 	bl	800d05a <LL_TIM_IsActiveFlag_CC2>
 800d380:	0003      	movs	r3, r0
 800d382:	60fb      	str	r3, [r7, #12]
      break;
 800d384:	e00e      	b.n	800d3a4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 800d386:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <USBPD_TIM_IsExpired+0x70>)
 800d388:	0018      	movs	r0, r3
 800d38a:	f7ff fe83 	bl	800d094 <LL_TIM_IsActiveFlag_CC3>
 800d38e:	0003      	movs	r3, r0
 800d390:	60fb      	str	r3, [r7, #12]
      break;
 800d392:	e007      	b.n	800d3a4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 800d394:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <USBPD_TIM_IsExpired+0x70>)
 800d396:	0018      	movs	r0, r3
 800d398:	f7ff fe99 	bl	800d0ce <LL_TIM_IsActiveFlag_CC4>
 800d39c:	0003      	movs	r3, r0
 800d39e:	60fb      	str	r3, [r7, #12]
      break;
 800d3a0:	e000      	b.n	800d3a4 <USBPD_TIM_IsExpired+0x64>
      break;
 800d3a2:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
}
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	b004      	add	sp, #16
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	46c0      	nop			; (mov r8, r8)
 800d3b0:	40012c00 	.word	0x40012c00

0800d3b4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b094      	sub	sp, #80	; 0x50
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
 800d3c0:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3303      	adds	r3, #3
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	4393      	bics	r3, r2
 800d3ca:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d3d2:	b672      	cpsid	i
    return(primask_value);
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800d3d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d3d8:	4b56      	ldr	r3, [pc, #344]	; (800d534 <_tx_byte_allocate+0x180>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3e6:	621a      	str	r2, [r3, #32]
 800d3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	f383 8810 	msr	PRIMASK, r3
}
 800d3f2:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	0011      	movs	r1, r2
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	f000 f9c0 	bl	800d780 <_tx_byte_pool_search>
 800d400:	0003      	movs	r3, r0
 800d402:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d404:	f3ef 8310 	mrs	r3, PRIMASK
 800d408:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d40a:	b672      	cpsid	i
    return(primask_value);
 800d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800d40e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800d416:	2301      	movs	r3, #1
 800d418:	647b      	str	r3, [r7, #68]	; 0x44
 800d41a:	e006      	b.n	800d42a <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6a1b      	ldr	r3, [r3, #32]
 800d420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d422:	429a      	cmp	r2, r3
 800d424:	d101      	bne.n	800d42a <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800d426:	2301      	movs	r3, #1
 800d428:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 800d42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d0d8      	beq.n	800d3e2 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d434:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800d436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d008      	beq.n	800d44e <_tx_byte_allocate+0x9a>
 800d43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d43e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d440:	6a3b      	ldr	r3, [r7, #32]
 800d442:	f383 8810 	msr	PRIMASK, r3
}
 800d446:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800d448:	2300      	movs	r3, #0
 800d44a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d44c:	e06d      	b.n	800d52a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d062      	beq.n	800d51a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800d454:	4b38      	ldr	r3, [pc, #224]	; (800d538 <_tx_byte_allocate+0x184>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d007      	beq.n	800d46c <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800d45c:	2310      	movs	r3, #16
 800d45e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d462:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	f383 8810 	msr	PRIMASK, r3
}
 800d46a:	e05e      	b.n	800d52a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800d46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d46e:	4a33      	ldr	r2, [pc, #204]	; (800d53c <_tx_byte_allocate+0x188>)
 800d470:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800d472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800d478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800d47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800d484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d486:	22ac      	movs	r2, #172	; 0xac
 800d488:	589b      	ldr	r3, [r3, r2]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48e:	21ac      	movs	r1, #172	; 0xac
 800d490:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d496:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d49c:	1c5a      	adds	r2, r3, #1
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d109      	bne.n	800d4bc <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ac:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800d4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b2:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800d4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b8:	675a      	str	r2, [r3, #116]	; 0x74
 800d4ba:	e011      	b.n	800d4e0 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c0:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c6:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4cc:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4d8:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4de:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800d4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e2:	2209      	movs	r2, #9
 800d4e4:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d4f2:	4b11      	ldr	r3, [pc, #68]	; (800d538 <_tx_byte_allocate+0x184>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <_tx_byte_allocate+0x184>)
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	f383 8810 	msr	PRIMASK, r3
}
 800d506:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50a:	0018      	movs	r0, r3
 800d50c:	f002 ffea 	bl	80104e4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800d510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d512:	2284      	movs	r2, #132	; 0x84
 800d514:	589b      	ldr	r3, [r3, r2]
 800d516:	64bb      	str	r3, [r7, #72]	; 0x48
 800d518:	e007      	b.n	800d52a <_tx_byte_allocate+0x176>
 800d51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f383 8810 	msr	PRIMASK, r3
}
 800d524:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800d526:	2310      	movs	r3, #16
 800d528:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800d52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d52c:	0018      	movs	r0, r3
 800d52e:	46bd      	mov	sp, r7
 800d530:	b014      	add	sp, #80	; 0x50
 800d532:	bd80      	pop	{r7, pc}
 800d534:	200087b0 	.word	0x200087b0
 800d538:	20008848 	.word	0x20008848
 800d53c:	0800d541 	.word	0x0800d541

0800d540 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08c      	sub	sp, #48	; 0x30
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d54a:	f3ef 8310 	mrs	r3, PRIMASK
 800d54e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d550:	b672      	cpsid	i
    return(primask_value);
 800d552:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800d554:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d55a:	4b32      	ldr	r3, [pc, #200]	; (800d624 <_tx_byte_pool_cleanup+0xe4>)
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d157      	bne.n	800d610 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	22ac      	movs	r2, #172	; 0xac
 800d564:	589b      	ldr	r3, [r3, r2]
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d151      	bne.n	800d610 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d570:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	2b00      	cmp	r3, #0
 800d576:	d04b      	beq.n	800d610 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a2a      	ldr	r2, [pc, #168]	; (800d628 <_tx_byte_pool_cleanup+0xe8>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d146      	bne.n	800d610 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d586:	2b00      	cmp	r3, #0
 800d588:	d042      	beq.n	800d610 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d594:	1e5a      	subs	r2, r3, #1
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d103      	bne.n	800d5ae <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24
 800d5ac:	e013      	b.n	800d5d6 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b2:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b8:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d5ba:	6a3b      	ldr	r3, [r7, #32]
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	6a3a      	ldr	r2, [r7, #32]
 800d5c4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d102      	bne.n	800d5d6 <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	6a3a      	ldr	r2, [r7, #32]
 800d5d4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5da:	2b09      	cmp	r3, #9
 800d5dc:	d118      	bne.n	800d610 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2284      	movs	r2, #132	; 0x84
 800d5e2:	2110      	movs	r1, #16
 800d5e4:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d5e6:	4b11      	ldr	r3, [pc, #68]	; (800d62c <_tx_byte_pool_cleanup+0xec>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	4b0f      	ldr	r3, [pc, #60]	; (800d62c <_tx_byte_pool_cleanup+0xec>)
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	f383 8810 	msr	PRIMASK, r3
}
 800d5fa:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	0018      	movs	r0, r3
 800d600:	f002 fe70 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d604:	f3ef 8310 	mrs	r3, PRIMASK
 800d608:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d60a:	b672      	cpsid	i
    return(primask_value);
 800d60c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800d60e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f383 8810 	msr	PRIMASK, r3
}
 800d61a:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d61c:	46c0      	nop			; (mov r8, r8)
 800d61e:	46bd      	mov	sp, r7
 800d620:	b00c      	add	sp, #48	; 0x30
 800d622:	bd80      	pop	{r7, pc}
 800d624:	0800d541 	.word	0x0800d541
 800d628:	42595445 	.word	0x42595445
 800d62c:	20008848 	.word	0x20008848

0800d630 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b092      	sub	sp, #72	; 0x48
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	647b      	str	r3, [r7, #68]	; 0x44
 800d642:	233f      	movs	r3, #63	; 0x3f
 800d644:	18fb      	adds	r3, r7, r3
 800d646:	2200      	movs	r2, #0
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	2334      	movs	r3, #52	; 0x34
 800d64c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d64e:	2300      	movs	r3, #0
 800d650:	643b      	str	r3, [r7, #64]	; 0x40
 800d652:	e009      	b.n	800d668 <_tx_byte_pool_create+0x38>
 800d654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	647a      	str	r2, [r7, #68]	; 0x44
 800d65a:	223f      	movs	r2, #63	; 0x3f
 800d65c:	18ba      	adds	r2, r7, r2
 800d65e:	7812      	ldrb	r2, [r2, #0]
 800d660:	701a      	strb	r2, [r3, #0]
 800d662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d664:	3301      	adds	r3, #1
 800d666:	643b      	str	r3, [r7, #64]	; 0x40
 800d668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d3f1      	bcc.n	800d654 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2203      	movs	r2, #3
 800d674:	4393      	bics	r3, r2
 800d676:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	3b08      	subs	r3, #8
 800d69a:	001a      	movs	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2202      	movs	r2, #2
 800d6a4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800d6aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	18d3      	adds	r3, r2, r3
 800d6b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b4:	3b04      	subs	r3, #4
 800d6b6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800d6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6c4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c8:	3b04      	subs	r3, #4
 800d6ca:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800d6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6e2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800d6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	4a1e      	ldr	r2, [pc, #120]	; (800d770 <_tx_byte_pool_create+0x140>)
 800d6f6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d702:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d704:	b672      	cpsid	i
    return(primask_value);
 800d706:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800d708:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	4a19      	ldr	r2, [pc, #100]	; (800d774 <_tx_byte_pool_create+0x144>)
 800d70e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800d710:	4b19      	ldr	r3, [pc, #100]	; (800d778 <_tx_byte_pool_create+0x148>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d109      	bne.n	800d72c <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800d718:	4b18      	ldr	r3, [pc, #96]	; (800d77c <_tx_byte_pool_create+0x14c>)
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	631a      	str	r2, [r3, #48]	; 0x30
 800d72a:	e011      	b.n	800d750 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800d72c:	4b13      	ldr	r3, [pc, #76]	; (800d77c <_tx_byte_pool_create+0x14c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d736:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	69fa      	ldr	r2, [r7, #28]
 800d748:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6a3a      	ldr	r2, [r7, #32]
 800d74e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <_tx_byte_pool_create+0x148>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	1c5a      	adds	r2, r3, #1
 800d756:	4b08      	ldr	r3, [pc, #32]	; (800d778 <_tx_byte_pool_create+0x148>)
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f383 8810 	msr	PRIMASK, r3
}
 800d764:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d766:	2300      	movs	r3, #0
}
 800d768:	0018      	movs	r0, r3
 800d76a:	46bd      	mov	sp, r7
 800d76c:	b012      	add	sp, #72	; 0x48
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	ffffeeee 	.word	0xffffeeee
 800d774:	42595445 	.word	0x42595445
 800d778:	200087a4 	.word	0x200087a4
 800d77c:	200087a0 	.word	0x200087a0

0800d780 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b094      	sub	sp, #80	; 0x50
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d78e:	f3ef 8310 	mrs	r3, PRIMASK
 800d792:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d794:	b672      	cpsid	i
    return(primask_value);
 800d796:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800d798:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	689a      	ldr	r2, [r3, #8]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	3b02      	subs	r3, #2
 800d7a4:	00db      	lsls	r3, r3, #3
 800d7a6:	18d3      	adds	r3, r2, r3
 800d7a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d308      	bcc.n	800d7c4 <_tx_byte_pool_search+0x44>
 800d7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	f383 8810 	msr	PRIMASK, r3
}
 800d7bc:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7c2:	e0db      	b.n	800d97c <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d7c4:	4b70      	ldr	r3, [pc, #448]	; (800d988 <_tx_byte_pool_search+0x208>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7ce:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 800d7de:	2300      	movs	r3, #0
 800d7e0:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800d7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a66      	ldr	r2, [pc, #408]	; (800d98c <_tx_byte_pool_search+0x20c>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d143      	bne.n	800d87e <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800d7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d104      	bne.n	800d806 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d800:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800d802:	2301      	movs	r3, #1
 800d804:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d808:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800d810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800d818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81a:	3b08      	subs	r3, #8
 800d81c:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800d81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d255      	bcs.n	800d8d2 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800d826:	2300      	movs	r3, #0
 800d828:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	3304      	adds	r3, #4
 800d82e:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a54      	ldr	r2, [pc, #336]	; (800d98c <_tx_byte_pool_search+0x20c>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d113      	bne.n	800d866 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d848:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	1e5a      	subs	r2, r3, #1
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d114      	bne.n	800d888 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d862:	615a      	str	r2, [r3, #20]
 800d864:	e010      	b.n	800d888 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800d870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d008      	beq.n	800d888 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 800d876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d878:	3b01      	subs	r3, #1
 800d87a:	643b      	str	r3, [r7, #64]	; 0x40
 800d87c:	e004      	b.n	800d888 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d880:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800d888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 800d88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d890:	3b01      	subs	r3, #1
 800d892:	643b      	str	r3, [r7, #64]	; 0x40
 800d894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d896:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f383 8810 	msr	PRIMASK, r3
}
 800d89e:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d8a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d8a6:	b672      	cpsid	i
    return(primask_value);
 800d8a8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800d8aa:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a1b      	ldr	r3, [r3, #32]
 800d8b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d009      	beq.n	800d8ca <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	695b      	ldr	r3, [r3, #20]
 800d8ba:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8c8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800d8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d188      	bne.n	800d7e2 <_tx_byte_pool_search+0x62>
 800d8d0:	e000      	b.n	800d8d4 <_tx_byte_pool_search+0x154>
                    break;
 800d8d2:	46c0      	nop			; (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800d8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d048      	beq.n	800d96c <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800d8da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	2b13      	cmp	r3, #19
 800d8e2:	d91e      	bls.n	800d922 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ea:	18d3      	adds	r3, r2, r3
 800d8ec:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8f4:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	3304      	adds	r3, #4
 800d902:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90a:	4a20      	ldr	r2, [pc, #128]	; (800d98c <_tx_byte_pool_search+0x20c>)
 800d90c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d91c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800d922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d924:	3304      	adds	r3, #4
 800d926:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689a      	ldr	r2, [r3, #8]
 800d936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	3b08      	subs	r3, #8
 800d93c:	001a      	movs	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d948:	429a      	cmp	r2, r3
 800d94a:	d105      	bne.n	800d958 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800d94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94e:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	615a      	str	r2, [r3, #20]
 800d958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d95a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f383 8810 	msr	PRIMASK, r3
}
 800d962:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800d964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d966:	3308      	adds	r3, #8
 800d968:	64bb      	str	r3, [r7, #72]	; 0x48
 800d96a:	e007      	b.n	800d97c <_tx_byte_pool_search+0x1fc>
 800d96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d96e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f383 8810 	msr	PRIMASK, r3
}
 800d976:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800d97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d97e:	0018      	movs	r0, r3
 800d980:	46bd      	mov	sp, r7
 800d982:	b014      	add	sp, #80	; 0x50
 800d984:	bd80      	pop	{r7, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	200087b0 	.word	0x200087b0
 800d98c:	ffffeeee 	.word	0xffffeeee

0800d990 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08c      	sub	sp, #48	; 0x30
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d99a:	f3ef 8310 	mrs	r3, PRIMASK
 800d99e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d9a0:	b672      	cpsid	i
    return(primask_value);
 800d9a2:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800d9a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d9aa:	4b37      	ldr	r3, [pc, #220]	; (800da88 <_tx_event_flags_cleanup+0xf8>)
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d161      	bne.n	800da74 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	22ac      	movs	r2, #172	; 0xac
 800d9b4:	589b      	ldr	r3, [r3, r2]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d15b      	bne.n	800da74 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d055      	beq.n	800da74 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a2f      	ldr	r2, [pc, #188]	; (800da8c <_tx_event_flags_cleanup+0xfc>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d150      	bne.n	800da74 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d04c      	beq.n	800da74 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d020      	beq.n	800da34 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	627b      	str	r3, [r7, #36]	; 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fc:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	2b00      	cmp	r3, #0
 800da02:	d103      	bne.n	800da0c <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	2200      	movs	r2, #0
 800da08:	611a      	str	r2, [r3, #16]
 800da0a:	e016      	b.n	800da3a <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da10:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da16:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	69ba      	ldr	r2, [r7, #24]
 800da1c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	69fa      	ldr	r2, [r7, #28]
 800da22:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800da24:	6a3a      	ldr	r2, [r7, #32]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d106      	bne.n	800da3a <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	611a      	str	r2, [r3, #16]
 800da32:	e002      	b.n	800da3a <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800da34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da36:	2201      	movs	r2, #1
 800da38:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da3e:	2b07      	cmp	r3, #7
 800da40:	d118      	bne.n	800da74 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2284      	movs	r2, #132	; 0x84
 800da46:	2107      	movs	r1, #7
 800da48:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800da4a:	4b11      	ldr	r3, [pc, #68]	; (800da90 <_tx_event_flags_cleanup+0x100>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <_tx_event_flags_cleanup+0x100>)
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f383 8810 	msr	PRIMASK, r3
}
 800da5e:	46c0      	nop			; (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	0018      	movs	r0, r3
 800da64:	f002 fc3e 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800da68:	f3ef 8310 	mrs	r3, PRIMASK
 800da6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800da6e:	b672      	cpsid	i
    return(primask_value);
 800da70:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800da72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	f383 8810 	msr	PRIMASK, r3
}
 800da7e:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800da80:	46c0      	nop			; (mov r8, r8)
 800da82:	46bd      	mov	sp, r7
 800da84:	b00c      	add	sp, #48	; 0x30
 800da86:	bd80      	pop	{r7, pc}
 800da88:	0800d991 	.word	0x0800d991
 800da8c:	4456444e 	.word	0x4456444e
 800da90:	20008848 	.word	0x20008848

0800da94 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08c      	sub	sp, #48	; 0x30
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daa2:	2327      	movs	r3, #39	; 0x27
 800daa4:	18fb      	adds	r3, r7, r3
 800daa6:	2200      	movs	r2, #0
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	2324      	movs	r3, #36	; 0x24
 800daac:	623b      	str	r3, [r7, #32]
 800daae:	2300      	movs	r3, #0
 800dab0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dab2:	e009      	b.n	800dac8 <_tx_event_flags_create+0x34>
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	1c5a      	adds	r2, r3, #1
 800dab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800daba:	2227      	movs	r2, #39	; 0x27
 800dabc:	18ba      	adds	r2, r7, r2
 800dabe:	7812      	ldrb	r2, [r2, #0]
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	3301      	adds	r3, #1
 800dac6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daca:	6a3b      	ldr	r3, [r7, #32]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d3f1      	bcc.n	800dab4 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dad6:	f3ef 8310 	mrs	r3, PRIMASK
 800dada:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dadc:	b672      	cpsid	i
    return(primask_value);
 800dade:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800dae0:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a18      	ldr	r2, [pc, #96]	; (800db48 <_tx_event_flags_create+0xb4>)
 800dae6:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800dae8:	4b18      	ldr	r3, [pc, #96]	; (800db4c <_tx_event_flags_create+0xb8>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d109      	bne.n	800db04 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800daf0:	4b17      	ldr	r3, [pc, #92]	; (800db50 <_tx_event_flags_create+0xbc>)
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	61da      	str	r2, [r3, #28]
 800db02:	e011      	b.n	800db28 <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800db04:	4b12      	ldr	r3, [pc, #72]	; (800db50 <_tx_event_flags_create+0xbc>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69ba      	ldr	r2, [r7, #24]
 800db26:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800db28:	4b08      	ldr	r3, [pc, #32]	; (800db4c <_tx_event_flags_create+0xb8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	4b07      	ldr	r3, [pc, #28]	; (800db4c <_tx_event_flags_create+0xb8>)
 800db30:	601a      	str	r2, [r3, #0]
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f383 8810 	msr	PRIMASK, r3
}
 800db3c:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800db3e:	2300      	movs	r3, #0
}
 800db40:	0018      	movs	r0, r3
 800db42:	46bd      	mov	sp, r7
 800db44:	b00c      	add	sp, #48	; 0x30
 800db46:	bd80      	pop	{r7, pc}
 800db48:	4456444e 	.word	0x4456444e
 800db4c:	2000878c 	.word	0x2000878c
 800db50:	20008788 	.word	0x20008788

0800db54 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08e      	sub	sp, #56	; 0x38
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800db5c:	f3ef 8310 	mrs	r3, PRIMASK
 800db60:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800db62:	b672      	cpsid	i
    return(primask_value);
 800db64:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 800db6e:	4b3c      	ldr	r3, [pc, #240]	; (800dc60 <_tx_event_flags_delete+0x10c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	1e5a      	subs	r2, r3, #1
 800db74:	4b3a      	ldr	r3, [pc, #232]	; (800dc60 <_tx_event_flags_delete+0x10c>)
 800db76:	601a      	str	r2, [r3, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800db78:	4b39      	ldr	r3, [pc, #228]	; (800dc60 <_tx_event_flags_delete+0x10c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 800db80:	4b38      	ldr	r3, [pc, #224]	; (800dc64 <_tx_event_flags_delete+0x110>)
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
 800db86:	e013      	b.n	800dbb0 <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	627b      	str	r3, [r7, #36]	; 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db98:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db9e:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 800dba0:	4b30      	ldr	r3, [pc, #192]	; (800dc64 <_tx_event_flags_delete+0x110>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d102      	bne.n	800dbb0 <_tx_event_flags_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 800dbaa:	4b2e      	ldr	r3, [pc, #184]	; (800dc64 <_tx_event_flags_delete+0x110>)
 800dbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbae:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800dbb0:	4b2d      	ldr	r3, [pc, #180]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	4b2c      	ldr	r3, [pc, #176]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dbb8:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	637b      	str	r3, [r7, #52]	; 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	695b      	ldr	r3, [r3, #20]
 800dbca:	633b      	str	r3, [r7, #48]	; 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	615a      	str	r2, [r3, #20]
 800dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	f383 8810 	msr	PRIMASK, r3
}
 800dbdc:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800dbde:	e023      	b.n	800dc28 <_tx_event_flags_delete+0xd4>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dbe6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbea:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dbec:	b672      	cpsid	i
    return(primask_value);
 800dbee:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800dbf0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800dbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800dbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfa:	2284      	movs	r2, #132	; 0x84
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800dc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc04:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800dc06:	4b18      	ldr	r3, [pc, #96]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	4b16      	ldr	r3, [pc, #88]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f383 8810 	msr	PRIMASK, r3
}
 800dc1a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800dc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1e:	0018      	movs	r0, r3
 800dc20:	f002 fb60 	bl	80102e4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1d8      	bne.n	800dbe0 <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dc2e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc32:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dc34:	b672      	cpsid	i
    return(primask_value);
 800dc36:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800dc38:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800dc3a:	4b0b      	ldr	r3, [pc, #44]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	1e5a      	subs	r2, r3, #1
 800dc40:	4b09      	ldr	r3, [pc, #36]	; (800dc68 <_tx_event_flags_delete+0x114>)
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f383 8810 	msr	PRIMASK, r3
}
 800dc4e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800dc50:	f002 fb10 	bl	8010274 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	0018      	movs	r0, r3
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	b00e      	add	sp, #56	; 0x38
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	2000878c 	.word	0x2000878c
 800dc64:	20008788 	.word	0x20008788
 800dc68:	20008848 	.word	0x20008848

0800dc6c <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b094      	sub	sp, #80	; 0x50
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]
 800dc78:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dc7a:	f3ef 8310 	mrs	r3, PRIMASK
 800dc7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dc80:	b672      	cpsid	i
    return(primask_value);
 800dc82:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800dc84:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2202      	movs	r2, #2
 800dc90:	4013      	ands	r3, r2
 800dc92:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800dc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800dca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca2:	43da      	mvns	r2, r3
 800dca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dca6:	4013      	ands	r3, r2
 800dca8:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d10a      	bne.n	800dcc6 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800dcb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800dcb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d006      	beq.n	800dcce <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	643b      	str	r3, [r7, #64]	; 0x40
 800dcc4:	e003      	b.n	800dcce <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800dcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	4013      	ands	r3, r2
 800dccc:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800dcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d029      	beq.n	800dd28 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcd8:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	4013      	ands	r3, r2
 800dce0:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d11c      	bne.n	800dd22 <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	695b      	ldr	r3, [r3, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d101      	bne.n	800dd00 <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800dd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d106      	bne.n	800dd14 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6a1a      	ldr	r2, [r3, #32]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	621a      	str	r2, [r3, #32]
 800dd12:	e006      	b.n	800dd22 <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	43d2      	mvns	r2, r2
 800dd1c:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800dd22:	2300      	movs	r3, #0
 800dd24:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd26:	e06f      	b.n	800de08 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800dd28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d06a      	beq.n	800de04 <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800dd2e:	4b3c      	ldr	r3, [pc, #240]	; (800de20 <_tx_event_flags_get+0x1b4>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800dd36:	2307      	movs	r3, #7
 800dd38:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd3a:	e065      	b.n	800de08 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800dd3c:	4b39      	ldr	r3, [pc, #228]	; (800de24 <_tx_event_flags_get+0x1b8>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	4a38      	ldr	r2, [pc, #224]	; (800de28 <_tx_event_flags_get+0x1bc>)
 800dd46:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	2180      	movs	r1, #128	; 0x80
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800dd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	22ac      	movs	r2, #172	; 0xac
 800dd66:	589b      	ldr	r3, [r3, r2]
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	21ac      	movs	r1, #172	; 0xac
 800dd6e:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800dd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d109      	bne.n	800dd90 <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd80:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd86:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd8c:	675a      	str	r2, [r3, #116]	; 0x74
 800dd8e:	e011      	b.n	800ddb4 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd9a:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800dda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddac:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb2:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	2207      	movs	r2, #7
 800ddc2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddce:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ddd0:	4b13      	ldr	r3, [pc, #76]	; (800de20 <_tx_event_flags_get+0x1b4>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	4b12      	ldr	r3, [pc, #72]	; (800de20 <_tx_event_flags_get+0x1b4>)
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dddc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	f383 8810 	msr	PRIMASK, r3
}
 800dde4:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	0018      	movs	r0, r3
 800ddea:	f002 fb7b 	bl	80104e4 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ddee:	f3ef 8310 	mrs	r3, PRIMASK
 800ddf2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ddf4:	b672      	cpsid	i
    return(primask_value);
 800ddf6:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800ddf8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	2284      	movs	r2, #132	; 0x84
 800ddfe:	589b      	ldr	r3, [r3, r2]
 800de00:	64bb      	str	r3, [r7, #72]	; 0x48
 800de02:	e001      	b.n	800de08 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800de04:	2307      	movs	r3, #7
 800de06:	64bb      	str	r3, [r7, #72]	; 0x48
 800de08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f383 8810 	msr	PRIMASK, r3
}
 800de12:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800de14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800de16:	0018      	movs	r0, r3
 800de18:	46bd      	mov	sp, r7
 800de1a:	b014      	add	sp, #80	; 0x50
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	20008848 	.word	0x20008848
 800de24:	200087b0 	.word	0x200087b0
 800de28:	0800d991 	.word	0x0800d991

0800de2c <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b0a3      	sub	sp, #140	; 0x8c
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800de38:	f3ef 8310 	mrs	r3, PRIMASK
 800de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800de3e:	b672      	cpsid	i
    return(primask_value);
 800de40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800de42:	2284      	movs	r2, #132	; 0x84
 800de44:	18ba      	adds	r2, r7, r2
 800de46:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2202      	movs	r2, #2
 800de4c:	4013      	ands	r3, r2
 800de4e:	d024      	beq.n	800de9a <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800de50:	2300      	movs	r3, #0
 800de52:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d101      	bne.n	800de68 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800de68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d107      	bne.n	800de7e <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	6a1a      	ldr	r2, [r3, #32]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	43db      	mvns	r3, r3
 800de76:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	621a      	str	r2, [r3, #32]
 800de7c:	e005      	b.n	800de8a <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	68ba      	ldr	r2, [r7, #8]
 800de84:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	609a      	str	r2, [r3, #8]
 800de8a:	2384      	movs	r3, #132	; 0x84
 800de8c:	18fb      	adds	r3, r7, r3
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800de92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de94:	f383 8810 	msr	PRIMASK, r3
}
 800de98:	e1ce      	b.n	800e238 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	689a      	ldr	r2, [r3, #8]
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d006      	beq.n	800debc <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	43d2      	mvns	r2, r2
 800deb6:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800debc:	2300      	movs	r3, #0
 800debe:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	695b      	ldr	r3, [r3, #20]
 800dec4:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d100      	bne.n	800ded0 <_tx_event_flags_set+0xa4>
 800dece:	e19f      	b.n	800e210 <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800ded0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d16c      	bne.n	800dfb0 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2280      	movs	r2, #128	; 0x80
 800dedc:	18b9      	adds	r1, r7, r2
 800dede:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800dee6:	18bb      	adds	r3, r7, r2
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deec:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800deee:	18bb      	adds	r3, r7, r2
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2280      	movs	r2, #128	; 0x80
 800def4:	589b      	ldr	r3, [r3, r2]
 800def6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800def8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800defa:	2202      	movs	r2, #2
 800defc:	4013      	ands	r3, r2
 800defe:	653b      	str	r3, [r7, #80]	; 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800df00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df02:	2b02      	cmp	r3, #2
 800df04:	d10a      	bne.n	800df1c <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800df06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df0a:	4013      	ands	r3, r2
 800df0c:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800df0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df12:	429a      	cmp	r2, r3
 800df14:	d006      	beq.n	800df24 <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800df16:	2300      	movs	r3, #0
 800df18:	66bb      	str	r3, [r7, #104]	; 0x68
 800df1a:	e003      	b.n	800df24 <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800df1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df20:	4013      	ands	r3, r2
 800df22:	66bb      	str	r3, [r7, #104]	; 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800df24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df26:	2b00      	cmp	r3, #0
 800df28:	d100      	bne.n	800df2c <_tx_event_flags_set+0x100>
 800df2a:	e178      	b.n	800e21e <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800df30:	2380      	movs	r3, #128	; 0x80
 800df32:	18fb      	adds	r3, r7, r3
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df38:	64fb      	str	r3, [r7, #76]	; 0x4c
                    *suspend_info_ptr =  current_event_flags;
 800df3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df3e:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800df40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df42:	2201      	movs	r2, #1
 800df44:	4013      	ands	r3, r2
 800df46:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800df48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d106      	bne.n	800df5c <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df54:	43d2      	mvns	r2, r2
 800df56:	401a      	ands	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800df68:	2080      	movs	r0, #128	; 0x80
 800df6a:	183b      	adds	r3, r7, r0
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2200      	movs	r2, #0
 800df70:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800df72:	183b      	adds	r3, r7, r0
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2284      	movs	r2, #132	; 0x84
 800df78:	2100      	movs	r1, #0
 800df7a:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800df7c:	4bb1      	ldr	r3, [pc, #708]	; (800e244 <_tx_event_flags_set+0x418>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	4bb0      	ldr	r3, [pc, #704]	; (800e244 <_tx_event_flags_set+0x418>)
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	2484      	movs	r4, #132	; 0x84
 800df88:	193b      	adds	r3, r7, r4
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	f383 8810 	msr	PRIMASK, r3
}
 800df94:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800df96:	183b      	adds	r3, r7, r0
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	0018      	movs	r0, r3
 800df9c:	f002 f9a2 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dfa0:	f3ef 8310 	mrs	r3, PRIMASK
 800dfa4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dfa6:	b672      	cpsid	i
    return(primask_value);
 800dfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800dfaa:	193a      	adds	r2, r7, r4
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	e136      	b.n	800e21e <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 800dfb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfb8:	2280      	movs	r2, #128	; 0x80
 800dfba:	18ba      	adds	r2, r7, r2
 800dfbc:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800dfd2:	4b9c      	ldr	r3, [pc, #624]	; (800e244 <_tx_event_flags_set+0x418>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	1c5a      	adds	r2, r3, #1
 800dfd8:	4b9a      	ldr	r3, [pc, #616]	; (800e244 <_tx_event_flags_set+0x418>)
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	2284      	movs	r2, #132	; 0x84
 800dfde:	18bb      	adds	r3, r7, r2
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	f383 8810 	msr	PRIMASK, r3
}
 800dfea:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dfec:	f3ef 8310 	mrs	r3, PRIMASK
 800dff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dff2:	b672      	cpsid	i
    return(primask_value);
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800dff6:	18ba      	adds	r2, r7, r2
 800dff8:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00e      	beq.n	800e020 <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800e008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e00a:	2280      	movs	r2, #128	; 0x80
 800e00c:	18ba      	adds	r2, r7, r2
 800e00e:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e01c:	4313      	orrs	r3, r2
 800e01e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800e020:	2280      	movs	r2, #128	; 0x80
 800e022:	18bb      	adds	r3, r7, r2
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e028:	65fb      	str	r3, [r7, #92]	; 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800e02a:	18bb      	adds	r3, r7, r2
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e030:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800e032:	18bb      	adds	r3, r7, r2
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2280      	movs	r2, #128	; 0x80
 800e038:	589b      	ldr	r3, [r3, r2]
 800e03a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800e03c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e03e:	2202      	movs	r2, #2
 800e040:	4013      	ands	r3, r2
 800e042:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800e044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e046:	2b02      	cmp	r3, #2
 800e048:	d10a      	bne.n	800e060 <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800e04a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e04c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e04e:	4013      	ands	r3, r2
 800e050:	66bb      	str	r3, [r7, #104]	; 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800e052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e056:	429a      	cmp	r2, r3
 800e058:	d006      	beq.n	800e068 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800e05a:	2300      	movs	r3, #0
 800e05c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e05e:	e003      	b.n	800e068 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800e060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e064:	4013      	ands	r3, r2
 800e066:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800e068:	2380      	movs	r3, #128	; 0x80
 800e06a:	18fb      	adds	r3, r7, r3
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e070:	2b07      	cmp	r3, #7
 800e072:	d001      	beq.n	800e078 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800e074:	2301      	movs	r3, #1
 800e076:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800e078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d069      	beq.n	800e152 <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800e07e:	2301      	movs	r3, #1
 800e080:	667b      	str	r3, [r7, #100]	; 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800e082:	2280      	movs	r2, #128	; 0x80
 800e084:	18bb      	adds	r3, r7, r2
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08a:	2b07      	cmp	r3, #7
 800e08c:	d11e      	bne.n	800e0cc <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800e08e:	18bb      	adds	r3, r7, r2
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e094:	64fb      	str	r3, [r7, #76]	; 0x4c
                            *suspend_info_ptr =  current_event_flags;
 800e096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e09a:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800e09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e09e:	2201      	movs	r2, #1
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	64bb      	str	r3, [r7, #72]	; 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800e0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d106      	bne.n	800e0b8 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0b0:	43d2      	mvns	r2, r2
 800e0b2:	401a      	ands	r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e0b8:	2180      	movs	r1, #128	; 0x80
 800e0ba:	187b      	adds	r3, r7, r1
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e0c2:	187b      	adds	r3, r7, r1
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2284      	movs	r2, #132	; 0x84
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800e0cc:	2280      	movs	r2, #128	; 0x80
 800e0ce:	18bb      	adds	r3, r7, r2
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d4:	18ba      	adds	r2, r7, r2
 800e0d6:	6812      	ldr	r2, [r2, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d102      	bne.n	800e0e2 <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	677b      	str	r3, [r7, #116]	; 0x74
 800e0e0:	e017      	b.n	800e112 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800e0e2:	2180      	movs	r1, #128	; 0x80
 800e0e4:	187b      	adds	r3, r7, r1
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ea:	647b      	str	r3, [r7, #68]	; 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800e0ec:	187b      	adds	r3, r7, r1
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f2:	643b      	str	r3, [r7, #64]	; 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800e0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0f8:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800e0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0fe:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800e100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e102:	187b      	adds	r3, r7, r1
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	429a      	cmp	r2, r3
 800e108:	d103      	bne.n	800e112 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800e10a:	187b      	adds	r3, r7, r1
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e110:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	695b      	ldr	r3, [r3, #20]
 800e116:	1e5a      	subs	r2, r3, #1
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800e11c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10b      	bne.n	800e13a <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800e122:	2280      	movs	r2, #128	; 0x80
 800e124:	18bb      	adds	r3, r7, r2
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 800e12a:	18bb      	adds	r3, r7, r2
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	67bb      	str	r3, [r7, #120]	; 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800e130:	18bb      	adds	r3, r7, r2
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2200      	movs	r2, #0
 800e136:	671a      	str	r2, [r3, #112]	; 0x70
 800e138:	e00b      	b.n	800e152 <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800e13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e13c:	2180      	movs	r1, #128	; 0x80
 800e13e:	187a      	adds	r2, r7, r1
 800e140:	6812      	ldr	r2, [r2, #0]
 800e142:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800e144:	187b      	adds	r3, r7, r1
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2200      	movs	r2, #0
 800e14a:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800e14c:	187b      	adds	r3, r7, r1
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800e152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e154:	2280      	movs	r2, #128	; 0x80
 800e156:	18ba      	adds	r2, r7, r2
 800e158:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800e15a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e15c:	3b01      	subs	r3, #1
 800e15e:	673b      	str	r3, [r7, #112]	; 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800e160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e162:	2b00      	cmp	r3, #0
 800e164:	d000      	beq.n	800e168 <_tx_event_flags_set+0x33c>
 800e166:	e739      	b.n	800dfdc <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e16c:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6a1b      	ldr	r3, [r3, #32]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00a      	beq.n	800e18c <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	689a      	ldr	r2, [r3, #8]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6a1b      	ldr	r3, [r3, #32]
 800e17e:	43db      	mvns	r3, r3
 800e180:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2200      	movs	r2, #0
 800e18a:	621a      	str	r2, [r3, #32]
 800e18c:	2384      	movs	r3, #132	; 0x84
 800e18e:	18fb      	adds	r3, r7, r3
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	f383 8810 	msr	PRIMASK, r3
}
 800e19a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800e19c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e19e:	2280      	movs	r2, #128	; 0x80
 800e1a0:	18ba      	adds	r2, r7, r2
 800e1a2:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800e1a4:	e021      	b.n	800e1ea <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800e1a6:	2180      	movs	r1, #128	; 0x80
 800e1a8:	187b      	adds	r3, r7, r1
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e1b4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e1b6:	b672      	cpsid	i
    return(primask_value);
 800e1b8:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800e1ba:	2084      	movs	r0, #132	; 0x84
 800e1bc:	183a      	adds	r2, r7, r0
 800e1be:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800e1c0:	4b20      	ldr	r3, [pc, #128]	; (800e244 <_tx_event_flags_set+0x418>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	4b1f      	ldr	r3, [pc, #124]	; (800e244 <_tx_event_flags_set+0x418>)
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	183b      	adds	r3, r7, r0
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	f383 8810 	msr	PRIMASK, r3
}
 800e1d6:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800e1d8:	000c      	movs	r4, r1
 800e1da:	187b      	adds	r3, r7, r1
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f002 f880 	bl	80102e4 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800e1e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e6:	193a      	adds	r2, r7, r4
 800e1e8:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 800e1ea:	2380      	movs	r3, #128	; 0x80
 800e1ec:	18fb      	adds	r3, r7, r3
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1d8      	bne.n	800e1a6 <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e1fa:	b672      	cpsid	i
    return(primask_value);
 800e1fc:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800e1fe:	2284      	movs	r2, #132	; 0x84
 800e200:	18ba      	adds	r2, r7, r2
 800e202:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800e204:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <_tx_event_flags_set+0x418>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	1e5a      	subs	r2, r3, #1
 800e20a:	4b0e      	ldr	r3, [pc, #56]	; (800e244 <_tx_event_flags_set+0x418>)
 800e20c:	601a      	str	r2, [r3, #0]
 800e20e:	e006      	b.n	800e21e <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	695b      	ldr	r3, [r3, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2201      	movs	r2, #1
 800e21c:	60da      	str	r2, [r3, #12]
 800e21e:	2384      	movs	r3, #132	; 0x84
 800e220:	18fb      	adds	r3, r7, r3
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f383 8810 	msr	PRIMASK, r3
}
 800e22c:	46c0      	nop			; (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800e22e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e230:	2b01      	cmp	r3, #1
 800e232:	d101      	bne.n	800e238 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800e234:	f002 f81e 	bl	8010274 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800e238:	2300      	movs	r3, #0
}
 800e23a:	0018      	movs	r0, r3
 800e23c:	46bd      	mov	sp, r7
 800e23e:	b023      	add	sp, #140	; 0x8c
 800e240:	bd90      	pop	{r4, r7, pc}
 800e242:	46c0      	nop			; (mov r8, r8)
 800e244:	20008848 	.word	0x20008848

0800e248 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800e24c:	f001 fe20 	bl	800fe90 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800e250:	f002 fc26 	bl	8010aa0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800e254:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <_tx_initialize_high_level+0x5c>)
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	4b13      	ldr	r3, [pc, #76]	; (800e2a8 <_tx_initialize_high_level+0x60>)
 800e25c:	2200      	movs	r2, #0
 800e25e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800e260:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <_tx_initialize_high_level+0x64>)
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	4b12      	ldr	r3, [pc, #72]	; (800e2b0 <_tx_initialize_high_level+0x68>)
 800e268:	2200      	movs	r2, #0
 800e26a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800e26c:	4b11      	ldr	r3, [pc, #68]	; (800e2b4 <_tx_initialize_high_level+0x6c>)
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	4b11      	ldr	r3, [pc, #68]	; (800e2b8 <_tx_initialize_high_level+0x70>)
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800e278:	4b10      	ldr	r3, [pc, #64]	; (800e2bc <_tx_initialize_high_level+0x74>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	4b10      	ldr	r3, [pc, #64]	; (800e2c0 <_tx_initialize_high_level+0x78>)
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800e284:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <_tx_initialize_high_level+0x7c>)
 800e286:	2200      	movs	r2, #0
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	4b0f      	ldr	r3, [pc, #60]	; (800e2c8 <_tx_initialize_high_level+0x80>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800e290:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <_tx_initialize_high_level+0x84>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	4b0e      	ldr	r3, [pc, #56]	; (800e2d0 <_tx_initialize_high_level+0x88>)
 800e298:	2200      	movs	r2, #0
 800e29a:	601a      	str	r2, [r3, #0]
#endif
}
 800e29c:	46c0      	nop			; (mov r8, r8)
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	46c0      	nop			; (mov r8, r8)
 800e2a4:	20008778 	.word	0x20008778
 800e2a8:	2000877c 	.word	0x2000877c
 800e2ac:	20008780 	.word	0x20008780
 800e2b0:	20008784 	.word	0x20008784
 800e2b4:	20008788 	.word	0x20008788
 800e2b8:	2000878c 	.word	0x2000878c
 800e2bc:	20008798 	.word	0x20008798
 800e2c0:	2000879c 	.word	0x2000879c
 800e2c4:	200087a0 	.word	0x200087a0
 800e2c8:	200087a4 	.word	0x200087a4
 800e2cc:	20008790 	.word	0x20008790
 800e2d0:	20008794 	.word	0x20008794

0800e2d4 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800e2d8:	4b10      	ldr	r3, [pc, #64]	; (800e31c <_tx_initialize_kernel_enter+0x48>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a10      	ldr	r2, [pc, #64]	; (800e320 <_tx_initialize_kernel_enter+0x4c>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d00b      	beq.n	800e2fa <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800e2e2:	4b0e      	ldr	r3, [pc, #56]	; (800e31c <_tx_initialize_kernel_enter+0x48>)
 800e2e4:	4a0f      	ldr	r2, [pc, #60]	; (800e324 <_tx_initialize_kernel_enter+0x50>)
 800e2e6:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800e2e8:	f7f1 ff12 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800e2ec:	f7ff ffac 	bl	800e248 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800e2f0:	4b0d      	ldr	r3, [pc, #52]	; (800e328 <_tx_initialize_kernel_enter+0x54>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	4b0c      	ldr	r3, [pc, #48]	; (800e328 <_tx_initialize_kernel_enter+0x54>)
 800e2f8:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800e2fa:	4b08      	ldr	r3, [pc, #32]	; (800e31c <_tx_initialize_kernel_enter+0x48>)
 800e2fc:	4a09      	ldr	r2, [pc, #36]	; (800e324 <_tx_initialize_kernel_enter+0x50>)
 800e2fe:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800e300:	4b0a      	ldr	r3, [pc, #40]	; (800e32c <_tx_initialize_kernel_enter+0x58>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	0018      	movs	r0, r3
 800e306:	f7f4 fdbf 	bl	8002e88 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800e30a:	4b04      	ldr	r3, [pc, #16]	; (800e31c <_tx_initialize_kernel_enter+0x48>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800e310:	f7f1 ff46 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800e314:	46c0      	nop			; (mov r8, r8)
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	20000010 	.word	0x20000010
 800e320:	f0f0f0f1 	.word	0xf0f0f0f1
 800e324:	f0f0f0f0 	.word	0xf0f0f0f0
 800e328:	20008848 	.word	0x20008848
 800e32c:	200087a8 	.word	0x200087a8

0800e330 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08c      	sub	sp, #48	; 0x30
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e33a:	f3ef 8310 	mrs	r3, PRIMASK
 800e33e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e340:	b672      	cpsid	i
    return(primask_value);
 800e342:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800e344:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e34a:	4b32      	ldr	r3, [pc, #200]	; (800e414 <_tx_mutex_cleanup+0xe4>)
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d157      	bne.n	800e400 <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	22ac      	movs	r2, #172	; 0xac
 800e354:	589b      	ldr	r3, [r3, r2]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d151      	bne.n	800e400 <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e360:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	2b00      	cmp	r3, #0
 800e366:	d04b      	beq.n	800e400 <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a2a      	ldr	r2, [pc, #168]	; (800e418 <_tx_mutex_cleanup+0xe8>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d146      	bne.n	800e400 <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d042      	beq.n	800e400 <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	1e5a      	subs	r2, r3, #1
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	d103      	bne.n	800e39e <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	2200      	movs	r2, #0
 800e39a:	619a      	str	r2, [r3, #24]
 800e39c:	e013      	b.n	800e3c6 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3a2:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a8:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	69fa      	ldr	r2, [r7, #28]
 800e3ae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	6a3a      	ldr	r2, [r7, #32]
 800e3b4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d102      	bne.n	800e3c6 <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	6a3a      	ldr	r2, [r7, #32]
 800e3c4:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ca:	2b0d      	cmp	r3, #13
 800e3cc:	d118      	bne.n	800e400 <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2284      	movs	r2, #132	; 0x84
 800e3d2:	211d      	movs	r1, #29
 800e3d4:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e3d6:	4b11      	ldr	r3, [pc, #68]	; (800e41c <_tx_mutex_cleanup+0xec>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <_tx_mutex_cleanup+0xec>)
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	f383 8810 	msr	PRIMASK, r3
}
 800e3ea:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	0018      	movs	r0, r3
 800e3f0:	f001 ff78 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e3f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e3fa:	b672      	cpsid	i
    return(primask_value);
 800e3fc:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f383 8810 	msr	PRIMASK, r3
}
 800e40a:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e40c:	46c0      	nop			; (mov r8, r8)
 800e40e:	46bd      	mov	sp, r7
 800e410:	b00c      	add	sp, #48	; 0x30
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0800e331 	.word	0x0800e331
 800e418:	4d555445 	.word	0x4d555445
 800e41c:	20008848 	.word	0x20008848

0800e420 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e428:	f3ef 8310 	mrs	r3, PRIMASK
 800e42c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e42e:	b672      	cpsid	i
    return(primask_value);
 800e430:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800e432:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800e434:	4b1a      	ldr	r3, [pc, #104]	; (800e4a0 <_tx_mutex_thread_release+0x80>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	4b19      	ldr	r3, [pc, #100]	; (800e4a0 <_tx_mutex_thread_release+0x80>)
 800e43c:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	22a4      	movs	r2, #164	; 0xa4
 800e442:	589b      	ldr	r3, [r3, r2]
 800e444:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d016      	beq.n	800e47a <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	2201      	movs	r2, #1
 800e450:	609a      	str	r2, [r3, #8]
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f383 8810 	msr	PRIMASK, r3
}
 800e45c:	46c0      	nop			; (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	0018      	movs	r0, r3
 800e462:	f000 fafb 	bl	800ea5c <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e466:	f3ef 8310 	mrs	r3, PRIMASK
 800e46a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e46c:	b672      	cpsid	i
    return(primask_value);
 800e46e:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800e470:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	22a4      	movs	r2, #164	; 0xa4
 800e476:	589b      	ldr	r3, [r3, r2]
 800e478:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1de      	bne.n	800e43e <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <_tx_mutex_thread_release+0x80>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	1e5a      	subs	r2, r3, #1
 800e486:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <_tx_mutex_thread_release+0x80>)
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	f383 8810 	msr	PRIMASK, r3
}
 800e494:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	46bd      	mov	sp, r7
 800e49a:	b008      	add	sp, #32
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	46c0      	nop			; (mov r8, r8)
 800e4a0:	20008848 	.word	0x20008848

0800e4a4 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08e      	sub	sp, #56	; 0x38
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e4b4:	232f      	movs	r3, #47	; 0x2f
 800e4b6:	18fb      	adds	r3, r7, r3
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	2334      	movs	r3, #52	; 0x34
 800e4be:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c4:	e009      	b.n	800e4da <_tx_mutex_create+0x36>
 800e4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	637a      	str	r2, [r7, #52]	; 0x34
 800e4cc:	222f      	movs	r2, #47	; 0x2f
 800e4ce:	18ba      	adds	r2, r7, r2
 800e4d0:	7812      	ldrb	r2, [r2, #0]
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d3f1      	bcc.n	800e4c6 <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e4ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e4f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e4f4:	b672      	cpsid	i
    return(primask_value);
 800e4f6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800e4f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	4a1a      	ldr	r2, [pc, #104]	; (800e568 <_tx_mutex_create+0xc4>)
 800e4fe:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800e500:	4b1a      	ldr	r3, [pc, #104]	; (800e56c <_tx_mutex_create+0xc8>)
 800e502:	4a1b      	ldr	r2, [pc, #108]	; (800e570 <_tx_mutex_create+0xcc>)
 800e504:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800e506:	4b1b      	ldr	r3, [pc, #108]	; (800e574 <_tx_mutex_create+0xd0>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d109      	bne.n	800e522 <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800e50e:	4b1a      	ldr	r3, [pc, #104]	; (800e578 <_tx_mutex_create+0xd4>)
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	625a      	str	r2, [r3, #36]	; 0x24
 800e520:	e011      	b.n	800e546 <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800e522:	4b15      	ldr	r3, [pc, #84]	; (800e578 <_tx_mutex_create+0xd4>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800e528:	6a3b      	ldr	r3, [r7, #32]
 800e52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	69fa      	ldr	r2, [r7, #28]
 800e53e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6a3a      	ldr	r2, [r7, #32]
 800e544:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <_tx_mutex_create+0xd0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	4b09      	ldr	r3, [pc, #36]	; (800e574 <_tx_mutex_create+0xd0>)
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	f383 8810 	msr	PRIMASK, r3
}
 800e55a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	0018      	movs	r0, r3
 800e560:	46bd      	mov	sp, r7
 800e562:	b00e      	add	sp, #56	; 0x38
 800e564:	bd80      	pop	{r7, pc}
 800e566:	46c0      	nop			; (mov r8, r8)
 800e568:	4d555445 	.word	0x4d555445
 800e56c:	2000884c 	.word	0x2000884c
 800e570:	0800e421 	.word	0x0800e421
 800e574:	20008794 	.word	0x20008794
 800e578:	20008790 	.word	0x20008790

0800e57c <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b090      	sub	sp, #64	; 0x40
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e586:	f3ef 8310 	mrs	r3, PRIMASK
 800e58a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e58c:	b672      	cpsid	i
    return(primask_value);
 800e58e:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800e590:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e592:	4b7b      	ldr	r3, [pc, #492]	; (800e780 <_tx_mutex_get+0x204>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d144      	bne.n	800e62a <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5aa:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800e5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d032      	beq.n	800e618 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d106      	bne.n	800e5c8 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2220      	movs	r2, #32
 800e5c6:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	22a4      	movs	r2, #164	; 0xa4
 800e5cc:	589b      	ldr	r3, [r3, r2]
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00f      	beq.n	800e5f6 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5da:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a3a      	ldr	r2, [r7, #32]
 800e5ec:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f2:	62da      	str	r2, [r3, #44]	; 0x2c
 800e5f4:	e009      	b.n	800e60a <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f8:	21a4      	movs	r1, #164	; 0xa4
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800e60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60c:	22a0      	movs	r2, #160	; 0xa0
 800e60e:	589b      	ldr	r3, [r3, r2]
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	21a0      	movs	r1, #160	; 0xa0
 800e616:	505a      	str	r2, [r3, r1]
 800e618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	f383 8810 	msr	PRIMASK, r3
}
 800e622:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800e624:	2300      	movs	r3, #0
 800e626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e628:	e0a4      	b.n	800e774 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e630:	429a      	cmp	r2, r3
 800e632:	d10d      	bne.n	800e650 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	609a      	str	r2, [r3, #8]
 800e63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e640:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f383 8810 	msr	PRIMASK, r3
}
 800e648:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800e64a:	2300      	movs	r3, #0
 800e64c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e64e:	e091      	b.n	800e774 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d100      	bne.n	800e658 <_tx_mutex_get+0xdc>
 800e656:	e085      	b.n	800e764 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800e658:	4b4a      	ldr	r3, [pc, #296]	; (800e784 <_tx_mutex_get+0x208>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d008      	beq.n	800e672 <_tx_mutex_get+0xf6>
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f383 8810 	msr	PRIMASK, r3
}
 800e66a:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800e66c:	231d      	movs	r3, #29
 800e66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e670:	e080      	b.n	800e774 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800e678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e67a:	4a43      	ldr	r2, [pc, #268]	; (800e788 <_tx_mutex_get+0x20c>)
 800e67c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800e67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800e684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e686:	22ac      	movs	r2, #172	; 0xac
 800e688:	589b      	ldr	r3, [r3, r2]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68e:	21ac      	movs	r1, #172	; 0xac
 800e690:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	69db      	ldr	r3, [r3, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d109      	bne.n	800e6ae <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e69e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6a4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6aa:	675a      	str	r2, [r3, #116]	; 0x74
 800e6ac:	e011      	b.n	800e6d2 <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6be:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6c4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6ca:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6d0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	69db      	ldr	r3, [r3, #28]
 800e6d6:	1c5a      	adds	r2, r3, #1
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6de:	220d      	movs	r2, #13
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e6ee:	4b25      	ldr	r3, [pc, #148]	; (800e784 <_tx_mutex_get+0x208>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	1c5a      	adds	r2, r3, #1
 800e6f4:	4b23      	ldr	r3, [pc, #140]	; (800e784 <_tx_mutex_get+0x208>)
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f383 8810 	msr	PRIMASK, r3
}
 800e702:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d122      	bne.n	800e752 <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	429a      	cmp	r2, r3
 800e716:	d903      	bls.n	800e720 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800e718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800e720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e726:	219c      	movs	r1, #156	; 0x9c
 800e728:	585b      	ldr	r3, [r3, r1]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d204      	bcs.n	800e738 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800e72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e734:	219c      	movs	r1, #156	; 0x9c
 800e736:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e740:	429a      	cmp	r2, r3
 800e742:	d906      	bls.n	800e752 <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74a:	0011      	movs	r1, r2
 800e74c:	0018      	movs	r0, r3
 800e74e:	f000 f8cb 	bl	800e8e8 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e754:	0018      	movs	r0, r3
 800e756:	f001 fec5 	bl	80104e4 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800e75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75c:	2284      	movs	r2, #132	; 0x84
 800e75e:	589b      	ldr	r3, [r3, r2]
 800e760:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e762:	e007      	b.n	800e774 <_tx_mutex_get+0x1f8>
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	f383 8810 	msr	PRIMASK, r3
}
 800e76e:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800e770:	231d      	movs	r3, #29
 800e772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 800e774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e776:	0018      	movs	r0, r3
 800e778:	46bd      	mov	sp, r7
 800e77a:	b010      	add	sp, #64	; 0x40
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	200087b0 	.word	0x200087b0
 800e784:	20008848 	.word	0x20008848
 800e788:	0800e331 	.word	0x0800e331

0800e78c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b090      	sub	sp, #64	; 0x40
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e794:	f3ef 8310 	mrs	r3, PRIMASK
 800e798:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e79a:	b672      	cpsid	i
    return(primask_value);
 800e79c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800e79e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	69db      	ldr	r3, [r3, #28]
 800e7a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d805      	bhi.n	800e7b8 <_tx_mutex_prioritize+0x2c>
 800e7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f383 8810 	msr	PRIMASK, r3
}
 800e7b6:	e090      	b.n	800e8da <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d114      	bne.n	800e7e8 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	699b      	ldr	r3, [r3, #24]
 800e7c2:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d202      	bcs.n	800e7dc <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7da:	619a      	str	r2, [r3, #24]
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7de:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f383 8810 	msr	PRIMASK, r3
}
 800e7e6:	e078      	b.n	800e8da <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800e7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7f6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800e7f8:	4b3a      	ldr	r3, [pc, #232]	; (800e8e4 <_tx_mutex_prioritize+0x158>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	1c5a      	adds	r2, r3, #1
 800e7fe:	4b39      	ldr	r3, [pc, #228]	; (800e8e4 <_tx_mutex_prioritize+0x158>)
 800e800:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800e802:	2300      	movs	r3, #0
 800e804:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	429a      	cmp	r2, r3
 800e810:	d201      	bcs.n	800e816 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	637b      	str	r3, [r7, #52]	; 0x34
 800e816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e818:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f383 8810 	msr	PRIMASK, r3
}
 800e820:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e822:	f3ef 8310 	mrs	r3, PRIMASK
 800e826:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e828:	b672      	cpsid	i
    return(primask_value);
 800e82a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e82c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e834:	429a      	cmp	r2, r3
 800e836:	d002      	beq.n	800e83e <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800e838:	2301      	movs	r3, #1
 800e83a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e83c:	e006      	b.n	800e84c <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e844:	429a      	cmp	r2, r3
 800e846:	d001      	beq.n	800e84c <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800e848:	2301      	movs	r3, #1
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d103      	bne.n	800e85a <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e856:	63bb      	str	r3, [r7, #56]	; 0x38
 800e858:	e00c      	b.n	800e874 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	699b      	ldr	r3, [r3, #24]
 800e85e:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	69db      	ldr	r3, [r3, #28]
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800e86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e86e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800e870:	2300      	movs	r3, #0
 800e872:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 800e874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	429a      	cmp	r2, r3
 800e87a:	d1c4      	bne.n	800e806 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800e87c:	4b19      	ldr	r3, [pc, #100]	; (800e8e4 <_tx_mutex_prioritize+0x158>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	1e5a      	subs	r2, r3, #1
 800e882:	4b18      	ldr	r3, [pc, #96]	; (800e8e4 <_tx_mutex_prioritize+0x158>)
 800e884:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800e886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d01d      	beq.n	800e8ca <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800e88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800e894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e898:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	6a3a      	ldr	r2, [r7, #32]
 800e89e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a4:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8aa:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800e8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b0:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800e8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b4:	6a3a      	ldr	r2, [r7, #32]
 800e8b6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
 800e8ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8bc:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8c2:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8c8:	619a      	str	r2, [r3, #24]
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8cc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	f383 8810 	msr	PRIMASK, r3
}
 800e8d4:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e8d6:	f001 fccd 	bl	8010274 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800e8da:	2300      	movs	r3, #0
#endif
}
 800e8dc:	0018      	movs	r0, r3
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	b010      	add	sp, #64	; 0x40
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20008848 	.word	0x20008848

0800e8e8 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08e      	sub	sp, #56	; 0x38
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e8f8:	b672      	cpsid	i
    return(primask_value);
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800e8fc:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	2b00      	cmp	r3, #0
 800e904:	d017      	beq.n	800e936 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	683a      	ldr	r2, [r7, #0]
 800e90a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2298      	movs	r2, #152	; 0x98
 800e910:	589b      	ldr	r3, [r3, r2]
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d905      	bls.n	800e924 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2298      	movs	r2, #152	; 0x98
 800e91c:	589a      	ldr	r2, [r3, r2]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	63da      	str	r2, [r3, #60]	; 0x3c
 800e922:	e002      	b.n	800e92a <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	63da      	str	r2, [r3, #60]	; 0x3c
 800e92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	f383 8810 	msr	PRIMASK, r3
}
 800e934:	e087      	b.n	800ea46 <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800e936:	4b46      	ldr	r3, [pc, #280]	; (800ea50 <_tx_mutex_priority_change+0x168>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e940:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800e942:	4b44      	ldr	r3, [pc, #272]	; (800ea54 <_tx_mutex_priority_change+0x16c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	1c9a      	adds	r2, r3, #2
 800e948:	4b42      	ldr	r3, [pc, #264]	; (800ea54 <_tx_mutex_priority_change+0x16c>)
 800e94a:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	220e      	movs	r2, #14
 800e950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	64da      	str	r2, [r3, #76]	; 0x4c
 800e95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e960:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	f383 8810 	msr	PRIMASK, r3
}
 800e968:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	0018      	movs	r0, r3
 800e96e:	f001 fdb9 	bl	80104e4 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e972:	f3ef 8310 	mrs	r3, PRIMASK
 800e976:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e978:	b672      	cpsid	i
    return(primask_value);
 800e97a:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800e97c:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2298      	movs	r2, #152	; 0x98
 800e988:	589b      	ldr	r3, [r3, r2]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d905      	bls.n	800e99c <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2298      	movs	r2, #152	; 0x98
 800e994:	589a      	ldr	r2, [r3, r2]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	63da      	str	r2, [r3, #60]	; 0x3c
 800e99a:	e002      	b.n	800e9a2 <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	63da      	str	r2, [r3, #60]	; 0x3c
 800e9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	f383 8810 	msr	PRIMASK, r3
}
 800e9ac:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f001 fc97 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e9bc:	b672      	cpsid	i
    return(primask_value);
 800e9be:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800e9c0:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800e9c2:	4b23      	ldr	r3, [pc, #140]	; (800ea50 <_tx_mutex_priority_change+0x168>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d034      	beq.n	800ea3a <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d130      	bne.n	800ea3a <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d811      	bhi.n	800ea08 <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d126      	bne.n	800ea3a <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800e9ec:	4b18      	ldr	r3, [pc, #96]	; (800ea50 <_tx_mutex_priority_change+0x168>)
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800e9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d21f      	bcs.n	800ea3a <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fe:	4b16      	ldr	r3, [pc, #88]	; (800ea58 <_tx_mutex_priority_change+0x170>)
 800ea00:	0092      	lsls	r2, r2, #2
 800ea02:	6879      	ldr	r1, [r7, #4]
 800ea04:	50d1      	str	r1, [r2, r3]
 800ea06:	e018      	b.n	800ea3a <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d212      	bcs.n	800ea3a <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d80c      	bhi.n	800ea3a <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800ea20:	4b0b      	ldr	r3, [pc, #44]	; (800ea50 <_tx_mutex_priority_change+0x168>)
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800ea26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d205      	bcs.n	800ea3a <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea32:	4b09      	ldr	r3, [pc, #36]	; (800ea58 <_tx_mutex_priority_change+0x170>)
 800ea34:	0092      	lsls	r2, r2, #2
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	50d1      	str	r1, [r2, r3]
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f383 8810 	msr	PRIMASK, r3
}
 800ea44:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	b00e      	add	sp, #56	; 0x38
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	46c0      	nop			; (mov r8, r8)
 800ea50:	200087b4 	.word	0x200087b4
 800ea54:	20008848 	.word	0x20008848
 800ea58:	200087c8 	.word	0x200087c8

0800ea5c <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b0a0      	sub	sp, #128	; 0x80
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800ea64:	2320      	movs	r3, #32
 800ea66:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ea68:	f3ef 8310 	mrs	r3, PRIMASK
 800ea6c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ea6e:	b672      	cpsid	i
    return(primask_value);
 800ea70:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800ea72:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d100      	bne.n	800ea7e <_tx_mutex_put+0x22>
 800ea7c:	e1c5      	b.n	800ee0a <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800ea84:	4bb4      	ldr	r3, [pc, #720]	; (800ed58 <_tx_mutex_put+0x2fc>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d00b      	beq.n	800eaac <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800ea94:	4bb1      	ldr	r3, [pc, #708]	; (800ed5c <_tx_mutex_put+0x300>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d107      	bne.n	800eaac <_tx_mutex_put+0x50>
 800ea9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ea9e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eaa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa2:	f383 8810 	msr	PRIMASK, r3
}
 800eaa6:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800eaa8:	231e      	movs	r3, #30
 800eaaa:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800eaac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d000      	beq.n	800eab4 <_tx_mutex_put+0x58>
 800eab2:	e1b2      	b.n	800ee1a <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	1e5a      	subs	r2, r3, #1
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d008      	beq.n	800ead8 <_tx_mutex_put+0x7c>
 800eac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eacc:	f383 8810 	msr	PRIMASK, r3
}
 800ead0:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800ead2:	2300      	movs	r3, #0
 800ead4:	673b      	str	r3, [r7, #112]	; 0x70
 800ead6:	e1a0      	b.n	800ee1a <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800ead8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d108      	bne.n	800eaf0 <_tx_mutex_put+0x94>
 800eade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eae0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae4:	f383 8810 	msr	PRIMASK, r3
}
 800eae8:	46c0      	nop			; (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800eaea:	2300      	movs	r3, #0
 800eaec:	673b      	str	r3, [r7, #112]	; 0x70
 800eaee:	e194      	b.n	800ee1a <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800eaf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaf2:	22a0      	movs	r2, #160	; 0xa0
 800eaf4:	589b      	ldr	r3, [r3, r2]
 800eaf6:	1e5a      	subs	r2, r3, #1
 800eaf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eafa:	21a0      	movs	r1, #160	; 0xa0
 800eafc:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800eafe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb00:	22a0      	movs	r2, #160	; 0xa0
 800eb02:	589b      	ldr	r3, [r3, r2]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d104      	bne.n	800eb12 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800eb08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb0a:	22a4      	movs	r2, #164	; 0xa4
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	5099      	str	r1, [r3, r2]
 800eb10:	e015      	b.n	800eb3e <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb16:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb1c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800eb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800eb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb28:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800eb2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb2c:	22a4      	movs	r2, #164	; 0xa4
 800eb2e:	589b      	ldr	r3, [r3, r2]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d103      	bne.n	800eb3e <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800eb36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb38:	21a4      	movs	r1, #164	; 0xa4
 800eb3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eb3c:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d10e      	bne.n	800eb64 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10a      	bne.n	800eb64 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	60da      	str	r2, [r3, #12]
 800eb54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb56:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5a:	f383 8810 	msr	PRIMASK, r3
}
 800eb5e:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800eb60:	2300      	movs	r3, #0
 800eb62:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800eb64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb66:	2b20      	cmp	r3, #32
 800eb68:	d000      	beq.n	800eb6c <_tx_mutex_put+0x110>
 800eb6a:	e156      	b.n	800ee1a <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800eb70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb72:	2294      	movs	r2, #148	; 0x94
 800eb74:	589b      	ldr	r3, [r3, r2]
 800eb76:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d140      	bne.n	800ec02 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800eb80:	4b76      	ldr	r3, [pc, #472]	; (800ed5c <_tx_mutex_put+0x300>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	4b75      	ldr	r3, [pc, #468]	; (800ed5c <_tx_mutex_put+0x300>)
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb8c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	f383 8810 	msr	PRIMASK, r3
}
 800eb94:	46c0      	nop			; (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800eb96:	2320      	movs	r3, #32
 800eb98:	66bb      	str	r3, [r7, #104]	; 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800eb9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb9c:	22a4      	movs	r2, #164	; 0xa4
 800eb9e:	589b      	ldr	r3, [r3, r2]
 800eba0:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800eba2:	e016      	b.n	800ebd2 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800eba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d107      	bne.n	800ebbc <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800ebac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d902      	bls.n	800ebbc <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800ebb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebba:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800ebbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc0:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800ebc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebc4:	22a4      	movs	r2, #164	; 0xa4
 800ebc6:	589b      	ldr	r3, [r3, r2]
 800ebc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d101      	bne.n	800ebd2 <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 800ebd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1e5      	bne.n	800eba4 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ebd8:	f3ef 8310 	mrs	r3, PRIMASK
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ebde:	b672      	cpsid	i
    return(primask_value);
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ebe2:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800ebe4:	4b5d      	ldr	r3, [pc, #372]	; (800ed5c <_tx_mutex_put+0x300>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	1e5a      	subs	r2, r3, #1
 800ebea:	4b5c      	ldr	r3, [pc, #368]	; (800ed5c <_tx_mutex_put+0x300>)
 800ebec:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800ebee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebf0:	219c      	movs	r1, #156	; 0x9c
 800ebf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebf4:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800ebf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ebf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d201      	bcs.n	800ec02 <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800ebfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec00:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	69db      	ldr	r3, [r3, #28]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d91d      	bls.n	800ec46 <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d119      	bne.n	800ec46 <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800ec12:	4b52      	ldr	r3, [pc, #328]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	4b50      	ldr	r3, [pc, #320]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec1e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec22:	f383 8810 	msr	PRIMASK, r3
}
 800ec26:	46c0      	nop			; (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f7ff fdae 	bl	800e78c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ec30:	f3ef 8310 	mrs	r3, PRIMASK
 800ec34:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ec36:	b672      	cpsid	i
    return(primask_value);
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800ec3a:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800ec3c:	4b47      	ldr	r3, [pc, #284]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	1e5a      	subs	r2, r3, #1
 800ec42:	4b46      	ldr	r3, [pc, #280]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec44:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	699b      	ldr	r3, [r3, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d133      	bne.n	800ecb6 <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ec4e:	4b43      	ldr	r3, [pc, #268]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	4b41      	ldr	r3, [pc, #260]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	f383 8810 	msr	PRIMASK, r3
}
 800ec62:	46c0      	nop			; (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2220      	movs	r2, #32
 800ec68:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d006      	beq.n	800ec84 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec7c:	0011      	movs	r1, r2
 800ec7e:	0018      	movs	r0, r3
 800ec80:	f7ff fe32 	bl	800e8e8 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ec84:	f3ef 8310 	mrs	r3, PRIMASK
 800ec88:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ec8a:	b672      	cpsid	i
    return(primask_value);
 800ec8c:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800ec8e:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800ec90:	4b32      	ldr	r3, [pc, #200]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	1e5a      	subs	r2, r3, #1
 800ec96:	4b31      	ldr	r3, [pc, #196]	; (800ed5c <_tx_mutex_put+0x300>)
 800ec98:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	60da      	str	r2, [r3, #12]
 800eca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eca2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	f383 8810 	msr	PRIMASK, r3
}
 800ecaa:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800ecac:	f001 fae2 	bl	8010274 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	673b      	str	r3, [r7, #112]	; 0x70
 800ecb4:	e0b1      	b.n	800ee1a <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	699b      	ldr	r3, [r3, #24]
 800ecba:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d109      	bne.n	800ecd8 <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	67bb      	str	r3, [r7, #120]	; 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800ecca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800ecd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecda:	22a0      	movs	r2, #160	; 0xa0
 800ecdc:	589b      	ldr	r3, [r3, r2]
 800ecde:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800ece0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10a      	bne.n	800ecfc <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800ece6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ece8:	21a4      	movs	r1, #164	; 0xa4
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	631a      	str	r2, [r3, #48]	; 0x30
 800ecfa:	e012      	b.n	800ed22 <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800ecfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecfe:	22a4      	movs	r2, #164	; 0xa4
 800ed00:	589b      	ldr	r3, [r3, r2]
 800ed02:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800ed04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed08:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800ed0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800ed10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed1a:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed20:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800ed22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed28:	21a0      	movs	r1, #160	; 0xa0
 800ed2a:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed36:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	69db      	ldr	r3, [r3, #28]
 800ed3c:	1e5a      	subs	r2, r3, #1
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800ed48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d108      	bne.n	800ed60 <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	619a      	str	r2, [r3, #24]
 800ed54:	e013      	b.n	800ed7e <_tx_mutex_put+0x322>
 800ed56:	46c0      	nop			; (mov r8, r8)
 800ed58:	200087b0 	.word	0x200087b0
 800ed5c:	20008848 	.word	0x20008848
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800ed60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed64:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed6a:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800ed6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed70:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800ed72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ed76:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800ed78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed7c:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ed7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed80:	2200      	movs	r2, #0
 800ed82:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ed84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed86:	2284      	movs	r2, #132	; 0x84
 800ed88:	2100      	movs	r1, #0
 800ed8a:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ed8c:	4b25      	ldr	r3, [pc, #148]	; (800ee24 <_tx_mutex_put+0x3c8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	1c5a      	adds	r2, r3, #1
 800ed92:	4b24      	ldr	r3, [pc, #144]	; (800ee24 <_tx_mutex_put+0x3c8>)
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed98:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	f383 8810 	msr	PRIMASK, r3
}
 800eda0:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d128      	bne.n	800edfc <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	69db      	ldr	r3, [r3, #28]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d019      	beq.n	800ede6 <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	0018      	movs	r0, r3
 800edb6:	f7ff fce9 	bl	800e78c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800edba:	f3ef 8310 	mrs	r3, PRIMASK
 800edbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800edc0:	b672      	cpsid	i
    return(primask_value);
 800edc2:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800edc4:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	699b      	ldr	r3, [r3, #24]
 800edca:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 800edcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d003      	beq.n	800edda <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800edd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	629a      	str	r2, [r3, #40]	; 0x28
 800edda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eddc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f383 8810 	msr	PRIMASK, r3
}
 800ede4:	46c0      	nop			; (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800ede6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ede8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800edec:	429a      	cmp	r2, r3
 800edee:	d005      	beq.n	800edfc <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800edf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800edf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edf4:	0011      	movs	r1, r2
 800edf6:	0018      	movs	r0, r3
 800edf8:	f7ff fd76 	bl	800e8e8 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800edfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edfe:	0018      	movs	r0, r3
 800ee00:	f001 fa70 	bl	80102e4 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800ee04:	2300      	movs	r3, #0
 800ee06:	673b      	str	r3, [r7, #112]	; 0x70
 800ee08:	e007      	b.n	800ee1a <_tx_mutex_put+0x3be>
 800ee0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	f383 8810 	msr	PRIMASK, r3
}
 800ee14:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800ee16:	231e      	movs	r3, #30
 800ee18:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 800ee1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	b020      	add	sp, #128	; 0x80
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	20008848 	.word	0x20008848

0800ee28 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08c      	sub	sp, #48	; 0x30
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ee32:	f3ef 8310 	mrs	r3, PRIMASK
 800ee36:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ee38:	b672      	cpsid	i
    return(primask_value);
 800ee3a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800ee3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ee42:	4b37      	ldr	r3, [pc, #220]	; (800ef20 <_tx_queue_cleanup+0xf8>)
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d160      	bne.n	800ef0a <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	22ac      	movs	r2, #172	; 0xac
 800ee4c:	589b      	ldr	r3, [r3, r2]
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d15a      	bne.n	800ef0a <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee58:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d054      	beq.n	800ef0a <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a2f      	ldr	r2, [pc, #188]	; (800ef24 <_tx_queue_cleanup+0xfc>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d14f      	bne.n	800ef0a <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800ee6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d04b      	beq.n	800ef0a <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7c:	1e5a      	subs	r2, r3, #1
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee86:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d103      	bne.n	800ee96 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	2200      	movs	r2, #0
 800ee92:	629a      	str	r2, [r3, #40]	; 0x28
 800ee94:	e013      	b.n	800eebe <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee9a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea0:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800eea2:	6a3b      	ldr	r3, [r7, #32]
 800eea4:	69fa      	ldr	r2, [r7, #28]
 800eea6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	6a3a      	ldr	r2, [r7, #32]
 800eeac:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d102      	bne.n	800eebe <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	6a3a      	ldr	r2, [r7, #32]
 800eebc:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	d121      	bne.n	800ef0a <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d004      	beq.n	800eed8 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2284      	movs	r2, #132	; 0x84
 800eed2:	210b      	movs	r1, #11
 800eed4:	5099      	str	r1, [r3, r2]
 800eed6:	e003      	b.n	800eee0 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2284      	movs	r2, #132	; 0x84
 800eedc:	210a      	movs	r1, #10
 800eede:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800eee0:	4b11      	ldr	r3, [pc, #68]	; (800ef28 <_tx_queue_cleanup+0x100>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <_tx_queue_cleanup+0x100>)
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	f383 8810 	msr	PRIMASK, r3
}
 800eef4:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	0018      	movs	r0, r3
 800eefa:	f001 f9f3 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800eefe:	f3ef 8310 	mrs	r3, PRIMASK
 800ef02:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ef04:	b672      	cpsid	i
    return(primask_value);
 800ef06:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ef08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f383 8810 	msr	PRIMASK, r3
}
 800ef14:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	b00c      	add	sp, #48	; 0x30
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	46c0      	nop			; (mov r8, r8)
 800ef20:	0800ee29 	.word	0x0800ee29
 800ef24:	51554555 	.word	0x51554555
 800ef28:	20008848 	.word	0x20008848

0800ef2c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b090      	sub	sp, #64	; 0x40
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef3e:	2337      	movs	r3, #55	; 0x37
 800ef40:	18fb      	adds	r3, r7, r3
 800ef42:	2200      	movs	r2, #0
 800ef44:	701a      	strb	r2, [r3, #0]
 800ef46:	2338      	movs	r3, #56	; 0x38
 800ef48:	633b      	str	r3, [r7, #48]	; 0x30
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef4e:	e009      	b.n	800ef64 <_tx_queue_create+0x38>
 800ef50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ef56:	2237      	movs	r2, #55	; 0x37
 800ef58:	18ba      	adds	r2, r7, r2
 800ef5a:	7812      	ldrb	r2, [r2, #0]
 800ef5c:	701a      	strb	r2, [r3, #0]
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	3301      	adds	r3, #1
 800ef62:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d3f1      	bcc.n	800ef50 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	0019      	movs	r1, r3
 800ef7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ef80:	f7f3 fcf6 	bl	8002970 <__udivsi3>
 800ef84:	0003      	movs	r3, r0
 800ef86:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	4353      	muls	r3, r2
 800ef8e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	699a      	ldr	r2, [r3, #24]
 800ef9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	18d2      	adds	r2, r2, r3
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	683a      	ldr	r2, [r7, #0]
 800efa8:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efb4:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efba:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800efbc:	f3ef 8310 	mrs	r3, PRIMASK
 800efc0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800efc2:	b672      	cpsid	i
    return(primask_value);
 800efc4:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800efc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a19      	ldr	r2, [pc, #100]	; (800f030 <_tx_queue_create+0x104>)
 800efcc:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800efce:	4b19      	ldr	r3, [pc, #100]	; (800f034 <_tx_queue_create+0x108>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d109      	bne.n	800efea <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800efd6:	4b18      	ldr	r3, [pc, #96]	; (800f038 <_tx_queue_create+0x10c>)
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	635a      	str	r2, [r3, #52]	; 0x34
 800efe8:	e011      	b.n	800f00e <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800efea:	4b13      	ldr	r3, [pc, #76]	; (800f038 <_tx_queue_create+0x10c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff4:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	69fa      	ldr	r2, [r7, #28]
 800f006:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6a3a      	ldr	r2, [r7, #32]
 800f00c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800f00e:	4b09      	ldr	r3, [pc, #36]	; (800f034 <_tx_queue_create+0x108>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	1c5a      	adds	r2, r3, #1
 800f014:	4b07      	ldr	r3, [pc, #28]	; (800f034 <_tx_queue_create+0x108>)
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f383 8810 	msr	PRIMASK, r3
}
 800f022:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f024:	2300      	movs	r3, #0
}
 800f026:	0018      	movs	r0, r3
 800f028:	46bd      	mov	sp, r7
 800f02a:	b010      	add	sp, #64	; 0x40
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	46c0      	nop			; (mov r8, r8)
 800f030:	51554555 	.word	0x51554555
 800f034:	20008784 	.word	0x20008784
 800f038:	20008780 	.word	0x20008780

0800f03c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b094      	sub	sp, #80	; 0x50
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800f048:	2300      	movs	r3, #0
 800f04a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f04c:	f3ef 8310 	mrs	r3, PRIMASK
 800f050:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f052:	b672      	cpsid	i
    return(primask_value);
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800f056:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d100      	bne.n	800f068 <_tx_queue_receive+0x2c>
 800f066:	e137      	b.n	800f2d8 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d13c      	bne.n	800f0e8 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f07e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f080:	1d13      	adds	r3, r2, #4
 800f082:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f086:	1d19      	adds	r1, r3, #4
 800f088:	64b9      	str	r1, [r7, #72]	; 0x48
 800f08a:	6812      	ldr	r2, [r2, #0]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f090:	2b01      	cmp	r3, #1
 800f092:	d90e      	bls.n	800f0b2 <_tx_queue_receive+0x76>
 800f094:	e007      	b.n	800f0a6 <_tx_queue_receive+0x6a>
 800f096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f098:	1d13      	adds	r3, r2, #4
 800f09a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f09e:	1d19      	adds	r1, r3, #4
 800f0a0:	64b9      	str	r1, [r7, #72]	; 0x48
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1f1      	bne.n	800f096 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	69db      	ldr	r3, [r3, #28]
 800f0b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d102      	bne.n	800f0c2 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	699b      	ldr	r3, [r3, #24]
 800f0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f0c6:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	695b      	ldr	r3, [r3, #20]
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	1e5a      	subs	r2, r3, #1
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	611a      	str	r2, [r3, #16]
 800f0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	f383 8810 	msr	PRIMASK, r3
}
 800f0e6:	e166      	b.n	800f3b6 <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ec:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800f0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f0:	2280      	movs	r2, #128	; 0x80
 800f0f2:	589b      	ldr	r3, [r3, r2]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d154      	bne.n	800f1a2 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f10a:	1d13      	adds	r3, r2, #4
 800f10c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f110:	1d19      	adds	r1, r3, #4
 800f112:	64b9      	str	r1, [r7, #72]	; 0x48
 800f114:	6812      	ldr	r2, [r2, #0]
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d90e      	bls.n	800f13c <_tx_queue_receive+0x100>
 800f11e:	e007      	b.n	800f130 <_tx_queue_receive+0xf4>
 800f120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f122:	1d13      	adds	r3, r2, #4
 800f124:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f128:	1d19      	adds	r1, r3, #4
 800f12a:	64b9      	str	r1, [r7, #72]	; 0x48
 800f12c:	6812      	ldr	r2, [r2, #0]
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f132:	3b01      	subs	r3, #1
 800f134:	647b      	str	r3, [r7, #68]	; 0x44
 800f136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1f1      	bne.n	800f120 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800f13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13e:	3b01      	subs	r3, #1
 800f140:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	2b00      	cmp	r3, #0
 800f146:	d103      	bne.n	800f150 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	629a      	str	r2, [r3, #40]	; 0x28
 800f14e:	e00e      	b.n	800f16e <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800f150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f154:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f15a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f160:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f166:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f16c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f172:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	2200      	movs	r2, #0
 800f178:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f17c:	2284      	movs	r2, #132	; 0x84
 800f17e:	2100      	movs	r1, #0
 800f180:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f182:	4b8f      	ldr	r3, [pc, #572]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	1c5a      	adds	r2, r3, #1
 800f188:	4b8d      	ldr	r3, [pc, #564]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f18a:	601a      	str	r2, [r3, #0]
 800f18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	f383 8810 	msr	PRIMASK, r3
}
 800f196:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800f198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19a:	0018      	movs	r0, r3
 800f19c:	f001 f8a2 	bl	80102e4 <_tx_thread_system_resume>
 800f1a0:	e109      	b.n	800f3b6 <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f1b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1b4:	1d13      	adds	r3, r2, #4
 800f1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1ba:	1d19      	adds	r1, r3, #4
 800f1bc:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1be:	6812      	ldr	r2, [r2, #0]
 800f1c0:	601a      	str	r2, [r3, #0]
 800f1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d90e      	bls.n	800f1e6 <_tx_queue_receive+0x1aa>
 800f1c8:	e007      	b.n	800f1da <_tx_queue_receive+0x19e>
 800f1ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1cc:	1d13      	adds	r3, r2, #4
 800f1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1d2:	1d19      	adds	r1, r3, #4
 800f1d4:	64b9      	str	r1, [r7, #72]	; 0x48
 800f1d6:	6812      	ldr	r2, [r2, #0]
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	647b      	str	r3, [r7, #68]	; 0x44
 800f1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1f1      	bne.n	800f1ca <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	69db      	ldr	r3, [r3, #28]
 800f1ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d102      	bne.n	800f1f6 <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f1fa:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800f1fc:	4b70      	ldr	r3, [pc, #448]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	4b6f      	ldr	r3, [pc, #444]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f204:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800f206:	4b6e      	ldr	r3, [pc, #440]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1e5a      	subs	r2, r3, #1
 800f20c:	4b6c      	ldr	r3, [pc, #432]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f20e:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f214:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21a:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f224:	1d13      	adds	r3, r2, #4
 800f226:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f22a:	1d19      	adds	r1, r3, #4
 800f22c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f22e:	6812      	ldr	r2, [r2, #0]
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f234:	2b01      	cmp	r3, #1
 800f236:	d90e      	bls.n	800f256 <_tx_queue_receive+0x21a>
 800f238:	e007      	b.n	800f24a <_tx_queue_receive+0x20e>
 800f23a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f23c:	1d13      	adds	r3, r2, #4
 800f23e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f242:	1d19      	adds	r1, r3, #4
 800f244:	64b9      	str	r1, [r7, #72]	; 0x48
 800f246:	6812      	ldr	r2, [r2, #0]
 800f248:	601a      	str	r2, [r3, #0]
 800f24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24c:	3b01      	subs	r3, #1
 800f24e:	647b      	str	r3, [r7, #68]	; 0x44
 800f250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1f1      	bne.n	800f23a <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	69db      	ldr	r3, [r3, #28]
 800f25a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d102      	bne.n	800f266 <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f26a:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f270:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	3b01      	subs	r3, #1
 800f276:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d103      	bne.n	800f286 <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	629a      	str	r2, [r3, #40]	; 0x28
 800f284:	e00e      	b.n	800f2a4 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800f286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f28a:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f290:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f296:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f29c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2a2:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2a8:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b2:	2284      	movs	r2, #132	; 0x84
 800f2b4:	2100      	movs	r1, #0
 800f2b6:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f2b8:	4b41      	ldr	r3, [pc, #260]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	4b40      	ldr	r3, [pc, #256]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	f383 8810 	msr	PRIMASK, r3
}
 800f2cc:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800f2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	f001 f807 	bl	80102e4 <_tx_thread_system_resume>
 800f2d6:	e06e      	b.n	800f3b6 <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d063      	beq.n	800f3a6 <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800f2de:	4b38      	ldr	r3, [pc, #224]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d008      	beq.n	800f2f8 <_tx_queue_receive+0x2bc>
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	f383 8810 	msr	PRIMASK, r3
}
 800f2f0:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800f2f2:	230a      	movs	r3, #10
 800f2f4:	643b      	str	r3, [r7, #64]	; 0x40
 800f2f6:	e05e      	b.n	800f3b6 <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f2f8:	4b32      	ldr	r3, [pc, #200]	; (800f3c4 <_tx_queue_receive+0x388>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800f2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f300:	4a31      	ldr	r2, [pc, #196]	; (800f3c8 <_tx_queue_receive+0x38c>)
 800f302:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800f304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800f30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800f310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f312:	2280      	movs	r2, #128	; 0x80
 800f314:	2100      	movs	r1, #0
 800f316:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800f318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f31a:	22ac      	movs	r2, #172	; 0xac
 800f31c:	589b      	ldr	r3, [r3, r2]
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f322:	21ac      	movs	r1, #172	; 0xac
 800f324:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800f326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d109      	bne.n	800f340 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f330:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f336:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f33c:	675a      	str	r2, [r3, #116]	; 0x74
 800f33e:	e011      	b.n	800f364 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f344:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f34a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f350:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f356:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f35c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f362:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800f364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800f36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36e:	2205      	movs	r2, #5
 800f370:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	2201      	movs	r2, #1
 800f376:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f37e:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	1c5a      	adds	r2, r3, #1
 800f384:	4b0e      	ldr	r3, [pc, #56]	; (800f3c0 <_tx_queue_receive+0x384>)
 800f386:	601a      	str	r2, [r3, #0]
 800f388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	f383 8810 	msr	PRIMASK, r3
}
 800f392:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800f394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f396:	0018      	movs	r0, r3
 800f398:	f001 f8a4 	bl	80104e4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800f39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f39e:	2284      	movs	r2, #132	; 0x84
 800f3a0:	589b      	ldr	r3, [r3, r2]
 800f3a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f3a4:	e007      	b.n	800f3b6 <_tx_queue_receive+0x37a>
 800f3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f383 8810 	msr	PRIMASK, r3
}
 800f3b0:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800f3b2:	230a      	movs	r3, #10
 800f3b4:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800f3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	b014      	add	sp, #80	; 0x50
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20008848 	.word	0x20008848
 800f3c4:	200087b0 	.word	0x200087b0
 800f3c8:	0800ee29 	.word	0x0800ee29

0800f3cc <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b094      	sub	sp, #80	; 0x50
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800f3e0:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f3e2:	b672      	cpsid	i
    return(primask_value);
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ec:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d100      	bne.n	800f3f8 <_tx_queue_send+0x2c>
 800f3f6:	e09b      	b.n	800f530 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d13c      	bne.n	800f478 <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	1e5a      	subs	r2, r3, #1
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41a:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f424:	1d13      	adds	r3, r2, #4
 800f426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f42a:	1d19      	adds	r1, r3, #4
 800f42c:	64b9      	str	r1, [r7, #72]	; 0x48
 800f42e:	6812      	ldr	r2, [r2, #0]
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f434:	2b01      	cmp	r3, #1
 800f436:	d90e      	bls.n	800f456 <_tx_queue_send+0x8a>
 800f438:	e007      	b.n	800f44a <_tx_queue_send+0x7e>
 800f43a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f43c:	1d13      	adds	r3, r2, #4
 800f43e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f442:	1d19      	adds	r1, r3, #4
 800f444:	64b9      	str	r1, [r7, #72]	; 0x48
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f44c:	3b01      	subs	r3, #1
 800f44e:	647b      	str	r3, [r7, #68]	; 0x44
 800f450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1f1      	bne.n	800f43a <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d102      	bne.n	800f466 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	699b      	ldr	r3, [r3, #24]
 800f464:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f46a:	625a      	str	r2, [r3, #36]	; 0x24
 800f46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f472:	f383 8810 	msr	PRIMASK, r3
}
 800f476:	e0ca      	b.n	800f60e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f47c:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	3b01      	subs	r3, #1
 800f482:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	2b00      	cmp	r3, #0
 800f488:	d103      	bne.n	800f492 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	629a      	str	r2, [r3, #40]	; 0x28
 800f490:	e012      	b.n	800f4b8 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800f49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f49e:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4b0:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800f4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4b6:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4bc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800f4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4cc:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800f4d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4d6:	1d13      	adds	r3, r2, #4
 800f4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4dc:	1d19      	adds	r1, r3, #4
 800f4de:	64b9      	str	r1, [r7, #72]	; 0x48
 800f4e0:	6812      	ldr	r2, [r2, #0]
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d90e      	bls.n	800f508 <_tx_queue_send+0x13c>
 800f4ea:	e007      	b.n	800f4fc <_tx_queue_send+0x130>
 800f4ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4ee:	1d13      	adds	r3, r2, #4
 800f4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f4:	1d19      	adds	r1, r3, #4
 800f4f6:	64b9      	str	r1, [r7, #72]	; 0x48
 800f4f8:	6812      	ldr	r2, [r2, #0]
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4fe:	3b01      	subs	r3, #1
 800f500:	647b      	str	r3, [r7, #68]	; 0x44
 800f502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1f1      	bne.n	800f4ec <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f50a:	2284      	movs	r2, #132	; 0x84
 800f50c:	2100      	movs	r1, #0
 800f50e:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f510:	4b41      	ldr	r3, [pc, #260]	; (800f618 <_tx_queue_send+0x24c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	4b40      	ldr	r3, [pc, #256]	; (800f618 <_tx_queue_send+0x24c>)
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f51c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f51e:	6a3b      	ldr	r3, [r7, #32]
 800f520:	f383 8810 	msr	PRIMASK, r3
}
 800f524:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800f526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f528:	0018      	movs	r0, r3
 800f52a:	f000 fedb 	bl	80102e4 <_tx_thread_system_resume>
 800f52e:	e06e      	b.n	800f60e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d063      	beq.n	800f5fe <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800f536:	4b38      	ldr	r3, [pc, #224]	; (800f618 <_tx_queue_send+0x24c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d008      	beq.n	800f550 <_tx_queue_send+0x184>
 800f53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f540:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	f383 8810 	msr	PRIMASK, r3
}
 800f548:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800f54a:	230b      	movs	r3, #11
 800f54c:	643b      	str	r3, [r7, #64]	; 0x40
 800f54e:	e05e      	b.n	800f60e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f550:	4b32      	ldr	r3, [pc, #200]	; (800f61c <_tx_queue_send+0x250>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800f556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f558:	4a31      	ldr	r2, [pc, #196]	; (800f620 <_tx_queue_send+0x254>)
 800f55a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800f55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800f562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800f568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f56a:	2280      	movs	r2, #128	; 0x80
 800f56c:	2100      	movs	r1, #0
 800f56e:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800f570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f572:	22ac      	movs	r2, #172	; 0xac
 800f574:	589b      	ldr	r3, [r3, r2]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57a:	21ac      	movs	r1, #172	; 0xac
 800f57c:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800f57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f580:	2b00      	cmp	r3, #0
 800f582:	d109      	bne.n	800f598 <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f588:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f58e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f594:	675a      	str	r2, [r3, #116]	; 0x74
 800f596:	e011      	b.n	800f5bc <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59c:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ae:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5b4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5ba:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c6:	2205      	movs	r2, #5
 800f5c8:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f5d6:	4b10      	ldr	r3, [pc, #64]	; (800f618 <_tx_queue_send+0x24c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	1c5a      	adds	r2, r3, #1
 800f5dc:	4b0e      	ldr	r3, [pc, #56]	; (800f618 <_tx_queue_send+0x24c>)
 800f5de:	601a      	str	r2, [r3, #0]
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	f383 8810 	msr	PRIMASK, r3
}
 800f5ea:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800f5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	f000 ff78 	bl	80104e4 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800f5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f6:	2284      	movs	r2, #132	; 0x84
 800f5f8:	589b      	ldr	r3, [r3, r2]
 800f5fa:	643b      	str	r3, [r7, #64]	; 0x40
 800f5fc:	e007      	b.n	800f60e <_tx_queue_send+0x242>
 800f5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f600:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	f383 8810 	msr	PRIMASK, r3
}
 800f608:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800f60a:	230b      	movs	r3, #11
 800f60c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 800f60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800f610:	0018      	movs	r0, r3
 800f612:	46bd      	mov	sp, r7
 800f614:	b014      	add	sp, #80	; 0x50
 800f616:	bd80      	pop	{r7, pc}
 800f618:	20008848 	.word	0x20008848
 800f61c:	200087b0 	.word	0x200087b0
 800f620:	0800ee29 	.word	0x0800ee29

0800f624 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b08c      	sub	sp, #48	; 0x30
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f62e:	f3ef 8310 	mrs	r3, PRIMASK
 800f632:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f634:	b672      	cpsid	i
    return(primask_value);
 800f636:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800f638:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f63e:	4b32      	ldr	r3, [pc, #200]	; (800f708 <_tx_semaphore_cleanup+0xe4>)
 800f640:	429a      	cmp	r2, r3
 800f642:	d157      	bne.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	22ac      	movs	r2, #172	; 0xac
 800f648:	589b      	ldr	r3, [r3, r2]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d151      	bne.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f654:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d04b      	beq.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800f65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a2a      	ldr	r2, [pc, #168]	; (800f70c <_tx_semaphore_cleanup+0xe8>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d146      	bne.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800f666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d042      	beq.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800f674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f686:	2b00      	cmp	r3, #0
 800f688:	d103      	bne.n	800f692 <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800f68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68c:	2200      	movs	r2, #0
 800f68e:	60da      	str	r2, [r3, #12]
 800f690:	e013      	b.n	800f6ba <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f696:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f69c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f69e:	6a3b      	ldr	r3, [r7, #32]
 800f6a0:	69fa      	ldr	r2, [r7, #28]
 800f6a2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	6a3a      	ldr	r2, [r7, #32]
 800f6a8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800f6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d102      	bne.n	800f6ba <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b6:	6a3a      	ldr	r2, [r7, #32]
 800f6b8:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6be:	2b06      	cmp	r3, #6
 800f6c0:	d118      	bne.n	800f6f4 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2284      	movs	r2, #132	; 0x84
 800f6c6:	210d      	movs	r1, #13
 800f6c8:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f6ca:	4b11      	ldr	r3, [pc, #68]	; (800f710 <_tx_semaphore_cleanup+0xec>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	1c5a      	adds	r2, r3, #1
 800f6d0:	4b0f      	ldr	r3, [pc, #60]	; (800f710 <_tx_semaphore_cleanup+0xec>)
 800f6d2:	601a      	str	r2, [r3, #0]
 800f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f383 8810 	msr	PRIMASK, r3
}
 800f6de:	46c0      	nop			; (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	0018      	movs	r0, r3
 800f6e4:	f000 fdfe 	bl	80102e4 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f6ee:	b672      	cpsid	i
    return(primask_value);
 800f6f0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f383 8810 	msr	PRIMASK, r3
}
 800f6fe:	46c0      	nop			; (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f700:	46c0      	nop			; (mov r8, r8)
 800f702:	46bd      	mov	sp, r7
 800f704:	b00c      	add	sp, #48	; 0x30
 800f706:	bd80      	pop	{r7, pc}
 800f708:	0800f625 	.word	0x0800f625
 800f70c:	53454d41 	.word	0x53454d41
 800f710:	20008848 	.word	0x20008848

0800f714 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08e      	sub	sp, #56	; 0x38
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	637b      	str	r3, [r7, #52]	; 0x34
 800f724:	232f      	movs	r3, #47	; 0x2f
 800f726:	18fb      	adds	r3, r7, r3
 800f728:	2200      	movs	r2, #0
 800f72a:	701a      	strb	r2, [r3, #0]
 800f72c:	231c      	movs	r3, #28
 800f72e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f730:	2300      	movs	r3, #0
 800f732:	633b      	str	r3, [r7, #48]	; 0x30
 800f734:	e009      	b.n	800f74a <_tx_semaphore_create+0x36>
 800f736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	637a      	str	r2, [r7, #52]	; 0x34
 800f73c:	222f      	movs	r2, #47	; 0x2f
 800f73e:	18ba      	adds	r2, r7, r2
 800f740:	7812      	ldrb	r2, [r2, #0]
 800f742:	701a      	strb	r2, [r3, #0]
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	3301      	adds	r3, #1
 800f748:	633b      	str	r3, [r7, #48]	; 0x30
 800f74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74e:	429a      	cmp	r2, r3
 800f750:	d3f1      	bcc.n	800f736 <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f75e:	f3ef 8310 	mrs	r3, PRIMASK
 800f762:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f764:	b672      	cpsid	i
    return(primask_value);
 800f766:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800f768:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	4a18      	ldr	r2, [pc, #96]	; (800f7d0 <_tx_semaphore_create+0xbc>)
 800f76e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800f770:	4b18      	ldr	r3, [pc, #96]	; (800f7d4 <_tx_semaphore_create+0xc0>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d109      	bne.n	800f78c <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800f778:	4b17      	ldr	r3, [pc, #92]	; (800f7d8 <_tx_semaphore_create+0xc4>)
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	619a      	str	r2, [r3, #24]
 800f78a:	e011      	b.n	800f7b0 <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800f78c:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <_tx_semaphore_create+0xc4>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	699b      	ldr	r3, [r3, #24]
 800f796:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	69fa      	ldr	r2, [r7, #28]
 800f7a8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6a3a      	ldr	r2, [r7, #32]
 800f7ae:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800f7b0:	4b08      	ldr	r3, [pc, #32]	; (800f7d4 <_tx_semaphore_create+0xc0>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	4b07      	ldr	r3, [pc, #28]	; (800f7d4 <_tx_semaphore_create+0xc0>)
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f383 8810 	msr	PRIMASK, r3
}
 800f7c4:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	b00e      	add	sp, #56	; 0x38
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	53454d41 	.word	0x53454d41
 800f7d4:	2000877c 	.word	0x2000877c
 800f7d8:	20008778 	.word	0x20008778

0800f7dc <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b08e      	sub	sp, #56	; 0x38
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f7e4:	f3ef 8310 	mrs	r3, PRIMASK
 800f7e8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f7ea:	b672      	cpsid	i
    return(primask_value);
 800f7ec:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800f7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800f7f6:	4b3c      	ldr	r3, [pc, #240]	; (800f8e8 <_tx_semaphore_delete+0x10c>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	1e5a      	subs	r2, r3, #1
 800f7fc:	4b3a      	ldr	r3, [pc, #232]	; (800f8e8 <_tx_semaphore_delete+0x10c>)
 800f7fe:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800f800:	4b39      	ldr	r3, [pc, #228]	; (800f8e8 <_tx_semaphore_delete+0x10c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d103      	bne.n	800f810 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800f808:	4b38      	ldr	r3, [pc, #224]	; (800f8ec <_tx_semaphore_delete+0x110>)
 800f80a:	2200      	movs	r2, #0
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e013      	b.n	800f838 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f820:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f826:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800f828:	4b30      	ldr	r3, [pc, #192]	; (800f8ec <_tx_semaphore_delete+0x110>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d102      	bne.n	800f838 <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800f832:	4b2e      	ldr	r3, [pc, #184]	; (800f8ec <_tx_semaphore_delete+0x110>)
 800f834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f836:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f838:	4b2d      	ldr	r3, [pc, #180]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	4b2c      	ldr	r3, [pc, #176]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f840:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	611a      	str	r2, [r3, #16]
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	f383 8810 	msr	PRIMASK, r3
}
 800f864:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800f866:	e023      	b.n	800f8b0 <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	3b01      	subs	r3, #1
 800f86c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f86e:	f3ef 8310 	mrs	r3, PRIMASK
 800f872:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f874:	b672      	cpsid	i
    return(primask_value);
 800f876:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800f878:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87c:	2200      	movs	r2, #0
 800f87e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f882:	2284      	movs	r2, #132	; 0x84
 800f884:	2101      	movs	r1, #1
 800f886:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f88c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f88e:	4b18      	ldr	r3, [pc, #96]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	4b16      	ldr	r3, [pc, #88]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	f383 8810 	msr	PRIMASK, r3
}
 800f8a2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a6:	0018      	movs	r0, r3
 800f8a8:	f000 fd1c 	bl	80102e4 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1d8      	bne.n	800f868 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f8b6:	f3ef 8310 	mrs	r3, PRIMASK
 800f8ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f8bc:	b672      	cpsid	i
    return(primask_value);
 800f8be:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f8c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f8c2:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	1e5a      	subs	r2, r3, #1
 800f8c8:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <_tx_semaphore_delete+0x114>)
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f383 8810 	msr	PRIMASK, r3
}
 800f8d6:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f8d8:	f000 fccc 	bl	8010274 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	0018      	movs	r0, r3
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	b00e      	add	sp, #56	; 0x38
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	46c0      	nop			; (mov r8, r8)
 800f8e8:	2000877c 	.word	0x2000877c
 800f8ec:	20008778 	.word	0x20008778
 800f8f0:	20008848 	.word	0x20008848

0800f8f4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b08c      	sub	sp, #48	; 0x30
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800f8fe:	2300      	movs	r3, #0
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f902:	f3ef 8310 	mrs	r3, PRIMASK
 800f906:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f908:	b672      	cpsid	i
    return(primask_value);
 800f90a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800f90c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00a      	beq.n	800f92c <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	1e5a      	subs	r2, r3, #1
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	609a      	str	r2, [r3, #8]
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	f383 8810 	msr	PRIMASK, r3
}
 800f92a:	e069      	b.n	800fa00 <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d05e      	beq.n	800f9f0 <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800f932:	4b36      	ldr	r3, [pc, #216]	; (800fa0c <_tx_semaphore_get+0x118>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d008      	beq.n	800f94c <_tx_semaphore_get+0x58>
 800f93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	f383 8810 	msr	PRIMASK, r3
}
 800f944:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800f946:	230d      	movs	r3, #13
 800f948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f94a:	e059      	b.n	800fa00 <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800f94c:	4b30      	ldr	r3, [pc, #192]	; (800fa10 <_tx_semaphore_get+0x11c>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800f952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f954:	4a2f      	ldr	r2, [pc, #188]	; (800fa14 <_tx_semaphore_get+0x120>)
 800f956:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	22ac      	movs	r2, #172	; 0xac
 800f962:	589b      	ldr	r3, [r3, r2]
 800f964:	1c5a      	adds	r2, r3, #1
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	21ac      	movs	r1, #172	; 0xac
 800f96a:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d109      	bne.n	800f988 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f978:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800f980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f984:	675a      	str	r2, [r3, #116]	; 0x74
 800f986:	e011      	b.n	800f9ac <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f990:	6a3a      	ldr	r2, [r7, #32]
 800f992:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f998:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	69fa      	ldr	r2, [r7, #28]
 800f99e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9aa:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	2206      	movs	r2, #6
 800f9ba:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	2201      	movs	r2, #1
 800f9c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f9c8:	4b10      	ldr	r3, [pc, #64]	; (800fa0c <_tx_semaphore_get+0x118>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	4b0f      	ldr	r3, [pc, #60]	; (800fa0c <_tx_semaphore_get+0x118>)
 800f9d0:	601a      	str	r2, [r3, #0]
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f383 8810 	msr	PRIMASK, r3
}
 800f9dc:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	0018      	movs	r0, r3
 800f9e2:	f000 fd7f 	bl	80104e4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	2284      	movs	r2, #132	; 0x84
 800f9ea:	589b      	ldr	r3, [r3, r2]
 800f9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ee:	e007      	b.n	800fa00 <_tx_semaphore_get+0x10c>
 800f9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	f383 8810 	msr	PRIMASK, r3
}
 800f9fa:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800f9fc:	230d      	movs	r3, #13
 800f9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fa02:	0018      	movs	r0, r3
 800fa04:	46bd      	mov	sp, r7
 800fa06:	b00c      	add	sp, #48	; 0x30
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	46c0      	nop			; (mov r8, r8)
 800fa0c:	20008848 	.word	0x20008848
 800fa10:	200087b0 	.word	0x200087b0
 800fa14:	0800f625 	.word	0x0800f625

0800fa18 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b08a      	sub	sp, #40	; 0x28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fa20:	f3ef 8310 	mrs	r3, PRIMASK
 800fa24:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fa26:	b672      	cpsid	i
    return(primask_value);
 800fa28:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800fa2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d10a      	bne.n	800fa4e <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	609a      	str	r2, [r3, #8]
 800fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa44:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f383 8810 	msr	PRIMASK, r3
}
 800fa4c:	e034      	b.n	800fab8 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	3b01      	subs	r3, #1
 800fa58:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d103      	bne.n	800fa68 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	60da      	str	r2, [r3, #12]
 800fa66:	e00e      	b.n	800fa86 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6c:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	69ba      	ldr	r2, [r7, #24]
 800fa72:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa78:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	69ba      	ldr	r2, [r7, #24]
 800fa84:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a3a      	ldr	r2, [r7, #32]
 800fa8a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	2284      	movs	r2, #132	; 0x84
 800fa96:	2100      	movs	r1, #0
 800fa98:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800fa9a:	4b0a      	ldr	r3, [pc, #40]	; (800fac4 <_tx_semaphore_put+0xac>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <_tx_semaphore_put+0xac>)
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	f383 8810 	msr	PRIMASK, r3
}
 800faae:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	0018      	movs	r0, r3
 800fab4:	f000 fc16 	bl	80102e4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800fab8:	2300      	movs	r3, #0
}
 800faba:	0018      	movs	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b00a      	add	sp, #40	; 0x28
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	46c0      	nop			; (mov r8, r8)
 800fac4:	20008848 	.word	0x20008848

0800fac8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b098      	sub	sp, #96	; 0x60
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800fad6:	2300      	movs	r3, #0
 800fad8:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800fada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fadc:	657b      	str	r3, [r7, #84]	; 0x54
 800fade:	2347      	movs	r3, #71	; 0x47
 800fae0:	18fb      	adds	r3, r7, r3
 800fae2:	22ef      	movs	r2, #239	; 0xef
 800fae4:	701a      	strb	r2, [r3, #0]
 800fae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fae8:	643b      	str	r3, [r7, #64]	; 0x40
 800faea:	2300      	movs	r3, #0
 800faec:	653b      	str	r3, [r7, #80]	; 0x50
 800faee:	e009      	b.n	800fb04 <_tx_thread_create+0x3c>
 800faf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	657a      	str	r2, [r7, #84]	; 0x54
 800faf6:	2247      	movs	r2, #71	; 0x47
 800faf8:	18ba      	adds	r2, r7, r2
 800fafa:	7812      	ldrb	r2, [r2, #0]
 800fafc:	701a      	strb	r2, [r3, #0]
 800fafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb00:	3301      	adds	r3, #1
 800fb02:	653b      	str	r3, [r7, #80]	; 0x50
 800fb04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d3f1      	bcc.n	800faf0 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb10:	233f      	movs	r3, #63	; 0x3f
 800fb12:	18fb      	adds	r3, r7, r3
 800fb14:	2200      	movs	r2, #0
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	23b0      	movs	r3, #176	; 0xb0
 800fb1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb20:	e009      	b.n	800fb36 <_tx_thread_create+0x6e>
 800fb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fb28:	223f      	movs	r2, #63	; 0x3f
 800fb2a:	18ba      	adds	r2, r7, r2
 800fb2c:	7812      	ldrb	r2, [r2, #0]
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb32:	3301      	adds	r3, #1
 800fb34:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d3f1      	bcc.n	800fb22 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	683a      	ldr	r2, [r7, #0]
 800fb4e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb54:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb5a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb60:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2194      	movs	r1, #148	; 0x94
 800fb66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb68:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb6e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb74:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	229c      	movs	r2, #156	; 0x9c
 800fb7a:	2120      	movs	r1, #32
 800fb7c:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800fb7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb80:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800fb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb84:	3b01      	subs	r3, #1
 800fb86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb88:	18d3      	adds	r3, r2, r3
 800fb8a:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb90:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800fb92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d007      	beq.n	800fbaa <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2298      	movs	r2, #152	; 0x98
 800fba4:	2100      	movs	r1, #0
 800fba6:	5099      	str	r1, [r3, r2]
 800fba8:	e006      	b.n	800fbb8 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbae:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2198      	movs	r1, #152	; 0x98
 800fbb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbb6:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2203      	movs	r2, #3
 800fbbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	4a48      	ldr	r2, [pc, #288]	; (800fce4 <_tx_thread_create+0x21c>)
 800fbc2:	655a      	str	r2, [r3, #84]	; 0x54
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800fbca:	4a47      	ldr	r2, [pc, #284]	; (800fce8 <_tx_thread_create+0x220>)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	0011      	movs	r1, r2
 800fbd0:	0018      	movs	r0, r3
 800fbd2:	f7f0 fb45 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fbd6:	f3ef 8310 	mrs	r3, PRIMASK
 800fbda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fbdc:	b672      	cpsid	i
    return(primask_value);
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800fbe0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4a41      	ldr	r2, [pc, #260]	; (800fcec <_tx_thread_create+0x224>)
 800fbe6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800fbe8:	4b41      	ldr	r3, [pc, #260]	; (800fcf0 <_tx_thread_create+0x228>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10b      	bne.n	800fc08 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800fbf0:	4b40      	ldr	r3, [pc, #256]	; (800fcf4 <_tx_thread_create+0x22c>)
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2188      	movs	r1, #136	; 0x88
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	218c      	movs	r1, #140	; 0x8c
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	505a      	str	r2, [r3, r1]
 800fc06:	e016      	b.n	800fc36 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800fc08:	4b3a      	ldr	r3, [pc, #232]	; (800fcf4 <_tx_thread_create+0x22c>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	228c      	movs	r2, #140	; 0x8c
 800fc12:	589b      	ldr	r3, [r3, r2]
 800fc14:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800fc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc18:	218c      	movs	r1, #140	; 0x8c
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800fc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc20:	2188      	movs	r1, #136	; 0x88
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	218c      	movs	r1, #140	; 0x8c
 800fc2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc2c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2188      	movs	r1, #136	; 0x88
 800fc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc34:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800fc36:	4b2e      	ldr	r3, [pc, #184]	; (800fcf0 <_tx_thread_create+0x228>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	1c5a      	adds	r2, r3, #1
 800fc3c:	4b2c      	ldr	r3, [pc, #176]	; (800fcf0 <_tx_thread_create+0x228>)
 800fc3e:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800fc40:	4b2d      	ldr	r3, [pc, #180]	; (800fcf8 <_tx_thread_create+0x230>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	4b2c      	ldr	r3, [pc, #176]	; (800fcf8 <_tx_thread_create+0x230>)
 800fc48:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800fc4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d12a      	bne.n	800fca6 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fc50:	f3ef 8305 	mrs	r3, IPSR
 800fc54:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 800fc56:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800fc58:	4b28      	ldr	r3, [pc, #160]	; (800fcfc <_tx_thread_create+0x234>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	4a28      	ldr	r2, [pc, #160]	; (800fd00 <_tx_thread_create+0x238>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d90d      	bls.n	800fc80 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800fc64:	4b27      	ldr	r3, [pc, #156]	; (800fd04 <_tx_thread_create+0x23c>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800fc6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d009      	beq.n	800fc84 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800fc70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc74:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800fc76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc7c:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc7e:	e001      	b.n	800fc84 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800fc80:	2300      	movs	r3, #0
 800fc82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	f383 8810 	msr	PRIMASK, r3
}
 800fc8e:	46c0      	nop			; (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	0018      	movs	r0, r3
 800fc94:	f000 fb26 	bl	80102e4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800fc98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d01c      	beq.n	800fcd8 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800fc9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fca2:	63da      	str	r2, [r3, #60]	; 0x3c
 800fca4:	e018      	b.n	800fcd8 <_tx_thread_create+0x210>
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	f383 8810 	msr	PRIMASK, r3
}
 800fcb0:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fcb2:	f3ef 8310 	mrs	r3, PRIMASK
 800fcb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fcb8:	b672      	cpsid	i
    return(primask_value);
 800fcba:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800fcbc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <_tx_thread_create+0x230>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	1e5a      	subs	r2, r3, #1
 800fcc4:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <_tx_thread_create+0x230>)
 800fcc6:	601a      	str	r2, [r3, #0]
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	f383 8810 	msr	PRIMASK, r3
}
 800fcd2:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fcd4:	f000 face 	bl	8010274 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	0018      	movs	r0, r3
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	b018      	add	sp, #96	; 0x60
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	46c0      	nop			; (mov r8, r8)
 800fce4:	080109e9 	.word	0x080109e9
 800fce8:	08010021 	.word	0x08010021
 800fcec:	54485244 	.word	0x54485244
 800fcf0:	200087bc 	.word	0x200087bc
 800fcf4:	200087b8 	.word	0x200087b8
 800fcf8:	20008848 	.word	0x20008848
 800fcfc:	20000010 	.word	0x20000010
 800fd00:	f0f0f0ef 	.word	0xf0f0f0ef
 800fd04:	200087b4 	.word	0x200087b4

0800fd08 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08a      	sub	sp, #40	; 0x28
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fd10:	2300      	movs	r3, #0
 800fd12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fd14:	f3ef 8310 	mrs	r3, PRIMASK
 800fd18:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fd1a:	b672      	cpsid	i
    return(primask_value);
 800fd1c:	697b      	ldr	r3, [r7, #20]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 800fd1e:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d00b      	beq.n	800fd40 <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d007      	beq.n	800fd40 <_tx_thread_delete+0x38>
 800fd30:	6a3b      	ldr	r3, [r7, #32]
 800fd32:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f383 8810 	msr	PRIMASK, r3
}
 800fd3a:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 800fd3c:	2311      	movs	r3, #17
 800fd3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d12d      	bne.n	800fda2 <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 800fd4c:	4b17      	ldr	r3, [pc, #92]	; (800fdac <_tx_thread_delete+0xa4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	1e5a      	subs	r2, r3, #1
 800fd52:	4b16      	ldr	r3, [pc, #88]	; (800fdac <_tx_thread_delete+0xa4>)
 800fd54:	601a      	str	r2, [r3, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 800fd56:	4b15      	ldr	r3, [pc, #84]	; (800fdac <_tx_thread_delete+0xa4>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d103      	bne.n	800fd66 <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 800fd5e:	4b14      	ldr	r3, [pc, #80]	; (800fdb0 <_tx_thread_delete+0xa8>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	601a      	str	r2, [r3, #0]
 800fd64:	e017      	b.n	800fd96 <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2288      	movs	r2, #136	; 0x88
 800fd6a:	589b      	ldr	r3, [r3, r2]
 800fd6c:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	228c      	movs	r2, #140	; 0x8c
 800fd72:	589b      	ldr	r3, [r3, r2]
 800fd74:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	218c      	movs	r1, #140	; 0x8c
 800fd7a:	69ba      	ldr	r2, [r7, #24]
 800fd7c:	505a      	str	r2, [r3, r1]
            previous_thread -> tx_thread_created_next =  next_thread;
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	2188      	movs	r1, #136	; 0x88
 800fd82:	69fa      	ldr	r2, [r7, #28]
 800fd84:	505a      	str	r2, [r3, r1]

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 800fd86:	4b0a      	ldr	r3, [pc, #40]	; (800fdb0 <_tx_thread_delete+0xa8>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d102      	bne.n	800fd96 <_tx_thread_delete+0x8e>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <_tx_thread_delete+0xa8>)
 800fd92:	69fa      	ldr	r2, [r7, #28]
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	6a3b      	ldr	r3, [r7, #32]
 800fd98:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f383 8810 	msr	PRIMASK, r3
}
 800fda0:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fda4:	0018      	movs	r0, r3
 800fda6:	46bd      	mov	sp, r7
 800fda8:	b00a      	add	sp, #40	; 0x28
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	200087bc 	.word	0x200087bc
 800fdb0:	200087b8 	.word	0x200087b8

0800fdb4 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fdba:	f3ef 8310 	mrs	r3, PRIMASK
 800fdbe:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fdc0:	b672      	cpsid	i
    return(primask_value);
 800fdc2:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800fdc4:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800fdc6:	4b07      	ldr	r3, [pc, #28]	; (800fde4 <_tx_thread_identify+0x30>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	60bb      	str	r3, [r7, #8]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f383 8810 	msr	PRIMASK, r3
}
 800fdd6:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800fdd8:	68bb      	ldr	r3, [r7, #8]
}
 800fdda:	0018      	movs	r0, r3
 800fddc:	46bd      	mov	sp, r7
 800fdde:	b004      	add	sp, #16
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	46c0      	nop			; (mov r8, r8)
 800fde4:	200087b0 	.word	0x200087b0

0800fde8 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
 800fdf4:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fdf6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdfa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fdfc:	b672      	cpsid	i
    return(primask_value);
 800fdfe:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800fe00:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d003      	beq.n	800fe10 <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d003      	beq.n	800fe2c <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	685a      	ldr	r2, [r3, #4]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d004      	beq.n	800fe3c <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2294      	movs	r2, #148	; 0x94
 800fe36:	589a      	ldr	r2, [r3, r2]
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d004      	beq.n	800fe4c <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2298      	movs	r2, #152	; 0x98
 800fe46:	589a      	ldr	r2, [r3, r2]
 800fe48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	699a      	ldr	r2, [r3, #24]
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800fe5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2288      	movs	r2, #136	; 0x88
 800fe64:	589a      	ldr	r2, [r3, r2]
 800fe66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe68:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d003      	beq.n	800fe78 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f383 8810 	msr	PRIMASK, r3
}
 800fe82:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	0018      	movs	r0, r3
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	b008      	add	sp, #32
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b088      	sub	sp, #32
 800fe94:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800fe96:	4b28      	ldr	r3, [pc, #160]	; (800ff38 <_tx_thread_initialize+0xa8>)
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800fe9c:	4b27      	ldr	r3, [pc, #156]	; (800ff3c <_tx_thread_initialize+0xac>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800fea2:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <_tx_thread_initialize+0xb0>)
 800fea4:	61fb      	str	r3, [r7, #28]
 800fea6:	230f      	movs	r3, #15
 800fea8:	18fb      	adds	r3, r7, r3
 800feaa:	2200      	movs	r2, #0
 800feac:	701a      	strb	r2, [r3, #0]
 800feae:	2304      	movs	r3, #4
 800feb0:	60bb      	str	r3, [r7, #8]
 800feb2:	2300      	movs	r3, #0
 800feb4:	61bb      	str	r3, [r7, #24]
 800feb6:	e009      	b.n	800fecc <_tx_thread_initialize+0x3c>
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	61fa      	str	r2, [r7, #28]
 800febe:	220f      	movs	r2, #15
 800fec0:	18ba      	adds	r2, r7, r2
 800fec2:	7812      	ldrb	r2, [r2, #0]
 800fec4:	701a      	strb	r2, [r3, #0]
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	3301      	adds	r3, #1
 800feca:	61bb      	str	r3, [r7, #24]
 800fecc:	69ba      	ldr	r2, [r7, #24]
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d3f1      	bcc.n	800feb8 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fed4:	4b1b      	ldr	r3, [pc, #108]	; (800ff44 <_tx_thread_initialize+0xb4>)
 800fed6:	2220      	movs	r2, #32
 800fed8:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800feda:	4b1b      	ldr	r3, [pc, #108]	; (800ff48 <_tx_thread_initialize+0xb8>)
 800fedc:	617b      	str	r3, [r7, #20]
 800fede:	1dfb      	adds	r3, r7, #7
 800fee0:	2200      	movs	r2, #0
 800fee2:	701a      	strb	r2, [r3, #0]
 800fee4:	2380      	movs	r3, #128	; 0x80
 800fee6:	603b      	str	r3, [r7, #0]
 800fee8:	2300      	movs	r3, #0
 800feea:	613b      	str	r3, [r7, #16]
 800feec:	e008      	b.n	800ff00 <_tx_thread_initialize+0x70>
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	617a      	str	r2, [r7, #20]
 800fef4:	1dfa      	adds	r2, r7, #7
 800fef6:	7812      	ldrb	r2, [r2, #0]
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	3301      	adds	r3, #1
 800fefe:	613b      	str	r3, [r7, #16]
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d3f2      	bcc.n	800feee <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800ff08:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <_tx_thread_initialize+0xbc>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800ff0e:	4b10      	ldr	r3, [pc, #64]	; (800ff50 <_tx_thread_initialize+0xc0>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800ff14:	4b0f      	ldr	r3, [pc, #60]	; (800ff54 <_tx_thread_initialize+0xc4>)
 800ff16:	2200      	movs	r2, #0
 800ff18:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800ff1a:	4b0f      	ldr	r3, [pc, #60]	; (800ff58 <_tx_thread_initialize+0xc8>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800ff20:	4b0e      	ldr	r3, [pc, #56]	; (800ff5c <_tx_thread_initialize+0xcc>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2285      	movs	r2, #133	; 0x85
 800ff26:	0452      	lsls	r2, r2, #17
 800ff28:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <_tx_thread_initialize+0xcc>)
 800ff2c:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800ff2e:	46c0      	nop			; (mov r8, r8)
 800ff30:	46bd      	mov	sp, r7
 800ff32:	b008      	add	sp, #32
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	46c0      	nop			; (mov r8, r8)
 800ff38:	200087b0 	.word	0x200087b0
 800ff3c:	200087b4 	.word	0x200087b4
 800ff40:	200087c0 	.word	0x200087c0
 800ff44:	200087c4 	.word	0x200087c4
 800ff48:	200087c8 	.word	0x200087c8
 800ff4c:	200087b8 	.word	0x200087b8
 800ff50:	200087bc 	.word	0x200087bc
 800ff54:	20008848 	.word	0x20008848
 800ff58:	2000884c 	.word	0x2000884c
 800ff5c:	20008850 	.word	0x20008850

0800ff60 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b08a      	sub	sp, #40	; 0x28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800ff68:	2300      	movs	r3, #0
 800ff6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff70:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff72:	b672      	cpsid	i
    return(primask_value);
 800ff74:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ff76:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d130      	bne.n	800ffe2 <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ff80:	f3ef 8305 	mrs	r3, IPSR
 800ff84:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ff86:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ff88:	4b21      	ldr	r3, [pc, #132]	; (8010010 <_tx_thread_resume+0xb0>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	4a21      	ldr	r2, [pc, #132]	; (8010014 <_tx_thread_resume+0xb4>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d90d      	bls.n	800ffb0 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ff94:	4b20      	ldr	r3, [pc, #128]	; (8010018 <_tx_thread_resume+0xb8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ff9a:	6a3b      	ldr	r3, [r7, #32]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d009      	beq.n	800ffb4 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffa4:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	63da      	str	r2, [r3, #60]	; 0x3c
 800ffae:	e001      	b.n	800ffb4 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ffb4:	4b19      	ldr	r3, [pc, #100]	; (801001c <_tx_thread_resume+0xbc>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	4b18      	ldr	r3, [pc, #96]	; (801001c <_tx_thread_resume+0xbc>)
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f383 8810 	msr	PRIMASK, r3
}
 800ffc8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f000 f989 	bl	80102e4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ffd2:	6a3b      	ldr	r3, [r7, #32]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d002      	beq.n	800ffde <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ffd8:	6a3b      	ldr	r3, [r7, #32]
 800ffda:	69fa      	ldr	r2, [r7, #28]
 800ffdc:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800ffde:	2300      	movs	r3, #0
 800ffe0:	e012      	b.n	8010008 <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d105      	bne.n	800fff6 <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2200      	movs	r2, #0
 800ffee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800fff0:	2319      	movs	r3, #25
 800fff2:	627b      	str	r3, [r7, #36]	; 0x24
 800fff4:	e001      	b.n	800fffa <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800fff6:	2312      	movs	r3, #18
 800fff8:	627b      	str	r3, [r7, #36]	; 0x24
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	f383 8810 	msr	PRIMASK, r3
}
 8010004:	46c0      	nop			; (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010008:	0018      	movs	r0, r3
 801000a:	46bd      	mov	sp, r7
 801000c:	b00a      	add	sp, #40	; 0x28
 801000e:	bd80      	pop	{r7, pc}
 8010010:	20000010 	.word	0x20000010
 8010014:	f0f0f0ef 	.word	0xf0f0f0ef
 8010018:	200087b4 	.word	0x200087b4
 801001c:	20008848 	.word	0x20008848

08010020 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010026:	4b1a      	ldr	r3, [pc, #104]	; (8010090 <_tx_thread_shell_entry+0x70>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010034:	0018      	movs	r0, r3
 8010036:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010038:	4b16      	ldr	r3, [pc, #88]	; (8010094 <_tx_thread_shell_entry+0x74>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d004      	beq.n	801004a <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010040:	4b14      	ldr	r3, [pc, #80]	; (8010094 <_tx_thread_shell_entry+0x74>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	0010      	movs	r0, r2
 8010048:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801004a:	f3ef 8310 	mrs	r3, PRIMASK
 801004e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010050:	b672      	cpsid	i
    return(primask_value);
 8010052:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8010054:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2201      	movs	r2, #1
 8010060:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2200      	movs	r2, #0
 8010066:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <_tx_thread_shell_entry+0x78>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <_tx_thread_shell_entry+0x78>)
 8010070:	601a      	str	r2, [r3, #0]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f383 8810 	msr	PRIMASK, r3
}
 801007c:	46c0      	nop			; (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	0018      	movs	r0, r3
 8010082:	f000 fa2f 	bl	80104e4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010086:	46c0      	nop			; (mov r8, r8)
 8010088:	46bd      	mov	sp, r7
 801008a:	b004      	add	sp, #16
 801008c:	bd80      	pop	{r7, pc}
 801008e:	46c0      	nop			; (mov r8, r8)
 8010090:	200087b0 	.word	0x200087b0
 8010094:	2000884c 	.word	0x2000884c
 8010098:	20008848 	.word	0x20008848

0801009c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b08e      	sub	sp, #56	; 0x38
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80100a4:	f3ef 8310 	mrs	r3, PRIMASK
 80100a8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80100aa:	b672      	cpsid	i
    return(primask_value);
 80100ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80100ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80100b0:	4b35      	ldr	r3, [pc, #212]	; (8010188 <_tx_thread_sleep+0xec>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80100b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d108      	bne.n	80100ce <_tx_thread_sleep+0x32>
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80100c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c2:	f383 8810 	msr	PRIMASK, r3
}
 80100c6:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80100c8:	2313      	movs	r3, #19
 80100ca:	637b      	str	r3, [r7, #52]	; 0x34
 80100cc:	e056      	b.n	801017c <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80100ce:	f3ef 8305 	mrs	r3, IPSR
 80100d2:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 80100d4:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80100d6:	4b2d      	ldr	r3, [pc, #180]	; (801018c <_tx_thread_sleep+0xf0>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4313      	orrs	r3, r2
 80100dc:	d008      	beq.n	80100f0 <_tx_thread_sleep+0x54>
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	f383 8810 	msr	PRIMASK, r3
}
 80100e8:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80100ea:	2313      	movs	r3, #19
 80100ec:	637b      	str	r3, [r7, #52]	; 0x34
 80100ee:	e045      	b.n	801017c <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80100f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100f2:	4b27      	ldr	r3, [pc, #156]	; (8010190 <_tx_thread_sleep+0xf4>)
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d108      	bne.n	801010a <_tx_thread_sleep+0x6e>
 80100f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	f383 8810 	msr	PRIMASK, r3
}
 8010102:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010104:	2313      	movs	r3, #19
 8010106:	637b      	str	r3, [r7, #52]	; 0x34
 8010108:	e038      	b.n	801017c <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d108      	bne.n	8010122 <_tx_thread_sleep+0x86>
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	f383 8810 	msr	PRIMASK, r3
}
 801011a:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801011c:	2300      	movs	r3, #0
 801011e:	637b      	str	r3, [r7, #52]	; 0x34
 8010120:	e02c      	b.n	801017c <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010122:	4b1c      	ldr	r3, [pc, #112]	; (8010194 <_tx_thread_sleep+0xf8>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d008      	beq.n	801013c <_tx_thread_sleep+0xa0>
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	f383 8810 	msr	PRIMASK, r3
}
 8010134:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010136:	2313      	movs	r3, #19
 8010138:	637b      	str	r3, [r7, #52]	; 0x34
 801013a:	e01f      	b.n	801017c <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013e:	2204      	movs	r2, #4
 8010140:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010144:	2201      	movs	r2, #1
 8010146:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	2284      	movs	r2, #132	; 0x84
 801014c:	2100      	movs	r1, #0
 801014e:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010156:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <_tx_thread_sleep+0xf8>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	4b0d      	ldr	r3, [pc, #52]	; (8010194 <_tx_thread_sleep+0xf8>)
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010162:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f383 8810 	msr	PRIMASK, r3
}
 801016a:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801016c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016e:	0018      	movs	r0, r3
 8010170:	f000 f9b8 	bl	80104e4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010176:	2284      	movs	r2, #132	; 0x84
 8010178:	589b      	ldr	r3, [r3, r2]
 801017a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801017c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801017e:	0018      	movs	r0, r3
 8010180:	46bd      	mov	sp, r7
 8010182:	b00e      	add	sp, #56	; 0x38
 8010184:	bd80      	pop	{r7, pc}
 8010186:	46c0      	nop			; (mov r8, r8)
 8010188:	200087b0 	.word	0x200087b0
 801018c:	20000010 	.word	0x20000010
 8010190:	200088f8 	.word	0x200088f8
 8010194:	20008848 	.word	0x20008848

08010198 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b08a      	sub	sp, #40	; 0x28
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80101a0:	f3ef 8310 	mrs	r3, PRIMASK
 80101a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80101a6:	b672      	cpsid	i
    return(primask_value);
 80101a8:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80101aa:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80101ac:	4b2e      	ldr	r3, [pc, #184]	; (8010268 <_tx_thread_suspend+0xd0>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d130      	bne.n	801021c <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 80101ba:	2300      	movs	r3, #0
 80101bc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80101be:	f3ef 8305 	mrs	r3, IPSR
 80101c2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80101c4:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80101c6:	4b29      	ldr	r3, [pc, #164]	; (801026c <_tx_thread_suspend+0xd4>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	d109      	bne.n	80101e2 <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 80101ce:	69fa      	ldr	r2, [r7, #28]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d105      	bne.n	80101e2 <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 80101d6:	4b26      	ldr	r3, [pc, #152]	; (8010270 <_tx_thread_suspend+0xd8>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 80101de:	2314      	movs	r3, #20
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d133      	bne.n	8010250 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2203      	movs	r2, #3
 80101ec:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80101fa:	4b1d      	ldr	r3, [pc, #116]	; (8010270 <_tx_thread_suspend+0xd8>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	1c5a      	adds	r2, r3, #1
 8010200:	4b1b      	ldr	r3, [pc, #108]	; (8010270 <_tx_thread_suspend+0xd8>)
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	6a3b      	ldr	r3, [r7, #32]
 8010206:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	f383 8810 	msr	PRIMASK, r3
}
 801020e:	46c0      	nop			; (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	0018      	movs	r0, r3
 8010214:	f000 f966 	bl	80104e4 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8010218:	2300      	movs	r3, #0
 801021a:	e020      	b.n	801025e <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010220:	2b02      	cmp	r3, #2
 8010222:	d102      	bne.n	801022a <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8010224:	2314      	movs	r3, #20
 8010226:	627b      	str	r3, [r7, #36]	; 0x24
 8010228:	e012      	b.n	8010250 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801022e:	2b01      	cmp	r3, #1
 8010230:	d102      	bne.n	8010238 <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8010232:	2314      	movs	r3, #20
 8010234:	627b      	str	r3, [r7, #36]	; 0x24
 8010236:	e00b      	b.n	8010250 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023c:	2b03      	cmp	r3, #3
 801023e:	d102      	bne.n	8010246 <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8010240:	2300      	movs	r3, #0
 8010242:	627b      	str	r3, [r7, #36]	; 0x24
 8010244:	e004      	b.n	8010250 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 801024c:	2300      	movs	r3, #0
 801024e:	627b      	str	r3, [r7, #36]	; 0x24
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f383 8810 	msr	PRIMASK, r3
}
 801025a:	46c0      	nop			; (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 801025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 801025e:	0018      	movs	r0, r3
 8010260:	46bd      	mov	sp, r7
 8010262:	b00a      	add	sp, #40	; 0x28
 8010264:	bd80      	pop	{r7, pc}
 8010266:	46c0      	nop			; (mov r8, r8)
 8010268:	200087b0 	.word	0x200087b0
 801026c:	20000010 	.word	0x20000010
 8010270:	20008848 	.word	0x20008848

08010274 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801027a:	4b16      	ldr	r3, [pc, #88]	; (80102d4 <_tx_thread_system_preempt_check+0x60>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d121      	bne.n	80102ca <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010286:	4b14      	ldr	r3, [pc, #80]	; (80102d8 <_tx_thread_system_preempt_check+0x64>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801028c:	4b13      	ldr	r3, [pc, #76]	; (80102dc <_tx_thread_system_preempt_check+0x68>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8010292:	69ba      	ldr	r2, [r7, #24]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	429a      	cmp	r2, r3
 8010298:	d017      	beq.n	80102ca <_tx_thread_system_preempt_check+0x56>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801029a:	4b11      	ldr	r3, [pc, #68]	; (80102e0 <_tx_thread_system_preempt_check+0x6c>)
 801029c:	2280      	movs	r2, #128	; 0x80
 801029e:	0552      	lsls	r2, r2, #21
 80102a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80102a2:	f3ef 8305 	mrs	r3, IPSR
 80102a6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80102a8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10c      	bne.n	80102c8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80102ae:	f3ef 8310 	mrs	r3, PRIMASK
 80102b2:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 80102b4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 80102b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80102b8:	b662      	cpsie	i
}
 80102ba:	46c0      	nop			; (mov r8, r8)
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f383 8810 	msr	PRIMASK, r3
}
 80102c6:	46c0      	nop			; (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 80102c8:	46c0      	nop			; (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80102ca:	46c0      	nop			; (mov r8, r8)
 80102cc:	46bd      	mov	sp, r7
 80102ce:	b008      	add	sp, #32
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	46c0      	nop			; (mov r8, r8)
 80102d4:	20008848 	.word	0x20008848
 80102d8:	200087b0 	.word	0x200087b0
 80102dc:	200087b4 	.word	0x200087b4
 80102e0:	e000ed04 	.word	0xe000ed04

080102e4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b096      	sub	sp, #88	; 0x58
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80102ec:	f3ef 8310 	mrs	r3, PRIMASK
 80102f0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 80102f2:	b672      	cpsid	i
    return(primask_value);
 80102f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80102f6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d005      	beq.n	801030c <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	334c      	adds	r3, #76	; 0x4c
 8010304:	0018      	movs	r0, r3
 8010306:	f000 fccb 	bl	8010ca0 <_tx_timer_system_deactivate>
 801030a:	e002      	b.n	8010312 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010312:	4b6d      	ldr	r3, [pc, #436]	; (80104c8 <_tx_thread_system_resume+0x1e4>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	1e5a      	subs	r2, r3, #1
 8010318:	4b6b      	ldr	r3, [pc, #428]	; (80104c8 <_tx_thread_system_resume+0x1e4>)
 801031a:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010320:	2b00      	cmp	r3, #0
 8010322:	d000      	beq.n	8010326 <_tx_thread_system_resume+0x42>
 8010324:	e084      	b.n	8010430 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801032a:	2b00      	cmp	r3, #0
 801032c:	d100      	bne.n	8010330 <_tx_thread_system_resume+0x4c>
 801032e:	e098      	b.n	8010462 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010334:	2b00      	cmp	r3, #0
 8010336:	d000      	beq.n	801033a <_tx_thread_system_resume+0x56>
 8010338:	e073      	b.n	8010422 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010344:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010346:	4b61      	ldr	r3, [pc, #388]	; (80104cc <_tx_thread_system_resume+0x1e8>)
 8010348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801034a:	0092      	lsls	r2, r2, #2
 801034c:	58d3      	ldr	r3, [r2, r3]
 801034e:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8010350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010352:	2b00      	cmp	r3, #0
 8010354:	d155      	bne.n	8010402 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8010356:	4b5d      	ldr	r3, [pc, #372]	; (80104cc <_tx_thread_system_resume+0x1e8>)
 8010358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801035a:	0092      	lsls	r2, r2, #2
 801035c:	6879      	ldr	r1, [r7, #4]
 801035e:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801036c:	2201      	movs	r2, #1
 801036e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010370:	409a      	lsls	r2, r3
 8010372:	0013      	movs	r3, r2
 8010374:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8010376:	4b56      	ldr	r3, [pc, #344]	; (80104d0 <_tx_thread_system_resume+0x1ec>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801037c:	431a      	orrs	r2, r3
 801037e:	4b54      	ldr	r3, [pc, #336]	; (80104d0 <_tx_thread_system_resume+0x1ec>)
 8010380:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8010382:	4b54      	ldr	r3, [pc, #336]	; (80104d4 <_tx_thread_system_resume+0x1f0>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010388:	429a      	cmp	r2, r3
 801038a:	d26a      	bcs.n	8010462 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801038c:	4b51      	ldr	r3, [pc, #324]	; (80104d4 <_tx_thread_system_resume+0x1f0>)
 801038e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010390:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8010392:	4b51      	ldr	r3, [pc, #324]	; (80104d8 <_tx_thread_system_resume+0x1f4>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8010398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801039a:	2b00      	cmp	r3, #0
 801039c:	d103      	bne.n	80103a6 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801039e:	4b4e      	ldr	r3, [pc, #312]	; (80104d8 <_tx_thread_system_resume+0x1f4>)
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	e05d      	b.n	8010462 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80103a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d258      	bcs.n	8010462 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80103b0:	4b49      	ldr	r3, [pc, #292]	; (80104d8 <_tx_thread_system_resume+0x1f4>)
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103bc:	f383 8810 	msr	PRIMASK, r3
}
 80103c0:	46c0      	nop			; (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80103c2:	4b41      	ldr	r3, [pc, #260]	; (80104c8 <_tx_thread_system_resume+0x1e4>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80103c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d000      	beq.n	80103d0 <_tx_thread_system_resume+0xec>
 80103ce:	e074      	b.n	80104ba <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80103d0:	4b42      	ldr	r3, [pc, #264]	; (80104dc <_tx_thread_system_resume+0x1f8>)
 80103d2:	2280      	movs	r2, #128	; 0x80
 80103d4:	0552      	lsls	r2, r2, #21
 80103d6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80103d8:	f3ef 8305 	mrs	r3, IPSR
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10c      	bne.n	80103fe <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80103e4:	f3ef 8310 	mrs	r3, PRIMASK
 80103e8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 80103ec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80103ee:	b662      	cpsie	i
}
 80103f0:	46c0      	nop			; (mov r8, r8)
 80103f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103f6:	6a3b      	ldr	r3, [r7, #32]
 80103f8:	f383 8810 	msr	PRIMASK, r3
}
 80103fc:	46c0      	nop			; (mov r8, r8)
}
 80103fe:	46c0      	nop			; (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8010400:	e05b      	b.n	80104ba <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8010402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010406:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801040e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010418:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801041e:	621a      	str	r2, [r3, #32]
 8010420:	e01f      	b.n	8010462 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2203      	movs	r2, #3
 801042c:	631a      	str	r2, [r3, #48]	; 0x30
 801042e:	e018      	b.n	8010462 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010434:	2b01      	cmp	r3, #1
 8010436:	d014      	beq.n	8010462 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801043c:	2b02      	cmp	r3, #2
 801043e:	d010      	beq.n	8010462 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010444:	2b00      	cmp	r3, #0
 8010446:	d106      	bne.n	8010456 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	631a      	str	r2, [r3, #48]	; 0x30
 8010454:	e005      	b.n	8010462 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2203      	movs	r2, #3
 8010460:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010462:	4b1f      	ldr	r3, [pc, #124]	; (80104e0 <_tx_thread_system_resume+0x1fc>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	63bb      	str	r3, [r7, #56]	; 0x38
 8010468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801046a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f383 8810 	msr	PRIMASK, r3
}
 8010472:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010474:	4b18      	ldr	r3, [pc, #96]	; (80104d8 <_tx_thread_system_resume+0x1f4>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801047a:	429a      	cmp	r2, r3
 801047c:	d020      	beq.n	80104c0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801047e:	4b12      	ldr	r3, [pc, #72]	; (80104c8 <_tx_thread_system_resume+0x1e4>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8010484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010486:	2b00      	cmp	r3, #0
 8010488:	d11a      	bne.n	80104c0 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801048a:	4b14      	ldr	r3, [pc, #80]	; (80104dc <_tx_thread_system_resume+0x1f8>)
 801048c:	2280      	movs	r2, #128	; 0x80
 801048e:	0552      	lsls	r2, r2, #21
 8010490:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010492:	f3ef 8305 	mrs	r3, IPSR
 8010496:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010498:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801049a:	2b00      	cmp	r3, #0
 801049c:	d10f      	bne.n	80104be <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801049e:	f3ef 8310 	mrs	r3, PRIMASK
 80104a2:	617b      	str	r3, [r7, #20]
    return(primask_value);
 80104a4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 80104a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80104a8:	b662      	cpsie	i
}
 80104aa:	46c0      	nop			; (mov r8, r8)
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f383 8810 	msr	PRIMASK, r3
}
 80104b6:	46c0      	nop			; (mov r8, r8)
}
 80104b8:	e001      	b.n	80104be <_tx_thread_system_resume+0x1da>
                                return;
 80104ba:	46c0      	nop			; (mov r8, r8)
 80104bc:	e000      	b.n	80104c0 <_tx_thread_system_resume+0x1dc>
 80104be:	46c0      	nop			; (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80104c0:	46bd      	mov	sp, r7
 80104c2:	b016      	add	sp, #88	; 0x58
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	20008848 	.word	0x20008848
 80104cc:	200087c8 	.word	0x200087c8
 80104d0:	200087c0 	.word	0x200087c0
 80104d4:	200087c4 	.word	0x200087c4
 80104d8:	200087b4 	.word	0x200087b4
 80104dc:	e000ed04 	.word	0xe000ed04
 80104e0:	200087b0 	.word	0x200087b0

080104e4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b09c      	sub	sp, #112	; 0x70
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80104ec:	4bb9      	ldr	r3, [pc, #740]	; (80107d4 <_tx_thread_system_suspend+0x2f0>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80104f2:	f3ef 8310 	mrs	r3, PRIMASK
 80104f6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 80104f8:	b672      	cpsid	i
    return(primask_value);
 80104fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80104fc:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010502:	429a      	cmp	r2, r3
 8010504:	d111      	bne.n	801052a <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801050a:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801050c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801050e:	2b00      	cmp	r3, #0
 8010510:	d007      	beq.n	8010522 <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8010512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010514:	3301      	adds	r3, #1
 8010516:	d004      	beq.n	8010522 <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	334c      	adds	r3, #76	; 0x4c
 801051c:	0018      	movs	r0, r3
 801051e:	f000 fb61 	bl	8010be4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	69da      	ldr	r2, [r3, #28]
 8010526:	4bac      	ldr	r3, [pc, #688]	; (80107d8 <_tx_thread_system_suspend+0x2f4>)
 8010528:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801052a:	4bac      	ldr	r3, [pc, #688]	; (80107dc <_tx_thread_system_suspend+0x2f8>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	1e5a      	subs	r2, r3, #1
 8010530:	4baa      	ldr	r3, [pc, #680]	; (80107dc <_tx_thread_system_suspend+0x2f8>)
 8010532:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010538:	2b01      	cmp	r3, #1
 801053a:	d000      	beq.n	801053e <_tx_thread_system_suspend+0x5a>
 801053c:	e118      	b.n	8010770 <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010548:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8010550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	429a      	cmp	r2, r3
 8010556:	d016      	beq.n	8010586 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801055e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010562:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8010564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010568:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801056a:	4b9d      	ldr	r3, [pc, #628]	; (80107e0 <_tx_thread_system_suspend+0x2fc>)
 801056c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801056e:	0092      	lsls	r2, r2, #2
 8010570:	58d3      	ldr	r3, [r2, r3]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	429a      	cmp	r2, r3
 8010576:	d000      	beq.n	801057a <_tx_thread_system_suspend+0x96>
 8010578:	e0c9      	b.n	801070e <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801057a:	4b99      	ldr	r3, [pc, #612]	; (80107e0 <_tx_thread_system_suspend+0x2fc>)
 801057c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801057e:	0092      	lsls	r2, r2, #2
 8010580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010582:	50d1      	str	r1, [r2, r3]
 8010584:	e0c3      	b.n	801070e <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8010586:	4b96      	ldr	r3, [pc, #600]	; (80107e0 <_tx_thread_system_suspend+0x2fc>)
 8010588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801058a:	0092      	lsls	r2, r2, #2
 801058c:	2100      	movs	r1, #0
 801058e:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8010590:	2201      	movs	r2, #1
 8010592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010594:	409a      	lsls	r2, r3
 8010596:	0013      	movs	r3, r2
 8010598:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801059a:	4b92      	ldr	r3, [pc, #584]	; (80107e4 <_tx_thread_system_suspend+0x300>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80105a0:	43d2      	mvns	r2, r2
 80105a2:	401a      	ands	r2, r3
 80105a4:	4b8f      	ldr	r3, [pc, #572]	; (80107e4 <_tx_thread_system_suspend+0x300>)
 80105a6:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80105a8:	2300      	movs	r3, #0
 80105aa:	653b      	str	r3, [r7, #80]	; 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80105ac:	4b8d      	ldr	r3, [pc, #564]	; (80107e4 <_tx_thread_system_suspend+0x300>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80105b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d12b      	bne.n	8010610 <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80105b8:	4b8b      	ldr	r3, [pc, #556]	; (80107e8 <_tx_thread_system_suspend+0x304>)
 80105ba:	2220      	movs	r2, #32
 80105bc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80105be:	4b8b      	ldr	r3, [pc, #556]	; (80107ec <_tx_thread_system_suspend+0x308>)
 80105c0:	2200      	movs	r2, #0
 80105c2:	601a      	str	r2, [r3, #0]
 80105c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105c6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ca:	f383 8810 	msr	PRIMASK, r3
}
 80105ce:	46c0      	nop			; (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80105d0:	4b82      	ldr	r3, [pc, #520]	; (80107dc <_tx_thread_system_suspend+0x2f8>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (combined_flags == ((ULONG) 0))
 80105d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d000      	beq.n	80105de <_tx_thread_system_suspend+0xfa>
 80105dc:	e0f2      	b.n	80107c4 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80105de:	4b84      	ldr	r3, [pc, #528]	; (80107f0 <_tx_thread_system_suspend+0x30c>)
 80105e0:	2280      	movs	r2, #128	; 0x80
 80105e2:	0552      	lsls	r2, r2, #21
 80105e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80105e6:	f3ef 8305 	mrs	r3, IPSR
 80105ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 80105ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10c      	bne.n	801060c <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80105f2:	f3ef 8310 	mrs	r3, PRIMASK
 80105f6:	63bb      	str	r3, [r7, #56]	; 0x38
    return(primask_value);
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_primask_value();
 80105fa:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80105fc:	b662      	cpsie	i
}
 80105fe:	46c0      	nop			; (mov r8, r8)
 8010600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010602:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010606:	f383 8810 	msr	PRIMASK, r3
}
 801060a:	46c0      	nop			; (mov r8, r8)
}
 801060c:	46c0      	nop			; (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801060e:	e0d9      	b.n	80107c4 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010610:	2300      	movs	r3, #0
 8010612:	66bb      	str	r3, [r7, #104]	; 0x68
 8010614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010616:	425a      	negs	r2, r3
 8010618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801061a:	4013      	ands	r3, r2
 801061c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801061e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010620:	2b0f      	cmp	r3, #15
 8010622:	d80e      	bhi.n	8010642 <_tx_thread_system_suspend+0x15e>
 8010624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010626:	2b03      	cmp	r3, #3
 8010628:	d905      	bls.n	8010636 <_tx_thread_system_suspend+0x152>
 801062a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801062c:	089b      	lsrs	r3, r3, #2
 801062e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010632:	3302      	adds	r3, #2
 8010634:	66bb      	str	r3, [r7, #104]	; 0x68
 8010636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010638:	085b      	lsrs	r3, r3, #1
 801063a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801063c:	18d3      	adds	r3, r2, r3
 801063e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010640:	e060      	b.n	8010704 <_tx_thread_system_suspend+0x220>
 8010642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010644:	2bff      	cmp	r3, #255	; 0xff
 8010646:	d814      	bhi.n	8010672 <_tx_thread_system_suspend+0x18e>
 8010648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801064a:	091b      	lsrs	r3, r3, #4
 801064c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801064e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010650:	3304      	adds	r3, #4
 8010652:	66bb      	str	r3, [r7, #104]	; 0x68
 8010654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010656:	2b03      	cmp	r3, #3
 8010658:	d905      	bls.n	8010666 <_tx_thread_system_suspend+0x182>
 801065a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801065c:	089b      	lsrs	r3, r3, #2
 801065e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010662:	3302      	adds	r3, #2
 8010664:	66bb      	str	r3, [r7, #104]	; 0x68
 8010666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010668:	085b      	lsrs	r3, r3, #1
 801066a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801066c:	18d3      	adds	r3, r2, r3
 801066e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010670:	e048      	b.n	8010704 <_tx_thread_system_suspend+0x220>
 8010672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010674:	2380      	movs	r3, #128	; 0x80
 8010676:	025b      	lsls	r3, r3, #9
 8010678:	429a      	cmp	r2, r3
 801067a:	d21d      	bcs.n	80106b8 <_tx_thread_system_suspend+0x1d4>
 801067c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801067e:	0a1b      	lsrs	r3, r3, #8
 8010680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010684:	3308      	adds	r3, #8
 8010686:	66bb      	str	r3, [r7, #104]	; 0x68
 8010688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068a:	2b0f      	cmp	r3, #15
 801068c:	d905      	bls.n	801069a <_tx_thread_system_suspend+0x1b6>
 801068e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010690:	091b      	lsrs	r3, r3, #4
 8010692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010696:	3304      	adds	r3, #4
 8010698:	66bb      	str	r3, [r7, #104]	; 0x68
 801069a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801069c:	2b03      	cmp	r3, #3
 801069e:	d905      	bls.n	80106ac <_tx_thread_system_suspend+0x1c8>
 80106a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a2:	089b      	lsrs	r3, r3, #2
 80106a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106a8:	3302      	adds	r3, #2
 80106aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ae:	085b      	lsrs	r3, r3, #1
 80106b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106b2:	18d3      	adds	r3, r2, r3
 80106b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80106b6:	e025      	b.n	8010704 <_tx_thread_system_suspend+0x220>
 80106b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ba:	0c1b      	lsrs	r3, r3, #16
 80106bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106c0:	3310      	adds	r3, #16
 80106c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80106c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106c6:	2bff      	cmp	r3, #255	; 0xff
 80106c8:	d905      	bls.n	80106d6 <_tx_thread_system_suspend+0x1f2>
 80106ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106cc:	0a1b      	lsrs	r3, r3, #8
 80106ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106d2:	3308      	adds	r3, #8
 80106d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80106d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106d8:	2b0f      	cmp	r3, #15
 80106da:	d905      	bls.n	80106e8 <_tx_thread_system_suspend+0x204>
 80106dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106de:	091b      	lsrs	r3, r3, #4
 80106e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106e4:	3304      	adds	r3, #4
 80106e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80106e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d905      	bls.n	80106fa <_tx_thread_system_suspend+0x216>
 80106ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106f0:	089b      	lsrs	r3, r3, #2
 80106f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106f6:	3302      	adds	r3, #2
 80106f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80106fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106fc:	085b      	lsrs	r3, r3, #1
 80106fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010700:	18d3      	adds	r3, r2, r3
 8010702:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8010704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010708:	18d2      	adds	r2, r2, r3
 801070a:	4b37      	ldr	r3, [pc, #220]	; (80107e8 <_tx_thread_system_suspend+0x304>)
 801070c:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801070e:	4b37      	ldr	r3, [pc, #220]	; (80107ec <_tx_thread_system_suspend+0x308>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d12b      	bne.n	8010770 <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010718:	4b33      	ldr	r3, [pc, #204]	; (80107e8 <_tx_thread_system_suspend+0x304>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	4b30      	ldr	r3, [pc, #192]	; (80107e0 <_tx_thread_system_suspend+0x2fc>)
 801071e:	0092      	lsls	r2, r2, #2
 8010720:	58d2      	ldr	r2, [r2, r3]
 8010722:	4b32      	ldr	r3, [pc, #200]	; (80107ec <_tx_thread_system_suspend+0x308>)
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010728:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	f383 8810 	msr	PRIMASK, r3
}
 8010730:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010732:	4b2a      	ldr	r3, [pc, #168]	; (80107dc <_tx_thread_system_suspend+0x2f8>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (combined_flags == ((ULONG) 0))
 8010738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073a:	2b00      	cmp	r3, #0
 801073c:	d144      	bne.n	80107c8 <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801073e:	4b2c      	ldr	r3, [pc, #176]	; (80107f0 <_tx_thread_system_suspend+0x30c>)
 8010740:	2280      	movs	r2, #128	; 0x80
 8010742:	0552      	lsls	r2, r2, #21
 8010744:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010746:	f3ef 8305 	mrs	r3, IPSR
 801074a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10c      	bne.n	801076c <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010752:	f3ef 8310 	mrs	r3, PRIMASK
 8010756:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 801075a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801075c:	b662      	cpsie	i
}
 801075e:	46c0      	nop			; (mov r8, r8)
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	f383 8810 	msr	PRIMASK, r3
}
 801076a:	46c0      	nop			; (mov r8, r8)
}
 801076c:	46c0      	nop			; (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801076e:	e02b      	b.n	80107c8 <_tx_thread_system_suspend+0x2e4>
 8010770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010772:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	f383 8810 	msr	PRIMASK, r3
}
 801077a:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801077c:	4b1b      	ldr	r3, [pc, #108]	; (80107ec <_tx_thread_system_suspend+0x308>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010782:	429a      	cmp	r2, r3
 8010784:	d022      	beq.n	80107cc <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010786:	4b15      	ldr	r3, [pc, #84]	; (80107dc <_tx_thread_system_suspend+0x2f8>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (combined_flags == ((ULONG) 0))
 801078c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078e:	2b00      	cmp	r3, #0
 8010790:	d11c      	bne.n	80107cc <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010792:	4b17      	ldr	r3, [pc, #92]	; (80107f0 <_tx_thread_system_suspend+0x30c>)
 8010794:	2280      	movs	r2, #128	; 0x80
 8010796:	0552      	lsls	r2, r2, #21
 8010798:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801079a:	f3ef 8305 	mrs	r3, IPSR
 801079e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80107a0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10c      	bne.n	80107c0 <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107a6:	f3ef 8310 	mrs	r3, PRIMASK
 80107aa:	613b      	str	r3, [r7, #16]
    return(primask_value);
 80107ac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 80107ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80107b0:	b662      	cpsie	i
}
 80107b2:	46c0      	nop			; (mov r8, r8)
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	f383 8810 	msr	PRIMASK, r3
}
 80107be:	46c0      	nop			; (mov r8, r8)
}
 80107c0:	46c0      	nop			; (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80107c2:	e003      	b.n	80107cc <_tx_thread_system_suspend+0x2e8>
                return;
 80107c4:	46c0      	nop			; (mov r8, r8)
 80107c6:	e002      	b.n	80107ce <_tx_thread_system_suspend+0x2ea>
            return;
 80107c8:	46c0      	nop			; (mov r8, r8)
 80107ca:	e000      	b.n	80107ce <_tx_thread_system_suspend+0x2ea>
    return;
 80107cc:	46c0      	nop			; (mov r8, r8)
}
 80107ce:	46bd      	mov	sp, r7
 80107d0:	b01c      	add	sp, #112	; 0x70
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	200087b0 	.word	0x200087b0
 80107d8:	20008db4 	.word	0x20008db4
 80107dc:	20008848 	.word	0x20008848
 80107e0:	200087c8 	.word	0x200087c8
 80107e4:	200087c0 	.word	0x200087c0
 80107e8:	200087c4 	.word	0x200087c4
 80107ec:	200087b4 	.word	0x200087b4
 80107f0:	e000ed04 	.word	0xe000ed04

080107f4 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b092      	sub	sp, #72	; 0x48
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 80107fc:	2300      	movs	r3, #0
 80107fe:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010800:	f3ef 8310 	mrs	r3, PRIMASK
 8010804:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010806:	b672      	cpsid	i
    return(primask_value);
 8010808:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 801080a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	334c      	adds	r3, #76	; 0x4c
 8010810:	0018      	movs	r0, r3
 8010812:	f000 fa45 	bl	8010ca0 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081a:	2b02      	cmp	r3, #2
 801081c:	d108      	bne.n	8010830 <_tx_thread_terminate+0x3c>
 801081e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010820:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	f383 8810 	msr	PRIMASK, r3
}
 8010828:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 801082a:	2300      	movs	r3, #0
 801082c:	643b      	str	r3, [r7, #64]	; 0x40
 801082e:	e082      	b.n	8010936 <_tx_thread_terminate+0x142>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010834:	2b01      	cmp	r3, #1
 8010836:	d100      	bne.n	801083a <_tx_thread_terminate+0x46>
 8010838:	e077      	b.n	801092a <_tx_thread_terminate+0x136>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 801083a:	4b42      	ldr	r3, [pc, #264]	; (8010944 <_tx_thread_terminate+0x150>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	1c5a      	adds	r2, r3, #1
 8010840:	4b40      	ldr	r3, [pc, #256]	; (8010944 <_tx_thread_terminate+0x150>)
 8010842:	601a      	str	r2, [r3, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010848:	2b00      	cmp	r3, #0
 801084a:	d11e      	bne.n	801088a <_tx_thread_terminate+0x96>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2202      	movs	r2, #2
 8010850:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 801085e:	4b39      	ldr	r3, [pc, #228]	; (8010944 <_tx_thread_terminate+0x150>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	1c5a      	adds	r2, r3, #1
 8010864:	4b37      	ldr	r3, [pc, #220]	; (8010944 <_tx_thread_terminate+0x150>)
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801086a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	f383 8810 	msr	PRIMASK, r3
}
 8010872:	46c0      	nop			; (mov r8, r8)
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	0018      	movs	r0, r3
 8010878:	f7ff fe34 	bl	80104e4 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801087c:	f3ef 8310 	mrs	r3, PRIMASK
 8010880:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010882:	b672      	cpsid	i
    return(primask_value);
 8010884:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 8010886:	647b      	str	r3, [r7, #68]	; 0x44
 8010888:	e02f      	b.n	80108ea <_tx_thread_terminate+0xf6>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2202      	movs	r2, #2
 801088e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801089a:	63fb      	str	r3, [r7, #60]	; 0x3c

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	22ac      	movs	r2, #172	; 0xac
 80108a0:	589b      	ldr	r3, [r3, r2]
 80108a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80108a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108aa:	f383 8810 	msr	PRIMASK, r3
}
 80108ae:	46c0      	nop			; (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 80108b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d004      	beq.n	80108c0 <_tx_thread_terminate+0xcc>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 80108b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108bc:	0010      	movs	r0, r2
 80108be:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80108c0:	f3ef 8310 	mrs	r3, PRIMASK
 80108c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108c6:	b672      	cpsid	i
    return(primask_value);
 80108c8:	69bb      	ldr	r3, [r7, #24]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 80108ca:	647b      	str	r3, [r7, #68]	; 0x44
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	639a      	str	r2, [r3, #56]	; 0x38
 80108d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	f383 8810 	msr	PRIMASK, r3
}
 80108dc:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80108de:	f3ef 8310 	mrs	r3, PRIMASK
 80108e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108e4:	b672      	cpsid	i
    return(primask_value);
 80108e6:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 80108e8:	647b      	str	r3, [r7, #68]	; 0x44
 80108ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f383 8810 	msr	PRIMASK, r3
}
 80108f4:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 80108f6:	4b14      	ldr	r3, [pc, #80]	; (8010948 <_tx_thread_terminate+0x154>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d004      	beq.n	8010908 <_tx_thread_terminate+0x114>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 80108fe:	4b12      	ldr	r3, [pc, #72]	; (8010948 <_tx_thread_terminate+0x154>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	0010      	movs	r0, r2
 8010906:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010908:	f3ef 8310 	mrs	r3, PRIMASK
 801090c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801090e:	b672      	cpsid	i
    return(primask_value);
 8010910:	68fb      	ldr	r3, [r7, #12]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8010912:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8010914:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <_tx_thread_terminate+0x150>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	1e5a      	subs	r2, r3, #1
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <_tx_thread_terminate+0x150>)
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010920:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f383 8810 	msr	PRIMASK, r3
}
 8010928:	e005      	b.n	8010936 <_tx_thread_terminate+0x142>
 801092a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801092c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	f383 8810 	msr	PRIMASK, r3
}
 8010934:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010936:	f7ff fc9d 	bl	8010274 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 801093a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 801093c:	0018      	movs	r0, r3
 801093e:	46bd      	mov	sp, r7
 8010940:	b012      	add	sp, #72	; 0x48
 8010942:	bd80      	pop	{r7, pc}
 8010944:	20008848 	.word	0x20008848
 8010948:	2000884c 	.word	0x2000884c

0801094c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010952:	4b1f      	ldr	r3, [pc, #124]	; (80109d0 <_tx_thread_time_slice+0x84>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010958:	f3ef 8310 	mrs	r3, PRIMASK
 801095c:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801095e:	b672      	cpsid	i
    return(primask_value);
 8010960:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8010962:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010964:	4b1b      	ldr	r3, [pc, #108]	; (80109d4 <_tx_thread_time_slice+0x88>)
 8010966:	2200      	movs	r2, #0
 8010968:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d024      	beq.n	80109ba <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010974:	2b00      	cmp	r3, #0
 8010976:	d120      	bne.n	80109ba <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	69da      	ldr	r2, [r3, #28]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	699a      	ldr	r2, [r3, #24]
 8010984:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <_tx_thread_time_slice+0x8c>)
 8010986:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6a1b      	ldr	r3, [r3, #32]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	429a      	cmp	r2, r3
 8010990:	d013      	beq.n	80109ba <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801099a:	429a      	cmp	r2, r3
 801099c:	d10d      	bne.n	80109ba <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6a19      	ldr	r1, [r3, #32]
 80109a6:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <_tx_thread_time_slice+0x90>)
 80109a8:	0092      	lsls	r2, r2, #2
 80109aa:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <_tx_thread_time_slice+0x94>)
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	4b0a      	ldr	r3, [pc, #40]	; (80109dc <_tx_thread_time_slice+0x90>)
 80109b2:	0092      	lsls	r2, r2, #2
 80109b4:	58d2      	ldr	r2, [r2, r3]
 80109b6:	4b0b      	ldr	r3, [pc, #44]	; (80109e4 <_tx_thread_time_slice+0x98>)
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f383 8810 	msr	PRIMASK, r3
}
 80109c4:	46c0      	nop			; (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	46bd      	mov	sp, r7
 80109ca:	b004      	add	sp, #16
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	46c0      	nop			; (mov r8, r8)
 80109d0:	200087b0 	.word	0x200087b0
 80109d4:	20008858 	.word	0x20008858
 80109d8:	20008db4 	.word	0x20008db4
 80109dc:	200087c8 	.word	0x200087c8
 80109e0:	200087c4 	.word	0x200087c4
 80109e4:	200087b4 	.word	0x200087b4

080109e8 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	; 0x28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80109f4:	f3ef 8310 	mrs	r3, PRIMASK
 80109f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80109fa:	b672      	cpsid	i
    return(primask_value);
 80109fc:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 80109fe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a04:	2b04      	cmp	r3, #4
 8010a06:	d10f      	bne.n	8010a28 <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8010a08:	4b14      	ldr	r3, [pc, #80]	; (8010a5c <_tx_thread_timeout+0x74>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <_tx_thread_timeout+0x74>)
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	6a3b      	ldr	r3, [r7, #32]
 8010a14:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	f383 8810 	msr	PRIMASK, r3
}
 8010a1c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a20:	0018      	movs	r0, r3
 8010a22:	f7ff fc5f 	bl	80102e4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010a26:	e014      	b.n	8010a52 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a2c:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a30:	22ac      	movs	r2, #172	; 0xac
 8010a32:	589b      	ldr	r3, [r3, r2]
 8010a34:	61bb      	str	r3, [r7, #24]
 8010a36:	6a3b      	ldr	r3, [r7, #32]
 8010a38:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f383 8810 	msr	PRIMASK, r3
}
 8010a40:	46c0      	nop			; (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8010a48:	69b9      	ldr	r1, [r7, #24]
 8010a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	0010      	movs	r0, r2
 8010a50:	4798      	blx	r3
}
 8010a52:	46c0      	nop			; (mov r8, r8)
 8010a54:	46bd      	mov	sp, r7
 8010a56:	b00a      	add	sp, #40	; 0x28
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	46c0      	nop			; (mov r8, r8)
 8010a5c:	20008848 	.word	0x20008848

08010a60 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010a66:	f3ef 8310 	mrs	r3, PRIMASK
 8010a6a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010a6c:	b672      	cpsid	i
    return(primask_value);
 8010a6e:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8010a70:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8010a72:	4b09      	ldr	r3, [pc, #36]	; (8010a98 <_tx_timer_expiration_process+0x38>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	1c5a      	adds	r2, r3, #1
 8010a78:	4b07      	ldr	r3, [pc, #28]	; (8010a98 <_tx_timer_expiration_process+0x38>)
 8010a7a:	601a      	str	r2, [r3, #0]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	f383 8810 	msr	PRIMASK, r3
}
 8010a86:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8010a88:	4b04      	ldr	r3, [pc, #16]	; (8010a9c <_tx_timer_expiration_process+0x3c>)
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	f7ff fc2a 	bl	80102e4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010a90:	46c0      	nop			; (mov r8, r8)
 8010a92:	46bd      	mov	sp, r7
 8010a94:	b004      	add	sp, #16
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	20008848 	.word	0x20008848
 8010a9c:	200088f8 	.word	0x200088f8

08010aa0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8010aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aa2:	46ce      	mov	lr, r9
 8010aa4:	4647      	mov	r7, r8
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b08d      	sub	sp, #52	; 0x34
 8010aaa:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8010aac:	4b39      	ldr	r3, [pc, #228]	; (8010b94 <_tx_timer_initialize+0xf4>)
 8010aae:	2200      	movs	r2, #0
 8010ab0:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8010ab2:	4b39      	ldr	r3, [pc, #228]	; (8010b98 <_tx_timer_initialize+0xf8>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010ab8:	4b38      	ldr	r3, [pc, #224]	; (8010b9c <_tx_timer_initialize+0xfc>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8010abe:	4b38      	ldr	r3, [pc, #224]	; (8010ba0 <_tx_timer_initialize+0x100>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8010ac4:	4b37      	ldr	r3, [pc, #220]	; (8010ba4 <_tx_timer_initialize+0x104>)
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8010aca:	4b37      	ldr	r3, [pc, #220]	; (8010ba8 <_tx_timer_initialize+0x108>)
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	230f      	movs	r3, #15
 8010ad0:	18fb      	adds	r3, r7, r3
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	701a      	strb	r2, [r3, #0]
 8010ad6:	2380      	movs	r3, #128	; 0x80
 8010ad8:	60bb      	str	r3, [r7, #8]
 8010ada:	2300      	movs	r3, #0
 8010adc:	613b      	str	r3, [r7, #16]
 8010ade:	e009      	b.n	8010af4 <_tx_timer_initialize+0x54>
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	617a      	str	r2, [r7, #20]
 8010ae6:	220f      	movs	r2, #15
 8010ae8:	18ba      	adds	r2, r7, r2
 8010aea:	7812      	ldrb	r2, [r2, #0]
 8010aec:	701a      	strb	r2, [r3, #0]
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	3301      	adds	r3, #1
 8010af2:	613b      	str	r3, [r7, #16]
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d3f1      	bcc.n	8010ae0 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8010afc:	4b2b      	ldr	r3, [pc, #172]	; (8010bac <_tx_timer_initialize+0x10c>)
 8010afe:	4a2a      	ldr	r2, [pc, #168]	; (8010ba8 <_tx_timer_initialize+0x108>)
 8010b00:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8010b02:	4b2b      	ldr	r3, [pc, #172]	; (8010bb0 <_tx_timer_initialize+0x110>)
 8010b04:	4a28      	ldr	r2, [pc, #160]	; (8010ba8 <_tx_timer_initialize+0x108>)
 8010b06:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8010b08:	4b2a      	ldr	r3, [pc, #168]	; (8010bb4 <_tx_timer_initialize+0x114>)
 8010b0a:	4a2b      	ldr	r2, [pc, #172]	; (8010bb8 <_tx_timer_initialize+0x118>)
 8010b0c:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8010b0e:	4b29      	ldr	r3, [pc, #164]	; (8010bb4 <_tx_timer_initialize+0x114>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	1d1a      	adds	r2, r3, #4
 8010b14:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <_tx_timer_initialize+0x114>)
 8010b16:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8010b18:	4b28      	ldr	r3, [pc, #160]	; (8010bbc <_tx_timer_initialize+0x11c>)
 8010b1a:	4a29      	ldr	r2, [pc, #164]	; (8010bc0 <_tx_timer_initialize+0x120>)
 8010b1c:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8010b1e:	4b29      	ldr	r3, [pc, #164]	; (8010bc4 <_tx_timer_initialize+0x124>)
 8010b20:	2280      	movs	r2, #128	; 0x80
 8010b22:	00d2      	lsls	r2, r2, #3
 8010b24:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8010b26:	4b28      	ldr	r3, [pc, #160]	; (8010bc8 <_tx_timer_initialize+0x128>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8010b2c:	4b23      	ldr	r3, [pc, #140]	; (8010bbc <_tx_timer_initialize+0x11c>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	4b24      	ldr	r3, [pc, #144]	; (8010bc4 <_tx_timer_initialize+0x124>)
 8010b32:	6819      	ldr	r1, [r3, #0]
 8010b34:	4b24      	ldr	r3, [pc, #144]	; (8010bc8 <_tx_timer_initialize+0x128>)
 8010b36:	6818      	ldr	r0, [r3, #0]
 8010b38:	4b23      	ldr	r3, [pc, #140]	; (8010bc8 <_tx_timer_initialize+0x128>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4699      	mov	r9, r3
 8010b3e:	4c23      	ldr	r4, [pc, #140]	; (8010bcc <_tx_timer_initialize+0x12c>)
 8010b40:	46a0      	mov	r8, r4
 8010b42:	4e23      	ldr	r6, [pc, #140]	; (8010bd0 <_tx_timer_initialize+0x130>)
 8010b44:	4d23      	ldr	r5, [pc, #140]	; (8010bd4 <_tx_timer_initialize+0x134>)
 8010b46:	4c24      	ldr	r4, [pc, #144]	; (8010bd8 <_tx_timer_initialize+0x138>)
 8010b48:	2300      	movs	r3, #0
 8010b4a:	469c      	mov	ip, r3
 8010b4c:	4663      	mov	r3, ip
 8010b4e:	9305      	str	r3, [sp, #20]
 8010b50:	2300      	movs	r3, #0
 8010b52:	469c      	mov	ip, r3
 8010b54:	4663      	mov	r3, ip
 8010b56:	9304      	str	r3, [sp, #16]
 8010b58:	464b      	mov	r3, r9
 8010b5a:	9303      	str	r3, [sp, #12]
 8010b5c:	9002      	str	r0, [sp, #8]
 8010b5e:	9101      	str	r1, [sp, #4]
 8010b60:	9200      	str	r2, [sp, #0]
 8010b62:	4643      	mov	r3, r8
 8010b64:	0032      	movs	r2, r6
 8010b66:	0029      	movs	r1, r5
 8010b68:	0020      	movs	r0, r4
 8010b6a:	f7fe ffad 	bl	800fac8 <_tx_thread_create>
 8010b6e:	0003      	movs	r3, r0
 8010b70:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1d9      	bne.n	8010b2c <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8010b78:	4b18      	ldr	r3, [pc, #96]	; (8010bdc <_tx_timer_initialize+0x13c>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8010b7e:	4b18      	ldr	r3, [pc, #96]	; (8010be0 <_tx_timer_initialize+0x140>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8010b84:	46c0      	nop			; (mov r8, r8)
 8010b86:	46bd      	mov	sp, r7
 8010b88:	b007      	add	sp, #28
 8010b8a:	bcc0      	pop	{r6, r7}
 8010b8c:	46b9      	mov	r9, r7
 8010b8e:	46b0      	mov	r8, r6
 8010b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b92:	46c0      	nop			; (mov r8, r8)
 8010b94:	20008854 	.word	0x20008854
 8010b98:	20008db4 	.word	0x20008db4
 8010b9c:	20008858 	.word	0x20008858
 8010ba0:	200088e8 	.word	0x200088e8
 8010ba4:	200088f4 	.word	0x200088f4
 8010ba8:	2000885c 	.word	0x2000885c
 8010bac:	200088dc 	.word	0x200088dc
 8010bb0:	200088e4 	.word	0x200088e4
 8010bb4:	200088e0 	.word	0x200088e0
 8010bb8:	200088d8 	.word	0x200088d8
 8010bbc:	200089a8 	.word	0x200089a8
 8010bc0:	200089b4 	.word	0x200089b4
 8010bc4:	200089ac 	.word	0x200089ac
 8010bc8:	200089b0 	.word	0x200089b0
 8010bcc:	4154494d 	.word	0x4154494d
 8010bd0:	08010d0d 	.word	0x08010d0d
 8010bd4:	08018254 	.word	0x08018254
 8010bd8:	200088f8 	.word	0x200088f8
 8010bdc:	200088ec 	.word	0x200088ec
 8010be0:	200088f0 	.word	0x200088f0

08010be4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d049      	beq.n	8010c8c <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	d046      	beq.n	8010c8c <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	699b      	ldr	r3, [r3, #24]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d142      	bne.n	8010c8c <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b20      	cmp	r3, #32
 8010c0a:	d902      	bls.n	8010c12 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8010c0c:	231f      	movs	r3, #31
 8010c0e:	61bb      	str	r3, [r7, #24]
 8010c10:	e002      	b.n	8010c18 <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8010c18:	4b1e      	ldr	r3, [pc, #120]	; (8010c94 <_tx_timer_system_activate+0xb0>)
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	18d3      	adds	r3, r2, r3
 8010c22:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8010c24:	4b1c      	ldr	r3, [pc, #112]	; (8010c98 <_tx_timer_system_activate+0xb4>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69fa      	ldr	r2, [r7, #28]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d30b      	bcc.n	8010c46 <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8010c2e:	4b1a      	ldr	r3, [pc, #104]	; (8010c98 <_tx_timer_system_activate+0xb4>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	69fa      	ldr	r2, [r7, #28]
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	109b      	asrs	r3, r3, #2
 8010c38:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8010c3a:	4b18      	ldr	r3, [pc, #96]	; (8010c9c <_tx_timer_system_activate+0xb8>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	18d3      	adds	r3, r2, r3
 8010c44:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d109      	bne.n	8010c62 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	601a      	str	r2, [r3, #0]
 8010c60:	e011      	b.n	8010c86 <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	695b      	ldr	r3, [r3, #20]
 8010c6c:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	69fa      	ldr	r2, [r7, #28]
 8010c8a:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8010c8c:	46c0      	nop			; (mov r8, r8)
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	b008      	add	sp, #32
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	200088e4 	.word	0x200088e4
 8010c98:	200088e0 	.word	0x200088e0
 8010c9c:	200088dc 	.word	0x200088dc

08010ca0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	699b      	ldr	r3, [r3, #24]
 8010cac:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d026      	beq.n	8010d02 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d108      	bne.n	8010cd4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d117      	bne.n	8010cfc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	e013      	b.n	8010cfc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	695b      	ldr	r3, [r3, #20]
 8010cd8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d105      	bne.n	8010cfc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	697a      	ldr	r2, [r7, #20]
 8010cf4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	693a      	ldr	r2, [r7, #16]
 8010cfa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	619a      	str	r2, [r3, #24]
    }
}
 8010d02:	46c0      	nop			; (mov r8, r8)
 8010d04:	46bd      	mov	sp, r7
 8010d06:	b006      	add	sp, #24
 8010d08:	bd80      	pop	{r7, pc}
	...

08010d0c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b094      	sub	sp, #80	; 0x50
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8010d14:	2300      	movs	r3, #0
 8010d16:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4a70      	ldr	r2, [pc, #448]	; (8010edc <_tx_timer_thread_entry+0x1d0>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d000      	beq.n	8010d22 <_tx_timer_thread_entry+0x16>
 8010d20:	e0d8      	b.n	8010ed4 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d22:	f3ef 8310 	mrs	r3, PRIMASK
 8010d26:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d28:	b672      	cpsid	i
    return(primask_value);
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8010d2c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8010d2e:	4b6c      	ldr	r3, [pc, #432]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	220c      	movs	r2, #12
 8010d40:	18ba      	adds	r2, r7, r2
 8010d42:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8010d44:	4b66      	ldr	r3, [pc, #408]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8010d4c:	4b64      	ldr	r3, [pc, #400]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	1d1a      	adds	r2, r3, #4
 8010d52:	4b63      	ldr	r3, [pc, #396]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d54:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8010d56:	4b62      	ldr	r3, [pc, #392]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	4b62      	ldr	r3, [pc, #392]	; (8010ee4 <_tx_timer_thread_entry+0x1d8>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d103      	bne.n	8010d6a <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8010d62:	4b61      	ldr	r3, [pc, #388]	; (8010ee8 <_tx_timer_thread_entry+0x1dc>)
 8010d64:	681a      	ldr	r2, [r3, #0]
 8010d66:	4b5e      	ldr	r3, [pc, #376]	; (8010ee0 <_tx_timer_thread_entry+0x1d4>)
 8010d68:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8010d6a:	4b60      	ldr	r3, [pc, #384]	; (8010eec <_tx_timer_thread_entry+0x1e0>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	601a      	str	r2, [r3, #0]
 8010d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d72:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d76:	f383 8810 	msr	PRIMASK, r3
}
 8010d7a:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8010d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d82:	b672      	cpsid	i
    return(primask_value);
 8010d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8010d86:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8010d88:	e07d      	b.n	8010e86 <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8010d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d102      	bne.n	8010da6 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8010da0:	2300      	movs	r3, #0
 8010da2:	60fb      	str	r3, [r7, #12]
 8010da4:	e00e      	b.n	8010dc4 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8010da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da8:	695b      	ldr	r3, [r3, #20]
 8010daa:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8010db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010db6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	220c      	movs	r2, #12
 8010dbc:	18ba      	adds	r2, r7, r2
 8010dbe:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8010dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b20      	cmp	r3, #32
 8010dca:	d911      	bls.n	8010df0 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	3b20      	subs	r3, #32
 8010dd2:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8010dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8010ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dde:	2208      	movs	r2, #8
 8010de0:	18ba      	adds	r2, r7, r2
 8010de2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8010de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010de8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8010dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dec:	60bb      	str	r3, [r7, #8]
 8010dee:	e01a      	b.n	8010e26 <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8010df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df2:	689b      	ldr	r3, [r3, #8]
 8010df4:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8010df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8010dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dfe:	685a      	ldr	r2, [r3, #4]
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8010e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d009      	beq.n	8010e20 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8010e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0e:	2208      	movs	r2, #8
 8010e10:	18ba      	adds	r2, r7, r2
 8010e12:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8010e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e18:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8010e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e1c:	60bb      	str	r3, [r7, #8]
 8010e1e:	e002      	b.n	8010e26 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8010e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e22:	2200      	movs	r2, #0
 8010e24:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8010e26:	4b32      	ldr	r3, [pc, #200]	; (8010ef0 <_tx_timer_thread_entry+0x1e4>)
 8010e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	f383 8810 	msr	PRIMASK, r3
}
 8010e36:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8010e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d003      	beq.n	8010e46 <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 8010e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e42:	0010      	movs	r0, r2
 8010e44:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010e46:	f3ef 8310 	mrs	r3, PRIMASK
 8010e4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010e4c:	b672      	cpsid	i
    return(primask_value);
 8010e4e:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8010e50:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8010e52:	4b27      	ldr	r3, [pc, #156]	; (8010ef0 <_tx_timer_thread_entry+0x1e4>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d106      	bne.n	8010e6e <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8010e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e62:	2200      	movs	r2, #0
 8010e64:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8010e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e68:	0018      	movs	r0, r3
 8010e6a:	f7ff febb 	bl	8010be4 <_tx_timer_system_activate>
 8010e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	f383 8810 	msr	PRIMASK, r3
}
 8010e78:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8010e7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010e80:	b672      	cpsid	i
    return(primask_value);
 8010e82:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8010e84:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d000      	beq.n	8010e8e <_tx_timer_thread_entry+0x182>
 8010e8c:	e77d      	b.n	8010d8a <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8010e8e:	4b17      	ldr	r3, [pc, #92]	; (8010eec <_tx_timer_thread_entry+0x1e0>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d117      	bne.n	8010ec6 <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8010e96:	4b17      	ldr	r3, [pc, #92]	; (8010ef4 <_tx_timer_thread_entry+0x1e8>)
 8010e98:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8010e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9c:	2203      	movs	r2, #3
 8010e9e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8010ea6:	4b14      	ldr	r3, [pc, #80]	; (8010ef8 <_tx_timer_thread_entry+0x1ec>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	4b12      	ldr	r3, [pc, #72]	; (8010ef8 <_tx_timer_thread_entry+0x1ec>)
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	f383 8810 	msr	PRIMASK, r3
}
 8010eba:	46c0      	nop			; (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ebe:	0018      	movs	r0, r3
 8010ec0:	f7ff fb10 	bl	80104e4 <_tx_thread_system_suspend>
 8010ec4:	e72d      	b.n	8010d22 <_tx_timer_thread_entry+0x16>
 8010ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	f383 8810 	msr	PRIMASK, r3
}
 8010ed0:	46c0      	nop			; (mov r8, r8)
            TX_DISABLE
 8010ed2:	e726      	b.n	8010d22 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8010ed4:	46c0      	nop			; (mov r8, r8)
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	b014      	add	sp, #80	; 0x50
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	4154494d 	.word	0x4154494d
 8010ee0:	200088e4 	.word	0x200088e4
 8010ee4:	200088e0 	.word	0x200088e0
 8010ee8:	200088dc 	.word	0x200088dc
 8010eec:	200088e8 	.word	0x200088e8
 8010ef0:	200088f4 	.word	0x200088f4
 8010ef4:	200088f8 	.word	0x200088f8
 8010ef8:	20008848 	.word	0x20008848

08010efc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08a      	sub	sp, #40	; 0x28
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8010f14:	2302      	movs	r3, #2
 8010f16:	627b      	str	r3, [r7, #36]	; 0x24
 8010f18:	e028      	b.n	8010f6c <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a2d      	ldr	r2, [pc, #180]	; (8010fd4 <_txe_byte_allocate+0xd8>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d002      	beq.n	8010f2a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8010f24:	2302      	movs	r3, #2
 8010f26:	627b      	str	r3, [r7, #36]	; 0x24
 8010f28:	e020      	b.n	8010f6c <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d102      	bne.n	8010f36 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8010f30:	2303      	movs	r3, #3
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
 8010f34:	e01a      	b.n	8010f6c <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d102      	bne.n	8010f42 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8010f3c:	2305      	movs	r3, #5
 8010f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f40:	e014      	b.n	8010f6c <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	69db      	ldr	r3, [r3, #28]
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d902      	bls.n	8010f52 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8010f4c:	2305      	movs	r3, #5
 8010f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f50:	e00c      	b.n	8010f6c <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d009      	beq.n	8010f6c <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f58:	f3ef 8305 	mrs	r3, IPSR
 8010f5c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8010f5e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8010f60:	4b1d      	ldr	r3, [pc, #116]	; (8010fd8 <_txe_byte_allocate+0xdc>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	d001      	beq.n	8010f6c <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8010f68:	2304      	movs	r3, #4
 8010f6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d108      	bne.n	8010f84 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8010f72:	4b1a      	ldr	r3, [pc, #104]	; (8010fdc <_txe_byte_allocate+0xe0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8010f78:	6a3a      	ldr	r2, [r7, #32]
 8010f7a:	4b19      	ldr	r3, [pc, #100]	; (8010fe0 <_txe_byte_allocate+0xe4>)
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d101      	bne.n	8010f84 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8010f80:	2313      	movs	r3, #19
 8010f82:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d113      	bne.n	8010fb2 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f8a:	f3ef 8305 	mrs	r3, IPSR
 8010f8e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010f90:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8010f92:	4b11      	ldr	r3, [pc, #68]	; (8010fd8 <_txe_byte_allocate+0xdc>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4313      	orrs	r3, r2
 8010f98:	d00b      	beq.n	8010fb2 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010f9a:	f3ef 8305 	mrs	r3, IPSR
 8010f9e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010fa0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8010fa2:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <_txe_byte_allocate+0xdc>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	4a0e      	ldr	r2, [pc, #56]	; (8010fe4 <_txe_byte_allocate+0xe8>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d801      	bhi.n	8010fb2 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8010fae:	2313      	movs	r3, #19
 8010fb0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d107      	bne.n	8010fc8 <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	687a      	ldr	r2, [r7, #4]
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7fc f9f8 	bl	800d3b4 <_tx_byte_allocate>
 8010fc4:	0003      	movs	r3, r0
 8010fc6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fca:	0018      	movs	r0, r3
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	b00a      	add	sp, #40	; 0x28
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	46c0      	nop			; (mov r8, r8)
 8010fd4:	42595445 	.word	0x42595445
 8010fd8:	20000010 	.word	0x20000010
 8010fdc:	200087b0 	.word	0x200087b0
 8010fe0:	200088f8 	.word	0x200088f8
 8010fe4:	f0f0f0ef 	.word	0xf0f0f0ef

08010fe8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b090      	sub	sp, #64	; 0x40
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	607a      	str	r2, [r7, #4]
 8010ff4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d102      	bne.n	8011006 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011000:	2302      	movs	r3, #2
 8011002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011004:	e070      	b.n	80110e8 <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8011006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011008:	2b34      	cmp	r3, #52	; 0x34
 801100a:	d002      	beq.n	8011012 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801100c:	2302      	movs	r3, #2
 801100e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011010:	e06a      	b.n	80110e8 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011012:	f3ef 8310 	mrs	r3, PRIMASK
 8011016:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011018:	b672      	cpsid	i
    return(primask_value);
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801101c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801101e:	4b3a      	ldr	r3, [pc, #232]	; (8011108 <_txe_byte_pool_create+0x120>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	1c5a      	adds	r2, r3, #1
 8011024:	4b38      	ldr	r3, [pc, #224]	; (8011108 <_txe_byte_pool_create+0x120>)
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	f383 8810 	msr	PRIMASK, r3
}
 8011032:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8011034:	4b35      	ldr	r3, [pc, #212]	; (801110c <_txe_byte_pool_create+0x124>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801103a:	2300      	movs	r3, #0
 801103c:	63bb      	str	r3, [r7, #56]	; 0x38
 801103e:	e009      	b.n	8011054 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011044:	429a      	cmp	r2, r3
 8011046:	d00b      	beq.n	8011060 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011050:	3301      	adds	r3, #1
 8011052:	63bb      	str	r3, [r7, #56]	; 0x38
 8011054:	4b2e      	ldr	r3, [pc, #184]	; (8011110 <_txe_byte_pool_create+0x128>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801105a:	429a      	cmp	r2, r3
 801105c:	d3f0      	bcc.n	8011040 <_txe_byte_pool_create+0x58>
 801105e:	e000      	b.n	8011062 <_txe_byte_pool_create+0x7a>
                break;
 8011060:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011062:	f3ef 8310 	mrs	r3, PRIMASK
 8011066:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011068:	b672      	cpsid	i
    return(primask_value);
 801106a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801106c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801106e:	4b26      	ldr	r3, [pc, #152]	; (8011108 <_txe_byte_pool_create+0x120>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	1e5a      	subs	r2, r3, #1
 8011074:	4b24      	ldr	r3, [pc, #144]	; (8011108 <_txe_byte_pool_create+0x120>)
 8011076:	601a      	str	r2, [r3, #0]
 8011078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801107c:	6a3b      	ldr	r3, [r7, #32]
 801107e:	f383 8810 	msr	PRIMASK, r3
}
 8011082:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011084:	f7ff f8f6 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108c:	429a      	cmp	r2, r3
 801108e:	d102      	bne.n	8011096 <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8011090:	2302      	movs	r3, #2
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011094:	e028      	b.n	80110e8 <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d102      	bne.n	80110a2 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801109c:	2303      	movs	r3, #3
 801109e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a0:	e022      	b.n	80110e8 <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	2b63      	cmp	r3, #99	; 0x63
 80110a6:	d802      	bhi.n	80110ae <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80110a8:	2305      	movs	r3, #5
 80110aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110ac:	e01c      	b.n	80110e8 <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80110ae:	4b19      	ldr	r3, [pc, #100]	; (8011114 <_txe_byte_pool_create+0x12c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80110b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110b6:	4b18      	ldr	r3, [pc, #96]	; (8011118 <_txe_byte_pool_create+0x130>)
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d101      	bne.n	80110c0 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80110bc:	2313      	movs	r3, #19
 80110be:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110c0:	f3ef 8305 	mrs	r3, IPSR
 80110c4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80110c6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80110c8:	4b14      	ldr	r3, [pc, #80]	; (801111c <_txe_byte_pool_create+0x134>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	d00b      	beq.n	80110e8 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110d0:	f3ef 8305 	mrs	r3, IPSR
 80110d4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80110d6:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80110d8:	4b10      	ldr	r3, [pc, #64]	; (801111c <_txe_byte_pool_create+0x134>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4313      	orrs	r3, r2
 80110de:	4a10      	ldr	r2, [pc, #64]	; (8011120 <_txe_byte_pool_create+0x138>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d801      	bhi.n	80110e8 <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80110e4:	2313      	movs	r3, #19
 80110e6:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80110e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d107      	bne.n	80110fe <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	68b9      	ldr	r1, [r7, #8]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f7fc fa9b 	bl	800d630 <_tx_byte_pool_create>
 80110fa:	0003      	movs	r3, r0
 80110fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80110fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011100:	0018      	movs	r0, r3
 8011102:	46bd      	mov	sp, r7
 8011104:	b010      	add	sp, #64	; 0x40
 8011106:	bd80      	pop	{r7, pc}
 8011108:	20008848 	.word	0x20008848
 801110c:	200087a0 	.word	0x200087a0
 8011110:	200087a4 	.word	0x200087a4
 8011114:	200087b0 	.word	0x200087b0
 8011118:	200088f8 	.word	0x200088f8
 801111c:	20000010 	.word	0x20000010
 8011120:	f0f0f0ef 	.word	0xf0f0f0ef

08011124 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b090      	sub	sp, #64	; 0x40
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011130:	2300      	movs	r3, #0
 8011132:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d102      	bne.n	8011140 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801113a:	2306      	movs	r3, #6
 801113c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801113e:	e064      	b.n	801120a <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b24      	cmp	r3, #36	; 0x24
 8011144:	d002      	beq.n	801114c <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8011146:	2306      	movs	r3, #6
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
 801114a:	e05e      	b.n	801120a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801114c:	f3ef 8310 	mrs	r3, PRIMASK
 8011150:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011152:	b672      	cpsid	i
    return(primask_value);
 8011154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011156:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011158:	4b34      	ldr	r3, [pc, #208]	; (801122c <_txe_event_flags_create+0x108>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	1c5a      	adds	r2, r3, #1
 801115e:	4b33      	ldr	r3, [pc, #204]	; (801122c <_txe_event_flags_create+0x108>)
 8011160:	601a      	str	r2, [r3, #0]
 8011162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011164:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	f383 8810 	msr	PRIMASK, r3
}
 801116c:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 801116e:	4b30      	ldr	r3, [pc, #192]	; (8011230 <_txe_event_flags_create+0x10c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011174:	2300      	movs	r3, #0
 8011176:	63bb      	str	r3, [r7, #56]	; 0x38
 8011178:	e009      	b.n	801118e <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117e:	429a      	cmp	r2, r3
 8011180:	d00b      	beq.n	801119a <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8011182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8011188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118a:	3301      	adds	r3, #1
 801118c:	63bb      	str	r3, [r7, #56]	; 0x38
 801118e:	4b29      	ldr	r3, [pc, #164]	; (8011234 <_txe_event_flags_create+0x110>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011194:	429a      	cmp	r2, r3
 8011196:	d3f0      	bcc.n	801117a <_txe_event_flags_create+0x56>
 8011198:	e000      	b.n	801119c <_txe_event_flags_create+0x78>
                break;
 801119a:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801119c:	f3ef 8310 	mrs	r3, PRIMASK
 80111a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80111a2:	b672      	cpsid	i
    return(primask_value);
 80111a4:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80111a6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80111a8:	4b20      	ldr	r3, [pc, #128]	; (801122c <_txe_event_flags_create+0x108>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	1e5a      	subs	r2, r3, #1
 80111ae:	4b1f      	ldr	r3, [pc, #124]	; (801122c <_txe_event_flags_create+0x108>)
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111b6:	6a3b      	ldr	r3, [r7, #32]
 80111b8:	f383 8810 	msr	PRIMASK, r3
}
 80111bc:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80111be:	f7ff f859 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 80111c2:	68fa      	ldr	r2, [r7, #12]
 80111c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d102      	bne.n	80111d0 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 80111ca:	2306      	movs	r3, #6
 80111cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ce:	e01c      	b.n	801120a <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80111d0:	4b19      	ldr	r3, [pc, #100]	; (8011238 <_txe_event_flags_create+0x114>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80111d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111d8:	4b18      	ldr	r3, [pc, #96]	; (801123c <_txe_event_flags_create+0x118>)
 80111da:	429a      	cmp	r2, r3
 80111dc:	d101      	bne.n	80111e2 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80111de:	2313      	movs	r3, #19
 80111e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111e2:	f3ef 8305 	mrs	r3, IPSR
 80111e6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80111e8:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80111ea:	4b15      	ldr	r3, [pc, #84]	; (8011240 <_txe_event_flags_create+0x11c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	d00b      	beq.n	801120a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80111f2:	f3ef 8305 	mrs	r3, IPSR
 80111f6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80111f8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80111fa:	4b11      	ldr	r3, [pc, #68]	; (8011240 <_txe_event_flags_create+0x11c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4313      	orrs	r3, r2
 8011200:	4a10      	ldr	r2, [pc, #64]	; (8011244 <_txe_event_flags_create+0x120>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d801      	bhi.n	801120a <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011206:	2313      	movs	r3, #19
 8011208:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d107      	bne.n	8011220 <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	0011      	movs	r1, r2
 8011216:	0018      	movs	r0, r3
 8011218:	f7fc fc3c 	bl	800da94 <_tx_event_flags_create>
 801121c:	0003      	movs	r3, r0
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8011220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011222:	0018      	movs	r0, r3
 8011224:	46bd      	mov	sp, r7
 8011226:	b010      	add	sp, #64	; 0x40
 8011228:	bd80      	pop	{r7, pc}
 801122a:	46c0      	nop			; (mov r8, r8)
 801122c:	20008848 	.word	0x20008848
 8011230:	20008788 	.word	0x20008788
 8011234:	2000878c 	.word	0x2000878c
 8011238:	200087b0 	.word	0x200087b0
 801123c:	200088f8 	.word	0x200088f8
 8011240:	20000010 	.word	0x20000010
 8011244:	f0f0f0ef 	.word	0xf0f0f0ef

08011248 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b086      	sub	sp, #24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011250:	2300      	movs	r3, #0
 8011252:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d102      	bne.n	8011260 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801125a:	2306      	movs	r3, #6
 801125c:	617b      	str	r3, [r7, #20]
 801125e:	e024      	b.n	80112aa <_txe_event_flags_delete+0x62>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a13      	ldr	r2, [pc, #76]	; (80112b4 <_txe_event_flags_delete+0x6c>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d002      	beq.n	8011270 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801126a:	2306      	movs	r3, #6
 801126c:	617b      	str	r3, [r7, #20]
 801126e:	e01c      	b.n	80112aa <_txe_event_flags_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011270:	f3ef 8305 	mrs	r3, IPSR
 8011274:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011276:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011278:	4b0f      	ldr	r3, [pc, #60]	; (80112b8 <_txe_event_flags_delete+0x70>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4313      	orrs	r3, r2
 801127e:	d002      	beq.n	8011286 <_txe_event_flags_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8011280:	2313      	movs	r3, #19
 8011282:	617b      	str	r3, [r7, #20]
 8011284:	e011      	b.n	80112aa <_txe_event_flags_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011286:	4b0d      	ldr	r3, [pc, #52]	; (80112bc <_txe_event_flags_delete+0x74>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	4b0c      	ldr	r3, [pc, #48]	; (80112c0 <_txe_event_flags_delete+0x78>)
 8011290:	429a      	cmp	r2, r3
 8011292:	d101      	bne.n	8011298 <_txe_event_flags_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011294:	2313      	movs	r3, #19
 8011296:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d105      	bne.n	80112aa <_txe_event_flags_delete+0x62>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	0018      	movs	r0, r3
 80112a2:	f7fc fc57 	bl	800db54 <_tx_event_flags_delete>
 80112a6:	0003      	movs	r3, r0
 80112a8:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 80112aa:	697b      	ldr	r3, [r7, #20]
}
 80112ac:	0018      	movs	r0, r3
 80112ae:	46bd      	mov	sp, r7
 80112b0:	b006      	add	sp, #24
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	4456444e 	.word	0x4456444e
 80112b8:	20000010 	.word	0x20000010
 80112bc:	200087b0 	.word	0x200087b0
 80112c0:	200088f8 	.word	0x200088f8

080112c4 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80112c4:	b590      	push	{r4, r7, lr}
 80112c6:	b08b      	sub	sp, #44	; 0x2c
 80112c8:	af02      	add	r7, sp, #8
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
 80112d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80112d2:	2300      	movs	r3, #0
 80112d4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80112dc:	2306      	movs	r3, #6
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	e024      	b.n	801132c <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a1f      	ldr	r2, [pc, #124]	; (8011364 <_txe_event_flags_get+0xa0>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d002      	beq.n	80112f2 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80112ec:	2306      	movs	r3, #6
 80112ee:	61fb      	str	r3, [r7, #28]
 80112f0:	e01c      	b.n	801132c <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80112f8:	2303      	movs	r3, #3
 80112fa:	61fb      	str	r3, [r7, #28]
 80112fc:	e016      	b.n	801132c <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80112fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011300:	2b00      	cmp	r3, #0
 8011302:	d013      	beq.n	801132c <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011304:	f3ef 8305 	mrs	r3, IPSR
 8011308:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801130a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801130c:	4b16      	ldr	r3, [pc, #88]	; (8011368 <_txe_event_flags_get+0xa4>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4313      	orrs	r3, r2
 8011312:	d002      	beq.n	801131a <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011314:	2304      	movs	r3, #4
 8011316:	61fb      	str	r3, [r7, #28]
 8011318:	e008      	b.n	801132c <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801131a:	4b14      	ldr	r3, [pc, #80]	; (801136c <_txe_event_flags_get+0xa8>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	4b13      	ldr	r3, [pc, #76]	; (8011370 <_txe_event_flags_get+0xac>)
 8011324:	429a      	cmp	r2, r3
 8011326:	d101      	bne.n	801132c <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011328:	2304      	movs	r3, #4
 801132a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d104      	bne.n	801133c <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b03      	cmp	r3, #3
 8011336:	d901      	bls.n	801133c <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8011338:	2308      	movs	r3, #8
 801133a:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d10a      	bne.n	8011358 <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8011342:	683c      	ldr	r4, [r7, #0]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134c:	9300      	str	r3, [sp, #0]
 801134e:	0023      	movs	r3, r4
 8011350:	f7fc fc8c 	bl	800dc6c <_tx_event_flags_get>
 8011354:	0003      	movs	r3, r0
 8011356:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8011358:	69fb      	ldr	r3, [r7, #28]
}
 801135a:	0018      	movs	r0, r3
 801135c:	46bd      	mov	sp, r7
 801135e:	b009      	add	sp, #36	; 0x24
 8011360:	bd90      	pop	{r4, r7, pc}
 8011362:	46c0      	nop			; (mov r8, r8)
 8011364:	4456444e 	.word	0x4456444e
 8011368:	20000010 	.word	0x20000010
 801136c:	200087b0 	.word	0x200087b0
 8011370:	200088f8 	.word	0x200088f8

08011374 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b086      	sub	sp, #24
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011380:	2300      	movs	r3, #0
 8011382:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d102      	bne.n	8011390 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801138a:	2306      	movs	r3, #6
 801138c:	617b      	str	r3, [r7, #20]
 801138e:	e00f      	b.n	80113b0 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4a0e      	ldr	r2, [pc, #56]	; (80113d0 <_txe_event_flags_set+0x5c>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d002      	beq.n	80113a0 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801139a:	2306      	movs	r3, #6
 801139c:	617b      	str	r3, [r7, #20]
 801139e:	e007      	b.n	80113b0 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d004      	beq.n	80113b0 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 80113ac:	2308      	movs	r3, #8
 80113ae:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d107      	bne.n	80113c6 <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	68b9      	ldr	r1, [r7, #8]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	0018      	movs	r0, r3
 80113be:	f7fc fd35 	bl	800de2c <_tx_event_flags_set>
 80113c2:	0003      	movs	r3, r0
 80113c4:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80113c6:	697b      	ldr	r3, [r7, #20]
}
 80113c8:	0018      	movs	r0, r3
 80113ca:	46bd      	mov	sp, r7
 80113cc:	b006      	add	sp, #24
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	4456444e 	.word	0x4456444e

080113d4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b090      	sub	sp, #64	; 0x40
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80113e2:	2300      	movs	r3, #0
 80113e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d102      	bne.n	80113f2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80113ec:	231c      	movs	r3, #28
 80113ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113f0:	e04f      	b.n	8011492 <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	2b34      	cmp	r3, #52	; 0x34
 80113f6:	d002      	beq.n	80113fe <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80113f8:	231c      	movs	r3, #28
 80113fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113fc:	e049      	b.n	8011492 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011402:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011404:	b672      	cpsid	i
    return(primask_value);
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011408:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801140a:	4b3a      	ldr	r3, [pc, #232]	; (80114f4 <_txe_mutex_create+0x120>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	4b38      	ldr	r3, [pc, #224]	; (80114f4 <_txe_mutex_create+0x120>)
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	f383 8810 	msr	PRIMASK, r3
}
 801141e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8011420:	4b35      	ldr	r3, [pc, #212]	; (80114f8 <_txe_mutex_create+0x124>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8011426:	2300      	movs	r3, #0
 8011428:	63bb      	str	r3, [r7, #56]	; 0x38
 801142a:	e009      	b.n	8011440 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011430:	429a      	cmp	r2, r3
 8011432:	d00b      	beq.n	801144c <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8011434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011436:	6a1b      	ldr	r3, [r3, #32]
 8011438:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	3301      	adds	r3, #1
 801143e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011440:	4b2e      	ldr	r3, [pc, #184]	; (80114fc <_txe_mutex_create+0x128>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011446:	429a      	cmp	r2, r3
 8011448:	d3f0      	bcc.n	801142c <_txe_mutex_create+0x58>
 801144a:	e000      	b.n	801144e <_txe_mutex_create+0x7a>
                break;
 801144c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801144e:	f3ef 8310 	mrs	r3, PRIMASK
 8011452:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011454:	b672      	cpsid	i
    return(primask_value);
 8011456:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011458:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801145a:	4b26      	ldr	r3, [pc, #152]	; (80114f4 <_txe_mutex_create+0x120>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	1e5a      	subs	r2, r3, #1
 8011460:	4b24      	ldr	r3, [pc, #144]	; (80114f4 <_txe_mutex_create+0x120>)
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011466:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	f383 8810 	msr	PRIMASK, r3
}
 801146e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011470:	f7fe ff00 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011478:	429a      	cmp	r2, r3
 801147a:	d102      	bne.n	8011482 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 801147c:	231c      	movs	r3, #28
 801147e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011480:	e007      	b.n	8011492 <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b01      	cmp	r3, #1
 8011486:	d004      	beq.n	8011492 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d001      	beq.n	8011492 <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 801148e:	231f      	movs	r3, #31
 8011490:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011494:	2b00      	cmp	r3, #0
 8011496:	d11c      	bne.n	80114d2 <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011498:	4b19      	ldr	r3, [pc, #100]	; (8011500 <_txe_mutex_create+0x12c>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801149e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114a0:	4b18      	ldr	r3, [pc, #96]	; (8011504 <_txe_mutex_create+0x130>)
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d101      	bne.n	80114aa <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80114a6:	2313      	movs	r3, #19
 80114a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114aa:	f3ef 8305 	mrs	r3, IPSR
 80114ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80114b0:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80114b2:	4b15      	ldr	r3, [pc, #84]	; (8011508 <_txe_mutex_create+0x134>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	d00b      	beq.n	80114d2 <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114ba:	f3ef 8305 	mrs	r3, IPSR
 80114be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80114c0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80114c2:	4b11      	ldr	r3, [pc, #68]	; (8011508 <_txe_mutex_create+0x134>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4313      	orrs	r3, r2
 80114c8:	4a10      	ldr	r2, [pc, #64]	; (801150c <_txe_mutex_create+0x138>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d801      	bhi.n	80114d2 <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80114ce:	2313      	movs	r3, #19
 80114d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80114d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d107      	bne.n	80114e8 <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	0018      	movs	r0, r3
 80114e0:	f7fc ffe0 	bl	800e4a4 <_tx_mutex_create>
 80114e4:	0003      	movs	r3, r0
 80114e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80114e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80114ea:	0018      	movs	r0, r3
 80114ec:	46bd      	mov	sp, r7
 80114ee:	b010      	add	sp, #64	; 0x40
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	46c0      	nop			; (mov r8, r8)
 80114f4:	20008848 	.word	0x20008848
 80114f8:	20008790 	.word	0x20008790
 80114fc:	20008794 	.word	0x20008794
 8011500:	200087b0 	.word	0x200087b0
 8011504:	200088f8 	.word	0x200088f8
 8011508:	20000010 	.word	0x20000010
 801150c:	f0f0f0ef 	.word	0xf0f0f0ef

08011510 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b088      	sub	sp, #32
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801151a:	2300      	movs	r3, #0
 801151c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d102      	bne.n	801152a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011524:	231c      	movs	r3, #28
 8011526:	61fb      	str	r3, [r7, #28]
 8011528:	e01e      	b.n	8011568 <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4a22      	ldr	r2, [pc, #136]	; (80115b8 <_txe_mutex_get+0xa8>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d002      	beq.n	801153a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8011534:	231c      	movs	r3, #28
 8011536:	61fb      	str	r3, [r7, #28]
 8011538:	e016      	b.n	8011568 <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d013      	beq.n	8011568 <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011540:	f3ef 8305 	mrs	r3, IPSR
 8011544:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011546:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011548:	4b1c      	ldr	r3, [pc, #112]	; (80115bc <_txe_mutex_get+0xac>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4313      	orrs	r3, r2
 801154e:	d002      	beq.n	8011556 <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011550:	2304      	movs	r3, #4
 8011552:	61fb      	str	r3, [r7, #28]
 8011554:	e008      	b.n	8011568 <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011556:	4b1a      	ldr	r3, [pc, #104]	; (80115c0 <_txe_mutex_get+0xb0>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801155c:	69ba      	ldr	r2, [r7, #24]
 801155e:	4b19      	ldr	r3, [pc, #100]	; (80115c4 <_txe_mutex_get+0xb4>)
 8011560:	429a      	cmp	r2, r3
 8011562:	d101      	bne.n	8011568 <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011564:	2304      	movs	r3, #4
 8011566:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d113      	bne.n	8011596 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801156e:	f3ef 8305 	mrs	r3, IPSR
 8011572:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011574:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011576:	4b11      	ldr	r3, [pc, #68]	; (80115bc <_txe_mutex_get+0xac>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	d00b      	beq.n	8011596 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801157e:	f3ef 8305 	mrs	r3, IPSR
 8011582:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011584:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011586:	4b0d      	ldr	r3, [pc, #52]	; (80115bc <_txe_mutex_get+0xac>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4313      	orrs	r3, r2
 801158c:	4a0e      	ldr	r2, [pc, #56]	; (80115c8 <_txe_mutex_get+0xb8>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d801      	bhi.n	8011596 <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011592:	2313      	movs	r3, #19
 8011594:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d107      	bne.n	80115ac <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	0011      	movs	r1, r2
 80115a2:	0018      	movs	r0, r3
 80115a4:	f7fc ffea 	bl	800e57c <_tx_mutex_get>
 80115a8:	0003      	movs	r3, r0
 80115aa:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80115ac:	69fb      	ldr	r3, [r7, #28]
}
 80115ae:	0018      	movs	r0, r3
 80115b0:	46bd      	mov	sp, r7
 80115b2:	b008      	add	sp, #32
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	46c0      	nop			; (mov r8, r8)
 80115b8:	4d555445 	.word	0x4d555445
 80115bc:	20000010 	.word	0x20000010
 80115c0:	200087b0 	.word	0x200087b0
 80115c4:	200088f8 	.word	0x200088f8
 80115c8:	f0f0f0ef 	.word	0xf0f0f0ef

080115cc <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80115d4:	2300      	movs	r3, #0
 80115d6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d102      	bne.n	80115e4 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80115de:	231c      	movs	r3, #28
 80115e0:	617b      	str	r3, [r7, #20]
 80115e2:	e01b      	b.n	801161c <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a13      	ldr	r2, [pc, #76]	; (8011638 <_txe_mutex_put+0x6c>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d002      	beq.n	80115f4 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80115ee:	231c      	movs	r3, #28
 80115f0:	617b      	str	r3, [r7, #20]
 80115f2:	e013      	b.n	801161c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115f4:	f3ef 8305 	mrs	r3, IPSR
 80115f8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80115fa:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80115fc:	4b0f      	ldr	r3, [pc, #60]	; (801163c <_txe_mutex_put+0x70>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4313      	orrs	r3, r2
 8011602:	d00b      	beq.n	801161c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011604:	f3ef 8305 	mrs	r3, IPSR
 8011608:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801160a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801160c:	4b0b      	ldr	r3, [pc, #44]	; (801163c <_txe_mutex_put+0x70>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	4313      	orrs	r3, r2
 8011612:	4a0b      	ldr	r2, [pc, #44]	; (8011640 <_txe_mutex_put+0x74>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d801      	bhi.n	801161c <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011618:	2313      	movs	r3, #19
 801161a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d105      	bne.n	801162e <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	0018      	movs	r0, r3
 8011626:	f7fd fa19 	bl	800ea5c <_tx_mutex_put>
 801162a:	0003      	movs	r3, r0
 801162c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801162e:	697b      	ldr	r3, [r7, #20]
}
 8011630:	0018      	movs	r0, r3
 8011632:	46bd      	mov	sp, r7
 8011634:	b006      	add	sp, #24
 8011636:	bd80      	pop	{r7, pc}
 8011638:	4d555445 	.word	0x4d555445
 801163c:	20000010 	.word	0x20000010
 8011640:	f0f0f0ef 	.word	0xf0f0f0ef

08011644 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8011644:	b590      	push	{r4, r7, lr}
 8011646:	b093      	sub	sp, #76	; 0x4c
 8011648:	af02      	add	r7, sp, #8
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
 8011650:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011652:	2300      	movs	r3, #0
 8011654:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d102      	bne.n	8011662 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801165c:	2309      	movs	r3, #9
 801165e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011660:	e07e      	b.n	8011760 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8011662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011664:	2b38      	cmp	r3, #56	; 0x38
 8011666:	d002      	beq.n	801166e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8011668:	2309      	movs	r3, #9
 801166a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801166c:	e078      	b.n	8011760 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801166e:	f3ef 8310 	mrs	r3, PRIMASK
 8011672:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011674:	b672      	cpsid	i
    return(primask_value);
 8011676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011678:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801167a:	4b43      	ldr	r3, [pc, #268]	; (8011788 <_txe_queue_create+0x144>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	1c5a      	adds	r2, r3, #1
 8011680:	4b41      	ldr	r3, [pc, #260]	; (8011788 <_txe_queue_create+0x144>)
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	f383 8810 	msr	PRIMASK, r3
}
 801168e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8011690:	4b3e      	ldr	r3, [pc, #248]	; (801178c <_txe_queue_create+0x148>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8011696:	2300      	movs	r3, #0
 8011698:	63bb      	str	r3, [r7, #56]	; 0x38
 801169a:	e009      	b.n	80116b0 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d00b      	beq.n	80116bc <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 80116a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116a8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80116aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ac:	3301      	adds	r3, #1
 80116ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80116b0:	4b37      	ldr	r3, [pc, #220]	; (8011790 <_txe_queue_create+0x14c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d3f0      	bcc.n	801169c <_txe_queue_create+0x58>
 80116ba:	e000      	b.n	80116be <_txe_queue_create+0x7a>
                break;
 80116bc:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80116be:	f3ef 8310 	mrs	r3, PRIMASK
 80116c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80116c4:	b672      	cpsid	i
    return(primask_value);
 80116c6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80116c8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80116ca:	4b2f      	ldr	r3, [pc, #188]	; (8011788 <_txe_queue_create+0x144>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	1e5a      	subs	r2, r3, #1
 80116d0:	4b2d      	ldr	r3, [pc, #180]	; (8011788 <_txe_queue_create+0x144>)
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	f383 8810 	msr	PRIMASK, r3
}
 80116de:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80116e0:	f7fe fdc8 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d102      	bne.n	80116f2 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 80116ec:	2309      	movs	r3, #9
 80116ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116f0:	e036      	b.n	8011760 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d102      	bne.n	80116fe <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 80116f8:	2303      	movs	r3, #3
 80116fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116fc:	e030      	b.n	8011760 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d102      	bne.n	801170a <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8011704:	2305      	movs	r3, #5
 8011706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011708:	e02a      	b.n	8011760 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2b10      	cmp	r3, #16
 801170e:	d902      	bls.n	8011716 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8011710:	2305      	movs	r3, #5
 8011712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011714:	e024      	b.n	8011760 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8011716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011718:	089b      	lsrs	r3, r3, #2
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	429a      	cmp	r2, r3
 801171e:	d902      	bls.n	8011726 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8011720:	2305      	movs	r3, #5
 8011722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011724:	e01c      	b.n	8011760 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011726:	4b1b      	ldr	r3, [pc, #108]	; (8011794 <_txe_queue_create+0x150>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801172e:	4b1a      	ldr	r3, [pc, #104]	; (8011798 <_txe_queue_create+0x154>)
 8011730:	429a      	cmp	r2, r3
 8011732:	d101      	bne.n	8011738 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011734:	2313      	movs	r3, #19
 8011736:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011738:	f3ef 8305 	mrs	r3, IPSR
 801173c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801173e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011740:	4b16      	ldr	r3, [pc, #88]	; (801179c <_txe_queue_create+0x158>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	4313      	orrs	r3, r2
 8011746:	d00b      	beq.n	8011760 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011748:	f3ef 8305 	mrs	r3, IPSR
 801174c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801174e:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011750:	4b12      	ldr	r3, [pc, #72]	; (801179c <_txe_queue_create+0x158>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4313      	orrs	r3, r2
 8011756:	4a12      	ldr	r2, [pc, #72]	; (80117a0 <_txe_queue_create+0x15c>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d801      	bhi.n	8011760 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801175c:	2313      	movs	r3, #19
 801175e:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011762:	2b00      	cmp	r3, #0
 8011764:	d10a      	bne.n	801177c <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8011766:	683c      	ldr	r4, [r7, #0]
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	68b9      	ldr	r1, [r7, #8]
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011770:	9300      	str	r3, [sp, #0]
 8011772:	0023      	movs	r3, r4
 8011774:	f7fd fbda 	bl	800ef2c <_tx_queue_create>
 8011778:	0003      	movs	r3, r0
 801177a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 801177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801177e:	0018      	movs	r0, r3
 8011780:	46bd      	mov	sp, r7
 8011782:	b011      	add	sp, #68	; 0x44
 8011784:	bd90      	pop	{r4, r7, pc}
 8011786:	46c0      	nop			; (mov r8, r8)
 8011788:	20008848 	.word	0x20008848
 801178c:	20008780 	.word	0x20008780
 8011790:	20008784 	.word	0x20008784
 8011794:	200087b0 	.word	0x200087b0
 8011798:	200088f8 	.word	0x200088f8
 801179c:	20000010 	.word	0x20000010
 80117a0:	f0f0f0ef 	.word	0xf0f0f0ef

080117a4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d102      	bne.n	80117c0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80117ba:	2309      	movs	r3, #9
 80117bc:	61fb      	str	r3, [r7, #28]
 80117be:	e024      	b.n	801180a <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a19      	ldr	r2, [pc, #100]	; (801182c <_txe_queue_receive+0x88>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d002      	beq.n	80117d0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80117ca:	2309      	movs	r3, #9
 80117cc:	61fb      	str	r3, [r7, #28]
 80117ce:	e01c      	b.n	801180a <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d102      	bne.n	80117dc <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80117d6:	2303      	movs	r3, #3
 80117d8:	61fb      	str	r3, [r7, #28]
 80117da:	e016      	b.n	801180a <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d013      	beq.n	801180a <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117e2:	f3ef 8305 	mrs	r3, IPSR
 80117e6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80117e8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80117ea:	4b11      	ldr	r3, [pc, #68]	; (8011830 <_txe_queue_receive+0x8c>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4313      	orrs	r3, r2
 80117f0:	d002      	beq.n	80117f8 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80117f2:	2304      	movs	r3, #4
 80117f4:	61fb      	str	r3, [r7, #28]
 80117f6:	e008      	b.n	801180a <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80117f8:	4b0e      	ldr	r3, [pc, #56]	; (8011834 <_txe_queue_receive+0x90>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80117fe:	69ba      	ldr	r2, [r7, #24]
 8011800:	4b0d      	ldr	r3, [pc, #52]	; (8011838 <_txe_queue_receive+0x94>)
 8011802:	429a      	cmp	r2, r3
 8011804:	d101      	bne.n	801180a <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011806:	2304      	movs	r3, #4
 8011808:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d107      	bne.n	8011820 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	68b9      	ldr	r1, [r7, #8]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	0018      	movs	r0, r3
 8011818:	f7fd fc10 	bl	800f03c <_tx_queue_receive>
 801181c:	0003      	movs	r3, r0
 801181e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8011820:	69fb      	ldr	r3, [r7, #28]
}
 8011822:	0018      	movs	r0, r3
 8011824:	46bd      	mov	sp, r7
 8011826:	b008      	add	sp, #32
 8011828:	bd80      	pop	{r7, pc}
 801182a:	46c0      	nop			; (mov r8, r8)
 801182c:	51554555 	.word	0x51554555
 8011830:	20000010 	.word	0x20000010
 8011834:	200087b0 	.word	0x200087b0
 8011838:	200088f8 	.word	0x200088f8

0801183c <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011848:	2300      	movs	r3, #0
 801184a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8011852:	2309      	movs	r3, #9
 8011854:	61fb      	str	r3, [r7, #28]
 8011856:	e024      	b.n	80118a2 <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a19      	ldr	r2, [pc, #100]	; (80118c4 <_txe_queue_send+0x88>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d002      	beq.n	8011868 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8011862:	2309      	movs	r3, #9
 8011864:	61fb      	str	r3, [r7, #28]
 8011866:	e01c      	b.n	80118a2 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801186e:	2303      	movs	r3, #3
 8011870:	61fb      	str	r3, [r7, #28]
 8011872:	e016      	b.n	80118a2 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d013      	beq.n	80118a2 <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801187a:	f3ef 8305 	mrs	r3, IPSR
 801187e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011880:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011882:	4b11      	ldr	r3, [pc, #68]	; (80118c8 <_txe_queue_send+0x8c>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	4313      	orrs	r3, r2
 8011888:	d002      	beq.n	8011890 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801188a:	2304      	movs	r3, #4
 801188c:	61fb      	str	r3, [r7, #28]
 801188e:	e008      	b.n	80118a2 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011890:	4b0e      	ldr	r3, [pc, #56]	; (80118cc <_txe_queue_send+0x90>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011896:	69ba      	ldr	r2, [r7, #24]
 8011898:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <_txe_queue_send+0x94>)
 801189a:	429a      	cmp	r2, r3
 801189c:	d101      	bne.n	80118a2 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801189e:	2304      	movs	r3, #4
 80118a0:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d107      	bne.n	80118b8 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80118a8:	687a      	ldr	r2, [r7, #4]
 80118aa:	68b9      	ldr	r1, [r7, #8]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	0018      	movs	r0, r3
 80118b0:	f7fd fd8c 	bl	800f3cc <_tx_queue_send>
 80118b4:	0003      	movs	r3, r0
 80118b6:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80118b8:	69fb      	ldr	r3, [r7, #28]
}
 80118ba:	0018      	movs	r0, r3
 80118bc:	46bd      	mov	sp, r7
 80118be:	b008      	add	sp, #32
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	46c0      	nop			; (mov r8, r8)
 80118c4:	51554555 	.word	0x51554555
 80118c8:	20000010 	.word	0x20000010
 80118cc:	200087b0 	.word	0x200087b0
 80118d0:	200088f8 	.word	0x200088f8

080118d4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b090      	sub	sp, #64	; 0x40
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
 80118e0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80118e2:	2300      	movs	r3, #0
 80118e4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d102      	bne.n	80118f2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80118ec:	230c      	movs	r3, #12
 80118ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118f0:	e050      	b.n	8011994 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	2b1c      	cmp	r3, #28
 80118f6:	d002      	beq.n	80118fe <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80118f8:	230c      	movs	r3, #12
 80118fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118fc:	e04a      	b.n	8011994 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80118fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011902:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011904:	b672      	cpsid	i
    return(primask_value);
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011908:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801190a:	4b36      	ldr	r3, [pc, #216]	; (80119e4 <_txe_semaphore_create+0x110>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	1c5a      	adds	r2, r3, #1
 8011910:	4b34      	ldr	r3, [pc, #208]	; (80119e4 <_txe_semaphore_create+0x110>)
 8011912:	601a      	str	r2, [r3, #0]
 8011914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011916:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191a:	f383 8810 	msr	PRIMASK, r3
}
 801191e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8011920:	4b31      	ldr	r3, [pc, #196]	; (80119e8 <_txe_semaphore_create+0x114>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8011926:	2300      	movs	r3, #0
 8011928:	63bb      	str	r3, [r7, #56]	; 0x38
 801192a:	e009      	b.n	8011940 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011930:	429a      	cmp	r2, r3
 8011932:	d00b      	beq.n	801194c <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8011934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011936:	695b      	ldr	r3, [r3, #20]
 8011938:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193c:	3301      	adds	r3, #1
 801193e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011940:	4b2a      	ldr	r3, [pc, #168]	; (80119ec <_txe_semaphore_create+0x118>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011946:	429a      	cmp	r2, r3
 8011948:	d3f0      	bcc.n	801192c <_txe_semaphore_create+0x58>
 801194a:	e000      	b.n	801194e <_txe_semaphore_create+0x7a>
                break;
 801194c:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801194e:	f3ef 8310 	mrs	r3, PRIMASK
 8011952:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011954:	b672      	cpsid	i
    return(primask_value);
 8011956:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011958:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801195a:	4b22      	ldr	r3, [pc, #136]	; (80119e4 <_txe_semaphore_create+0x110>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	1e5a      	subs	r2, r3, #1
 8011960:	4b20      	ldr	r3, [pc, #128]	; (80119e4 <_txe_semaphore_create+0x110>)
 8011962:	601a      	str	r2, [r3, #0]
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011968:	6a3b      	ldr	r3, [r7, #32]
 801196a:	f383 8810 	msr	PRIMASK, r3
}
 801196e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011970:	f7fe fc80 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8011974:	68fa      	ldr	r2, [r7, #12]
 8011976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011978:	429a      	cmp	r2, r3
 801197a:	d102      	bne.n	8011982 <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801197c:	230c      	movs	r3, #12
 801197e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011980:	e008      	b.n	8011994 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011982:	4b1b      	ldr	r3, [pc, #108]	; (80119f0 <_txe_semaphore_create+0x11c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8011988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801198a:	4b1a      	ldr	r3, [pc, #104]	; (80119f4 <_txe_semaphore_create+0x120>)
 801198c:	429a      	cmp	r2, r3
 801198e:	d101      	bne.n	8011994 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011990:	2313      	movs	r3, #19
 8011992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d113      	bne.n	80119c2 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801199a:	f3ef 8305 	mrs	r3, IPSR
 801199e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80119a0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80119a2:	4b15      	ldr	r3, [pc, #84]	; (80119f8 <_txe_semaphore_create+0x124>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	d00b      	beq.n	80119c2 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80119aa:	f3ef 8305 	mrs	r3, IPSR
 80119ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80119b0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80119b2:	4b11      	ldr	r3, [pc, #68]	; (80119f8 <_txe_semaphore_create+0x124>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4313      	orrs	r3, r2
 80119b8:	4a10      	ldr	r2, [pc, #64]	; (80119fc <_txe_semaphore_create+0x128>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d801      	bhi.n	80119c2 <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80119be:	2313      	movs	r3, #19
 80119c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80119c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d107      	bne.n	80119d8 <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	68b9      	ldr	r1, [r7, #8]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	0018      	movs	r0, r3
 80119d0:	f7fd fea0 	bl	800f714 <_tx_semaphore_create>
 80119d4:	0003      	movs	r3, r0
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 80119d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80119da:	0018      	movs	r0, r3
 80119dc:	46bd      	mov	sp, r7
 80119de:	b010      	add	sp, #64	; 0x40
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	46c0      	nop			; (mov r8, r8)
 80119e4:	20008848 	.word	0x20008848
 80119e8:	20008778 	.word	0x20008778
 80119ec:	2000877c 	.word	0x2000877c
 80119f0:	200087b0 	.word	0x200087b0
 80119f4:	200088f8 	.word	0x200088f8
 80119f8:	20000010 	.word	0x20000010
 80119fc:	f0f0f0ef 	.word	0xf0f0f0ef

08011a00 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b086      	sub	sp, #24
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d102      	bne.n	8011a18 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011a12:	230c      	movs	r3, #12
 8011a14:	617b      	str	r3, [r7, #20]
 8011a16:	e01b      	b.n	8011a50 <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4a13      	ldr	r2, [pc, #76]	; (8011a6c <_txe_semaphore_delete+0x6c>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d002      	beq.n	8011a28 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011a22:	230c      	movs	r3, #12
 8011a24:	617b      	str	r3, [r7, #20]
 8011a26:	e013      	b.n	8011a50 <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a28:	f3ef 8305 	mrs	r3, IPSR
 8011a2c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011a2e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011a30:	4b0f      	ldr	r3, [pc, #60]	; (8011a70 <_txe_semaphore_delete+0x70>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	4313      	orrs	r3, r2
 8011a36:	d002      	beq.n	8011a3e <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011a38:	2313      	movs	r3, #19
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	e008      	b.n	8011a50 <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011a3e:	4b0d      	ldr	r3, [pc, #52]	; (8011a74 <_txe_semaphore_delete+0x74>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	4b0c      	ldr	r3, [pc, #48]	; (8011a78 <_txe_semaphore_delete+0x78>)
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d101      	bne.n	8011a50 <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011a4c:	2313      	movs	r3, #19
 8011a4e:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d105      	bne.n	8011a62 <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	0018      	movs	r0, r3
 8011a5a:	f7fd febf 	bl	800f7dc <_tx_semaphore_delete>
 8011a5e:	0003      	movs	r3, r0
 8011a60:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011a62:	697b      	ldr	r3, [r7, #20]
}
 8011a64:	0018      	movs	r0, r3
 8011a66:	46bd      	mov	sp, r7
 8011a68:	b006      	add	sp, #24
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	53454d41 	.word	0x53454d41
 8011a70:	20000010 	.word	0x20000010
 8011a74:	200087b0 	.word	0x200087b0
 8011a78:	200088f8 	.word	0x200088f8

08011a7c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011a86:	2300      	movs	r3, #0
 8011a88:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d102      	bne.n	8011a96 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011a90:	230c      	movs	r3, #12
 8011a92:	617b      	str	r3, [r7, #20]
 8011a94:	e01e      	b.n	8011ad4 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4a16      	ldr	r2, [pc, #88]	; (8011af4 <_txe_semaphore_get+0x78>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d002      	beq.n	8011aa6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011aa0:	230c      	movs	r3, #12
 8011aa2:	617b      	str	r3, [r7, #20]
 8011aa4:	e016      	b.n	8011ad4 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d013      	beq.n	8011ad4 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011aac:	f3ef 8305 	mrs	r3, IPSR
 8011ab0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011ab2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011ab4:	4b10      	ldr	r3, [pc, #64]	; (8011af8 <_txe_semaphore_get+0x7c>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	d002      	beq.n	8011ac2 <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8011abc:	2304      	movs	r3, #4
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e008      	b.n	8011ad4 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011ac2:	4b0e      	ldr	r3, [pc, #56]	; (8011afc <_txe_semaphore_get+0x80>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8011ac8:	693a      	ldr	r2, [r7, #16]
 8011aca:	4b0d      	ldr	r3, [pc, #52]	; (8011b00 <_txe_semaphore_get+0x84>)
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d101      	bne.n	8011ad4 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011ad0:	2304      	movs	r3, #4
 8011ad2:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d107      	bne.n	8011aea <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	0011      	movs	r1, r2
 8011ae0:	0018      	movs	r0, r3
 8011ae2:	f7fd ff07 	bl	800f8f4 <_tx_semaphore_get>
 8011ae6:	0003      	movs	r3, r0
 8011ae8:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011aea:	697b      	ldr	r3, [r7, #20]
}
 8011aec:	0018      	movs	r0, r3
 8011aee:	46bd      	mov	sp, r7
 8011af0:	b006      	add	sp, #24
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	53454d41 	.word	0x53454d41
 8011af8:	20000010 	.word	0x20000010
 8011afc:	200087b0 	.word	0x200087b0
 8011b00:	200088f8 	.word	0x200088f8

08011b04 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d102      	bne.n	8011b18 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b12:	230c      	movs	r3, #12
 8011b14:	60fb      	str	r3, [r7, #12]
 8011b16:	e00d      	b.n	8011b34 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4a08      	ldr	r2, [pc, #32]	; (8011b40 <_txe_semaphore_put+0x3c>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d002      	beq.n	8011b28 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011b22:	230c      	movs	r3, #12
 8011b24:	60fb      	str	r3, [r7, #12]
 8011b26:	e005      	b.n	8011b34 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	0018      	movs	r0, r3
 8011b2c:	f7fd ff74 	bl	800fa18 <_tx_semaphore_put>
 8011b30:	0003      	movs	r3, r0
 8011b32:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011b34:	68fb      	ldr	r3, [r7, #12]
}
 8011b36:	0018      	movs	r0, r3
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	b004      	add	sp, #16
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	46c0      	nop			; (mov r8, r8)
 8011b40:	53454d41 	.word	0x53454d41

08011b44 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8011b44:	b590      	push	{r4, r7, lr}
 8011b46:	b099      	sub	sp, #100	; 0x64
 8011b48:	af06      	add	r7, sp, #24
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	607a      	str	r2, [r7, #4]
 8011b50:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011b52:	2300      	movs	r3, #0
 8011b54:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d102      	bne.n	8011b62 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011b5c:	230e      	movs	r3, #14
 8011b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8011b60:	e0b6      	b.n	8011cd0 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8011b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b64:	2bb0      	cmp	r3, #176	; 0xb0
 8011b66:	d002      	beq.n	8011b6e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011b68:	230e      	movs	r3, #14
 8011b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8011b6c:	e0b0      	b.n	8011cd0 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8011b72:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011b74:	b672      	cpsid	i
    return(primask_value);
 8011b76:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8011b78:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8011b7a:	4b64      	ldr	r3, [pc, #400]	; (8011d0c <_txe_thread_create+0x1c8>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	1c5a      	adds	r2, r3, #1
 8011b80:	4b62      	ldr	r3, [pc, #392]	; (8011d0c <_txe_thread_create+0x1c8>)
 8011b82:	601a      	str	r2, [r3, #0]
 8011b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b86:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	f383 8810 	msr	PRIMASK, r3
}
 8011b8e:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8011b90:	2300      	movs	r3, #0
 8011b92:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 8011b94:	4b5e      	ldr	r3, [pc, #376]	; (8011d10 <_txe_thread_create+0x1cc>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b9c:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8011b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ba4:	18d3      	adds	r3, r2, r3
 8011ba6:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8011ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011bac:	2300      	movs	r3, #0
 8011bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bb0:	e02b      	b.n	8011c0a <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8011bb2:	68fa      	ldr	r2, [r7, #12]
 8011bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d101      	bne.n	8011bbe <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8011bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d028      	beq.n	8011c16 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d308      	bcc.n	8011be0 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8011bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd0:	691b      	ldr	r3, [r3, #16]
 8011bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d203      	bcs.n	8011be0 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8011be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d308      	bcc.n	8011bfc <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8011bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bec:	691b      	ldr	r3, [r3, #16]
 8011bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d203      	bcs.n	8011bfc <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	2288      	movs	r2, #136	; 0x88
 8011c00:	589b      	ldr	r3, [r3, r2]
 8011c02:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c06:	3301      	adds	r3, #1
 8011c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c0a:	4b42      	ldr	r3, [pc, #264]	; (8011d14 <_txe_thread_create+0x1d0>)
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d3ce      	bcc.n	8011bb2 <_txe_thread_create+0x6e>
 8011c14:	e000      	b.n	8011c18 <_txe_thread_create+0xd4>
                break;
 8011c16:	46c0      	nop			; (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011c18:	f3ef 8310 	mrs	r3, PRIMASK
 8011c1c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011c1e:	b672      	cpsid	i
    return(primask_value);
 8011c20:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011c22:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011c24:	4b39      	ldr	r3, [pc, #228]	; (8011d0c <_txe_thread_create+0x1c8>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	1e5a      	subs	r2, r3, #1
 8011c2a:	4b38      	ldr	r3, [pc, #224]	; (8011d0c <_txe_thread_create+0x1c8>)
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	f383 8810 	msr	PRIMASK, r3
}
 8011c38:	46c0      	nop			; (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011c3a:	f7fe fb1b 	bl	8010274 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d102      	bne.n	8011c4c <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8011c46:	230e      	movs	r3, #14
 8011c48:	647b      	str	r3, [r7, #68]	; 0x44
 8011c4a:	e041      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8011c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d102      	bne.n	8011c58 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011c52:	2303      	movs	r3, #3
 8011c54:	647b      	str	r3, [r7, #68]	; 0x44
 8011c56:	e03b      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d102      	bne.n	8011c64 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	647b      	str	r3, [r7, #68]	; 0x44
 8011c62:	e035      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8011c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c66:	2bc7      	cmp	r3, #199	; 0xc7
 8011c68:	d802      	bhi.n	8011c70 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8011c6a:	2305      	movs	r3, #5
 8011c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8011c6e:	e02f      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8011c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c72:	2b1f      	cmp	r3, #31
 8011c74:	d902      	bls.n	8011c7c <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8011c76:	230f      	movs	r3, #15
 8011c78:	647b      	str	r3, [r7, #68]	; 0x44
 8011c7a:	e029      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8011c7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d902      	bls.n	8011c8a <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8011c84:	2318      	movs	r3, #24
 8011c86:	647b      	str	r3, [r7, #68]	; 0x44
 8011c88:	e022      	b.n	8011cd0 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8011c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d902      	bls.n	8011c96 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8011c90:	2310      	movs	r3, #16
 8011c92:	647b      	str	r3, [r7, #68]	; 0x44
 8011c94:	e01c      	b.n	8011cd0 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8011c96:	4b20      	ldr	r3, [pc, #128]	; (8011d18 <_txe_thread_create+0x1d4>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8011c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c9e:	4b1f      	ldr	r3, [pc, #124]	; (8011d1c <_txe_thread_create+0x1d8>)
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d101      	bne.n	8011ca8 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011ca4:	2313      	movs	r3, #19
 8011ca6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ca8:	f3ef 8305 	mrs	r3, IPSR
 8011cac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011cae:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011cb0:	4b1b      	ldr	r3, [pc, #108]	; (8011d20 <_txe_thread_create+0x1dc>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	d00b      	beq.n	8011cd0 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011cb8:	f3ef 8305 	mrs	r3, IPSR
 8011cbc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011cbe:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011cc0:	4b17      	ldr	r3, [pc, #92]	; (8011d20 <_txe_thread_create+0x1dc>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	4a17      	ldr	r2, [pc, #92]	; (8011d24 <_txe_thread_create+0x1e0>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d801      	bhi.n	8011cd0 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8011ccc:	2313      	movs	r3, #19
 8011cce:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d114      	bne.n	8011d00 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8011cd6:	683c      	ldr	r4, [r7, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	68b9      	ldr	r1, [r7, #8]
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ce0:	9305      	str	r3, [sp, #20]
 8011ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ce4:	9304      	str	r3, [sp, #16]
 8011ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ce8:	9303      	str	r3, [sp, #12]
 8011cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011cec:	9302      	str	r3, [sp, #8]
 8011cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cf0:	9301      	str	r3, [sp, #4]
 8011cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	0023      	movs	r3, r4
 8011cf8:	f7fd fee6 	bl	800fac8 <_tx_thread_create>
 8011cfc:	0003      	movs	r3, r0
 8011cfe:	647b      	str	r3, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8011d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011d02:	0018      	movs	r0, r3
 8011d04:	46bd      	mov	sp, r7
 8011d06:	b013      	add	sp, #76	; 0x4c
 8011d08:	bd90      	pop	{r4, r7, pc}
 8011d0a:	46c0      	nop			; (mov r8, r8)
 8011d0c:	20008848 	.word	0x20008848
 8011d10:	200087b8 	.word	0x200087b8
 8011d14:	200087bc 	.word	0x200087bc
 8011d18:	200087b0 	.word	0x200087b0
 8011d1c:	200088f8 	.word	0x200088f8
 8011d20:	20000010 	.word	0x20000010
 8011d24:	f0f0f0ef 	.word	0xf0f0f0ef

08011d28 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d30:	f3ef 8305 	mrs	r3, IPSR
 8011d34:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011d36:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011d38:	4b0f      	ldr	r3, [pc, #60]	; (8011d78 <_txe_thread_delete+0x50>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	d002      	beq.n	8011d46 <_txe_thread_delete+0x1e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8011d40:	2313      	movs	r3, #19
 8011d42:	60fb      	str	r3, [r7, #12]
 8011d44:	e013      	b.n	8011d6e <_txe_thread_delete+0x46>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d102      	bne.n	8011d52 <_txe_thread_delete+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011d4c:	230e      	movs	r3, #14
 8011d4e:	60fb      	str	r3, [r7, #12]
 8011d50:	e00d      	b.n	8011d6e <_txe_thread_delete+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4a09      	ldr	r2, [pc, #36]	; (8011d7c <_txe_thread_delete+0x54>)
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d002      	beq.n	8011d62 <_txe_thread_delete+0x3a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011d5c:	230e      	movs	r3, #14
 8011d5e:	60fb      	str	r3, [r7, #12]
 8011d60:	e005      	b.n	8011d6e <_txe_thread_delete+0x46>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	0018      	movs	r0, r3
 8011d66:	f7fd ffcf 	bl	800fd08 <_tx_thread_delete>
 8011d6a:	0003      	movs	r3, r0
 8011d6c:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
}
 8011d70:	0018      	movs	r0, r3
 8011d72:	46bd      	mov	sp, r7
 8011d74:	b004      	add	sp, #16
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	20000010 	.word	0x20000010
 8011d7c:	54485244 	.word	0x54485244

08011d80 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b08d      	sub	sp, #52	; 0x34
 8011d84:	af06      	add	r7, sp, #24
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d102      	bne.n	8011d9a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011d94:	230e      	movs	r3, #14
 8011d96:	617b      	str	r3, [r7, #20]
 8011d98:	e01a      	b.n	8011dd0 <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a0f      	ldr	r2, [pc, #60]	; (8011ddc <_txe_thread_info_get+0x5c>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d002      	beq.n	8011daa <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011da4:	230e      	movs	r3, #14
 8011da6:	617b      	str	r3, [r7, #20]
 8011da8:	e012      	b.n	8011dd0 <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8011daa:	683c      	ldr	r4, [r7, #0]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	9304      	str	r3, [sp, #16]
 8011db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db8:	9303      	str	r3, [sp, #12]
 8011dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	0023      	movs	r3, r4
 8011dc8:	f7fe f80e 	bl	800fde8 <_tx_thread_info_get>
 8011dcc:	0003      	movs	r3, r0
 8011dce:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8011dd0:	697b      	ldr	r3, [r7, #20]
}
 8011dd2:	0018      	movs	r0, r3
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	b007      	add	sp, #28
 8011dd8:	bd90      	pop	{r4, r7, pc}
 8011dda:	46c0      	nop			; (mov r8, r8)
 8011ddc:	54485244 	.word	0x54485244

08011de0 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d102      	bne.n	8011df4 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011dee:	230e      	movs	r3, #14
 8011df0:	60fb      	str	r3, [r7, #12]
 8011df2:	e00d      	b.n	8011e10 <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	4a08      	ldr	r2, [pc, #32]	; (8011e1c <_txe_thread_resume+0x3c>)
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	d002      	beq.n	8011e04 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011dfe:	230e      	movs	r3, #14
 8011e00:	60fb      	str	r3, [r7, #12]
 8011e02:	e005      	b.n	8011e10 <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	0018      	movs	r0, r3
 8011e08:	f7fe f8aa 	bl	800ff60 <_tx_thread_resume>
 8011e0c:	0003      	movs	r3, r0
 8011e0e:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011e10:	68fb      	ldr	r3, [r7, #12]
}
 8011e12:	0018      	movs	r0, r3
 8011e14:	46bd      	mov	sp, r7
 8011e16:	b004      	add	sp, #16
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	46c0      	nop			; (mov r8, r8)
 8011e1c:	54485244 	.word	0x54485244

08011e20 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011e2e:	230e      	movs	r3, #14
 8011e30:	60fb      	str	r3, [r7, #12]
 8011e32:	e00d      	b.n	8011e50 <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4a08      	ldr	r2, [pc, #32]	; (8011e5c <_txe_thread_suspend+0x3c>)
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d002      	beq.n	8011e44 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011e3e:	230e      	movs	r3, #14
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	e005      	b.n	8011e50 <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	0018      	movs	r0, r3
 8011e48:	f7fe f9a6 	bl	8010198 <_tx_thread_suspend>
 8011e4c:	0003      	movs	r3, r0
 8011e4e:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011e50:	68fb      	ldr	r3, [r7, #12]
}
 8011e52:	0018      	movs	r0, r3
 8011e54:	46bd      	mov	sp, r7
 8011e56:	b004      	add	sp, #16
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	46c0      	nop			; (mov r8, r8)
 8011e5c:	54485244 	.word	0x54485244

08011e60 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011e6e:	230e      	movs	r3, #14
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	e018      	b.n	8011ea6 <_txe_thread_terminate+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4a0d      	ldr	r2, [pc, #52]	; (8011eb0 <_txe_thread_terminate+0x50>)
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d002      	beq.n	8011e84 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011e7e:	230e      	movs	r3, #14
 8011e80:	60fb      	str	r3, [r7, #12]
 8011e82:	e010      	b.n	8011ea6 <_txe_thread_terminate+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e84:	f3ef 8305 	mrs	r3, IPSR
 8011e88:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8011e8a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011e8c:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <_txe_thread_terminate+0x54>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4313      	orrs	r3, r2
 8011e92:	d002      	beq.n	8011e9a <_txe_thread_terminate+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8011e94:	2313      	movs	r3, #19
 8011e96:	60fb      	str	r3, [r7, #12]
 8011e98:	e005      	b.n	8011ea6 <_txe_thread_terminate+0x46>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	0018      	movs	r0, r3
 8011e9e:	f7fe fca9 	bl	80107f4 <_tx_thread_terminate>
 8011ea2:	0003      	movs	r3, r0
 8011ea4:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
}
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	b004      	add	sp, #16
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	54485244 	.word	0x54485244
 8011eb4:	20000010 	.word	0x20000010

08011eb8 <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8011ec0:	4b1c      	ldr	r3, [pc, #112]	; (8011f34 <_ux_device_stack_alternate_setting_get+0x7c>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	3320      	adds	r3, #32
 8011ec6:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d12b      	bne.n	8011f28 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	22f0      	movs	r2, #240	; 0xf0
 8011ed4:	589b      	ldr	r3, [r3, r2]
 8011ed6:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 8011ed8:	e023      	b.n	8011f22 <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	695b      	ldr	r3, [r3, #20]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d11b      	bne.n	8011f1c <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	333c      	adds	r3, #60	; 0x3c
 8011ee8:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	3330      	adds	r3, #48	; 0x30
 8011eee:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8011ef8:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8011efa:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	2201      	movs	r2, #1
 8011f00:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	2203      	movs	r2, #3
 8011f06:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	0018      	movs	r0, r3
 8011f10:	f001 fe5e 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8011f14:	0003      	movs	r3, r0
 8011f16:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	e006      	b.n	8011f2a <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f20:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1d8      	bne.n	8011eda <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 8011f28:	23ff      	movs	r3, #255	; 0xff
}
 8011f2a:	0018      	movs	r0, r3
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	b008      	add	sp, #32
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	46c0      	nop			; (mov r8, r8)
 8011f34:	20008db8 	.word	0x20008db8

08011f38 <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 8011f38:	b590      	push	{r4, r7, lr}
 8011f3a:	b0af      	sub	sp, #188	; 0xbc
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8011f42:	4bdd      	ldr	r3, [pc, #884]	; (80122b8 <_ux_device_stack_alternate_setting_set+0x380>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	3320      	adds	r3, #32
 8011f48:	2298      	movs	r2, #152	; 0x98
 8011f4a:	18b9      	adds	r1, r7, r2
 8011f4c:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8011f4e:	18bb      	adds	r3, r7, r2
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b03      	cmp	r3, #3
 8011f56:	d001      	beq.n	8011f5c <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 8011f58:	2354      	movs	r3, #84	; 0x54
 8011f5a:	e270      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 8011f5c:	2398      	movs	r3, #152	; 0x98
 8011f5e:	18fb      	adds	r3, r7, r3
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	22f0      	movs	r2, #240	; 0xf0
 8011f64:	589b      	ldr	r3, [r3, r2]
 8011f66:	22b4      	movs	r2, #180	; 0xb4
 8011f68:	18ba      	adds	r2, r7, r2
 8011f6a:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 8011f6c:	e00b      	b.n	8011f86 <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8011f6e:	21b4      	movs	r1, #180	; 0xb4
 8011f70:	187b      	adds	r3, r7, r1
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	695b      	ldr	r3, [r3, #20]
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d00a      	beq.n	8011f92 <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 8011f7c:	187b      	adds	r3, r7, r1
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f82:	187a      	adds	r2, r7, r1
 8011f84:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 8011f86:	23b4      	movs	r3, #180	; 0xb4
 8011f88:	18fb      	adds	r3, r7, r3
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1ee      	bne.n	8011f6e <_ux_device_stack_alternate_setting_set+0x36>
 8011f90:	e000      	b.n	8011f94 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 8011f92:	46c0      	nop			; (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 8011f94:	23b4      	movs	r3, #180	; 0xb4
 8011f96:	18fb      	adds	r3, r7, r3
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8011f9e:	2252      	movs	r2, #82	; 0x52
 8011fa0:	2107      	movs	r1, #7
 8011fa2:	2002      	movs	r0, #2
 8011fa4:	f001 fe9a 	bl	8013cdc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 8011fa8:	2352      	movs	r3, #82	; 0x52
 8011faa:	e248      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8011fac:	23b4      	movs	r3, #180	; 0xb4
 8011fae:	18fb      	adds	r3, r7, r3
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	699b      	ldr	r3, [r3, #24]
 8011fb4:	683a      	ldr	r2, [r7, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d101      	bne.n	8011fbe <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e23f      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8011fbe:	4bbe      	ldr	r3, [pc, #760]	; (80122b8 <_ux_device_stack_alternate_setting_set+0x380>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	2294      	movs	r2, #148	; 0x94
 8011fc4:	18ba      	adds	r2, r7, r2
 8011fc6:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8011fc8:	4bbb      	ldr	r3, [pc, #748]	; (80122b8 <_ux_device_stack_alternate_setting_set+0x380>)
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	2394      	movs	r3, #148	; 0x94
 8011fce:	005b      	lsls	r3, r3, #1
 8011fd0:	58d3      	ldr	r3, [r2, r3]
 8011fd2:	22b0      	movs	r2, #176	; 0xb0
 8011fd4:	18ba      	adds	r2, r7, r2
 8011fd6:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8011fd8:	4bb7      	ldr	r3, [pc, #732]	; (80122b8 <_ux_device_stack_alternate_setting_set+0x380>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	2396      	movs	r3, #150	; 0x96
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	58d3      	ldr	r3, [r2, r3]
 8011fe2:	22ac      	movs	r2, #172	; 0xac
 8011fe4:	18ba      	adds	r2, r7, r2
 8011fe6:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 8011fe8:	e222      	b.n	8012430 <_ux_device_stack_alternate_setting_set+0x4f8>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8011fea:	20b0      	movs	r0, #176	; 0xb0
 8011fec:	183b      	adds	r3, r7, r0
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	2290      	movs	r2, #144	; 0x90
 8011ff4:	18ba      	adds	r2, r7, r2
 8011ff6:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 8011ff8:	218f      	movs	r1, #143	; 0x8f
 8011ffa:	187b      	adds	r3, r7, r1
 8011ffc:	183a      	adds	r2, r7, r0
 8011ffe:	6812      	ldr	r2, [r2, #0]
 8012000:	7852      	ldrb	r2, [r2, #1]
 8012002:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012004:	187b      	adds	r3, r7, r1
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b02      	cmp	r3, #2
 801200a:	d000      	beq.n	801200e <_ux_device_stack_alternate_setting_set+0xd6>
 801200c:	e1ff      	b.n	801240e <_ux_device_stack_alternate_setting_set+0x4d6>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 801200e:	2458      	movs	r4, #88	; 0x58
 8012010:	193b      	adds	r3, r7, r4
 8012012:	49aa      	ldr	r1, [pc, #680]	; (80122bc <_ux_device_stack_alternate_setting_set+0x384>)
 8012014:	183a      	adds	r2, r7, r0
 8012016:	6810      	ldr	r0, [r2, #0]
 8012018:	2208      	movs	r2, #8
 801201a:	f001 ff4e 	bl	8013eba <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 801201e:	0020      	movs	r0, r4
 8012020:	183b      	adds	r3, r7, r0
 8012022:	691a      	ldr	r2, [r3, #16]
 8012024:	2398      	movs	r3, #152	; 0x98
 8012026:	18fb      	adds	r3, r7, r3
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	21cc      	movs	r1, #204	; 0xcc
 801202c:	585b      	ldr	r3, [r3, r1]
 801202e:	429a      	cmp	r2, r3
 8012030:	d000      	beq.n	8012034 <_ux_device_stack_alternate_setting_set+0xfc>
 8012032:	e1ec      	b.n	801240e <_ux_device_stack_alternate_setting_set+0x4d6>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 8012034:	183b      	adds	r3, r7, r0
 8012036:	689b      	ldr	r3, [r3, #8]
 8012038:	22ac      	movs	r2, #172	; 0xac
 801203a:	18ba      	adds	r2, r7, r2
 801203c:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 801203e:	e1df      	b.n	8012400 <_ux_device_stack_alternate_setting_set+0x4c8>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 8012040:	20b0      	movs	r0, #176	; 0xb0
 8012042:	183b      	adds	r3, r7, r0
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	2290      	movs	r2, #144	; 0x90
 801204a:	18ba      	adds	r2, r7, r2
 801204c:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 801204e:	218f      	movs	r1, #143	; 0x8f
 8012050:	187b      	adds	r3, r7, r1
 8012052:	183a      	adds	r2, r7, r0
 8012054:	6812      	ldr	r2, [r2, #0]
 8012056:	7852      	ldrb	r2, [r2, #1]
 8012058:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801205a:	187b      	adds	r3, r7, r1
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	2b04      	cmp	r3, #4
 8012060:	d000      	beq.n	8012064 <_ux_device_stack_alternate_setting_set+0x12c>
 8012062:	e1bc      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x4a6>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 8012064:	2434      	movs	r4, #52	; 0x34
 8012066:	193b      	adds	r3, r7, r4
 8012068:	4995      	ldr	r1, [pc, #596]	; (80122c0 <_ux_device_stack_alternate_setting_set+0x388>)
 801206a:	183a      	adds	r2, r7, r0
 801206c:	6810      	ldr	r0, [r2, #0]
 801206e:	2209      	movs	r2, #9
 8012070:	f001 ff23 	bl	8013eba <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012074:	193b      	adds	r3, r7, r4
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	429a      	cmp	r2, r3
 801207c:	d000      	beq.n	8012080 <_ux_device_stack_alternate_setting_set+0x148>
 801207e:	e1ae      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x4a6>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8012080:	193b      	adds	r3, r7, r4
 8012082:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8012084:	683a      	ldr	r2, [r7, #0]
 8012086:	429a      	cmp	r2, r3
 8012088:	d000      	beq.n	801208c <_ux_device_stack_alternate_setting_set+0x154>
 801208a:	e1a8      	b.n	80123de <_ux_device_stack_alternate_setting_set+0x4a6>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 801208c:	23b4      	movs	r3, #180	; 0xb4
 801208e:	18fb      	adds	r3, r7, r3
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012094:	22a8      	movs	r2, #168	; 0xa8
 8012096:	18ba      	adds	r2, r7, r2
 8012098:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801209a:	e02c      	b.n	80120f6 <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 801209c:	24a8      	movs	r4, #168	; 0xa8
 801209e:	193b      	adds	r3, r7, r4
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2126      	movs	r1, #38	; 0x26
 80120a4:	0018      	movs	r0, r3
 80120a6:	f001 fd7f 	bl	8013ba8 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 80120aa:	2194      	movs	r1, #148	; 0x94
 80120ac:	187b      	adds	r3, r7, r1
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	699b      	ldr	r3, [r3, #24]
 80120b2:	193a      	adds	r2, r7, r4
 80120b4:	6812      	ldr	r2, [r2, #0]
 80120b6:	1879      	adds	r1, r7, r1
 80120b8:	6808      	ldr	r0, [r1, #0]
 80120ba:	210f      	movs	r1, #15
 80120bc:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 80120be:	193b      	adds	r3, r7, r4
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c4:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 80120c6:	0021      	movs	r1, r4
 80120c8:	187b      	adds	r3, r7, r1
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2200      	movs	r2, #0
 80120ce:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 80120d0:	187b      	adds	r3, r7, r1
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	2200      	movs	r2, #0
 80120d6:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 80120d8:	187b      	adds	r3, r7, r1
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2200      	movs	r2, #0
 80120de:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 80120e0:	187b      	adds	r3, r7, r1
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2200      	movs	r2, #0
 80120e6:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 80120e8:	187b      	adds	r3, r7, r1
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2200      	movs	r2, #0
 80120ee:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 80120f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120f2:	187a      	adds	r2, r7, r1
 80120f4:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 80120f6:	23a8      	movs	r3, #168	; 0xa8
 80120f8:	18fb      	adds	r3, r7, r3
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1cd      	bne.n	801209c <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 8012100:	23b4      	movs	r3, #180	; 0xb4
 8012102:	18fb      	adds	r3, r7, r3
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2200      	movs	r2, #0
 8012108:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 801210a:	21b0      	movs	r1, #176	; 0xb0
 801210c:	187b      	adds	r3, r7, r1
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	001a      	movs	r2, r3
 8012114:	20ac      	movs	r0, #172	; 0xac
 8012116:	183b      	adds	r3, r7, r0
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	1a9b      	subs	r3, r3, r2
 801211c:	183a      	adds	r2, r7, r0
 801211e:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 8012120:	187b      	adds	r3, r7, r1
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	001a      	movs	r2, r3
 8012128:	187b      	adds	r3, r7, r1
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	189b      	adds	r3, r3, r2
 801212e:	187a      	adds	r2, r7, r1
 8012130:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 8012132:	e10a      	b.n	801234a <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 8012134:	22b0      	movs	r2, #176	; 0xb0
 8012136:	18bb      	adds	r3, r7, r2
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	2190      	movs	r1, #144	; 0x90
 801213e:	1879      	adds	r1, r7, r1
 8012140:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 8012142:	218f      	movs	r1, #143	; 0x8f
 8012144:	187b      	adds	r3, r7, r1
 8012146:	18ba      	adds	r2, r7, r2
 8012148:	6812      	ldr	r2, [r2, #0]
 801214a:	7852      	ldrb	r2, [r2, #1]
 801214c:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 801214e:	187b      	adds	r3, r7, r1
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	2b05      	cmp	r3, #5
 8012154:	d008      	beq.n	8012168 <_ux_device_stack_alternate_setting_set+0x230>
 8012156:	dd00      	ble.n	801215a <_ux_device_stack_alternate_setting_set+0x222>
 8012158:	e0e5      	b.n	8012326 <_ux_device_stack_alternate_setting_set+0x3ee>
 801215a:	2b02      	cmp	r3, #2
 801215c:	d100      	bne.n	8012160 <_ux_device_stack_alternate_setting_set+0x228>
 801215e:	e0db      	b.n	8012318 <_ux_device_stack_alternate_setting_set+0x3e0>
 8012160:	2b04      	cmp	r3, #4
 8012162:	d100      	bne.n	8012166 <_ux_device_stack_alternate_setting_set+0x22e>
 8012164:	e0d8      	b.n	8012318 <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 8012166:	e0de      	b.n	8012326 <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 8012168:	2198      	movs	r1, #152	; 0x98
 801216a:	187b      	adds	r3, r7, r1
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	22fc      	movs	r2, #252	; 0xfc
 8012170:	589b      	ldr	r3, [r3, r2]
 8012172:	22a8      	movs	r2, #168	; 0xa8
 8012174:	18ba      	adds	r2, r7, r2
 8012176:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8012178:	187b      	adds	r3, r7, r1
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	2380      	movs	r3, #128	; 0x80
 801217e:	005b      	lsls	r3, r3, #1
 8012180:	58d3      	ldr	r3, [r2, r3]
 8012182:	22a0      	movs	r2, #160	; 0xa0
 8012184:	18ba      	adds	r2, r7, r2
 8012186:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8012188:	e016      	b.n	80121b8 <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801218a:	22a8      	movs	r2, #168	; 0xa8
 801218c:	18bb      	adds	r3, r7, r2
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d104      	bne.n	80121a0 <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8012196:	18bb      	adds	r3, r7, r2
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2201      	movs	r2, #1
 801219c:	601a      	str	r2, [r3, #0]
                                            break;
 801219e:	e010      	b.n	80121c2 <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 80121a0:	22a8      	movs	r2, #168	; 0xa8
 80121a2:	18bb      	adds	r3, r7, r2
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	3390      	adds	r3, #144	; 0x90
 80121a8:	18ba      	adds	r2, r7, r2
 80121aa:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 80121ac:	22a0      	movs	r2, #160	; 0xa0
 80121ae:	18bb      	adds	r3, r7, r2
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	3b01      	subs	r3, #1
 80121b4:	18ba      	adds	r2, r7, r2
 80121b6:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 80121b8:	23a0      	movs	r3, #160	; 0xa0
 80121ba:	18fb      	adds	r3, r7, r3
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1e3      	bne.n	801218a <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 80121c2:	23a0      	movs	r3, #160	; 0xa0
 80121c4:	18fb      	adds	r3, r7, r3
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d101      	bne.n	80121d0 <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 80121cc:	2312      	movs	r3, #18
 80121ce:	e136      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80121d0:	24a8      	movs	r4, #168	; 0xa8
 80121d2:	193b      	adds	r3, r7, r4
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 80121d8:	493a      	ldr	r1, [pc, #232]	; (80122c4 <_ux_device_stack_alternate_setting_set+0x38c>)
 80121da:	22b0      	movs	r2, #176	; 0xb0
 80121dc:	18ba      	adds	r2, r7, r2
 80121de:	6810      	ldr	r0, [r2, #0]
 80121e0:	2206      	movs	r2, #6
 80121e2:	f001 fe6a 	bl	8013eba <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80121e6:	0021      	movs	r1, r4
 80121e8:	187b      	adds	r3, r7, r1
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3330      	adds	r3, #48	; 0x30
 80121ee:	2280      	movs	r2, #128	; 0x80
 80121f0:	18ba      	adds	r2, r7, r2
 80121f2:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80121f4:	187b      	adds	r3, r7, r1
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 80121fa:	055b      	lsls	r3, r3, #21
 80121fc:	0d5b      	lsrs	r3, r3, #21
 80121fe:	209c      	movs	r0, #156	; 0x9c
 8012200:	183a      	adds	r2, r7, r0
 8012202:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8012204:	4b2c      	ldr	r3, [pc, #176]	; (80122b8 <_ux_device_stack_alternate_setting_set+0x380>)
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	23ce      	movs	r3, #206	; 0xce
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	58d3      	ldr	r3, [r2, r3]
 801220e:	2b02      	cmp	r3, #2
 8012210:	d11b      	bne.n	801224a <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8012212:	187b      	adds	r3, r7, r1
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	699b      	ldr	r3, [r3, #24]
 8012218:	2201      	movs	r2, #1
 801221a:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801221c:	d015      	beq.n	801224a <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801221e:	187b      	adds	r3, r7, r1
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	69da      	ldr	r2, [r3, #28]
 8012224:	23c0      	movs	r3, #192	; 0xc0
 8012226:	015b      	lsls	r3, r3, #5
 8012228:	4013      	ands	r3, r2
 801222a:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 801222c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00b      	beq.n	801224a <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8012232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012234:	0adb      	lsrs	r3, r3, #11
 8012236:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 8012238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801223a:	3301      	adds	r3, #1
 801223c:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 801223e:	183b      	adds	r3, r7, r0
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012244:	4353      	muls	r3, r2
 8012246:	183a      	adds	r2, r7, r0
 8012248:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801224a:	2180      	movs	r1, #128	; 0x80
 801224c:	187b      	adds	r3, r7, r1
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	229c      	movs	r2, #156	; 0x9c
 8012252:	18ba      	adds	r2, r7, r2
 8012254:	6812      	ldr	r2, [r2, #0]
 8012256:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8012258:	187b      	adds	r3, r7, r1
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	24a8      	movs	r4, #168	; 0xa8
 801225e:	193a      	adds	r2, r7, r4
 8012260:	6812      	ldr	r2, [r2, #0]
 8012262:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8012264:	187b      	adds	r3, r7, r1
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2201      	movs	r2, #1
 801226a:	4252      	negs	r2, r2
 801226c:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 801226e:	193b      	adds	r3, r7, r4
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	22b4      	movs	r2, #180	; 0xb4
 8012274:	18ba      	adds	r2, r7, r2
 8012276:	6812      	ldr	r2, [r2, #0]
 8012278:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 801227a:	193b      	adds	r3, r7, r4
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2298      	movs	r2, #152	; 0x98
 8012280:	18ba      	adds	r2, r7, r2
 8012282:	6812      	ldr	r2, [r2, #0]
 8012284:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8012286:	2194      	movs	r1, #148	; 0x94
 8012288:	187b      	adds	r3, r7, r1
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	699b      	ldr	r3, [r3, #24]
 801228e:	193a      	adds	r2, r7, r4
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	1879      	adds	r1, r7, r1
 8012294:	6808      	ldr	r0, [r1, #0]
 8012296:	210e      	movs	r1, #14
 8012298:	4798      	blx	r3
 801229a:	0003      	movs	r3, r0
 801229c:	2184      	movs	r1, #132	; 0x84
 801229e:	187a      	adds	r2, r7, r1
 80122a0:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 80122a2:	187b      	adds	r3, r7, r1
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00e      	beq.n	80122c8 <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80122aa:	193b      	adds	r3, r7, r4
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2200      	movs	r2, #0
 80122b0:	601a      	str	r2, [r3, #0]
                                        return(status);
 80122b2:	187b      	adds	r3, r7, r1
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	e0c2      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>
 80122b8:	20008db8 	.word	0x20008db8
 80122bc:	20000040 	.word	0x20000040
 80122c0:	20000048 	.word	0x20000048
 80122c4:	20000028 	.word	0x20000028
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 80122c8:	22b4      	movs	r2, #180	; 0xb4
 80122ca:	18bb      	adds	r3, r7, r2
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d106      	bne.n	80122e2 <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 80122d4:	18bb      	adds	r3, r7, r2
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	22a8      	movs	r2, #168	; 0xa8
 80122da:	18ba      	adds	r2, r7, r2
 80122dc:	6812      	ldr	r2, [r2, #0]
 80122de:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 80122e0:	e022      	b.n	8012328 <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 80122e2:	23b4      	movs	r3, #180	; 0xb4
 80122e4:	18fb      	adds	r3, r7, r3
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ea:	22a4      	movs	r2, #164	; 0xa4
 80122ec:	18ba      	adds	r2, r7, r2
 80122ee:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80122f0:	e005      	b.n	80122fe <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 80122f2:	22a4      	movs	r2, #164	; 0xa4
 80122f4:	18bb      	adds	r3, r7, r2
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fa:	18ba      	adds	r2, r7, r2
 80122fc:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80122fe:	22a4      	movs	r2, #164	; 0xa4
 8012300:	18bb      	adds	r3, r7, r2
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1f3      	bne.n	80122f2 <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801230a:	18bb      	adds	r3, r7, r2
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	22a8      	movs	r2, #168	; 0xa8
 8012310:	18ba      	adds	r2, r7, r2
 8012312:	6812      	ldr	r2, [r2, #0]
 8012314:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 8012316:	e007      	b.n	8012328 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 8012318:	2390      	movs	r3, #144	; 0x90
 801231a:	18fb      	adds	r3, r7, r3
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	22ac      	movs	r2, #172	; 0xac
 8012320:	18ba      	adds	r2, r7, r2
 8012322:	6013      	str	r3, [r2, #0]
                                    break;
 8012324:	e000      	b.n	8012328 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 8012326:	46c0      	nop			; (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 8012328:	21ac      	movs	r1, #172	; 0xac
 801232a:	187b      	adds	r3, r7, r1
 801232c:	681a      	ldr	r2, [r3, #0]
 801232e:	2090      	movs	r0, #144	; 0x90
 8012330:	183b      	adds	r3, r7, r0
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	1ad3      	subs	r3, r2, r3
 8012336:	187a      	adds	r2, r7, r1
 8012338:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 801233a:	21b0      	movs	r1, #176	; 0xb0
 801233c:	187b      	adds	r3, r7, r1
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	183b      	adds	r3, r7, r0
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	18d3      	adds	r3, r2, r3
 8012346:	187a      	adds	r2, r7, r1
 8012348:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 801234a:	23ac      	movs	r3, #172	; 0xac
 801234c:	18fb      	adds	r3, r7, r3
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d000      	beq.n	8012356 <_ux_device_stack_alternate_setting_set+0x41e>
 8012354:	e6ee      	b.n	8012134 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8012356:	24b4      	movs	r4, #180	; 0xb4
 8012358:	193b      	adds	r3, r7, r4
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	330c      	adds	r3, #12
 801235e:	2234      	movs	r2, #52	; 0x34
 8012360:	18b9      	adds	r1, r7, r2
 8012362:	2224      	movs	r2, #36	; 0x24
 8012364:	0018      	movs	r0, r3
 8012366:	f001 ffa3 	bl	80142b0 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 801236a:	4b37      	ldr	r3, [pc, #220]	; (8012448 <_ux_device_stack_alternate_setting_set+0x510>)
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	193b      	adds	r3, r7, r4
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	695b      	ldr	r3, [r3, #20]
 8012374:	3356      	adds	r3, #86	; 0x56
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	18d3      	adds	r3, r2, r3
 801237a:	3304      	adds	r3, #4
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2288      	movs	r2, #136	; 0x88
 8012380:	18b9      	adds	r1, r7, r2
 8012382:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 8012384:	18bb      	adds	r3, r7, r2
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d004      	beq.n	8012396 <_ux_device_stack_alternate_setting_set+0x45e>
 801238c:	18bb      	adds	r3, r7, r2
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <_ux_device_stack_alternate_setting_set+0x462>
                            {

                                return (UX_NO_CLASS_MATCH);
 8012396:	2357      	movs	r3, #87	; 0x57
 8012398:	e051      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 801239a:	2008      	movs	r0, #8
 801239c:	183b      	adds	r3, r7, r0
 801239e:	2206      	movs	r2, #6
 80123a0:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 80123a2:	183b      	adds	r3, r7, r0
 80123a4:	21b4      	movs	r1, #180	; 0xb4
 80123a6:	187a      	adds	r2, r7, r1
 80123a8:	6812      	ldr	r2, [r2, #0]
 80123aa:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 80123ac:	183b      	adds	r3, r7, r0
 80123ae:	2488      	movs	r4, #136	; 0x88
 80123b0:	193a      	adds	r2, r7, r4
 80123b2:	6812      	ldr	r2, [r2, #0]
 80123b4:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 80123b6:	193b      	adds	r3, r7, r4
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	2388      	movs	r3, #136	; 0x88
 80123bc:	005b      	lsls	r3, r3, #1
 80123be:	1879      	adds	r1, r7, r1
 80123c0:	6809      	ldr	r1, [r1, #0]
 80123c2:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 80123c4:	193b      	adds	r3, r7, r4
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123ca:	183a      	adds	r2, r7, r0
 80123cc:	0010      	movs	r0, r2
 80123ce:	4798      	blx	r3
 80123d0:	0003      	movs	r3, r0
 80123d2:	2284      	movs	r2, #132	; 0x84
 80123d4:	18b9      	adds	r1, r7, r2
 80123d6:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 80123d8:	18bb      	adds	r3, r7, r2
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	e02f      	b.n	801243e <_ux_device_stack_alternate_setting_set+0x506>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 80123de:	21ac      	movs	r1, #172	; 0xac
 80123e0:	187b      	adds	r3, r7, r1
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	2090      	movs	r0, #144	; 0x90
 80123e6:	183b      	adds	r3, r7, r0
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	187a      	adds	r2, r7, r1
 80123ee:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 80123f0:	21b0      	movs	r1, #176	; 0xb0
 80123f2:	187b      	adds	r3, r7, r1
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	183b      	adds	r3, r7, r0
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	18d3      	adds	r3, r2, r3
 80123fc:	187a      	adds	r2, r7, r1
 80123fe:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 8012400:	23ac      	movs	r3, #172	; 0xac
 8012402:	18fb      	adds	r3, r7, r3
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d000      	beq.n	801240c <_ux_device_stack_alternate_setting_set+0x4d4>
 801240a:	e619      	b.n	8012040 <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 801240c:	e016      	b.n	801243c <_ux_device_stack_alternate_setting_set+0x504>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801240e:	21ac      	movs	r1, #172	; 0xac
 8012410:	187b      	adds	r3, r7, r1
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	2090      	movs	r0, #144	; 0x90
 8012416:	183b      	adds	r3, r7, r0
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	1ad3      	subs	r3, r2, r3
 801241c:	187a      	adds	r2, r7, r1
 801241e:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8012420:	21b0      	movs	r1, #176	; 0xb0
 8012422:	187b      	adds	r3, r7, r1
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	183b      	adds	r3, r7, r0
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	18d3      	adds	r3, r2, r3
 801242c:	187a      	adds	r2, r7, r1
 801242e:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8012430:	23ac      	movs	r3, #172	; 0xac
 8012432:	18fb      	adds	r3, r7, r3
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d000      	beq.n	801243c <_ux_device_stack_alternate_setting_set+0x504>
 801243a:	e5d6      	b.n	8011fea <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 801243c:	23ff      	movs	r3, #255	; 0xff
#endif
}
 801243e:	0018      	movs	r0, r3
 8012440:	46bd      	mov	sp, r7
 8012442:	b02f      	add	sp, #188	; 0xbc
 8012444:	bd90      	pop	{r4, r7, pc}
 8012446:	46c0      	nop			; (mov r8, r8)
 8012448:	20008db8 	.word	0x20008db8

0801244c <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b092      	sub	sp, #72	; 0x48
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 801245a:	2300      	movs	r3, #0
 801245c:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 801245e:	2310      	movs	r3, #16
 8012460:	18f9      	adds	r1, r7, r3
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	223f      	movs	r2, #63	; 0x3f
 8012466:	0018      	movs	r0, r3
 8012468:	f002 f90a 	bl	8014680 <_ux_utility_string_length_check>
 801246c:	0003      	movs	r3, r0
 801246e:	647b      	str	r3, [r7, #68]	; 0x44
    if (status)
 8012470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <_ux_device_stack_class_register+0x2e>
        return(status);
 8012476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012478:	e03d      	b.n	80124f6 <_ux_device_stack_class_register+0xaa>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801247a:	4b21      	ldr	r3, [pc, #132]	; (8012500 <_ux_device_stack_class_register+0xb4>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	23ac      	movs	r3, #172	; 0xac
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	58d3      	ldr	r3, [r2, r3]
 8012484:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 8012486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248a:	2b00      	cmp	r3, #0
 801248c:	d132      	bne.n	80124f4 <_ux_device_stack_class_register+0xa8>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 801248e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	1c5a      	adds	r2, r3, #1
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	0019      	movs	r1, r3
 8012498:	f001 ff0a 	bl	80142b0 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 801249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 80124a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124a4:	2382      	movs	r3, #130	; 0x82
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124aa:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 80124ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124ae:	2386      	movs	r3, #134	; 0x86
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	6879      	ldr	r1, [r7, #4]
 80124b4:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 80124b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124b8:	2384      	movs	r3, #132	; 0x84
 80124ba:	005b      	lsls	r3, r3, #1
 80124bc:	6839      	ldr	r1, [r7, #0]
 80124be:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 80124c0:	2114      	movs	r1, #20
 80124c2:	187b      	adds	r3, r7, r1
 80124c4:	2205      	movs	r2, #5
 80124c6:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 80124c8:	187b      	adds	r3, r7, r1
 80124ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80124cc:	625a      	str	r2, [r3, #36]	; 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 80124ce:	187b      	adds	r3, r7, r1
 80124d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124d2:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 80124d4:	187a      	adds	r2, r7, r1
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	0010      	movs	r0, r2
 80124da:	4798      	blx	r3
 80124dc:	0003      	movs	r3, r0
 80124de:	647b      	str	r3, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 80124e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d001      	beq.n	80124ea <_ux_device_stack_class_register+0x9e>
                return(status);
 80124e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124e8:	e005      	b.n	80124f6 <_ux_device_stack_class_register+0xaa>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 80124ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ec:	2201      	movs	r2, #1
 80124ee:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 80124f0:	2300      	movs	r3, #0
 80124f2:	e000      	b.n	80124f6 <_ux_device_stack_class_register+0xaa>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 80124f4:	2312      	movs	r3, #18
}
 80124f6:	0018      	movs	r0, r3
 80124f8:	46bd      	mov	sp, r7
 80124fa:	b012      	add	sp, #72	; 0x48
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	46c0      	nop			; (mov r8, r8)
 8012500:	20008db8 	.word	0x20008db8

08012504 <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b08a      	sub	sp, #40	; 0x28
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012510:	4b2b      	ldr	r3, [pc, #172]	; (80125c0 <_ux_device_stack_clear_feature+0xbc>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012516:	4b2a      	ldr	r3, [pc, #168]	; (80125c0 <_ux_device_stack_clear_feature+0xbc>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3320      	adds	r3, #32
 801251c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	333c      	adds	r3, #60	; 0x3c
 8012522:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2203      	movs	r2, #3
 8012528:	4013      	ands	r3, r2
 801252a:	d002      	beq.n	8012532 <_ux_device_stack_clear_feature+0x2e>
 801252c:	2b02      	cmp	r3, #2
 801252e:	d013      	beq.n	8012558 <_ux_device_stack_clear_feature+0x54>
 8012530:	e037      	b.n	80125a2 <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b01      	cmp	r3, #1
 8012536:	d13c      	bne.n	80125b2 <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8012538:	4b21      	ldr	r3, [pc, #132]	; (80125c0 <_ux_device_stack_clear_feature+0xbc>)
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	23d2      	movs	r3, #210	; 0xd2
 801253e:	005b      	lsls	r3, r3, #1
 8012540:	58d3      	ldr	r3, [r2, r3]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d006      	beq.n	8012554 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8012546:	4b1e      	ldr	r3, [pc, #120]	; (80125c0 <_ux_device_stack_clear_feature+0xbc>)
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	23d4      	movs	r3, #212	; 0xd4
 801254c:	005b      	lsls	r3, r3, #1
 801254e:	2100      	movs	r1, #0
 8012550:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8012552:	e02e      	b.n	80125b2 <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8012554:	2354      	movs	r3, #84	; 0x54
 8012556:	e02e      	b.n	80125b6 <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	22f0      	movs	r2, #240	; 0xf0
 801255c:	589b      	ldr	r3, [r3, r2]
 801255e:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8012560:	e01c      	b.n	801259c <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012566:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8012568:	e012      	b.n	8012590 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801256a:	6a3b      	ldr	r3, [r7, #32]
 801256c:	695b      	ldr	r3, [r3, #20]
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	429a      	cmp	r2, r3
 8012572:	d10a      	bne.n	801258a <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	6a3a      	ldr	r2, [r7, #32]
 801257a:	69f8      	ldr	r0, [r7, #28]
 801257c:	2110      	movs	r1, #16
 801257e:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8012580:	6a3b      	ldr	r3, [r7, #32]
 8012582:	2200      	movs	r2, #0
 8012584:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8012586:	2300      	movs	r3, #0
 8012588:	e015      	b.n	80125b6 <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801258a:	6a3b      	ldr	r3, [r7, #32]
 801258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258e:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1e9      	bne.n	801256a <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801259a:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1df      	bne.n	8012562 <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	699b      	ldr	r3, [r3, #24]
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	69f8      	ldr	r0, [r7, #28]
 80125aa:	2114      	movs	r1, #20
 80125ac:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 80125ae:	2300      	movs	r3, #0
 80125b0:	e001      	b.n	80125b6 <_ux_device_stack_clear_feature+0xb2>
        break;
 80125b2:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	0018      	movs	r0, r3
 80125b8:	46bd      	mov	sp, r7
 80125ba:	b00a      	add	sp, #40	; 0x28
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	46c0      	nop			; (mov r8, r8)
 80125c0:	20008db8 	.word	0x20008db8

080125c4 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80125ca:	4b10      	ldr	r3, [pc, #64]	; (801260c <_ux_device_stack_configuration_get+0x48>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	3320      	adds	r3, #32
 80125d0:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	333c      	adds	r3, #60	; 0x3c
 80125d6:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	3330      	adds	r3, #48	; 0x30
 80125dc:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	22cc      	movs	r2, #204	; 0xcc
 80125e2:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 80125e8:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 80125ea:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2203      	movs	r2, #3
 80125f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2201      	movs	r2, #1
 80125f6:	2101      	movs	r1, #1
 80125f8:	0018      	movs	r0, r3
 80125fa:	f001 fae9 	bl	8013bd0 <_ux_device_stack_transfer_request>
 80125fe:	0003      	movs	r3, r0
 8012600:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 8012602:	683b      	ldr	r3, [r7, #0]
}
 8012604:	0018      	movs	r0, r3
 8012606:	46bd      	mov	sp, r7
 8012608:	b004      	add	sp, #16
 801260a:	bd80      	pop	{r7, pc}
 801260c:	20008db8 	.word	0x20008db8

08012610 <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b0ad      	sub	sp, #180	; 0xb4
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8012618:	235c      	movs	r3, #92	; 0x5c
 801261a:	18fb      	adds	r3, r7, r3
 801261c:	0018      	movs	r0, r3
 801261e:	2320      	movs	r3, #32
 8012620:	001a      	movs	r2, r3
 8012622:	2100      	movs	r1, #0
 8012624:	f005 f9f9 	bl	8017a1a <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8012628:	2300      	movs	r3, #0
 801262a:	22a0      	movs	r2, #160	; 0xa0
 801262c:	18ba      	adds	r2, r7, r2
 801262e:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8012630:	2300      	movs	r3, #0
 8012632:	2298      	movs	r2, #152	; 0x98
 8012634:	18ba      	adds	r2, r7, r2
 8012636:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 8012638:	2300      	movs	r3, #0
 801263a:	2294      	movs	r2, #148	; 0x94
 801263c:	18ba      	adds	r2, r7, r2
 801263e:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012640:	4bbf      	ldr	r3, [pc, #764]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2290      	movs	r2, #144	; 0x90
 8012646:	18ba      	adds	r2, r7, r2
 8012648:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801264a:	4bbd      	ldr	r3, [pc, #756]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	3320      	adds	r3, #32
 8012650:	228c      	movs	r2, #140	; 0x8c
 8012652:	18b9      	adds	r1, r7, r2
 8012654:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8012656:	2300      	movs	r3, #0
 8012658:	219c      	movs	r1, #156	; 0x9c
 801265a:	1879      	adds	r1, r7, r1
 801265c:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801265e:	18bb      	adds	r3, r7, r2
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	22cc      	movs	r2, #204	; 0xcc
 8012664:	589b      	ldr	r3, [r3, r2]
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	429a      	cmp	r2, r3
 801266a:	d101      	bne.n	8012670 <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 801266c:	2300      	movs	r3, #0
 801266e:	e1c9      	b.n	8012a04 <_ux_device_stack_configuration_set+0x3f4>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8012670:	4bb3      	ldr	r3, [pc, #716]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	2394      	movs	r3, #148	; 0x94
 8012676:	005b      	lsls	r3, r3, #1
 8012678:	58d3      	ldr	r3, [r2, r3]
 801267a:	22ac      	movs	r2, #172	; 0xac
 801267c:	18ba      	adds	r2, r7, r2
 801267e:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012680:	4baf      	ldr	r3, [pc, #700]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	2396      	movs	r3, #150	; 0x96
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	58d3      	ldr	r3, [r2, r3]
 801268a:	22a8      	movs	r2, #168	; 0xa8
 801268c:	18ba      	adds	r2, r7, r2
 801268e:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8012690:	e02e      	b.n	80126f0 <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8012692:	20ac      	movs	r0, #172	; 0xac
 8012694:	183b      	adds	r3, r7, r0
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	2288      	movs	r2, #136	; 0x88
 801269c:	18ba      	adds	r2, r7, r2
 801269e:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 80126a0:	2187      	movs	r1, #135	; 0x87
 80126a2:	187b      	adds	r3, r7, r1
 80126a4:	183a      	adds	r2, r7, r0
 80126a6:	6812      	ldr	r2, [r2, #0]
 80126a8:	7852      	ldrb	r2, [r2, #1]
 80126aa:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 80126ac:	187b      	adds	r3, r7, r1
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	d10c      	bne.n	80126ce <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 80126b4:	245c      	movs	r4, #92	; 0x5c
 80126b6:	193b      	adds	r3, r7, r4
 80126b8:	49a2      	ldr	r1, [pc, #648]	; (8012944 <_ux_device_stack_configuration_set+0x334>)
 80126ba:	183a      	adds	r2, r7, r0
 80126bc:	6810      	ldr	r0, [r2, #0]
 80126be:	2208      	movs	r2, #8
 80126c0:	f001 fbfb 	bl	8013eba <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 80126c4:	193b      	adds	r3, r7, r4
 80126c6:	691b      	ldr	r3, [r3, #16]
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d016      	beq.n	80126fc <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 80126ce:	21a8      	movs	r1, #168	; 0xa8
 80126d0:	187b      	adds	r3, r7, r1
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	2088      	movs	r0, #136	; 0x88
 80126d6:	183b      	adds	r3, r7, r0
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	187a      	adds	r2, r7, r1
 80126de:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 80126e0:	21ac      	movs	r1, #172	; 0xac
 80126e2:	187b      	adds	r3, r7, r1
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	183b      	adds	r3, r7, r0
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	18d3      	adds	r3, r2, r3
 80126ec:	187a      	adds	r2, r7, r1
 80126ee:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80126f0:	23a8      	movs	r3, #168	; 0xa8
 80126f2:	18fb      	adds	r3, r7, r3
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1cb      	bne.n	8012692 <_ux_device_stack_configuration_set+0x82>
 80126fa:	e000      	b.n	80126fe <_ux_device_stack_configuration_set+0xee>
                break;
 80126fc:	46c0      	nop			; (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 80126fe:	23a8      	movs	r3, #168	; 0xa8
 8012700:	18fb      	adds	r3, r7, r3
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d104      	bne.n	8012712 <_ux_device_stack_configuration_set+0x102>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 801270e:	23ff      	movs	r3, #255	; 0xff
 8012710:	e178      	b.n	8012a04 <_ux_device_stack_configuration_set+0x3f4>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8012712:	218c      	movs	r1, #140	; 0x8c
 8012714:	187b      	adds	r3, r7, r1
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	22cc      	movs	r2, #204	; 0xcc
 801271a:	589b      	ldr	r3, [r3, r2]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d038      	beq.n	8012792 <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8012720:	187b      	adds	r3, r7, r1
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	22f0      	movs	r2, #240	; 0xf0
 8012726:	589b      	ldr	r3, [r3, r2]
 8012728:	22a4      	movs	r2, #164	; 0xa4
 801272a:	18ba      	adds	r2, r7, r2
 801272c:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 801272e:	e02b      	b.n	8012788 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8012730:	210c      	movs	r1, #12
 8012732:	187b      	adds	r3, r7, r1
 8012734:	2203      	movs	r2, #3
 8012736:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8012738:	187b      	adds	r3, r7, r1
 801273a:	20a4      	movs	r0, #164	; 0xa4
 801273c:	183a      	adds	r2, r7, r0
 801273e:	6812      	ldr	r2, [r2, #0]
 8012740:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 8012742:	183b      	adds	r3, r7, r0
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	2280      	movs	r2, #128	; 0x80
 801274a:	18b8      	adds	r0, r7, r2
 801274c:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 801274e:	187b      	adds	r3, r7, r1
 8012750:	0010      	movs	r0, r2
 8012752:	18ba      	adds	r2, r7, r2
 8012754:	6812      	ldr	r2, [r2, #0]
 8012756:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8012758:	0002      	movs	r2, r0
 801275a:	18bb      	adds	r3, r7, r2
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d005      	beq.n	801276e <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8012762:	18bb      	adds	r3, r7, r2
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012768:	187a      	adds	r2, r7, r1
 801276a:	0010      	movs	r0, r2
 801276c:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801276e:	24a4      	movs	r4, #164	; 0xa4
 8012770:	193b      	adds	r3, r7, r4
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012776:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8012778:	193b      	adds	r3, r7, r4
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	0018      	movs	r0, r3
 801277e:	f000 ffbf 	bl	8013700 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8012782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012784:	193a      	adds	r2, r7, r4
 8012786:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 8012788:	23a4      	movs	r3, #164	; 0xa4
 801278a:	18fb      	adds	r3, r7, r3
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d1ce      	bne.n	8012730 <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8012792:	208c      	movs	r0, #140	; 0x8c
 8012794:	183b      	adds	r3, r7, r0
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	22cc      	movs	r2, #204	; 0xcc
 801279a:	2100      	movs	r1, #0
 801279c:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801279e:	183b      	adds	r3, r7, r0
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2201      	movs	r2, #1
 80127a4:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 80127a6:	2290      	movs	r2, #144	; 0x90
 80127a8:	18bb      	adds	r3, r7, r2
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	699b      	ldr	r3, [r3, #24]
 80127ae:	18ba      	adds	r2, r7, r2
 80127b0:	6810      	ldr	r0, [r2, #0]
 80127b2:	2201      	movs	r2, #1
 80127b4:	2113      	movs	r1, #19
 80127b6:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d101      	bne.n	80127c2 <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 80127be:	2300      	movs	r3, #0
 80127c0:	e120      	b.n	8012a04 <_ux_device_stack_configuration_set+0x3f4>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 80127c2:	208c      	movs	r0, #140	; 0x8c
 80127c4:	183b      	adds	r3, r7, r0
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	21cc      	movs	r1, #204	; 0xcc
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 80127ce:	183b      	adds	r3, r7, r0
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 80127d4:	495b      	ldr	r1, [pc, #364]	; (8012944 <_ux_device_stack_configuration_set+0x334>)
 80127d6:	22ac      	movs	r2, #172	; 0xac
 80127d8:	18ba      	adds	r2, r7, r2
 80127da:	6810      	ldr	r0, [r2, #0]
 80127dc:	2208      	movs	r2, #8
 80127de:	f001 fb6c 	bl	8013eba <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 80127e2:	235c      	movs	r3, #92	; 0x5c
 80127e4:	18fb      	adds	r3, r7, r3
 80127e6:	699b      	ldr	r3, [r3, #24]
 80127e8:	2240      	movs	r2, #64	; 0x40
 80127ea:	4013      	ands	r3, r2
 80127ec:	d001      	beq.n	80127f2 <_ux_device_stack_configuration_set+0x1e2>
 80127ee:	2202      	movs	r2, #2
 80127f0:	e000      	b.n	80127f4 <_ux_device_stack_configuration_set+0x1e4>
 80127f2:	2201      	movs	r2, #1
 80127f4:	4b52      	ldr	r3, [pc, #328]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 80127f6:	6819      	ldr	r1, [r3, #0]
 80127f8:	23d0      	movs	r3, #208	; 0xd0
 80127fa:	005b      	lsls	r3, r3, #1
 80127fc:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 80127fe:	205c      	movs	r0, #92	; 0x5c
 8012800:	183b      	adds	r3, r7, r0
 8012802:	699b      	ldr	r3, [r3, #24]
 8012804:	0959      	lsrs	r1, r3, #5
 8012806:	4b4e      	ldr	r3, [pc, #312]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	2301      	movs	r3, #1
 801280c:	4019      	ands	r1, r3
 801280e:	23d2      	movs	r3, #210	; 0xd2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 8012814:	183b      	adds	r3, r7, r0
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	22a8      	movs	r2, #168	; 0xa8
 801281a:	18ba      	adds	r2, r7, r2
 801281c:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 801281e:	e0dc      	b.n	80129da <_ux_device_stack_configuration_set+0x3ca>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8012820:	21ac      	movs	r1, #172	; 0xac
 8012822:	187b      	adds	r3, r7, r1
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	2288      	movs	r2, #136	; 0x88
 801282a:	18ba      	adds	r2, r7, r2
 801282c:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801282e:	2087      	movs	r0, #135	; 0x87
 8012830:	183b      	adds	r3, r7, r0
 8012832:	187a      	adds	r2, r7, r1
 8012834:	6812      	ldr	r2, [r2, #0]
 8012836:	7852      	ldrb	r2, [r2, #1]
 8012838:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 801283a:	183b      	adds	r3, r7, r0
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	2b0b      	cmp	r3, #11
 8012840:	d111      	bne.n	8012866 <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 8012842:	2301      	movs	r3, #1
 8012844:	229c      	movs	r2, #156	; 0x9c
 8012846:	18ba      	adds	r2, r7, r2
 8012848:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 801284a:	187b      	adds	r3, r7, r1
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	3302      	adds	r3, #2
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	2298      	movs	r2, #152	; 0x98
 8012854:	18ba      	adds	r2, r7, r2
 8012856:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8012858:	187b      	adds	r3, r7, r1
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3303      	adds	r3, #3
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	2294      	movs	r2, #148	; 0x94
 8012862:	18ba      	adds	r2, r7, r2
 8012864:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8012866:	2387      	movs	r3, #135	; 0x87
 8012868:	18fb      	adds	r3, r7, r3
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b04      	cmp	r3, #4
 801286e:	d000      	beq.n	8012872 <_ux_device_stack_configuration_set+0x262>
 8012870:	e0a2      	b.n	80129b8 <_ux_device_stack_configuration_set+0x3a8>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8012872:	2438      	movs	r4, #56	; 0x38
 8012874:	193b      	adds	r3, r7, r4
 8012876:	4934      	ldr	r1, [pc, #208]	; (8012948 <_ux_device_stack_configuration_set+0x338>)
 8012878:	22ac      	movs	r2, #172	; 0xac
 801287a:	18ba      	adds	r2, r7, r2
 801287c:	6810      	ldr	r0, [r2, #0]
 801287e:	2209      	movs	r2, #9
 8012880:	f001 fb1b 	bl	8013eba <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 8012884:	193b      	adds	r3, r7, r4
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d000      	beq.n	801288e <_ux_device_stack_configuration_set+0x27e>
 801288c:	e094      	b.n	80129b8 <_ux_device_stack_configuration_set+0x3a8>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 801288e:	239c      	movs	r3, #156	; 0x9c
 8012890:	18fb      	adds	r3, r7, r3
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b01      	cmp	r3, #1
 8012896:	d159      	bne.n	801294c <_ux_device_stack_configuration_set+0x33c>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8012898:	193b      	adds	r3, r7, r4
 801289a:	689b      	ldr	r3, [r3, #8]
 801289c:	2298      	movs	r2, #152	; 0x98
 801289e:	18ba      	adds	r2, r7, r2
 80128a0:	6812      	ldr	r2, [r2, #0]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d130      	bne.n	8012908 <_ux_device_stack_configuration_set+0x2f8>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 80128a6:	4b26      	ldr	r3, [pc, #152]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	23ac      	movs	r3, #172	; 0xac
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	58d3      	ldr	r3, [r2, r3]
 80128b0:	2180      	movs	r1, #128	; 0x80
 80128b2:	187a      	adds	r2, r7, r1
 80128b4:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 80128b6:	187b      	adds	r3, r7, r1
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d130      	bne.n	8012922 <_ux_device_stack_configuration_set+0x312>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80128c0:	193b      	adds	r3, r7, r4
 80128c2:	689a      	ldr	r2, [r3, #8]
 80128c4:	0008      	movs	r0, r1
 80128c6:	187b      	adds	r3, r7, r1
 80128c8:	6819      	ldr	r1, [r3, #0]
 80128ca:	2384      	movs	r3, #132	; 0x84
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	58cb      	ldr	r3, [r1, r3]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d126      	bne.n	8012922 <_ux_device_stack_configuration_set+0x312>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 80128d4:	0001      	movs	r1, r0
 80128d6:	187b      	adds	r3, r7, r1
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	2386      	movs	r3, #134	; 0x86
 80128dc:	005b      	lsls	r3, r3, #1
 80128de:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d11d      	bne.n	8012922 <_ux_device_stack_configuration_set+0x312>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80128e6:	4b16      	ldr	r3, [pc, #88]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	193b      	adds	r3, r7, r4
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	3356      	adds	r3, #86	; 0x56
 80128f0:	009b      	lsls	r3, r3, #2
 80128f2:	18d3      	adds	r3, r2, r3
 80128f4:	3304      	adds	r3, #4
 80128f6:	187a      	adds	r2, r7, r1
 80128f8:	6812      	ldr	r2, [r2, #0]
 80128fa:	601a      	str	r2, [r3, #0]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 80128fc:	187b      	adds	r3, r7, r1
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	22a0      	movs	r2, #160	; 0xa0
 8012902:	18ba      	adds	r2, r7, r2
 8012904:	6013      	str	r3, [r2, #0]
 8012906:	e00c      	b.n	8012922 <_ux_device_stack_configuration_set+0x312>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 8012908:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <_ux_device_stack_configuration_set+0x330>)
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	2338      	movs	r3, #56	; 0x38
 801290e:	18fb      	adds	r3, r7, r3
 8012910:	689b      	ldr	r3, [r3, #8]
 8012912:	3356      	adds	r3, #86	; 0x56
 8012914:	009b      	lsls	r3, r3, #2
 8012916:	18d3      	adds	r3, r2, r3
 8012918:	3304      	adds	r3, #4
 801291a:	22a0      	movs	r2, #160	; 0xa0
 801291c:	18ba      	adds	r2, r7, r2
 801291e:	6812      	ldr	r2, [r2, #0]
 8012920:	601a      	str	r2, [r3, #0]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8012922:	2294      	movs	r2, #148	; 0x94
 8012924:	18bb      	adds	r3, r7, r2
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	3b01      	subs	r3, #1
 801292a:	18b9      	adds	r1, r7, r2
 801292c:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 801292e:	18bb      	adds	r3, r7, r2
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d136      	bne.n	80129a4 <_ux_device_stack_configuration_set+0x394>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8012936:	2300      	movs	r3, #0
 8012938:	229c      	movs	r2, #156	; 0x9c
 801293a:	18ba      	adds	r2, r7, r2
 801293c:	6013      	str	r3, [r2, #0]
 801293e:	e031      	b.n	80129a4 <_ux_device_stack_configuration_set+0x394>
 8012940:	20008db8 	.word	0x20008db8
 8012944:	20000040 	.word	0x20000040
 8012948:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801294c:	4b2f      	ldr	r3, [pc, #188]	; (8012a0c <_ux_device_stack_configuration_set+0x3fc>)
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	23ac      	movs	r3, #172	; 0xac
 8012952:	005b      	lsls	r3, r3, #1
 8012954:	58d3      	ldr	r3, [r2, r3]
 8012956:	2180      	movs	r1, #128	; 0x80
 8012958:	187a      	adds	r2, r7, r1
 801295a:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 801295c:	187b      	adds	r3, r7, r1
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012962:	2b01      	cmp	r3, #1
 8012964:	d11e      	bne.n	80129a4 <_ux_device_stack_configuration_set+0x394>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012966:	2438      	movs	r4, #56	; 0x38
 8012968:	193b      	adds	r3, r7, r4
 801296a:	689a      	ldr	r2, [r3, #8]
 801296c:	0008      	movs	r0, r1
 801296e:	187b      	adds	r3, r7, r1
 8012970:	6819      	ldr	r1, [r3, #0]
 8012972:	2384      	movs	r3, #132	; 0x84
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	58cb      	ldr	r3, [r1, r3]
 8012978:	429a      	cmp	r2, r3
 801297a:	d113      	bne.n	80129a4 <_ux_device_stack_configuration_set+0x394>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801297c:	0001      	movs	r1, r0
 801297e:	187b      	adds	r3, r7, r1
 8012980:	681a      	ldr	r2, [r3, #0]
 8012982:	2386      	movs	r3, #134	; 0x86
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	429a      	cmp	r2, r3
 801298c:	d10a      	bne.n	80129a4 <_ux_device_stack_configuration_set+0x394>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801298e:	4b1f      	ldr	r3, [pc, #124]	; (8012a0c <_ux_device_stack_configuration_set+0x3fc>)
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	193b      	adds	r3, r7, r4
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	3356      	adds	r3, #86	; 0x56
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	18d3      	adds	r3, r2, r3
 801299c:	3304      	adds	r3, #4
 801299e:	187a      	adds	r2, r7, r1
 80129a0:	6812      	ldr	r2, [r2, #0]
 80129a2:	601a      	str	r2, [r3, #0]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 80129a4:	23a8      	movs	r3, #168	; 0xa8
 80129a6:	18fb      	adds	r3, r7, r3
 80129a8:	6819      	ldr	r1, [r3, #0]
 80129aa:	23ac      	movs	r3, #172	; 0xac
 80129ac:	18fb      	adds	r3, r7, r3
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	2200      	movs	r2, #0
 80129b2:	0018      	movs	r0, r3
 80129b4:	f000 feec 	bl	8013790 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 80129b8:	21a8      	movs	r1, #168	; 0xa8
 80129ba:	187b      	adds	r3, r7, r1
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	2088      	movs	r0, #136	; 0x88
 80129c0:	183b      	adds	r3, r7, r0
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	187a      	adds	r2, r7, r1
 80129c8:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 80129ca:	21ac      	movs	r1, #172	; 0xac
 80129cc:	187b      	adds	r3, r7, r1
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	183b      	adds	r3, r7, r0
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	18d3      	adds	r3, r2, r3
 80129d6:	187a      	adds	r2, r7, r1
 80129d8:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 80129da:	23a8      	movs	r3, #168	; 0xa8
 80129dc:	18fb      	adds	r3, r7, r3
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d000      	beq.n	80129e6 <_ux_device_stack_configuration_set+0x3d6>
 80129e4:	e71c      	b.n	8012820 <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 80129e6:	238c      	movs	r3, #140	; 0x8c
 80129e8:	18fb      	adds	r3, r7, r3
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2203      	movs	r2, #3
 80129ee:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 80129f0:	2290      	movs	r2, #144	; 0x90
 80129f2:	18bb      	adds	r3, r7, r2
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	699b      	ldr	r3, [r3, #24]
 80129f8:	18ba      	adds	r2, r7, r2
 80129fa:	6810      	ldr	r0, [r2, #0]
 80129fc:	2203      	movs	r2, #3
 80129fe:	2113      	movs	r1, #19
 8012a00:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	0018      	movs	r0, r3
 8012a06:	46bd      	mov	sp, r7
 8012a08:	b02d      	add	sp, #180	; 0xb4
 8012a0a:	bd90      	pop	{r4, r7, pc}
 8012a0c:	20008db8 	.word	0x20008db8

08012a10 <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 8012a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a12:	b09d      	sub	sp, #116	; 0x74
 8012a14:	af02      	add	r7, sp, #8
 8012a16:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8012a18:	23ff      	movs	r3, #255	; 0xff
 8012a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012a1c:	4ba2      	ldr	r3, [pc, #648]	; (8012ca8 <_ux_device_stack_control_request_process+0x298>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012a22:	4ba1      	ldr	r3, [pc, #644]	; (8012ca8 <_ux_device_stack_control_request_process+0x298>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	3320      	adds	r3, #32
 8012a28:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d000      	beq.n	8012a34 <_ux_device_stack_control_request_process+0x24>
 8012a32:	e134      	b.n	8012c9e <_ux_device_stack_control_request_process+0x28e>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2254      	movs	r2, #84	; 0x54
 8012a38:	5c9b      	ldrb	r3, [r3, r2]
 8012a3a:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2255      	movs	r2, #85	; 0x55
 8012a40:	5c9b      	ldrb	r3, [r3, r2]
 8012a42:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	3354      	adds	r3, #84	; 0x54
 8012a48:	3302      	adds	r3, #2
 8012a4a:	0018      	movs	r0, r3
 8012a4c:	f001 fdfd 	bl	801464a <_ux_utility_short_get>
 8012a50:	0003      	movs	r3, r0
 8012a52:	64fb      	str	r3, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	3354      	adds	r3, #84	; 0x54
 8012a58:	3304      	adds	r3, #4
 8012a5a:	0018      	movs	r0, r3
 8012a5c:	f001 fdf5 	bl	801464a <_ux_utility_short_get>
 8012a60:	0003      	movs	r3, r0
 8012a62:	64bb      	str	r3, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3354      	adds	r3, #84	; 0x54
 8012a68:	3306      	adds	r3, #6
 8012a6a:	0018      	movs	r0, r3
 8012a6c:	f001 fded 	bl	801464a <_ux_utility_short_get>
 8012a70:	0003      	movs	r3, r0
 8012a72:	647b      	str	r3, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 8012a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a76:	2b06      	cmp	r3, #6
 8012a78:	d002      	beq.n	8012a80 <_ux_device_stack_control_request_process+0x70>
 8012a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7c:	2b07      	cmp	r3, #7
 8012a7e:	d10c      	bne.n	8012a9a <_ux_device_stack_control_request_process+0x8a>
 8012a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a82:	0a1b      	lsrs	r3, r3, #8
 8012a84:	2260      	movs	r2, #96	; 0x60
 8012a86:	4013      	ands	r3, r2
 8012a88:	d007      	beq.n	8012a9a <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 8012a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a8c:	2260      	movs	r2, #96	; 0x60
 8012a8e:	4393      	bics	r3, r2
 8012a90:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 8012a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a94:	2220      	movs	r2, #32
 8012a96:	4313      	orrs	r3, r2
 8012a98:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 8012a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a9c:	2260      	movs	r2, #96	; 0x60
 8012a9e:	4013      	ands	r3, r2
 8012aa0:	2b40      	cmp	r3, #64	; 0x40
 8012aa2:	d139      	bne.n	8012b18 <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 8012aa4:	4b80      	ldr	r3, [pc, #512]	; (8012ca8 <_ux_device_stack_control_request_process+0x298>)
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	23e2      	movs	r3, #226	; 0xe2
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	58d3      	ldr	r3, [r2, r3]
 8012aae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d131      	bne.n	8012b18 <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8012ab4:	2380      	movs	r3, #128	; 0x80
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8012aba:	4b7b      	ldr	r3, [pc, #492]	; (8012ca8 <_ux_device_stack_control_request_process+0x298>)
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	23e4      	movs	r3, #228	; 0xe4
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	58d4      	ldr	r4, [r2, r3]
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	6c7e      	ldr	r6, [r7, #68]	; 0x44
 8012aca:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8012acc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012ace:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012ad0:	220c      	movs	r2, #12
 8012ad2:	18ba      	adds	r2, r7, r2
 8012ad4:	9201      	str	r2, [sp, #4]
 8012ad6:	9300      	str	r3, [sp, #0]
 8012ad8:	0033      	movs	r3, r6
 8012ada:	002a      	movs	r2, r5
 8012adc:	47a0      	blx	r4
 8012ade:	0003      	movs	r3, r0
 8012ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 8012ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d110      	bne.n	8012b0a <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012aea:	333c      	adds	r3, #60	; 0x3c
 8012aec:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af0:	3330      	adds	r3, #48	; 0x30
 8012af2:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2203      	movs	r2, #3
 8012af8:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8012afa:	68f9      	ldr	r1, [r7, #12]
 8012afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	0018      	movs	r0, r3
 8012b02:	f001 f865 	bl	8013bd0 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8012b06:	2300      	movs	r3, #0
 8012b08:	e0ca      	b.n	8012ca0 <_ux_device_stack_control_request_process+0x290>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b0c:	333c      	adds	r3, #60	; 0x3c
 8012b0e:	0018      	movs	r0, r3
 8012b10:	f000 fb78 	bl	8013204 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8012b14:	2300      	movs	r3, #0
 8012b16:	e0c3      	b.n	8012ca0 <_ux_device_stack_control_request_process+0x290>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8012b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b1a:	2260      	movs	r2, #96	; 0x60
 8012b1c:	4013      	ands	r3, r2
 8012b1e:	2b20      	cmp	r3, #32
 8012b20:	d004      	beq.n	8012b2c <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 8012b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b24:	2260      	movs	r2, #96	; 0x60
 8012b26:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8012b28:	2b40      	cmp	r3, #64	; 0x40
 8012b2a:	d152      	bne.n	8012bd2 <_ux_device_stack_control_request_process+0x1c2>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8012b2c:	2310      	movs	r3, #16
 8012b2e:	18fb      	adds	r3, r7, r3
 8012b30:	2204      	movs	r2, #4
 8012b32:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012b34:	2300      	movs	r3, #0
 8012b36:	663b      	str	r3, [r7, #96]	; 0x60
 8012b38:	e03c      	b.n	8012bb4 <_ux_device_stack_control_request_process+0x1a4>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8012b3a:	4b5b      	ldr	r3, [pc, #364]	; (8012ca8 <_ux_device_stack_control_request_process+0x298>)
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b40:	3356      	adds	r3, #86	; 0x56
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	18d3      	adds	r3, r2, r3
 8012b46:	3304      	adds	r3, #4
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 8012b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d02a      	beq.n	8012ba8 <_ux_device_stack_control_request_process+0x198>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 8012b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b54:	2203      	movs	r2, #3
 8012b56:	4013      	ands	r3, r2
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	d116      	bne.n	8012b8a <_ux_device_stack_control_request_process+0x17a>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 8012b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b5e:	22ff      	movs	r2, #255	; 0xff
 8012b60:	4013      	ands	r3, r2
 8012b62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d121      	bne.n	8012bac <_ux_device_stack_control_request_process+0x19c>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b6a:	2388      	movs	r3, #136	; 0x88
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	58d3      	ldr	r3, [r2, r3]
 8012b70:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 8012b72:	2b07      	cmp	r3, #7
 8012b74:	d109      	bne.n	8012b8a <_ux_device_stack_control_request_process+0x17a>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 8012b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d106      	bne.n	8012b8a <_ux_device_stack_control_request_process+0x17a>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2259      	movs	r2, #89	; 0x59
 8012b80:	5c9b      	ldrb	r3, [r3, r2]
 8012b82:	001a      	movs	r2, r3
                         (request == 0x00) &&
 8012b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d110      	bne.n	8012bac <_ux_device_stack_control_request_process+0x19c>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 8012b8a:	2110      	movs	r1, #16
 8012b8c:	187b      	adds	r3, r7, r1
 8012b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b90:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 8012b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b96:	187a      	adds	r2, r7, r1
 8012b98:	0010      	movs	r0, r2
 8012b9a:	4798      	blx	r3
 8012b9c:	0003      	movs	r3, r0
 8012b9e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 8012ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00a      	beq.n	8012bbc <_ux_device_stack_control_request_process+0x1ac>
 8012ba6:	e002      	b.n	8012bae <_ux_device_stack_control_request_process+0x19e>
                    continue;
 8012ba8:	46c0      	nop			; (mov r8, r8)
 8012baa:	e000      	b.n	8012bae <_ux_device_stack_control_request_process+0x19e>
                        continue;
 8012bac:	46c0      	nop			; (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8012bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8012bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bb6:	2b0f      	cmp	r3, #15
 8012bb8:	d9bf      	bls.n	8012b3a <_ux_device_stack_control_request_process+0x12a>
 8012bba:	e000      	b.n	8012bbe <_ux_device_stack_control_request_process+0x1ae>

                    /* We are done, break the loop!  */
                    break;
 8012bbc:	46c0      	nop			; (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8012bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d004      	beq.n	8012bce <_ux_device_stack_control_request_process+0x1be>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bc6:	333c      	adds	r3, #60	; 0x3c
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f000 fb1b 	bl	8013204 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8012bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bd0:	e066      	b.n	8012ca0 <_ux_device_stack_control_request_process+0x290>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 8012bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bd4:	2b0c      	cmp	r3, #12
 8012bd6:	d857      	bhi.n	8012c88 <_ux_device_stack_control_request_process+0x278>
 8012bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bda:	009a      	lsls	r2, r3, #2
 8012bdc:	4b33      	ldr	r3, [pc, #204]	; (8012cac <_ux_device_stack_control_request_process+0x29c>)
 8012bde:	18d3      	adds	r3, r2, r3
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 8012be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012be6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bea:	0018      	movs	r0, r3
 8012bec:	f000 fb40 	bl	8013270 <_ux_device_stack_get_status>
 8012bf0:	0003      	movs	r3, r0
 8012bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012bf4:	e04b      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 8012bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bf8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bfc:	0018      	movs	r0, r3
 8012bfe:	f7ff fc81 	bl	8012504 <_ux_device_stack_clear_feature>
 8012c02:	0003      	movs	r3, r0
 8012c04:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c06:	e042      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8012c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c0e:	0018      	movs	r0, r3
 8012c10:	f000 ff36 	bl	8013a80 <_ux_device_stack_set_feature>
 8012c14:	0003      	movs	r3, r0
 8012c16:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c18:	e039      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8012c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c1e:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8012c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c22:	699b      	ldr	r3, [r3, #24]
 8012c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c26:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012c28:	2111      	movs	r1, #17
 8012c2a:	4798      	blx	r3
 8012c2c:	0003      	movs	r3, r0
 8012c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c30:	e02d      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 8012c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c38:	0018      	movs	r0, r3
 8012c3a:	f000 f839 	bl	8012cb0 <_ux_device_stack_descriptor_send>
 8012c3e:	0003      	movs	r3, r0
 8012c40:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c42:	e024      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 8012c44:	2354      	movs	r3, #84	; 0x54
 8012c46:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c48:	e021      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8012c4a:	f7ff fcbb 	bl	80125c4 <_ux_device_stack_configuration_get>
 8012c4e:	0003      	movs	r3, r0
 8012c50:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c52:	e01c      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 8012c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c56:	0018      	movs	r0, r3
 8012c58:	f7ff fcda 	bl	8012610 <_ux_device_stack_configuration_set>
 8012c5c:	0003      	movs	r3, r0
 8012c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c60:	e015      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 8012c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c64:	0018      	movs	r0, r3
 8012c66:	f7ff f927 	bl	8011eb8 <_ux_device_stack_alternate_setting_get>
 8012c6a:	0003      	movs	r3, r0
 8012c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c6e:	e00e      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 8012c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c74:	0011      	movs	r1, r2
 8012c76:	0018      	movs	r0, r3
 8012c78:	f7ff f95e 	bl	8011f38 <_ux_device_stack_alternate_setting_set>
 8012c7c:	0003      	movs	r3, r0
 8012c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c80:	e005      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 8012c82:	2300      	movs	r3, #0
 8012c84:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c86:	e002      	b.n	8012c8e <_ux_device_stack_control_request_process+0x27e>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 8012c88:	2354      	movs	r3, #84	; 0x54
 8012c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 8012c8c:	46c0      	nop			; (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 8012c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d004      	beq.n	8012c9e <_ux_device_stack_control_request_process+0x28e>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8012c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c96:	333c      	adds	r3, #60	; 0x3c
 8012c98:	0018      	movs	r0, r3
 8012c9a:	f000 fab3 	bl	8013204 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 8012c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	b01b      	add	sp, #108	; 0x6c
 8012ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ca8:	20008db8 	.word	0x20008db8
 8012cac:	08018558 	.word	0x08018558

08012cb0 <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 8012cb0:	b590      	push	{r4, r7, lr}
 8012cb2:	b0a3      	sub	sp, #140	; 0x8c
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 8012cbc:	23ff      	movs	r3, #255	; 0xff
 8012cbe:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8012cc0:	4bde      	ldr	r3, [pc, #888]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8012cc6:	4bdd      	ldr	r3, [pc, #884]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	3320      	adds	r3, #32
 8012ccc:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8012cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012cd0:	333c      	adds	r3, #60	; 0x3c
 8012cd2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8012cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cd6:	3330      	adds	r3, #48	; 0x30
 8012cd8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8012cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cdc:	2203      	movs	r2, #3
 8012cde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	22ff      	movs	r2, #255	; 0xff
 8012ce4:	4013      	ands	r3, r2
 8012ce6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	2284      	movs	r2, #132	; 0x84
 8012cec:	18ba      	adds	r2, r7, r2
 8012cee:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	0a1b      	lsrs	r3, r3, #8
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b0f      	cmp	r3, #15
 8012d00:	d900      	bls.n	8012d04 <_ux_device_stack_descriptor_send+0x54>
 8012d02:	e20c      	b.n	801311e <_ux_device_stack_descriptor_send+0x46e>
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	009a      	lsls	r2, r3, #2
 8012d08:	4bcd      	ldr	r3, [pc, #820]	; (8013040 <_ux_device_stack_descriptor_send+0x390>)
 8012d0a:	18d3      	adds	r3, r2, r3
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b12      	cmp	r3, #18
 8012d14:	d901      	bls.n	8012d1a <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 8012d16:	2312      	movs	r3, #18
 8012d18:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2b06      	cmp	r3, #6
 8012d1e:	d104      	bne.n	8012d2a <_ux_device_stack_descriptor_send+0x7a>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2b0a      	cmp	r3, #10
 8012d24:	d901      	bls.n	8012d2a <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 8012d26:	230a      	movs	r3, #10
 8012d28:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2b09      	cmp	r3, #9
 8012d2e:	d104      	bne.n	8012d3a <_ux_device_stack_descriptor_send+0x8a>
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2b05      	cmp	r3, #5
 8012d34:	d901      	bls.n	8012d3a <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 8012d36:	2305      	movs	r3, #5
 8012d38:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012d3a:	4bc0      	ldr	r3, [pc, #768]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	2394      	movs	r3, #148	; 0x94
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	58d3      	ldr	r3, [r2, r3]
 8012d44:	2180      	movs	r1, #128	; 0x80
 8012d46:	187a      	adds	r2, r7, r1
 8012d48:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012d4a:	4bbc      	ldr	r3, [pc, #752]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	2396      	movs	r3, #150	; 0x96
 8012d50:	005b      	lsls	r3, r3, #1
 8012d52:	58d3      	ldr	r3, [r2, r3]
 8012d54:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 8012d56:	187b      	adds	r3, r7, r1
 8012d58:	681a      	ldr	r2, [r3, #0]
 8012d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d5c:	18d3      	adds	r3, r2, r3
 8012d5e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 8012d60:	e029      	b.n	8012db6 <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 8012d62:	2180      	movs	r1, #128	; 0x80
 8012d64:	187b      	adds	r3, r7, r1
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 8012d6c:	187b      	adds	r3, r7, r1
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	3301      	adds	r3, #1
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	001a      	movs	r2, r3
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	d111      	bne.n	8012da0 <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8012d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012d82:	1879      	adds	r1, r7, r1
 8012d84:	6809      	ldr	r1, [r1, #0]
 8012d86:	0018      	movs	r0, r3
 8012d88:	f001 fa92 	bl	80142b0 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d92:	0018      	movs	r0, r3
 8012d94:	f000 ff1c 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8012d98:	0003      	movs	r3, r0
 8012d9a:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8012d9c:	46c0      	nop			; (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 8012d9e:	e1c9      	b.n	8013134 <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 8012da0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da4:	1ad3      	subs	r3, r2, r3
 8012da6:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 8012da8:	2180      	movs	r1, #128	; 0x80
 8012daa:	187b      	adds	r3, r7, r1
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db0:	18d3      	adds	r3, r2, r3
 8012db2:	187a      	adds	r2, r7, r1
 8012db4:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 8012db6:	2380      	movs	r3, #128	; 0x80
 8012db8:	18fb      	adds	r3, r7, r3
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d3cf      	bcc.n	8012d62 <_ux_device_stack_descriptor_send+0xb2>
        break;
 8012dc2:	e1b7      	b.n	8013134 <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b07      	cmp	r3, #7
 8012dc8:	d113      	bne.n	8012df2 <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8012dca:	4b9c      	ldr	r3, [pc, #624]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	2398      	movs	r3, #152	; 0x98
 8012dd0:	005b      	lsls	r3, r3, #1
 8012dd2:	58d3      	ldr	r3, [r2, r3]
 8012dd4:	2180      	movs	r1, #128	; 0x80
 8012dd6:	187a      	adds	r2, r7, r1
 8012dd8:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8012dda:	4b98      	ldr	r3, [pc, #608]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	239a      	movs	r3, #154	; 0x9a
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	58d3      	ldr	r3, [r2, r3]
 8012de4:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8012de6:	187b      	adds	r3, r7, r1
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dec:	18d3      	adds	r3, r2, r3
 8012dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012df0:	e05b      	b.n	8012eaa <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8012df2:	4b92      	ldr	r3, [pc, #584]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	2394      	movs	r3, #148	; 0x94
 8012df8:	005b      	lsls	r3, r3, #1
 8012dfa:	58d3      	ldr	r3, [r2, r3]
 8012dfc:	2180      	movs	r1, #128	; 0x80
 8012dfe:	187a      	adds	r2, r7, r1
 8012e00:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8012e02:	4b8e      	ldr	r3, [pc, #568]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	2396      	movs	r3, #150	; 0x96
 8012e08:	005b      	lsls	r3, r3, #1
 8012e0a:	58d3      	ldr	r3, [r2, r3]
 8012e0c:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 8012e0e:	187b      	adds	r3, r7, r1
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e14:	18d3      	adds	r3, r2, r3
 8012e16:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8012e18:	e047      	b.n	8012eaa <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 8012e1a:	2280      	movs	r2, #128	; 0x80
 8012e1c:	18bb      	adds	r3, r7, r2
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b0f      	cmp	r3, #15
 8012e28:	d113      	bne.n	8012e52 <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8012e2a:	18bb      	adds	r3, r7, r2
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	2b0f      	cmp	r3, #15
 8012e34:	d12e      	bne.n	8012e94 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 8012e36:	2414      	movs	r4, #20
 8012e38:	193b      	adds	r3, r7, r4
 8012e3a:	4982      	ldr	r1, [pc, #520]	; (8013044 <_ux_device_stack_descriptor_send+0x394>)
 8012e3c:	18ba      	adds	r2, r7, r2
 8012e3e:	6810      	ldr	r0, [r2, #0]
 8012e40:	2204      	movs	r2, #4
 8012e42:	f001 f83a 	bl	8013eba <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 8012e46:	193b      	adds	r3, r7, r4
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 8012e50:	e031      	b.n	8012eb6 <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8012e52:	2080      	movs	r0, #128	; 0x80
 8012e54:	183b      	adds	r3, r7, r0
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d119      	bne.n	8012e94 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 8012e60:	2384      	movs	r3, #132	; 0x84
 8012e62:	18fb      	adds	r3, r7, r3
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d10d      	bne.n	8012e88 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 8012e6c:	2424      	movs	r4, #36	; 0x24
 8012e6e:	193b      	adds	r3, r7, r4
 8012e70:	4975      	ldr	r1, [pc, #468]	; (8013048 <_ux_device_stack_descriptor_send+0x398>)
 8012e72:	183a      	adds	r2, r7, r0
 8012e74:	6810      	ldr	r0, [r2, #0]
 8012e76:	2208      	movs	r2, #8
 8012e78:	f001 f81f 	bl	8013eba <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 8012e7c:	193b      	adds	r3, r7, r4
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 8012e82:	2300      	movs	r3, #0
 8012e84:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 8012e86:	e016      	b.n	8012eb6 <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 8012e88:	2284      	movs	r2, #132	; 0x84
 8012e8a:	18bb      	adds	r3, r7, r2
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	3301      	adds	r3, #1
 8012e90:	18ba      	adds	r2, r7, r2
 8012e92:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8012e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8012e9c:	2180      	movs	r1, #128	; 0x80
 8012e9e:	187b      	adds	r3, r7, r1
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea4:	18d3      	adds	r3, r2, r3
 8012ea6:	187a      	adds	r2, r7, r1
 8012ea8:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 8012eaa:	2380      	movs	r3, #128	; 0x80
 8012eac:	18fb      	adds	r3, r7, r3
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d3b1      	bcc.n	8012e1a <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 8012eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d000      	beq.n	8012ebe <_ux_device_stack_descriptor_send+0x20e>
 8012ebc:	e137      	b.n	801312e <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8012ebe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d202      	bcs.n	8012ecc <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 8012ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012eca:	e001      	b.n	8012ed0 <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012ed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012ed2:	2380      	movs	r3, #128	; 0x80
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d90d      	bls.n	8012ef6 <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8012eda:	2212      	movs	r2, #18
 8012edc:	2109      	movs	r1, #9
 8012ede:	2002      	movs	r0, #2
 8012ee0:	f000 fefc 	bl	8013cdc <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ee6:	699b      	ldr	r3, [r3, #24]
 8012ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012eea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012eec:	2114      	movs	r1, #20
 8012eee:	4798      	blx	r3
 8012ef0:	0003      	movs	r3, r0
 8012ef2:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8012ef4:	e11e      	b.n	8013134 <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 8012ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012efc:	2180      	movs	r1, #128	; 0x80
 8012efe:	1879      	adds	r1, r7, r1
 8012f00:	6809      	ldr	r1, [r1, #0]
 8012f02:	0018      	movs	r0, r3
 8012f04:	f001 f9d4 	bl	80142b0 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8012f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	b2d2      	uxtb	r2, r2
 8012f12:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1a:	0018      	movs	r0, r3
 8012f1c:	f000 fe58 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8012f20:	0003      	movs	r3, r0
 8012f22:	673b      	str	r3, [r7, #112]	; 0x70
        }
        break;
 8012f24:	e103      	b.n	801312e <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 8012f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d153      	bne.n	8012fd4 <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8012f2c:	4b43      	ldr	r3, [pc, #268]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	23a6      	movs	r3, #166	; 0xa6
 8012f32:	005b      	lsls	r3, r3, #1
 8012f34:	58d3      	ldr	r3, [r2, r3]
 8012f36:	1c9a      	adds	r2, r3, #2
 8012f38:	2380      	movs	r3, #128	; 0x80
 8012f3a:	005b      	lsls	r3, r3, #1
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d90d      	bls.n	8012f5c <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8012f40:	2212      	movs	r2, #18
 8012f42:	2109      	movs	r1, #9
 8012f44:	2002      	movs	r0, #2
 8012f46:	f000 fec9 	bl	8013cdc <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8012f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f4c:	699b      	ldr	r3, [r3, #24]
 8012f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012f52:	2114      	movs	r1, #20
 8012f54:	4798      	blx	r3
 8012f56:	0003      	movs	r3, r0
 8012f58:	673b      	str	r3, [r7, #112]	; 0x70
                break;
 8012f5a:	e0eb      	b.n	8013134 <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8012f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 8012f62:	4b36      	ldr	r3, [pc, #216]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012f64:	681a      	ldr	r2, [r3, #0]
 8012f66:	23a6      	movs	r3, #166	; 0xa6
 8012f68:	005b      	lsls	r3, r3, #1
 8012f6a:	58d3      	ldr	r3, [r2, r3]
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	3302      	adds	r3, #2
 8012f70:	b2da      	uxtb	r2, r3
 8012f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f74:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 8012f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f78:	3301      	adds	r3, #1
 8012f7a:	2203      	movs	r2, #3
 8012f7c:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8012f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f80:	1c98      	adds	r0, r3, #2
 8012f82:	4b2e      	ldr	r3, [pc, #184]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	23a4      	movs	r3, #164	; 0xa4
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 8012f8c:	4b2b      	ldr	r3, [pc, #172]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012f8e:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 8012f90:	23a6      	movs	r3, #166	; 0xa6
 8012f92:	005b      	lsls	r3, r3, #1
 8012f94:	58d3      	ldr	r3, [r2, r3]
 8012f96:	001a      	movs	r2, r3
 8012f98:	f001 f98a 	bl	80142b0 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 8012f9c:	4b27      	ldr	r3, [pc, #156]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	23a6      	movs	r3, #166	; 0xa6
 8012fa2:	005b      	lsls	r3, r3, #1
 8012fa4:	58d3      	ldr	r3, [r2, r3]
 8012fa6:	3302      	adds	r3, #2
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d907      	bls.n	8012fbe <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 8012fae:	4b23      	ldr	r3, [pc, #140]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	23a6      	movs	r3, #166	; 0xa6
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	58d3      	ldr	r3, [r2, r3]
 8012fb8:	3302      	adds	r3, #2
 8012fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012fbc:	e001      	b.n	8012fc2 <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fc8:	0018      	movs	r0, r3
 8012fca:	f000 fe01 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8012fce:	0003      	movs	r3, r0
 8012fd0:	673b      	str	r3, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 8012fd2:	e0ae      	b.n	8013132 <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 8012fd4:	4b19      	ldr	r3, [pc, #100]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	23a0      	movs	r3, #160	; 0xa0
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	58d3      	ldr	r3, [r2, r3]
 8012fde:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8012fe0:	4b16      	ldr	r3, [pc, #88]	; (801303c <_ux_device_stack_descriptor_send+0x38c>)
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	23a2      	movs	r3, #162	; 0xa2
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	58d3      	ldr	r3, [r2, r3]
 8012fea:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 8012fec:	e088      	b.n	8013100 <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 8012fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ff0:	0018      	movs	r0, r3
 8012ff2:	f001 fb2a 	bl	801464a <_ux_utility_short_get>
 8012ff6:	0002      	movs	r2, r0
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d000      	beq.n	8013000 <_ux_device_stack_descriptor_send+0x350>
 8012ffe:	e070      	b.n	80130e2 <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 8013000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013002:	3302      	adds	r3, #2
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	001a      	movs	r2, r3
 8013008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801300a:	4293      	cmp	r3, r2
 801300c:	d169      	bne.n	80130e2 <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801300e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013010:	3303      	adds	r3, #3
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	3301      	adds	r3, #1
 8013016:	005a      	lsls	r2, r3, #1
 8013018:	2380      	movs	r3, #128	; 0x80
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	429a      	cmp	r2, r3
 801301e:	dd15      	ble.n	801304c <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8013020:	2212      	movs	r2, #18
 8013022:	2109      	movs	r1, #9
 8013024:	2002      	movs	r0, #2
 8013026:	f000 fe59 	bl	8013cdc <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801302a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801302c:	699b      	ldr	r3, [r3, #24]
 801302e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013030:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013032:	2114      	movs	r1, #20
 8013034:	4798      	blx	r3
 8013036:	0003      	movs	r3, r0
 8013038:	673b      	str	r3, [r7, #112]	; 0x70
                            break;
 801303a:	e065      	b.n	8013108 <_ux_device_stack_descriptor_send+0x458>
 801303c:	20008db8 	.word	0x20008db8
 8013040:	0801858c 	.word	0x0801858c
 8013044:	20000054 	.word	0x20000054
 8013048:	20000040 	.word	0x20000040
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 8013052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013054:	3303      	adds	r3, #3
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	3301      	adds	r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	18db      	adds	r3, r3, r3
 801305e:	b2da      	uxtb	r2, r3
 8013060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013062:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 8013064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013066:	3301      	adds	r3, #1
 8013068:	2203      	movs	r2, #3
 801306a:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801306c:	2300      	movs	r3, #0
 801306e:	663b      	str	r3, [r7, #96]	; 0x60
 8013070:	e015      	b.n	801309e <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 8013072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013074:	3304      	adds	r3, #4
 8013076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013078:	18d2      	adds	r2, r2, r3
 801307a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801307c:	3301      	adds	r3, #1
 801307e:	005b      	lsls	r3, r3, #1
 8013080:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013082:	18cb      	adds	r3, r1, r3
 8013084:	7812      	ldrb	r2, [r2, #0]
 8013086:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 8013088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801308a:	3301      	adds	r3, #1
 801308c:	005b      	lsls	r3, r3, #1
 801308e:	3301      	adds	r3, #1
 8013090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013092:	18d3      	adds	r3, r2, r3
 8013094:	2200      	movs	r2, #0
 8013096:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 8013098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801309a:	3301      	adds	r3, #1
 801309c:	663b      	str	r3, [r7, #96]	; 0x60
 801309e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130a0:	3303      	adds	r3, #3
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	001a      	movs	r2, r3
 80130a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d3e2      	bcc.n	8013072 <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 80130ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130ae:	3303      	adds	r3, #3
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	3301      	adds	r3, #1
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	001a      	movs	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d906      	bls.n	80130cc <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 80130be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130c0:	3303      	adds	r3, #3
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	3301      	adds	r3, #1
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80130ca:	e001      	b.n	80130d0 <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80130d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130d6:	0018      	movs	r0, r3
 80130d8:	f000 fd7a 	bl	8013bd0 <_ux_device_stack_transfer_request>
 80130dc:	0003      	movs	r3, r0
 80130de:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 80130e0:	e012      	b.n	8013108 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 80130e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130e4:	3303      	adds	r3, #3
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	001a      	movs	r2, r3
 80130ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130ec:	1a9b      	subs	r3, r3, r2
 80130ee:	3b04      	subs	r3, #4
 80130f0:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 80130f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130f4:	3303      	adds	r3, #3
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	3304      	adds	r3, #4
 80130fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130fc:	18d3      	adds	r3, r2, r3
 80130fe:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 8013100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013102:	2b00      	cmp	r3, #0
 8013104:	d000      	beq.n	8013108 <_ux_device_stack_descriptor_send+0x458>
 8013106:	e772      	b.n	8012fee <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 8013108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801310a:	2b00      	cmp	r3, #0
 801310c:	d111      	bne.n	8013132 <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013110:	699b      	ldr	r3, [r3, #24]
 8013112:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013114:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013116:	2114      	movs	r1, #20
 8013118:	4798      	blx	r3
                return(UX_ERROR);
 801311a:	23ff      	movs	r3, #255	; 0xff
 801311c:	e00b      	b.n	8013136 <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013120:	699b      	ldr	r3, [r3, #24]
 8013122:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013124:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013126:	2114      	movs	r1, #20
 8013128:	4798      	blx	r3
        return(UX_ERROR);
 801312a:	23ff      	movs	r3, #255	; 0xff
 801312c:	e003      	b.n	8013136 <_ux_device_stack_descriptor_send+0x486>
        break;
 801312e:	46c0      	nop			; (mov r8, r8)
 8013130:	e000      	b.n	8013134 <_ux_device_stack_descriptor_send+0x484>
        break;
 8013132:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8013134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8013136:	0018      	movs	r0, r3
 8013138:	46bd      	mov	sp, r7
 801313a:	b023      	add	sp, #140	; 0x8c
 801313c:	bd90      	pop	{r4, r7, pc}
 801313e:	46c0      	nop			; (mov r8, r8)

08013140 <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b092      	sub	sp, #72	; 0x48
 8013144:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 8013146:	23ff      	movs	r3, #255	; 0xff
 8013148:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801314a:	4b2d      	ldr	r3, [pc, #180]	; (8013200 <_ux_device_stack_disconnect+0xc0>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013150:	4b2b      	ldr	r3, [pc, #172]	; (8013200 <_ux_device_stack_disconnect+0xc0>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	3320      	adds	r3, #32
 8013156:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b03      	cmp	r3, #3
 801315e:	d127      	bne.n	80131b0 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8013160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013162:	22f0      	movs	r2, #240	; 0xf0
 8013164:	589b      	ldr	r3, [r3, r2]
 8013166:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 8013168:	e01c      	b.n	80131a4 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801316a:	1d3b      	adds	r3, r7, #4
 801316c:	2203      	movs	r2, #3
 801316e:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8013170:	1d3b      	adds	r3, r7, #4
 8013172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013174:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 8013176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 801317c:	1d3b      	adds	r3, r7, #4
 801317e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013180:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 8013182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013184:	2b00      	cmp	r3, #0
 8013186:	d004      	beq.n	8013192 <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 8013188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801318c:	1d3a      	adds	r2, r7, #4
 801318e:	0010      	movs	r0, r2
 8013190:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 8013192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013196:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8013198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801319a:	0018      	movs	r0, r3
 801319c:	f000 fab0 	bl	8013700 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 80131a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a2:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface != UX_NULL)
 80131a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1df      	bne.n	801316a <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80131aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ac:	2201      	movs	r2, #1
 80131ae:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 80131b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d108      	bne.n	80131ca <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 80131b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131ba:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 80131bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131be:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 80131c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80131c2:	210f      	movs	r1, #15
 80131c4:	4798      	blx	r3
 80131c6:	0003      	movs	r3, r0
 80131c8:	643b      	str	r3, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 80131ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131cc:	22cc      	movs	r2, #204	; 0xcc
 80131ce:	2100      	movs	r1, #0
 80131d0:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 80131d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 80131d8:	4b09      	ldr	r3, [pc, #36]	; (8013200 <_ux_device_stack_disconnect+0xc0>)
 80131da:	681a      	ldr	r2, [r3, #0]
 80131dc:	23e0      	movs	r3, #224	; 0xe0
 80131de:	005b      	lsls	r3, r3, #1
 80131e0:	58d3      	ldr	r3, [r2, r3]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d006      	beq.n	80131f4 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 80131e6:	4b06      	ldr	r3, [pc, #24]	; (8013200 <_ux_device_stack_disconnect+0xc0>)
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	23e0      	movs	r3, #224	; 0xe0
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	58d3      	ldr	r3, [r2, r3]
 80131f0:	200a      	movs	r0, #10
 80131f2:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 80131f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80131f6:	0018      	movs	r0, r3
 80131f8:	46bd      	mov	sp, r7
 80131fa:	b012      	add	sp, #72	; 0x48
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	46c0      	nop			; (mov r8, r8)
 8013200:	20008db8 	.word	0x20008db8

08013204 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b088      	sub	sp, #32
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801320c:	4b17      	ldr	r3, [pc, #92]	; (801326c <_ux_device_stack_endpoint_stall+0x68>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 8013212:	23ff      	movs	r3, #255	; 0xff
 8013214:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013216:	f3ef 8310 	mrs	r3, PRIMASK
 801321a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801321c:	b672      	cpsid	i
    return(primask_value);
 801321e:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8013220:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8013222:	4b12      	ldr	r3, [pc, #72]	; (801326c <_ux_device_stack_endpoint_stall+0x68>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6a1b      	ldr	r3, [r3, #32]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d013      	beq.n	8013254 <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8013230:	2b02      	cmp	r3, #2
 8013232:	d00f      	beq.n	8013254 <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	699b      	ldr	r3, [r3, #24]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	69b8      	ldr	r0, [r7, #24]
 801323c:	2114      	movs	r1, #20
 801323e:	4798      	blx	r3
 8013240:	0003      	movs	r3, r0
 8013242:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	699b      	ldr	r3, [r3, #24]
 8013248:	2203      	movs	r2, #3
 801324a:	4013      	ands	r3, r2
 801324c:	d002      	beq.n	8013254 <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2202      	movs	r2, #2
 8013252:	605a      	str	r2, [r3, #4]
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	f383 8810 	msr	PRIMASK, r3
}
 801325e:	46c0      	nop			; (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 8013260:	69fb      	ldr	r3, [r7, #28]
}
 8013262:	0018      	movs	r0, r3
 8013264:	46bd      	mov	sp, r7
 8013266:	b008      	add	sp, #32
 8013268:	bd80      	pop	{r7, pc}
 801326a:	46c0      	nop			; (mov r8, r8)
 801326c:	20008db8 	.word	0x20008db8

08013270 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b08a      	sub	sp, #40	; 0x28
 8013274:	af00      	add	r7, sp, #0
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801327c:	4b3c      	ldr	r3, [pc, #240]	; (8013370 <_ux_device_stack_get_status+0x100>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013282:	4b3b      	ldr	r3, [pc, #236]	; (8013370 <_ux_device_stack_get_status+0x100>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	3320      	adds	r3, #32
 8013288:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801328a:	69fb      	ldr	r3, [r7, #28]
 801328c:	333c      	adds	r3, #60	; 0x3c
 801328e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	3330      	adds	r3, #48	; 0x30
 8013294:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	3301      	adds	r3, #1
 80132a4:	2200      	movs	r2, #0
 80132a6:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 80132a8:	2302      	movs	r3, #2
 80132aa:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2203      	movs	r2, #3
 80132b0:	4013      	ands	r3, r2
 80132b2:	d002      	beq.n	80132ba <_ux_device_stack_get_status+0x4a>
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	d024      	beq.n	8013302 <_ux_device_stack_get_status+0x92>
 80132b8:	e03e      	b.n	8013338 <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	23f0      	movs	r3, #240	; 0xf0
 80132be:	021b      	lsls	r3, r3, #8
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d102      	bne.n	80132ca <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 80132c4:	2301      	movs	r3, #1
 80132c6:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 80132c8:	e03e      	b.n	8013348 <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 80132ca:	4b29      	ldr	r3, [pc, #164]	; (8013370 <_ux_device_stack_get_status+0x100>)
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	23d0      	movs	r3, #208	; 0xd0
 80132d0:	005b      	lsls	r3, r3, #1
 80132d2:	58d3      	ldr	r3, [r2, r3]
 80132d4:	2b02      	cmp	r3, #2
 80132d6:	d103      	bne.n	80132e0 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	2201      	movs	r2, #1
 80132de:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 80132e0:	4b23      	ldr	r3, [pc, #140]	; (8013370 <_ux_device_stack_get_status+0x100>)
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	23d4      	movs	r3, #212	; 0xd4
 80132e6:	005b      	lsls	r3, r3, #1
 80132e8:	58d3      	ldr	r3, [r2, r3]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d02c      	beq.n	8013348 <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	68db      	ldr	r3, [r3, #12]
 80132f2:	781a      	ldrb	r2, [r3, #0]
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	2102      	movs	r1, #2
 80132fa:	430a      	orrs	r2, r1
 80132fc:	b2d2      	uxtb	r2, r2
 80132fe:	701a      	strb	r2, [r3, #0]
        break;
 8013300:	e022      	b.n	8013348 <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8013302:	6a3b      	ldr	r3, [r7, #32]
 8013304:	699b      	ldr	r3, [r3, #24]
 8013306:	68ba      	ldr	r2, [r7, #8]
 8013308:	6a38      	ldr	r0, [r7, #32]
 801330a:	2115      	movs	r1, #21
 801330c:	4798      	blx	r3
 801330e:	0003      	movs	r3, r0
 8013310:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2bff      	cmp	r3, #255	; 0xff
 8013316:	d007      	beq.n	8013328 <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	2b01      	cmp	r3, #1
 801331c:	d116      	bne.n	801334c <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	68db      	ldr	r3, [r3, #12]
 8013322:	2201      	movs	r2, #1
 8013324:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 8013326:	e011      	b.n	801334c <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013328:	6a3b      	ldr	r3, [r7, #32]
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	69ba      	ldr	r2, [r7, #24]
 801332e:	6a38      	ldr	r0, [r7, #32]
 8013330:	2114      	movs	r1, #20
 8013332:	4798      	blx	r3
            return(UX_SUCCESS);            
 8013334:	2300      	movs	r3, #0
 8013336:	e016      	b.n	8013366 <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013338:	6a3b      	ldr	r3, [r7, #32]
 801333a:	699b      	ldr	r3, [r3, #24]
 801333c:	69ba      	ldr	r2, [r7, #24]
 801333e:	6a38      	ldr	r0, [r7, #32]
 8013340:	2114      	movs	r1, #20
 8013342:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8013344:	2300      	movs	r3, #0
 8013346:	e00e      	b.n	8013366 <_ux_device_stack_get_status+0xf6>
        break;
 8013348:	46c0      	nop			; (mov r8, r8)
 801334a:	e000      	b.n	801334e <_ux_device_stack_get_status+0xde>
        break;
 801334c:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2203      	movs	r2, #3
 8013352:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8013354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	0018      	movs	r0, r3
 801335c:	f000 fc38 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8013360:	0003      	movs	r3, r0
 8013362:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 8013364:	693b      	ldr	r3, [r7, #16]
}
 8013366:	0018      	movs	r0, r3
 8013368:	46bd      	mov	sp, r7
 801336a:	b00a      	add	sp, #40	; 0x28
 801336c:	bd80      	pop	{r7, pc}
 801336e:	46c0      	nop			; (mov r8, r8)
 8013370:	20008db8 	.word	0x20008db8

08013374 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b094      	sub	sp, #80	; 0x50
 8013378:	af00      	add	r7, sp, #0
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	607a      	str	r2, [r7, #4]
 8013380:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013382:	4bbb      	ldr	r3, [pc, #748]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	3320      	adds	r3, #32
 8013388:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801338a:	4bb9      	ldr	r3, [pc, #740]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	239c      	movs	r3, #156	; 0x9c
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	68f9      	ldr	r1, [r7, #12]
 8013394:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 8013396:	4bb6      	ldr	r3, [pc, #728]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	239e      	movs	r3, #158	; 0x9e
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	68b9      	ldr	r1, [r7, #8]
 80133a0:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 80133a2:	4bb3      	ldr	r3, [pc, #716]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	2398      	movs	r3, #152	; 0x98
 80133a8:	005b      	lsls	r3, r3, #1
 80133aa:	6879      	ldr	r1, [r7, #4]
 80133ac:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 80133ae:	4bb0      	ldr	r3, [pc, #704]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	239a      	movs	r3, #154	; 0x9a
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	6839      	ldr	r1, [r7, #0]
 80133b8:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 80133ba:	4bad      	ldr	r3, [pc, #692]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	23a0      	movs	r3, #160	; 0xa0
 80133c0:	005b      	lsls	r3, r3, #1
 80133c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80133c4:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 80133c6:	4baa      	ldr	r3, [pc, #680]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	23a2      	movs	r3, #162	; 0xa2
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80133d0:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 80133d2:	4ba7      	ldr	r3, [pc, #668]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	23a4      	movs	r3, #164	; 0xa4
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80133dc:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 80133de:	4ba4      	ldr	r3, [pc, #656]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	23a6      	movs	r3, #166	; 0xa6
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80133e8:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 80133ea:	4ba1      	ldr	r3, [pc, #644]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	23e0      	movs	r3, #224	; 0xe0
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80133f4:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 80133f6:	238a      	movs	r3, #138	; 0x8a
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	001a      	movs	r2, r3
 80133fc:	2100      	movs	r1, #0
 80133fe:	2000      	movs	r0, #0
 8013400:	f000 fe10 	bl	8014024 <_ux_utility_memory_allocate>
 8013404:	0003      	movs	r3, r0
 8013406:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 8013408:	6a3b      	ldr	r3, [r7, #32]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d101      	bne.n	8013412 <_ux_device_stack_initialize+0x9e>
        return(UX_MEMORY_INSUFFICIENT);
 801340e:	2312      	movs	r3, #18
 8013410:	e170      	b.n	80136f4 <_ux_device_stack_initialize+0x380>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 8013412:	4b97      	ldr	r3, [pc, #604]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	23ac      	movs	r3, #172	; 0xac
 8013418:	005b      	lsls	r3, r3, #1
 801341a:	6a39      	ldr	r1, [r7, #32]
 801341c:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013420:	336c      	adds	r3, #108	; 0x6c
 8013422:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 8013424:	2380      	movs	r3, #128	; 0x80
 8013426:	005b      	lsls	r3, r3, #1
 8013428:	001a      	movs	r2, r3
 801342a:	2101      	movs	r1, #1
 801342c:	2000      	movs	r0, #0
 801342e:	f000 fdf9 	bl	8014024 <_ux_utility_memory_allocate>
 8013432:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d102      	bne.n	8013446 <_ux_device_stack_initialize+0xd2>
        status = UX_MEMORY_INSUFFICIENT;
 8013440:	2312      	movs	r3, #18
 8013442:	64bb      	str	r3, [r7, #72]	; 0x48
 8013444:	e001      	b.n	801344a <_ux_device_stack_initialize+0xd6>
    else
        status = UX_SUCCESS;
 8013446:	2300      	movs	r3, #0
 8013448:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 801344a:	2300      	movs	r3, #0
 801344c:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 801344e:	2300      	movs	r3, #0
 8013450:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 8013452:	2300      	movs	r3, #0
 8013454:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 8013456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013458:	2b00      	cmp	r3, #0
 801345a:	d000      	beq.n	801345e <_ux_device_stack_initialize+0xea>
 801345c:	e094      	b.n	8013588 <_ux_device_stack_initialize+0x214>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801345e:	4b84      	ldr	r3, [pc, #528]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 8013460:	681a      	ldr	r2, [r3, #0]
 8013462:	2398      	movs	r3, #152	; 0x98
 8013464:	005b      	lsls	r3, r3, #1
 8013466:	58d3      	ldr	r3, [r2, r3]
 8013468:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801346a:	4b81      	ldr	r3, [pc, #516]	; (8013670 <_ux_device_stack_initialize+0x2fc>)
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	239a      	movs	r3, #154	; 0x9a
 8013470:	005b      	lsls	r3, r3, #1
 8013472:	58d3      	ldr	r3, [r2, r3]
 8013474:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 8013476:	2300      	movs	r3, #0
 8013478:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 801347a:	2300      	movs	r3, #0
 801347c:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 801347e:	2300      	movs	r3, #0
 8013480:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 8013482:	e057      	b.n	8013534 <_ux_device_stack_initialize+0x1c0>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 801348a:	2117      	movs	r1, #23
 801348c:	187b      	adds	r3, r7, r1
 801348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013490:	7852      	ldrb	r2, [r2, #1]
 8013492:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 8013494:	187b      	adds	r3, r7, r1
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	2b02      	cmp	r3, #2
 801349a:	d029      	beq.n	80134f0 <_ux_device_stack_initialize+0x17c>
 801349c:	2b04      	cmp	r3, #4
 801349e:	d13e      	bne.n	801351e <_ux_device_stack_initialize+0x1aa>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	3303      	adds	r3, #3
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10b      	bne.n	80134c2 <_ux_device_stack_initialize+0x14e>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 80134aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	18d3      	adds	r3, r2, r3
 80134b0:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 80134b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b4:	3304      	adds	r3, #4
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 80134ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134bc:	3301      	adds	r3, #1
 80134be:	63bb      	str	r3, [r7, #56]	; 0x38
 80134c0:	e00a      	b.n	80134d8 <_ux_device_stack_initialize+0x164>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 80134c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c4:	3304      	adds	r3, #4
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	001a      	movs	r2, r3
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d203      	bcs.n	80134d8 <_ux_device_stack_initialize+0x164>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 80134d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d2:	3304      	adds	r3, #4
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134da:	3302      	adds	r3, #2
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	001a      	movs	r2, r3
 80134e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d21d      	bcs.n	8013522 <_ux_device_stack_initialize+0x1ae>
                    max_interface_number = *(device_framework + 2);
 80134e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e8:	3302      	adds	r3, #2
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 80134ee:	e018      	b.n	8013522 <_ux_device_stack_initialize+0x1ae>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 80134f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d901      	bls.n	80134fc <_ux_device_stack_initialize+0x188>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 80134f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fa:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 80134fc:	2300      	movs	r3, #0
 80134fe:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 8013500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013504:	18d3      	adds	r3, r2, r3
 8013506:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 8013508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801350a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801350c:	429a      	cmp	r2, r3
 801350e:	d901      	bls.n	8013514 <_ux_device_stack_initialize+0x1a0>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 8013510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013512:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 8013514:	2300      	movs	r3, #0
 8013516:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 8013518:	2300      	movs	r3, #0
 801351a:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 801351c:	e002      	b.n	8013524 <_ux_device_stack_initialize+0x1b0>

            default:
                break;
 801351e:	46c0      	nop			; (mov r8, r8)
 8013520:	e000      	b.n	8013524 <_ux_device_stack_initialize+0x1b0>
                break;
 8013522:	46c0      	nop			; (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 8013524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	18d3      	adds	r3, r2, r3
 8013532:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 8013534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1a4      	bne.n	8013484 <_ux_device_stack_initialize+0x110>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 801353a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353e:	18d3      	adds	r3, r2, r3
 8013540:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 8013542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013546:	429a      	cmp	r2, r3
 8013548:	d901      	bls.n	801354e <_ux_device_stack_initialize+0x1da>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 801354a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354c:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801354e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013552:	429a      	cmp	r2, r3
 8013554:	d901      	bls.n	801355a <_ux_device_stack_initialize+0x1e6>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 8013556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013558:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 801355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801355c:	2b00      	cmp	r3, #0
 801355e:	d106      	bne.n	801356e <_ux_device_stack_initialize+0x1fa>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 8013560:	2242      	movs	r2, #66	; 0x42
 8013562:	2103      	movs	r1, #3
 8013564:	2002      	movs	r0, #2
 8013566:	f000 fbb9 	bl	8013cdc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 801356a:	2342      	movs	r3, #66	; 0x42
 801356c:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 801356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013570:	2b00      	cmp	r3, #0
 8013572:	d109      	bne.n	8013588 <_ux_device_stack_initialize+0x214>
 8013574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013576:	2b0f      	cmp	r3, #15
 8013578:	d906      	bls.n	8013588 <_ux_device_stack_initialize+0x214>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 801357a:	2212      	movs	r2, #18
 801357c:	2103      	movs	r1, #3
 801357e:	2002      	movs	r0, #2
 8013580:	f000 fbac 	bl	8013cdc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 8013584:	2312      	movs	r3, #18
 8013586:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 8013588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801358a:	2b00      	cmp	r3, #0
 801358c:	d11a      	bne.n	80135c4 <_ux_device_stack_initialize+0x250>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	21f8      	movs	r1, #248	; 0xf8
 8013592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013594:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 8013596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013598:	2380      	movs	r3, #128	; 0x80
 801359a:	005b      	lsls	r3, r3, #1
 801359c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801359e:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 80135a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135a2:	2338      	movs	r3, #56	; 0x38
 80135a4:	2100      	movs	r1, #0
 80135a6:	2000      	movs	r0, #0
 80135a8:	f000 fe44 	bl	8014234 <_ux_utility_memory_allocate_mulc_safe>
 80135ac:	0003      	movs	r3, r0
 80135ae:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d102      	bne.n	80135bc <_ux_device_stack_initialize+0x248>
            status = UX_MEMORY_INSUFFICIENT;
 80135b6:	2312      	movs	r3, #18
 80135b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80135ba:	e003      	b.n	80135c4 <_ux_device_stack_initialize+0x250>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 80135bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135be:	21f4      	movs	r1, #244	; 0xf4
 80135c0:	693a      	ldr	r2, [r7, #16]
 80135c2:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 80135c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d046      	beq.n	8013658 <_ux_device_stack_initialize+0x2e4>
 80135ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d143      	bne.n	8013658 <_ux_device_stack_initialize+0x2e4>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 80135d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80135d2:	2390      	movs	r3, #144	; 0x90
 80135d4:	2100      	movs	r1, #0
 80135d6:	2000      	movs	r0, #0
 80135d8:	f000 fe2c 	bl	8014234 <_ux_utility_memory_allocate_mulc_safe>
 80135dc:	0003      	movs	r3, r0
 80135de:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 80135e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d102      	bne.n	80135ec <_ux_device_stack_initialize+0x278>
            status = UX_MEMORY_INSUFFICIENT;
 80135e6:	2312      	movs	r3, #18
 80135e8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 80135ea:	e037      	b.n	801365c <_ux_device_stack_initialize+0x2e8>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	21fc      	movs	r1, #252	; 0xfc
 80135f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135f2:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 80135f4:	e022      	b.n	801363c <_ux_device_stack_initialize+0x2c8>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 80135f6:	2380      	movs	r3, #128	; 0x80
 80135f8:	011b      	lsls	r3, r3, #4
 80135fa:	001a      	movs	r2, r3
 80135fc:	2101      	movs	r1, #1
 80135fe:	2000      	movs	r0, #0
 8013600:	f000 fd10 	bl	8014024 <_ux_utility_memory_allocate>
 8013604:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 8013606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013608:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 801360a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801360e:	2b00      	cmp	r3, #0
 8013610:	d102      	bne.n	8013618 <_ux_device_stack_initialize+0x2a4>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 8013612:	2312      	movs	r3, #18
 8013614:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8013616:	e01e      	b.n	8013656 <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 8013618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801361a:	3360      	adds	r3, #96	; 0x60
 801361c:	4915      	ldr	r1, [pc, #84]	; (8013674 <_ux_device_stack_initialize+0x300>)
 801361e:	2200      	movs	r2, #0
 8013620:	0018      	movs	r0, r3
 8013622:	f000 ff9b 	bl	801455c <_ux_utility_semaphore_create>
 8013626:	0003      	movs	r3, r0
 8013628:	64bb      	str	r3, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 801362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801362c:	2b00      	cmp	r3, #0
 801362e:	d002      	beq.n	8013636 <_ux_device_stack_initialize+0x2c2>
                {
                    status = UX_SEMAPHORE_ERROR;
 8013630:	2315      	movs	r3, #21
 8013632:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 8013634:	e00f      	b.n	8013656 <_ux_device_stack_initialize+0x2e2>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 8013636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013638:	3390      	adds	r3, #144	; 0x90
 801363a:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363e:	22fc      	movs	r2, #252	; 0xfc
 8013640:	5899      	ldr	r1, [r3, r2]
 8013642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013644:	0013      	movs	r3, r2
 8013646:	00db      	lsls	r3, r3, #3
 8013648:	189b      	adds	r3, r3, r2
 801364a:	011b      	lsls	r3, r3, #4
 801364c:	18cb      	adds	r3, r1, r3
 801364e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013650:	429a      	cmp	r2, r3
 8013652:	d3d0      	bcc.n	80135f6 <_ux_device_stack_initialize+0x282>
        if (endpoints_pool == UX_NULL)
 8013654:	e002      	b.n	801365c <_ux_device_stack_initialize+0x2e8>
 8013656:	e001      	b.n	801365c <_ux_device_stack_initialize+0x2e8>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 8013658:	2300      	movs	r3, #0
 801365a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 801365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801365e:	2b00      	cmp	r3, #0
 8013660:	d101      	bne.n	8013666 <_ux_device_stack_initialize+0x2f2>
        return(UX_SUCCESS);
 8013662:	2300      	movs	r3, #0
 8013664:	e046      	b.n	80136f4 <_ux_device_stack_initialize+0x380>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 8013666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013668:	2b00      	cmp	r3, #0
 801366a:	d026      	beq.n	80136ba <_ux_device_stack_initialize+0x346>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801366c:	e019      	b.n	80136a2 <_ux_device_stack_initialize+0x32e>
 801366e:	46c0      	nop			; (mov r8, r8)
 8013670:	20008db8 	.word	0x20008db8
 8013674:	08018268 	.word	0x08018268
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 8013678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <_ux_device_stack_initialize+0x316>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 8013680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013682:	3360      	adds	r3, #96	; 0x60
 8013684:	0018      	movs	r0, r3
 8013686:	f000 ff85 	bl	8014594 <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801368a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801368e:	2b00      	cmp	r3, #0
 8013690:	d004      	beq.n	801369c <_ux_device_stack_initialize+0x328>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 8013692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013696:	0018      	movs	r0, r3
 8013698:	f000 fe26 	bl	80142e8 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 801369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801369e:	3b90      	subs	r3, #144	; 0x90
 80136a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 80136a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a4:	22fc      	movs	r2, #252	; 0xfc
 80136a6:	589b      	ldr	r3, [r3, r2]
 80136a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d2e4      	bcs.n	8013678 <_ux_device_stack_initialize+0x304>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 80136ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b0:	22fc      	movs	r2, #252	; 0xfc
 80136b2:	589b      	ldr	r3, [r3, r2]
 80136b4:	0018      	movs	r0, r3
 80136b6:	f000 fe17 	bl	80142e8 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	22f4      	movs	r2, #244	; 0xf4
 80136be:	589b      	ldr	r3, [r3, r2]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d005      	beq.n	80136d0 <_ux_device_stack_initialize+0x35c>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	22f4      	movs	r2, #244	; 0xf4
 80136c8:	589b      	ldr	r3, [r3, r2]
 80136ca:	0018      	movs	r0, r3
 80136cc:	f000 fe0c 	bl	80142e8 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 80136d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d004      	beq.n	80136e2 <_ux_device_stack_initialize+0x36e>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 80136d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136dc:	0018      	movs	r0, r3
 80136de:	f000 fe03 	bl	80142e8 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 80136e2:	4b06      	ldr	r3, [pc, #24]	; (80136fc <_ux_device_stack_initialize+0x388>)
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	23ac      	movs	r3, #172	; 0xac
 80136e8:	005b      	lsls	r3, r3, #1
 80136ea:	58d3      	ldr	r3, [r2, r3]
 80136ec:	0018      	movs	r0, r3
 80136ee:	f000 fdfb 	bl	80142e8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 80136f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80136f4:	0018      	movs	r0, r3
 80136f6:	46bd      	mov	sp, r7
 80136f8:	b014      	add	sp, #80	; 0x50
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	20008db8 	.word	0x20008db8

08013700 <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013708:	4b20      	ldr	r3, [pc, #128]	; (801378c <_ux_device_stack_interface_delete+0x8c>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	3320      	adds	r3, #32
 801370e:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013714:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8013716:	e01c      	b.n	8013752 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013720:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8013722:	4b1a      	ldr	r3, [pc, #104]	; (801378c <_ux_device_stack_interface_delete+0x8c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	699b      	ldr	r3, [r3, #24]
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	68b8      	ldr	r0, [r7, #8]
 8013730:	210f      	movs	r1, #15
 8013732:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2200      	movs	r2, #0
 8013738:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2200      	movs	r2, #0
 801373e:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2200      	movs	r2, #0
 801374a:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2200      	movs	r2, #0
 8013750:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1df      	bne.n	8013718 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	21f0      	movs	r1, #240	; 0xf0
 8013760:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2200      	movs	r2, #0
 801376c:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2200      	movs	r2, #0
 8013772:	631a      	str	r2, [r3, #48]	; 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2200      	movs	r2, #0
 8013778:	635a      	str	r2, [r3, #52]	; 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2200      	movs	r2, #0
 801377e:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 8013780:	2300      	movs	r3, #0
}
 8013782:	0018      	movs	r0, r3
 8013784:	46bd      	mov	sp, r7
 8013786:	b006      	add	sp, #24
 8013788:	bd80      	pop	{r7, pc}
 801378a:	46c0      	nop			; (mov r8, r8)
 801378c:	20008db8 	.word	0x20008db8

08013790 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b092      	sub	sp, #72	; 0x48
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801379c:	4b86      	ldr	r3, [pc, #536]	; (80139b8 <_ux_device_stack_interface_set+0x228>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80137a2:	4b85      	ldr	r3, [pc, #532]	; (80139b8 <_ux_device_stack_interface_set+0x228>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	3320      	adds	r3, #32
 80137a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 80137aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ac:	22f4      	movs	r2, #244	; 0xf4
 80137ae:	589b      	ldr	r3, [r3, r2]
 80137b0:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	22f8      	movs	r2, #248	; 0xf8
 80137b6:	589b      	ldr	r3, [r3, r2]
 80137b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80137ba:	e009      	b.n	80137d0 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 80137bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d009      	beq.n	80137d8 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 80137c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c6:	3338      	adds	r3, #56	; 0x38
 80137c8:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 80137ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137cc:	3b01      	subs	r3, #1
 80137ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 80137d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1f2      	bne.n	80137bc <_ux_device_stack_interface_set+0x2c>
 80137d6:	e000      	b.n	80137da <_ux_device_stack_interface_set+0x4a>
            break;
 80137d8:	46c0      	nop			; (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 80137da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 80137e0:	2312      	movs	r3, #18
 80137e2:	e0e5      	b.n	80139b0 <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 80137e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137e6:	2201      	movs	r2, #1
 80137e8:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 80137ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ec:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 80137ee:	4973      	ldr	r1, [pc, #460]	; (80139bc <_ux_device_stack_interface_set+0x22c>)
 80137f0:	68f8      	ldr	r0, [r7, #12]
 80137f2:	2209      	movs	r2, #9
 80137f4:	f000 fb61 	bl	8013eba <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 80137f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fa:	22f0      	movs	r2, #240	; 0xf0
 80137fc:	589b      	ldr	r3, [r3, r2]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d104      	bne.n	801380c <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 8013802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013804:	21f0      	movs	r1, #240	; 0xf0
 8013806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013808:	505a      	str	r2, [r3, r1]
 801380a:	e00e      	b.n	801382a <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	22f0      	movs	r2, #240	; 0xf0
 8013810:	589b      	ldr	r3, [r3, r2]
 8013812:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8013814:	e002      	b.n	801381c <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8013816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801381a:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1f8      	bne.n	8013816 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 8013824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013828:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	781b      	ldrb	r3, [r3, #0]
 801382e:	001a      	movs	r2, r3
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	1a9b      	subs	r3, r3, r2
 8013834:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	001a      	movs	r2, r3
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	189b      	adds	r3, r3, r2
 8013840:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8013842:	e0aa      	b.n	801399a <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801384a:	211b      	movs	r1, #27
 801384c:	187b      	adds	r3, r7, r1
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	7852      	ldrb	r2, [r2, #1]
 8013852:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8013854:	187b      	adds	r3, r7, r1
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	2b05      	cmp	r3, #5
 801385a:	d008      	beq.n	801386e <_ux_device_stack_interface_set+0xde>
 801385c:	dd00      	ble.n	8013860 <_ux_device_stack_interface_set+0xd0>
 801385e:	e093      	b.n	8013988 <_ux_device_stack_interface_set+0x1f8>
 8013860:	2b02      	cmp	r3, #2
 8013862:	d100      	bne.n	8013866 <_ux_device_stack_interface_set+0xd6>
 8013864:	e088      	b.n	8013978 <_ux_device_stack_interface_set+0x1e8>
 8013866:	2b04      	cmp	r3, #4
 8013868:	d100      	bne.n	801386c <_ux_device_stack_interface_set+0xdc>
 801386a:	e085      	b.n	8013978 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 801386c:	e08c      	b.n	8013988 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013870:	22fc      	movs	r2, #252	; 0xfc
 8013872:	589b      	ldr	r3, [r3, r2]
 8013874:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8013876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013878:	2380      	movs	r3, #128	; 0x80
 801387a:	005b      	lsls	r3, r3, #1
 801387c:	58d3      	ldr	r3, [r2, r3]
 801387e:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 8013880:	e00d      	b.n	801389e <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8013882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d103      	bne.n	8013892 <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388c:	2201      	movs	r2, #1
 801388e:	601a      	str	r2, [r3, #0]
                    break;
 8013890:	e008      	b.n	80138a4 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 8013892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013894:	3390      	adds	r3, #144	; 0x90
 8013896:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 8013898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389a:	3b01      	subs	r3, #1
 801389c:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d1ee      	bne.n	8013882 <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 80138a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d101      	bne.n	80138ae <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 80138aa:	2312      	movs	r3, #18
 80138ac:	e080      	b.n	80139b0 <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 80138ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b0:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 80138b2:	4943      	ldr	r1, [pc, #268]	; (80139c0 <_ux_device_stack_interface_set+0x230>)
 80138b4:	68f8      	ldr	r0, [r7, #12]
 80138b6:	2206      	movs	r2, #6
 80138b8:	f000 faff 	bl	8013eba <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80138bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138be:	3330      	adds	r3, #48	; 0x30
 80138c0:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80138c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c4:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 80138c6:	055b      	lsls	r3, r3, #21
 80138c8:	0d5b      	lsrs	r3, r3, #21
 80138ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80138cc:	4b3a      	ldr	r3, [pc, #232]	; (80139b8 <_ux_device_stack_interface_set+0x228>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	23ce      	movs	r3, #206	; 0xce
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	58d3      	ldr	r3, [r2, r3]
 80138d6:	2b02      	cmp	r3, #2
 80138d8:	d117      	bne.n	801390a <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 80138da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138dc:	699b      	ldr	r3, [r3, #24]
 80138de:	2201      	movs	r2, #1
 80138e0:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80138e2:	d012      	beq.n	801390a <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 80138e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e6:	69da      	ldr	r2, [r3, #28]
 80138e8:	23c0      	movs	r3, #192	; 0xc0
 80138ea:	015b      	lsls	r3, r3, #5
 80138ec:	4013      	ands	r3, r2
 80138ee:	613b      	str	r3, [r7, #16]
                if (n_trans)
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d009      	beq.n	801390a <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	0adb      	lsrs	r3, r3, #11
 80138fa:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	3301      	adds	r3, #1
 8013900:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 8013902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013904:	693a      	ldr	r2, [r7, #16]
 8013906:	4353      	muls	r3, r2
 8013908:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801390e:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013914:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	2201      	movs	r2, #1
 801391a:	4252      	negs	r2, r2
 801391c:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 801391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013922:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 8013924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013928:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 801392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392c:	699b      	ldr	r3, [r3, #24]
 801392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013932:	210e      	movs	r1, #14
 8013934:	4798      	blx	r3
 8013936:	0003      	movs	r3, r0
 8013938:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 801393a:	6a3b      	ldr	r3, [r7, #32]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d004      	beq.n	801394a <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	2200      	movs	r2, #0
 8013944:	601a      	str	r2, [r3, #0]
                return(status);
 8013946:	6a3b      	ldr	r3, [r7, #32]
 8013948:	e032      	b.n	80139b0 <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 801394a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801394e:	2b00      	cmp	r3, #0
 8013950:	d103      	bne.n	801395a <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 8013952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013956:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 8013958:	e017      	b.n	801398a <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 801395a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801395e:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8013960:	e002      	b.n	8013968 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8013962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013966:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8013968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801396c:	2b00      	cmp	r3, #0
 801396e:	d1f8      	bne.n	8013962 <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8013970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013974:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8013976:	e008      	b.n	801398a <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 8013978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801397a:	0018      	movs	r0, r3
 801397c:	f000 f822 	bl	80139c4 <_ux_device_stack_interface_start>
 8013980:	0003      	movs	r3, r0
 8013982:	623b      	str	r3, [r7, #32]
            return(status);
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	e013      	b.n	80139b0 <_ux_device_stack_interface_set+0x220>
            break;
 8013988:	46c0      	nop			; (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801398a:	68ba      	ldr	r2, [r7, #8]
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	18d3      	adds	r3, r2, r3
 8013998:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d000      	beq.n	80139a2 <_ux_device_stack_interface_set+0x212>
 80139a0:	e750      	b.n	8013844 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 80139a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139a4:	0018      	movs	r0, r3
 80139a6:	f000 f80d 	bl	80139c4 <_ux_device_stack_interface_start>
 80139aa:	0003      	movs	r3, r0
 80139ac:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 80139ae:	6a3b      	ldr	r3, [r7, #32]
}
 80139b0:	0018      	movs	r0, r3
 80139b2:	46bd      	mov	sp, r7
 80139b4:	b012      	add	sp, #72	; 0x48
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	20008db8 	.word	0x20008db8
 80139bc:	20000048 	.word	0x20000048
 80139c0:	20000028 	.word	0x20000028

080139c4 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b091      	sub	sp, #68	; 0x44
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 80139cc:	4b2b      	ldr	r3, [pc, #172]	; (8013a7c <_ux_device_stack_interface_start+0xb8>)
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	695b      	ldr	r3, [r3, #20]
 80139d4:	3356      	adds	r3, #86	; 0x56
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	18d3      	adds	r3, r2, r3
 80139da:	3304      	adds	r3, #4
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 80139e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d101      	bne.n	80139ea <_ux_device_stack_interface_start+0x26>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 80139e6:	2357      	movs	r3, #87	; 0x57
 80139e8:	e044      	b.n	8013a74 <_ux_device_stack_interface_start+0xb0>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80139ea:	4b24      	ldr	r3, [pc, #144]	; (8013a7c <_ux_device_stack_interface_start+0xb8>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3320      	adds	r3, #32
 80139f0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 80139f2:	2008      	movs	r0, #8
 80139f4:	183b      	adds	r3, r7, r0
 80139f6:	2201      	movs	r2, #1
 80139f8:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 80139fa:	183b      	adds	r3, r7, r0
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a1a      	ldr	r2, [r3, #32]
 8013a04:	183b      	adds	r3, r7, r0
 8013a06:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a0c:	183b      	adds	r3, r7, r0
 8013a0e:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a14:	183b      	adds	r3, r7, r0
 8013a16:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8013a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1a:	6a1a      	ldr	r2, [r3, #32]
 8013a1c:	183b      	adds	r3, r7, r0
 8013a1e:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8013a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a24:	183b      	adds	r3, r7, r0
 8013a26:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 8013a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a2a:	2388      	movs	r3, #136	; 0x88
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	6879      	ldr	r1, [r7, #4]
 8013a30:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 8013a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a36:	0004      	movs	r4, r0
 8013a38:	183a      	adds	r2, r7, r0
 8013a3a:	0010      	movs	r0, r2
 8013a3c:	4798      	blx	r3
 8013a3e:	0003      	movs	r3, r0
 8013a40:	637b      	str	r3, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8013a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d114      	bne.n	8013a72 <_ux_device_stack_interface_start+0xae>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 8013a48:	193b      	adds	r3, r7, r4
 8013a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a4c:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8013a4e:	193b      	adds	r3, r7, r4
 8013a50:	2202      	movs	r2, #2
 8013a52:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 8013a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a58:	193a      	adds	r2, r7, r4
 8013a5a:	0010      	movs	r0, r2
 8013a5c:	4798      	blx	r3
 8013a5e:	0003      	movs	r3, r0
 8013a60:	637b      	str	r3, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8013a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <_ux_device_stack_interface_start+0xaa>
            interface -> ux_slave_interface_class =  class;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a6c:	605a      	str	r2, [r3, #4]

        return(status); 
 8013a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a70:	e000      	b.n	8013a74 <_ux_device_stack_interface_start+0xb0>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8013a72:	2357      	movs	r3, #87	; 0x57
}
 8013a74:	0018      	movs	r0, r3
 8013a76:	46bd      	mov	sp, r7
 8013a78:	b011      	add	sp, #68	; 0x44
 8013a7a:	bd90      	pop	{r4, r7, pc}
 8013a7c:	20008db8 	.word	0x20008db8

08013a80 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b08a      	sub	sp, #40	; 0x28
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013a8c:	4b29      	ldr	r3, [pc, #164]	; (8013b34 <_ux_device_stack_set_feature+0xb4>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013a92:	4b28      	ldr	r3, [pc, #160]	; (8013b34 <_ux_device_stack_set_feature+0xb4>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	3320      	adds	r3, #32
 8013a98:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	333c      	adds	r3, #60	; 0x3c
 8013a9e:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2203      	movs	r2, #3
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	d002      	beq.n	8013aae <_ux_device_stack_set_feature+0x2e>
 8013aa8:	2b02      	cmp	r3, #2
 8013aaa:	d016      	beq.n	8013ada <_ux_device_stack_set_feature+0x5a>
 8013aac:	e037      	b.n	8013b1e <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d110      	bne.n	8013ad6 <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8013ab4:	4b1f      	ldr	r3, [pc, #124]	; (8013b34 <_ux_device_stack_set_feature+0xb4>)
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	23d2      	movs	r3, #210	; 0xd2
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	58d3      	ldr	r3, [r2, r3]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d007      	beq.n	8013ad2 <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8013ac2:	4b1c      	ldr	r3, [pc, #112]	; (8013b34 <_ux_device_stack_set_feature+0xb4>)
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	23d4      	movs	r3, #212	; 0xd4
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	2101      	movs	r1, #1
 8013acc:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e02c      	b.n	8013b2c <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8013ad2:	2354      	movs	r3, #84	; 0x54
 8013ad4:	e02a      	b.n	8013b2c <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8013ad6:	2354      	movs	r3, #84	; 0x54
 8013ad8:	e028      	b.n	8013b2c <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	22f0      	movs	r2, #240	; 0xf0
 8013ade:	589b      	ldr	r3, [r3, r2]
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8013ae2:	e019      	b.n	8013b18 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae8:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8013aea:	e00f      	b.n	8013b0c <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8013aec:	6a3b      	ldr	r3, [r7, #32]
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d107      	bne.n	8013b06 <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	699b      	ldr	r3, [r3, #24]
 8013afa:	6a3a      	ldr	r2, [r7, #32]
 8013afc:	69f8      	ldr	r0, [r7, #28]
 8013afe:	2114      	movs	r1, #20
 8013b00:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8013b02:	2300      	movs	r3, #0
 8013b04:	e012      	b.n	8013b2c <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0a:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8013b0c:	6a3b      	ldr	r3, [r7, #32]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d1ec      	bne.n	8013aec <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8013b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b16:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface != UX_NULL)
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1e2      	bne.n	8013ae4 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	699b      	ldr	r3, [r3, #24]
 8013b22:	697a      	ldr	r2, [r7, #20]
 8013b24:	69f8      	ldr	r0, [r7, #28]
 8013b26:	2114      	movs	r1, #20
 8013b28:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8013b2a:	2300      	movs	r3, #0
    }
}
 8013b2c:	0018      	movs	r0, r3
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	b00a      	add	sp, #40	; 0x28
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	20008db8 	.word	0x20008db8

08013b38 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b088      	sub	sp, #32
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013b42:	4b18      	ldr	r3, [pc, #96]	; (8013ba4 <_ux_device_stack_transfer_abort+0x6c>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	683a      	ldr	r2, [r7, #0]
 8013b4c:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b52:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013b54:	b672      	cpsid	i
    return(primask_value);
 8013b56:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8013b58:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d114      	bne.n	8013b8c <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	699b      	ldr	r3, [r3, #24]
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	69f8      	ldr	r0, [r7, #28]
 8013b6a:	210d      	movs	r1, #13
 8013b6c:	4798      	blx	r3
 8013b6e:	69bb      	ldr	r3, [r7, #24]
 8013b70:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	f383 8810 	msr	PRIMASK, r3
}
 8013b78:	46c0      	nop			; (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2204      	movs	r2, #4
 8013b7e:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	3330      	adds	r3, #48	; 0x30
 8013b84:	0018      	movs	r0, r3
 8013b86:	f000 fd51 	bl	801462c <_ux_utility_semaphore_put>
 8013b8a:	e005      	b.n	8013b98 <_ux_device_stack_transfer_abort+0x60>
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f383 8810 	msr	PRIMASK, r3
}
 8013b96:	46c0      	nop			; (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	0018      	movs	r0, r3
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	b008      	add	sp, #32
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	46c0      	nop			; (mov r8, r8)
 8013ba4:	20008db8 	.word	0x20008db8

08013ba8 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	3330      	adds	r3, #48	; 0x30
 8013bb6:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8013bb8:	683a      	ldr	r2, [r7, #0]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	0011      	movs	r1, r2
 8013bbe:	0018      	movs	r0, r3
 8013bc0:	f7ff ffba 	bl	8013b38 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	0018      	movs	r0, r3
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	b004      	add	sp, #16
 8013bcc:	bd80      	pop	{r7, pc}
	...

08013bd0 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08c      	sub	sp, #48	; 0x30
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	d101      	bne.n	8013be8 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 8013be4:	2300      	movs	r3, #0
 8013be6:	e073      	b.n	8013cd0 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013be8:	f3ef 8310 	mrs	r3, PRIMASK
 8013bec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013bee:	b672      	cpsid	i
    return(primask_value);
 8013bf0:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 8013bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8013bf4:	4b38      	ldr	r3, [pc, #224]	; (8013cd8 <_ux_device_stack_transfer_request+0x108>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	6a1b      	ldr	r3, [r3, #32]
 8013bfa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 8013bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfe:	2b01      	cmp	r3, #1
 8013c00:	d005      	beq.n	8013c0e <_ux_device_stack_transfer_request+0x3e>
 8013c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d002      	beq.n	8013c0e <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 8013c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0a:	2b03      	cmp	r3, #3
 8013c0c:	d114      	bne.n	8013c38 <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2201      	movs	r2, #1
 8013c12:	601a      	str	r2, [r3, #0]
 8013c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c16:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	f383 8810 	msr	PRIMASK, r3
}
 8013c1e:	46c0      	nop			; (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013c20:	4b2d      	ldr	r3, [pc, #180]	; (8013cd8 <_ux_device_stack_transfer_request+0x108>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	689b      	ldr	r3, [r3, #8]
 8013c2a:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 8013c2c:	6a3b      	ldr	r3, [r7, #32]
 8013c2e:	699b      	ldr	r3, [r3, #24]
 8013c30:	2203      	movs	r2, #3
 8013c32:	4013      	ands	r3, r2
 8013c34:	d10b      	bne.n	8013c4e <_ux_device_stack_transfer_request+0x7e>
 8013c36:	e01a      	b.n	8013c6e <_ux_device_stack_transfer_request+0x9e>
 8013c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	f383 8810 	msr	PRIMASK, r3
}
 8013c42:	46c0      	nop			; (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 8013c44:	2325      	movs	r3, #37	; 0x25
 8013c46:	e043      	b.n	8013cd0 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8013c48:	2064      	movs	r0, #100	; 0x64
 8013c4a:	f000 f91d 	bl	8013e88 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8013c4e:	6a3b      	ldr	r3, [r7, #32]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	d0f8      	beq.n	8013c48 <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	695b      	ldr	r3, [r3, #20]
 8013c5a:	2280      	movs	r2, #128	; 0x80
 8013c5c:	4013      	ands	r3, r2
 8013c5e:	d003      	beq.n	8013c68 <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2203      	movs	r2, #3
 8013c64:	629a      	str	r2, [r3, #40]	; 0x28
 8013c66:	e002      	b.n	8013c6e <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	2202      	movs	r2, #2
 8013c6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c72:	2b03      	cmp	r3, #3
 8013c74:	d113      	bne.n	8013c9e <_ux_device_stack_transfer_request+0xce>
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d010      	beq.n	8013c9e <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d00c      	beq.n	8013c9e <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8013c84:	6a3b      	ldr	r3, [r7, #32]
 8013c86:	69da      	ldr	r2, [r3, #28]
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	0011      	movs	r1, r2
 8013c8c:	0018      	movs	r0, r3
 8013c8e:	f7ee fef5 	bl	8002a7c <__aeabi_uidivmod>
 8013c92:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 8013c94:	d103      	bne.n	8013c9e <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2201      	movs	r2, #1
 8013c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8013c9c:	e002      	b.n	8013ca4 <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	68ba      	ldr	r2, [r7, #8]
 8013cae:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	68ba      	ldr	r2, [r7, #8]
 8013cb4:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	699b      	ldr	r3, [r3, #24]
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cc6:	210c      	movs	r1, #12
 8013cc8:	4798      	blx	r3
 8013cca:	0003      	movs	r3, r0
 8013ccc:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 8013cce:	69fb      	ldr	r3, [r7, #28]

#endif
}
 8013cd0:	0018      	movs	r0, r3
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	b00c      	add	sp, #48	; 0x30
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20008db8 	.word	0x20008db8

08013cdc <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8013ce8:	4b0c      	ldr	r3, [pc, #48]	; (8013d1c <_ux_system_error_handler+0x40>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8013cf0:	4b0a      	ldr	r3, [pc, #40]	; (8013d1c <_ux_system_error_handler+0x40>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013cf6:	3201      	adds	r2, #1
 8013cf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8013cfa:	4b08      	ldr	r3, [pc, #32]	; (8013d1c <_ux_system_error_handler+0x40>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d006      	beq.n	8013d12 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8013d04:	4b05      	ldr	r3, [pc, #20]	; (8013d1c <_ux_system_error_handler+0x40>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	68b9      	ldr	r1, [r7, #8]
 8013d0e:	68f8      	ldr	r0, [r7, #12]
 8013d10:	4798      	blx	r3
    }
}
 8013d12:	46c0      	nop			; (mov r8, r8)
 8013d14:	46bd      	mov	sp, r7
 8013d16:	b004      	add	sp, #16
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	46c0      	nop			; (mov r8, r8)
 8013d1c:	20008dbc 	.word	0x20008dbc

08013d20 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b08a      	sub	sp, #40	; 0x28
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	60b9      	str	r1, [r7, #8]
 8013d2a:	607a      	str	r2, [r7, #4]
 8013d2c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2100      	movs	r1, #0
 8013d34:	0018      	movs	r0, r3
 8013d36:	f000 fbb3 	bl	80144a0 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8013d3a:	4b50      	ldr	r3, [pc, #320]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8013d40:	235c      	movs	r3, #92	; 0x5c
 8013d42:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8013d44:	68fa      	ldr	r2, [r7, #12]
 8013d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d48:	18d2      	adds	r2, r2, r3
 8013d4a:	4b4d      	ldr	r3, [pc, #308]	; (8013e80 <_ux_system_initialize+0x160>)
 8013d4c:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8013d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d50:	33cd      	adds	r3, #205	; 0xcd
 8013d52:	33ff      	adds	r3, #255	; 0xff
 8013d54:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 8013d56:	4b49      	ldr	r3, [pc, #292]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68f9      	ldr	r1, [r7, #12]
 8013d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d5e:	188a      	adds	r2, r1, r2
 8013d60:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 8013d62:	4b46      	ldr	r3, [pc, #280]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	330f      	adds	r3, #15
 8013d6e:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013d70:	6a3b      	ldr	r3, [r7, #32]
 8013d72:	220f      	movs	r2, #15
 8013d74:	4393      	bics	r3, r2
 8013d76:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	18d3      	adds	r3, r2, r3
 8013d7e:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8013d80:	69fb      	ldr	r3, [r7, #28]
 8013d82:	6a3a      	ldr	r2, [r7, #32]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d301      	bcc.n	8013d8c <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8013d88:	2312      	movs	r3, #18
 8013d8a:	e073      	b.n	8013e74 <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8013d8c:	69f9      	ldr	r1, [r7, #28]
 8013d8e:	4b3b      	ldr	r3, [pc, #236]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	6a3a      	ldr	r2, [r7, #32]
 8013d94:	1a8a      	subs	r2, r1, r2
 8013d96:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 8013d98:	4b38      	ldr	r3, [pc, #224]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	4b37      	ldr	r3, [pc, #220]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	6852      	ldr	r2, [r2, #4]
 8013da2:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8013da4:	4b35      	ldr	r3, [pc, #212]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	6a3a      	ldr	r2, [r7, #32]
 8013daa:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8013dac:	4b33      	ldr	r3, [pc, #204]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013db4:	4b31      	ldr	r3, [pc, #196]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	3b10      	subs	r3, #16
 8013dbc:	001a      	movs	r2, r3
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d112      	bne.n	8013df4 <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8013dce:	4b2b      	ldr	r3, [pc, #172]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	4b2a      	ldr	r3, [pc, #168]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	6852      	ldr	r2, [r2, #4]
 8013dd8:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 8013dda:	4b28      	ldr	r3, [pc, #160]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	4b27      	ldr	r3, [pc, #156]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	6892      	ldr	r2, [r2, #8]
 8013de4:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 8013de6:	4b25      	ldr	r3, [pc, #148]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	4b24      	ldr	r3, [pc, #144]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	6812      	ldr	r2, [r2, #0]
 8013df0:	60da      	str	r2, [r3, #12]
 8013df2:	e02f      	b.n	8013e54 <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8013df8:	6a3b      	ldr	r3, [r7, #32]
 8013dfa:	330f      	adds	r3, #15
 8013dfc:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	220f      	movs	r2, #15
 8013e02:	4393      	bics	r3, r2
 8013e04:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 8013e06:	4b1d      	ldr	r3, [pc, #116]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	683a      	ldr	r2, [r7, #0]
 8013e0c:	3a0f      	subs	r2, #15
 8013e0e:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 8013e10:	4b1a      	ldr	r3, [pc, #104]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	4b19      	ldr	r3, [pc, #100]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	6912      	ldr	r2, [r2, #16]
 8013e1a:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8013e1c:	4b17      	ldr	r3, [pc, #92]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	6a3a      	ldr	r2, [r7, #32]
 8013e22:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 8013e24:	4b15      	ldr	r3, [pc, #84]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	68d8      	ldr	r0, [r3, #12]
 8013e2a:	4b14      	ldr	r3, [pc, #80]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	001a      	movs	r2, r3
 8013e32:	2100      	movs	r1, #0
 8013e34:	f000 fb34 	bl	80144a0 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8013e38:	4b10      	ldr	r3, [pc, #64]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8013e40:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	691b      	ldr	r3, [r3, #16]
 8013e46:	3b10      	subs	r3, #16
 8013e48:	001a      	movs	r2, r3
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	2200      	movs	r2, #0
 8013e52:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8013e54:	4b09      	ldr	r3, [pc, #36]	; (8013e7c <_ux_system_initialize+0x15c>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	331c      	adds	r3, #28
 8013e5a:	4a0a      	ldr	r2, [pc, #40]	; (8013e84 <_ux_system_initialize+0x164>)
 8013e5c:	0011      	movs	r1, r2
 8013e5e:	0018      	movs	r0, r3
 8013e60:	f000 fb3a 	bl	80144d8 <_ux_utility_mutex_create>
 8013e64:	0003      	movs	r3, r0
 8013e66:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d001      	beq.n	8013e72 <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8013e6e:	2317      	movs	r3, #23
 8013e70:	e000      	b.n	8013e74 <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	0018      	movs	r0, r3
 8013e76:	46bd      	mov	sp, r7
 8013e78:	b00a      	add	sp, #40	; 0x28
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	20008dbc 	.word	0x20008dbc
 8013e80:	20008db8 	.word	0x20008db8
 8013e84:	08018288 	.word	0x08018288

08013e88 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2264      	movs	r2, #100	; 0x64
 8013e94:	4353      	muls	r3, r2
 8013e96:	22fa      	movs	r2, #250	; 0xfa
 8013e98:	0091      	lsls	r1, r2, #2
 8013e9a:	0018      	movs	r0, r3
 8013e9c:	f7ee fd68 	bl	8002970 <__udivsi3>
 8013ea0:	0003      	movs	r3, r0
 8013ea2:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	0018      	movs	r0, r3
 8013eae:	f7fc f8f5 	bl	801009c <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8013eb2:	46c0      	nop			; (mov r8, r8)
}
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	b004      	add	sp, #16
 8013eb8:	bd80      	pop	{r7, pc}

08013eba <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8013eba:	b580      	push	{r7, lr}
 8013ebc:	b084      	sub	sp, #16
 8013ebe:	af00      	add	r7, sp, #0
 8013ec0:	60f8      	str	r0, [r7, #12]
 8013ec2:	60b9      	str	r1, [r7, #8]
 8013ec4:	607a      	str	r2, [r7, #4]
 8013ec6:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8013ec8:	e028      	b.n	8013f1c <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	1c5a      	adds	r2, r3, #1
 8013ece:	60ba      	str	r2, [r7, #8]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	2b02      	cmp	r3, #2
 8013ed4:	d00c      	beq.n	8013ef0 <_ux_utility_descriptor_parse+0x36>
 8013ed6:	2b04      	cmp	r3, #4
 8013ed8:	d115      	bne.n	8013f06 <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	0018      	movs	r0, r3
 8013ede:	f000 f87d 	bl	8013fdc <_ux_utility_long_get>
 8013ee2:	0002      	movs	r2, r0
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	3304      	adds	r3, #4
 8013eec:	60fb      	str	r3, [r7, #12]
            break;                   
 8013eee:	e012      	b.n	8013f16 <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	0018      	movs	r0, r3
 8013ef4:	f000 fba9 	bl	801464a <_ux_utility_short_get>
 8013ef8:	0002      	movs	r2, r0
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	3302      	adds	r3, #2
 8013f02:	60fb      	str	r3, [r7, #12]
            break;                   
 8013f04:	e007      	b.n	8013f16 <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	001a      	movs	r2, r3
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	3301      	adds	r3, #1
 8013f14:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	3304      	adds	r3, #4
 8013f1a:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	1e5a      	subs	r2, r3, #1
 8013f20:	607a      	str	r2, [r7, #4]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d1d1      	bne.n	8013eca <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8013f26:	46c0      	nop			; (mov r8, r8)
}
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	b004      	add	sp, #16
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <_ux_utility_event_flags_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b084      	sub	sp, #16
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 8013f38:	6839      	ldr	r1, [r7, #0]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2224      	movs	r2, #36	; 0x24
 8013f3e:	0018      	movs	r0, r3
 8013f40:	f7fd f8f0 	bl	8011124 <_txe_event_flags_create>
 8013f44:	0003      	movs	r3, r0
 8013f46:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d004      	beq.n	8013f58 <_ux_utility_event_flags_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 8013f4e:	2218      	movs	r2, #24
 8013f50:	2108      	movs	r1, #8
 8013f52:	2002      	movs	r0, #2
 8013f54:	f7ff fec2 	bl	8013cdc <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8013f58:	68fb      	ldr	r3, [r7, #12]
}
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	b004      	add	sp, #16
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <_ux_utility_event_flags_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b084      	sub	sp, #16
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	0018      	movs	r0, r3
 8013f6e:	f7fd f96b 	bl	8011248 <_txe_event_flags_delete>
 8013f72:	0003      	movs	r3, r0
 8013f74:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8013f76:	68fb      	ldr	r3, [r7, #12]
}
 8013f78:	0018      	movs	r0, r3
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	b004      	add	sp, #16
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013f80:	b590      	push	{r4, r7, lr}
 8013f82:	b089      	sub	sp, #36	; 0x24
 8013f84:	af02      	add	r7, sp, #8
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8013f8e:	2310      	movs	r3, #16
 8013f90:	18fc      	adds	r4, r7, r3
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	68b9      	ldr	r1, [r7, #8]
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	0023      	movs	r3, r4
 8013f9e:	f7fd f991 	bl	80112c4 <_txe_event_flags_get>
 8013fa2:	0003      	movs	r3, r0
 8013fa4:	617b      	str	r3, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 8013fa6:	693a      	ldr	r2, [r7, #16]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 8013fac:	697b      	ldr	r3, [r7, #20]
}
 8013fae:	0018      	movs	r0, r3
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	b007      	add	sp, #28
 8013fb4:	bd90      	pop	{r4, r7, pc}

08013fb6 <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b086      	sub	sp, #24
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	60f8      	str	r0, [r7, #12]
 8013fbe:	60b9      	str	r1, [r7, #8]
 8013fc0:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	68b9      	ldr	r1, [r7, #8]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	0018      	movs	r0, r3
 8013fca:	f7fd f9d3 	bl	8011374 <_txe_event_flags_set>
 8013fce:	0003      	movs	r3, r0
 8013fd0:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8013fd2:	697b      	ldr	r3, [r7, #20]
}
 8013fd4:	0018      	movs	r0, r3
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	b006      	add	sp, #24
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	1c5a      	adds	r2, r3, #1
 8013fe8:	607a      	str	r2, [r7, #4]
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	1c5a      	adds	r2, r3, #1
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	021b      	lsls	r3, r3, #8
 8013ff8:	68fa      	ldr	r2, [r7, #12]
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	1c5a      	adds	r2, r3, #1
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	041b      	lsls	r3, r3, #16
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4313      	orrs	r3, r2
 801400c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	061b      	lsls	r3, r3, #24
 8014014:	68fa      	ldr	r2, [r7, #12]
 8014016:	4313      	orrs	r3, r2
 8014018:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 801401a:	68fb      	ldr	r3, [r7, #12]
}
 801401c:	0018      	movs	r0, r3
 801401e:	46bd      	mov	sp, r7
 8014020:	b004      	add	sp, #16
 8014022:	bd80      	pop	{r7, pc}

08014024 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b08c      	sub	sp, #48	; 0x30
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	60b9      	str	r1, [r7, #8]
 801402e:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8014030:	4b7f      	ldr	r3, [pc, #508]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	331c      	adds	r3, #28
 8014036:	0018      	movs	r0, r3
 8014038:	f000 fa75 	bl	8014526 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	3301      	adds	r3, #1
 8014040:	d101      	bne.n	8014046 <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 8014042:	2300      	movs	r3, #0
 8014044:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2b0e      	cmp	r3, #14
 801404a:	d801      	bhi.n	8014050 <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 801404c:	230f      	movs	r3, #15
 801404e:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	3301      	adds	r3, #1
 8014058:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	330f      	adds	r3, #15
 801405e:	220f      	movs	r2, #15
 8014060:	4393      	bics	r3, r2
 8014062:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014068:	18d3      	adds	r3, r2, r3
 801406a:	3310      	adds	r3, #16
 801406c:	001a      	movs	r2, r3
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	0011      	movs	r1, r2
 8014072:	0018      	movs	r0, r3
 8014074:	f000 f9d4 	bl	8014420 <_ux_utility_memory_free_block_best_get>
 8014078:	0003      	movs	r3, r0
 801407a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 801407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10c      	bne.n	801409c <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014082:	4b6b      	ldr	r3, [pc, #428]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	331c      	adds	r3, #28
 8014088:	0018      	movs	r0, r3
 801408a:	f000 fa40 	bl	801450e <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 801408e:	2212      	movs	r2, #18
 8014090:	2108      	movs	r1, #8
 8014092:	2002      	movs	r0, #2
 8014094:	f7ff fe22 	bl	8013cdc <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8014098:	2300      	movs	r3, #0
 801409a:	e0c5      	b.n	8014228 <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 801409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409e:	3310      	adds	r3, #16
 80140a0:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	3b01      	subs	r3, #1
 80140a6:	6a3a      	ldr	r2, [r7, #32]
 80140a8:	4013      	ands	r3, r2
 80140aa:	d127      	bne.n	80140fc <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	3310      	adds	r3, #16
 80140b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140b2:	18d3      	adds	r3, r2, r3
 80140b4:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 80140b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b8:	689a      	ldr	r2, [r3, #8]
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140c2:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80140c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	3b10      	subs	r3, #16
 80140ce:	001a      	movs	r2, r3
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	2200      	movs	r2, #0
 80140d8:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 80140da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	69fa      	ldr	r2, [r7, #28]
 80140e4:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	2280      	movs	r2, #128	; 0x80
 80140ea:	0612      	lsls	r2, r2, #24
 80140ec:	431a      	orrs	r2, r3
 80140ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f0:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80140f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	3310      	adds	r3, #16
 80140f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80140fa:	e05f      	b.n	80141bc <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 80140fc:	6a3b      	ldr	r3, [r7, #32]
 80140fe:	3310      	adds	r3, #16
 8014100:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 8014102:	68fa      	ldr	r2, [r7, #12]
 8014104:	6a3b      	ldr	r3, [r7, #32]
 8014106:	18d3      	adds	r3, r2, r3
 8014108:	3b01      	subs	r3, #1
 801410a:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	425a      	negs	r2, r3
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	4013      	ands	r3, r2
 8014114:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	3b10      	subs	r3, #16
 801411a:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014120:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	689a      	ldr	r2, [r3, #8]
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 801412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	2280      	movs	r2, #128	; 0x80
 8014136:	0612      	lsls	r2, r2, #24
 8014138:	431a      	orrs	r2, r3
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 801413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014140:	3310      	adds	r3, #16
 8014142:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8014144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014146:	69fa      	ldr	r2, [r7, #28]
 8014148:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 801414a:	69fa      	ldr	r2, [r7, #28]
 801414c:	6a3b      	ldr	r3, [r7, #32]
 801414e:	1ad2      	subs	r2, r2, r3
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	681a      	ldr	r2, [r3, #0]
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	3b10      	subs	r3, #16
 8014160:	001a      	movs	r2, r3
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 8014166:	69fb      	ldr	r3, [r7, #28]
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	1ad3      	subs	r3, r2, r3
 801416e:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	2b10      	cmp	r3, #16
 8014174:	d91c      	bls.n	80141b0 <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8014176:	69fa      	ldr	r2, [r7, #28]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	18d3      	adds	r3, r2, r3
 801417c:	3310      	adds	r3, #16
 801417e:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	689a      	ldr	r2, [r3, #8]
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	69fa      	ldr	r2, [r7, #28]
 801418c:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	3b10      	subs	r3, #16
 8014192:	001a      	movs	r2, r3
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2200      	movs	r2, #0
 801419c:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	697a      	ldr	r2, [r7, #20]
 80141a2:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	1ad2      	subs	r2, r2, r3
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	3310      	adds	r3, #16
 80141b6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	3310      	adds	r3, #16
 80141c0:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	2100      	movs	r1, #0
 80141c8:	0018      	movs	r0, r3
 80141ca:	f000 f969 	bl	80144a0 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80141ce:	4b18      	ldr	r3, [pc, #96]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	68da      	ldr	r2, [r3, #12]
 80141d4:	4b16      	ldr	r3, [pc, #88]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d108      	bne.n	80141f0 <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 80141de:	4b14      	ldr	r3, [pc, #80]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	6899      	ldr	r1, [r3, #8]
 80141e4:	4b12      	ldr	r3, [pc, #72]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141ea:	1a8a      	subs	r2, r1, r2
 80141ec:	609a      	str	r2, [r3, #8]
 80141ee:	e014      	b.n	801421a <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d108      	bne.n	8014208 <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 80141f6:	4b0e      	ldr	r3, [pc, #56]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	6959      	ldr	r1, [r3, #20]
 80141fc:	4b0c      	ldr	r3, [pc, #48]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014202:	1a8a      	subs	r2, r1, r2
 8014204:	615a      	str	r2, [r3, #20]

            break;
 8014206:	e008      	b.n	801421a <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8014208:	4b09      	ldr	r3, [pc, #36]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	6899      	ldr	r1, [r3, #8]
 801420e:	4b08      	ldr	r3, [pc, #32]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014214:	1a8a      	subs	r2, r1, r2
 8014216:	609a      	str	r2, [r3, #8]
            break;
 8014218:	46c0      	nop			; (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 801421a:	4b05      	ldr	r3, [pc, #20]	; (8014230 <_ux_utility_memory_allocate+0x20c>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	331c      	adds	r3, #28
 8014220:	0018      	movs	r0, r3
 8014222:	f000 f974 	bl	801450e <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 8014226:	693b      	ldr	r3, [r7, #16]
}                                
 8014228:	0018      	movs	r0, r3
 801422a:	46bd      	mov	sp, r7
 801422c:	b00c      	add	sp, #48	; 0x30
 801422e:	bd80      	pop	{r7, pc}
 8014230:	20008dbc 	.word	0x20008dbc

08014234 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8014234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014236:	b085      	sub	sp, #20
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
 8014240:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d024      	beq.n	8014292 <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8014248:	2000      	movs	r0, #0
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	0c19      	lsrs	r1, r3, #16
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	1c1e      	adds	r6, r3, #0
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	0c1b      	lsrs	r3, r3, #16
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	1c15      	adds	r5, r2, #0
 801425a:	b28a      	uxth	r2, r1
 801425c:	2a00      	cmp	r2, #0
 801425e:	d105      	bne.n	801426c <_ux_utility_memory_allocate_mulc_safe+0x38>
 8014260:	b29a      	uxth	r2, r3
 8014262:	2a00      	cmp	r2, #0
 8014264:	d013      	beq.n	801428e <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8014266:	1c19      	adds	r1, r3, #0
 8014268:	1c34      	adds	r4, r6, #0
 801426a:	e003      	b.n	8014274 <_ux_utility_memory_allocate_mulc_safe+0x40>
 801426c:	b29b      	uxth	r3, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	d10c      	bne.n	801428c <_ux_utility_memory_allocate_mulc_safe+0x58>
 8014272:	1c2c      	adds	r4, r5, #0
 8014274:	b2b3      	uxth	r3, r6
 8014276:	b2aa      	uxth	r2, r5
 8014278:	435a      	muls	r2, r3
 801427a:	b2a3      	uxth	r3, r4
 801427c:	b289      	uxth	r1, r1
 801427e:	434b      	muls	r3, r1
 8014280:	0c12      	lsrs	r2, r2, #16
 8014282:	189b      	adds	r3, r3, r2
 8014284:	141b      	asrs	r3, r3, #16
 8014286:	b29b      	uxth	r3, r3
 8014288:	2b00      	cmp	r3, #0
 801428a:	d000      	beq.n	801428e <_ux_utility_memory_allocate_mulc_safe+0x5a>
 801428c:	2001      	movs	r0, #1
 801428e:	1e03      	subs	r3, r0, #0
 8014290:	d109      	bne.n	80142a6 <_ux_utility_memory_allocate_mulc_safe+0x72>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	683a      	ldr	r2, [r7, #0]
 8014296:	435a      	muls	r2, r3
 8014298:	68b9      	ldr	r1, [r7, #8]
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	0018      	movs	r0, r3
 801429e:	f7ff fec1 	bl	8014024 <_ux_utility_memory_allocate>
 80142a2:	0003      	movs	r3, r0
 80142a4:	e000      	b.n	80142a8 <_ux_utility_memory_allocate_mulc_safe+0x74>
 80142a6:	2300      	movs	r3, #0
}
 80142a8:	0018      	movs	r0, r3
 80142aa:	46bd      	mov	sp, r7
 80142ac:	b005      	add	sp, #20
 80142ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142b0 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b086      	sub	sp, #24
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	60f8      	str	r0, [r7, #12]
 80142b8:	60b9      	str	r1, [r7, #8]
 80142ba:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 80142c4:	e007      	b.n	80142d6 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 80142c6:	697a      	ldr	r2, [r7, #20]
 80142c8:	1c53      	adds	r3, r2, #1
 80142ca:	617b      	str	r3, [r7, #20]
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	1c59      	adds	r1, r3, #1
 80142d0:	6139      	str	r1, [r7, #16]
 80142d2:	7812      	ldrb	r2, [r2, #0]
 80142d4:	701a      	strb	r2, [r3, #0]
    while(length--)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	1e5a      	subs	r2, r3, #1
 80142da:	607a      	str	r2, [r7, #4]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d1f2      	bne.n	80142c6 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 80142e0:	46c0      	nop			; (mov r8, r8)
}
 80142e2:	46bd      	mov	sp, r7
 80142e4:	b006      	add	sp, #24
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b086      	sub	sp, #24
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 80142f0:	4b49      	ldr	r3, [pc, #292]	; (8014418 <_ux_utility_memory_free+0x130>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	331c      	adds	r3, #28
 80142f6:	0018      	movs	r0, r3
 80142f8:	f000 f915 	bl	8014526 <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3b10      	subs	r3, #16
 8014300:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	3310      	adds	r3, #16
 8014308:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	685a      	ldr	r2, [r3, #4]
 801430e:	2380      	movs	r3, #128	; 0x80
 8014310:	061b      	lsls	r3, r3, #24
 8014312:	429a      	cmp	r2, r3
 8014314:	d010      	beq.n	8014338 <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 801431a:	4a40      	ldr	r2, [pc, #256]	; (801441c <_ux_utility_memory_free+0x134>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d00b      	beq.n	8014338 <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014320:	4b3d      	ldr	r3, [pc, #244]	; (8014418 <_ux_utility_memory_free+0x130>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	331c      	adds	r3, #28
 8014326:	0018      	movs	r0, r3
 8014328:	f000 f8f1 	bl	801450e <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 801432c:	2219      	movs	r2, #25
 801432e:	2108      	movs	r1, #8
 8014330:	2002      	movs	r0, #2
 8014332:	f7ff fcd3 	bl	8013cdc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 8014336:	e06c      	b.n	8014412 <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	2200      	movs	r2, #0
 801433c:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 801433e:	e007      	b.n	8014350 <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d107      	bne.n	801435a <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d1f3      	bne.n	8014340 <_ux_utility_memory_free+0x58>
 8014358:	e000      	b.n	801435c <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 801435a:	46c0      	nop			; (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8014362:	e01a      	b.n	801439a <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d006      	beq.n	801437a <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	693a      	ldr	r2, [r7, #16]
 8014370:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	697a      	ldr	r2, [r7, #20]
 8014376:	60da      	str	r2, [r3, #12]
            break;
 8014378:	e012      	b.n	80143a0 <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	689a      	ldr	r2, [r3, #8]
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	681a      	ldr	r2, [r3, #0]
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	18d3      	adds	r3, r2, r3
 801438c:	3310      	adds	r3, #16
 801438e:	001a      	movs	r2, r3
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d1e1      	bne.n	8014364 <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80143a0:	4b1d      	ldr	r3, [pc, #116]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	68da      	ldr	r2, [r3, #12]
 80143a6:	4b1c      	ldr	r3, [pc, #112]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d108      	bne.n	80143c2 <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 80143b0:	4b19      	ldr	r3, [pc, #100]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	6899      	ldr	r1, [r3, #8]
 80143b6:	4b18      	ldr	r3, [pc, #96]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	68fa      	ldr	r2, [r7, #12]
 80143bc:	188a      	adds	r2, r1, r2
 80143be:	609a      	str	r2, [r3, #8]
 80143c0:	e020      	b.n	8014404 <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 80143c2:	4b15      	ldr	r3, [pc, #84]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 80143ca:	697a      	ldr	r2, [r7, #20]
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d310      	bcc.n	80143f4 <_ux_utility_memory_free+0x10c>
 80143d2:	4b11      	ldr	r3, [pc, #68]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	18d3      	adds	r3, r2, r3
 80143dc:	697a      	ldr	r2, [r7, #20]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d208      	bcs.n	80143f4 <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 80143e2:	4b0d      	ldr	r3, [pc, #52]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	6899      	ldr	r1, [r3, #8]
 80143e8:	4b0b      	ldr	r3, [pc, #44]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	188a      	adds	r2, r1, r2
 80143f0:	609a      	str	r2, [r3, #8]
 80143f2:	e007      	b.n	8014404 <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 80143f4:	4b08      	ldr	r3, [pc, #32]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	6959      	ldr	r1, [r3, #20]
 80143fa:	4b07      	ldr	r3, [pc, #28]	; (8014418 <_ux_utility_memory_free+0x130>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	68fa      	ldr	r2, [r7, #12]
 8014400:	188a      	adds	r2, r1, r2
 8014402:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8014404:	4b04      	ldr	r3, [pc, #16]	; (8014418 <_ux_utility_memory_free+0x130>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	331c      	adds	r3, #28
 801440a:	0018      	movs	r0, r3
 801440c:	f000 f87f 	bl	801450e <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 8014410:	46c0      	nop			; (mov r8, r8)
}
 8014412:	46bd      	mov	sp, r7
 8014414:	b006      	add	sp, #24
 8014416:	bd80      	pop	{r7, pc}
 8014418:	20008dbc 	.word	0x20008dbc
 801441c:	80000001 	.word	0x80000001

08014420 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 801442a:	2300      	movs	r3, #0
 801442c:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d003      	beq.n	801443c <_ux_utility_memory_free_block_best_get+0x1c>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d005      	beq.n	8014446 <_ux_utility_memory_free_block_best_get+0x26>
 801443a:	e009      	b.n	8014450 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 801443c:	4b17      	ldr	r3, [pc, #92]	; (801449c <_ux_utility_memory_free_block_best_get+0x7c>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	60fb      	str	r3, [r7, #12]
            break;
 8014444:	e006      	b.n	8014454 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 8014446:	4b15      	ldr	r3, [pc, #84]	; (801449c <_ux_utility_memory_free_block_best_get+0x7c>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	60fb      	str	r3, [r7, #12]
            break;
 801444e:	e001      	b.n	8014454 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8014450:	2300      	movs	r3, #0
 8014452:	e01e      	b.n	8014492 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 8014454:	e019      	b.n	801448a <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d112      	bne.n	8014484 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	429a      	cmp	r2, r3
 8014466:	d20d      	bcs.n	8014484 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d102      	bne.n	8014474 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	60bb      	str	r3, [r7, #8]
 8014472:	e007      	b.n	8014484 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	429a      	cmp	r2, r3
 801447e:	d201      	bcs.n	8014484 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d1e2      	bne.n	8014456 <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 8014490:	68bb      	ldr	r3, [r7, #8]
}                                
 8014492:	0018      	movs	r0, r3
 8014494:	46bd      	mov	sp, r7
 8014496:	b004      	add	sp, #16
 8014498:	bd80      	pop	{r7, pc}
 801449a:	46c0      	nop			; (mov r8, r8)
 801449c:	20008dbc 	.word	0x20008dbc

080144a0 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	607a      	str	r2, [r7, #4]
 80144aa:	230b      	movs	r3, #11
 80144ac:	18fb      	adds	r3, r7, r3
 80144ae:	1c0a      	adds	r2, r1, #0
 80144b0:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 80144b6:	e006      	b.n	80144c6 <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	617a      	str	r2, [r7, #20]
 80144be:	220b      	movs	r2, #11
 80144c0:	18ba      	adds	r2, r7, r2
 80144c2:	7812      	ldrb	r2, [r2, #0]
 80144c4:	701a      	strb	r2, [r3, #0]
    while(length--)
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	1e5a      	subs	r2, r3, #1
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d1f3      	bne.n	80144b8 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 80144d0:	46c0      	nop			; (mov r8, r8)
}
 80144d2:	46bd      	mov	sp, r7
 80144d4:	b006      	add	sp, #24
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 80144e2:	6839      	ldr	r1, [r7, #0]
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	2334      	movs	r3, #52	; 0x34
 80144e8:	2200      	movs	r2, #0
 80144ea:	f7fc ff73 	bl	80113d4 <_txe_mutex_create>
 80144ee:	0003      	movs	r3, r0
 80144f0:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d005      	beq.n	8014504 <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	001a      	movs	r2, r3
 80144fc:	2108      	movs	r1, #8
 80144fe:	2002      	movs	r0, #2
 8014500:	f7ff fbec 	bl	8013cdc <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8014504:	68fb      	ldr	r3, [r7, #12]
}
 8014506:	0018      	movs	r0, r3
 8014508:	46bd      	mov	sp, r7
 801450a:	b004      	add	sp, #16
 801450c:	bd80      	pop	{r7, pc}

0801450e <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b082      	sub	sp, #8
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	0018      	movs	r0, r3
 801451a:	f7fd f857 	bl	80115cc <_txe_mutex_put>

    /* Return to caller.  */
    return;
 801451e:	46c0      	nop			; (mov r8, r8)
}
 8014520:	46bd      	mov	sp, r7
 8014522:	b002      	add	sp, #8
 8014524:	bd80      	pop	{r7, pc}

08014526 <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b084      	sub	sp, #16
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 801452e:	2301      	movs	r3, #1
 8014530:	425a      	negs	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	0011      	movs	r1, r2
 8014536:	0018      	movs	r0, r3
 8014538:	f7fc ffea 	bl	8011510 <_txe_mutex_get>
 801453c:	0003      	movs	r3, r0
 801453e:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d006      	beq.n	8014554 <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	001a      	movs	r2, r3
 801454a:	2108      	movs	r1, #8
 801454c:	2002      	movs	r0, #2
 801454e:	f7ff fbc5 	bl	8013cdc <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 8014552:	46c0      	nop			; (mov r8, r8)
 8014554:	46c0      	nop			; (mov r8, r8)
}
 8014556:	46bd      	mov	sp, r7
 8014558:	b004      	add	sp, #16
 801455a:	bd80      	pop	{r7, pc}

0801455c <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b086      	sub	sp, #24
 8014560:	af00      	add	r7, sp, #0
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	60b9      	str	r1, [r7, #8]
 8014566:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	68b9      	ldr	r1, [r7, #8]
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	231c      	movs	r3, #28
 8014570:	f7fd f9b0 	bl	80118d4 <_txe_semaphore_create>
 8014574:	0003      	movs	r3, r0
 8014576:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d005      	beq.n	801458a <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	001a      	movs	r2, r3
 8014582:	2108      	movs	r1, #8
 8014584:	2002      	movs	r0, #2
 8014586:	f7ff fba9 	bl	8013cdc <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 801458a:	697b      	ldr	r3, [r7, #20]
}
 801458c:	0018      	movs	r0, r3
 801458e:	46bd      	mov	sp, r7
 8014590:	b006      	add	sp, #24
 8014592:	bd80      	pop	{r7, pc}

08014594 <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	0018      	movs	r0, r3
 80145a0:	f7fd fa2e 	bl	8011a00 <_txe_semaphore_delete>
 80145a4:	0003      	movs	r3, r0
 80145a6:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 80145a8:	68fb      	ldr	r3, [r7, #12]
}
 80145aa:	0018      	movs	r0, r3
 80145ac:	46bd      	mov	sp, r7
 80145ae:	b004      	add	sp, #16
 80145b0:	bd80      	pop	{r7, pc}
	...

080145b4 <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 80145b4:	b590      	push	{r4, r7, lr}
 80145b6:	b093      	sub	sp, #76	; 0x4c
 80145b8:	af06      	add	r7, sp, #24
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 80145be:	f7fb fbf9 	bl	800fdb4 <_tx_thread_identify>
 80145c2:	0003      	movs	r3, r0
 80145c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 80145c6:	231c      	movs	r3, #28
 80145c8:	18fc      	adds	r4, r7, r3
 80145ca:	2320      	movs	r3, #32
 80145cc:	18fa      	adds	r2, r7, r3
 80145ce:	2324      	movs	r3, #36	; 0x24
 80145d0:	18f9      	adds	r1, r7, r3
 80145d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145d4:	2308      	movs	r3, #8
 80145d6:	18fb      	adds	r3, r7, r3
 80145d8:	9304      	str	r3, [sp, #16]
 80145da:	230c      	movs	r3, #12
 80145dc:	18fb      	adds	r3, r7, r3
 80145de:	9303      	str	r3, [sp, #12]
 80145e0:	2310      	movs	r3, #16
 80145e2:	18fb      	adds	r3, r7, r3
 80145e4:	9302      	str	r3, [sp, #8]
 80145e6:	2314      	movs	r3, #20
 80145e8:	18fb      	adds	r3, r7, r3
 80145ea:	9301      	str	r3, [sp, #4]
 80145ec:	2318      	movs	r3, #24
 80145ee:	18fb      	adds	r3, r7, r3
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	0023      	movs	r3, r4
 80145f4:	f7fd fbc4 	bl	8011d80 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 80145f8:	4b0b      	ldr	r3, [pc, #44]	; (8014628 <_ux_utility_semaphore_get+0x74>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	699a      	ldr	r2, [r3, #24]
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	429a      	cmp	r2, r3
 8014602:	d203      	bcs.n	801460c <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8014604:	4b08      	ldr	r3, [pc, #32]	; (8014628 <_ux_utility_semaphore_get+0x74>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	69ba      	ldr	r2, [r7, #24]
 801460a:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 801460c:	683a      	ldr	r2, [r7, #0]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	0011      	movs	r1, r2
 8014612:	0018      	movs	r0, r3
 8014614:	f7fd fa32 	bl	8011a7c <_txe_semaphore_get>
 8014618:	0003      	movs	r3, r0
 801461a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 801461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801461e:	0018      	movs	r0, r3
 8014620:	46bd      	mov	sp, r7
 8014622:	b00d      	add	sp, #52	; 0x34
 8014624:	bd90      	pop	{r4, r7, pc}
 8014626:	46c0      	nop			; (mov r8, r8)
 8014628:	20008dbc 	.word	0x20008dbc

0801462c <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	0018      	movs	r0, r3
 8014638:	f7fd fa64 	bl	8011b04 <_txe_semaphore_put>
 801463c:	0003      	movs	r3, r0
 801463e:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8014640:	68fb      	ldr	r3, [r7, #12]
}
 8014642:	0018      	movs	r0, r3
 8014644:	46bd      	mov	sp, r7
 8014646:	b004      	add	sp, #16
 8014648:	bd80      	pop	{r7, pc}

0801464a <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b084      	sub	sp, #16
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	607a      	str	r2, [r7, #4]
 8014658:	781a      	ldrb	r2, [r3, #0]
 801465a:	200e      	movs	r0, #14
 801465c:	183b      	adds	r3, r7, r0
 801465e:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	b29b      	uxth	r3, r3
 8014666:	021b      	lsls	r3, r3, #8
 8014668:	b299      	uxth	r1, r3
 801466a:	183b      	adds	r3, r7, r0
 801466c:	183a      	adds	r2, r7, r0
 801466e:	8812      	ldrh	r2, [r2, #0]
 8014670:	430a      	orrs	r2, r1
 8014672:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8014674:	183b      	adds	r3, r7, r0
 8014676:	881b      	ldrh	r3, [r3, #0]
}
 8014678:	0018      	movs	r0, r3
 801467a:	46bd      	mov	sp, r7
 801467c:	b004      	add	sp, #16
 801467e:	bd80      	pop	{r7, pc}

08014680 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d101      	bne.n	8014696 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8014692:	23ff      	movs	r3, #255	; 0xff
 8014694:	e01d      	b.n	80146d2 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8014696:	2300      	movs	r3, #0
 8014698:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	18d3      	adds	r3, r2, r3
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00d      	beq.n	80146c2 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	3301      	adds	r3, #1
 80146aa:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 80146ac:	697a      	ldr	r2, [r7, #20]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d9f2      	bls.n	801469a <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 80146b4:	22ff      	movs	r2, #255	; 0xff
 80146b6:	2108      	movs	r1, #8
 80146b8:	2002      	movs	r0, #2
 80146ba:	f7ff fb0f 	bl	8013cdc <_ux_system_error_handler>

            return(UX_ERROR);
 80146be:	23ff      	movs	r3, #255	; 0xff
 80146c0:	e007      	b.n	80146d2 <_ux_utility_string_length_check+0x52>
            break;
 80146c2:	46c0      	nop			; (mov r8, r8)
        }
    }

    if (string_length_ptr)
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d002      	beq.n	80146d0 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	697a      	ldr	r2, [r7, #20]
 80146ce:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	0018      	movs	r0, r3
 80146d4:	46bd      	mov	sp, r7
 80146d6:	b006      	add	sp, #24
 80146d8:	bd80      	pop	{r7, pc}

080146da <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 80146da:	b590      	push	{r4, r7, lr}
 80146dc:	b08f      	sub	sp, #60	; 0x3c
 80146de:	af08      	add	r7, sp, #32
 80146e0:	60f8      	str	r0, [r7, #12]
 80146e2:	60b9      	str	r1, [r7, #8]
 80146e4:	607a      	str	r2, [r7, #4]
 80146e6:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 80146e8:	683c      	ldr	r4, [r7, #0]
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	23b0      	movs	r3, #176	; 0xb0
 80146f2:	9306      	str	r3, [sp, #24]
 80146f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146f6:	9305      	str	r3, [sp, #20]
 80146f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fa:	9304      	str	r3, [sp, #16]
 80146fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146fe:	9303      	str	r3, [sp, #12]
 8014700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014702:	9302      	str	r3, [sp, #8]
 8014704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	0023      	movs	r3, r4
 801470e:	f7fd fa19 	bl	8011b44 <_txe_thread_create>
 8014712:	0003      	movs	r3, r0
 8014714:	617b      	str	r3, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d005      	beq.n	8014728 <_ux_utility_thread_create+0x4e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	001a      	movs	r2, r3
 8014720:	2108      	movs	r1, #8
 8014722:	2002      	movs	r0, #2
 8014724:	f7ff fada 	bl	8013cdc <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8014728:	697b      	ldr	r3, [r7, #20]
}
 801472a:	0018      	movs	r0, r3
 801472c:	46bd      	mov	sp, r7
 801472e:	b007      	add	sp, #28
 8014730:	bd90      	pop	{r4, r7, pc}

08014732 <_ux_utility_thread_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b084      	sub	sp, #16
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	0018      	movs	r0, r3
 801473e:	f7fd fb8f 	bl	8011e60 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	0018      	movs	r0, r3
 8014746:	f7fd faef 	bl	8011d28 <_txe_thread_delete>
 801474a:	0003      	movs	r3, r0
 801474c:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801474e:	68fb      	ldr	r3, [r7, #12]
}
 8014750:	0018      	movs	r0, r3
 8014752:	46bd      	mov	sp, r7
 8014754:	b004      	add	sp, #16
 8014756:	bd80      	pop	{r7, pc}

08014758 <_ux_utility_thread_resume>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	0018      	movs	r0, r3
 8014764:	f7fd fb3c 	bl	8011de0 <_txe_thread_resume>
 8014768:	0003      	movs	r3, r0
 801476a:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801476c:	68fb      	ldr	r3, [r7, #12]
}
 801476e:	0018      	movs	r0, r3
 8014770:	46bd      	mov	sp, r7
 8014772:	b004      	add	sp, #16
 8014774:	bd80      	pop	{r7, pc}

08014776 <_ux_utility_thread_suspend>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 8014776:	b580      	push	{r7, lr}
 8014778:	b084      	sub	sp, #16
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	0018      	movs	r0, r3
 8014782:	f7fd fb4d 	bl	8011e20 <_txe_thread_suspend>
 8014786:	0003      	movs	r3, r0
 8014788:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801478a:	68fb      	ldr	r3, [r7, #12]
}
 801478c:	0018      	movs	r0, r3
 801478e:	46bd      	mov	sp, r7
 8014790:	b004      	add	sp, #16
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ux_device_class_hid_activate>:
/*                                            added packet size assert,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b088      	sub	sp, #32
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_inst;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 801479c:	2300      	movs	r3, #0
 801479e:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	6a1b      	ldr	r3, [r3, #32]
 80147a4:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_inst -> ux_slave_class_instance;
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147aa:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	689b      	ldr	r3, [r3, #8]
 80147b0:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)hid;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	693a      	ldr	r2, [r7, #16]
 80147b6:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface;
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface -> ux_slave_interface_first_endpoint;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147c2:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 80147c4:	e010      	b.n	80147e8 <_ux_device_class_hid_activate+0x54>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	699b      	ldr	r3, [r3, #24]
 80147ca:	2203      	movs	r2, #3
 80147cc:	4013      	ands	r3, r2
 80147ce:	2b03      	cmp	r3, #3
 80147d0:	d107      	bne.n	80147e2 <_ux_device_class_hid_activate+0x4e>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	695b      	ldr	r3, [r3, #20]
 80147d6:	2280      	movs	r2, #128	; 0x80
 80147d8:	4013      	ands	r3, r2
 80147da:	d002      	beq.n	80147e2 <_ux_device_class_hid_activate+0x4e>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 80147e0:	e005      	b.n	80147ee <_ux_device_class_hid_activate+0x5a>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e6:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d1eb      	bne.n	80147c6 <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d101      	bne.n	80147f8 <_ux_device_class_hid_activate+0x64>
        return (UX_ERROR);
 80147f4:	23ff      	movs	r3, #255	; 0xff
 80147f6:	e014      	b.n	8014822 <_ux_device_class_hid_activate+0x8e>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	2201      	movs	r2, #1
 80147fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	69ba      	ldr	r2, [r7, #24]
 8014802:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread);
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	3350      	adds	r3, #80	; 0x50
 8014808:	0018      	movs	r0, r3
 801480a:	f7ff ffa5 	bl	8014758 <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	695b      	ldr	r3, [r3, #20]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d004      	beq.n	8014820 <_ux_device_class_hid_activate+0x8c>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	695b      	ldr	r3, [r3, #20]
 801481a:	693a      	ldr	r2, [r7, #16]
 801481c:	0010      	movs	r0, r2
 801481e:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8014820:	2300      	movs	r3, #0
}
 8014822:	0018      	movs	r0, r3
 8014824:	46bd      	mov	sp, r7
 8014826:	b008      	add	sp, #32
 8014828:	bd80      	pop	{r7, pc}
	...

0801482c <_ux_device_class_hid_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b08c      	sub	sp, #48	; 0x30
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014834:	4b5a      	ldr	r3, [pc, #360]	; (80149a0 <_ux_device_class_hid_control_request+0x174>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	3320      	adds	r3, #32
 801483a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483e:	336c      	adds	r3, #108	; 0x6c
 8014840:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8014842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014844:	2255      	movs	r2, #85	; 0x55
 8014846:	5c9b      	ldrb	r3, [r3, r2]
 8014848:	627b      	str	r3, [r7, #36]	; 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	3354      	adds	r3, #84	; 0x54
 801484e:	3302      	adds	r3, #2
 8014850:	0018      	movs	r0, r3
 8014852:	f7ff fefa 	bl	801464a <_ux_utility_short_get>
 8014856:	0003      	movs	r3, r0
 8014858:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 801485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485c:	3354      	adds	r3, #84	; 0x54
 801485e:	3304      	adds	r3, #4
 8014860:	0018      	movs	r0, r3
 8014862:	f7ff fef2 	bl	801464a <_ux_utility_short_get>
 8014866:	0003      	movs	r3, r0
 8014868:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	3354      	adds	r3, #84	; 0x54
 801486e:	3306      	adds	r3, #6
 8014870:	0018      	movs	r0, r3
 8014872:	f7ff feea 	bl	801464a <_ux_utility_short_get>
 8014876:	0003      	movs	r3, r0
 8014878:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801487a:	2317      	movs	r3, #23
 801487c:	18fb      	adds	r3, r7, r3
 801487e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014880:	2157      	movs	r1, #87	; 0x57
 8014882:	5c52      	ldrb	r2, [r2, r1]
 8014884:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6a1b      	ldr	r3, [r3, #32]
 801488a:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014890:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8014892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014894:	2b0b      	cmp	r3, #11
 8014896:	d900      	bls.n	801489a <_ux_device_class_hid_control_request+0x6e>
 8014898:	e079      	b.n	801498e <_ux_device_class_hid_control_request+0x162>
 801489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801489c:	009a      	lsls	r2, r3, #2
 801489e:	4b41      	ldr	r3, [pc, #260]	; (80149a4 <_ux_device_class_hid_control_request+0x178>)
 80148a0:	18d3      	adds	r3, r2, r3
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	69fa      	ldr	r2, [r7, #28]
 80148aa:	6a39      	ldr	r1, [r7, #32]
 80148ac:	68f8      	ldr	r0, [r7, #12]
 80148ae:	f000 fbbf 	bl	8015030 <_ux_device_class_hid_report_get>
            break;
 80148b2:	e06f      	b.n	8014994 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	0a1b      	lsrs	r3, r3, #8
 80148b8:	22ff      	movs	r2, #255	; 0xff
 80148ba:	4013      	ands	r3, r2
 80148bc:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	69fa      	ldr	r2, [r7, #28]
 80148c2:	68b9      	ldr	r1, [r7, #8]
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	f000 fc49 	bl	801515c <_ux_device_class_hid_report_set>
            break;
 80148ca:	e063      	b.n	8014994 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 80148cc:	69bb      	ldr	r3, [r7, #24]
 80148ce:	69fa      	ldr	r2, [r7, #28]
 80148d0:	6a39      	ldr	r1, [r7, #32]
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f000 f886 	bl	80149e4 <_ux_device_class_hid_descriptor_send>
            break;            
 80148d8:	e05c      	b.n	8014994 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	2b02      	cmp	r3, #2
 80148de:	d10c      	bne.n	80148fa <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	b2d2      	uxtb	r2, r2
 80148ea:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 80148ec:	69ba      	ldr	r2, [r7, #24]
 80148ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f0:	2101      	movs	r1, #1
 80148f2:	0018      	movs	r0, r3
 80148f4:	f7ff f96c 	bl	8013bd0 <_ux_device_stack_transfer_request>
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 80148f8:	e04b      	b.n	8014992 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	2117      	movs	r1, #23
 8014902:	187a      	adds	r2, r7, r1
 8014904:	7812      	ldrb	r2, [r2, #0]
 8014906:	429a      	cmp	r2, r3
 8014908:	d043      	beq.n	8014992 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 801490a:	187b      	adds	r3, r7, r1
 801490c:	781a      	ldrb	r2, [r3, #0]
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	64da      	str	r2, [r3, #76]	; 0x4c
                    if (duration == 0)
 8014912:	187b      	adds	r3, r7, r1
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d104      	bne.n	8014924 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2201      	movs	r2, #1
 801491e:	4252      	negs	r2, r2
 8014920:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 8014922:	e036      	b.n	8014992 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8014924:	2317      	movs	r3, #23
 8014926:	18fb      	adds	r3, r7, r3
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	0013      	movs	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	189b      	adds	r3, r3, r2
 8014930:	009a      	lsls	r2, r3, #2
 8014932:	189b      	adds	r3, r3, r2
 8014934:	011b      	lsls	r3, r3, #4
 8014936:	001a      	movs	r2, r3
 8014938:	23fa      	movs	r3, #250	; 0xfa
 801493a:	0099      	lsls	r1, r3, #2
 801493c:	0010      	movs	r0, r2
 801493e:	f7ee f817 	bl	8002970 <__udivsi3>
 8014942:	0003      	movs	r3, r0
 8014944:	001a      	movs	r2, r3
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	651a      	str	r2, [r3, #80]	; 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801494e:	2b00      	cmp	r3, #0
 8014950:	d104      	bne.n	801495c <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014956:	1c5a      	adds	r2, r3, #1
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	651a      	str	r2, [r3, #80]	; 0x50
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	3328      	adds	r3, #40	; 0x28
 8014960:	2200      	movs	r2, #0
 8014962:	2102      	movs	r1, #2
 8014964:	0018      	movs	r0, r3
 8014966:	f7ff fb26 	bl	8013fb6 <_ux_utility_event_flags_set>
            break;
 801496a:	e012      	b.n	8014992 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	b2d2      	uxtb	r2, r2
 8014976:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8014978:	69ba      	ldr	r2, [r7, #24]
 801497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801497c:	2101      	movs	r1, #1
 801497e:	0018      	movs	r0, r3
 8014980:	f7ff f926 	bl	8013bd0 <_ux_device_stack_transfer_request>
            break;
 8014984:	e006      	b.n	8014994 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	6a3a      	ldr	r2, [r7, #32]
 801498a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 801498c:	e002      	b.n	8014994 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 801498e:	23ff      	movs	r3, #255	; 0xff
 8014990:	e001      	b.n	8014996 <_ux_device_class_hid_control_request+0x16a>
            break;
 8014992:	46c0      	nop			; (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8014994:	2300      	movs	r3, #0
}
 8014996:	0018      	movs	r0, r3
 8014998:	46bd      	mov	sp, r7
 801499a:	b00c      	add	sp, #48	; 0x30
 801499c:	bd80      	pop	{r7, pc}
 801499e:	46c0      	nop			; (mov r8, r8)
 80149a0:	20008db8 	.word	0x20008db8
 80149a4:	080185cc 	.word	0x080185cc

080149a8 <_ux_device_class_hid_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6a1b      	ldr	r3, [r3, #32]
 80149b4:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149ba:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	2126      	movs	r1, #38	; 0x26
 80149c2:	0018      	movs	r0, r3
 80149c4:	f7ff f8f0 	bl	8013ba8 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	699b      	ldr	r3, [r3, #24]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d004      	beq.n	80149da <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	0010      	movs	r0, r2
 80149d8:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80149da:	2300      	movs	r3, #0
}
 80149dc:	0018      	movs	r0, r3
 80149de:	46bd      	mov	sp, r7
 80149e0:	b004      	add	sp, #16
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08e      	sub	sp, #56	; 0x38
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	60b9      	str	r1, [r7, #8]
 80149ee:	607a      	str	r2, [r7, #4]
 80149f0:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 80149f2:	23ff      	movs	r3, #255	; 0xff
 80149f4:	633b      	str	r3, [r7, #48]	; 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 80149f6:	232b      	movs	r3, #43	; 0x2b
 80149f8:	18fb      	adds	r3, r7, r3
 80149fa:	22ff      	movs	r2, #255	; 0xff
 80149fc:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80149fe:	4b61      	ldr	r3, [pc, #388]	; (8014b84 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014a04:	4b5f      	ldr	r3, [pc, #380]	; (8014b84 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	3320      	adds	r3, #32
 8014a0a:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014a0c:	6a3b      	ldr	r3, [r7, #32]
 8014a0e:	333c      	adds	r3, #60	; 0x3c
 8014a10:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	3330      	adds	r3, #48	; 0x30
 8014a16:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	2203      	movs	r2, #3
 8014a1c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	0a1b      	lsrs	r3, r3, #8
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	2b21      	cmp	r3, #33	; 0x21
 8014a2a:	d003      	beq.n	8014a34 <_ux_device_class_hid_descriptor_send+0x50>
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	2b22      	cmp	r3, #34	; 0x22
 8014a30:	d069      	beq.n	8014b06 <_ux_device_class_hid_descriptor_send+0x122>
 8014a32:	e098      	b.n	8014b66 <_ux_device_class_hid_descriptor_send+0x182>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8014a34:	4b53      	ldr	r3, [pc, #332]	; (8014b84 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	2394      	movs	r3, #148	; 0x94
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	58d3      	ldr	r3, [r2, r3]
 8014a3e:	637b      	str	r3, [r7, #52]	; 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8014a40:	4b50      	ldr	r3, [pc, #320]	; (8014b84 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	2396      	movs	r3, #150	; 0x96
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	58d3      	ldr	r3, [r2, r3]
 8014a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a4c:	18d3      	adds	r3, r2, r3
 8014a4e:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8014a50:	e048      	b.n	8014ae4 <_ux_device_class_hid_descriptor_send+0x100>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8014a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a54:	3301      	adds	r3, #1
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 8014a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	2b04      	cmp	r3, #4
 8014a64:	d104      	bne.n	8014a70 <_ux_device_class_hid_descriptor_send+0x8c>
                interface_number = *(device_framework + 2);
 8014a66:	232b      	movs	r3, #43	; 0x2b
 8014a68:	18fb      	adds	r3, r7, r3
 8014a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a6c:	7892      	ldrb	r2, [r2, #2]
 8014a6e:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	2b21      	cmp	r3, #33	; 0x21
 8014a74:	d132      	bne.n	8014adc <_ux_device_class_hid_descriptor_send+0xf8>
                (interface_number == (UCHAR)request_index))
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8014a7a:	222b      	movs	r2, #43	; 0x2b
 8014a7c:	18ba      	adds	r2, r7, r2
 8014a7e:	7812      	ldrb	r2, [r2, #0]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d12b      	bne.n	8014adc <_ux_device_class_hid_descriptor_send+0xf8>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 8014a84:	697a      	ldr	r2, [r7, #20]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d202      	bcs.n	8014a92 <_ux_device_class_hid_descriptor_send+0xae>
                    length =  descriptor_length;
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a90:	e001      	b.n	8014a96 <_ux_device_class_hid_descriptor_send+0xb2>
                else                            
                    length =  host_length;                
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a98:	2380      	movs	r3, #128	; 0x80
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d90d      	bls.n	8014abc <_ux_device_class_hid_descriptor_send+0xd8>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8014aa0:	2212      	movs	r2, #18
 8014aa2:	2107      	movs	r1, #7
 8014aa4:	2002      	movs	r0, #2
 8014aa6:	f7ff f919 	bl	8013cdc <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aac:	699b      	ldr	r3, [r3, #24]
 8014aae:	69fa      	ldr	r2, [r7, #28]
 8014ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ab2:	2114      	movs	r1, #20
 8014ab4:	4798      	blx	r3
 8014ab6:	0003      	movs	r3, r0
 8014ab8:	633b      	str	r3, [r7, #48]	; 0x30
                    break;
 8014aba:	e017      	b.n	8014aec <_ux_device_class_hid_descriptor_send+0x108>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	68db      	ldr	r3, [r3, #12]
 8014ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	f7ff fbf3 	bl	80142b0 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8014aca:	683a      	ldr	r2, [r7, #0]
 8014acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	0018      	movs	r0, r3
 8014ad2:	f7ff f87d 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8014ad6:	0003      	movs	r3, r0
 8014ad8:	633b      	str	r3, [r7, #48]	; 0x30
                break;
 8014ada:	e007      	b.n	8014aec <_ux_device_class_hid_descriptor_send+0x108>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8014adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	18d3      	adds	r3, r2, r3
 8014ae2:	637b      	str	r3, [r7, #52]	; 0x34
        while (device_framework < device_framework_end)
 8014ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d3b2      	bcc.n	8014a52 <_ux_device_class_hid_descriptor_send+0x6e>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8014aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d340      	bcc.n	8014b76 <_ux_device_class_hid_descriptor_send+0x192>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	699b      	ldr	r3, [r3, #24]
 8014af8:	69fa      	ldr	r2, [r7, #28]
 8014afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014afc:	2114      	movs	r1, #20
 8014afe:	4798      	blx	r3
 8014b00:	0003      	movs	r3, r0
 8014b02:	633b      	str	r3, [r7, #48]	; 0x30

        break;
 8014b04:	e037      	b.n	8014b76 <_ux_device_class_hid_descriptor_send+0x192>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b0a:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8014b0c:	697a      	ldr	r2, [r7, #20]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d202      	bcs.n	8014b1a <_ux_device_class_hid_descriptor_send+0x136>
            length =  descriptor_length;
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b18:	e001      	b.n	8014b1e <_ux_device_class_hid_descriptor_send+0x13a>
        else                            
            length =  host_length;                
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b20:	2380      	movs	r3, #128	; 0x80
 8014b22:	005b      	lsls	r3, r3, #1
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d90d      	bls.n	8014b44 <_ux_device_class_hid_descriptor_send+0x160>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8014b28:	2212      	movs	r2, #18
 8014b2a:	2107      	movs	r1, #7
 8014b2c:	2002      	movs	r0, #2
 8014b2e:	f7ff f8d5 	bl	8013cdc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	69fa      	ldr	r2, [r7, #28]
 8014b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b3a:	2114      	movs	r1, #20
 8014b3c:	4798      	blx	r3
 8014b3e:	0003      	movs	r3, r0
 8014b40:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 8014b42:	e019      	b.n	8014b78 <_ux_device_class_hid_descriptor_send+0x194>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8014b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b4e:	0019      	movs	r1, r3
 8014b50:	f7ff fbae 	bl	80142b0 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8014b54:	683a      	ldr	r2, [r7, #0]
 8014b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	0018      	movs	r0, r3
 8014b5c:	f7ff f838 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8014b60:	0003      	movs	r3, r0
 8014b62:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8014b64:	e008      	b.n	8014b78 <_ux_device_class_hid_descriptor_send+0x194>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b68:	699b      	ldr	r3, [r3, #24]
 8014b6a:	69fa      	ldr	r2, [r7, #28]
 8014b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b6e:	2114      	movs	r1, #20
 8014b70:	4798      	blx	r3
        return(UX_ERROR);
 8014b72:	23ff      	movs	r3, #255	; 0xff
 8014b74:	e001      	b.n	8014b7a <_ux_device_class_hid_descriptor_send+0x196>
        break;
 8014b76:	46c0      	nop			; (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8014b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8014b7a:	0018      	movs	r0, r3
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	b00e      	add	sp, #56	; 0x38
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	46c0      	nop			; (mov r8, r8)
 8014b84:	20008db8 	.word	0x20008db8

08014b88 <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b07      	cmp	r3, #7
 8014b96:	d834      	bhi.n	8014c02 <_ux_device_class_hid_entry+0x7a>
 8014b98:	009a      	lsls	r2, r3, #2
 8014b9a:	4b1c      	ldr	r3, [pc, #112]	; (8014c0c <_ux_device_class_hid_entry+0x84>)
 8014b9c:	18d3      	adds	r3, r2, r3
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	0018      	movs	r0, r3
 8014ba6:	f000 f8e7 	bl	8014d78 <_ux_device_class_hid_initialize>
 8014baa:	0003      	movs	r3, r0
 8014bac:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	e028      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	0018      	movs	r0, r3
 8014bb6:	f000 fb25 	bl	8015204 <_ux_device_class_hid_uninitialize>
 8014bba:	0003      	movs	r3, r0
 8014bbc:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	e020      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	695b      	ldr	r3, [r3, #20]
 8014bc6:	2b03      	cmp	r3, #3
 8014bc8:	d101      	bne.n	8014bce <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 8014bca:	2300      	movs	r3, #0
 8014bcc:	e01a      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 8014bce:	2357      	movs	r3, #87	; 0x57
 8014bd0:	e018      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	0018      	movs	r0, r3
 8014bd6:	f7ff fddd 	bl	8014794 <_ux_device_class_hid_activate>
 8014bda:	0003      	movs	r3, r0
 8014bdc:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	e010      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	0018      	movs	r0, r3
 8014be6:	f7ff fedf 	bl	80149a8 <_ux_device_class_hid_deactivate>
 8014bea:	0003      	movs	r3, r0
 8014bec:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	e008      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	0018      	movs	r0, r3
 8014bf6:	f7ff fe19 	bl	801482c <_ux_device_class_hid_control_request>
 8014bfa:	0003      	movs	r3, r0
 8014bfc:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	e000      	b.n	8014c04 <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8014c02:	2354      	movs	r3, #84	; 0x54
    }   
}
 8014c04:	0018      	movs	r0, r3
 8014c06:	46bd      	mov	sp, r7
 8014c08:	b004      	add	sp, #16
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	080185fc 	.word	0x080185fc

08014c10 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014c1a:	4b21      	ldr	r3, [pc, #132]	; (8014ca0 <_ux_device_class_hid_event_get+0x90>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3320      	adds	r3, #32
 8014c20:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b03      	cmp	r3, #3
 8014c28:	d001      	beq.n	8014c2e <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8014c2a:	2350      	movs	r3, #80	; 0x50
 8014c2c:	e033      	b.n	8014c96 <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (hid -> ux_device_class_hid_event_array_head == 
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d101      	bne.n	8014c3e <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 8014c3a:	23ff      	movs	r3, #255	; 0xff
 8014c3c:	e02b      	b.n	8014c96 <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c42:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c48:	2b20      	cmp	r3, #32
 8014c4a:	d902      	bls.n	8014c52 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	2220      	movs	r2, #32
 8014c50:	629a      	str	r2, [r3, #40]	; 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	629a      	str	r2, [r3, #40]	; 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	3308      	adds	r3, #8
 8014c5e:	0018      	movs	r0, r3
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	3308      	adds	r3, #8
 8014c64:	0019      	movs	r1, r3
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c6a:	001a      	movs	r2, r3
 8014c6c:	f7ff fb20 	bl	80142b0 <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	332c      	adds	r3, #44	; 0x2c
 8014c74:	001a      	movs	r2, r3
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d104      	bne.n	8014c88 <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	661a      	str	r2, [r3, #96]	; 0x60
 8014c86:	e005      	b.n	8014c94 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014c8c:	332c      	adds	r3, #44	; 0x2c
 8014c8e:	001a      	movs	r2, r3
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8014c94:	2300      	movs	r3, #0
}
 8014c96:	0018      	movs	r0, r3
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	b004      	add	sp, #16
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	46c0      	nop			; (mov r8, r8)
 8014ca0:	20008db8 	.word	0x20008db8

08014ca4 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cb2:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d101      	bne.n	8014cbe <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 8014cba:	23ff      	movs	r3, #255	; 0xff
 8014cbc:	e057      	b.n	8014d6e <_ux_device_class_hid_event_set+0xca>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	332c      	adds	r3, #44	; 0x2c
 8014cc2:	001a      	movs	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d103      	bne.n	8014cd4 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cd0:	60fb      	str	r3, [r7, #12]
 8014cd2:	e002      	b.n	8014cda <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	332c      	adds	r3, #44	; 0x2c
 8014cd8:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014cde:	68fa      	ldr	r2, [r7, #12]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d101      	bne.n	8014ce8 <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 8014ce4:	23ff      	movs	r3, #255	; 0xff
 8014ce6:	e042      	b.n	8014d6e <_ux_device_class_hid_event_set+0xca>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cec:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	68fa      	ldr	r2, [r7, #12]
 8014cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6a1b      	ldr	r3, [r3, #32]
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d121      	bne.n	8014d40 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d00:	3301      	adds	r3, #1
 8014d02:	2b20      	cmp	r3, #32
 8014d04:	d906      	bls.n	8014d14 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8014d06:	2212      	movs	r2, #18
 8014d08:	2107      	movs	r1, #7
 8014d0a:	2002      	movs	r0, #2
 8014d0c:	f7fe ffe6 	bl	8013cdc <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8014d10:	2312      	movs	r3, #18
 8014d12:	e02c      	b.n	8014d6e <_ux_device_class_hid_event_set+0xca>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	3308      	adds	r3, #8
 8014d22:	1c58      	adds	r0, r3, #1
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	3308      	adds	r3, #8
 8014d28:	0019      	movs	r1, r3
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d2e:	001a      	movs	r2, r3
 8014d30:	f7ff fabe 	bl	80142b0 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d38:	1c5a      	adds	r2, r3, #1
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	629a      	str	r2, [r3, #40]	; 0x28
 8014d3e:	e00e      	b.n	8014d5e <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	3308      	adds	r3, #8
 8014d44:	0018      	movs	r0, r3
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	3308      	adds	r3, #8
 8014d4a:	0019      	movs	r1, r3
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d50:	001a      	movs	r2, r3
 8014d52:	f7ff faad 	bl	80142b0 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	629a      	str	r2, [r3, #40]	; 0x28
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	3328      	adds	r3, #40	; 0x28
 8014d62:	2200      	movs	r2, #0
 8014d64:	2101      	movs	r1, #1
 8014d66:	0018      	movs	r0, r3
 8014d68:	f7ff f925 	bl	8013fb6 <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8014d6c:	2300      	movs	r3, #0
}
 8014d6e:	0018      	movs	r0, r3
 8014d70:	46bd      	mov	sp, r7
 8014d72:	b004      	add	sp, #16
 8014d74:	bd80      	pop	{r7, pc}
	...

08014d78 <_ux_device_class_hid_initialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8014d78:	b5b0      	push	{r4, r5, r7, lr}
 8014d7a:	b08c      	sub	sp, #48	; 0x30
 8014d7c:	af06      	add	r7, sp, #24
 8014d7e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class;
UINT                                    status = UX_SUCCESS;
 8014d80:	2300      	movs	r3, #0
 8014d82:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	6a1b      	ldr	r3, [r3, #32]
 8014d88:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8014d8a:	2268      	movs	r2, #104	; 0x68
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	2000      	movs	r0, #0
 8014d90:	f7ff f948 	bl	8014024 <_ux_utility_memory_allocate>
 8014d94:	0003      	movs	r3, r0
 8014d96:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d101      	bne.n	8014da2 <_ux_device_class_hid_initialize+0x2a>
        return(UX_MEMORY_INSUFFICIENT);
 8014d9e:	2312      	movs	r3, #18
 8014da0:	e0ac      	b.n	8014efc <_ux_device_class_hid_initialize+0x184>

    /* Save the address of the HID instance inside the HID container.  */
    class -> ux_slave_class_instance = (VOID *) hid;
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	649a      	str	r2, [r3, #72]	; 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 8014da8:	2380      	movs	r3, #128	; 0x80
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	001a      	movs	r2, r3
 8014dae:	2100      	movs	r1, #0
 8014db0:	2000      	movs	r0, #0
 8014db2:	f7ff f937 	bl	8014024 <_ux_utility_memory_allocate>
 8014db6:	0001      	movs	r1, r0
    class -> ux_slave_class_thread_stack =  
 8014db8:	693a      	ldr	r2, [r7, #16]
 8014dba:	2380      	movs	r3, #128	; 0x80
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	50d1      	str	r1, [r2, r3]
    
    /* Check for successful allocation.  */
    if (class -> ux_slave_class_thread_stack == UX_NULL)
 8014dc0:	693a      	ldr	r2, [r7, #16]
 8014dc2:	2380      	movs	r3, #128	; 0x80
 8014dc4:	005b      	lsls	r3, r3, #1
 8014dc6:	58d3      	ldr	r3, [r2, r3]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d101      	bne.n	8014dd0 <_ux_device_class_hid_initialize+0x58>
        status = UX_MEMORY_INSUFFICIENT;
 8014dcc:	2312      	movs	r3, #18
 8014dce:	617b      	str	r3, [r7, #20]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d11b      	bne.n	8014e0e <_ux_device_class_hid_initialize+0x96>
        status =  _ux_device_thread_create(&class -> ux_slave_class_thread, "ux_slave_hid_thread", 
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	3350      	adds	r3, #80	; 0x50
 8014dda:	0018      	movs	r0, r3
 8014ddc:	693d      	ldr	r5, [r7, #16]
 8014dde:	693a      	ldr	r2, [r7, #16]
 8014de0:	2380      	movs	r3, #128	; 0x80
 8014de2:	005b      	lsls	r3, r3, #1
 8014de4:	58d3      	ldr	r3, [r2, r3]
 8014de6:	4c47      	ldr	r4, [pc, #284]	; (8014f04 <_ux_device_class_hid_initialize+0x18c>)
 8014de8:	4947      	ldr	r1, [pc, #284]	; (8014f08 <_ux_device_class_hid_initialize+0x190>)
 8014dea:	2200      	movs	r2, #0
 8014dec:	9205      	str	r2, [sp, #20]
 8014dee:	2200      	movs	r2, #0
 8014df0:	9204      	str	r2, [sp, #16]
 8014df2:	2214      	movs	r2, #20
 8014df4:	9203      	str	r2, [sp, #12]
 8014df6:	2214      	movs	r2, #20
 8014df8:	9202      	str	r2, [sp, #8]
 8014dfa:	2280      	movs	r2, #128	; 0x80
 8014dfc:	00d2      	lsls	r2, r2, #3
 8014dfe:	9201      	str	r2, [sp, #4]
 8014e00:	9300      	str	r3, [sp, #0]
 8014e02:	002b      	movs	r3, r5
 8014e04:	0022      	movs	r2, r4
 8014e06:	f7ff fc68 	bl	80146da <_ux_utility_thread_create>
 8014e0a:	0003      	movs	r3, r0
 8014e0c:	617b      	str	r3, [r7, #20]
    /* Set task function.  */
    class -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d15c      	bne.n	8014ece <_ux_device_class_hid_initialize+0x156>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class -> ux_slave_class_thread), class)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e18:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	689a      	ldr	r2, [r3, #8]
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	691a      	ldr	r2, [r3, #16]
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	625a      	str	r2, [r3, #36]	; 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	68da      	ldr	r2, [r3, #12]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	695a      	ldr	r2, [r3, #20]
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	699a      	ldr	r2, [r3, #24]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 8014e42:	2310      	movs	r3, #16
 8014e44:	222c      	movs	r2, #44	; 0x2c
 8014e46:	2100      	movs	r1, #0
 8014e48:	2000      	movs	r0, #0
 8014e4a:	f7ff f9f3 	bl	8014234 <_ux_utility_memory_allocate_mulc_safe>
 8014e4e:	0002      	movs	r2, r0
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	659a      	str	r2, [r3, #88]	; 0x58

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d030      	beq.n	8014ebe <_ux_device_class_hid_initialize+0x146>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	65da      	str	r2, [r3, #92]	; 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	661a      	str	r2, [r3, #96]	; 0x60
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e70:	22b0      	movs	r2, #176	; 0xb0
 8014e72:	0092      	lsls	r2, r2, #2
 8014e74:	189a      	adds	r2, r3, r2
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	665a      	str	r2, [r3, #100]	; 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	681a      	ldr	r2, [r3, #0]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	685a      	ldr	r2, [r3, #4]
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	4252      	negs	r2, r2
 8014e90:	651a      	str	r2, [r3, #80]	; 0x50

            return(UX_SUCCESS);
#else

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	3328      	adds	r3, #40	; 0x28
 8014e96:	4a1d      	ldr	r2, [pc, #116]	; (8014f0c <_ux_device_class_hid_initialize+0x194>)
 8014e98:	0011      	movs	r1, r2
 8014e9a:	0018      	movs	r0, r3
 8014e9c:	f7ff f847 	bl	8013f2e <_ux_utility_event_flags_create>
 8014ea0:	0003      	movs	r3, r0
 8014ea2:	617b      	str	r3, [r7, #20]

            /* Check status.  */
            if (status == UX_SUCCESS)
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d101      	bne.n	8014eae <_ux_device_class_hid_initialize+0x136>

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	e026      	b.n	8014efc <_ux_device_class_hid_initialize+0x184>

            }
            else

                /* It's event error. */
                status =  UX_EVENT_ERROR;
 8014eae:	2318      	movs	r3, #24
 8014eb0:	617b      	str	r3, [r7, #20]

            /* Free allocated event array memory.  */
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014eb6:	0018      	movs	r0, r3
 8014eb8:	f7ff fa16 	bl	80142e8 <_ux_utility_memory_free>
 8014ebc:	e001      	b.n	8014ec2 <_ux_device_class_hid_initialize+0x14a>
#endif
        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 8014ebe:	2312      	movs	r3, #18
 8014ec0:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	3350      	adds	r3, #80	; 0x50
 8014ec6:	0018      	movs	r0, r3
 8014ec8:	f7ff fc33 	bl	8014732 <_ux_utility_thread_delete>
 8014ecc:	e001      	b.n	8014ed2 <_ux_device_class_hid_initialize+0x15a>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 8014ece:	2316      	movs	r3, #22
 8014ed0:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class -> ux_slave_class_thread_stack)
 8014ed2:	693a      	ldr	r2, [r7, #16]
 8014ed4:	2380      	movs	r3, #128	; 0x80
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	58d3      	ldr	r3, [r2, r3]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d006      	beq.n	8014eec <_ux_device_class_hid_initialize+0x174>
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8014ede:	693a      	ldr	r2, [r7, #16]
 8014ee0:	2380      	movs	r3, #128	; 0x80
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	58d3      	ldr	r3, [r2, r3]
 8014ee6:	0018      	movs	r0, r3
 8014ee8:	f7ff f9fe 	bl	80142e8 <_ux_utility_memory_free>
#endif

    /* Unmount instance. */
    class -> ux_slave_class_instance =  UX_NULL;
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	0018      	movs	r0, r3
 8014ef6:	f7ff f9f7 	bl	80142e8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8014efa:	697b      	ldr	r3, [r7, #20]
}
 8014efc:	0018      	movs	r0, r3
 8014efe:	46bd      	mov	sp, r7
 8014f00:	b006      	add	sp, #24
 8014f02:	bdb0      	pop	{r4, r5, r7, pc}
 8014f04:	08014f11 	.word	0x08014f11
 8014f08:	08018298 	.word	0x08018298
 8014f0c:	080182ac 	.word	0x080182ac

08014f10 <_ux_device_class_hid_interrupt_thread>:
/*                                            off for standalone compile, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 8014f10:	b590      	push	{r4, r7, lr}
 8014f12:	b097      	sub	sp, #92	; 0x5c
 8014f14:	af02      	add	r7, sp, #8
 8014f16:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, hid_class)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8014f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f20:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014f22:	4b42      	ldr	r3, [pc, #264]	; (801502c <_ux_device_class_hid_interrupt_thread+0x11c>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	3320      	adds	r3, #32
 8014f28:	647b      	str	r3, [r7, #68]	; 0x44
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8014f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	3330      	adds	r3, #48	; 0x30
 8014f30:	643b      	str	r3, [r7, #64]	; 0x40

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8014f32:	e06e      	b.n	8015012 <_ux_device_class_hid_interrupt_thread+0x102>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 8014f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f36:	3328      	adds	r3, #40	; 0x28
 8014f38:	0018      	movs	r0, r3
 8014f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f3e:	2208      	movs	r2, #8
 8014f40:	18ba      	adds	r2, r7, r2
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	0013      	movs	r3, r2
 8014f46:	2201      	movs	r2, #1
 8014f48:	2103      	movs	r1, #3
 8014f4a:	f7ff f819 	bl	8013f80 <_ux_utility_event_flags_get>
 8014f4e:	0003      	movs	r3, r0
 8014f50:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 8014f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f54:	2b07      	cmp	r3, #7
 8014f56:	d126      	bne.n	8014fa6 <_ux_device_class_hid_interrupt_thread+0x96>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 8014f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f5a:	695b      	ldr	r3, [r3, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d10b      	bne.n	8014f78 <_ux_device_class_hid_interrupt_thread+0x68>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 8014f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f62:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 8014f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f66:	615a      	str	r2, [r3, #20]

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 8014f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f6a:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 8014f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f6e:	695b      	ldr	r3, [r3, #20]
 8014f70:	001a      	movs	r2, r3
 8014f72:	2100      	movs	r1, #0
 8014f74:	f7ff fa94 	bl	80144a0 <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 8014f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f7a:	6959      	ldr	r1, [r3, #20]
 8014f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f7e:	695a      	ldr	r2, [r3, #20]
 8014f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f82:	0018      	movs	r0, r3
 8014f84:	f7fe fe24 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8014f88:	0003      	movs	r3, r0
 8014f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8014f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d03f      	beq.n	8015012 <_ux_device_class_hid_interrupt_thread+0x102>
 8014f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f94:	2b26      	cmp	r3, #38	; 0x26
 8014f96:	d03c      	beq.n	8015012 <_ux_device_class_hid_interrupt_thread+0x102>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8014f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f9a:	001a      	movs	r2, r3
 8014f9c:	2107      	movs	r1, #7
 8014f9e:	2002      	movs	r0, #2
 8014fa0:	f7fe fe9c 	bl	8013cdc <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 8014fa4:	e035      	b.n	8015012 <_ux_device_class_hid_interrupt_thread+0x102>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8014fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d029      	beq.n	8015000 <_ux_device_class_hid_interrupt_thread+0xf0>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8014fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fae:	001a      	movs	r2, r3
 8014fb0:	2107      	movs	r1, #7
 8014fb2:	2002      	movs	r0, #2
 8014fb4:	f7fe fe92 	bl	8013cdc <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 8014fb8:	e035      	b.n	8015026 <_ux_device_class_hid_interrupt_thread+0x116>
            /* Check if we have an event to report.  */
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
            {

                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 8014fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8014fc0:	240c      	movs	r4, #12
 8014fc2:	193b      	adds	r3, r7, r4
 8014fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014fc6:	193b      	adds	r3, r7, r4
 8014fc8:	3308      	adds	r3, #8
 8014fca:	0019      	movs	r1, r3
 8014fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fce:	0018      	movs	r0, r3
 8014fd0:	f7ff f96e 	bl	80142b0 <_ux_utility_memory_copy>
            
                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event.ux_device_class_hid_event_length, 
 8014fd4:	193b      	adds	r3, r7, r4
 8014fd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8014fd8:	193b      	adds	r3, r7, r4
 8014fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fde:	0018      	movs	r0, r3
 8014fe0:	f7fe fdf6 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8014fe4:	0003      	movs	r3, r0
 8014fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                                hid_event.ux_device_class_hid_event_length);
                
                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8014fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d008      	beq.n	8015000 <_ux_device_class_hid_interrupt_thread+0xf0>
 8014fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ff0:	2b26      	cmp	r3, #38	; 0x26
 8014ff2:	d005      	beq.n	8015000 <_ux_device_class_hid_interrupt_thread+0xf0>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8014ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ff6:	001a      	movs	r2, r3
 8014ff8:	2107      	movs	r1, #7
 8014ffa:	2002      	movs	r0, #2
 8014ffc:	f7fe fe6e 	bl	8013cdc <_ux_system_error_handler>
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
 8015000:	230c      	movs	r3, #12
 8015002:	18fa      	adds	r2, r7, r3
 8015004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015006:	0011      	movs	r1, r2
 8015008:	0018      	movs	r0, r3
 801500a:	f7ff fe01 	bl	8014c10 <_ux_device_class_hid_event_get>
 801500e:	1e03      	subs	r3, r0, #0
 8015010:	d0d3      	beq.n	8014fba <_ux_device_class_hid_interrupt_thread+0xaa>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8015012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b03      	cmp	r3, #3
 8015018:	d08c      	beq.n	8014f34 <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 801501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801501c:	3350      	adds	r3, #80	; 0x50
 801501e:	0018      	movs	r0, r3
 8015020:	f7ff fba9 	bl	8014776 <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8015024:	e781      	b.n	8014f2a <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 8015026:	46bd      	mov	sp, r7
 8015028:	b015      	add	sp, #84	; 0x54
 801502a:	bd90      	pop	{r4, r7, pc}
 801502c:	20008db8 	.word	0x20008db8

08015030 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8015030:	b590      	push	{r4, r7, lr}
 8015032:	b097      	sub	sp, #92	; 0x5c
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
 801503c:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 801503e:	23ff      	movs	r3, #255	; 0xff
 8015040:	653b      	str	r3, [r7, #80]	; 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015042:	4b45      	ldr	r3, [pc, #276]	; (8015158 <_ux_device_class_hid_report_get+0x128>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	3320      	adds	r3, #32
 8015048:	64fb      	str	r3, [r7, #76]	; 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801504a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801504c:	333c      	adds	r3, #60	; 0x3c
 801504e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015052:	3330      	adds	r3, #48	; 0x30
 8015054:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 8015056:	2443      	movs	r4, #67	; 0x43
 8015058:	193b      	adds	r3, r7, r4
 801505a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801505c:	2156      	movs	r1, #86	; 0x56
 801505e:	5c52      	ldrb	r2, [r2, r1]
 8015060:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8015062:	2042      	movs	r0, #66	; 0x42
 8015064:	183b      	adds	r3, r7, r0
 8015066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015068:	2157      	movs	r1, #87	; 0x57
 801506a:	5c52      	ldrb	r2, [r2, r1]
 801506c:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801506e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015070:	2203      	movs	r2, #3
 8015072:	629a      	str	r2, [r3, #40]	; 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8015074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015076:	68db      	ldr	r3, [r3, #12]
 8015078:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 801507a:	193b      	adds	r3, r7, r4
 801507c:	781a      	ldrb	r2, [r3, #0]
 801507e:	2110      	movs	r1, #16
 8015080:	187b      	adds	r3, r7, r1
 8015082:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8015084:	183b      	adds	r3, r7, r0
 8015086:	781a      	ldrb	r2, [r3, #0]
 8015088:	187b      	adds	r3, r7, r1
 801508a:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 801508c:	187b      	adds	r3, r7, r1
 801508e:	2220      	movs	r2, #32
 8015090:	629a      	str	r2, [r3, #40]	; 0x28

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8015092:	183b      	adds	r3, r7, r0
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b01      	cmp	r3, #1
 8015098:	d10c      	bne.n	80150b4 <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 801509e:	2b01      	cmp	r3, #1
 80150a0:	d008      	beq.n	80150b4 <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 80150a2:	187a      	adds	r2, r7, r1
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	0011      	movs	r1, r2
 80150a8:	0018      	movs	r0, r3
 80150aa:	f7ff fdb1 	bl	8014c10 <_ux_device_class_hid_event_get>
 80150ae:	0003      	movs	r3, r0
 80150b0:	653b      	str	r3, [r7, #80]	; 0x50
 80150b2:	e00c      	b.n	80150ce <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	691b      	ldr	r3, [r3, #16]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d008      	beq.n	80150ce <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	691b      	ldr	r3, [r3, #16]
 80150c0:	2210      	movs	r2, #16
 80150c2:	18b9      	adds	r1, r7, r2
 80150c4:	68fa      	ldr	r2, [r7, #12]
 80150c6:	0010      	movs	r0, r2
 80150c8:	4798      	blx	r3
 80150ca:	0003      	movs	r3, r0
 80150cc:	653b      	str	r3, [r7, #80]	; 0x50
    }

    if (status == UX_SUCCESS)
 80150ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d124      	bne.n	801511e <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 80150d4:	2310      	movs	r3, #16
 80150d6:	18fb      	adds	r3, r7, r3
 80150d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d202      	bcs.n	80150e6 <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	657b      	str	r3, [r7, #84]	; 0x54
 80150e4:	e003      	b.n	80150ee <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 80150e6:	2310      	movs	r3, #16
 80150e8:	18fb      	adds	r3, r7, r3
 80150ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ec:	657b      	str	r3, [r7, #84]	; 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80150ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80150f0:	2380      	movs	r3, #128	; 0x80
 80150f2:	005b      	lsls	r3, r3, #1
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d902      	bls.n	80150fe <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80150f8:	2380      	movs	r3, #128	; 0x80
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 80150fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015102:	2100      	movs	r1, #0
 8015104:	0018      	movs	r0, r3
 8015106:	f7ff f9cb 	bl	80144a0 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 801510a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801510c:	2310      	movs	r3, #16
 801510e:	18fb      	adds	r3, r7, r3
 8015110:	3308      	adds	r3, #8
 8015112:	0019      	movs	r1, r3
 8015114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015116:	0018      	movs	r0, r3
 8015118:	f7ff f8ca 	bl	80142b0 <_ux_utility_memory_copy>
 801511c:	e00e      	b.n	801513c <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	2bff      	cmp	r3, #255	; 0xff
 8015122:	d802      	bhi.n	801512a <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	657b      	str	r3, [r7, #84]	; 0x54
 8015128:	e002      	b.n	8015130 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 801512a:	2380      	movs	r3, #128	; 0x80
 801512c:	005b      	lsls	r3, r3, #1
 801512e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8015130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015134:	2100      	movs	r1, #0
 8015136:	0018      	movs	r0, r3
 8015138:	f7ff f9b2 	bl	80144a0 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 801513c:	683a      	ldr	r2, [r7, #0]
 801513e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015142:	0018      	movs	r0, r3
 8015144:	f7fe fd44 	bl	8013bd0 <_ux_device_stack_transfer_request>
 8015148:	0003      	movs	r3, r0
 801514a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Return the status to the caller.  */
    return(status);
 801514c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801514e:	0018      	movs	r0, r3
 8015150:	46bd      	mov	sp, r7
 8015152:	b017      	add	sp, #92	; 0x5c
 8015154:	bd90      	pop	{r4, r7, pc}
 8015156:	46c0      	nop			; (mov r8, r8)
 8015158:	20008db8 	.word	0x20008db8

0801515c <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 801515c:	b590      	push	{r4, r7, lr}
 801515e:	b095      	sub	sp, #84	; 0x54
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801516a:	4b25      	ldr	r3, [pc, #148]	; (8015200 <_ux_device_class_hid_report_set+0xa4>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	3320      	adds	r3, #32
 8015170:	64bb      	str	r3, [r7, #72]	; 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8015172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015174:	333c      	adds	r3, #60	; 0x3c
 8015176:	647b      	str	r3, [r7, #68]	; 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8015178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801517a:	3330      	adds	r3, #48	; 0x30
 801517c:	643b      	str	r3, [r7, #64]	; 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 801517e:	2114      	movs	r1, #20
 8015180:	187b      	adds	r3, r7, r1
 8015182:	68ba      	ldr	r2, [r7, #8]
 8015184:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8015186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	6a1b      	ldr	r3, [r3, #32]
 8015190:	2b01      	cmp	r3, #1
 8015192:	d10d      	bne.n	80151b0 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8015194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	001a      	movs	r2, r3
 801519a:	187b      	adds	r3, r7, r1
 801519c:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 801519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151a0:	699b      	ldr	r3, [r3, #24]
 80151a2:	1e5a      	subs	r2, r3, #1
 80151a4:	187b      	adds	r3, r7, r1
 80151a6:	629a      	str	r2, [r3, #40]	; 0x28
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 80151a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151aa:	3301      	adds	r3, #1
 80151ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80151ae:	e007      	b.n	80151c0 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 80151b0:	2114      	movs	r1, #20
 80151b2:	187b      	adds	r3, r7, r1
 80151b4:	2200      	movs	r2, #0
 80151b6:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 80151b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151ba:	699a      	ldr	r2, [r3, #24]
 80151bc:	187b      	adds	r3, r7, r1
 80151be:	629a      	str	r2, [r3, #40]	; 0x28
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 80151c0:	2214      	movs	r2, #20
 80151c2:	18bb      	adds	r3, r7, r2
 80151c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151c6:	2b20      	cmp	r3, #32
 80151c8:	d902      	bls.n	80151d0 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80151ca:	18bb      	adds	r3, r7, r2
 80151cc:	2220      	movs	r2, #32
 80151ce:	629a      	str	r2, [r3, #40]	; 0x28
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80151d0:	2414      	movs	r4, #20
 80151d2:	193b      	adds	r3, r7, r4
 80151d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80151d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80151d8:	193b      	adds	r3, r7, r4
 80151da:	3308      	adds	r3, #8
 80151dc:	0018      	movs	r0, r3
 80151de:	f7ff f867 	bl	80142b0 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d005      	beq.n	80151f6 <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	1939      	adds	r1, r7, r4
 80151f0:	68fa      	ldr	r2, [r7, #12]
 80151f2:	0010      	movs	r0, r2
 80151f4:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 80151f6:	2300      	movs	r3, #0
}
 80151f8:	0018      	movs	r0, r3
 80151fa:	46bd      	mov	sp, r7
 80151fc:	b015      	add	sp, #84	; 0x54
 80151fe:	bd90      	pop	{r4, r7, pc}
 8015200:	20008db8 	.word	0x20008db8

08015204 <_ux_device_class_hid_uninitialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b084      	sub	sp, #16
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class;


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6a1b      	ldr	r3, [r3, #32]
 8015210:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015216:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	3350      	adds	r3, #80	; 0x50
 801521c:	0018      	movs	r0, r3
 801521e:	f7ff fa88 	bl	8014732 <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8015222:	68fa      	ldr	r2, [r7, #12]
 8015224:	2380      	movs	r3, #128	; 0x80
 8015226:	005b      	lsls	r3, r3, #1
 8015228:	58d3      	ldr	r3, [r2, r3]
 801522a:	0018      	movs	r0, r3
 801522c:	f7ff f85c 	bl	80142e8 <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	3328      	adds	r3, #40	; 0x28
 8015234:	0018      	movs	r0, r3
 8015236:	f7fe fe94 	bl	8013f62 <_ux_utility_event_flags_delete>
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801523e:	0018      	movs	r0, r3
 8015240:	f7ff f852 	bl	80142e8 <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	0018      	movs	r0, r3
 8015248:	f7ff f84e 	bl	80142e8 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 801524c:	2300      	movs	r3, #0
}
 801524e:	0018      	movs	r0, r3
 8015250:	46bd      	mov	sp, r7
 8015252:	b004      	add	sp, #16
 8015254:	bd80      	pop	{r7, pc}

08015256 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b082      	sub	sp, #8
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
 801525e:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2280      	movs	r2, #128	; 0x80
 8015264:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2201      	movs	r2, #1
 801526a:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	0018      	movs	r0, r3
 8015270:	f7fd fbce 	bl	8012a10 <_ux_device_stack_control_request_process>
}
 8015274:	46c0      	nop			; (mov r8, r8)
 8015276:	46bd      	mov	sp, r7
 8015278:	b002      	add	sp, #8
 801527a:	bd80      	pop	{r7, pc}

0801527c <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	2200      	movs	r2, #0
 801528c:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2280      	movs	r2, #128	; 0x80
 8015292:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	0018      	movs	r0, r3
 8015298:	f7fd fbba 	bl	8012a10 <_ux_device_stack_control_request_process>
 801529c:	1e03      	subs	r3, r0, #0
 801529e:	d108      	bne.n	80152b2 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	2203      	movs	r2, #3
 80152a4:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	2300      	movs	r3, #0
 80152aa:	2200      	movs	r2, #0
 80152ac:	2100      	movs	r1, #0
 80152ae:	f7ef fc8b 	bl	8004bc8 <HAL_PCD_EP_Transmit>
    }
}
 80152b2:	46c0      	nop			; (mov r8, r8)
 80152b4:	46bd      	mov	sp, r7
 80152b6:	b004      	add	sp, #16
 80152b8:	bd80      	pop	{r7, pc}

080152ba <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b084      	sub	sp, #16
 80152be:	af00      	add	r7, sp, #0
 80152c0:	60f8      	str	r0, [r7, #12]
 80152c2:	60b9      	str	r1, [r7, #8]
 80152c4:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2280      	movs	r2, #128	; 0x80
 80152ca:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	0018      	movs	r0, r3
 80152d0:	f7fd fb9e 	bl	8012a10 <_ux_device_stack_control_request_process>
 80152d4:	1e03      	subs	r3, r0, #0
 80152d6:	d108      	bne.n	80152ea <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	2204      	movs	r2, #4
 80152dc:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	2300      	movs	r3, #0
 80152e2:	2200      	movs	r2, #0
 80152e4:	2100      	movs	r1, #0
 80152e6:	f7ef fc6f 	bl	8004bc8 <HAL_PCD_EP_Transmit>
    }
}
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	46bd      	mov	sp, r7
 80152ee:	b004      	add	sp, #16
 80152f0:	bd80      	pop	{r7, pc}
	...

080152f4 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80152fc:	4b3e      	ldr	r3, [pc, #248]	; (80153f8 <HAL_PCD_SetupStageCallback+0x104>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	69db      	ldr	r3, [r3, #28]
 8015306:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	3304      	adds	r3, #4
 801530c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	3330      	adds	r3, #48	; 0x30
 8015314:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8015316:	693b      	ldr	r3, [r7, #16]
 8015318:	3354      	adds	r3, #84	; 0x54
 801531a:	0018      	movs	r0, r3
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	22b1      	movs	r2, #177	; 0xb1
 8015320:	0092      	lsls	r2, r2, #2
 8015322:	4694      	mov	ip, r2
 8015324:	4463      	add	r3, ip
 8015326:	2208      	movs	r2, #8
 8015328:	0019      	movs	r1, r3
 801532a:	f7fe ffc1 	bl	80142b0 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	2200      	movs	r2, #0
 8015332:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	2201      	movs	r2, #1
 8015338:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	2200      	movs	r2, #0
 801533e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	220e      	movs	r2, #14
 8015346:	4393      	bics	r3, r2
 8015348:	001a      	movs	r2, r3
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	2254      	movs	r2, #84	; 0x54
 8015352:	5c9b      	ldrb	r3, [r3, r2]
 8015354:	b25b      	sxtb	r3, r3
 8015356:	2b00      	cmp	r3, #0
 8015358:	da06      	bge.n	8015368 <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 801535a:	693a      	ldr	r2, [r7, #16]
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	0011      	movs	r1, r2
 8015360:	0018      	movs	r0, r3
 8015362:	f7ff ff78 	bl	8015256 <_ux_dcd_stm32_setup_in>
 8015366:	e043      	b.n	80153f0 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	2200      	movs	r2, #0
 801536c:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	225a      	movs	r2, #90	; 0x5a
 8015372:	5c9b      	ldrb	r3, [r3, r2]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d10b      	bne.n	8015390 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	225b      	movs	r2, #91	; 0x5b
 801537c:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801537e:	2b00      	cmp	r3, #0
 8015380:	d106      	bne.n	8015390 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8015382:	687a      	ldr	r2, [r7, #4]
 8015384:	6939      	ldr	r1, [r7, #16]
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	0018      	movs	r0, r3
 801538a:	f7ff ff96 	bl	80152ba <_ux_dcd_stm32_setup_status>
 801538e:	e02f      	b.n	80153f0 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	689b      	ldr	r3, [r3, #8]
 8015394:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	3354      	adds	r3, #84	; 0x54
 801539a:	3306      	adds	r3, #6
 801539c:	0018      	movs	r0, r3
 801539e:	f7ff f954 	bl	801464a <_ux_utility_short_get>
 80153a2:	0002      	movs	r2, r0
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	695a      	ldr	r2, [r3, #20]
 80153ac:	2380      	movs	r3, #128	; 0x80
 80153ae:	005b      	lsls	r3, r3, #1
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d909      	bls.n	80153c8 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	69bb      	ldr	r3, [r7, #24]
 80153b8:	0011      	movs	r1, r2
 80153ba:	0018      	movs	r0, r3
 80153bc:	f000 fa58 	bl	8015870 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	2200      	movs	r2, #0
 80153c4:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 80153c6:	e013      	b.n	80153f0 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	2200      	movs	r2, #0
 80153cc:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	68da      	ldr	r2, [r3, #12]
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 80153da:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	695b      	ldr	r3, [r3, #20]
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7ef fb91 	bl	8004b0c <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2202      	movs	r2, #2
 80153ee:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 80153f0:	46bd      	mov	sp, r7
 80153f2:	b008      	add	sp, #32
 80153f4:	bd80      	pop	{r7, pc}
 80153f6:	46c0      	nop			; (mov r8, r8)
 80153f8:	20008db8 	.word	0x20008db8

080153fc <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b088      	sub	sp, #32
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	000a      	movs	r2, r1
 8015406:	1cfb      	adds	r3, r7, #3
 8015408:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801540a:	4b4f      	ldr	r3, [pc, #316]	; (8015548 <HAL_PCD_DataInStageCallback+0x14c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	69db      	ldr	r3, [r3, #28]
 8015414:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8015416:	1cfb      	adds	r3, r7, #3
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	220f      	movs	r2, #15
 801541c:	4013      	ands	r3, r2
 801541e:	d00d      	beq.n	801543c <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8015420:	1cfb      	adds	r3, r7, #3
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	220f      	movs	r2, #15
 8015426:	401a      	ands	r2, r3
 8015428:	0013      	movs	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	189b      	adds	r3, r3, r2
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	3360      	adds	r3, #96	; 0x60
 8015432:	693a      	ldr	r2, [r7, #16]
 8015434:	18d3      	adds	r3, r2, r3
 8015436:	3304      	adds	r3, #4
 8015438:	61fb      	str	r3, [r7, #28]
 801543a:	e00b      	b.n	8015454 <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801543c:	1cfb      	adds	r3, r7, #3
 801543e:	781b      	ldrb	r3, [r3, #0]
 8015440:	220f      	movs	r2, #15
 8015442:	401a      	ands	r2, r3
 8015444:	0013      	movs	r3, r2
 8015446:	005b      	lsls	r3, r3, #1
 8015448:	189b      	adds	r3, r3, r2
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	693a      	ldr	r2, [r7, #16]
 801544e:	18d3      	adds	r3, r2, r3
 8015450:	3304      	adds	r3, #4
 8015452:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	3330      	adds	r3, #48	; 0x30
 801545a:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801545c:	1cfb      	adds	r3, r7, #3
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d15e      	bne.n	8015522 <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	689b      	ldr	r3, [r3, #8]
 8015468:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	7a1b      	ldrb	r3, [r3, #8]
 801546e:	2b01      	cmp	r3, #1
 8015470:	d166      	bne.n	8015540 <HAL_PCD_DataInStageCallback+0x144>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	2300      	movs	r3, #0
 8015476:	2200      	movs	r2, #0
 8015478:	2100      	movs	r1, #0
 801547a:	f7ef fb47 	bl	8004b0c <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015486:	429a      	cmp	r2, r3
 8015488:	d826      	bhi.n	80154d8 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801548e:	2b01      	cmp	r3, #1
 8015490:	d10b      	bne.n	80154aa <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 8015496:	b2d9      	uxtb	r1, r3
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	2300      	movs	r3, #0
 801549c:	2200      	movs	r2, #0
 801549e:	f7ef fb93 	bl	8004bc8 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2200      	movs	r2, #0
 80154a6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 80154a8:	e04a      	b.n	8015540 <HAL_PCD_DataInStageCallback+0x144>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2200      	movs	r2, #0
 80154ae:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	2202      	movs	r2, #2
 80154b4:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d004      	beq.n	80154d0 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	0010      	movs	r0, r2
 80154ce:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	2204      	movs	r2, #4
 80154d4:	721a      	strb	r2, [r3, #8]
}
 80154d6:	e033      	b.n	8015540 <HAL_PCD_DataInStageCallback+0x144>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	69da      	ldr	r2, [r3, #28]
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	69db      	ldr	r3, [r3, #28]
 80154e0:	1ad3      	subs	r3, r2, r3
 80154e2:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	69db      	ldr	r3, [r3, #28]
 80154e8:	69ba      	ldr	r2, [r7, #24]
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d902      	bls.n	80154f4 <HAL_PCD_DataInStageCallback+0xf8>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80154ee:	68bb      	ldr	r3, [r7, #8]
 80154f0:	69db      	ldr	r3, [r3, #28]
 80154f2:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	691a      	ldr	r2, [r3, #16]
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	69db      	ldr	r3, [r3, #28]
 80154fc:	18d2      	adds	r2, r2, r3
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	69da      	ldr	r2, [r3, #28]
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	1ad2      	subs	r2, r2, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 8015512:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8015518:	69bb      	ldr	r3, [r7, #24]
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7ef fb54 	bl	8004bc8 <HAL_PCD_EP_Transmit>
}
 8015520:	e00e      	b.n	8015540 <HAL_PCD_DataInStageCallback+0x144>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	2200      	movs	r2, #0
 8015526:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	2202      	movs	r2, #2
 801552c:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	3330      	adds	r3, #48	; 0x30
 801553a:	0018      	movs	r0, r3
 801553c:	f7ff f876 	bl	801462c <_ux_utility_semaphore_put>
}
 8015540:	46c0      	nop			; (mov r8, r8)
 8015542:	46bd      	mov	sp, r7
 8015544:	b008      	add	sp, #32
 8015546:	bd80      	pop	{r7, pc}
 8015548:	20008db8 	.word	0x20008db8

0801554c <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b088      	sub	sp, #32
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	000a      	movs	r2, r1
 8015556:	1cfb      	adds	r3, r7, #3
 8015558:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 801555a:	4b40      	ldr	r3, [pc, #256]	; (801565c <HAL_PCD_DataOutStageCallback+0x110>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	69db      	ldr	r3, [r3, #28]
 8015564:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015566:	1cfb      	adds	r3, r7, #3
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	220f      	movs	r2, #15
 801556c:	401a      	ands	r2, r3
 801556e:	0013      	movs	r3, r2
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	189b      	adds	r3, r3, r2
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	69ba      	ldr	r2, [r7, #24]
 8015578:	18d3      	adds	r3, r2, r3
 801557a:	3304      	adds	r3, #4
 801557c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	3330      	adds	r3, #48	; 0x30
 8015584:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015586:	1cfb      	adds	r3, r7, #3
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d14c      	bne.n	8015628 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	7a1b      	ldrb	r3, [r3, #8]
 8015592:	2b02      	cmp	r3, #2
 8015594:	d15d      	bne.n	8015652 <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	689b      	ldr	r3, [r3, #8]
 801559a:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801559c:	1cfb      	adds	r3, r7, #3
 801559e:	781a      	ldrb	r2, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	0011      	movs	r1, r2
 80155a4:	0018      	movs	r0, r3
 80155a6:	f7ef faf6 	bl	8004b96 <HAL_PCD_EP_GetRxCount>
 80155aa:	0003      	movs	r3, r0
 80155ac:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	699a      	ldr	r2, [r3, #24]
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	18d2      	adds	r2, r2, r3
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d823      	bhi.n	801560e <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d004      	beq.n	80155dc <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80155d6:	68ba      	ldr	r2, [r7, #8]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d006      	beq.n	80155ea <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 80155dc:	687a      	ldr	r2, [r7, #4]
 80155de:	6939      	ldr	r1, [r7, #16]
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	0018      	movs	r0, r3
 80155e4:	f7ff fe4a 	bl	801527c <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80155e8:	e033      	b.n	8015652 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	691a      	ldr	r2, [r3, #16]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	69db      	ldr	r3, [r3, #28]
 80155f2:	18d2      	adds	r2, r2, r3
 80155f4:	693b      	ldr	r3, [r7, #16]
 80155f6:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 80155fc:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	69db      	ldr	r3, [r3, #28]
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f7ef fa80 	bl	8004b0c <HAL_PCD_EP_Receive>
}
 801560c:	e021      	b.n	8015652 <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	2227      	movs	r2, #39	; 0x27
 8015612:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015618:	2b00      	cmp	r3, #0
 801561a:	d01a      	beq.n	8015652 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015620:	693a      	ldr	r2, [r7, #16]
 8015622:	0010      	movs	r0, r2
 8015624:	4798      	blx	r3
}
 8015626:	e014      	b.n	8015652 <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015628:	1cfb      	adds	r3, r7, #3
 801562a:	781a      	ldrb	r2, [r3, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	0011      	movs	r1, r2
 8015630:	0018      	movs	r0, r3
 8015632:	f7ef fab0 	bl	8004b96 <HAL_PCD_EP_GetRxCount>
 8015636:	0002      	movs	r2, r0
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	2200      	movs	r2, #0
 8015640:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	2202      	movs	r2, #2
 8015646:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	3330      	adds	r3, #48	; 0x30
 801564c:	0018      	movs	r0, r3
 801564e:	f7fe ffed 	bl	801462c <_ux_utility_semaphore_put>
}
 8015652:	46c0      	nop			; (mov r8, r8)
 8015654:	46bd      	mov	sp, r7
 8015656:	b008      	add	sp, #32
 8015658:	bd80      	pop	{r7, pc}
 801565a:	46c0      	nop			; (mov r8, r8)
 801565c:	20008db8 	.word	0x20008db8

08015660 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8015668:	4b11      	ldr	r3, [pc, #68]	; (80156b0 <HAL_PCD_ResetCallback+0x50>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	6a1b      	ldr	r3, [r3, #32]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8015672:	f7fd fd65 	bl	8013140 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	68db      	ldr	r3, [r3, #12]
 801567a:	2b02      	cmp	r3, #2
 801567c:	d106      	bne.n	801568c <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801567e:	4b0c      	ldr	r3, [pc, #48]	; (80156b0 <HAL_PCD_ResetCallback+0x50>)
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	23ce      	movs	r3, #206	; 0xce
 8015684:	005b      	lsls	r3, r3, #1
 8015686:	2101      	movs	r1, #1
 8015688:	50d1      	str	r1, [r2, r3]
        break;
 801568a:	e006      	b.n	801569a <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801568c:	4b08      	ldr	r3, [pc, #32]	; (80156b0 <HAL_PCD_ResetCallback+0x50>)
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	23ce      	movs	r3, #206	; 0xce
 8015692:	005b      	lsls	r3, r3, #1
 8015694:	2101      	movs	r1, #1
 8015696:	50d1      	str	r1, [r2, r3]
        break;
 8015698:	46c0      	nop			; (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 801569a:	f000 fa25 	bl	8015ae8 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801569e:	4b04      	ldr	r3, [pc, #16]	; (80156b0 <HAL_PCD_ResetCallback+0x50>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	2201      	movs	r2, #1
 80156a4:	621a      	str	r2, [r3, #32]
}
 80156a6:	46c0      	nop			; (mov r8, r8)
 80156a8:	46bd      	mov	sp, r7
 80156aa:	b002      	add	sp, #8
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	46c0      	nop			; (mov r8, r8)
 80156b0:	20008db8 	.word	0x20008db8

080156b4 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	2280      	movs	r2, #128	; 0x80
 80156c2:	4013      	ands	r3, r2
 80156c4:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	227f      	movs	r2, #127	; 0x7f
 80156ca:	4013      	ands	r3, r2
 80156cc:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	2b07      	cmp	r3, #7
 80156d2:	d806      	bhi.n	80156e2 <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	22c4      	movs	r2, #196	; 0xc4
 80156d8:	589b      	ldr	r3, [r3, r2]
 80156da:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80156dc:	68ba      	ldr	r2, [r7, #8]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d301      	bcc.n	80156e6 <_stm32_ed_get+0x32>
        return(UX_NULL);
 80156e2:	2300      	movs	r3, #0
 80156e4:	e014      	b.n	8015710 <_stm32_ed_get+0x5c>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d009      	beq.n	8015700 <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80156ec:	68ba      	ldr	r2, [r7, #8]
 80156ee:	0013      	movs	r3, r2
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	189b      	adds	r3, r3, r2
 80156f4:	009b      	lsls	r3, r3, #2
 80156f6:	3360      	adds	r3, #96	; 0x60
 80156f8:	687a      	ldr	r2, [r7, #4]
 80156fa:	18d3      	adds	r3, r2, r3
 80156fc:	3304      	adds	r3, #4
 80156fe:	e007      	b.n	8015710 <_stm32_ed_get+0x5c>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8015700:	68ba      	ldr	r2, [r7, #8]
 8015702:	0013      	movs	r3, r2
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	189b      	adds	r3, r3, r2
 8015708:	009b      	lsls	r3, r3, #2
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	18d3      	adds	r3, r2, r3
 801570e:	3304      	adds	r3, #4
}
 8015710:	0018      	movs	r0, r3
 8015712:	46bd      	mov	sp, r7
 8015714:	b004      	add	sp, #16
 8015716:	bd80      	pop	{r7, pc}

08015718 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015718:	b590      	push	{r4, r7, lr}
 801571a:	b085      	sub	sp, #20
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	695b      	ldr	r3, [r3, #20]
 8015726:	2280      	movs	r2, #128	; 0x80
 8015728:	4393      	bics	r3, r2
 801572a:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	695a      	ldr	r2, [r3, #20]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	0011      	movs	r1, r2
 8015734:	0018      	movs	r0, r3
 8015736:	f7ff ffbd 	bl	80156b4 <_stm32_ed_get>
 801573a:	0003      	movs	r3, r0
 801573c:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d101      	bne.n	8015748 <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 8015744:	2314      	movs	r3, #20
 8015746:	e033      	b.n	80157b0 <_ux_dcd_stm32_endpoint_create+0x98>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	2201      	movs	r2, #1
 801574e:	4013      	ands	r3, r2
 8015750:	d12d      	bne.n	80157ae <_ux_dcd_stm32_endpoint_create+0x96>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	2201      	movs	r2, #1
 8015758:	431a      	orrs	r2, r3
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	b2da      	uxtb	r2, r3
 801576e:	68bb      	ldr	r3, [r7, #8]
 8015770:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	695b      	ldr	r3, [r3, #20]
 8015776:	b2db      	uxtb	r3, r3
 8015778:	227f      	movs	r2, #127	; 0x7f
 801577a:	4393      	bics	r3, r2
 801577c:	b2da      	uxtb	r2, r3
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d010      	beq.n	80157aa <_ux_dcd_stm32_endpoint_create+0x92>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	22c4      	movs	r2, #196	; 0xc4
 801578c:	5898      	ldr	r0, [r3, r2]
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	695b      	ldr	r3, [r3, #20]
 8015792:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8015798:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	2403      	movs	r4, #3
 80157a2:	4023      	ands	r3, r4
 80157a4:	b2db      	uxtb	r3, r3
 80157a6:	f7ef f8e4 	bl	8004972 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 80157aa:	2300      	movs	r3, #0
 80157ac:	e000      	b.n	80157b0 <_ux_dcd_stm32_endpoint_create+0x98>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 80157ae:	2314      	movs	r3, #20
}
 80157b0:	0018      	movs	r0, r3
 80157b2:	46bd      	mov	sp, r7
 80157b4:	b005      	add	sp, #20
 80157b6:	bd90      	pop	{r4, r7, pc}

080157b8 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	689b      	ldr	r3, [r3, #8]
 80157c6:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2200      	movs	r2, #0
 80157cc:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	22c4      	movs	r2, #196	; 0xc4
 80157d2:	589a      	ldr	r2, [r3, r2]
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	695b      	ldr	r3, [r3, #20]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	0019      	movs	r1, r3
 80157dc:	0010      	movs	r0, r2
 80157de:	f7ef f942 	bl	8004a66 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80157e2:	2300      	movs	r3, #0
}
 80157e4:	0018      	movs	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	b004      	add	sp, #16
 80157ea:	bd80      	pop	{r7, pc}

080157ec <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b086      	sub	sp, #24
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80157fc:	f3ef 8310 	mrs	r3, PRIMASK
 8015800:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8015802:	b672      	cpsid	i
    return(primask_value);
 8015804:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 8015806:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	685b      	ldr	r3, [r3, #4]
 801580c:	4a17      	ldr	r2, [pc, #92]	; (801586c <_ux_dcd_stm32_endpoint_reset+0x80>)
 801580e:	401a      	ands	r2, r3
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	2200      	movs	r2, #0
 8015818:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	22c4      	movs	r2, #196	; 0xc4
 801581e:	589a      	ldr	r2, [r3, r2]
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	695b      	ldr	r3, [r3, #20]
 8015824:	b2db      	uxtb	r3, r3
 8015826:	0019      	movs	r1, r3
 8015828:	0010      	movs	r0, r2
 801582a:	f7ef fa75 	bl	8004d18 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	22c4      	movs	r2, #196	; 0xc4
 8015832:	589a      	ldr	r2, [r3, r2]
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	695b      	ldr	r3, [r3, #20]
 8015838:	b2db      	uxtb	r3, r3
 801583a:	0019      	movs	r1, r3
 801583c:	0010      	movs	r0, r2
 801583e:	f7ef fb04 	bl	8004e4a <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015846:	2b00      	cmp	r3, #0
 8015848:	d004      	beq.n	8015854 <_ux_dcd_stm32_endpoint_reset+0x68>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	3360      	adds	r3, #96	; 0x60
 801584e:	0018      	movs	r0, r3
 8015850:	f7fe feec 	bl	801462c <_ux_utility_semaphore_put>
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	f383 8810 	msr	PRIMASK, r3
}
 801585e:	46c0      	nop			; (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 8015860:	2300      	movs	r3, #0
}
 8015862:	0018      	movs	r0, r3
 8015864:	46bd      	mov	sp, r7
 8015866:	b006      	add	sp, #24
 8015868:	bd80      	pop	{r7, pc}
 801586a:	46c0      	nop			; (mov r8, r8)
 801586c:	fffffcf3 	.word	0xfffffcf3

08015870 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	689b      	ldr	r3, [r3, #8]
 801587e:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	2204      	movs	r2, #4
 8015886:	431a      	orrs	r2, r3
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	22c4      	movs	r2, #196	; 0xc4
 8015890:	5898      	ldr	r0, [r3, r2]
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	695b      	ldr	r3, [r3, #20]
 8015896:	b2da      	uxtb	r2, r3
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	7a9b      	ldrb	r3, [r3, #10]
 801589c:	4313      	orrs	r3, r2
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	0019      	movs	r1, r3
 80158a2:	f7ef f9db 	bl	8004c5c <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80158a6:	2300      	movs	r3, #0
}
 80158a8:	0018      	movs	r0, r3
 80158aa:	46bd      	mov	sp, r7
 80158ac:	b004      	add	sp, #16
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <_stm32_ed_get>:
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	2280      	movs	r2, #128	; 0x80
 80158be:	4013      	ands	r3, r2
 80158c0:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	227f      	movs	r2, #127	; 0x7f
 80158c6:	4013      	ands	r3, r2
 80158c8:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	2b07      	cmp	r3, #7
 80158ce:	d806      	bhi.n	80158de <_stm32_ed_get+0x2e>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	22c4      	movs	r2, #196	; 0xc4
 80158d4:	589b      	ldr	r3, [r3, r2]
 80158d6:	685b      	ldr	r3, [r3, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 80158d8:	68ba      	ldr	r2, [r7, #8]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d301      	bcc.n	80158e2 <_stm32_ed_get+0x32>
        return(UX_NULL);
 80158de:	2300      	movs	r3, #0
 80158e0:	e014      	b.n	801590c <_stm32_ed_get+0x5c>
    if (ep_dir)
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d009      	beq.n	80158fc <_stm32_ed_get+0x4c>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 80158e8:	68ba      	ldr	r2, [r7, #8]
 80158ea:	0013      	movs	r3, r2
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	189b      	adds	r3, r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	3360      	adds	r3, #96	; 0x60
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	18d3      	adds	r3, r2, r3
 80158f8:	3304      	adds	r3, #4
 80158fa:	e007      	b.n	801590c <_stm32_ed_get+0x5c>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 80158fc:	68ba      	ldr	r2, [r7, #8]
 80158fe:	0013      	movs	r3, r2
 8015900:	005b      	lsls	r3, r3, #1
 8015902:	189b      	adds	r3, r3, r2
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	18d3      	adds	r3, r2, r3
 801590a:	3304      	adds	r3, #4
}
 801590c:	0018      	movs	r0, r3
 801590e:	46bd      	mov	sp, r7
 8015910:	b004      	add	sp, #16
 8015912:	bd80      	pop	{r7, pc}

08015914 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 801591e:	683a      	ldr	r2, [r7, #0]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	0011      	movs	r1, r2
 8015924:	0018      	movs	r0, r3
 8015926:	f7ff ffc3 	bl	80158b0 <_stm32_ed_get>
 801592a:	0003      	movs	r3, r0
 801592c:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	2201      	movs	r2, #1
 8015934:	4013      	ands	r3, r2
 8015936:	d101      	bne.n	801593c <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 8015938:	23ff      	movs	r3, #255	; 0xff
 801593a:	e007      	b.n	801594c <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	2204      	movs	r2, #4
 8015942:	4013      	ands	r3, r2
 8015944:	d101      	bne.n	801594a <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 8015946:	2300      	movs	r3, #0
 8015948:	e000      	b.n	801594c <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 801594a:	2301      	movs	r3, #1
}
 801594c:	0018      	movs	r0, r3
 801594e:	46bd      	mov	sp, r7
 8015950:	b004      	add	sp, #16
 8015952:	bd80      	pop	{r7, pc}

08015954 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b082      	sub	sp, #8
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
 801595c:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 801595e:	2300      	movs	r3, #0
}
 8015960:	0018      	movs	r0, r3
 8015962:	46bd      	mov	sp, r7
 8015964:	b002      	add	sp, #8
 8015966:	bd80      	pop	{r7, pc}

08015968 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b086      	sub	sp, #24
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d106      	bne.n	801598a <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 801597c:	2255      	movs	r2, #85	; 0x55
 801597e:	2102      	movs	r1, #2
 8015980:	2002      	movs	r0, #2
 8015982:	f7fe f9ab 	bl	8013cdc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 8015986:	2355      	movs	r3, #85	; 0x55
 8015988:	e077      	b.n	8015a7a <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	69db      	ldr	r3, [r3, #28]
 801598e:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	3b0a      	subs	r3, #10
 8015994:	2b0b      	cmp	r3, #11
 8015996:	d867      	bhi.n	8015a68 <_ux_dcd_stm32_function+0x100>
 8015998:	009a      	lsls	r2, r3, #2
 801599a:	4b3a      	ldr	r3, [pc, #232]	; (8015a84 <_ux_dcd_stm32_function+0x11c>)
 801599c:	18d3      	adds	r3, r2, r3
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	0011      	movs	r1, r2
 80159a8:	0018      	movs	r0, r3
 80159aa:	f7ff ffd3 	bl	8015954 <_ux_dcd_stm32_frame_number_get>
 80159ae:	0003      	movs	r3, r0
 80159b0:	617b      	str	r3, [r7, #20]
        break;
 80159b2:	e061      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	0011      	movs	r1, r2
 80159ba:	0018      	movs	r0, r3
 80159bc:	f000 f991 	bl	8015ce2 <_ux_dcd_stm32_transfer_request>
 80159c0:	0003      	movs	r3, r0
 80159c2:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 80159c4:	e058      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	0011      	movs	r1, r2
 80159cc:	0018      	movs	r0, r3
 80159ce:	f000 f967 	bl	8015ca0 <_ux_dcd_stm32_transfer_abort>
 80159d2:	0003      	movs	r3, r0
 80159d4:	617b      	str	r3, [r7, #20]
        break;
 80159d6:	e04f      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	0011      	movs	r1, r2
 80159de:	0018      	movs	r0, r3
 80159e0:	f7ff fe9a 	bl	8015718 <_ux_dcd_stm32_endpoint_create>
 80159e4:	0003      	movs	r3, r0
 80159e6:	617b      	str	r3, [r7, #20]
        break;
 80159e8:	e046      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	0011      	movs	r1, r2
 80159f0:	0018      	movs	r0, r3
 80159f2:	f7ff fee1 	bl	80157b8 <_ux_dcd_stm32_endpoint_destroy>
 80159f6:	0003      	movs	r3, r0
 80159f8:	617b      	str	r3, [r7, #20]
        break;
 80159fa:	e03d      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	0011      	movs	r1, r2
 8015a02:	0018      	movs	r0, r3
 8015a04:	f7ff fef2 	bl	80157ec <_ux_dcd_stm32_endpoint_reset>
 8015a08:	0003      	movs	r3, r0
 8015a0a:	617b      	str	r3, [r7, #20]
        break;
 8015a0c:	e034      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	0011      	movs	r1, r2
 8015a14:	0018      	movs	r0, r3
 8015a16:	f7ff ff2b 	bl	8015870 <_ux_dcd_stm32_endpoint_stall>
 8015a1a:	0003      	movs	r3, r0
 8015a1c:	617b      	str	r3, [r7, #20]
        break;
 8015a1e:	e02b      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	22c4      	movs	r2, #196	; 0xc4
 8015a24:	589b      	ldr	r3, [r3, r2]
 8015a26:	687a      	ldr	r2, [r7, #4]
 8015a28:	b2d2      	uxtb	r2, r2
 8015a2a:	0011      	movs	r1, r2
 8015a2c:	0018      	movs	r0, r3
 8015a2e:	f7ee ff75 	bl	800491c <HAL_PCD_SetAddress>
 8015a32:	0003      	movs	r3, r0
 8015a34:	617b      	str	r3, [r7, #20]
        break;
 8015a36:	e01f      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b0b      	cmp	r3, #11
 8015a3c:	d108      	bne.n	8015a50 <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	22c4      	movs	r2, #196	; 0xc4
 8015a42:	589b      	ldr	r3, [r3, r2]
 8015a44:	0018      	movs	r0, r3
 8015a46:	f7ee fe16 	bl	8004676 <HAL_PCD_Stop>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 8015a4e:	e013      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 8015a50:	2300      	movs	r3, #0
 8015a52:	617b      	str	r3, [r7, #20]
        break;
 8015a54:	e010      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	0011      	movs	r1, r2
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	f7ff ff59 	bl	8015914 <_ux_dcd_stm32_endpoint_status>
 8015a62:	0003      	movs	r3, r0
 8015a64:	617b      	str	r3, [r7, #20]
        break;
 8015a66:	e007      	b.n	8015a78 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 8015a68:	2254      	movs	r2, #84	; 0x54
 8015a6a:	2102      	movs	r1, #2
 8015a6c:	2002      	movs	r0, #2
 8015a6e:	f7fe f935 	bl	8013cdc <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 8015a72:	2354      	movs	r3, #84	; 0x54
 8015a74:	617b      	str	r3, [r7, #20]
        break;
 8015a76:	46c0      	nop			; (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 8015a78:	697b      	ldr	r3, [r7, #20]
}
 8015a7a:	0018      	movs	r0, r3
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	b006      	add	sp, #24
 8015a80:	bd80      	pop	{r7, pc}
 8015a82:	46c0      	nop			; (mov r8, r8)
 8015a84:	0801861c 	.word	0x0801861c

08015a88 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015a92:	4b13      	ldr	r3, [pc, #76]	; (8015ae0 <_ux_dcd_stm32_initialize+0x58>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2280      	movs	r2, #128	; 0x80
 8015a9c:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 8015a9e:	22c8      	movs	r2, #200	; 0xc8
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	2000      	movs	r0, #0
 8015aa4:	f7fe fabe 	bl	8014024 <_ux_utility_memory_allocate>
 8015aa8:	0003      	movs	r3, r0
 8015aaa:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d101      	bne.n	8015ab6 <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 8015ab2:	2312      	movs	r3, #18
 8015ab4:	e010      	b.n	8015ad8 <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	68ba      	ldr	r2, [r7, #8]
 8015aba:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	68fa      	ldr	r2, [r7, #12]
 8015ac0:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	4a07      	ldr	r2, [pc, #28]	; (8015ae4 <_ux_dcd_stm32_initialize+0x5c>)
 8015ac6:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 8015ac8:	683a      	ldr	r2, [r7, #0]
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	21c4      	movs	r1, #196	; 0xc4
 8015ace:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8015ad6:	2300      	movs	r3, #0
}
 8015ad8:	0018      	movs	r0, r3
 8015ada:	46bd      	mov	sp, r7
 8015adc:	b004      	add	sp, #16
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	20008db8 	.word	0x20008db8
 8015ae4:	08015969 	.word	0x08015969

08015ae8 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b086      	sub	sp, #24
 8015aec:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015aee:	4b6a      	ldr	r3, [pc, #424]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	69db      	ldr	r3, [r3, #28]
 8015af8:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8015afa:	4b67      	ldr	r3, [pc, #412]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	3320      	adds	r3, #32
 8015b00:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8015b02:	4b65      	ldr	r3, [pc, #404]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	23dc      	movs	r3, #220	; 0xdc
 8015b08:	005b      	lsls	r3, r3, #1
 8015b0a:	58d3      	ldr	r3, [r2, r3]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d114      	bne.n	8015b3a <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8015b10:	4b61      	ldr	r3, [pc, #388]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b12:	6819      	ldr	r1, [r3, #0]
 8015b14:	4b60      	ldr	r3, [pc, #384]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	23a8      	movs	r3, #168	; 0xa8
 8015b1a:	005b      	lsls	r3, r3, #1
 8015b1c:	58c9      	ldr	r1, [r1, r3]
 8015b1e:	2394      	movs	r3, #148	; 0x94
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8015b24:	4b5c      	ldr	r3, [pc, #368]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b26:	6819      	ldr	r1, [r3, #0]
 8015b28:	4b5b      	ldr	r3, [pc, #364]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	23aa      	movs	r3, #170	; 0xaa
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	58c9      	ldr	r1, [r1, r3]
 8015b32:	2396      	movs	r3, #150	; 0x96
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	50d1      	str	r1, [r2, r3]
 8015b38:	e035      	b.n	8015ba6 <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 8015b3a:	4b57      	ldr	r3, [pc, #348]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	23dc      	movs	r3, #220	; 0xdc
 8015b40:	005b      	lsls	r3, r3, #1
 8015b42:	2100      	movs	r1, #0
 8015b44:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 8015b46:	4b54      	ldr	r3, [pc, #336]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	23ce      	movs	r3, #206	; 0xce
 8015b4c:	005b      	lsls	r3, r3, #1
 8015b4e:	58d3      	ldr	r3, [r2, r3]
 8015b50:	2b01      	cmp	r3, #1
 8015b52:	d114      	bne.n	8015b7e <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8015b54:	4b50      	ldr	r3, [pc, #320]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b56:	6819      	ldr	r1, [r3, #0]
 8015b58:	4b4f      	ldr	r3, [pc, #316]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	2398      	movs	r3, #152	; 0x98
 8015b5e:	005b      	lsls	r3, r3, #1
 8015b60:	58c9      	ldr	r1, [r1, r3]
 8015b62:	2394      	movs	r3, #148	; 0x94
 8015b64:	005b      	lsls	r3, r3, #1
 8015b66:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8015b68:	4b4b      	ldr	r3, [pc, #300]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b6a:	6819      	ldr	r1, [r3, #0]
 8015b6c:	4b4a      	ldr	r3, [pc, #296]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	239a      	movs	r3, #154	; 0x9a
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	58c9      	ldr	r1, [r1, r3]
 8015b76:	2396      	movs	r3, #150	; 0x96
 8015b78:	005b      	lsls	r3, r3, #1
 8015b7a:	50d1      	str	r1, [r2, r3]
 8015b7c:	e013      	b.n	8015ba6 <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8015b7e:	4b46      	ldr	r3, [pc, #280]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b80:	6819      	ldr	r1, [r3, #0]
 8015b82:	4b45      	ldr	r3, [pc, #276]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	239c      	movs	r3, #156	; 0x9c
 8015b88:	005b      	lsls	r3, r3, #1
 8015b8a:	58c9      	ldr	r1, [r1, r3]
 8015b8c:	2394      	movs	r3, #148	; 0x94
 8015b8e:	005b      	lsls	r3, r3, #1
 8015b90:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8015b92:	4b41      	ldr	r3, [pc, #260]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b94:	6819      	ldr	r1, [r3, #0]
 8015b96:	4b40      	ldr	r3, [pc, #256]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	239e      	movs	r3, #158	; 0x9e
 8015b9c:	005b      	lsls	r3, r3, #1
 8015b9e:	58c9      	ldr	r1, [r1, r3]
 8015ba0:	2396      	movs	r3, #150	; 0x96
 8015ba2:	005b      	lsls	r3, r3, #1
 8015ba4:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8015ba6:	4b3c      	ldr	r3, [pc, #240]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	2394      	movs	r3, #148	; 0x94
 8015bac:	005b      	lsls	r3, r3, #1
 8015bae:	58d3      	ldr	r3, [r2, r3]
 8015bb0:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 8015bb6:	4939      	ldr	r1, [pc, #228]	; (8015c9c <_ux_dcd_stm32_initialize_complete+0x1b4>)
 8015bb8:	68b8      	ldr	r0, [r7, #8]
 8015bba:	220e      	movs	r2, #14
 8015bbc:	f7fe f97d 	bl	8013eba <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	336c      	adds	r3, #108	; 0x6c
 8015bc4:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	22fa      	movs	r2, #250	; 0xfa
 8015bca:	0092      	lsls	r2, r2, #2
 8015bcc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	333c      	adds	r3, #60	; 0x3c
 8015bda:	001a      	movs	r2, r3
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 8015be8:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	333c      	adds	r3, #60	; 0x3c
 8015bf6:	001a      	movs	r2, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8015c04:	6978      	ldr	r0, [r7, #20]
 8015c06:	210e      	movs	r1, #14
 8015c08:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	22c4      	movs	r2, #196	; 0xc4
 8015c0e:	589b      	ldr	r3, [r3, r2]
 8015c10:	2100      	movs	r1, #0
 8015c12:	0018      	movs	r0, r3
 8015c14:	f7ef f919 	bl	8004e4a <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	22c4      	movs	r2, #196	; 0xc4
 8015c1c:	5898      	ldr	r0, [r3, r2]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	69db      	ldr	r3, [r3, #28]
 8015c22:	b29a      	uxth	r2, r3
 8015c24:	2300      	movs	r3, #0
 8015c26:	2100      	movs	r1, #0
 8015c28:	f7ee fea3 	bl	8004972 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	22c4      	movs	r2, #196	; 0xc4
 8015c30:	589b      	ldr	r3, [r3, r2]
 8015c32:	2180      	movs	r1, #128	; 0x80
 8015c34:	0018      	movs	r0, r3
 8015c36:	f7ef f908 	bl	8004e4a <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	22c4      	movs	r2, #196	; 0xc4
 8015c3e:	5898      	ldr	r0, [r3, r2]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	69db      	ldr	r3, [r3, #28]
 8015c44:	b29a      	uxth	r2, r3
 8015c46:	2300      	movs	r3, #0
 8015c48:	2180      	movs	r1, #128	; 0x80
 8015c4a:	f7ee fe92 	bl	8004972 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2200      	movs	r2, #0
 8015c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2201      	movs	r2, #1
 8015c58:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2208      	movs	r2, #8
 8015c64:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2208      	movs	r2, #8
 8015c6a:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015c72:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	23e0      	movs	r3, #224	; 0xe0
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	58d3      	ldr	r3, [r2, r3]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d006      	beq.n	8015c8e <_ux_dcd_stm32_initialize_complete+0x1a6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8015c80:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	23e0      	movs	r3, #224	; 0xe0
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	58d3      	ldr	r3, [r2, r3]
 8015c8a:	2001      	movs	r0, #1
 8015c8c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8015c8e:	2300      	movs	r3, #0
}
 8015c90:	0018      	movs	r0, r3
 8015c92:	46bd      	mov	sp, r7
 8015c94:	b006      	add	sp, #24
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	20008db8 	.word	0x20008db8
 8015c9c:	20000030 	.word	0x20000030

08015ca0 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	689b      	ldr	r3, [r3, #8]
 8015cae:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	22c4      	movs	r2, #196	; 0xc4
 8015cb4:	589a      	ldr	r2, [r3, r2]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	695b      	ldr	r3, [r3, #20]
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	0019      	movs	r1, r3
 8015cbe:	0010      	movs	r0, r2
 8015cc0:	f7ef f88a 	bl	8004dd8 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	22c4      	movs	r2, #196	; 0xc4
 8015cc8:	589a      	ldr	r2, [r3, r2]
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	695b      	ldr	r3, [r3, #20]
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	0019      	movs	r1, r3
 8015cd2:	0010      	movs	r0, r2
 8015cd4:	f7ef f8b9 	bl	8004e4a <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	0018      	movs	r0, r3
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	b004      	add	sp, #16
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b084      	sub	sp, #16
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
 8015cea:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	689b      	ldr	r3, [r3, #8]
 8015cf0:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cf6:	2b03      	cmp	r3, #3
 8015cf8:	d12d      	bne.n	8015d56 <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	22c4      	movs	r2, #196	; 0xc4
 8015cfe:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8015d04:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	695b      	ldr	r3, [r3, #20]
 8015d0e:	f7ee ff5b 	bl	8004bc8 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	695b      	ldr	r3, [r3, #20]
 8015d16:	2280      	movs	r2, #128	; 0x80
 8015d18:	4393      	bics	r3, r2
 8015d1a:	d046      	beq.n	8015daa <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	3330      	adds	r3, #48	; 0x30
 8015d20:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8015d26:	0019      	movs	r1, r3
 8015d28:	0010      	movs	r0, r2
 8015d2a:	f7fe fc43 	bl	80145b4 <_ux_utility_semaphore_get>
 8015d2e:	0003      	movs	r3, r0
 8015d30:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d001      	beq.n	8015d3c <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	e037      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	695a      	ldr	r2, [r3, #20]
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d002      	beq.n	8015d52 <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d50:	e02c      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8015d52:	2300      	movs	r3, #0
 8015d54:	e02a      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	22c4      	movs	r2, #196	; 0xc4
 8015d5a:	5898      	ldr	r0, [r3, r2]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8015d60:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	695b      	ldr	r3, [r3, #20]
 8015d6a:	f7ee fecf 	bl	8004b0c <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	2280      	movs	r2, #128	; 0x80
 8015d74:	4393      	bics	r3, r2
 8015d76:	d018      	beq.n	8015daa <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	3330      	adds	r3, #48	; 0x30
 8015d7c:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8015d82:	0019      	movs	r1, r3
 8015d84:	0010      	movs	r0, r2
 8015d86:	f7fe fc15 	bl	80145b4 <_ux_utility_semaphore_get>
 8015d8a:	0003      	movs	r3, r0
 8015d8c:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d001      	beq.n	8015d98 <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	e009      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d002      	beq.n	8015da6 <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da4:	e002      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 8015da6:	2300      	movs	r3, #0
 8015da8:	e000      	b.n	8015dac <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	0018      	movs	r0, r3
 8015dae:	46bd      	mov	sp, r7
 8015db0:	b004      	add	sp, #16
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
}
 8015dc6:	0018      	movs	r0, r3
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	b004      	add	sp, #16
 8015dcc:	bd80      	pop	{r7, pc}

08015dce <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 8015dce:	b580      	push	{r7, lr}
 8015dd0:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8015dd2:	f7f6 fa03 	bl	800c1dc <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8015dd6:	f000 f821 	bl	8015e1c <USBPD_DPM_InitCore>
 8015dda:	1e03      	subs	r3, r0, #0
 8015ddc:	d001      	beq.n	8015de2 <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 8015dde:	2302      	movs	r3, #2
 8015de0:	e000      	b.n	8015de4 <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 8015de2:	2300      	movs	r3, #0
}
 8015de4:	0018      	movs	r0, r3
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <MX_USBPD_Init>:

/* USBPD init function */
unsigned int MX_USBPD_Init(void *memory_ptr)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
  unsigned int result = USBPD_OK;
 8015df2:	2300      	movs	r3, #0
 8015df4:	60fb      	str	r3, [r7, #12]

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8015df6:	f000 fbe7 	bl	80165c8 <USBPD_DPM_UserInit>
 8015dfa:	1e03      	subs	r3, r0, #0
 8015dfc:	d001      	beq.n	8015e02 <MX_USBPD_Init+0x18>
  {
    return USBPD_ERROR;
 8015dfe:	2302      	movs	r3, #2
 8015e00:	e008      	b.n	8015e14 <MX_USBPD_Init+0x2a>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS((void*)memory_ptr))
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	0018      	movs	r0, r3
 8015e06:	f000 f8df 	bl	8015fc8 <USBPD_DPM_InitOS>
 8015e0a:	1e03      	subs	r3, r0, #0
 8015e0c:	d001      	beq.n	8015e12 <MX_USBPD_Init+0x28>
  {
    return USBPD_ERROR;
 8015e0e:	2302      	movs	r3, #2
 8015e10:	e000      	b.n	8015e14 <MX_USBPD_Init+0x2a>
  }
  return result;
 8015e12:	68fb      	ldr	r3, [r7, #12]
}
 8015e14:	0018      	movs	r0, r3
 8015e16:	46bd      	mov	sp, r7
 8015e18:	b004      	add	sp, #16
 8015e1a:	bd80      	pop	{r7, pc}

08015e1c <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015e1c:	b5b0      	push	{r4, r5, r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8015e22:	1dfb      	adds	r3, r7, #7
 8015e24:	2200      	movs	r2, #0
 8015e26:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8015e28:	4b62      	ldr	r3, [pc, #392]	; (8015fb4 <USBPD_DPM_InitCore+0x198>)
 8015e2a:	0018      	movs	r0, r3
 8015e2c:	f7eb f8aa 	bl	8000f84 <USBPD_PE_CheckLIB>
 8015e30:	0003      	movs	r3, r0
 8015e32:	2b01      	cmp	r3, #1
 8015e34:	d003      	beq.n	8015e3e <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8015e36:	1dfb      	adds	r3, r7, #7
 8015e38:	2202      	movs	r2, #2
 8015e3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8015e3c:	e0b4      	b.n	8015fa8 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8015e3e:	f7eb f8af 	bl	8000fa0 <USBPD_PE_GetMemoryConsumption>
 8015e42:	0003      	movs	r3, r0
 8015e44:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015e46:	1dbb      	adds	r3, r7, #6
 8015e48:	2200      	movs	r2, #0
 8015e4a:	701a      	strb	r2, [r3, #0]
 8015e4c:	e0a6      	b.n	8015f9c <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8015e4e:	1dbb      	adds	r3, r7, #6
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	4a59      	ldr	r2, [pc, #356]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	18d3      	adds	r3, r2, r3
 8015e58:	785a      	ldrb	r2, [r3, #1]
 8015e5a:	2108      	movs	r1, #8
 8015e5c:	438a      	bics	r2, r1
 8015e5e:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8015e60:	1dbb      	adds	r3, r7, #6
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	1dbb      	adds	r3, r7, #6
 8015e66:	7818      	ldrb	r0, [r3, #0]
 8015e68:	4954      	ldr	r1, [pc, #336]	; (8015fbc <USBPD_DPM_InitCore+0x1a0>)
 8015e6a:	0013      	movs	r3, r2
 8015e6c:	005b      	lsls	r3, r3, #1
 8015e6e:	189b      	adds	r3, r3, r2
 8015e70:	009b      	lsls	r3, r3, #2
 8015e72:	18cb      	adds	r3, r1, r3
 8015e74:	791b      	ldrb	r3, [r3, #4]
 8015e76:	079b      	lsls	r3, r3, #30
 8015e78:	0f9b      	lsrs	r3, r3, #30
 8015e7a:	b2d9      	uxtb	r1, r3
 8015e7c:	4b4e      	ldr	r3, [pc, #312]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015e7e:	0082      	lsls	r2, r0, #2
 8015e80:	2003      	movs	r0, #3
 8015e82:	4001      	ands	r1, r0
 8015e84:	000c      	movs	r4, r1
 8015e86:	5cd1      	ldrb	r1, [r2, r3]
 8015e88:	2003      	movs	r0, #3
 8015e8a:	4381      	bics	r1, r0
 8015e8c:	1c08      	adds	r0, r1, #0
 8015e8e:	1c21      	adds	r1, r4, #0
 8015e90:	4301      	orrs	r1, r0
 8015e92:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8015e94:	1dbb      	adds	r3, r7, #6
 8015e96:	781a      	ldrb	r2, [r3, #0]
 8015e98:	1dbb      	adds	r3, r7, #6
 8015e9a:	7818      	ldrb	r0, [r3, #0]
 8015e9c:	4947      	ldr	r1, [pc, #284]	; (8015fbc <USBPD_DPM_InitCore+0x1a0>)
 8015e9e:	0013      	movs	r3, r2
 8015ea0:	005b      	lsls	r3, r3, #1
 8015ea2:	189b      	adds	r3, r3, r2
 8015ea4:	009b      	lsls	r3, r3, #2
 8015ea6:	18cb      	adds	r3, r1, r3
 8015ea8:	791b      	ldrb	r3, [r3, #4]
 8015eaa:	075b      	lsls	r3, r3, #29
 8015eac:	0fdb      	lsrs	r3, r3, #31
 8015eae:	b2d9      	uxtb	r1, r3
 8015eb0:	4b41      	ldr	r3, [pc, #260]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015eb2:	0082      	lsls	r2, r0, #2
 8015eb4:	2001      	movs	r0, #1
 8015eb6:	4001      	ands	r1, r0
 8015eb8:	008c      	lsls	r4, r1, #2
 8015eba:	5cd1      	ldrb	r1, [r2, r3]
 8015ebc:	2004      	movs	r0, #4
 8015ebe:	4381      	bics	r1, r0
 8015ec0:	1c08      	adds	r0, r1, #0
 8015ec2:	1c21      	adds	r1, r4, #0
 8015ec4:	4301      	orrs	r1, r0
 8015ec6:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015ec8:	1dbb      	adds	r3, r7, #6
 8015eca:	781a      	ldrb	r2, [r3, #0]
 8015ecc:	4b3a      	ldr	r3, [pc, #232]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015ece:	0092      	lsls	r2, r2, #2
 8015ed0:	5cd1      	ldrb	r1, [r2, r3]
 8015ed2:	2010      	movs	r0, #16
 8015ed4:	4381      	bics	r1, r0
 8015ed6:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8015ed8:	1dbb      	adds	r3, r7, #6
 8015eda:	781a      	ldrb	r2, [r3, #0]
 8015edc:	4b36      	ldr	r3, [pc, #216]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015ede:	0092      	lsls	r2, r2, #2
 8015ee0:	5cd1      	ldrb	r1, [r2, r3]
 8015ee2:	203f      	movs	r0, #63	; 0x3f
 8015ee4:	4001      	ands	r1, r0
 8015ee6:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8015ee8:	1dbb      	adds	r3, r7, #6
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	4a32      	ldr	r2, [pc, #200]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	18d3      	adds	r3, r2, r3
 8015ef2:	785a      	ldrb	r2, [r3, #1]
 8015ef4:	2160      	movs	r1, #96	; 0x60
 8015ef6:	438a      	bics	r2, r1
 8015ef8:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8015efa:	1dbb      	adds	r3, r7, #6
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	4a2e      	ldr	r2, [pc, #184]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015f00:	009b      	lsls	r3, r3, #2
 8015f02:	18d3      	adds	r3, r2, r3
 8015f04:	785a      	ldrb	r2, [r3, #1]
 8015f06:	217f      	movs	r1, #127	; 0x7f
 8015f08:	400a      	ands	r2, r1
 8015f0a:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8015f0c:	1dbb      	adds	r3, r7, #6
 8015f0e:	781a      	ldrb	r2, [r3, #0]
 8015f10:	0013      	movs	r3, r2
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	189b      	adds	r3, r3, r2
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	4a28      	ldr	r2, [pc, #160]	; (8015fbc <USBPD_DPM_InitCore+0x1a0>)
 8015f1a:	189c      	adds	r4, r3, r2
 8015f1c:	1dbb      	adds	r3, r7, #6
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	009a      	lsls	r2, r3, #2
 8015f22:	4b25      	ldr	r3, [pc, #148]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015f24:	18d2      	adds	r2, r2, r3
 8015f26:	4926      	ldr	r1, [pc, #152]	; (8015fc0 <USBPD_DPM_InitCore+0x1a4>)
 8015f28:	1dbb      	adds	r3, r7, #6
 8015f2a:	7818      	ldrb	r0, [r3, #0]
 8015f2c:	0013      	movs	r3, r2
 8015f2e:	0022      	movs	r2, r4
 8015f30:	f7ea fa1e 	bl	8000370 <USBPD_CAD_Init>
 8015f34:	1e03      	subs	r3, r0, #0
 8015f36:	d003      	beq.n	8015f40 <USBPD_DPM_InitCore+0x124>
 8015f38:	1dfb      	adds	r3, r7, #7
 8015f3a:	2202      	movs	r2, #2
 8015f3c:	701a      	strb	r2, [r3, #0]
 8015f3e:	e033      	b.n	8015fa8 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8015f40:	1dbb      	adds	r3, r7, #6
 8015f42:	781a      	ldrb	r2, [r3, #0]
 8015f44:	0013      	movs	r3, r2
 8015f46:	005b      	lsls	r3, r3, #1
 8015f48:	189b      	adds	r3, r3, r2
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	4a1b      	ldr	r2, [pc, #108]	; (8015fbc <USBPD_DPM_InitCore+0x1a0>)
 8015f4e:	1899      	adds	r1, r3, r2
 8015f50:	1dbb      	adds	r3, r7, #6
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	009a      	lsls	r2, r3, #2
 8015f56:	4b18      	ldr	r3, [pc, #96]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015f58:	18d2      	adds	r2, r2, r3
 8015f5a:	1dfc      	adds	r4, r7, #7
 8015f5c:	4d19      	ldr	r5, [pc, #100]	; (8015fc4 <USBPD_DPM_InitCore+0x1a8>)
 8015f5e:	1dbb      	adds	r3, r7, #6
 8015f60:	7818      	ldrb	r0, [r3, #0]
 8015f62:	002b      	movs	r3, r5
 8015f64:	f7ea fb1a 	bl	800059c <USBPD_PE_Init>
 8015f68:	0003      	movs	r3, r0
 8015f6a:	7023      	strb	r3, [r4, #0]
 8015f6c:	1dfb      	adds	r3, r7, #7
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d119      	bne.n	8015fa8 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8015f74:	1dbb      	adds	r3, r7, #6
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	4a0f      	ldr	r2, [pc, #60]	; (8015fb8 <USBPD_DPM_InitCore+0x19c>)
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	18d3      	adds	r3, r2, r3
 8015f7e:	785a      	ldrb	r2, [r3, #1]
 8015f80:	2108      	movs	r1, #8
 8015f82:	430a      	orrs	r2, r1
 8015f84:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8015f86:	1dbb      	adds	r3, r7, #6
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	2101      	movs	r1, #1
 8015f8c:	0018      	movs	r0, r3
 8015f8e:	f7ea fa57 	bl	8000440 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015f92:	1dbb      	adds	r3, r7, #6
 8015f94:	1dba      	adds	r2, r7, #6
 8015f96:	7812      	ldrb	r2, [r2, #0]
 8015f98:	3201      	adds	r2, #1
 8015f9a:	701a      	strb	r2, [r3, #0]
 8015f9c:	1dbb      	adds	r3, r7, #6
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d100      	bne.n	8015fa6 <USBPD_DPM_InitCore+0x18a>
 8015fa4:	e753      	b.n	8015e4e <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 8015fa6:	46c0      	nop			; (mov r8, r8)
  return _retr;
 8015fa8:	1dfb      	adds	r3, r7, #7
 8015faa:	781b      	ldrb	r3, [r3, #0]
}
 8015fac:	0018      	movs	r0, r3
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	b002      	add	sp, #8
 8015fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8015fb4:	30410004 	.word	0x30410004
 8015fb8:	20008f90 	.word	0x20008f90
 8015fbc:	20000058 	.word	0x20000058
 8015fc0:	0801864c 	.word	0x0801864c
 8015fc4:	08018654 	.word	0x08018654

08015fc8 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
uint32_t USBPD_DPM_InitOS(void *MemoryPtr)
{
 8015fc8:	b5b0      	push	{r4, r5, r7, lr}
 8015fca:	b08e      	sub	sp, #56	; 0x38
 8015fcc:	af08      	add	r7, sp, #32
 8015fce:	6078      	str	r0, [r7, #4]
  OS_INIT();
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	60fb      	str	r3, [r7, #12]
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	617b      	str	r3, [r7, #20]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 8015fd8:	2408      	movs	r4, #8
 8015fda:	1939      	adds	r1, r7, r4
 8015fdc:	68f8      	ldr	r0, [r7, #12]
 8015fde:	2300      	movs	r3, #0
 8015fe0:	2204      	movs	r2, #4
 8015fe2:	f7fa ff8b 	bl	8010efc <_txe_byte_allocate>
 8015fe6:	0003      	movs	r3, r0
 8015fe8:	617b      	str	r3, [r7, #20]
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d000      	beq.n	8015ff2 <USBPD_DPM_InitOS+0x2a>
 8015ff0:	e08c      	b.n	801610c <USBPD_DPM_InitOS+0x144>
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	4948      	ldr	r1, [pc, #288]	; (8016118 <USBPD_DPM_InitOS+0x150>)
 8015ff6:	4849      	ldr	r0, [pc, #292]	; (801611c <USBPD_DPM_InitOS+0x154>)
 8015ff8:	2238      	movs	r2, #56	; 0x38
 8015ffa:	9201      	str	r2, [sp, #4]
 8015ffc:	2204      	movs	r2, #4
 8015ffe:	9200      	str	r2, [sp, #0]
 8016000:	2201      	movs	r2, #1
 8016002:	f7fb fb1f 	bl	8011644 <_txe_queue_create>
 8016006:	0003      	movs	r3, r0
 8016008:	617b      	str	r3, [r7, #20]
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d000      	beq.n	8016012 <USBPD_DPM_InitOS+0x4a>
 8016010:	e07c      	b.n	801610c <USBPD_DPM_InitOS+0x144>
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8016012:	2380      	movs	r3, #128	; 0x80
 8016014:	00da      	lsls	r2, r3, #3
 8016016:	1939      	adds	r1, r7, r4
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	2300      	movs	r3, #0
 801601c:	f7fa ff6e 	bl	8010efc <_txe_byte_allocate>
 8016020:	0003      	movs	r3, r0
 8016022:	617b      	str	r3, [r7, #20]
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d170      	bne.n	801610c <USBPD_DPM_InitOS+0x144>
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	4c3c      	ldr	r4, [pc, #240]	; (8016120 <USBPD_DPM_InitOS+0x158>)
 801602e:	493d      	ldr	r1, [pc, #244]	; (8016124 <USBPD_DPM_InitOS+0x15c>)
 8016030:	483d      	ldr	r0, [pc, #244]	; (8016128 <USBPD_DPM_InitOS+0x160>)
 8016032:	22b0      	movs	r2, #176	; 0xb0
 8016034:	9206      	str	r2, [sp, #24]
 8016036:	2201      	movs	r2, #1
 8016038:	9205      	str	r2, [sp, #20]
 801603a:	2200      	movs	r2, #0
 801603c:	9204      	str	r2, [sp, #16]
 801603e:	2201      	movs	r2, #1
 8016040:	9203      	str	r2, [sp, #12]
 8016042:	2201      	movs	r2, #1
 8016044:	9202      	str	r2, [sp, #8]
 8016046:	2280      	movs	r2, #128	; 0x80
 8016048:	00d2      	lsls	r2, r2, #3
 801604a:	9201      	str	r2, [sp, #4]
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	2300      	movs	r3, #0
 8016050:	0022      	movs	r2, r4
 8016052:	f7fb fd77 	bl	8011b44 <_txe_thread_create>
 8016056:	0003      	movs	r3, r0
 8016058:	617b      	str	r3, [r7, #20]
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d155      	bne.n	801610c <USBPD_DPM_InitOS+0x144>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8016060:	2300      	movs	r3, #0
 8016062:	613b      	str	r3, [r7, #16]
 8016064:	e04e      	b.n	8016104 <USBPD_DPM_InitOS+0x13c>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 8016066:	2408      	movs	r4, #8
 8016068:	1939      	adds	r1, r7, r4
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	2300      	movs	r3, #0
 801606e:	2204      	movs	r2, #4
 8016070:	f7fa ff44 	bl	8010efc <_txe_byte_allocate>
 8016074:	0003      	movs	r3, r0
 8016076:	617b      	str	r3, [r7, #20]
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d146      	bne.n	801610c <USBPD_DPM_InitOS+0x144>
 801607e:	693a      	ldr	r2, [r7, #16]
 8016080:	0013      	movs	r3, r2
 8016082:	00db      	lsls	r3, r3, #3
 8016084:	1a9b      	subs	r3, r3, r2
 8016086:	00db      	lsls	r3, r3, #3
 8016088:	4a28      	ldr	r2, [pc, #160]	; (801612c <USBPD_DPM_InitOS+0x164>)
 801608a:	1898      	adds	r0, r3, r2
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	4928      	ldr	r1, [pc, #160]	; (8016130 <USBPD_DPM_InitOS+0x168>)
 8016090:	2238      	movs	r2, #56	; 0x38
 8016092:	9201      	str	r2, [sp, #4]
 8016094:	2204      	movs	r2, #4
 8016096:	9200      	str	r2, [sp, #0]
 8016098:	2201      	movs	r2, #1
 801609a:	f7fb fad3 	bl	8011644 <_txe_queue_create>
 801609e:	0003      	movs	r3, r0
 80160a0:	617b      	str	r3, [r7, #20]
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d131      	bne.n	801610c <USBPD_DPM_InitOS+0x144>

    if (index == USBPD_PORT_0)
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d127      	bne.n	80160fe <USBPD_DPM_InitOS+0x136>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 80160ae:	2380      	movs	r3, #128	; 0x80
 80160b0:	00da      	lsls	r2, r3, #3
 80160b2:	1939      	adds	r1, r7, r4
 80160b4:	68f8      	ldr	r0, [r7, #12]
 80160b6:	2300      	movs	r3, #0
 80160b8:	f7fa ff20 	bl	8010efc <_txe_byte_allocate>
 80160bc:	0003      	movs	r3, r0
 80160be:	617b      	str	r3, [r7, #20]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d122      	bne.n	801610c <USBPD_DPM_InitOS+0x144>
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	693d      	ldr	r5, [r7, #16]
 80160ca:	4c1a      	ldr	r4, [pc, #104]	; (8016134 <USBPD_DPM_InitOS+0x16c>)
 80160cc:	491a      	ldr	r1, [pc, #104]	; (8016138 <USBPD_DPM_InitOS+0x170>)
 80160ce:	481b      	ldr	r0, [pc, #108]	; (801613c <USBPD_DPM_InitOS+0x174>)
 80160d0:	22b0      	movs	r2, #176	; 0xb0
 80160d2:	9206      	str	r2, [sp, #24]
 80160d4:	2201      	movs	r2, #1
 80160d6:	9205      	str	r2, [sp, #20]
 80160d8:	2200      	movs	r2, #0
 80160da:	9204      	str	r2, [sp, #16]
 80160dc:	2201      	movs	r2, #1
 80160de:	9203      	str	r2, [sp, #12]
 80160e0:	2201      	movs	r2, #1
 80160e2:	9202      	str	r2, [sp, #8]
 80160e4:	2280      	movs	r2, #128	; 0x80
 80160e6:	00d2      	lsls	r2, r2, #3
 80160e8:	9201      	str	r2, [sp, #4]
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	002b      	movs	r3, r5
 80160ee:	0022      	movs	r2, r4
 80160f0:	f7fb fd28 	bl	8011b44 <_txe_thread_create>
 80160f4:	0003      	movs	r3, r0
 80160f6:	617b      	str	r3, [r7, #20]
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d106      	bne.n	801610c <USBPD_DPM_InitOS+0x144>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	3301      	adds	r3, #1
 8016102:	613b      	str	r3, [r7, #16]
 8016104:	693b      	ldr	r3, [r7, #16]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d0ad      	beq.n	8016066 <USBPD_DPM_InitOS+0x9e>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 801610a:	46c0      	nop			; (mov r8, r8)

  return _retr;
 801610c:	697b      	ldr	r3, [r7, #20]
}
 801610e:	0018      	movs	r0, r3
 8016110:	46bd      	mov	sp, r7
 8016112:	b006      	add	sp, #24
 8016114:	bdb0      	pop	{r4, r5, r7, pc}
 8016116:	46c0      	nop			; (mov r8, r8)
 8016118:	080182cc 	.word	0x080182cc
 801611c:	20008e70 	.word	0x20008e70
 8016120:	08016211 	.word	0x08016211
 8016124:	080182d4 	.word	0x080182d4
 8016128:	20008ea8 	.word	0x20008ea8
 801612c:	20008f58 	.word	0x20008f58
 8016130:	080182d8 	.word	0x080182d8
 8016134:	080161a5 	.word	0x080161a5
 8016138:	080182dc 	.word	0x080182dc
 801613c:	20008dc0 	.word	0x20008dc0

08016140 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	0002      	movs	r2, r0
 8016148:	1dfb      	adds	r3, r7, #7
 801614a:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801614c:	4b09      	ldr	r3, [pc, #36]	; (8016174 <USBPD_PE_TaskWakeUp+0x34>)
 801614e:	60fb      	str	r3, [r7, #12]
 8016150:	1dfb      	adds	r3, r7, #7
 8016152:	781a      	ldrb	r2, [r3, #0]
 8016154:	0013      	movs	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	1a9b      	subs	r3, r3, r2
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	4a06      	ldr	r2, [pc, #24]	; (8016178 <USBPD_PE_TaskWakeUp+0x38>)
 801615e:	189b      	adds	r3, r3, r2
 8016160:	220c      	movs	r2, #12
 8016162:	18b9      	adds	r1, r7, r2
 8016164:	2200      	movs	r2, #0
 8016166:	0018      	movs	r0, r3
 8016168:	f7fb fb68 	bl	801183c <_txe_queue_send>
}
 801616c:	46c0      	nop			; (mov r8, r8)
 801616e:	46bd      	mov	sp, r7
 8016170:	b004      	add	sp, #16
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0000ffff 	.word	0x0000ffff
 8016178:	20008f58 	.word	0x20008f58

0801617c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b082      	sub	sp, #8
 8016180:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8016182:	4b06      	ldr	r3, [pc, #24]	; (801619c <USBPD_DPM_CADTaskWakeUp+0x20>)
 8016184:	607b      	str	r3, [r7, #4]
 8016186:	1d39      	adds	r1, r7, #4
 8016188:	4b05      	ldr	r3, [pc, #20]	; (80161a0 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801618a:	2200      	movs	r2, #0
 801618c:	0018      	movs	r0, r3
 801618e:	f7fb fb55 	bl	801183c <_txe_queue_send>
}
 8016192:	46c0      	nop			; (mov r8, r8)
 8016194:	46bd      	mov	sp, r7
 8016196:	b002      	add	sp, #8
 8016198:	bd80      	pop	{r7, pc}
 801619a:	46c0      	nop			; (mov r8, r8)
 801619c:	0000ffff 	.word	0x0000ffff
 80161a0:	20008e70 	.word	0x20008e70

080161a4 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b087      	sub	sp, #28
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 80161ac:	2317      	movs	r3, #23
 80161ae:	18fb      	adds	r3, r7, r3
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 80161b4:	2317      	movs	r3, #23
 80161b6:	18fb      	adds	r3, r7, r3
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	4a13      	ldr	r2, [pc, #76]	; (8016208 <USBPD_PE_Task+0x64>)
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	18d3      	adds	r3, r2, r3
 80161c0:	785b      	ldrb	r3, [r3, #1]
 80161c2:	06db      	lsls	r3, r3, #27
 80161c4:	0fdb      	lsrs	r3, r3, #31
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d105      	bne.n	80161d8 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 80161cc:	f7f9 fdf2 	bl	800fdb4 <_tx_thread_identify>
 80161d0:	0003      	movs	r3, r0
 80161d2:	0018      	movs	r0, r3
 80161d4:	f7fb fe24 	bl	8011e20 <_txe_thread_suspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 80161d8:	2417      	movs	r4, #23
 80161da:	193b      	adds	r3, r7, r4
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	0018      	movs	r0, r3
 80161e0:	f7eb f9c6 	bl	8001570 <USBPD_PE_StateMachine_SNK>
 80161e4:	0003      	movs	r3, r0
 80161e6:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 80161e8:	193b      	adds	r3, r7, r4
 80161ea:	781a      	ldrb	r2, [r3, #0]
 80161ec:	0013      	movs	r3, r2
 80161ee:	00db      	lsls	r3, r3, #3
 80161f0:	1a9b      	subs	r3, r3, r2
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	4a05      	ldr	r2, [pc, #20]	; (801620c <USBPD_PE_Task+0x68>)
 80161f6:	189b      	adds	r3, r3, r2
 80161f8:	693a      	ldr	r2, [r7, #16]
 80161fa:	210c      	movs	r1, #12
 80161fc:	1879      	adds	r1, r7, r1
 80161fe:	0018      	movs	r0, r3
 8016200:	f7fb fad0 	bl	80117a4 <_txe_queue_receive>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8016204:	e7d6      	b.n	80161b4 <USBPD_PE_Task+0x10>
 8016206:	46c0      	nop			; (mov r8, r8)
 8016208:	20008f90 	.word	0x20008f90
 801620c:	20008f58 	.word	0x20008f58

08016210 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b084      	sub	sp, #16
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8016218:	f7ea f919 	bl	800044e <USBPD_CAD_Process>
 801621c:	0003      	movs	r3, r0
 801621e:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	2308      	movs	r3, #8
 8016224:	18f9      	adds	r1, r7, r3
 8016226:	4b02      	ldr	r3, [pc, #8]	; (8016230 <USBPD_CAD_Task+0x20>)
 8016228:	0018      	movs	r0, r3
 801622a:	f7fb fabb 	bl	80117a4 <_txe_queue_receive>
    _timing = USBPD_CAD_Process();
 801622e:	e7f3      	b.n	8016218 <USBPD_CAD_Task+0x8>
 8016230:	20008e70 	.word	0x20008e70

08016234 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	af00      	add	r7, sp, #0
 801623a:	603a      	str	r2, [r7, #0]
 801623c:	1dfb      	adds	r3, r7, #7
 801623e:	1c02      	adds	r2, r0, #0
 8016240:	701a      	strb	r2, [r3, #0]
 8016242:	1dbb      	adds	r3, r7, #6
 8016244:	1c0a      	adds	r2, r1, #0
 8016246:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8016248:	1dbb      	adds	r3, r7, #6
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	2b04      	cmp	r3, #4
 801624e:	d009      	beq.n	8016264 <USBPD_DPM_CADCallback+0x30>
 8016250:	dd00      	ble.n	8016254 <USBPD_DPM_CADCallback+0x20>
 8016252:	e06f      	b.n	8016334 <USBPD_DPM_CADCallback+0x100>
 8016254:	2b03      	cmp	r3, #3
 8016256:	d01d      	beq.n	8016294 <USBPD_DPM_CADCallback+0x60>
 8016258:	dc6c      	bgt.n	8016334 <USBPD_DPM_CADCallback+0x100>
 801625a:	2b01      	cmp	r3, #1
 801625c:	d01a      	beq.n	8016294 <USBPD_DPM_CADCallback+0x60>
 801625e:	2b02      	cmp	r3, #2
 8016260:	d00c      	beq.n	801627c <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8016262:	e067      	b.n	8016334 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8016264:	1dfb      	adds	r3, r7, #7
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2104      	movs	r1, #4
 801626a:	0018      	movs	r0, r3
 801626c:	f000 f9b2 	bl	80165d4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8016270:	1dfb      	adds	r3, r7, #7
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	0018      	movs	r0, r3
 8016276:	f000 f867 	bl	8016348 <DPM_StartPETask>
      break;
 801627a:	e05c      	b.n	8016336 <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801627c:	1dfb      	adds	r3, r7, #7
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	2102      	movs	r1, #2
 8016282:	0018      	movs	r0, r3
 8016284:	f000 f9a6 	bl	80165d4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8016288:	1dfb      	adds	r3, r7, #7
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	0018      	movs	r0, r3
 801628e:	f000 f85b 	bl	8016348 <DPM_StartPETask>
      break;
 8016292:	e050      	b.n	8016336 <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 8016294:	230f      	movs	r3, #15
 8016296:	18fb      	adds	r3, r7, r3
 8016298:	2200      	movs	r2, #0
 801629a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801629c:	1dfb      	adds	r3, r7, #7
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	0018      	movs	r0, r3
 80162a2:	f7ff ff4d 	bl	8016140 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 80162a6:	e016      	b.n	80162d6 <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 80162a8:	2001      	movs	r0, #1
 80162aa:	f7f9 fef7 	bl	801009c <_tx_thread_sleep>
        _timeout++;
 80162ae:	210f      	movs	r1, #15
 80162b0:	187b      	adds	r3, r7, r1
 80162b2:	781a      	ldrb	r2, [r3, #0]
 80162b4:	187b      	adds	r3, r7, r1
 80162b6:	3201      	adds	r2, #1
 80162b8:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 80162ba:	187b      	adds	r3, r7, r1
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	2b1e      	cmp	r3, #30
 80162c0:	d909      	bls.n	80162d6 <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 80162c2:	1dfb      	adds	r3, r7, #7
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	22b0      	movs	r2, #176	; 0xb0
 80162c8:	435a      	muls	r2, r3
 80162ca:	4b1d      	ldr	r3, [pc, #116]	; (8016340 <USBPD_DPM_CADCallback+0x10c>)
 80162cc:	18d3      	adds	r3, r2, r3
 80162ce:	0018      	movs	r0, r3
 80162d0:	f7fb fda6 	bl	8011e20 <_txe_thread_suspend>
          break;
 80162d4:	e009      	b.n	80162ea <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 80162d6:	1dfb      	adds	r3, r7, #7
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	4a19      	ldr	r2, [pc, #100]	; (8016340 <USBPD_DPM_CADCallback+0x10c>)
 80162dc:	21b0      	movs	r1, #176	; 0xb0
 80162de:	434b      	muls	r3, r1
 80162e0:	18d3      	adds	r3, r2, r3
 80162e2:	3330      	adds	r3, #48	; 0x30
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	2b03      	cmp	r3, #3
 80162e8:	d1de      	bne.n	80162a8 <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 80162ea:	1dfb      	adds	r3, r7, #7
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	0018      	movs	r0, r3
 80162f0:	f7ea f9de 	bl	80006b0 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80162f4:	1dfb      	adds	r3, r7, #7
 80162f6:	781a      	ldrb	r2, [r3, #0]
 80162f8:	4b12      	ldr	r3, [pc, #72]	; (8016344 <USBPD_DPM_CADCallback+0x110>)
 80162fa:	0092      	lsls	r2, r2, #2
 80162fc:	5cd1      	ldrb	r1, [r2, r3]
 80162fe:	2010      	movs	r0, #16
 8016300:	4381      	bics	r1, r0
 8016302:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8016304:	1dfb      	adds	r3, r7, #7
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	4a0e      	ldr	r2, [pc, #56]	; (8016344 <USBPD_DPM_CADCallback+0x110>)
 801630a:	009b      	lsls	r3, r3, #2
 801630c:	18d3      	adds	r3, r2, r3
 801630e:	785a      	ldrb	r2, [r3, #1]
 8016310:	2107      	movs	r1, #7
 8016312:	438a      	bics	r2, r1
 8016314:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8016316:	1dbb      	adds	r3, r7, #6
 8016318:	781a      	ldrb	r2, [r3, #0]
 801631a:	1dfb      	adds	r3, r7, #7
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	0011      	movs	r1, r2
 8016320:	0018      	movs	r0, r3
 8016322:	f000 f957 	bl	80165d4 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8016326:	1dfb      	adds	r3, r7, #7
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	2169      	movs	r1, #105	; 0x69
 801632c:	0018      	movs	r0, r3
 801632e:	f000 f95f 	bl	80165f0 <USBPD_DPM_Notification>
      break;
 8016332:	e000      	b.n	8016336 <USBPD_DPM_CADCallback+0x102>
      break;
 8016334:	46c0      	nop			; (mov r8, r8)
  }
}
 8016336:	46c0      	nop			; (mov r8, r8)
 8016338:	46bd      	mov	sp, r7
 801633a:	b004      	add	sp, #16
 801633c:	bd80      	pop	{r7, pc}
 801633e:	46c0      	nop			; (mov r8, r8)
 8016340:	20008dc0 	.word	0x20008dc0
 8016344:	20008f90 	.word	0x20008f90

08016348 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b082      	sub	sp, #8
 801634c:	af00      	add	r7, sp, #0
 801634e:	0002      	movs	r2, r0
 8016350:	1dfb      	adds	r3, r7, #7
 8016352:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8016354:	1dfb      	adds	r3, r7, #7
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	0018      	movs	r0, r3
 801635a:	f7ea f9a3 	bl	80006a4 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801635e:	1dfb      	adds	r3, r7, #7
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	2b01      	cmp	r3, #1
 8016364:	d809      	bhi.n	801637a <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8016366:	1dfb      	adds	r3, r7, #7
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	22b0      	movs	r2, #176	; 0xb0
 801636c:	435a      	muls	r2, r3
 801636e:	4b09      	ldr	r3, [pc, #36]	; (8016394 <DPM_StartPETask+0x4c>)
 8016370:	18d3      	adds	r3, r2, r3
 8016372:	0018      	movs	r0, r3
 8016374:	f7fb fd34 	bl	8011de0 <_txe_thread_resume>
      break;
 8016378:	e002      	b.n	8016380 <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801637a:	f000 f80d 	bl	8016398 <USBPD_DPM_ErrorHandler>
      break;
 801637e:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8016380:	1dfb      	adds	r3, r7, #7
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	2168      	movs	r1, #104	; 0x68
 8016386:	0018      	movs	r0, r3
 8016388:	f000 f932 	bl	80165f0 <USBPD_DPM_Notification>
}
 801638c:	46c0      	nop			; (mov r8, r8)
 801638e:	46bd      	mov	sp, r7
 8016390:	b002      	add	sp, #8
 8016392:	bd80      	pop	{r7, pc}
 8016394:	20008dc0 	.word	0x20008dc0

08016398 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801639c:	e7fe      	b.n	801639c <USBPD_DPM_ErrorHandler+0x4>
	...

080163a0 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	0002      	movs	r2, r0
 80163a8:	1dfb      	adds	r3, r7, #7
 80163aa:	701a      	strb	r2, [r3, #0]
 80163ac:	1dbb      	adds	r3, r7, #6
 80163ae:	1c0a      	adds	r2, r1, #0
 80163b0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 80163b2:	230f      	movs	r3, #15
 80163b4:	18fb      	adds	r3, r7, r3
 80163b6:	2202      	movs	r2, #2
 80163b8:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 80163ba:	1dfb      	adds	r3, r7, #7
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d001      	beq.n	80163c6 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 80163c2:	2302      	movs	r3, #2
 80163c4:	e024      	b.n	8016410 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80163c6:	1dfb      	adds	r3, r7, #7
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	2208      	movs	r2, #8
 80163cc:	18ba      	adds	r2, r7, r2
 80163ce:	0011      	movs	r1, r2
 80163d0:	0018      	movs	r0, r3
 80163d2:	f000 fa88 	bl	80168e6 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 80163d6:	1dbb      	adds	r3, r7, #6
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d10a      	bne.n	80163f4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	4a0d      	ldr	r2, [pc, #52]	; (8016418 <USBPD_PWR_IF_SupplyReady+0x78>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d801      	bhi.n	80163ea <USBPD_PWR_IF_SupplyReady+0x4a>
 80163e6:	2200      	movs	r2, #0
 80163e8:	e000      	b.n	80163ec <USBPD_PWR_IF_SupplyReady+0x4c>
 80163ea:	2202      	movs	r2, #2
 80163ec:	230f      	movs	r3, #15
 80163ee:	18fb      	adds	r3, r7, r3
 80163f0:	701a      	strb	r2, [r3, #0]
 80163f2:	e00a      	b.n	801640a <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80163f4:	68ba      	ldr	r2, [r7, #8]
 80163f6:	23af      	movs	r3, #175	; 0xaf
 80163f8:	011b      	lsls	r3, r3, #4
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d901      	bls.n	8016402 <USBPD_PWR_IF_SupplyReady+0x62>
 80163fe:	2200      	movs	r2, #0
 8016400:	e000      	b.n	8016404 <USBPD_PWR_IF_SupplyReady+0x64>
 8016402:	2202      	movs	r2, #2
 8016404:	230f      	movs	r3, #15
 8016406:	18fb      	adds	r3, r7, r3
 8016408:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801640a:	230f      	movs	r3, #15
 801640c:	18fb      	adds	r3, r7, r3
 801640e:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8016410:	0018      	movs	r0, r3
 8016412:	46bd      	mov	sp, r7
 8016414:	b004      	add	sp, #16
 8016416:	bd80      	pop	{r7, pc}
 8016418:	000002ed 	.word	0x000002ed

0801641c <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	0002      	movs	r2, r0
 8016424:	1dfb      	adds	r3, r7, #7
 8016426:	701a      	strb	r2, [r3, #0]
 8016428:	1dbb      	adds	r3, r7, #6
 801642a:	1c0a      	adds	r2, r1, #0
 801642c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801642e:	230f      	movs	r3, #15
 8016430:	18fb      	adds	r3, r7, r3
 8016432:	2200      	movs	r2, #0
 8016434:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8016436:	1dfb      	adds	r3, r7, #7
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	0018      	movs	r0, r3
 801643c:	f7f6 fc7e 	bl	800cd3c <HW_IF_PWR_GetVoltage>
 8016440:	0003      	movs	r3, r0
 8016442:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8016444:	1dbb      	adds	r3, r7, #6
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	2b02      	cmp	r3, #2
 801644a:	d018      	beq.n	801647e <USBPD_PWR_IF_GetVBUSStatus+0x62>
 801644c:	dc21      	bgt.n	8016492 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 801644e:	2b00      	cmp	r3, #0
 8016450:	d002      	beq.n	8016458 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8016452:	2b01      	cmp	r3, #1
 8016454:	d009      	beq.n	801646a <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8016456:	e01c      	b.n	8016492 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	4a15      	ldr	r2, [pc, #84]	; (80164b0 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 801645c:	4293      	cmp	r3, r2
 801645e:	d81a      	bhi.n	8016496 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8016460:	230f      	movs	r3, #15
 8016462:	18fb      	adds	r3, r7, r3
 8016464:	2201      	movs	r2, #1
 8016466:	701a      	strb	r2, [r3, #0]
    break;
 8016468:	e015      	b.n	8016496 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801646a:	68ba      	ldr	r2, [r7, #8]
 801646c:	23af      	movs	r3, #175	; 0xaf
 801646e:	011b      	lsls	r3, r3, #4
 8016470:	429a      	cmp	r2, r3
 8016472:	d312      	bcc.n	801649a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8016474:	230f      	movs	r3, #15
 8016476:	18fb      	adds	r3, r7, r3
 8016478:	2201      	movs	r2, #1
 801647a:	701a      	strb	r2, [r3, #0]
    break;
 801647c:	e00d      	b.n	801649a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801647e:	68ba      	ldr	r2, [r7, #8]
 8016480:	23af      	movs	r3, #175	; 0xaf
 8016482:	011b      	lsls	r3, r3, #4
 8016484:	429a      	cmp	r2, r3
 8016486:	d20a      	bcs.n	801649e <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8016488:	230f      	movs	r3, #15
 801648a:	18fb      	adds	r3, r7, r3
 801648c:	2201      	movs	r2, #1
 801648e:	701a      	strb	r2, [r3, #0]
    break;
 8016490:	e005      	b.n	801649e <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8016492:	46c0      	nop			; (mov r8, r8)
 8016494:	e004      	b.n	80164a0 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8016496:	46c0      	nop			; (mov r8, r8)
 8016498:	e002      	b.n	80164a0 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801649a:	46c0      	nop			; (mov r8, r8)
 801649c:	e000      	b.n	80164a0 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801649e:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 80164a0:	230f      	movs	r3, #15
 80164a2:	18fb      	adds	r3, r7, r3
 80164a4:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 80164a6:	0018      	movs	r0, r3
 80164a8:	46bd      	mov	sp, r7
 80164aa:	b004      	add	sp, #16
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	46c0      	nop			; (mov r8, r8)
 80164b0:	000002ed 	.word	0x000002ed

080164b4 <USBPD_USBIF_DeviceStart>:

/** @addtogroup USBPD_CORE_USBIF_Exported_Functions
  * @{
  */
void USBPD_USBIF_DeviceStart(uint32_t PortNum)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af02      	add	r7, sp, #8
 80164ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_DeviceStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device start", 18);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	b2d9      	uxtb	r1, r3
 80164c0:	4b0c      	ldr	r3, [pc, #48]	; (80164f4 <USBPD_USBIF_DeviceStart+0x40>)
 80164c2:	2212      	movs	r2, #18
 80164c4:	9200      	str	r2, [sp, #0]
 80164c6:	2200      	movs	r2, #0
 80164c8:	2006      	movs	r0, #6
 80164ca:	f7f4 facd 	bl	800aa68 <USBPD_TRACE_Add>

  /* Set Device state */
  USB_Device_State_Msg = START_USB_DEVICE;
 80164ce:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <USBPD_USBIF_DeviceStart+0x44>)
 80164d0:	2202      	movs	r2, #2
 80164d2:	701a      	strb	r2, [r3, #0]

  /* Send message to start device */
  if (tx_queue_send(&ux_app_MsgQueue, &USB_Device_State_Msg, TX_WAIT_FOREVER) != TX_SUCCESS)
 80164d4:	2301      	movs	r3, #1
 80164d6:	425a      	negs	r2, r3
 80164d8:	4907      	ldr	r1, [pc, #28]	; (80164f8 <USBPD_USBIF_DeviceStart+0x44>)
 80164da:	4b08      	ldr	r3, [pc, #32]	; (80164fc <USBPD_USBIF_DeviceStart+0x48>)
 80164dc:	0018      	movs	r0, r3
 80164de:	f7fb f9ad 	bl	801183c <_txe_queue_send>
 80164e2:	1e03      	subs	r3, r0, #0
 80164e4:	d001      	beq.n	80164ea <USBPD_USBIF_DeviceStart+0x36>
  {
    Error_Handler();
 80164e6:	f7ed fa15 	bl	8003914 <Error_Handler>
  }
/* USER CODE END USBPD_USBIF_DeviceStart */
}
 80164ea:	46c0      	nop			; (mov r8, r8)
 80164ec:	46bd      	mov	sp, r7
 80164ee:	b002      	add	sp, #8
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	46c0      	nop			; (mov r8, r8)
 80164f4:	080182f0 	.word	0x080182f0
 80164f8:	20008f94 	.word	0x20008f94
 80164fc:	20009114 	.word	0x20009114

08016500 <USBPD_USBIF_DeviceStop>:

void USBPD_USBIF_DeviceStop(uint32_t PortNum)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b084      	sub	sp, #16
 8016504:	af02      	add	r7, sp, #8
 8016506:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_DeviceStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF Device stop", 17);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	b2d9      	uxtb	r1, r3
 801650c:	4b05      	ldr	r3, [pc, #20]	; (8016524 <USBPD_USBIF_DeviceStop+0x24>)
 801650e:	2211      	movs	r2, #17
 8016510:	9200      	str	r2, [sp, #0]
 8016512:	2200      	movs	r2, #0
 8016514:	2006      	movs	r0, #6
 8016516:	f7f4 faa7 	bl	800aa68 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_DeviceStop */
}
 801651a:	46c0      	nop			; (mov r8, r8)
 801651c:	46bd      	mov	sp, r7
 801651e:	b002      	add	sp, #8
 8016520:	bd80      	pop	{r7, pc}
 8016522:	46c0      	nop			; (mov r8, r8)
 8016524:	08018304 	.word	0x08018304

08016528 <USBPD_USBIF_HostStart>:

void USBPD_USBIF_HostStart(uint32_t PortNum)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af02      	add	r7, sp, #8
 801652e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_HostStart */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host start", 16);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	b2d9      	uxtb	r1, r3
 8016534:	4b05      	ldr	r3, [pc, #20]	; (801654c <USBPD_USBIF_HostStart+0x24>)
 8016536:	2210      	movs	r2, #16
 8016538:	9200      	str	r2, [sp, #0]
 801653a:	2200      	movs	r2, #0
 801653c:	2006      	movs	r0, #6
 801653e:	f7f4 fa93 	bl	800aa68 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStart */
}
 8016542:	46c0      	nop			; (mov r8, r8)
 8016544:	46bd      	mov	sp, r7
 8016546:	b002      	add	sp, #8
 8016548:	bd80      	pop	{r7, pc}
 801654a:	46c0      	nop			; (mov r8, r8)
 801654c:	08018318 	.word	0x08018318

08016550 <USBPD_USBIF_HostStop>:

void USBPD_USBIF_HostStop(uint32_t PortNum)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b084      	sub	sp, #16
 8016554:	af02      	add	r7, sp, #8
 8016556:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_HostStop */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF host stop", 15);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	b2d9      	uxtb	r1, r3
 801655c:	4b05      	ldr	r3, [pc, #20]	; (8016574 <USBPD_USBIF_HostStop+0x24>)
 801655e:	220f      	movs	r2, #15
 8016560:	9200      	str	r2, [sp, #0]
 8016562:	2200      	movs	r2, #0
 8016564:	2006      	movs	r0, #6
 8016566:	f7f4 fa7f 	bl	800aa68 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_HostStop */
}
 801656a:	46c0      	nop			; (mov r8, r8)
 801656c:	46bd      	mov	sp, r7
 801656e:	b002      	add	sp, #8
 8016570:	bd80      	pop	{r7, pc}
 8016572:	46c0      	nop			; (mov r8, r8)
 8016574:	0801832c 	.word	0x0801832c

08016578 <USBPD_USBIF_Swap2Host>:
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF device billboard", 22);
/* USER CODE END USBPD_USBIF_DeviceBillboard */
}

void USBPD_USBIF_Swap2Host(uint32_t PortNum)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af02      	add	r7, sp, #8
 801657e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_Swap2Host */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to host", 18);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	b2d9      	uxtb	r1, r3
 8016584:	4b05      	ldr	r3, [pc, #20]	; (801659c <USBPD_USBIF_Swap2Host+0x24>)
 8016586:	2212      	movs	r2, #18
 8016588:	9200      	str	r2, [sp, #0]
 801658a:	2200      	movs	r2, #0
 801658c:	2006      	movs	r0, #6
 801658e:	f7f4 fa6b 	bl	800aa68 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Host */
}
 8016592:	46c0      	nop			; (mov r8, r8)
 8016594:	46bd      	mov	sp, r7
 8016596:	b002      	add	sp, #8
 8016598:	bd80      	pop	{r7, pc}
 801659a:	46c0      	nop			; (mov r8, r8)
 801659c:	08018354 	.word	0x08018354

080165a0 <USBPD_USBIF_Swap2Device>:

void USBPD_USBIF_Swap2Device(uint32_t PortNum)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af02      	add	r7, sp, #8
 80165a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_USBIF_Swap2Device */
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "USBIF swap to device", 20);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	b2d9      	uxtb	r1, r3
 80165ac:	4b05      	ldr	r3, [pc, #20]	; (80165c4 <USBPD_USBIF_Swap2Device+0x24>)
 80165ae:	2214      	movs	r2, #20
 80165b0:	9200      	str	r2, [sp, #0]
 80165b2:	2200      	movs	r2, #0
 80165b4:	2006      	movs	r0, #6
 80165b6:	f7f4 fa57 	bl	800aa68 <USBPD_TRACE_Add>
/* USER CODE END USBPD_USBIF_Swap2Device */
}
 80165ba:	46c0      	nop			; (mov r8, r8)
 80165bc:	46bd      	mov	sp, r7
 80165be:	b002      	add	sp, #8
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	46c0      	nop			; (mov r8, r8)
 80165c4:	08018368 	.word	0x08018368

080165c8 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 80165cc:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 80165ce:	0018      	movs	r0, r3
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	0002      	movs	r2, r0
 80165dc:	1dfb      	adds	r3, r7, #7
 80165de:	701a      	strb	r2, [r3, #0]
 80165e0:	1dbb      	adds	r3, r7, #6
 80165e2:	1c0a      	adds	r2, r1, #0
 80165e4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 80165e6:	46c0      	nop			; (mov r8, r8)
 80165e8:	46bd      	mov	sp, r7
 80165ea:	b002      	add	sp, #8
 80165ec:	bd80      	pop	{r7, pc}
	...

080165f0 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	0002      	movs	r2, r0
 80165f8:	1dfb      	adds	r3, r7, #7
 80165fa:	701a      	strb	r2, [r3, #0]
 80165fc:	1dbb      	adds	r3, r7, #6
 80165fe:	1c0a      	adds	r2, r1, #0
 8016600:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 8016602:	1dbb      	adds	r3, r7, #6
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	2b69      	cmp	r3, #105	; 0x69
 8016608:	d01e      	beq.n	8016648 <USBPD_DPM_Notification+0x58>
 801660a:	dc3f      	bgt.n	801668c <USBPD_DPM_Notification+0x9c>
 801660c:	2b68      	cmp	r3, #104	; 0x68
 801660e:	d005      	beq.n	801661c <USBPD_DPM_Notification+0x2c>
 8016610:	dc3c      	bgt.n	801668c <USBPD_DPM_Notification+0x9c>
 8016612:	2b24      	cmp	r3, #36	; 0x24
 8016614:	d034      	beq.n	8016680 <USBPD_DPM_Notification+0x90>
 8016616:	2b25      	cmp	r3, #37	; 0x25
 8016618:	d02c      	beq.n	8016674 <USBPD_DPM_Notification+0x84>
      USBPD_USBIF_Swap2Device(PortNum);
      break;
    }

  default:
    break;
 801661a:	e037      	b.n	801668c <USBPD_DPM_Notification+0x9c>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 801661c:	1dfb      	adds	r3, r7, #7
 801661e:	781a      	ldrb	r2, [r3, #0]
 8016620:	4b1d      	ldr	r3, [pc, #116]	; (8016698 <USBPD_DPM_Notification+0xa8>)
 8016622:	0092      	lsls	r2, r2, #2
 8016624:	5cd3      	ldrb	r3, [r2, r3]
 8016626:	071b      	lsls	r3, r3, #28
 8016628:	0fdb      	lsrs	r3, r3, #31
 801662a:	b2db      	uxtb	r3, r3
 801662c:	2b01      	cmp	r3, #1
 801662e:	d105      	bne.n	801663c <USBPD_DPM_Notification+0x4c>
        USBPD_USBIF_HostStart(PortNum);
 8016630:	1dfb      	adds	r3, r7, #7
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	0018      	movs	r0, r3
 8016636:	f7ff ff77 	bl	8016528 <USBPD_USBIF_HostStart>
      break;
 801663a:	e028      	b.n	801668e <USBPD_DPM_Notification+0x9e>
        USBPD_USBIF_DeviceStart(PortNum);
 801663c:	1dfb      	adds	r3, r7, #7
 801663e:	781b      	ldrb	r3, [r3, #0]
 8016640:	0018      	movs	r0, r3
 8016642:	f7ff ff37 	bl	80164b4 <USBPD_USBIF_DeviceStart>
      break;
 8016646:	e022      	b.n	801668e <USBPD_DPM_Notification+0x9e>
      if (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)
 8016648:	1dfb      	adds	r3, r7, #7
 801664a:	781a      	ldrb	r2, [r3, #0]
 801664c:	4b12      	ldr	r3, [pc, #72]	; (8016698 <USBPD_DPM_Notification+0xa8>)
 801664e:	0092      	lsls	r2, r2, #2
 8016650:	5cd3      	ldrb	r3, [r2, r3]
 8016652:	071b      	lsls	r3, r3, #28
 8016654:	0fdb      	lsrs	r3, r3, #31
 8016656:	b2db      	uxtb	r3, r3
 8016658:	2b01      	cmp	r3, #1
 801665a:	d105      	bne.n	8016668 <USBPD_DPM_Notification+0x78>
        USBPD_USBIF_HostStop(PortNum);
 801665c:	1dfb      	adds	r3, r7, #7
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	0018      	movs	r0, r3
 8016662:	f7ff ff75 	bl	8016550 <USBPD_USBIF_HostStop>
      break;
 8016666:	e012      	b.n	801668e <USBPD_DPM_Notification+0x9e>
        USBPD_USBIF_DeviceStop(PortNum);
 8016668:	1dfb      	adds	r3, r7, #7
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	0018      	movs	r0, r3
 801666e:	f7ff ff47 	bl	8016500 <USBPD_USBIF_DeviceStop>
      break;
 8016672:	e00c      	b.n	801668e <USBPD_DPM_Notification+0x9e>
      USBPD_USBIF_Swap2Host(PortNum);
 8016674:	1dfb      	adds	r3, r7, #7
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	0018      	movs	r0, r3
 801667a:	f7ff ff7d 	bl	8016578 <USBPD_USBIF_Swap2Host>
      break;
 801667e:	e006      	b.n	801668e <USBPD_DPM_Notification+0x9e>
      USBPD_USBIF_Swap2Device(PortNum);
 8016680:	1dfb      	adds	r3, r7, #7
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	0018      	movs	r0, r3
 8016686:	f7ff ff8b 	bl	80165a0 <USBPD_USBIF_Swap2Device>
      break;
 801668a:	e000      	b.n	801668e <USBPD_DPM_Notification+0x9e>
    break;
 801668c:	46c0      	nop			; (mov r8, r8)
  }

/* USER CODE END USBPD_DPM_Notification */
}
 801668e:	46c0      	nop			; (mov r8, r8)
 8016690:	46bd      	mov	sp, r7
 8016692:	b002      	add	sp, #8
 8016694:	bd80      	pop	{r7, pc}
 8016696:	46c0      	nop			; (mov r8, r8)
 8016698:	20008f90 	.word	0x20008f90

0801669c <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6039      	str	r1, [r7, #0]
 80166a4:	0011      	movs	r1, r2
 80166a6:	1dfb      	adds	r3, r7, #7
 80166a8:	1c02      	adds	r2, r0, #0
 80166aa:	701a      	strb	r2, [r3, #0]
 80166ac:	1dbb      	adds	r3, r7, #6
 80166ae:	1c0a      	adds	r2, r1, #0
 80166b0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 80166b2:	46c0      	nop			; (mov r8, r8)
 80166b4:	46bd      	mov	sp, r7
 80166b6:	b002      	add	sp, #8
 80166b8:	bd80      	pop	{r7, pc}

080166ba <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80166ba:	b580      	push	{r7, lr}
 80166bc:	b084      	sub	sp, #16
 80166be:	af00      	add	r7, sp, #0
 80166c0:	60ba      	str	r2, [r7, #8]
 80166c2:	607b      	str	r3, [r7, #4]
 80166c4:	230f      	movs	r3, #15
 80166c6:	18fb      	adds	r3, r7, r3
 80166c8:	1c02      	adds	r2, r0, #0
 80166ca:	701a      	strb	r2, [r3, #0]
 80166cc:	230e      	movs	r3, #14
 80166ce:	18fb      	adds	r3, r7, r3
 80166d0:	1c0a      	adds	r2, r1, #0
 80166d2:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 80166d4:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80166d6:	46c0      	nop			; (mov r8, r8)
 80166d8:	46bd      	mov	sp, r7
 80166da:	b004      	add	sp, #16
 80166dc:	bd80      	pop	{r7, pc}

080166de <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80166de:	b580      	push	{r7, lr}
 80166e0:	b084      	sub	sp, #16
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	60ba      	str	r2, [r7, #8]
 80166e6:	607b      	str	r3, [r7, #4]
 80166e8:	230f      	movs	r3, #15
 80166ea:	18fb      	adds	r3, r7, r3
 80166ec:	1c02      	adds	r2, r0, #0
 80166ee:	701a      	strb	r2, [r3, #0]
 80166f0:	230e      	movs	r3, #14
 80166f2:	18fb      	adds	r3, r7, r3
 80166f4:	1c0a      	adds	r2, r1, #0
 80166f6:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 80166f8:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 80166fa:	46c0      	nop			; (mov r8, r8)
 80166fc:	46bd      	mov	sp, r7
 80166fe:	b004      	add	sp, #16
 8016700:	bd80      	pop	{r7, pc}

08016702 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8016702:	b580      	push	{r7, lr}
 8016704:	b084      	sub	sp, #16
 8016706:	af00      	add	r7, sp, #0
 8016708:	60b9      	str	r1, [r7, #8]
 801670a:	607a      	str	r2, [r7, #4]
 801670c:	230f      	movs	r3, #15
 801670e:	18fb      	adds	r3, r7, r3
 8016710:	1c02      	adds	r2, r0, #0
 8016712:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8016714:	46c0      	nop			; (mov r8, r8)
 8016716:	46bd      	mov	sp, r7
 8016718:	b004      	add	sp, #16
 801671a:	bd80      	pop	{r7, pc}

0801671c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801671c:	b590      	push	{r4, r7, lr}
 801671e:	b083      	sub	sp, #12
 8016720:	af00      	add	r7, sp, #0
 8016722:	0004      	movs	r4, r0
 8016724:	0008      	movs	r0, r1
 8016726:	603a      	str	r2, [r7, #0]
 8016728:	0019      	movs	r1, r3
 801672a:	1dfb      	adds	r3, r7, #7
 801672c:	1c22      	adds	r2, r4, #0
 801672e:	701a      	strb	r2, [r3, #0]
 8016730:	1dbb      	adds	r3, r7, #6
 8016732:	1c02      	adds	r2, r0, #0
 8016734:	701a      	strb	r2, [r3, #0]
 8016736:	1d3b      	adds	r3, r7, #4
 8016738:	1c0a      	adds	r2, r1, #0
 801673a:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801673c:	46c0      	nop			; (mov r8, r8)
 801673e:	46bd      	mov	sp, r7
 8016740:	b003      	add	sp, #12
 8016742:	bd90      	pop	{r4, r7, pc}

08016744 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	0002      	movs	r2, r0
 801674c:	1dfb      	adds	r3, r7, #7
 801674e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8016750:	1dfb      	adds	r3, r7, #7
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	0018      	movs	r0, r3
 8016756:	f7e9 ff1b 	bl	8000590 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801675a:	46c0      	nop			; (mov r8, r8)
 801675c:	46bd      	mov	sp, r7
 801675e:	b002      	add	sp, #8
 8016760:	bd80      	pop	{r7, pc}
	...

08016764 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
 801676a:	0002      	movs	r2, r0
 801676c:	1dfb      	adds	r3, r7, #7
 801676e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8016770:	230f      	movs	r3, #15
 8016772:	18fb      	adds	r3, r7, r3
 8016774:	220c      	movs	r2, #12
 8016776:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8016778:	1dfb      	adds	r3, r7, #7
 801677a:	781a      	ldrb	r2, [r3, #0]
 801677c:	4931      	ldr	r1, [pc, #196]	; (8016844 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 801677e:	0013      	movs	r3, r2
 8016780:	00db      	lsls	r3, r3, #3
 8016782:	1a9b      	subs	r3, r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	5c5b      	ldrb	r3, [r3, r1]
 8016788:	07db      	lsls	r3, r3, #31
 801678a:	0fdb      	lsrs	r3, r3, #31
 801678c:	b2db      	uxtb	r3, r3
 801678e:	2b00      	cmp	r3, #0
 8016790:	d019      	beq.n	80167c6 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8016792:	1dfb      	adds	r3, r7, #7
 8016794:	781a      	ldrb	r2, [r3, #0]
 8016796:	492b      	ldr	r1, [pc, #172]	; (8016844 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016798:	0013      	movs	r3, r2
 801679a:	00db      	lsls	r3, r3, #3
 801679c:	1a9b      	subs	r3, r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	5c5b      	ldrb	r3, [r3, r1]
 80167a2:	075b      	lsls	r3, r3, #29
 80167a4:	0fdb      	lsrs	r3, r3, #31
 80167a6:	b2db      	uxtb	r3, r3
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d111      	bne.n	80167d0 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 80167ac:	1dfb      	adds	r3, r7, #7
 80167ae:	781a      	ldrb	r2, [r3, #0]
 80167b0:	4924      	ldr	r1, [pc, #144]	; (8016844 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 80167b2:	0013      	movs	r3, r2
 80167b4:	00db      	lsls	r3, r3, #3
 80167b6:	1a9b      	subs	r3, r3, r2
 80167b8:	00db      	lsls	r3, r3, #3
 80167ba:	5c5b      	ldrb	r3, [r3, r1]
 80167bc:	071b      	lsls	r3, r3, #28
 80167be:	0fdb      	lsrs	r3, r3, #31
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d104      	bne.n	80167d0 <USBPD_DPM_EvaluateDataRoleSwap+0x6c>
  {
    status = USBPD_NOTSUPPORTED;
 80167c6:	230f      	movs	r3, #15
 80167c8:	18fb      	adds	r3, r7, r3
 80167ca:	2201      	movs	r2, #1
 80167cc:	701a      	strb	r2, [r3, #0]
 80167ce:	e031      	b.n	8016834 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 80167d0:	1dfb      	adds	r3, r7, #7
 80167d2:	781a      	ldrb	r2, [r3, #0]
 80167d4:	491b      	ldr	r1, [pc, #108]	; (8016844 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 80167d6:	0013      	movs	r3, r2
 80167d8:	00db      	lsls	r3, r3, #3
 80167da:	1a9b      	subs	r3, r3, r2
 80167dc:	00db      	lsls	r3, r3, #3
 80167de:	5c5b      	ldrb	r3, [r3, r1]
 80167e0:	075b      	lsls	r3, r3, #29
 80167e2:	0fdb      	lsrs	r3, r3, #31
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	2b01      	cmp	r3, #1
 80167e8:	d109      	bne.n	80167fe <USBPD_DPM_EvaluateDataRoleSwap+0x9a>
 80167ea:	1dfb      	adds	r3, r7, #7
 80167ec:	781a      	ldrb	r2, [r3, #0]
 80167ee:	4b16      	ldr	r3, [pc, #88]	; (8016848 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 80167f0:	0092      	lsls	r2, r2, #2
 80167f2:	5cd3      	ldrb	r3, [r2, r3]
 80167f4:	071b      	lsls	r3, r3, #28
 80167f6:	0fdb      	lsrs	r3, r3, #31
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d016      	beq.n	801682c <USBPD_DPM_EvaluateDataRoleSwap+0xc8>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 80167fe:	1dfb      	adds	r3, r7, #7
 8016800:	781a      	ldrb	r2, [r3, #0]
 8016802:	4910      	ldr	r1, [pc, #64]	; (8016844 <USBPD_DPM_EvaluateDataRoleSwap+0xe0>)
 8016804:	0013      	movs	r3, r2
 8016806:	00db      	lsls	r3, r3, #3
 8016808:	1a9b      	subs	r3, r3, r2
 801680a:	00db      	lsls	r3, r3, #3
 801680c:	5c5b      	ldrb	r3, [r3, r1]
 801680e:	071b      	lsls	r3, r3, #28
 8016810:	0fdb      	lsrs	r3, r3, #31
 8016812:	b2db      	uxtb	r3, r3
 8016814:	2b01      	cmp	r3, #1
 8016816:	d10d      	bne.n	8016834 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
 8016818:	1dfb      	adds	r3, r7, #7
 801681a:	781a      	ldrb	r2, [r3, #0]
 801681c:	4b0a      	ldr	r3, [pc, #40]	; (8016848 <USBPD_DPM_EvaluateDataRoleSwap+0xe4>)
 801681e:	0092      	lsls	r2, r2, #2
 8016820:	5cd3      	ldrb	r3, [r2, r3]
 8016822:	071b      	lsls	r3, r3, #28
 8016824:	0fdb      	lsrs	r3, r3, #31
 8016826:	b2db      	uxtb	r3, r3
 8016828:	2b01      	cmp	r3, #1
 801682a:	d103      	bne.n	8016834 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>
    {
      status = USBPD_ACCEPT;
 801682c:	230f      	movs	r3, #15
 801682e:	18fb      	adds	r3, r7, r3
 8016830:	220a      	movs	r2, #10
 8016832:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8016834:	230f      	movs	r3, #15
 8016836:	18fb      	adds	r3, r7, r3
 8016838:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801683a:	0018      	movs	r0, r3
 801683c:	46bd      	mov	sp, r7
 801683e:	b004      	add	sp, #16
 8016840:	bd80      	pop	{r7, pc}
 8016842:	46c0      	nop			; (mov r8, r8)
 8016844:	20000064 	.word	0x20000064
 8016848:	20008f90 	.word	0x20008f90

0801684c <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
 8016852:	0002      	movs	r2, r0
 8016854:	1dfb      	adds	r3, r7, #7
 8016856:	701a      	strb	r2, [r3, #0]
 8016858:	1dbb      	adds	r3, r7, #6
 801685a:	1c0a      	adds	r2, r1, #0
 801685c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801685e:	1dbb      	adds	r3, r7, #6
 8016860:	781a      	ldrb	r2, [r3, #0]
 8016862:	1dfb      	adds	r3, r7, #7
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	0011      	movs	r1, r2
 8016868:	0018      	movs	r0, r3
 801686a:	f7ff fd99 	bl	80163a0 <USBPD_PWR_IF_SupplyReady>
 801686e:	0003      	movs	r3, r0
 8016870:	425a      	negs	r2, r3
 8016872:	4153      	adcs	r3, r2
 8016874:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8016876:	0018      	movs	r0, r3
 8016878:	46bd      	mov	sp, r7
 801687a:	b002      	add	sp, #8
 801687c:	bd80      	pop	{r7, pc}

0801687e <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b084      	sub	sp, #16
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8016886:	2300      	movs	r3, #0
 8016888:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d902      	bls.n	8016896 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016890:	2302      	movs	r3, #2
 8016892:	425b      	negs	r3, r3
 8016894:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8016896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8016898:	0018      	movs	r0, r3
 801689a:	46bd      	mov	sp, r7
 801689c:	b004      	add	sp, #16
 801689e:	bd80      	pop	{r7, pc}

080168a0 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80168a8:	2300      	movs	r3, #0
 80168aa:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2b01      	cmp	r3, #1
 80168b0:	d902      	bls.n	80168b8 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80168b2:	2302      	movs	r3, #2
 80168b4:	425b      	negs	r3, r3
 80168b6:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 80168b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80168ba:	0018      	movs	r0, r3
 80168bc:	46bd      	mov	sp, r7
 80168be:	b004      	add	sp, #16
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80168ca:	230b      	movs	r3, #11
 80168cc:	425b      	negs	r3, r3
 80168ce:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2b01      	cmp	r3, #1
 80168d4:	d902      	bls.n	80168dc <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80168d6:	2302      	movs	r3, #2
 80168d8:	425b      	negs	r3, r3
 80168da:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 80168dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 80168de:	0018      	movs	r0, r3
 80168e0:	46bd      	mov	sp, r7
 80168e2:	b004      	add	sp, #16
 80168e4:	bd80      	pop	{r7, pc}

080168e6 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 80168e6:	b580      	push	{r7, lr}
 80168e8:	b084      	sub	sp, #16
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	6078      	str	r0, [r7, #4]
 80168ee:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80168f0:	2300      	movs	r3, #0
 80168f2:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d802      	bhi.n	8016900 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d102      	bne.n	8016906 <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016900:	2302      	movs	r3, #2
 8016902:	425b      	negs	r3, r3
 8016904:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	2200      	movs	r2, #0
 801690a:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 801690c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801690e:	0018      	movs	r0, r3
 8016910:	46bd      	mov	sp, r7
 8016912:	b004      	add	sp, #16
 8016914:	bd80      	pop	{r7, pc}
	...

08016918 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 8016918:	b590      	push	{r4, r7, lr}
 801691a:	b095      	sub	sp, #84	; 0x54
 801691c:	af08      	add	r7, sp, #32
 801691e:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8016920:	2300      	movs	r3, #0
 8016922:	62fb      	str	r3, [r7, #44]	; 0x2c
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	62bb      	str	r3, [r7, #40]	; 0x28
  UCHAR *string_framework;
  /* Language_Id_Framework*/
  UCHAR *language_id_framework;

  /* Allocate the stack for thread 0.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8016928:	23a0      	movs	r3, #160	; 0xa0
 801692a:	01da      	lsls	r2, r3, #7
 801692c:	2318      	movs	r3, #24
 801692e:	18f9      	adds	r1, r7, r3
 8016930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016932:	2300      	movs	r3, #0
 8016934:	f7fa fae2 	bl	8010efc <_txe_byte_allocate>
 8016938:	1e03      	subs	r3, r0, #0
 801693a:	d001      	beq.n	8016940 <MX_USBX_Device_Init+0x28>
                       USBX_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 801693c:	2302      	movs	r3, #2
 801693e:	e0b6      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_MEMORY_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8016940:	69b8      	ldr	r0, [r7, #24]
 8016942:	23a0      	movs	r3, #160	; 0xa0
 8016944:	01d9      	lsls	r1, r3, #7
 8016946:	2300      	movs	r3, #0
 8016948:	2200      	movs	r2, #0
 801694a:	f7fd f9e9 	bl	8013d20 <_ux_system_initialize>
 801694e:	1e03      	subs	r3, r0, #0
 8016950:	d001      	beq.n	8016956 <MX_USBX_Device_Init+0x3e>
  {
    return UX_ERROR;
 8016952:	23ff      	movs	r3, #255	; 0xff
 8016954:	e0ab      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Get_Device_Framework_Full_Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8016956:	2314      	movs	r3, #20
 8016958:	18fb      	adds	r3, r7, r3
 801695a:	0019      	movs	r1, r3
 801695c:	2000      	movs	r0, #0
 801695e:	f000 f913 	bl	8016b88 <USBD_Get_Device_Framework_Speed>
 8016962:	0003      	movs	r3, r0
 8016964:	627b      	str	r3, [r7, #36]	; 0x24
                                &device_framework_fs_length);

  /* Get_String_Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8016966:	2310      	movs	r3, #16
 8016968:	18fb      	adds	r3, r7, r3
 801696a:	0018      	movs	r0, r3
 801696c:	f000 f956 	bl	8016c1c <USBD_Get_String_Framework>
 8016970:	0003      	movs	r3, r0
 8016972:	623b      	str	r3, [r7, #32]

  /* Get_Language_Id_Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&languge_id_framework_length);
 8016974:	230c      	movs	r3, #12
 8016976:	18fb      	adds	r3, r7, r3
 8016978:	0018      	movs	r0, r3
 801697a:	f000 f9f1 	bl	8016d60 <USBD_Get_Language_Id_Framework>
 801697e:	0003      	movs	r3, r0
 8016980:	61fb      	str	r3, [r7, #28]

  /* The code below is required for installing the device portion of USBX.
     In this application */
  if (ux_device_stack_initialize(NULL,
 8016982:	6978      	ldr	r0, [r7, #20]
 8016984:	693b      	ldr	r3, [r7, #16]
 8016986:	68fa      	ldr	r2, [r7, #12]
 8016988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801698a:	2400      	movs	r4, #0
 801698c:	9404      	str	r4, [sp, #16]
 801698e:	9203      	str	r2, [sp, #12]
 8016990:	69fa      	ldr	r2, [r7, #28]
 8016992:	9202      	str	r2, [sp, #8]
 8016994:	9301      	str	r3, [sp, #4]
 8016996:	6a3b      	ldr	r3, [r7, #32]
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	0003      	movs	r3, r0
 801699c:	000a      	movs	r2, r1
 801699e:	2100      	movs	r1, #0
 80169a0:	2000      	movs	r0, #0
 80169a2:	f7fc fce7 	bl	8013374 <_ux_device_stack_initialize>
 80169a6:	1e03      	subs	r3, r0, #0
 80169a8:	d001      	beq.n	80169ae <MX_USBX_Device_Init+0x96>
                                 string_framework_length,
                                 language_id_framework,
                                 languge_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    return UX_ERROR;
 80169aa:	23ff      	movs	r3, #255	; 0xff
 80169ac:	e07f      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Initialize the hid class parameters for the device. */
  hid_parameter.ux_device_class_hid_parameter_report_address = USBD_Get_Device_HID_MOUSE_ReportDesc();
 80169ae:	f000 f9ff 	bl	8016db0 <USBD_Get_Device_HID_MOUSE_ReportDesc>
 80169b2:	0002      	movs	r2, r0
 80169b4:	4b40      	ldr	r3, [pc, #256]	; (8016ab8 <MX_USBX_Device_Init+0x1a0>)
 80169b6:	609a      	str	r2, [r3, #8]

  hid_parameter.ux_device_class_hid_parameter_report_length = USBD_HID_MOUSE_REPORT_DESC_SIZE;
 80169b8:	4b3f      	ldr	r3, [pc, #252]	; (8016ab8 <MX_USBX_Device_Init+0x1a0>)
 80169ba:	224a      	movs	r2, #74	; 0x4a
 80169bc:	611a      	str	r2, [r3, #16]

  hid_parameter.ux_device_class_hid_parameter_report_id = UX_TRUE;
 80169be:	4b3e      	ldr	r3, [pc, #248]	; (8016ab8 <MX_USBX_Device_Init+0x1a0>)
 80169c0:	2201      	movs	r2, #1
 80169c2:	60da      	str	r2, [r3, #12]

  hid_parameter.ux_device_class_hid_parameter_callback = app_usbx_device_thread_hid_callback;
 80169c4:	4b3c      	ldr	r3, [pc, #240]	; (8016ab8 <MX_USBX_Device_Init+0x1a0>)
 80169c6:	4a3d      	ldr	r2, [pc, #244]	; (8016abc <MX_USBX_Device_Init+0x1a4>)
 80169c8:	615a      	str	r2, [r3, #20]

  /* Initialize the device hid class. The class is connected with interface 0 */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 80169ca:	493d      	ldr	r1, [pc, #244]	; (8016ac0 <MX_USBX_Device_Init+0x1a8>)
 80169cc:	483d      	ldr	r0, [pc, #244]	; (8016ac4 <MX_USBX_Device_Init+0x1ac>)
 80169ce:	4b3a      	ldr	r3, [pc, #232]	; (8016ab8 <MX_USBX_Device_Init+0x1a0>)
 80169d0:	9300      	str	r3, [sp, #0]
 80169d2:	2300      	movs	r3, #0
 80169d4:	2201      	movs	r2, #1
 80169d6:	f7fb fd39 	bl	801244c <_ux_device_stack_class_register>
 80169da:	1e03      	subs	r3, r0, #0
 80169dc:	d001      	beq.n	80169e2 <MX_USBX_Device_Init+0xca>
                                     ux_device_class_hid_entry, 1, 0,
                                     (VOID *)&hid_parameter) != UX_SUCCESS)
  {
    return UX_ERROR;
 80169de:	23ff      	movs	r3, #255	; 0xff
 80169e0:	e065      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Allocate the stack for main_usbx_app_thread_entry. */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 80169e2:	2380      	movs	r3, #128	; 0x80
 80169e4:	00da      	lsls	r2, r3, #3
 80169e6:	2318      	movs	r3, #24
 80169e8:	18f9      	adds	r1, r7, r3
 80169ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169ec:	2300      	movs	r3, #0
 80169ee:	f7fa fa85 	bl	8010efc <_txe_byte_allocate>
 80169f2:	1e03      	subs	r3, r0, #0
 80169f4:	d001      	beq.n	80169fa <MX_USBX_Device_Init+0xe2>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80169f6:	2302      	movs	r3, #2
 80169f8:	e059      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Create the main thread. */
  if (tx_thread_create(&ux_app_thread, "main_usbx_app_thread_entry",
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	4c32      	ldr	r4, [pc, #200]	; (8016ac8 <MX_USBX_Device_Init+0x1b0>)
 80169fe:	4933      	ldr	r1, [pc, #204]	; (8016acc <MX_USBX_Device_Init+0x1b4>)
 8016a00:	4833      	ldr	r0, [pc, #204]	; (8016ad0 <MX_USBX_Device_Init+0x1b8>)
 8016a02:	22b0      	movs	r2, #176	; 0xb0
 8016a04:	9206      	str	r2, [sp, #24]
 8016a06:	2201      	movs	r2, #1
 8016a08:	9205      	str	r2, [sp, #20]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	9204      	str	r2, [sp, #16]
 8016a0e:	2214      	movs	r2, #20
 8016a10:	9203      	str	r2, [sp, #12]
 8016a12:	2214      	movs	r2, #20
 8016a14:	9202      	str	r2, [sp, #8]
 8016a16:	2280      	movs	r2, #128	; 0x80
 8016a18:	00d2      	lsls	r2, r2, #3
 8016a1a:	9201      	str	r2, [sp, #4]
 8016a1c:	9300      	str	r3, [sp, #0]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	0022      	movs	r2, r4
 8016a22:	f7fb f88f 	bl	8011b44 <_txe_thread_create>
 8016a26:	1e03      	subs	r3, r0, #0
 8016a28:	d001      	beq.n	8016a2e <MX_USBX_Device_Init+0x116>
                       usbx_app_thread_entry, 0, pointer, USBX_APP_STACK_SIZE,
                       20, 20, 1, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8016a2a:	230e      	movs	r3, #14
 8016a2c:	e03f      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Allocate the stack for usbx_hid_thread_entry.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8016a2e:	2380      	movs	r3, #128	; 0x80
 8016a30:	00da      	lsls	r2, r3, #3
 8016a32:	2318      	movs	r3, #24
 8016a34:	18f9      	adds	r1, r7, r3
 8016a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a38:	2300      	movs	r3, #0
 8016a3a:	f7fa fa5f 	bl	8010efc <_txe_byte_allocate>
 8016a3e:	1e03      	subs	r3, r0, #0
 8016a40:	d001      	beq.n	8016a46 <MX_USBX_Device_Init+0x12e>
                       USBX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8016a42:	2302      	movs	r3, #2
 8016a44:	e033      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Create the usbx_hid_thread_entry thread. */
  if (tx_thread_create(&ux_hid_thread, "hid_usbx_app_thread_entry",
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	4c22      	ldr	r4, [pc, #136]	; (8016ad4 <MX_USBX_Device_Init+0x1bc>)
 8016a4a:	4923      	ldr	r1, [pc, #140]	; (8016ad8 <MX_USBX_Device_Init+0x1c0>)
 8016a4c:	4823      	ldr	r0, [pc, #140]	; (8016adc <MX_USBX_Device_Init+0x1c4>)
 8016a4e:	22b0      	movs	r2, #176	; 0xb0
 8016a50:	9206      	str	r2, [sp, #24]
 8016a52:	2201      	movs	r2, #1
 8016a54:	9205      	str	r2, [sp, #20]
 8016a56:	2201      	movs	r2, #1
 8016a58:	9204      	str	r2, [sp, #16]
 8016a5a:	2214      	movs	r2, #20
 8016a5c:	9203      	str	r2, [sp, #12]
 8016a5e:	2214      	movs	r2, #20
 8016a60:	9202      	str	r2, [sp, #8]
 8016a62:	2280      	movs	r2, #128	; 0x80
 8016a64:	00d2      	lsls	r2, r2, #3
 8016a66:	9201      	str	r2, [sp, #4]
 8016a68:	9300      	str	r3, [sp, #0]
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	0022      	movs	r2, r4
 8016a6e:	f7fb f869 	bl	8011b44 <_txe_thread_create>
 8016a72:	1e03      	subs	r3, r0, #0
 8016a74:	d001      	beq.n	8016a7a <MX_USBX_Device_Init+0x162>
                       usbx_hid_thread_entry, 0,
                       pointer, USBX_APP_STACK_SIZE, 20, 20,
                       1, TX_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8016a76:	230e      	movs	r3, #14
 8016a78:	e019      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Allocate Memory for the Queue */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 8016a7a:	2318      	movs	r3, #24
 8016a7c:	18f9      	adds	r1, r7, r3
 8016a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a80:	2300      	movs	r3, #0
 8016a82:	2204      	movs	r2, #4
 8016a84:	f7fa fa3a 	bl	8010efc <_txe_byte_allocate>
 8016a88:	1e03      	subs	r3, r0, #0
 8016a8a:	d001      	beq.n	8016a90 <MX_USBX_Device_Init+0x178>
                       sizeof(APP_QUEUE_SIZE*sizeof(ULONG)),
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8016a8c:	2302      	movs	r3, #2
 8016a8e:	e00e      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }

  /* Create the MsgQueue */
  if (tx_queue_create(&ux_app_MsgQueue, "Message Queue app",
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	4913      	ldr	r1, [pc, #76]	; (8016ae0 <MX_USBX_Device_Init+0x1c8>)
 8016a94:	4813      	ldr	r0, [pc, #76]	; (8016ae4 <MX_USBX_Device_Init+0x1cc>)
 8016a96:	2238      	movs	r2, #56	; 0x38
 8016a98:	9201      	str	r2, [sp, #4]
 8016a9a:	2214      	movs	r2, #20
 8016a9c:	9200      	str	r2, [sp, #0]
 8016a9e:	2201      	movs	r2, #1
 8016aa0:	f7fa fdd0 	bl	8011644 <_txe_queue_create>
 8016aa4:	1e03      	subs	r3, r0, #0
 8016aa6:	d001      	beq.n	8016aac <MX_USBX_Device_Init+0x194>
                      TX_1_ULONG, pointer,
                      APP_QUEUE_SIZE*sizeof(ULONG)) != TX_SUCCESS)
  {
    return TX_QUEUE_ERROR;
 8016aa8:	2309      	movs	r3, #9
 8016aaa:	e000      	b.n	8016aae <MX_USBX_Device_Init+0x196>
  }
  /* USER CODE END MX_USBX_Device_Init */

  return ret;
 8016aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8016aae:	0018      	movs	r0, r3
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	b00d      	add	sp, #52	; 0x34
 8016ab4:	bd90      	pop	{r4, r7, pc}
 8016ab6:	46c0      	nop			; (mov r8, r8)
 8016ab8:	200090f8 	.word	0x200090f8
 8016abc:	080176a9 	.word	0x080176a9
 8016ac0:	08014b89 	.word	0x08014b89
 8016ac4:	20000014 	.word	0x20000014
 8016ac8:	08016ae9 	.word	0x08016ae9
 8016acc:	080183a8 	.word	0x080183a8
 8016ad0:	20008f98 	.word	0x20008f98
 8016ad4:	080176bd 	.word	0x080176bd
 8016ad8:	080183c4 	.word	0x080183c4
 8016adc:	20009048 	.word	0x20009048
 8016ae0:	080183e0 	.word	0x080183e0
 8016ae4:	20009114 	.word	0x20009114

08016ae8 <usbx_app_thread_entry>:
  * @brief  Function implementing usbx_app_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_app_thread_entry(ULONG arg)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
  /* Initialization of USB device */
  MX_USB_Device_Init();
 8016af0:	f000 f826 	bl	8016b40 <MX_USB_Device_Init>

  /* Wait for message queue to start/stop the device */
  while(1)
  {
    /* Wait for a device to be connected */
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8016af4:	2301      	movs	r3, #1
 8016af6:	425a      	negs	r2, r3
 8016af8:	490e      	ldr	r1, [pc, #56]	; (8016b34 <usbx_app_thread_entry+0x4c>)
 8016afa:	4b0f      	ldr	r3, [pc, #60]	; (8016b38 <usbx_app_thread_entry+0x50>)
 8016afc:	0018      	movs	r0, r3
 8016afe:	f7fa fe51 	bl	80117a4 <_txe_queue_receive>
 8016b02:	1e03      	subs	r3, r0, #0
 8016b04:	d001      	beq.n	8016b0a <usbx_app_thread_entry+0x22>
                         TX_WAIT_FOREVER)!= TX_SUCCESS)
    {
     /*Error*/
     Error_Handler();
 8016b06:	f7ec ff05 	bl	8003914 <Error_Handler>
    }
    /* Check if received message equal to USB_PCD_START */
    if (Event_Msg == START_USB_DEVICE)
 8016b0a:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <usbx_app_thread_entry+0x4c>)
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	2b02      	cmp	r3, #2
 8016b10:	d104      	bne.n	8016b1c <usbx_app_thread_entry+0x34>
    {
      /* Start device USB */
      HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8016b12:	4b0a      	ldr	r3, [pc, #40]	; (8016b3c <usbx_app_thread_entry+0x54>)
 8016b14:	0018      	movs	r0, r3
 8016b16:	f7ed fd89 	bl	800462c <HAL_PCD_Start>
 8016b1a:	e7eb      	b.n	8016af4 <usbx_app_thread_entry+0xc>
    }
    /* Check if received message equal to USB_PCD_STOP */
    else if (Event_Msg == STOP_USB_DEVICE)
 8016b1c:	4b05      	ldr	r3, [pc, #20]	; (8016b34 <usbx_app_thread_entry+0x4c>)
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d104      	bne.n	8016b2e <usbx_app_thread_entry+0x46>
    {
      /* Stop device USB */
      HAL_PCD_Stop(&hpcd_USB_DRD_FS);
 8016b24:	4b05      	ldr	r3, [pc, #20]	; (8016b3c <usbx_app_thread_entry+0x54>)
 8016b26:	0018      	movs	r0, r3
 8016b28:	f7ed fda5 	bl	8004676 <HAL_PCD_Stop>
 8016b2c:	e7e2      	b.n	8016af4 <usbx_app_thread_entry+0xc>
    }
    /* Else Error */
    else
    {
      /*Error*/
      Error_Handler();
 8016b2e:	f7ec fef1 	bl	8003914 <Error_Handler>
    if (tx_queue_receive(&ux_app_MsgQueue, &Event_Msg,
 8016b32:	e7df      	b.n	8016af4 <usbx_app_thread_entry+0xc>
 8016b34:	2000914c 	.word	0x2000914c
 8016b38:	20009114 	.word	0x20009114
 8016b3c:	200083c8 	.word	0x200083c8

08016b40 <MX_USB_Device_Init>:
  *        Initialization of USB device.
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */
  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  MX_USB_DRD_FS_PCD_Init();
 8016b44:	f7ec fe02 	bl	800374c <MX_USB_DRD_FS_PCD_Init>

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x0C);
 8016b48:	480d      	ldr	r0, [pc, #52]	; (8016b80 <MX_USB_Device_Init+0x40>)
 8016b4a:	230c      	movs	r3, #12
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	2100      	movs	r1, #0
 8016b50:	f7ef fa48 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x4C);
 8016b54:	480a      	ldr	r0, [pc, #40]	; (8016b80 <MX_USB_Device_Init+0x40>)
 8016b56:	234c      	movs	r3, #76	; 0x4c
 8016b58:	2200      	movs	r2, #0
 8016b5a:	2180      	movs	r1, #128	; 0x80
 8016b5c:	f7ef fa42 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x81, PCD_SNG_BUF, 0x8C);
 8016b60:	4807      	ldr	r0, [pc, #28]	; (8016b80 <MX_USB_Device_Init+0x40>)
 8016b62:	238c      	movs	r3, #140	; 0x8c
 8016b64:	2200      	movs	r2, #0
 8016b66:	2181      	movs	r1, #129	; 0x81
 8016b68:	f7ef fa3c 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* initialize the device controller driver*/
  _ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 8016b6c:	4b04      	ldr	r3, [pc, #16]	; (8016b80 <MX_USB_Device_Init+0x40>)
 8016b6e:	4a05      	ldr	r2, [pc, #20]	; (8016b84 <MX_USB_Device_Init+0x44>)
 8016b70:	0019      	movs	r1, r3
 8016b72:	0010      	movs	r0, r2
 8016b74:	f7fe ff88 	bl	8015a88 <_ux_dcd_stm32_initialize>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8016b78:	46c0      	nop			; (mov r8, r8)
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}
 8016b7e:	46c0      	nop			; (mov r8, r8)
 8016b80:	200083c8 	.word	0x200083c8
 8016b84:	40005c00 	.word	0x40005c00

08016b88 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	0002      	movs	r2, r0
 8016b90:	6039      	str	r1, [r7, #0]
 8016b92:	1dfb      	adds	r3, r7, #7
 8016b94:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 8016b96:	2300      	movs	r3, #0
 8016b98:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8016b9a:	1dfb      	adds	r3, r7, #7
 8016b9c:	781b      	ldrb	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d116      	bne.n	8016bd0 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8016ba2:	4b19      	ldr	r3, [pc, #100]	; (8016c08 <USBD_Get_Device_Framework_Speed+0x80>)
 8016ba4:	6819      	ldr	r1, [r3, #0]
 8016ba6:	1dfb      	adds	r3, r7, #7
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	4a18      	ldr	r2, [pc, #96]	; (8016c0c <USBD_Get_Device_Framework_Speed+0x84>)
 8016bac:	4818      	ldr	r0, [pc, #96]	; (8016c10 <USBD_Get_Device_Framework_Speed+0x88>)
 8016bae:	f000 f967 	bl	8016e80 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8016bb2:	4a17      	ldr	r2, [pc, #92]	; (8016c10 <USBD_Get_Device_Framework_Speed+0x88>)
 8016bb4:	238a      	movs	r3, #138	; 0x8a
 8016bb6:	005b      	lsls	r3, r3, #1
 8016bb8:	58d2      	ldr	r2, [r2, r3]
 8016bba:	4915      	ldr	r1, [pc, #84]	; (8016c10 <USBD_Get_Device_Framework_Speed+0x88>)
 8016bbc:	238c      	movs	r3, #140	; 0x8c
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	58cb      	ldr	r3, [r1, r3]
 8016bc2:	18d2      	adds	r2, r2, r3
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8016bc8:	4b0f      	ldr	r3, [pc, #60]	; (8016c08 <USBD_Get_Device_Framework_Speed+0x80>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	60fb      	str	r3, [r7, #12]
 8016bce:	e015      	b.n	8016bfc <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8016bd0:	4b10      	ldr	r3, [pc, #64]	; (8016c14 <USBD_Get_Device_Framework_Speed+0x8c>)
 8016bd2:	6819      	ldr	r1, [r3, #0]
 8016bd4:	1dfb      	adds	r3, r7, #7
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	4a0c      	ldr	r2, [pc, #48]	; (8016c0c <USBD_Get_Device_Framework_Speed+0x84>)
 8016bda:	480f      	ldr	r0, [pc, #60]	; (8016c18 <USBD_Get_Device_Framework_Speed+0x90>)
 8016bdc:	f000 f950 	bl	8016e80 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8016be0:	4a0d      	ldr	r2, [pc, #52]	; (8016c18 <USBD_Get_Device_Framework_Speed+0x90>)
 8016be2:	238a      	movs	r3, #138	; 0x8a
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	58d2      	ldr	r2, [r2, r3]
 8016be8:	490b      	ldr	r1, [pc, #44]	; (8016c18 <USBD_Get_Device_Framework_Speed+0x90>)
 8016bea:	238c      	movs	r3, #140	; 0x8c
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	58cb      	ldr	r3, [r1, r3]
 8016bf0:	18d2      	adds	r2, r2, r3
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8016bf6:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <USBD_Get_Device_Framework_Speed+0x8c>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
}
 8016bfe:	0018      	movs	r0, r3
 8016c00:	46bd      	mov	sp, r7
 8016c02:	b004      	add	sp, #16
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	46c0      	nop			; (mov r8, r8)
 8016c08:	200000a8 	.word	0x200000a8
 8016c0c:	2000009c 	.word	0x2000009c
 8016c10:	20009150 	.word	0x20009150
 8016c14:	200000ac 	.word	0x200000ac
 8016c18:	2000926c 	.word	0x2000926c

08016c1c <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8016c1c:	b5b0      	push	{r4, r5, r7, lr}
 8016c1e:	b084      	sub	sp, #16
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8016c24:	250c      	movs	r5, #12
 8016c26:	197b      	adds	r3, r7, r5
 8016c28:	2200      	movs	r2, #0
 8016c2a:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 8016c2c:	240f      	movs	r4, #15
 8016c2e:	193b      	adds	r3, r7, r4
 8016c30:	2200      	movs	r2, #0
 8016c32:	701a      	strb	r2, [r3, #0]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016c34:	193b      	adds	r3, r7, r4
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	193a      	adds	r2, r7, r4
 8016c3a:	1c59      	adds	r1, r3, #1
 8016c3c:	7011      	strb	r1, [r2, #0]
 8016c3e:	001a      	movs	r2, r3
 8016c40:	4b43      	ldr	r3, [pc, #268]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016c42:	2109      	movs	r1, #9
 8016c44:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8016c46:	193b      	adds	r3, r7, r4
 8016c48:	781b      	ldrb	r3, [r3, #0]
 8016c4a:	193a      	adds	r2, r7, r4
 8016c4c:	1c59      	adds	r1, r3, #1
 8016c4e:	7011      	strb	r1, [r2, #0]
 8016c50:	001a      	movs	r2, r3
 8016c52:	4b3f      	ldr	r3, [pc, #252]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016c54:	2104      	movs	r1, #4
 8016c56:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 8016c58:	193b      	adds	r3, r7, r4
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	193a      	adds	r2, r7, r4
 8016c5e:	1c59      	adds	r1, r3, #1
 8016c60:	7011      	strb	r1, [r2, #0]
 8016c62:	001a      	movs	r2, r3
 8016c64:	4b3a      	ldr	r3, [pc, #232]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016c66:	2101      	movs	r1, #1
 8016c68:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 8016c6a:	193b      	adds	r3, r7, r4
 8016c6c:	781a      	ldrb	r2, [r3, #0]
 8016c6e:	4b38      	ldr	r3, [pc, #224]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016c70:	18d1      	adds	r1, r2, r3
 8016c72:	197a      	adds	r2, r7, r5
 8016c74:	4b37      	ldr	r3, [pc, #220]	; (8016d54 <USBD_Get_String_Framework+0x138>)
 8016c76:	0018      	movs	r0, r3
 8016c78:	f000 f8a8 	bl	8016dcc <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8016c7c:	197b      	adds	r3, r7, r5
 8016c7e:	881b      	ldrh	r3, [r3, #0]
 8016c80:	b2da      	uxtb	r2, r3
 8016c82:	193b      	adds	r3, r7, r4
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	18d3      	adds	r3, r2, r3
 8016c88:	b2da      	uxtb	r2, r3
 8016c8a:	193b      	adds	r3, r7, r4
 8016c8c:	3201      	adds	r2, #1
 8016c8e:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016c90:	193b      	adds	r3, r7, r4
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	193a      	adds	r2, r7, r4
 8016c96:	1c59      	adds	r1, r3, #1
 8016c98:	7011      	strb	r1, [r2, #0]
 8016c9a:	001a      	movs	r2, r3
 8016c9c:	4b2c      	ldr	r3, [pc, #176]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016c9e:	2109      	movs	r1, #9
 8016ca0:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8016ca2:	193b      	adds	r3, r7, r4
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	193a      	adds	r2, r7, r4
 8016ca8:	1c59      	adds	r1, r3, #1
 8016caa:	7011      	strb	r1, [r2, #0]
 8016cac:	001a      	movs	r2, r3
 8016cae:	4b28      	ldr	r3, [pc, #160]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016cb0:	2104      	movs	r1, #4
 8016cb2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8016cb4:	193b      	adds	r3, r7, r4
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	193a      	adds	r2, r7, r4
 8016cba:	1c59      	adds	r1, r3, #1
 8016cbc:	7011      	strb	r1, [r2, #0]
 8016cbe:	001a      	movs	r2, r3
 8016cc0:	4b23      	ldr	r3, [pc, #140]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016cc2:	2102      	movs	r1, #2
 8016cc4:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 8016cc6:	193b      	adds	r3, r7, r4
 8016cc8:	781a      	ldrb	r2, [r3, #0]
 8016cca:	4b21      	ldr	r3, [pc, #132]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016ccc:	18d1      	adds	r1, r2, r3
 8016cce:	197a      	adds	r2, r7, r5
 8016cd0:	4b21      	ldr	r3, [pc, #132]	; (8016d58 <USBD_Get_String_Framework+0x13c>)
 8016cd2:	0018      	movs	r0, r3
 8016cd4:	f000 f87a 	bl	8016dcc <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 8016cd8:	197b      	adds	r3, r7, r5
 8016cda:	881b      	ldrh	r3, [r3, #0]
 8016cdc:	b2da      	uxtb	r2, r3
 8016cde:	193b      	adds	r3, r7, r4
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	18d3      	adds	r3, r2, r3
 8016ce4:	b2da      	uxtb	r2, r3
 8016ce6:	193b      	adds	r3, r7, r4
 8016ce8:	3201      	adds	r2, #1
 8016cea:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016cec:	193b      	adds	r3, r7, r4
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	0020      	movs	r0, r4
 8016cf2:	193a      	adds	r2, r7, r4
 8016cf4:	1c59      	adds	r1, r3, #1
 8016cf6:	7011      	strb	r1, [r2, #0]
 8016cf8:	001a      	movs	r2, r3
 8016cfa:	4b15      	ldr	r3, [pc, #84]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016cfc:	2109      	movs	r1, #9
 8016cfe:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8016d00:	183b      	adds	r3, r7, r0
 8016d02:	781b      	ldrb	r3, [r3, #0]
 8016d04:	183a      	adds	r2, r7, r0
 8016d06:	1c59      	adds	r1, r3, #1
 8016d08:	7011      	strb	r1, [r2, #0]
 8016d0a:	001a      	movs	r2, r3
 8016d0c:	4b10      	ldr	r3, [pc, #64]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016d0e:	2104      	movs	r1, #4
 8016d10:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8016d12:	183b      	adds	r3, r7, r0
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	183a      	adds	r2, r7, r0
 8016d18:	1c59      	adds	r1, r3, #1
 8016d1a:	7011      	strb	r1, [r2, #0]
 8016d1c:	001a      	movs	r2, r3
 8016d1e:	4b0c      	ldr	r3, [pc, #48]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016d20:	2103      	movs	r1, #3
 8016d22:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8016d24:	183b      	adds	r3, r7, r0
 8016d26:	781a      	ldrb	r2, [r3, #0]
 8016d28:	4b09      	ldr	r3, [pc, #36]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016d2a:	18d1      	adds	r1, r2, r3
 8016d2c:	197a      	adds	r2, r7, r5
 8016d2e:	4b0b      	ldr	r3, [pc, #44]	; (8016d5c <USBD_Get_String_Framework+0x140>)
 8016d30:	0018      	movs	r0, r3
 8016d32:	f000 f84b 	bl	8016dcc <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8016d36:	4b06      	ldr	r3, [pc, #24]	; (8016d50 <USBD_Get_String_Framework+0x134>)
 8016d38:	0018      	movs	r0, r3
 8016d3a:	f7eb fe07 	bl	800294c <strlen>
 8016d3e:	0002      	movs	r2, r0
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8016d44:	4b02      	ldr	r3, [pc, #8]	; (8016d50 <USBD_Get_String_Framework+0x134>)
}
 8016d46:	0018      	movs	r0, r3
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	b004      	add	sp, #16
 8016d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8016d4e:	46c0      	nop			; (mov r8, r8)
 8016d50:	20009518 	.word	0x20009518
 8016d54:	080183f4 	.word	0x080183f4
 8016d58:	08018408 	.word	0x08018408
 8016d5c:	0801841c 	.word	0x0801841c

08016d60 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 8016d68:	200f      	movs	r0, #15
 8016d6a:	183b      	adds	r3, r7, r0
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8016d70:	183b      	adds	r3, r7, r0
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	183a      	adds	r2, r7, r0
 8016d76:	1c59      	adds	r1, r3, #1
 8016d78:	7011      	strb	r1, [r2, #0]
 8016d7a:	001a      	movs	r2, r3
 8016d7c:	4b0b      	ldr	r3, [pc, #44]	; (8016dac <USBD_Get_Language_Id_Framework+0x4c>)
 8016d7e:	2109      	movs	r1, #9
 8016d80:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8016d82:	183b      	adds	r3, r7, r0
 8016d84:	781b      	ldrb	r3, [r3, #0]
 8016d86:	183a      	adds	r2, r7, r0
 8016d88:	1c59      	adds	r1, r3, #1
 8016d8a:	7011      	strb	r1, [r2, #0]
 8016d8c:	001a      	movs	r2, r3
 8016d8e:	4b07      	ldr	r3, [pc, #28]	; (8016dac <USBD_Get_Language_Id_Framework+0x4c>)
 8016d90:	2104      	movs	r1, #4
 8016d92:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8016d94:	4b05      	ldr	r3, [pc, #20]	; (8016dac <USBD_Get_Language_Id_Framework+0x4c>)
 8016d96:	0018      	movs	r0, r3
 8016d98:	f7eb fdd8 	bl	800294c <strlen>
 8016d9c:	0002      	movs	r2, r0
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8016da2:	4b02      	ldr	r3, [pc, #8]	; (8016dac <USBD_Get_Language_Id_Framework+0x4c>)
}
 8016da4:	0018      	movs	r0, r3
 8016da6:	46bd      	mov	sp, r7
 8016da8:	b004      	add	sp, #16
 8016daa:	bd80      	pop	{r7, pc}
 8016dac:	20009618 	.word	0x20009618

08016db0 <USBD_Get_Device_HID_MOUSE_ReportDesc>:
  * @brief  USBD_Get_Device_HID_MOUSE_ReportDesc
  *         Return the device HID_MOUSE_Report descriptor
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_HID_MOUSE_ReportDesc(void)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
  uint8_t *pHidReportDesc = NULL;
 8016db6:	2300      	movs	r3, #0
 8016db8:	607b      	str	r3, [r7, #4]

  /* USER CODE HidReportDesc0 */

  /* USER CODE HidReportDesc0 */

  pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 8016dba:	4b03      	ldr	r3, [pc, #12]	; (8016dc8 <USBD_Get_Device_HID_MOUSE_ReportDesc+0x18>)
 8016dbc:	607b      	str	r3, [r7, #4]

  /* USER CODE HidReportDesc1 */

  /* USER CODE HidReportDesc1 */
  return pHidReportDesc;
 8016dbe:	687b      	ldr	r3, [r7, #4]
}
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	b002      	add	sp, #8
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	200000b0 	.word	0x200000b0

08016dcc <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016dcc:	b590      	push	{r4, r7, lr}
 8016dce:	b087      	sub	sp, #28
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	60b9      	str	r1, [r7, #8]
 8016dd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016dd8:	2417      	movs	r4, #23
 8016dda:	193b      	adds	r3, r7, r4
 8016ddc:	2200      	movs	r2, #0
 8016dde:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d029      	beq.n	8016e3a <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	0018      	movs	r0, r3
 8016dee:	f000 f828 	bl	8016e42 <USBD_Desc_GetLen>
 8016df2:	0003      	movs	r3, r0
 8016df4:	b29a      	uxth	r2, r3
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 8016dfa:	193b      	adds	r3, r7, r4
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	193a      	adds	r2, r7, r4
 8016e00:	1c59      	adds	r1, r3, #1
 8016e02:	7011      	strb	r1, [r2, #0]
 8016e04:	001a      	movs	r2, r3
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	189b      	adds	r3, r3, r2
 8016e0a:	687a      	ldr	r2, [r7, #4]
 8016e0c:	7812      	ldrb	r2, [r2, #0]
 8016e0e:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8016e10:	e00e      	b.n	8016e30 <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 8016e12:	2217      	movs	r2, #23
 8016e14:	18bb      	adds	r3, r7, r2
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	18ba      	adds	r2, r7, r2
 8016e1a:	1c59      	adds	r1, r3, #1
 8016e1c:	7011      	strb	r1, [r2, #0]
 8016e1e:	001a      	movs	r2, r3
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	189b      	adds	r3, r3, r2
 8016e24:	693a      	ldr	r2, [r7, #16]
 8016e26:	7812      	ldrb	r2, [r2, #0]
 8016e28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	3301      	adds	r3, #1
 8016e2e:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d1ec      	bne.n	8016e12 <USBD_Desc_GetString+0x46>
 8016e38:	e000      	b.n	8016e3c <USBD_Desc_GetString+0x70>
    return;
 8016e3a:	46c0      	nop			; (mov r8, r8)
  }
}
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	b007      	add	sp, #28
 8016e40:	bd90      	pop	{r4, r7, pc}

08016e42 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8016e42:	b580      	push	{r7, lr}
 8016e44:	b084      	sub	sp, #16
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016e4a:	230f      	movs	r3, #15
 8016e4c:	18fb      	adds	r3, r7, r3
 8016e4e:	2200      	movs	r2, #0
 8016e50:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016e56:	e008      	b.n	8016e6a <USBD_Desc_GetLen+0x28>
  {
    len++;
 8016e58:	210f      	movs	r1, #15
 8016e5a:	187b      	adds	r3, r7, r1
 8016e5c:	781a      	ldrb	r2, [r3, #0]
 8016e5e:	187b      	adds	r3, r7, r1
 8016e60:	3201      	adds	r2, #1
 8016e62:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8016e64:	68bb      	ldr	r3, [r7, #8]
 8016e66:	3301      	adds	r3, #1
 8016e68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1f2      	bne.n	8016e58 <USBD_Desc_GetLen+0x16>
  }

  return len;
 8016e72:	230f      	movs	r3, #15
 8016e74:	18fb      	adds	r3, r7, r3
 8016e76:	781b      	ldrb	r3, [r3, #0]
}
 8016e78:	0018      	movs	r0, r3
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	b004      	add	sp, #16
 8016e7e:	bd80      	pop	{r7, pc}

08016e80 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b088      	sub	sp, #32
 8016e84:	af02      	add	r7, sp, #8
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
 8016e8c:	001a      	movs	r2, r3
 8016e8e:	1cfb      	adds	r3, r7, #3
 8016e90:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8016e92:	2317      	movs	r3, #23
 8016e94:	18fb      	adds	r3, r7, r3
 8016e96:	2200      	movs	r2, #0
 8016e98:	701a      	strb	r2, [r3, #0]
  uint8_t NumberClass = 1U;
 8016e9a:	2316      	movs	r3, #22
 8016e9c:	18fb      	adds	r3, r7, r3
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 8016ea2:	68fa      	ldr	r2, [r7, #12]
 8016ea4:	238c      	movs	r3, #140	; 0x8c
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	2100      	movs	r1, #0
 8016eaa:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 8016eac:	68fa      	ldr	r2, [r7, #12]
 8016eae:	238a      	movs	r3, #138	; 0x8a
 8016eb0:	005b      	lsls	r3, r3, #1
 8016eb2:	2100      	movs	r1, #0
 8016eb4:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8016eb6:	4b8f      	ldr	r3, [pc, #572]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016eb8:	68ba      	ldr	r2, [r7, #8]
 8016eba:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8016ebc:	4b8d      	ldr	r3, [pc, #564]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2212      	movs	r2, #18
 8016ec2:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 8016ec4:	4b8b      	ldr	r3, [pc, #556]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8016ecc:	4b89      	ldr	r3, [pc, #548]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	789a      	ldrb	r2, [r3, #2]
 8016ed2:	2100      	movs	r1, #0
 8016ed4:	400a      	ands	r2, r1
 8016ed6:	709a      	strb	r2, [r3, #2]
 8016ed8:	78da      	ldrb	r2, [r3, #3]
 8016eda:	2100      	movs	r1, #0
 8016edc:	400a      	ands	r2, r1
 8016ede:	1c11      	adds	r1, r2, #0
 8016ee0:	2202      	movs	r2, #2
 8016ee2:	430a      	orrs	r2, r1
 8016ee4:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8016ee6:	4b83      	ldr	r3, [pc, #524]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	2200      	movs	r2, #0
 8016eec:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 8016eee:	4b81      	ldr	r3, [pc, #516]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8016ef6:	4b7f      	ldr	r3, [pc, #508]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	2200      	movs	r2, #0
 8016efc:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 8016efe:	4b7d      	ldr	r3, [pc, #500]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2240      	movs	r2, #64	; 0x40
 8016f04:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8016f06:	4b7b      	ldr	r3, [pc, #492]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	7a1a      	ldrb	r2, [r3, #8]
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	400a      	ands	r2, r1
 8016f10:	1c11      	adds	r1, r2, #0
 8016f12:	227d      	movs	r2, #125	; 0x7d
 8016f14:	4252      	negs	r2, r2
 8016f16:	430a      	orrs	r2, r1
 8016f18:	721a      	strb	r2, [r3, #8]
 8016f1a:	7a5a      	ldrb	r2, [r3, #9]
 8016f1c:	2100      	movs	r1, #0
 8016f1e:	400a      	ands	r2, r1
 8016f20:	1c11      	adds	r1, r2, #0
 8016f22:	2204      	movs	r2, #4
 8016f24:	430a      	orrs	r2, r1
 8016f26:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8016f28:	4b72      	ldr	r3, [pc, #456]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	7a9a      	ldrb	r2, [r3, #10]
 8016f2e:	2100      	movs	r1, #0
 8016f30:	400a      	ands	r2, r1
 8016f32:	1c11      	adds	r1, r2, #0
 8016f34:	2210      	movs	r2, #16
 8016f36:	430a      	orrs	r2, r1
 8016f38:	729a      	strb	r2, [r3, #10]
 8016f3a:	7ada      	ldrb	r2, [r3, #11]
 8016f3c:	2100      	movs	r1, #0
 8016f3e:	400a      	ands	r2, r1
 8016f40:	1c11      	adds	r1, r2, #0
 8016f42:	2257      	movs	r2, #87	; 0x57
 8016f44:	430a      	orrs	r2, r1
 8016f46:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8016f48:	4b6a      	ldr	r3, [pc, #424]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	7b1a      	ldrb	r2, [r3, #12]
 8016f4e:	2100      	movs	r1, #0
 8016f50:	400a      	ands	r2, r1
 8016f52:	731a      	strb	r2, [r3, #12]
 8016f54:	7b5a      	ldrb	r2, [r3, #13]
 8016f56:	2100      	movs	r1, #0
 8016f58:	400a      	ands	r2, r1
 8016f5a:	1c11      	adds	r1, r2, #0
 8016f5c:	2202      	movs	r2, #2
 8016f5e:	430a      	orrs	r2, r1
 8016f60:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 8016f62:	4b64      	ldr	r3, [pc, #400]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	2201      	movs	r2, #1
 8016f68:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8016f6a:	4b62      	ldr	r3, [pc, #392]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	2202      	movs	r2, #2
 8016f70:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 8016f72:	4b60      	ldr	r3, [pc, #384]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	2203      	movs	r2, #3
 8016f78:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8016f7a:	4b5e      	ldr	r3, [pc, #376]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	2201      	movs	r2, #1
 8016f80:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	238a      	movs	r3, #138	; 0x8a
 8016f86:	005b      	lsls	r3, r3, #1
 8016f88:	58d3      	ldr	r3, [r2, r3]
 8016f8a:	3312      	adds	r3, #18
 8016f8c:	0019      	movs	r1, r3
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	238a      	movs	r3, #138	; 0x8a
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8016f96:	1cfb      	adds	r3, r7, #3
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d000      	beq.n	8016fa0 <USBD_Device_Framework_Builder+0x120>
 8016f9e:	e07d      	b.n	801709c <USBD_Device_Framework_Builder+0x21c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8016fa0:	68fa      	ldr	r2, [r7, #12]
 8016fa2:	238a      	movs	r3, #138	; 0x8a
 8016fa4:	005b      	lsls	r3, r3, #1
 8016fa6:	58d3      	ldr	r3, [r2, r3]
 8016fa8:	68ba      	ldr	r2, [r7, #8]
 8016faa:	18d2      	adds	r2, r2, r3
 8016fac:	4b52      	ldr	r3, [pc, #328]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fae:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8016fb0:	4b51      	ldr	r3, [pc, #324]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	220a      	movs	r2, #10
 8016fb6:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8016fb8:	4b4f      	ldr	r3, [pc, #316]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	2206      	movs	r2, #6
 8016fbe:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8016fc0:	4b4d      	ldr	r3, [pc, #308]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	789a      	ldrb	r2, [r3, #2]
 8016fc6:	2100      	movs	r1, #0
 8016fc8:	400a      	ands	r2, r1
 8016fca:	709a      	strb	r2, [r3, #2]
 8016fcc:	78da      	ldrb	r2, [r3, #3]
 8016fce:	2100      	movs	r1, #0
 8016fd0:	400a      	ands	r2, r1
 8016fd2:	1c11      	adds	r1, r2, #0
 8016fd4:	2202      	movs	r2, #2
 8016fd6:	430a      	orrs	r2, r1
 8016fd8:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8016fda:	4b47      	ldr	r3, [pc, #284]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8016fe2:	4b45      	ldr	r3, [pc, #276]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8016fea:	4b43      	ldr	r3, [pc, #268]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8016ff2:	4b41      	ldr	r3, [pc, #260]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	2240      	movs	r2, #64	; 0x40
 8016ff8:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8016ffa:	4b3f      	ldr	r3, [pc, #252]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	2201      	movs	r2, #1
 8017000:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8017002:	4b3d      	ldr	r3, [pc, #244]	; (80170f8 <USBD_Device_Framework_Builder+0x278>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	2200      	movs	r2, #0
 8017008:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801700a:	68fa      	ldr	r2, [r7, #12]
 801700c:	238a      	movs	r3, #138	; 0x8a
 801700e:	005b      	lsls	r3, r3, #1
 8017010:	58d3      	ldr	r3, [r2, r3]
 8017012:	330a      	adds	r3, #10
 8017014:	0019      	movs	r1, r3
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	238a      	movs	r3, #138	; 0x8a
 801701a:	005b      	lsls	r3, r3, #1
 801701c:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801701e:	e03d      	b.n	801709c <USBD_Device_Framework_Builder+0x21c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	685b      	ldr	r3, [r3, #4]
 8017024:	2b02      	cmp	r3, #2
 8017026:	d821      	bhi.n	801706c <USBD_Device_Framework_Builder+0x1ec>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801702c:	2b02      	cmp	r3, #2
 801702e:	d81d      	bhi.n	801706c <USBD_Device_Framework_Builder+0x1ec>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8017030:	2317      	movs	r3, #23
 8017032:	18fb      	adds	r3, r7, r3
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 801703a:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed, (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801703c:	68fa      	ldr	r2, [r7, #12]
 801703e:	238a      	movs	r3, #138	; 0x8a
 8017040:	005b      	lsls	r3, r3, #1
 8017042:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 8017044:	68ba      	ldr	r2, [r7, #8]
 8017046:	18d3      	adds	r3, r2, r3
 8017048:	1cfa      	adds	r2, r7, #3
 801704a:	7812      	ldrb	r2, [r2, #0]
 801704c:	68f8      	ldr	r0, [r7, #12]
 801704e:	9300      	str	r3, [sp, #0]
 8017050:	0013      	movs	r3, r2
 8017052:	2200      	movs	r2, #0
 8017054:	f000 f852 	bl	80170fc <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	1c5a      	adds	r2, r3, #1
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	1c5a      	adds	r2, r3, #1
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	609a      	str	r2, [r3, #8]
    }
    Idx_Instance++;
 801706c:	2117      	movs	r1, #23
 801706e:	187b      	adds	r3, r7, r1
 8017070:	781a      	ldrb	r2, [r3, #0]
 8017072:	187b      	adds	r3, r7, r1
 8017074:	3201      	adds	r2, #1
 8017076:	701a      	strb	r2, [r3, #0]

    /* Count the number of Classes different of CLASS_TYPE_NONE */
    if (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE)
 8017078:	187b      	adds	r3, r7, r1
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	18d3      	adds	r3, r2, r3
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2016      	movs	r0, #22
 8017084:	183a      	adds	r2, r7, r0
 8017086:	1839      	adds	r1, r7, r0
 8017088:	7809      	ldrb	r1, [r1, #0]
 801708a:	7011      	strb	r1, [r2, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d005      	beq.n	801709c <USBD_Device_Framework_Builder+0x21c>
    {
      NumberClass++;
 8017090:	0001      	movs	r1, r0
 8017092:	187b      	adds	r3, r7, r1
 8017094:	781a      	ldrb	r2, [r3, #0]
 8017096:	187b      	adds	r3, r7, r1
 8017098:	3201      	adds	r2, #1
 801709a:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801709c:	2317      	movs	r3, #23
 801709e:	18fb      	adds	r3, r7, r3
 80170a0:	781b      	ldrb	r3, [r3, #0]
 80170a2:	2b02      	cmp	r3, #2
 80170a4:	d9bc      	bls.n	8017020 <USBD_Device_Framework_Builder+0x1a0>
    }
  }
  /* Check if there is a composite class and update device class */
  if (NumberClass > 1)
 80170a6:	2316      	movs	r3, #22
 80170a8:	18fb      	adds	r3, r7, r3
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d90c      	bls.n	80170ca <USBD_Device_Framework_Builder+0x24a>
  {
    pDevDesc->bDeviceClass = 0xEF;
 80170b0:	4b10      	ldr	r3, [pc, #64]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	22ef      	movs	r2, #239	; 0xef
 80170b6:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 80170b8:	4b0e      	ldr	r3, [pc, #56]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2202      	movs	r2, #2
 80170be:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 80170c0:	4b0c      	ldr	r3, [pc, #48]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2201      	movs	r2, #1
 80170c6:	719a      	strb	r2, [r3, #6]
 80170c8:	e00f      	b.n	80170ea <USBD_Device_Framework_Builder+0x26a>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	2b02      	cmp	r3, #2
 80170d0:	d10b      	bne.n	80170ea <USBD_Device_Framework_Builder+0x26a>
    {
      pDevDesc->bDeviceClass = 0x02;
 80170d2:	4b08      	ldr	r3, [pc, #32]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2202      	movs	r2, #2
 80170d8:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 80170da:	4b06      	ldr	r3, [pc, #24]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	2202      	movs	r2, #2
 80170e0:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 80170e2:	4b04      	ldr	r3, [pc, #16]	; (80170f4 <USBD_Device_Framework_Builder+0x274>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	2200      	movs	r2, #0
 80170e8:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 80170ea:	68bb      	ldr	r3, [r7, #8]
}
 80170ec:	0018      	movs	r0, r3
 80170ee:	46bd      	mov	sp, r7
 80170f0:	b006      	add	sp, #24
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	2000961c 	.word	0x2000961c
 80170f8:	20009620 	.word	0x20009620

080170fc <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 80170fc:	b590      	push	{r4, r7, lr}
 80170fe:	b083      	sub	sp, #12
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	000c      	movs	r4, r1
 8017106:	0010      	movs	r0, r2
 8017108:	0019      	movs	r1, r3
 801710a:	1cfb      	adds	r3, r7, #3
 801710c:	1c22      	adds	r2, r4, #0
 801710e:	701a      	strb	r2, [r3, #0]
 8017110:	1cbb      	adds	r3, r7, #2
 8017112:	1c02      	adds	r2, r0, #0
 8017114:	701a      	strb	r2, [r3, #0]
 8017116:	1c7b      	adds	r3, r7, #1
 8017118:	1c0a      	adds	r2, r1, #0
 801711a:	701a      	strb	r2, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	685b      	ldr	r3, [r3, #4]
 8017120:	2b02      	cmp	r3, #2
 8017122:	d831      	bhi.n	8017188 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	2158      	movs	r1, #88	; 0x58
 801712c:	434b      	muls	r3, r1
 801712e:	18d3      	adds	r3, r2, r3
 8017130:	3314      	adds	r3, #20
 8017132:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8017134:	2b00      	cmp	r3, #0
 8017136:	d127      	bne.n	8017188 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6858      	ldr	r0, [r3, #4]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	685a      	ldr	r2, [r3, #4]
 8017140:	6879      	ldr	r1, [r7, #4]
 8017142:	2358      	movs	r3, #88	; 0x58
 8017144:	4343      	muls	r3, r0
 8017146:	18cb      	adds	r3, r1, r3
 8017148:	3310      	adds	r3, #16
 801714a:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	687a      	ldr	r2, [r7, #4]
 8017152:	2158      	movs	r1, #88	; 0x58
 8017154:	434b      	muls	r3, r1
 8017156:	18d3      	adds	r3, r2, r3
 8017158:	3314      	adds	r3, #20
 801715a:	2201      	movs	r2, #1
 801715c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	685b      	ldr	r3, [r3, #4]
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	2158      	movs	r1, #88	; 0x58
 8017166:	434b      	muls	r3, r1
 8017168:	18d3      	adds	r3, r2, r3
 801716a:	330c      	adds	r3, #12
 801716c:	1cfa      	adds	r2, r7, #3
 801716e:	7812      	ldrb	r2, [r2, #0]
 8017170:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8017172:	69ba      	ldr	r2, [r7, #24]
 8017174:	1c7b      	adds	r3, r7, #1
 8017176:	7819      	ldrb	r1, [r3, #0]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	0018      	movs	r0, r3
 801717c:	f000 f809 	bl	8017192 <USBD_FrameWork_AddToConfDesc>
 8017180:	1e03      	subs	r3, r0, #0
 8017182:	d001      	beq.n	8017188 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8017184:	23ff      	movs	r3, #255	; 0xff
 8017186:	e000      	b.n	801718a <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8017188:	2300      	movs	r3, #0
}
 801718a:	0018      	movs	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	b003      	add	sp, #12
 8017190:	bd90      	pop	{r4, r7, pc}

08017192 <USBD_FrameWork_AddToConfDesc>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8017192:	b5b0      	push	{r4, r5, r7, lr}
 8017194:	b086      	sub	sp, #24
 8017196:	af00      	add	r7, sp, #0
 8017198:	60f8      	str	r0, [r7, #12]
 801719a:	607a      	str	r2, [r7, #4]
 801719c:	200b      	movs	r0, #11
 801719e:	183b      	adds	r3, r7, r0
 80171a0:	1c0a      	adds	r2, r1, #0
 80171a2:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 80171a4:	2317      	movs	r3, #23
 80171a6:	18fb      	adds	r3, r7, r3
 80171a8:	2200      	movs	r2, #0
 80171aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	183a      	adds	r2, r7, r0
 80171b0:	7812      	ldrb	r2, [r2, #0]
 80171b2:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d107      	bne.n	80171cc <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3319      	adds	r3, #25
 80171c2:	33ff      	adds	r3, #255	; 0xff
 80171c4:	0019      	movs	r1, r3
 80171c6:	0010      	movs	r0, r2
 80171c8:	f000 f87a 	bl	80172c0 <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	685b      	ldr	r3, [r3, #4]
 80171d0:	68fa      	ldr	r2, [r7, #12]
 80171d2:	2158      	movs	r1, #88	; 0x58
 80171d4:	434b      	muls	r3, r1
 80171d6:	18d3      	adds	r3, r2, r3
 80171d8:	330c      	adds	r3, #12
 80171da:	781b      	ldrb	r3, [r3, #0]
 80171dc:	2b01      	cmp	r3, #1
 80171de:	d13f      	bne.n	8017260 <USBD_FrameWork_AddToConfDesc+0xce>
  {

#if USBD_HID_CLASS_ACTIVATED == 1U
    case CLASS_TYPE_HID:
      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 80171e0:	2517      	movs	r5, #23
 80171e2:	197c      	adds	r4, r7, r5
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	0018      	movs	r0, r3
 80171e8:	f000 f840 	bl	801726c <USBD_FrameWork_FindFreeIFNbr>
 80171ec:	0003      	movs	r3, r0
 80171ee:	7023      	strb	r3, [r4, #0]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	68fa      	ldr	r2, [r7, #12]
 80171f6:	2158      	movs	r1, #88	; 0x58
 80171f8:	434b      	muls	r3, r1
 80171fa:	18d3      	adds	r3, r2, r3
 80171fc:	3354      	adds	r3, #84	; 0x54
 80171fe:	2201      	movs	r2, #1
 8017200:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	68fa      	ldr	r2, [r7, #12]
 8017208:	2158      	movs	r1, #88	; 0x58
 801720a:	2058      	movs	r0, #88	; 0x58
 801720c:	4343      	muls	r3, r0
 801720e:	18d3      	adds	r3, r2, r3
 8017210:	185b      	adds	r3, r3, r1
 8017212:	197a      	adds	r2, r7, r5
 8017214:	7812      	ldrb	r2, [r2, #0]
 8017216:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	68fa      	ldr	r2, [r7, #12]
 801721e:	2158      	movs	r1, #88	; 0x58
 8017220:	434b      	muls	r3, r1
 8017222:	18d3      	adds	r3, r2, r3
 8017224:	3318      	adds	r3, #24
 8017226:	2201      	movs	r2, #1
 8017228:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoint IN */
      if (pdev->Speed == USBD_HIGH_SPEED)
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	2b01      	cmp	r3, #1
 8017230:	d106      	bne.n	8017240 <USBD_FrameWork_AddToConfDesc+0xae>
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8017232:	68f8      	ldr	r0, [r7, #12]
 8017234:	2304      	movs	r3, #4
 8017236:	2203      	movs	r2, #3
 8017238:	2181      	movs	r1, #129	; 0x81
 801723a:	f000 f870 	bl	801731e <USBD_FrameWork_AssignEp>
 801723e:	e005      	b.n	801724c <USBD_FrameWork_AddToConfDesc+0xba>
                                USBD_HID_EPIN_HS_MPS);
      }
      else
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8017240:	68f8      	ldr	r0, [r7, #12]
 8017242:	2304      	movs	r3, #4
 8017244:	2203      	movs	r2, #3
 8017246:	2181      	movs	r1, #129	; 0x81
 8017248:	f000 f869 	bl	801731e <USBD_FrameWork_AssignEp>
                                USBD_HID_EPIN_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801724c:	6879      	ldr	r1, [r7, #4]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	3319      	adds	r3, #25
 8017252:	33ff      	adds	r3, #255	; 0xff
 8017254:	001a      	movs	r2, r3
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	0018      	movs	r0, r3
 801725a:	f000 f8d9 	bl	8017410 <USBD_FrameWork_HID_Desc>

      break;
 801725e:	e000      	b.n	8017262 <USBD_FrameWork_AddToConfDesc+0xd0>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 8017260:	46c0      	nop			; (mov r8, r8)
  }

  return UX_SUCCESS;
 8017262:	2300      	movs	r3, #0
}
 8017264:	0018      	movs	r0, r3
 8017266:	46bd      	mov	sp, r7
 8017268:	b006      	add	sp, #24
 801726a:	bdb0      	pop	{r4, r5, r7, pc}

0801726c <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b086      	sub	sp, #24
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8017274:	2300      	movs	r3, #0
 8017276:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8017278:	2300      	movs	r3, #0
 801727a:	613b      	str	r3, [r7, #16]
 801727c:	e015      	b.n	80172aa <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801727e:	2300      	movs	r3, #0
 8017280:	60fb      	str	r3, [r7, #12]
 8017282:	e005      	b.n	8017290 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	3301      	adds	r3, #1
 8017288:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	3301      	adds	r3, #1
 801728e:	60fb      	str	r3, [r7, #12]
 8017290:	687a      	ldr	r2, [r7, #4]
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	2158      	movs	r1, #88	; 0x58
 8017296:	434b      	muls	r3, r1
 8017298:	18d3      	adds	r3, r2, r3
 801729a:	3354      	adds	r3, #84	; 0x54
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	68fa      	ldr	r2, [r7, #12]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d3ef      	bcc.n	8017284 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	3301      	adds	r3, #1
 80172a8:	613b      	str	r3, [r7, #16]
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	689b      	ldr	r3, [r3, #8]
 80172ae:	693a      	ldr	r2, [r7, #16]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d3e4      	bcc.n	801727e <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	b2db      	uxtb	r3, r3
}
 80172b8:	0018      	movs	r0, r3
 80172ba:	46bd      	mov	sp, r7
 80172bc:	b006      	add	sp, #24
 80172be:	bd80      	pop	{r7, pc}

080172c0 <USBD_FrameWork_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b084      	sub	sp, #16
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	60fb      	str	r3, [r7, #12]

  ptr->bLength                = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	2209      	movs	r2, #9
 80172d2:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType        = USB_DESC_TYPE_CONFIGURATION;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	2202      	movs	r2, #2
 80172d8:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength      = 0U;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	789a      	ldrb	r2, [r3, #2]
 80172de:	2100      	movs	r1, #0
 80172e0:	400a      	ands	r2, r1
 80172e2:	709a      	strb	r2, [r3, #2]
 80172e4:	78da      	ldrb	r2, [r3, #3]
 80172e6:	2100      	movs	r1, #0
 80172e8:	400a      	ands	r2, r1
 80172ea:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces         = 0U;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2200      	movs	r2, #0
 80172f0:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue    = 1U;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	2201      	movs	r2, #1
 80172f6:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration         = USBD_CONFIG_STR_DESC_IDX;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2200      	movs	r2, #0
 80172fc:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes           = USBD_CONFIG_BMATTRIBUTES;
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	22c0      	movs	r2, #192	; 0xc0
 8017302:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower              = USBD_CONFIG_MAXPOWER;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	2219      	movs	r2, #25
 8017308:	721a      	strb	r2, [r3, #8]
  *pSze                       += sizeof(USBD_ConfigDescTypedef);
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	3309      	adds	r3, #9
 8017310:	001a      	movs	r2, r3
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	601a      	str	r2, [r3, #0]
}
 8017316:	46c0      	nop			; (mov r8, r8)
 8017318:	46bd      	mov	sp, r7
 801731a:	b004      	add	sp, #16
 801731c:	bd80      	pop	{r7, pc}

0801731e <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 801731e:	b590      	push	{r4, r7, lr}
 8017320:	b087      	sub	sp, #28
 8017322:	af00      	add	r7, sp, #0
 8017324:	60f8      	str	r0, [r7, #12]
 8017326:	0008      	movs	r0, r1
 8017328:	0011      	movs	r1, r2
 801732a:	607b      	str	r3, [r7, #4]
 801732c:	230b      	movs	r3, #11
 801732e:	18fb      	adds	r3, r7, r3
 8017330:	1c02      	adds	r2, r0, #0
 8017332:	701a      	strb	r2, [r3, #0]
 8017334:	230a      	movs	r3, #10
 8017336:	18fb      	adds	r3, r7, r3
 8017338:	1c0a      	adds	r2, r1, #0
 801733a:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 801733c:	2300      	movs	r3, #0
 801733e:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8017340:	e002      	b.n	8017348 <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	3301      	adds	r3, #1
 8017346:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	685b      	ldr	r3, [r3, #4]
 801734c:	68fa      	ldr	r2, [r7, #12]
 801734e:	2158      	movs	r1, #88	; 0x58
 8017350:	434b      	muls	r3, r1
 8017352:	18d3      	adds	r3, r2, r3
 8017354:	3318      	adds	r3, #24
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	697a      	ldr	r2, [r7, #20]
 801735a:	429a      	cmp	r2, r3
 801735c:	d210      	bcs.n	8017380 <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	6858      	ldr	r0, [r3, #4]
 8017362:	68f9      	ldr	r1, [r7, #12]
 8017364:	697a      	ldr	r2, [r7, #20]
 8017366:	2420      	movs	r4, #32
 8017368:	0013      	movs	r3, r2
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	189b      	adds	r3, r3, r2
 801736e:	005b      	lsls	r3, r3, #1
 8017370:	2258      	movs	r2, #88	; 0x58
 8017372:	4342      	muls	r2, r0
 8017374:	189b      	adds	r3, r3, r2
 8017376:	18cb      	adds	r3, r1, r3
 8017378:	191b      	adds	r3, r3, r4
 801737a:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801737c:	2b00      	cmp	r3, #0
 801737e:	d1e0      	bne.n	8017342 <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	6858      	ldr	r0, [r3, #4]
 8017384:	68f9      	ldr	r1, [r7, #12]
 8017386:	697a      	ldr	r2, [r7, #20]
 8017388:	0013      	movs	r3, r2
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	189b      	adds	r3, r3, r2
 801738e:	005b      	lsls	r3, r3, #1
 8017390:	2258      	movs	r2, #88	; 0x58
 8017392:	4342      	muls	r2, r0
 8017394:	189b      	adds	r3, r3, r2
 8017396:	18cb      	adds	r3, r1, r3
 8017398:	331c      	adds	r3, #28
 801739a:	220b      	movs	r2, #11
 801739c:	18ba      	adds	r2, r7, r2
 801739e:	7812      	ldrb	r2, [r2, #0]
 80173a0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	6858      	ldr	r0, [r3, #4]
 80173a6:	68f9      	ldr	r1, [r7, #12]
 80173a8:	697a      	ldr	r2, [r7, #20]
 80173aa:	0013      	movs	r3, r2
 80173ac:	005b      	lsls	r3, r3, #1
 80173ae:	189b      	adds	r3, r3, r2
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	2258      	movs	r2, #88	; 0x58
 80173b4:	4342      	muls	r2, r0
 80173b6:	189b      	adds	r3, r3, r2
 80173b8:	18cb      	adds	r3, r1, r3
 80173ba:	331d      	adds	r3, #29
 80173bc:	220a      	movs	r2, #10
 80173be:	18ba      	adds	r2, r7, r2
 80173c0:	7812      	ldrb	r2, [r2, #0]
 80173c2:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6858      	ldr	r0, [r3, #4]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	b29c      	uxth	r4, r3
 80173cc:	68f9      	ldr	r1, [r7, #12]
 80173ce:	697a      	ldr	r2, [r7, #20]
 80173d0:	0013      	movs	r3, r2
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	189b      	adds	r3, r3, r2
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	2258      	movs	r2, #88	; 0x58
 80173da:	4342      	muls	r2, r0
 80173dc:	189b      	adds	r3, r3, r2
 80173de:	18cb      	adds	r3, r1, r3
 80173e0:	331e      	adds	r3, #30
 80173e2:	1c22      	adds	r2, r4, #0
 80173e4:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	6858      	ldr	r0, [r3, #4]
 80173ea:	68f9      	ldr	r1, [r7, #12]
 80173ec:	697a      	ldr	r2, [r7, #20]
 80173ee:	2420      	movs	r4, #32
 80173f0:	0013      	movs	r3, r2
 80173f2:	005b      	lsls	r3, r3, #1
 80173f4:	189b      	adds	r3, r3, r2
 80173f6:	005b      	lsls	r3, r3, #1
 80173f8:	2258      	movs	r2, #88	; 0x58
 80173fa:	4342      	muls	r2, r0
 80173fc:	189b      	adds	r3, r3, r2
 80173fe:	18cb      	adds	r3, r1, r3
 8017400:	191b      	adds	r3, r3, r4
 8017402:	2201      	movs	r2, #1
 8017404:	701a      	strb	r2, [r3, #0]
}
 8017406:	46c0      	nop			; (mov r8, r8)
 8017408:	46bd      	mov	sp, r7
 801740a:	b007      	add	sp, #28
 801740c:	bd90      	pop	{r4, r7, pc}
	...

08017410 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 8017410:	b590      	push	{r4, r7, lr}
 8017412:	b085      	sub	sp, #20
 8017414:	af00      	add	r7, sp, #0
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	18d3      	adds	r3, r2, r3
 8017424:	001a      	movs	r2, r3
 8017426:	4b9d      	ldr	r3, [pc, #628]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017428:	601a      	str	r2, [r3, #0]
 801742a:	4b9c      	ldr	r3, [pc, #624]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	2209      	movs	r2, #9
 8017430:	701a      	strb	r2, [r3, #0]
 8017432:	4b9a      	ldr	r3, [pc, #616]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	2204      	movs	r2, #4
 8017438:	705a      	strb	r2, [r3, #1]
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	685a      	ldr	r2, [r3, #4]
 801743e:	4b97      	ldr	r3, [pc, #604]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	68f9      	ldr	r1, [r7, #12]
 8017444:	2058      	movs	r0, #88	; 0x58
 8017446:	2458      	movs	r4, #88	; 0x58
 8017448:	4362      	muls	r2, r4
 801744a:	188a      	adds	r2, r1, r2
 801744c:	1812      	adds	r2, r2, r0
 801744e:	7812      	ldrb	r2, [r2, #0]
 8017450:	709a      	strb	r2, [r3, #2]
 8017452:	4b92      	ldr	r3, [pc, #584]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	2200      	movs	r2, #0
 8017458:	70da      	strb	r2, [r3, #3]
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	685b      	ldr	r3, [r3, #4]
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	2158      	movs	r1, #88	; 0x58
 8017462:	434b      	muls	r3, r1
 8017464:	18d3      	adds	r3, r2, r3
 8017466:	3318      	adds	r3, #24
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	4b8c      	ldr	r3, [pc, #560]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	b2d2      	uxtb	r2, r2
 8017470:	711a      	strb	r2, [r3, #4]
 8017472:	4b8a      	ldr	r3, [pc, #552]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2203      	movs	r2, #3
 8017478:	715a      	strb	r2, [r3, #5]
 801747a:	4b88      	ldr	r3, [pc, #544]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2201      	movs	r2, #1
 8017480:	719a      	strb	r2, [r3, #6]
 8017482:	4b86      	ldr	r3, [pc, #536]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2202      	movs	r2, #2
 8017488:	71da      	strb	r2, [r3, #7]
 801748a:	4b84      	ldr	r3, [pc, #528]	; (801769c <USBD_FrameWork_HID_Desc+0x28c>)
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	2200      	movs	r2, #0
 8017490:	721a      	strb	r2, [r3, #8]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	3309      	adds	r3, #9
 8017498:	001a      	movs	r2, r3
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	601a      	str	r2, [r3, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681a      	ldr	r2, [r3, #0]
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	18d3      	adds	r3, r2, r3
 80174a6:	001a      	movs	r2, r3
 80174a8:	4b7d      	ldr	r3, [pc, #500]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174aa:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 80174ac:	4b7c      	ldr	r3, [pc, #496]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2209      	movs	r2, #9
 80174b2:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 80174b4:	4b7a      	ldr	r3, [pc, #488]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2221      	movs	r2, #33	; 0x21
 80174ba:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 80174bc:	4b78      	ldr	r3, [pc, #480]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	789a      	ldrb	r2, [r3, #2]
 80174c2:	2100      	movs	r1, #0
 80174c4:	400a      	ands	r2, r1
 80174c6:	1c11      	adds	r1, r2, #0
 80174c8:	2211      	movs	r2, #17
 80174ca:	430a      	orrs	r2, r1
 80174cc:	709a      	strb	r2, [r3, #2]
 80174ce:	78da      	ldrb	r2, [r3, #3]
 80174d0:	2100      	movs	r1, #0
 80174d2:	400a      	ands	r2, r1
 80174d4:	1c11      	adds	r1, r2, #0
 80174d6:	2201      	movs	r2, #1
 80174d8:	430a      	orrs	r2, r1
 80174da:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 80174dc:	4b70      	ldr	r3, [pc, #448]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2200      	movs	r2, #0
 80174e2:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 80174e4:	4b6e      	ldr	r3, [pc, #440]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2201      	movs	r2, #1
 80174ea:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 80174ec:	4b6c      	ldr	r3, [pc, #432]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	2222      	movs	r2, #34	; 0x22
 80174f2:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = USBD_HID_MOUSE_REPORT_DESC_SIZE;
 80174f4:	4b6a      	ldr	r3, [pc, #424]	; (80176a0 <USBD_FrameWork_HID_Desc+0x290>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	3307      	adds	r3, #7
 80174fa:	781a      	ldrb	r2, [r3, #0]
 80174fc:	2100      	movs	r1, #0
 80174fe:	400a      	ands	r2, r1
 8017500:	1c11      	adds	r1, r2, #0
 8017502:	224a      	movs	r2, #74	; 0x4a
 8017504:	430a      	orrs	r2, r1
 8017506:	701a      	strb	r2, [r3, #0]
 8017508:	785a      	ldrb	r2, [r3, #1]
 801750a:	2100      	movs	r1, #0
 801750c:	400a      	ands	r2, r1
 801750e:	705a      	strb	r2, [r3, #1]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	3309      	adds	r3, #9
 8017516:	001a      	movs	r2, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	601a      	str	r2, [r3, #0]

  if (pdev->Speed == USBD_HIGH_SPEED)
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	2b01      	cmp	r3, #1
 8017522:	d14d      	bne.n	80175c0 <USBD_FrameWork_HID_Desc+0x1b0>
  {
    /* Append Endpoint descriptor to Configuration descriptor */
    __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681a      	ldr	r2, [r3, #0]
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	18d3      	adds	r3, r2, r3
 801752c:	001a      	movs	r2, r3
 801752e:	4b5d      	ldr	r3, [pc, #372]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017530:	601a      	str	r2, [r3, #0]
 8017532:	4b5c      	ldr	r3, [pc, #368]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	2207      	movs	r2, #7
 8017538:	701a      	strb	r2, [r3, #0]
 801753a:	4b5a      	ldr	r3, [pc, #360]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2205      	movs	r2, #5
 8017540:	705a      	strb	r2, [r3, #1]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	685a      	ldr	r2, [r3, #4]
 8017546:	4b57      	ldr	r3, [pc, #348]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	68f9      	ldr	r1, [r7, #12]
 801754c:	2058      	movs	r0, #88	; 0x58
 801754e:	4342      	muls	r2, r0
 8017550:	188a      	adds	r2, r1, r2
 8017552:	321c      	adds	r2, #28
 8017554:	7812      	ldrb	r2, [r2, #0]
 8017556:	709a      	strb	r2, [r3, #2]
 8017558:	4b52      	ldr	r3, [pc, #328]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	2203      	movs	r2, #3
 801755e:	70da      	strb	r2, [r3, #3]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	685a      	ldr	r2, [r3, #4]
 8017564:	4b4f      	ldr	r3, [pc, #316]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	68f9      	ldr	r1, [r7, #12]
 801756a:	2058      	movs	r0, #88	; 0x58
 801756c:	4342      	muls	r2, r0
 801756e:	188a      	adds	r2, r1, r2
 8017570:	321e      	adds	r2, #30
 8017572:	8812      	ldrh	r2, [r2, #0]
 8017574:	21ff      	movs	r1, #255	; 0xff
 8017576:	4011      	ands	r1, r2
 8017578:	000c      	movs	r4, r1
 801757a:	7919      	ldrb	r1, [r3, #4]
 801757c:	2000      	movs	r0, #0
 801757e:	4001      	ands	r1, r0
 8017580:	1c08      	adds	r0, r1, #0
 8017582:	1c21      	adds	r1, r4, #0
 8017584:	4301      	orrs	r1, r0
 8017586:	7119      	strb	r1, [r3, #4]
 8017588:	0a12      	lsrs	r2, r2, #8
 801758a:	b290      	uxth	r0, r2
 801758c:	795a      	ldrb	r2, [r3, #5]
 801758e:	2100      	movs	r1, #0
 8017590:	400a      	ands	r2, r1
 8017592:	1c11      	adds	r1, r2, #0
 8017594:	1c02      	adds	r2, r0, #0
 8017596:	430a      	orrs	r2, r1
 8017598:	715a      	strb	r2, [r3, #5]
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	2b01      	cmp	r3, #1
 80175a0:	d104      	bne.n	80175ac <USBD_FrameWork_HID_Desc+0x19c>
 80175a2:	4b40      	ldr	r3, [pc, #256]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	2205      	movs	r2, #5
 80175a8:	719a      	strb	r2, [r3, #6]
 80175aa:	e003      	b.n	80175b4 <USBD_FrameWork_HID_Desc+0x1a4>
 80175ac:	4b3d      	ldr	r3, [pc, #244]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	2205      	movs	r2, #5
 80175b2:	719a      	strb	r2, [r3, #6]
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	1dda      	adds	r2, r3, #7
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	601a      	str	r2, [r3, #0]
 80175be:	e04c      	b.n	801765a <USBD_FrameWork_HID_Desc+0x24a>
                            USBD_HID_EPIN_HS_BINTERVAL, USBD_HID_EPIN_FS_BINTERVAL);
  }
  else
  {
    /* Append Endpoint descriptor to Configuration descriptor */
    __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681a      	ldr	r2, [r3, #0]
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	18d3      	adds	r3, r2, r3
 80175c8:	001a      	movs	r2, r3
 80175ca:	4b36      	ldr	r3, [pc, #216]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175cc:	601a      	str	r2, [r3, #0]
 80175ce:	4b35      	ldr	r3, [pc, #212]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	2207      	movs	r2, #7
 80175d4:	701a      	strb	r2, [r3, #0]
 80175d6:	4b33      	ldr	r3, [pc, #204]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	2205      	movs	r2, #5
 80175dc:	705a      	strb	r2, [r3, #1]
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	685a      	ldr	r2, [r3, #4]
 80175e2:	4b30      	ldr	r3, [pc, #192]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	68f9      	ldr	r1, [r7, #12]
 80175e8:	2058      	movs	r0, #88	; 0x58
 80175ea:	4342      	muls	r2, r0
 80175ec:	188a      	adds	r2, r1, r2
 80175ee:	321c      	adds	r2, #28
 80175f0:	7812      	ldrb	r2, [r2, #0]
 80175f2:	709a      	strb	r2, [r3, #2]
 80175f4:	4b2b      	ldr	r3, [pc, #172]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	2203      	movs	r2, #3
 80175fa:	70da      	strb	r2, [r3, #3]
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	685a      	ldr	r2, [r3, #4]
 8017600:	4b28      	ldr	r3, [pc, #160]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	68f9      	ldr	r1, [r7, #12]
 8017606:	2058      	movs	r0, #88	; 0x58
 8017608:	4342      	muls	r2, r0
 801760a:	188a      	adds	r2, r1, r2
 801760c:	321e      	adds	r2, #30
 801760e:	8812      	ldrh	r2, [r2, #0]
 8017610:	21ff      	movs	r1, #255	; 0xff
 8017612:	4011      	ands	r1, r2
 8017614:	000c      	movs	r4, r1
 8017616:	7919      	ldrb	r1, [r3, #4]
 8017618:	2000      	movs	r0, #0
 801761a:	4001      	ands	r1, r0
 801761c:	1c08      	adds	r0, r1, #0
 801761e:	1c21      	adds	r1, r4, #0
 8017620:	4301      	orrs	r1, r0
 8017622:	7119      	strb	r1, [r3, #4]
 8017624:	0a12      	lsrs	r2, r2, #8
 8017626:	b290      	uxth	r0, r2
 8017628:	795a      	ldrb	r2, [r3, #5]
 801762a:	2100      	movs	r1, #0
 801762c:	400a      	ands	r2, r1
 801762e:	1c11      	adds	r1, r2, #0
 8017630:	1c02      	adds	r2, r0, #0
 8017632:	430a      	orrs	r2, r1
 8017634:	715a      	strb	r2, [r3, #5]
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	2b01      	cmp	r3, #1
 801763c:	d104      	bne.n	8017648 <USBD_FrameWork_HID_Desc+0x238>
 801763e:	4b19      	ldr	r3, [pc, #100]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2205      	movs	r2, #5
 8017644:	719a      	strb	r2, [r3, #6]
 8017646:	e003      	b.n	8017650 <USBD_FrameWork_HID_Desc+0x240>
 8017648:	4b16      	ldr	r3, [pc, #88]	; (80176a4 <USBD_FrameWork_HID_Desc+0x294>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2205      	movs	r2, #5
 801764e:	719a      	strb	r2, [r3, #6]
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	1dda      	adds	r2, r3, #7
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	601a      	str	r2, [r3, #0]
                            (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                            USBD_HID_EPIN_HS_BINTERVAL, USBD_HID_EPIN_FS_BINTERVAL);
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	791a      	ldrb	r2, [r3, #4]
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	3201      	adds	r2, #1
 8017662:	b2d2      	uxtb	r2, r2
 8017664:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength  = *Sze;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	b292      	uxth	r2, r2
 801766e:	21ff      	movs	r1, #255	; 0xff
 8017670:	4011      	ands	r1, r2
 8017672:	000c      	movs	r4, r1
 8017674:	7899      	ldrb	r1, [r3, #2]
 8017676:	2000      	movs	r0, #0
 8017678:	4001      	ands	r1, r0
 801767a:	1c08      	adds	r0, r1, #0
 801767c:	1c21      	adds	r1, r4, #0
 801767e:	4301      	orrs	r1, r0
 8017680:	7099      	strb	r1, [r3, #2]
 8017682:	0a12      	lsrs	r2, r2, #8
 8017684:	b290      	uxth	r0, r2
 8017686:	78da      	ldrb	r2, [r3, #3]
 8017688:	2100      	movs	r1, #0
 801768a:	400a      	ands	r2, r1
 801768c:	1c11      	adds	r1, r2, #0
 801768e:	1c02      	adds	r2, r0, #0
 8017690:	430a      	orrs	r2, r1
 8017692:	70da      	strb	r2, [r3, #3]

}
 8017694:	46c0      	nop			; (mov r8, r8)
 8017696:	46bd      	mov	sp, r7
 8017698:	b005      	add	sp, #20
 801769a:	bd90      	pop	{r4, r7, pc}
 801769c:	20009624 	.word	0x20009624
 80176a0:	20009628 	.word	0x20009628
 80176a4:	2000962c 	.word	0x2000962c

080176a8 <app_usbx_device_thread_hid_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UINT app_usbx_device_thread_hid_callback(UX_SLAVE_CLASS_HID *hid,
                                         UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
  return 0U;
 80176b2:	2300      	movs	r3, #0
}
 80176b4:	0018      	movs	r0, r3
 80176b6:	46bd      	mov	sp, r7
 80176b8:	b002      	add	sp, #8
 80176ba:	bd80      	pop	{r7, pc}

080176bc <usbx_hid_thread_entry>:
  * @brief  Function implementing usbx_hid_thread_entry.
  * @param arg: Not used
  * @retval None
  */
void usbx_hid_thread_entry(ULONG arg)
{
 80176bc:	b590      	push	{r4, r7, lr}
 80176be:	b091      	sub	sp, #68	; 0x44
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
  UX_SLAVE_DEVICE    *device;
  UX_SLAVE_INTERFACE *interface;
  UX_SLAVE_CLASS_HID *hid;
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  device = &_ux_system_slave->ux_system_slave_device;
 80176c4:	4b18      	ldr	r3, [pc, #96]	; (8017728 <usbx_hid_thread_entry+0x6c>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	3320      	adds	r3, #32
 80176ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 80176cc:	2308      	movs	r3, #8
 80176ce:	18fb      	adds	r3, r7, r3
 80176d0:	222c      	movs	r2, #44	; 0x2c
 80176d2:	2100      	movs	r1, #0
 80176d4:	0018      	movs	r0, r3
 80176d6:	f7fc fee3 	bl	80144a0 <_ux_utility_memory_set>

  while (1)
  {
    /* Check if the device state already configured */
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80176da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2b03      	cmp	r3, #3
 80176e0:	d11d      	bne.n	801771e <usbx_hid_thread_entry+0x62>
    {
      /* Get the interface */
      interface = device->ux_slave_device_first_interface;
 80176e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176e4:	22f0      	movs	r2, #240	; 0xf0
 80176e6:	589b      	ldr	r3, [r3, r2]
 80176e8:	63bb      	str	r3, [r7, #56]	; 0x38

      /* Get the instance */
      hid = interface->ux_slave_interface_class_instance;
 80176ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ec:	689b      	ldr	r3, [r3, #8]
 80176ee:	637b      	str	r3, [r7, #52]	; 0x34

      /* sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 80176f0:	2001      	movs	r0, #1
 80176f2:	f7f8 fcd3 	bl	801009c <_tx_thread_sleep>

      /* Check if user button is pressed */
      if (User_Button_State)
 80176f6:	4b0d      	ldr	r3, [pc, #52]	; (801772c <usbx_hid_thread_entry+0x70>)
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	b2db      	uxtb	r3, r3
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d0ec      	beq.n	80176da <usbx_hid_thread_entry+0x1e>
      {
        /* Get the new position */
        GetPointerData(&hid_event);
 8017700:	2408      	movs	r4, #8
 8017702:	193b      	adds	r3, r7, r4
 8017704:	0018      	movs	r0, r3
 8017706:	f000 f813 	bl	8017730 <GetPointerData>

        /* Send an event to the hid */
        ux_device_class_hid_event_set(hid, &hid_event);
 801770a:	193a      	adds	r2, r7, r4
 801770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801770e:	0011      	movs	r1, r2
 8017710:	0018      	movs	r0, r3
 8017712:	f7fd fac7 	bl	8014ca4 <_ux_device_class_hid_event_set>

        /* Reset User Button state */
        User_Button_State =0;
 8017716:	4b05      	ldr	r3, [pc, #20]	; (801772c <usbx_hid_thread_entry+0x70>)
 8017718:	2200      	movs	r2, #0
 801771a:	701a      	strb	r2, [r3, #0]
 801771c:	e7dd      	b.n	80176da <usbx_hid_thread_entry+0x1e>
      }
    }
    else
    {
      /* sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 801771e:	2001      	movs	r0, #1
 8017720:	f7f8 fcbc 	bl	801009c <_tx_thread_sleep>
    if (device->ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8017724:	e7d9      	b.n	80176da <usbx_hid_thread_entry+0x1e>
 8017726:	46c0      	nop			; (mov r8, r8)
 8017728:	20008db8 	.word	0x20008db8
 801772c:	20009630 	.word	0x20009630

08017730 <GetPointerData>:
  * @brief  Gets Pointer Data.
  * @param  pbuf: Pointer to report
  * @retval None
  */
static void GetPointerData(UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  static int8_t cnt = 0;
  static int8_t x = 0, y = 0;

  /* Reset counter */
  if (cnt == 16)
 8017738:	4b2f      	ldr	r3, [pc, #188]	; (80177f8 <GetPointerData+0xc8>)
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	b25b      	sxtb	r3, r3
 801773e:	2b10      	cmp	r3, #16
 8017740:	d102      	bne.n	8017748 <GetPointerData+0x18>
  {
    cnt = 0;
 8017742:	4b2d      	ldr	r3, [pc, #180]	; (80177f8 <GetPointerData+0xc8>)
 8017744:	2200      	movs	r2, #0
 8017746:	701a      	strb	r2, [r3, #0]
  }
  /* Update pointer position x and y */
  if ((cnt >= 0) && (cnt < 4))
 8017748:	4b2b      	ldr	r3, [pc, #172]	; (80177f8 <GetPointerData+0xc8>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	b25b      	sxtb	r3, r3
 801774e:	2b00      	cmp	r3, #0
 8017750:	db0b      	blt.n	801776a <GetPointerData+0x3a>
 8017752:	4b29      	ldr	r3, [pc, #164]	; (80177f8 <GetPointerData+0xc8>)
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	b25b      	sxtb	r3, r3
 8017758:	2b03      	cmp	r3, #3
 801775a:	dc06      	bgt.n	801776a <GetPointerData+0x3a>
  {
    y=0;
 801775c:	4b27      	ldr	r3, [pc, #156]	; (80177fc <GetPointerData+0xcc>)
 801775e:	2200      	movs	r2, #0
 8017760:	701a      	strb	r2, [r3, #0]
    x = CURSOR_STEP;
 8017762:	4b27      	ldr	r3, [pc, #156]	; (8017800 <GetPointerData+0xd0>)
 8017764:	220a      	movs	r2, #10
 8017766:	701a      	strb	r2, [r3, #0]
 8017768:	e027      	b.n	80177ba <GetPointerData+0x8a>
  }
  else if ((cnt >= 4) && (cnt < 8))
 801776a:	4b23      	ldr	r3, [pc, #140]	; (80177f8 <GetPointerData+0xc8>)
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	b25b      	sxtb	r3, r3
 8017770:	2b03      	cmp	r3, #3
 8017772:	dd0b      	ble.n	801778c <GetPointerData+0x5c>
 8017774:	4b20      	ldr	r3, [pc, #128]	; (80177f8 <GetPointerData+0xc8>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	b25b      	sxtb	r3, r3
 801777a:	2b07      	cmp	r3, #7
 801777c:	dc06      	bgt.n	801778c <GetPointerData+0x5c>
  {
    x =0;
 801777e:	4b20      	ldr	r3, [pc, #128]	; (8017800 <GetPointerData+0xd0>)
 8017780:	2200      	movs	r2, #0
 8017782:	701a      	strb	r2, [r3, #0]
    y = CURSOR_STEP;
 8017784:	4b1d      	ldr	r3, [pc, #116]	; (80177fc <GetPointerData+0xcc>)
 8017786:	220a      	movs	r2, #10
 8017788:	701a      	strb	r2, [r3, #0]
 801778a:	e016      	b.n	80177ba <GetPointerData+0x8a>
  }
  else if ((cnt >= 8) && (cnt < 12))
 801778c:	4b1a      	ldr	r3, [pc, #104]	; (80177f8 <GetPointerData+0xc8>)
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	b25b      	sxtb	r3, r3
 8017792:	2b07      	cmp	r3, #7
 8017794:	dd0b      	ble.n	80177ae <GetPointerData+0x7e>
 8017796:	4b18      	ldr	r3, [pc, #96]	; (80177f8 <GetPointerData+0xc8>)
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	b25b      	sxtb	r3, r3
 801779c:	2b0b      	cmp	r3, #11
 801779e:	dc06      	bgt.n	80177ae <GetPointerData+0x7e>
  {
    y=0;
 80177a0:	4b16      	ldr	r3, [pc, #88]	; (80177fc <GetPointerData+0xcc>)
 80177a2:	2200      	movs	r2, #0
 80177a4:	701a      	strb	r2, [r3, #0]
    x = -CURSOR_STEP;
 80177a6:	4b16      	ldr	r3, [pc, #88]	; (8017800 <GetPointerData+0xd0>)
 80177a8:	22f6      	movs	r2, #246	; 0xf6
 80177aa:	701a      	strb	r2, [r3, #0]
 80177ac:	e005      	b.n	80177ba <GetPointerData+0x8a>
  }
  else
  {
    x=0;
 80177ae:	4b14      	ldr	r3, [pc, #80]	; (8017800 <GetPointerData+0xd0>)
 80177b0:	2200      	movs	r2, #0
 80177b2:	701a      	strb	r2, [r3, #0]
    y = -CURSOR_STEP;
 80177b4:	4b11      	ldr	r3, [pc, #68]	; (80177fc <GetPointerData+0xcc>)
 80177b6:	22f6      	movs	r2, #246	; 0xf6
 80177b8:	701a      	strb	r2, [r3, #0]
  }
  /* Increment counter */
  cnt++;
 80177ba:	4b0f      	ldr	r3, [pc, #60]	; (80177f8 <GetPointerData+0xc8>)
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	b25b      	sxtb	r3, r3
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	3301      	adds	r3, #1
 80177c4:	b2db      	uxtb	r3, r3
 80177c6:	b25a      	sxtb	r2, r3
 80177c8:	4b0b      	ldr	r3, [pc, #44]	; (80177f8 <GetPointerData+0xc8>)
 80177ca:	701a      	strb	r2, [r3, #0]

  /* Mouse event. Length is fixed to . */
  hid_event->ux_device_class_hid_event_length = 3;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2203      	movs	r2, #3
 80177d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set X position. */
  hid_event->ux_device_class_hid_event_buffer[0] = x;
 80177d2:	4b0b      	ldr	r3, [pc, #44]	; (8017800 <GetPointerData+0xd0>)
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	b25b      	sxtb	r3, r3
 80177d8:	b2da      	uxtb	r2, r3
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	721a      	strb	r2, [r3, #8]

  /* Set Y position. */
  hid_event->ux_device_class_hid_event_buffer[1] = y;
 80177de:	4b07      	ldr	r3, [pc, #28]	; (80177fc <GetPointerData+0xcc>)
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	b25b      	sxtb	r3, r3
 80177e4:	b2da      	uxtb	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	725a      	strb	r2, [r3, #9]

  hid_event->ux_device_class_hid_event_buffer[2] = 0;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2200      	movs	r2, #0
 80177ee:	729a      	strb	r2, [r3, #10]
}
 80177f0:	46c0      	nop			; (mov r8, r8)
 80177f2:	46bd      	mov	sp, r7
 80177f4:	b002      	add	sp, #8
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	20009631 	.word	0x20009631
 80177fc:	20009632 	.word	0x20009632
 8017800:	20009633 	.word	0x20009633

08017804 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	0002      	movs	r2, r0
 801780c:	1dbb      	adds	r3, r7, #6
 801780e:	801a      	strh	r2, [r3, #0]
  /* Read User Button state */
  User_Button_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8017810:	2380      	movs	r3, #128	; 0x80
 8017812:	019b      	lsls	r3, r3, #6
 8017814:	4a06      	ldr	r2, [pc, #24]	; (8017830 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8017816:	0019      	movs	r1, r3
 8017818:	0010      	movs	r0, r2
 801781a:	f7ec fcfd 	bl	8004218 <HAL_GPIO_ReadPin>
 801781e:	0003      	movs	r3, r0
 8017820:	001a      	movs	r2, r3
 8017822:	4b04      	ldr	r3, [pc, #16]	; (8017834 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8017824:	701a      	strb	r2, [r3, #0]

}
 8017826:	46c0      	nop			; (mov r8, r8)
 8017828:	46bd      	mov	sp, r7
 801782a:	b002      	add	sp, #8
 801782c:	bd80      	pop	{r7, pc}
 801782e:	46c0      	nop			; (mov r8, r8)
 8017830:	50000800 	.word	0x50000800
 8017834:	20009630 	.word	0x20009630

08017838 <malloc>:
 8017838:	b510      	push	{r4, lr}
 801783a:	4b03      	ldr	r3, [pc, #12]	; (8017848 <malloc+0x10>)
 801783c:	0001      	movs	r1, r0
 801783e:	6818      	ldr	r0, [r3, #0]
 8017840:	f000 f826 	bl	8017890 <_malloc_r>
 8017844:	bd10      	pop	{r4, pc}
 8017846:	46c0      	nop			; (mov r8, r8)
 8017848:	20000148 	.word	0x20000148

0801784c <sbrk_aligned>:
 801784c:	b570      	push	{r4, r5, r6, lr}
 801784e:	4e0f      	ldr	r6, [pc, #60]	; (801788c <sbrk_aligned+0x40>)
 8017850:	000d      	movs	r5, r1
 8017852:	6831      	ldr	r1, [r6, #0]
 8017854:	0004      	movs	r4, r0
 8017856:	2900      	cmp	r1, #0
 8017858:	d102      	bne.n	8017860 <sbrk_aligned+0x14>
 801785a:	f000 f8e7 	bl	8017a2c <_sbrk_r>
 801785e:	6030      	str	r0, [r6, #0]
 8017860:	0029      	movs	r1, r5
 8017862:	0020      	movs	r0, r4
 8017864:	f000 f8e2 	bl	8017a2c <_sbrk_r>
 8017868:	1c43      	adds	r3, r0, #1
 801786a:	d00a      	beq.n	8017882 <sbrk_aligned+0x36>
 801786c:	2303      	movs	r3, #3
 801786e:	1cc5      	adds	r5, r0, #3
 8017870:	439d      	bics	r5, r3
 8017872:	42a8      	cmp	r0, r5
 8017874:	d007      	beq.n	8017886 <sbrk_aligned+0x3a>
 8017876:	1a29      	subs	r1, r5, r0
 8017878:	0020      	movs	r0, r4
 801787a:	f000 f8d7 	bl	8017a2c <_sbrk_r>
 801787e:	3001      	adds	r0, #1
 8017880:	d101      	bne.n	8017886 <sbrk_aligned+0x3a>
 8017882:	2501      	movs	r5, #1
 8017884:	426d      	negs	r5, r5
 8017886:	0028      	movs	r0, r5
 8017888:	bd70      	pop	{r4, r5, r6, pc}
 801788a:	46c0      	nop			; (mov r8, r8)
 801788c:	20009638 	.word	0x20009638

08017890 <_malloc_r>:
 8017890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017892:	2203      	movs	r2, #3
 8017894:	1ccb      	adds	r3, r1, #3
 8017896:	4393      	bics	r3, r2
 8017898:	3308      	adds	r3, #8
 801789a:	0006      	movs	r6, r0
 801789c:	001f      	movs	r7, r3
 801789e:	2b0c      	cmp	r3, #12
 80178a0:	d238      	bcs.n	8017914 <_malloc_r+0x84>
 80178a2:	270c      	movs	r7, #12
 80178a4:	42b9      	cmp	r1, r7
 80178a6:	d837      	bhi.n	8017918 <_malloc_r+0x88>
 80178a8:	0030      	movs	r0, r6
 80178aa:	f000 f873 	bl	8017994 <__malloc_lock>
 80178ae:	4b38      	ldr	r3, [pc, #224]	; (8017990 <_malloc_r+0x100>)
 80178b0:	9300      	str	r3, [sp, #0]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	001c      	movs	r4, r3
 80178b6:	2c00      	cmp	r4, #0
 80178b8:	d133      	bne.n	8017922 <_malloc_r+0x92>
 80178ba:	0039      	movs	r1, r7
 80178bc:	0030      	movs	r0, r6
 80178be:	f7ff ffc5 	bl	801784c <sbrk_aligned>
 80178c2:	0004      	movs	r4, r0
 80178c4:	1c43      	adds	r3, r0, #1
 80178c6:	d15e      	bne.n	8017986 <_malloc_r+0xf6>
 80178c8:	9b00      	ldr	r3, [sp, #0]
 80178ca:	681c      	ldr	r4, [r3, #0]
 80178cc:	0025      	movs	r5, r4
 80178ce:	2d00      	cmp	r5, #0
 80178d0:	d14e      	bne.n	8017970 <_malloc_r+0xe0>
 80178d2:	2c00      	cmp	r4, #0
 80178d4:	d051      	beq.n	801797a <_malloc_r+0xea>
 80178d6:	6823      	ldr	r3, [r4, #0]
 80178d8:	0029      	movs	r1, r5
 80178da:	18e3      	adds	r3, r4, r3
 80178dc:	0030      	movs	r0, r6
 80178de:	9301      	str	r3, [sp, #4]
 80178e0:	f000 f8a4 	bl	8017a2c <_sbrk_r>
 80178e4:	9b01      	ldr	r3, [sp, #4]
 80178e6:	4283      	cmp	r3, r0
 80178e8:	d147      	bne.n	801797a <_malloc_r+0xea>
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	0030      	movs	r0, r6
 80178ee:	1aff      	subs	r7, r7, r3
 80178f0:	0039      	movs	r1, r7
 80178f2:	f7ff ffab 	bl	801784c <sbrk_aligned>
 80178f6:	3001      	adds	r0, #1
 80178f8:	d03f      	beq.n	801797a <_malloc_r+0xea>
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	19db      	adds	r3, r3, r7
 80178fe:	6023      	str	r3, [r4, #0]
 8017900:	9b00      	ldr	r3, [sp, #0]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d040      	beq.n	801798a <_malloc_r+0xfa>
 8017908:	685a      	ldr	r2, [r3, #4]
 801790a:	42a2      	cmp	r2, r4
 801790c:	d133      	bne.n	8017976 <_malloc_r+0xe6>
 801790e:	2200      	movs	r2, #0
 8017910:	605a      	str	r2, [r3, #4]
 8017912:	e014      	b.n	801793e <_malloc_r+0xae>
 8017914:	2b00      	cmp	r3, #0
 8017916:	dac5      	bge.n	80178a4 <_malloc_r+0x14>
 8017918:	230c      	movs	r3, #12
 801791a:	2500      	movs	r5, #0
 801791c:	6033      	str	r3, [r6, #0]
 801791e:	0028      	movs	r0, r5
 8017920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017922:	6821      	ldr	r1, [r4, #0]
 8017924:	1bc9      	subs	r1, r1, r7
 8017926:	d420      	bmi.n	801796a <_malloc_r+0xda>
 8017928:	290b      	cmp	r1, #11
 801792a:	d918      	bls.n	801795e <_malloc_r+0xce>
 801792c:	19e2      	adds	r2, r4, r7
 801792e:	6027      	str	r7, [r4, #0]
 8017930:	42a3      	cmp	r3, r4
 8017932:	d112      	bne.n	801795a <_malloc_r+0xca>
 8017934:	9b00      	ldr	r3, [sp, #0]
 8017936:	601a      	str	r2, [r3, #0]
 8017938:	6863      	ldr	r3, [r4, #4]
 801793a:	6011      	str	r1, [r2, #0]
 801793c:	6053      	str	r3, [r2, #4]
 801793e:	0030      	movs	r0, r6
 8017940:	0025      	movs	r5, r4
 8017942:	f000 f82f 	bl	80179a4 <__malloc_unlock>
 8017946:	2207      	movs	r2, #7
 8017948:	350b      	adds	r5, #11
 801794a:	1d23      	adds	r3, r4, #4
 801794c:	4395      	bics	r5, r2
 801794e:	1aea      	subs	r2, r5, r3
 8017950:	429d      	cmp	r5, r3
 8017952:	d0e4      	beq.n	801791e <_malloc_r+0x8e>
 8017954:	1b5b      	subs	r3, r3, r5
 8017956:	50a3      	str	r3, [r4, r2]
 8017958:	e7e1      	b.n	801791e <_malloc_r+0x8e>
 801795a:	605a      	str	r2, [r3, #4]
 801795c:	e7ec      	b.n	8017938 <_malloc_r+0xa8>
 801795e:	6862      	ldr	r2, [r4, #4]
 8017960:	42a3      	cmp	r3, r4
 8017962:	d1d5      	bne.n	8017910 <_malloc_r+0x80>
 8017964:	9b00      	ldr	r3, [sp, #0]
 8017966:	601a      	str	r2, [r3, #0]
 8017968:	e7e9      	b.n	801793e <_malloc_r+0xae>
 801796a:	0023      	movs	r3, r4
 801796c:	6864      	ldr	r4, [r4, #4]
 801796e:	e7a2      	b.n	80178b6 <_malloc_r+0x26>
 8017970:	002c      	movs	r4, r5
 8017972:	686d      	ldr	r5, [r5, #4]
 8017974:	e7ab      	b.n	80178ce <_malloc_r+0x3e>
 8017976:	0013      	movs	r3, r2
 8017978:	e7c4      	b.n	8017904 <_malloc_r+0x74>
 801797a:	230c      	movs	r3, #12
 801797c:	0030      	movs	r0, r6
 801797e:	6033      	str	r3, [r6, #0]
 8017980:	f000 f810 	bl	80179a4 <__malloc_unlock>
 8017984:	e7cb      	b.n	801791e <_malloc_r+0x8e>
 8017986:	6027      	str	r7, [r4, #0]
 8017988:	e7d9      	b.n	801793e <_malloc_r+0xae>
 801798a:	605b      	str	r3, [r3, #4]
 801798c:	deff      	udf	#255	; 0xff
 801798e:	46c0      	nop			; (mov r8, r8)
 8017990:	20009634 	.word	0x20009634

08017994 <__malloc_lock>:
 8017994:	b510      	push	{r4, lr}
 8017996:	4802      	ldr	r0, [pc, #8]	; (80179a0 <__malloc_lock+0xc>)
 8017998:	f000 f884 	bl	8017aa4 <__retarget_lock_acquire_recursive>
 801799c:	bd10      	pop	{r4, pc}
 801799e:	46c0      	nop			; (mov r8, r8)
 80179a0:	20009778 	.word	0x20009778

080179a4 <__malloc_unlock>:
 80179a4:	b510      	push	{r4, lr}
 80179a6:	4802      	ldr	r0, [pc, #8]	; (80179b0 <__malloc_unlock+0xc>)
 80179a8:	f000 f87d 	bl	8017aa6 <__retarget_lock_release_recursive>
 80179ac:	bd10      	pop	{r4, pc}
 80179ae:	46c0      	nop			; (mov r8, r8)
 80179b0:	20009778 	.word	0x20009778

080179b4 <siprintf>:
 80179b4:	b40e      	push	{r1, r2, r3}
 80179b6:	b500      	push	{lr}
 80179b8:	490b      	ldr	r1, [pc, #44]	; (80179e8 <siprintf+0x34>)
 80179ba:	b09c      	sub	sp, #112	; 0x70
 80179bc:	ab1d      	add	r3, sp, #116	; 0x74
 80179be:	9002      	str	r0, [sp, #8]
 80179c0:	9006      	str	r0, [sp, #24]
 80179c2:	9107      	str	r1, [sp, #28]
 80179c4:	9104      	str	r1, [sp, #16]
 80179c6:	4809      	ldr	r0, [pc, #36]	; (80179ec <siprintf+0x38>)
 80179c8:	4909      	ldr	r1, [pc, #36]	; (80179f0 <siprintf+0x3c>)
 80179ca:	cb04      	ldmia	r3!, {r2}
 80179cc:	9105      	str	r1, [sp, #20]
 80179ce:	6800      	ldr	r0, [r0, #0]
 80179d0:	a902      	add	r1, sp, #8
 80179d2:	9301      	str	r3, [sp, #4]
 80179d4:	f000 f92e 	bl	8017c34 <_svfiprintf_r>
 80179d8:	2200      	movs	r2, #0
 80179da:	9b02      	ldr	r3, [sp, #8]
 80179dc:	701a      	strb	r2, [r3, #0]
 80179de:	b01c      	add	sp, #112	; 0x70
 80179e0:	bc08      	pop	{r3}
 80179e2:	b003      	add	sp, #12
 80179e4:	4718      	bx	r3
 80179e6:	46c0      	nop			; (mov r8, r8)
 80179e8:	7fffffff 	.word	0x7fffffff
 80179ec:	20000148 	.word	0x20000148
 80179f0:	ffff0208 	.word	0xffff0208

080179f4 <memmove>:
 80179f4:	b510      	push	{r4, lr}
 80179f6:	4288      	cmp	r0, r1
 80179f8:	d902      	bls.n	8017a00 <memmove+0xc>
 80179fa:	188b      	adds	r3, r1, r2
 80179fc:	4298      	cmp	r0, r3
 80179fe:	d303      	bcc.n	8017a08 <memmove+0x14>
 8017a00:	2300      	movs	r3, #0
 8017a02:	e007      	b.n	8017a14 <memmove+0x20>
 8017a04:	5c8b      	ldrb	r3, [r1, r2]
 8017a06:	5483      	strb	r3, [r0, r2]
 8017a08:	3a01      	subs	r2, #1
 8017a0a:	d2fb      	bcs.n	8017a04 <memmove+0x10>
 8017a0c:	bd10      	pop	{r4, pc}
 8017a0e:	5ccc      	ldrb	r4, [r1, r3]
 8017a10:	54c4      	strb	r4, [r0, r3]
 8017a12:	3301      	adds	r3, #1
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d1fa      	bne.n	8017a0e <memmove+0x1a>
 8017a18:	e7f8      	b.n	8017a0c <memmove+0x18>

08017a1a <memset>:
 8017a1a:	0003      	movs	r3, r0
 8017a1c:	1882      	adds	r2, r0, r2
 8017a1e:	4293      	cmp	r3, r2
 8017a20:	d100      	bne.n	8017a24 <memset+0xa>
 8017a22:	4770      	bx	lr
 8017a24:	7019      	strb	r1, [r3, #0]
 8017a26:	3301      	adds	r3, #1
 8017a28:	e7f9      	b.n	8017a1e <memset+0x4>
	...

08017a2c <_sbrk_r>:
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	b570      	push	{r4, r5, r6, lr}
 8017a30:	4d06      	ldr	r5, [pc, #24]	; (8017a4c <_sbrk_r+0x20>)
 8017a32:	0004      	movs	r4, r0
 8017a34:	0008      	movs	r0, r1
 8017a36:	602b      	str	r3, [r5, #0]
 8017a38:	f7ec f90e 	bl	8003c58 <_sbrk>
 8017a3c:	1c43      	adds	r3, r0, #1
 8017a3e:	d103      	bne.n	8017a48 <_sbrk_r+0x1c>
 8017a40:	682b      	ldr	r3, [r5, #0]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d000      	beq.n	8017a48 <_sbrk_r+0x1c>
 8017a46:	6023      	str	r3, [r4, #0]
 8017a48:	bd70      	pop	{r4, r5, r6, pc}
 8017a4a:	46c0      	nop			; (mov r8, r8)
 8017a4c:	20009774 	.word	0x20009774

08017a50 <__errno>:
 8017a50:	4b01      	ldr	r3, [pc, #4]	; (8017a58 <__errno+0x8>)
 8017a52:	6818      	ldr	r0, [r3, #0]
 8017a54:	4770      	bx	lr
 8017a56:	46c0      	nop			; (mov r8, r8)
 8017a58:	20000148 	.word	0x20000148

08017a5c <__libc_init_array>:
 8017a5c:	b570      	push	{r4, r5, r6, lr}
 8017a5e:	2600      	movs	r6, #0
 8017a60:	4c0c      	ldr	r4, [pc, #48]	; (8017a94 <__libc_init_array+0x38>)
 8017a62:	4d0d      	ldr	r5, [pc, #52]	; (8017a98 <__libc_init_array+0x3c>)
 8017a64:	1b64      	subs	r4, r4, r5
 8017a66:	10a4      	asrs	r4, r4, #2
 8017a68:	42a6      	cmp	r6, r4
 8017a6a:	d109      	bne.n	8017a80 <__libc_init_array+0x24>
 8017a6c:	2600      	movs	r6, #0
 8017a6e:	f000 fba3 	bl	80181b8 <_init>
 8017a72:	4c0a      	ldr	r4, [pc, #40]	; (8017a9c <__libc_init_array+0x40>)
 8017a74:	4d0a      	ldr	r5, [pc, #40]	; (8017aa0 <__libc_init_array+0x44>)
 8017a76:	1b64      	subs	r4, r4, r5
 8017a78:	10a4      	asrs	r4, r4, #2
 8017a7a:	42a6      	cmp	r6, r4
 8017a7c:	d105      	bne.n	8017a8a <__libc_init_array+0x2e>
 8017a7e:	bd70      	pop	{r4, r5, r6, pc}
 8017a80:	00b3      	lsls	r3, r6, #2
 8017a82:	58eb      	ldr	r3, [r5, r3]
 8017a84:	4798      	blx	r3
 8017a86:	3601      	adds	r6, #1
 8017a88:	e7ee      	b.n	8017a68 <__libc_init_array+0xc>
 8017a8a:	00b3      	lsls	r3, r6, #2
 8017a8c:	58eb      	ldr	r3, [r5, r3]
 8017a8e:	4798      	blx	r3
 8017a90:	3601      	adds	r6, #1
 8017a92:	e7f2      	b.n	8017a7a <__libc_init_array+0x1e>
 8017a94:	080186d0 	.word	0x080186d0
 8017a98:	080186d0 	.word	0x080186d0
 8017a9c:	080186d4 	.word	0x080186d4
 8017aa0:	080186d0 	.word	0x080186d0

08017aa4 <__retarget_lock_acquire_recursive>:
 8017aa4:	4770      	bx	lr

08017aa6 <__retarget_lock_release_recursive>:
 8017aa6:	4770      	bx	lr

08017aa8 <__aeabi_memcpy>:
 8017aa8:	b510      	push	{r4, lr}
 8017aaa:	f000 f80d 	bl	8017ac8 <memcpy>
 8017aae:	bd10      	pop	{r4, pc}

08017ab0 <__aeabi_memset>:
 8017ab0:	000b      	movs	r3, r1
 8017ab2:	b510      	push	{r4, lr}
 8017ab4:	0011      	movs	r1, r2
 8017ab6:	001a      	movs	r2, r3
 8017ab8:	f7ff ffaf 	bl	8017a1a <memset>
 8017abc:	bd10      	pop	{r4, pc}

08017abe <__aeabi_memclr>:
 8017abe:	b510      	push	{r4, lr}
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f7ff fff5 	bl	8017ab0 <__aeabi_memset>
 8017ac6:	bd10      	pop	{r4, pc}

08017ac8 <memcpy>:
 8017ac8:	2300      	movs	r3, #0
 8017aca:	b510      	push	{r4, lr}
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d100      	bne.n	8017ad2 <memcpy+0xa>
 8017ad0:	bd10      	pop	{r4, pc}
 8017ad2:	5ccc      	ldrb	r4, [r1, r3]
 8017ad4:	54c4      	strb	r4, [r0, r3]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	e7f8      	b.n	8017acc <memcpy+0x4>
	...

08017adc <_free_r>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	0005      	movs	r5, r0
 8017ae0:	2900      	cmp	r1, #0
 8017ae2:	d010      	beq.n	8017b06 <_free_r+0x2a>
 8017ae4:	1f0c      	subs	r4, r1, #4
 8017ae6:	6823      	ldr	r3, [r4, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	da00      	bge.n	8017aee <_free_r+0x12>
 8017aec:	18e4      	adds	r4, r4, r3
 8017aee:	0028      	movs	r0, r5
 8017af0:	f7ff ff50 	bl	8017994 <__malloc_lock>
 8017af4:	4a1d      	ldr	r2, [pc, #116]	; (8017b6c <_free_r+0x90>)
 8017af6:	6813      	ldr	r3, [r2, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d105      	bne.n	8017b08 <_free_r+0x2c>
 8017afc:	6063      	str	r3, [r4, #4]
 8017afe:	6014      	str	r4, [r2, #0]
 8017b00:	0028      	movs	r0, r5
 8017b02:	f7ff ff4f 	bl	80179a4 <__malloc_unlock>
 8017b06:	bd70      	pop	{r4, r5, r6, pc}
 8017b08:	42a3      	cmp	r3, r4
 8017b0a:	d908      	bls.n	8017b1e <_free_r+0x42>
 8017b0c:	6820      	ldr	r0, [r4, #0]
 8017b0e:	1821      	adds	r1, r4, r0
 8017b10:	428b      	cmp	r3, r1
 8017b12:	d1f3      	bne.n	8017afc <_free_r+0x20>
 8017b14:	6819      	ldr	r1, [r3, #0]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	1809      	adds	r1, r1, r0
 8017b1a:	6021      	str	r1, [r4, #0]
 8017b1c:	e7ee      	b.n	8017afc <_free_r+0x20>
 8017b1e:	001a      	movs	r2, r3
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d001      	beq.n	8017b2a <_free_r+0x4e>
 8017b26:	42a3      	cmp	r3, r4
 8017b28:	d9f9      	bls.n	8017b1e <_free_r+0x42>
 8017b2a:	6811      	ldr	r1, [r2, #0]
 8017b2c:	1850      	adds	r0, r2, r1
 8017b2e:	42a0      	cmp	r0, r4
 8017b30:	d10b      	bne.n	8017b4a <_free_r+0x6e>
 8017b32:	6820      	ldr	r0, [r4, #0]
 8017b34:	1809      	adds	r1, r1, r0
 8017b36:	1850      	adds	r0, r2, r1
 8017b38:	6011      	str	r1, [r2, #0]
 8017b3a:	4283      	cmp	r3, r0
 8017b3c:	d1e0      	bne.n	8017b00 <_free_r+0x24>
 8017b3e:	6818      	ldr	r0, [r3, #0]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	1841      	adds	r1, r0, r1
 8017b44:	6011      	str	r1, [r2, #0]
 8017b46:	6053      	str	r3, [r2, #4]
 8017b48:	e7da      	b.n	8017b00 <_free_r+0x24>
 8017b4a:	42a0      	cmp	r0, r4
 8017b4c:	d902      	bls.n	8017b54 <_free_r+0x78>
 8017b4e:	230c      	movs	r3, #12
 8017b50:	602b      	str	r3, [r5, #0]
 8017b52:	e7d5      	b.n	8017b00 <_free_r+0x24>
 8017b54:	6820      	ldr	r0, [r4, #0]
 8017b56:	1821      	adds	r1, r4, r0
 8017b58:	428b      	cmp	r3, r1
 8017b5a:	d103      	bne.n	8017b64 <_free_r+0x88>
 8017b5c:	6819      	ldr	r1, [r3, #0]
 8017b5e:	685b      	ldr	r3, [r3, #4]
 8017b60:	1809      	adds	r1, r1, r0
 8017b62:	6021      	str	r1, [r4, #0]
 8017b64:	6063      	str	r3, [r4, #4]
 8017b66:	6054      	str	r4, [r2, #4]
 8017b68:	e7ca      	b.n	8017b00 <_free_r+0x24>
 8017b6a:	46c0      	nop			; (mov r8, r8)
 8017b6c:	20009634 	.word	0x20009634

08017b70 <__ssputs_r>:
 8017b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b72:	b085      	sub	sp, #20
 8017b74:	9301      	str	r3, [sp, #4]
 8017b76:	9203      	str	r2, [sp, #12]
 8017b78:	688e      	ldr	r6, [r1, #8]
 8017b7a:	9a01      	ldr	r2, [sp, #4]
 8017b7c:	0007      	movs	r7, r0
 8017b7e:	000c      	movs	r4, r1
 8017b80:	680b      	ldr	r3, [r1, #0]
 8017b82:	4296      	cmp	r6, r2
 8017b84:	d831      	bhi.n	8017bea <__ssputs_r+0x7a>
 8017b86:	898a      	ldrh	r2, [r1, #12]
 8017b88:	2190      	movs	r1, #144	; 0x90
 8017b8a:	00c9      	lsls	r1, r1, #3
 8017b8c:	420a      	tst	r2, r1
 8017b8e:	d029      	beq.n	8017be4 <__ssputs_r+0x74>
 8017b90:	2003      	movs	r0, #3
 8017b92:	6921      	ldr	r1, [r4, #16]
 8017b94:	1a5b      	subs	r3, r3, r1
 8017b96:	9302      	str	r3, [sp, #8]
 8017b98:	6963      	ldr	r3, [r4, #20]
 8017b9a:	4343      	muls	r3, r0
 8017b9c:	0fdd      	lsrs	r5, r3, #31
 8017b9e:	18ed      	adds	r5, r5, r3
 8017ba0:	9b01      	ldr	r3, [sp, #4]
 8017ba2:	9802      	ldr	r0, [sp, #8]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	181b      	adds	r3, r3, r0
 8017ba8:	106d      	asrs	r5, r5, #1
 8017baa:	42ab      	cmp	r3, r5
 8017bac:	d900      	bls.n	8017bb0 <__ssputs_r+0x40>
 8017bae:	001d      	movs	r5, r3
 8017bb0:	0552      	lsls	r2, r2, #21
 8017bb2:	d529      	bpl.n	8017c08 <__ssputs_r+0x98>
 8017bb4:	0029      	movs	r1, r5
 8017bb6:	0038      	movs	r0, r7
 8017bb8:	f7ff fe6a 	bl	8017890 <_malloc_r>
 8017bbc:	1e06      	subs	r6, r0, #0
 8017bbe:	d02d      	beq.n	8017c1c <__ssputs_r+0xac>
 8017bc0:	9a02      	ldr	r2, [sp, #8]
 8017bc2:	6921      	ldr	r1, [r4, #16]
 8017bc4:	f7ff ff80 	bl	8017ac8 <memcpy>
 8017bc8:	89a2      	ldrh	r2, [r4, #12]
 8017bca:	4b19      	ldr	r3, [pc, #100]	; (8017c30 <__ssputs_r+0xc0>)
 8017bcc:	401a      	ands	r2, r3
 8017bce:	2380      	movs	r3, #128	; 0x80
 8017bd0:	4313      	orrs	r3, r2
 8017bd2:	81a3      	strh	r3, [r4, #12]
 8017bd4:	9b02      	ldr	r3, [sp, #8]
 8017bd6:	6126      	str	r6, [r4, #16]
 8017bd8:	18f6      	adds	r6, r6, r3
 8017bda:	6026      	str	r6, [r4, #0]
 8017bdc:	6165      	str	r5, [r4, #20]
 8017bde:	9e01      	ldr	r6, [sp, #4]
 8017be0:	1aed      	subs	r5, r5, r3
 8017be2:	60a5      	str	r5, [r4, #8]
 8017be4:	9b01      	ldr	r3, [sp, #4]
 8017be6:	429e      	cmp	r6, r3
 8017be8:	d900      	bls.n	8017bec <__ssputs_r+0x7c>
 8017bea:	9e01      	ldr	r6, [sp, #4]
 8017bec:	0032      	movs	r2, r6
 8017bee:	9903      	ldr	r1, [sp, #12]
 8017bf0:	6820      	ldr	r0, [r4, #0]
 8017bf2:	f7ff feff 	bl	80179f4 <memmove>
 8017bf6:	2000      	movs	r0, #0
 8017bf8:	68a3      	ldr	r3, [r4, #8]
 8017bfa:	1b9b      	subs	r3, r3, r6
 8017bfc:	60a3      	str	r3, [r4, #8]
 8017bfe:	6823      	ldr	r3, [r4, #0]
 8017c00:	199b      	adds	r3, r3, r6
 8017c02:	6023      	str	r3, [r4, #0]
 8017c04:	b005      	add	sp, #20
 8017c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c08:	002a      	movs	r2, r5
 8017c0a:	0038      	movs	r0, r7
 8017c0c:	f000 fa9d 	bl	801814a <_realloc_r>
 8017c10:	1e06      	subs	r6, r0, #0
 8017c12:	d1df      	bne.n	8017bd4 <__ssputs_r+0x64>
 8017c14:	0038      	movs	r0, r7
 8017c16:	6921      	ldr	r1, [r4, #16]
 8017c18:	f7ff ff60 	bl	8017adc <_free_r>
 8017c1c:	230c      	movs	r3, #12
 8017c1e:	2001      	movs	r0, #1
 8017c20:	603b      	str	r3, [r7, #0]
 8017c22:	89a2      	ldrh	r2, [r4, #12]
 8017c24:	3334      	adds	r3, #52	; 0x34
 8017c26:	4313      	orrs	r3, r2
 8017c28:	81a3      	strh	r3, [r4, #12]
 8017c2a:	4240      	negs	r0, r0
 8017c2c:	e7ea      	b.n	8017c04 <__ssputs_r+0x94>
 8017c2e:	46c0      	nop			; (mov r8, r8)
 8017c30:	fffffb7f 	.word	0xfffffb7f

08017c34 <_svfiprintf_r>:
 8017c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c36:	b0a1      	sub	sp, #132	; 0x84
 8017c38:	9003      	str	r0, [sp, #12]
 8017c3a:	001d      	movs	r5, r3
 8017c3c:	898b      	ldrh	r3, [r1, #12]
 8017c3e:	000f      	movs	r7, r1
 8017c40:	0016      	movs	r6, r2
 8017c42:	061b      	lsls	r3, r3, #24
 8017c44:	d511      	bpl.n	8017c6a <_svfiprintf_r+0x36>
 8017c46:	690b      	ldr	r3, [r1, #16]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d10e      	bne.n	8017c6a <_svfiprintf_r+0x36>
 8017c4c:	2140      	movs	r1, #64	; 0x40
 8017c4e:	f7ff fe1f 	bl	8017890 <_malloc_r>
 8017c52:	6038      	str	r0, [r7, #0]
 8017c54:	6138      	str	r0, [r7, #16]
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d105      	bne.n	8017c66 <_svfiprintf_r+0x32>
 8017c5a:	230c      	movs	r3, #12
 8017c5c:	9a03      	ldr	r2, [sp, #12]
 8017c5e:	3801      	subs	r0, #1
 8017c60:	6013      	str	r3, [r2, #0]
 8017c62:	b021      	add	sp, #132	; 0x84
 8017c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c66:	2340      	movs	r3, #64	; 0x40
 8017c68:	617b      	str	r3, [r7, #20]
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	ac08      	add	r4, sp, #32
 8017c6e:	6163      	str	r3, [r4, #20]
 8017c70:	3320      	adds	r3, #32
 8017c72:	7663      	strb	r3, [r4, #25]
 8017c74:	3310      	adds	r3, #16
 8017c76:	76a3      	strb	r3, [r4, #26]
 8017c78:	9507      	str	r5, [sp, #28]
 8017c7a:	0035      	movs	r5, r6
 8017c7c:	782b      	ldrb	r3, [r5, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d001      	beq.n	8017c86 <_svfiprintf_r+0x52>
 8017c82:	2b25      	cmp	r3, #37	; 0x25
 8017c84:	d148      	bne.n	8017d18 <_svfiprintf_r+0xe4>
 8017c86:	1bab      	subs	r3, r5, r6
 8017c88:	9305      	str	r3, [sp, #20]
 8017c8a:	42b5      	cmp	r5, r6
 8017c8c:	d00b      	beq.n	8017ca6 <_svfiprintf_r+0x72>
 8017c8e:	0032      	movs	r2, r6
 8017c90:	0039      	movs	r1, r7
 8017c92:	9803      	ldr	r0, [sp, #12]
 8017c94:	f7ff ff6c 	bl	8017b70 <__ssputs_r>
 8017c98:	3001      	adds	r0, #1
 8017c9a:	d100      	bne.n	8017c9e <_svfiprintf_r+0x6a>
 8017c9c:	e0af      	b.n	8017dfe <_svfiprintf_r+0x1ca>
 8017c9e:	6963      	ldr	r3, [r4, #20]
 8017ca0:	9a05      	ldr	r2, [sp, #20]
 8017ca2:	189b      	adds	r3, r3, r2
 8017ca4:	6163      	str	r3, [r4, #20]
 8017ca6:	782b      	ldrb	r3, [r5, #0]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d100      	bne.n	8017cae <_svfiprintf_r+0x7a>
 8017cac:	e0a7      	b.n	8017dfe <_svfiprintf_r+0x1ca>
 8017cae:	2201      	movs	r2, #1
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	4252      	negs	r2, r2
 8017cb4:	6062      	str	r2, [r4, #4]
 8017cb6:	a904      	add	r1, sp, #16
 8017cb8:	3254      	adds	r2, #84	; 0x54
 8017cba:	1852      	adds	r2, r2, r1
 8017cbc:	1c6e      	adds	r6, r5, #1
 8017cbe:	6023      	str	r3, [r4, #0]
 8017cc0:	60e3      	str	r3, [r4, #12]
 8017cc2:	60a3      	str	r3, [r4, #8]
 8017cc4:	7013      	strb	r3, [r2, #0]
 8017cc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8017cc8:	4b55      	ldr	r3, [pc, #340]	; (8017e20 <_svfiprintf_r+0x1ec>)
 8017cca:	2205      	movs	r2, #5
 8017ccc:	0018      	movs	r0, r3
 8017cce:	7831      	ldrb	r1, [r6, #0]
 8017cd0:	9305      	str	r3, [sp, #20]
 8017cd2:	f000 fa2f 	bl	8018134 <memchr>
 8017cd6:	1c75      	adds	r5, r6, #1
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	d11f      	bne.n	8017d1c <_svfiprintf_r+0xe8>
 8017cdc:	6822      	ldr	r2, [r4, #0]
 8017cde:	06d3      	lsls	r3, r2, #27
 8017ce0:	d504      	bpl.n	8017cec <_svfiprintf_r+0xb8>
 8017ce2:	2353      	movs	r3, #83	; 0x53
 8017ce4:	a904      	add	r1, sp, #16
 8017ce6:	185b      	adds	r3, r3, r1
 8017ce8:	2120      	movs	r1, #32
 8017cea:	7019      	strb	r1, [r3, #0]
 8017cec:	0713      	lsls	r3, r2, #28
 8017cee:	d504      	bpl.n	8017cfa <_svfiprintf_r+0xc6>
 8017cf0:	2353      	movs	r3, #83	; 0x53
 8017cf2:	a904      	add	r1, sp, #16
 8017cf4:	185b      	adds	r3, r3, r1
 8017cf6:	212b      	movs	r1, #43	; 0x2b
 8017cf8:	7019      	strb	r1, [r3, #0]
 8017cfa:	7833      	ldrb	r3, [r6, #0]
 8017cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8017cfe:	d016      	beq.n	8017d2e <_svfiprintf_r+0xfa>
 8017d00:	0035      	movs	r5, r6
 8017d02:	2100      	movs	r1, #0
 8017d04:	200a      	movs	r0, #10
 8017d06:	68e3      	ldr	r3, [r4, #12]
 8017d08:	782a      	ldrb	r2, [r5, #0]
 8017d0a:	1c6e      	adds	r6, r5, #1
 8017d0c:	3a30      	subs	r2, #48	; 0x30
 8017d0e:	2a09      	cmp	r2, #9
 8017d10:	d94e      	bls.n	8017db0 <_svfiprintf_r+0x17c>
 8017d12:	2900      	cmp	r1, #0
 8017d14:	d111      	bne.n	8017d3a <_svfiprintf_r+0x106>
 8017d16:	e017      	b.n	8017d48 <_svfiprintf_r+0x114>
 8017d18:	3501      	adds	r5, #1
 8017d1a:	e7af      	b.n	8017c7c <_svfiprintf_r+0x48>
 8017d1c:	9b05      	ldr	r3, [sp, #20]
 8017d1e:	6822      	ldr	r2, [r4, #0]
 8017d20:	1ac0      	subs	r0, r0, r3
 8017d22:	2301      	movs	r3, #1
 8017d24:	4083      	lsls	r3, r0
 8017d26:	4313      	orrs	r3, r2
 8017d28:	002e      	movs	r6, r5
 8017d2a:	6023      	str	r3, [r4, #0]
 8017d2c:	e7cc      	b.n	8017cc8 <_svfiprintf_r+0x94>
 8017d2e:	9b07      	ldr	r3, [sp, #28]
 8017d30:	1d19      	adds	r1, r3, #4
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	9107      	str	r1, [sp, #28]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	db01      	blt.n	8017d3e <_svfiprintf_r+0x10a>
 8017d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d3c:	e004      	b.n	8017d48 <_svfiprintf_r+0x114>
 8017d3e:	425b      	negs	r3, r3
 8017d40:	60e3      	str	r3, [r4, #12]
 8017d42:	2302      	movs	r3, #2
 8017d44:	4313      	orrs	r3, r2
 8017d46:	6023      	str	r3, [r4, #0]
 8017d48:	782b      	ldrb	r3, [r5, #0]
 8017d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d4c:	d10a      	bne.n	8017d64 <_svfiprintf_r+0x130>
 8017d4e:	786b      	ldrb	r3, [r5, #1]
 8017d50:	2b2a      	cmp	r3, #42	; 0x2a
 8017d52:	d135      	bne.n	8017dc0 <_svfiprintf_r+0x18c>
 8017d54:	9b07      	ldr	r3, [sp, #28]
 8017d56:	3502      	adds	r5, #2
 8017d58:	1d1a      	adds	r2, r3, #4
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	9207      	str	r2, [sp, #28]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	db2b      	blt.n	8017dba <_svfiprintf_r+0x186>
 8017d62:	9309      	str	r3, [sp, #36]	; 0x24
 8017d64:	4e2f      	ldr	r6, [pc, #188]	; (8017e24 <_svfiprintf_r+0x1f0>)
 8017d66:	2203      	movs	r2, #3
 8017d68:	0030      	movs	r0, r6
 8017d6a:	7829      	ldrb	r1, [r5, #0]
 8017d6c:	f000 f9e2 	bl	8018134 <memchr>
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d006      	beq.n	8017d82 <_svfiprintf_r+0x14e>
 8017d74:	2340      	movs	r3, #64	; 0x40
 8017d76:	1b80      	subs	r0, r0, r6
 8017d78:	4083      	lsls	r3, r0
 8017d7a:	6822      	ldr	r2, [r4, #0]
 8017d7c:	3501      	adds	r5, #1
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	7829      	ldrb	r1, [r5, #0]
 8017d84:	2206      	movs	r2, #6
 8017d86:	4828      	ldr	r0, [pc, #160]	; (8017e28 <_svfiprintf_r+0x1f4>)
 8017d88:	1c6e      	adds	r6, r5, #1
 8017d8a:	7621      	strb	r1, [r4, #24]
 8017d8c:	f000 f9d2 	bl	8018134 <memchr>
 8017d90:	2800      	cmp	r0, #0
 8017d92:	d03c      	beq.n	8017e0e <_svfiprintf_r+0x1da>
 8017d94:	4b25      	ldr	r3, [pc, #148]	; (8017e2c <_svfiprintf_r+0x1f8>)
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d125      	bne.n	8017de6 <_svfiprintf_r+0x1b2>
 8017d9a:	2207      	movs	r2, #7
 8017d9c:	9b07      	ldr	r3, [sp, #28]
 8017d9e:	3307      	adds	r3, #7
 8017da0:	4393      	bics	r3, r2
 8017da2:	3308      	adds	r3, #8
 8017da4:	9307      	str	r3, [sp, #28]
 8017da6:	6963      	ldr	r3, [r4, #20]
 8017da8:	9a04      	ldr	r2, [sp, #16]
 8017daa:	189b      	adds	r3, r3, r2
 8017dac:	6163      	str	r3, [r4, #20]
 8017dae:	e764      	b.n	8017c7a <_svfiprintf_r+0x46>
 8017db0:	4343      	muls	r3, r0
 8017db2:	0035      	movs	r5, r6
 8017db4:	2101      	movs	r1, #1
 8017db6:	189b      	adds	r3, r3, r2
 8017db8:	e7a6      	b.n	8017d08 <_svfiprintf_r+0xd4>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	425b      	negs	r3, r3
 8017dbe:	e7d0      	b.n	8017d62 <_svfiprintf_r+0x12e>
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	200a      	movs	r0, #10
 8017dc4:	001a      	movs	r2, r3
 8017dc6:	3501      	adds	r5, #1
 8017dc8:	6063      	str	r3, [r4, #4]
 8017dca:	7829      	ldrb	r1, [r5, #0]
 8017dcc:	1c6e      	adds	r6, r5, #1
 8017dce:	3930      	subs	r1, #48	; 0x30
 8017dd0:	2909      	cmp	r1, #9
 8017dd2:	d903      	bls.n	8017ddc <_svfiprintf_r+0x1a8>
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d0c5      	beq.n	8017d64 <_svfiprintf_r+0x130>
 8017dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8017dda:	e7c3      	b.n	8017d64 <_svfiprintf_r+0x130>
 8017ddc:	4342      	muls	r2, r0
 8017dde:	0035      	movs	r5, r6
 8017de0:	2301      	movs	r3, #1
 8017de2:	1852      	adds	r2, r2, r1
 8017de4:	e7f1      	b.n	8017dca <_svfiprintf_r+0x196>
 8017de6:	aa07      	add	r2, sp, #28
 8017de8:	9200      	str	r2, [sp, #0]
 8017dea:	0021      	movs	r1, r4
 8017dec:	003a      	movs	r2, r7
 8017dee:	4b10      	ldr	r3, [pc, #64]	; (8017e30 <_svfiprintf_r+0x1fc>)
 8017df0:	9803      	ldr	r0, [sp, #12]
 8017df2:	e000      	b.n	8017df6 <_svfiprintf_r+0x1c2>
 8017df4:	bf00      	nop
 8017df6:	9004      	str	r0, [sp, #16]
 8017df8:	9b04      	ldr	r3, [sp, #16]
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	d1d3      	bne.n	8017da6 <_svfiprintf_r+0x172>
 8017dfe:	89bb      	ldrh	r3, [r7, #12]
 8017e00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e02:	065b      	lsls	r3, r3, #25
 8017e04:	d400      	bmi.n	8017e08 <_svfiprintf_r+0x1d4>
 8017e06:	e72c      	b.n	8017c62 <_svfiprintf_r+0x2e>
 8017e08:	2001      	movs	r0, #1
 8017e0a:	4240      	negs	r0, r0
 8017e0c:	e729      	b.n	8017c62 <_svfiprintf_r+0x2e>
 8017e0e:	aa07      	add	r2, sp, #28
 8017e10:	9200      	str	r2, [sp, #0]
 8017e12:	0021      	movs	r1, r4
 8017e14:	003a      	movs	r2, r7
 8017e16:	4b06      	ldr	r3, [pc, #24]	; (8017e30 <_svfiprintf_r+0x1fc>)
 8017e18:	9803      	ldr	r0, [sp, #12]
 8017e1a:	f000 f87b 	bl	8017f14 <_printf_i>
 8017e1e:	e7ea      	b.n	8017df6 <_svfiprintf_r+0x1c2>
 8017e20:	08018694 	.word	0x08018694
 8017e24:	0801869a 	.word	0x0801869a
 8017e28:	0801869e 	.word	0x0801869e
 8017e2c:	00000000 	.word	0x00000000
 8017e30:	08017b71 	.word	0x08017b71

08017e34 <_printf_common>:
 8017e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e36:	0016      	movs	r6, r2
 8017e38:	9301      	str	r3, [sp, #4]
 8017e3a:	688a      	ldr	r2, [r1, #8]
 8017e3c:	690b      	ldr	r3, [r1, #16]
 8017e3e:	000c      	movs	r4, r1
 8017e40:	9000      	str	r0, [sp, #0]
 8017e42:	4293      	cmp	r3, r2
 8017e44:	da00      	bge.n	8017e48 <_printf_common+0x14>
 8017e46:	0013      	movs	r3, r2
 8017e48:	0022      	movs	r2, r4
 8017e4a:	6033      	str	r3, [r6, #0]
 8017e4c:	3243      	adds	r2, #67	; 0x43
 8017e4e:	7812      	ldrb	r2, [r2, #0]
 8017e50:	2a00      	cmp	r2, #0
 8017e52:	d001      	beq.n	8017e58 <_printf_common+0x24>
 8017e54:	3301      	adds	r3, #1
 8017e56:	6033      	str	r3, [r6, #0]
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	069b      	lsls	r3, r3, #26
 8017e5c:	d502      	bpl.n	8017e64 <_printf_common+0x30>
 8017e5e:	6833      	ldr	r3, [r6, #0]
 8017e60:	3302      	adds	r3, #2
 8017e62:	6033      	str	r3, [r6, #0]
 8017e64:	6822      	ldr	r2, [r4, #0]
 8017e66:	2306      	movs	r3, #6
 8017e68:	0015      	movs	r5, r2
 8017e6a:	401d      	ands	r5, r3
 8017e6c:	421a      	tst	r2, r3
 8017e6e:	d027      	beq.n	8017ec0 <_printf_common+0x8c>
 8017e70:	0023      	movs	r3, r4
 8017e72:	3343      	adds	r3, #67	; 0x43
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	1e5a      	subs	r2, r3, #1
 8017e78:	4193      	sbcs	r3, r2
 8017e7a:	6822      	ldr	r2, [r4, #0]
 8017e7c:	0692      	lsls	r2, r2, #26
 8017e7e:	d430      	bmi.n	8017ee2 <_printf_common+0xae>
 8017e80:	0022      	movs	r2, r4
 8017e82:	9901      	ldr	r1, [sp, #4]
 8017e84:	9800      	ldr	r0, [sp, #0]
 8017e86:	9d08      	ldr	r5, [sp, #32]
 8017e88:	3243      	adds	r2, #67	; 0x43
 8017e8a:	47a8      	blx	r5
 8017e8c:	3001      	adds	r0, #1
 8017e8e:	d025      	beq.n	8017edc <_printf_common+0xa8>
 8017e90:	2206      	movs	r2, #6
 8017e92:	6823      	ldr	r3, [r4, #0]
 8017e94:	2500      	movs	r5, #0
 8017e96:	4013      	ands	r3, r2
 8017e98:	2b04      	cmp	r3, #4
 8017e9a:	d105      	bne.n	8017ea8 <_printf_common+0x74>
 8017e9c:	6833      	ldr	r3, [r6, #0]
 8017e9e:	68e5      	ldr	r5, [r4, #12]
 8017ea0:	1aed      	subs	r5, r5, r3
 8017ea2:	43eb      	mvns	r3, r5
 8017ea4:	17db      	asrs	r3, r3, #31
 8017ea6:	401d      	ands	r5, r3
 8017ea8:	68a3      	ldr	r3, [r4, #8]
 8017eaa:	6922      	ldr	r2, [r4, #16]
 8017eac:	4293      	cmp	r3, r2
 8017eae:	dd01      	ble.n	8017eb4 <_printf_common+0x80>
 8017eb0:	1a9b      	subs	r3, r3, r2
 8017eb2:	18ed      	adds	r5, r5, r3
 8017eb4:	2600      	movs	r6, #0
 8017eb6:	42b5      	cmp	r5, r6
 8017eb8:	d120      	bne.n	8017efc <_printf_common+0xc8>
 8017eba:	2000      	movs	r0, #0
 8017ebc:	e010      	b.n	8017ee0 <_printf_common+0xac>
 8017ebe:	3501      	adds	r5, #1
 8017ec0:	68e3      	ldr	r3, [r4, #12]
 8017ec2:	6832      	ldr	r2, [r6, #0]
 8017ec4:	1a9b      	subs	r3, r3, r2
 8017ec6:	42ab      	cmp	r3, r5
 8017ec8:	ddd2      	ble.n	8017e70 <_printf_common+0x3c>
 8017eca:	0022      	movs	r2, r4
 8017ecc:	2301      	movs	r3, #1
 8017ece:	9901      	ldr	r1, [sp, #4]
 8017ed0:	9800      	ldr	r0, [sp, #0]
 8017ed2:	9f08      	ldr	r7, [sp, #32]
 8017ed4:	3219      	adds	r2, #25
 8017ed6:	47b8      	blx	r7
 8017ed8:	3001      	adds	r0, #1
 8017eda:	d1f0      	bne.n	8017ebe <_printf_common+0x8a>
 8017edc:	2001      	movs	r0, #1
 8017ede:	4240      	negs	r0, r0
 8017ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017ee2:	2030      	movs	r0, #48	; 0x30
 8017ee4:	18e1      	adds	r1, r4, r3
 8017ee6:	3143      	adds	r1, #67	; 0x43
 8017ee8:	7008      	strb	r0, [r1, #0]
 8017eea:	0021      	movs	r1, r4
 8017eec:	1c5a      	adds	r2, r3, #1
 8017eee:	3145      	adds	r1, #69	; 0x45
 8017ef0:	7809      	ldrb	r1, [r1, #0]
 8017ef2:	18a2      	adds	r2, r4, r2
 8017ef4:	3243      	adds	r2, #67	; 0x43
 8017ef6:	3302      	adds	r3, #2
 8017ef8:	7011      	strb	r1, [r2, #0]
 8017efa:	e7c1      	b.n	8017e80 <_printf_common+0x4c>
 8017efc:	0022      	movs	r2, r4
 8017efe:	2301      	movs	r3, #1
 8017f00:	9901      	ldr	r1, [sp, #4]
 8017f02:	9800      	ldr	r0, [sp, #0]
 8017f04:	9f08      	ldr	r7, [sp, #32]
 8017f06:	321a      	adds	r2, #26
 8017f08:	47b8      	blx	r7
 8017f0a:	3001      	adds	r0, #1
 8017f0c:	d0e6      	beq.n	8017edc <_printf_common+0xa8>
 8017f0e:	3601      	adds	r6, #1
 8017f10:	e7d1      	b.n	8017eb6 <_printf_common+0x82>
	...

08017f14 <_printf_i>:
 8017f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f16:	b08b      	sub	sp, #44	; 0x2c
 8017f18:	9206      	str	r2, [sp, #24]
 8017f1a:	000a      	movs	r2, r1
 8017f1c:	3243      	adds	r2, #67	; 0x43
 8017f1e:	9307      	str	r3, [sp, #28]
 8017f20:	9005      	str	r0, [sp, #20]
 8017f22:	9204      	str	r2, [sp, #16]
 8017f24:	7e0a      	ldrb	r2, [r1, #24]
 8017f26:	000c      	movs	r4, r1
 8017f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f2a:	2a78      	cmp	r2, #120	; 0x78
 8017f2c:	d809      	bhi.n	8017f42 <_printf_i+0x2e>
 8017f2e:	2a62      	cmp	r2, #98	; 0x62
 8017f30:	d80b      	bhi.n	8017f4a <_printf_i+0x36>
 8017f32:	2a00      	cmp	r2, #0
 8017f34:	d100      	bne.n	8017f38 <_printf_i+0x24>
 8017f36:	e0be      	b.n	80180b6 <_printf_i+0x1a2>
 8017f38:	497c      	ldr	r1, [pc, #496]	; (801812c <_printf_i+0x218>)
 8017f3a:	9103      	str	r1, [sp, #12]
 8017f3c:	2a58      	cmp	r2, #88	; 0x58
 8017f3e:	d100      	bne.n	8017f42 <_printf_i+0x2e>
 8017f40:	e093      	b.n	801806a <_printf_i+0x156>
 8017f42:	0026      	movs	r6, r4
 8017f44:	3642      	adds	r6, #66	; 0x42
 8017f46:	7032      	strb	r2, [r6, #0]
 8017f48:	e022      	b.n	8017f90 <_printf_i+0x7c>
 8017f4a:	0010      	movs	r0, r2
 8017f4c:	3863      	subs	r0, #99	; 0x63
 8017f4e:	2815      	cmp	r0, #21
 8017f50:	d8f7      	bhi.n	8017f42 <_printf_i+0x2e>
 8017f52:	f7ea fd03 	bl	800295c <__gnu_thumb1_case_shi>
 8017f56:	0016      	.short	0x0016
 8017f58:	fff6001f 	.word	0xfff6001f
 8017f5c:	fff6fff6 	.word	0xfff6fff6
 8017f60:	001ffff6 	.word	0x001ffff6
 8017f64:	fff6fff6 	.word	0xfff6fff6
 8017f68:	fff6fff6 	.word	0xfff6fff6
 8017f6c:	003600a3 	.word	0x003600a3
 8017f70:	fff60083 	.word	0xfff60083
 8017f74:	00b4fff6 	.word	0x00b4fff6
 8017f78:	0036fff6 	.word	0x0036fff6
 8017f7c:	fff6fff6 	.word	0xfff6fff6
 8017f80:	0087      	.short	0x0087
 8017f82:	0026      	movs	r6, r4
 8017f84:	681a      	ldr	r2, [r3, #0]
 8017f86:	3642      	adds	r6, #66	; 0x42
 8017f88:	1d11      	adds	r1, r2, #4
 8017f8a:	6019      	str	r1, [r3, #0]
 8017f8c:	6813      	ldr	r3, [r2, #0]
 8017f8e:	7033      	strb	r3, [r6, #0]
 8017f90:	2301      	movs	r3, #1
 8017f92:	e0a2      	b.n	80180da <_printf_i+0x1c6>
 8017f94:	6818      	ldr	r0, [r3, #0]
 8017f96:	6809      	ldr	r1, [r1, #0]
 8017f98:	1d02      	adds	r2, r0, #4
 8017f9a:	060d      	lsls	r5, r1, #24
 8017f9c:	d50b      	bpl.n	8017fb6 <_printf_i+0xa2>
 8017f9e:	6805      	ldr	r5, [r0, #0]
 8017fa0:	601a      	str	r2, [r3, #0]
 8017fa2:	2d00      	cmp	r5, #0
 8017fa4:	da03      	bge.n	8017fae <_printf_i+0x9a>
 8017fa6:	232d      	movs	r3, #45	; 0x2d
 8017fa8:	9a04      	ldr	r2, [sp, #16]
 8017faa:	426d      	negs	r5, r5
 8017fac:	7013      	strb	r3, [r2, #0]
 8017fae:	4b5f      	ldr	r3, [pc, #380]	; (801812c <_printf_i+0x218>)
 8017fb0:	270a      	movs	r7, #10
 8017fb2:	9303      	str	r3, [sp, #12]
 8017fb4:	e01b      	b.n	8017fee <_printf_i+0xda>
 8017fb6:	6805      	ldr	r5, [r0, #0]
 8017fb8:	601a      	str	r2, [r3, #0]
 8017fba:	0649      	lsls	r1, r1, #25
 8017fbc:	d5f1      	bpl.n	8017fa2 <_printf_i+0x8e>
 8017fbe:	b22d      	sxth	r5, r5
 8017fc0:	e7ef      	b.n	8017fa2 <_printf_i+0x8e>
 8017fc2:	680d      	ldr	r5, [r1, #0]
 8017fc4:	6819      	ldr	r1, [r3, #0]
 8017fc6:	1d08      	adds	r0, r1, #4
 8017fc8:	6018      	str	r0, [r3, #0]
 8017fca:	062e      	lsls	r6, r5, #24
 8017fcc:	d501      	bpl.n	8017fd2 <_printf_i+0xbe>
 8017fce:	680d      	ldr	r5, [r1, #0]
 8017fd0:	e003      	b.n	8017fda <_printf_i+0xc6>
 8017fd2:	066d      	lsls	r5, r5, #25
 8017fd4:	d5fb      	bpl.n	8017fce <_printf_i+0xba>
 8017fd6:	680d      	ldr	r5, [r1, #0]
 8017fd8:	b2ad      	uxth	r5, r5
 8017fda:	4b54      	ldr	r3, [pc, #336]	; (801812c <_printf_i+0x218>)
 8017fdc:	2708      	movs	r7, #8
 8017fde:	9303      	str	r3, [sp, #12]
 8017fe0:	2a6f      	cmp	r2, #111	; 0x6f
 8017fe2:	d000      	beq.n	8017fe6 <_printf_i+0xd2>
 8017fe4:	3702      	adds	r7, #2
 8017fe6:	0023      	movs	r3, r4
 8017fe8:	2200      	movs	r2, #0
 8017fea:	3343      	adds	r3, #67	; 0x43
 8017fec:	701a      	strb	r2, [r3, #0]
 8017fee:	6863      	ldr	r3, [r4, #4]
 8017ff0:	60a3      	str	r3, [r4, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	db03      	blt.n	8017ffe <_printf_i+0xea>
 8017ff6:	2104      	movs	r1, #4
 8017ff8:	6822      	ldr	r2, [r4, #0]
 8017ffa:	438a      	bics	r2, r1
 8017ffc:	6022      	str	r2, [r4, #0]
 8017ffe:	2d00      	cmp	r5, #0
 8018000:	d102      	bne.n	8018008 <_printf_i+0xf4>
 8018002:	9e04      	ldr	r6, [sp, #16]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d00c      	beq.n	8018022 <_printf_i+0x10e>
 8018008:	9e04      	ldr	r6, [sp, #16]
 801800a:	0028      	movs	r0, r5
 801800c:	0039      	movs	r1, r7
 801800e:	f7ea fd35 	bl	8002a7c <__aeabi_uidivmod>
 8018012:	9b03      	ldr	r3, [sp, #12]
 8018014:	3e01      	subs	r6, #1
 8018016:	5c5b      	ldrb	r3, [r3, r1]
 8018018:	7033      	strb	r3, [r6, #0]
 801801a:	002b      	movs	r3, r5
 801801c:	0005      	movs	r5, r0
 801801e:	429f      	cmp	r7, r3
 8018020:	d9f3      	bls.n	801800a <_printf_i+0xf6>
 8018022:	2f08      	cmp	r7, #8
 8018024:	d109      	bne.n	801803a <_printf_i+0x126>
 8018026:	6823      	ldr	r3, [r4, #0]
 8018028:	07db      	lsls	r3, r3, #31
 801802a:	d506      	bpl.n	801803a <_printf_i+0x126>
 801802c:	6862      	ldr	r2, [r4, #4]
 801802e:	6923      	ldr	r3, [r4, #16]
 8018030:	429a      	cmp	r2, r3
 8018032:	dc02      	bgt.n	801803a <_printf_i+0x126>
 8018034:	2330      	movs	r3, #48	; 0x30
 8018036:	3e01      	subs	r6, #1
 8018038:	7033      	strb	r3, [r6, #0]
 801803a:	9b04      	ldr	r3, [sp, #16]
 801803c:	1b9b      	subs	r3, r3, r6
 801803e:	6123      	str	r3, [r4, #16]
 8018040:	9b07      	ldr	r3, [sp, #28]
 8018042:	0021      	movs	r1, r4
 8018044:	9300      	str	r3, [sp, #0]
 8018046:	9805      	ldr	r0, [sp, #20]
 8018048:	9b06      	ldr	r3, [sp, #24]
 801804a:	aa09      	add	r2, sp, #36	; 0x24
 801804c:	f7ff fef2 	bl	8017e34 <_printf_common>
 8018050:	3001      	adds	r0, #1
 8018052:	d147      	bne.n	80180e4 <_printf_i+0x1d0>
 8018054:	2001      	movs	r0, #1
 8018056:	4240      	negs	r0, r0
 8018058:	b00b      	add	sp, #44	; 0x2c
 801805a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801805c:	2220      	movs	r2, #32
 801805e:	6809      	ldr	r1, [r1, #0]
 8018060:	430a      	orrs	r2, r1
 8018062:	6022      	str	r2, [r4, #0]
 8018064:	2278      	movs	r2, #120	; 0x78
 8018066:	4932      	ldr	r1, [pc, #200]	; (8018130 <_printf_i+0x21c>)
 8018068:	9103      	str	r1, [sp, #12]
 801806a:	0021      	movs	r1, r4
 801806c:	3145      	adds	r1, #69	; 0x45
 801806e:	700a      	strb	r2, [r1, #0]
 8018070:	6819      	ldr	r1, [r3, #0]
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	c920      	ldmia	r1!, {r5}
 8018076:	0610      	lsls	r0, r2, #24
 8018078:	d402      	bmi.n	8018080 <_printf_i+0x16c>
 801807a:	0650      	lsls	r0, r2, #25
 801807c:	d500      	bpl.n	8018080 <_printf_i+0x16c>
 801807e:	b2ad      	uxth	r5, r5
 8018080:	6019      	str	r1, [r3, #0]
 8018082:	07d3      	lsls	r3, r2, #31
 8018084:	d502      	bpl.n	801808c <_printf_i+0x178>
 8018086:	2320      	movs	r3, #32
 8018088:	4313      	orrs	r3, r2
 801808a:	6023      	str	r3, [r4, #0]
 801808c:	2710      	movs	r7, #16
 801808e:	2d00      	cmp	r5, #0
 8018090:	d1a9      	bne.n	8017fe6 <_printf_i+0xd2>
 8018092:	2220      	movs	r2, #32
 8018094:	6823      	ldr	r3, [r4, #0]
 8018096:	4393      	bics	r3, r2
 8018098:	6023      	str	r3, [r4, #0]
 801809a:	e7a4      	b.n	8017fe6 <_printf_i+0xd2>
 801809c:	681a      	ldr	r2, [r3, #0]
 801809e:	680d      	ldr	r5, [r1, #0]
 80180a0:	1d10      	adds	r0, r2, #4
 80180a2:	6949      	ldr	r1, [r1, #20]
 80180a4:	6018      	str	r0, [r3, #0]
 80180a6:	6813      	ldr	r3, [r2, #0]
 80180a8:	062e      	lsls	r6, r5, #24
 80180aa:	d501      	bpl.n	80180b0 <_printf_i+0x19c>
 80180ac:	6019      	str	r1, [r3, #0]
 80180ae:	e002      	b.n	80180b6 <_printf_i+0x1a2>
 80180b0:	066d      	lsls	r5, r5, #25
 80180b2:	d5fb      	bpl.n	80180ac <_printf_i+0x198>
 80180b4:	8019      	strh	r1, [r3, #0]
 80180b6:	2300      	movs	r3, #0
 80180b8:	9e04      	ldr	r6, [sp, #16]
 80180ba:	6123      	str	r3, [r4, #16]
 80180bc:	e7c0      	b.n	8018040 <_printf_i+0x12c>
 80180be:	681a      	ldr	r2, [r3, #0]
 80180c0:	1d11      	adds	r1, r2, #4
 80180c2:	6019      	str	r1, [r3, #0]
 80180c4:	6816      	ldr	r6, [r2, #0]
 80180c6:	2100      	movs	r1, #0
 80180c8:	0030      	movs	r0, r6
 80180ca:	6862      	ldr	r2, [r4, #4]
 80180cc:	f000 f832 	bl	8018134 <memchr>
 80180d0:	2800      	cmp	r0, #0
 80180d2:	d001      	beq.n	80180d8 <_printf_i+0x1c4>
 80180d4:	1b80      	subs	r0, r0, r6
 80180d6:	6060      	str	r0, [r4, #4]
 80180d8:	6863      	ldr	r3, [r4, #4]
 80180da:	6123      	str	r3, [r4, #16]
 80180dc:	2300      	movs	r3, #0
 80180de:	9a04      	ldr	r2, [sp, #16]
 80180e0:	7013      	strb	r3, [r2, #0]
 80180e2:	e7ad      	b.n	8018040 <_printf_i+0x12c>
 80180e4:	0032      	movs	r2, r6
 80180e6:	6923      	ldr	r3, [r4, #16]
 80180e8:	9906      	ldr	r1, [sp, #24]
 80180ea:	9805      	ldr	r0, [sp, #20]
 80180ec:	9d07      	ldr	r5, [sp, #28]
 80180ee:	47a8      	blx	r5
 80180f0:	3001      	adds	r0, #1
 80180f2:	d0af      	beq.n	8018054 <_printf_i+0x140>
 80180f4:	6823      	ldr	r3, [r4, #0]
 80180f6:	079b      	lsls	r3, r3, #30
 80180f8:	d415      	bmi.n	8018126 <_printf_i+0x212>
 80180fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180fc:	68e0      	ldr	r0, [r4, #12]
 80180fe:	4298      	cmp	r0, r3
 8018100:	daaa      	bge.n	8018058 <_printf_i+0x144>
 8018102:	0018      	movs	r0, r3
 8018104:	e7a8      	b.n	8018058 <_printf_i+0x144>
 8018106:	0022      	movs	r2, r4
 8018108:	2301      	movs	r3, #1
 801810a:	9906      	ldr	r1, [sp, #24]
 801810c:	9805      	ldr	r0, [sp, #20]
 801810e:	9e07      	ldr	r6, [sp, #28]
 8018110:	3219      	adds	r2, #25
 8018112:	47b0      	blx	r6
 8018114:	3001      	adds	r0, #1
 8018116:	d09d      	beq.n	8018054 <_printf_i+0x140>
 8018118:	3501      	adds	r5, #1
 801811a:	68e3      	ldr	r3, [r4, #12]
 801811c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801811e:	1a9b      	subs	r3, r3, r2
 8018120:	42ab      	cmp	r3, r5
 8018122:	dcf0      	bgt.n	8018106 <_printf_i+0x1f2>
 8018124:	e7e9      	b.n	80180fa <_printf_i+0x1e6>
 8018126:	2500      	movs	r5, #0
 8018128:	e7f7      	b.n	801811a <_printf_i+0x206>
 801812a:	46c0      	nop			; (mov r8, r8)
 801812c:	080186a5 	.word	0x080186a5
 8018130:	080186b6 	.word	0x080186b6

08018134 <memchr>:
 8018134:	b2c9      	uxtb	r1, r1
 8018136:	1882      	adds	r2, r0, r2
 8018138:	4290      	cmp	r0, r2
 801813a:	d101      	bne.n	8018140 <memchr+0xc>
 801813c:	2000      	movs	r0, #0
 801813e:	4770      	bx	lr
 8018140:	7803      	ldrb	r3, [r0, #0]
 8018142:	428b      	cmp	r3, r1
 8018144:	d0fb      	beq.n	801813e <memchr+0xa>
 8018146:	3001      	adds	r0, #1
 8018148:	e7f6      	b.n	8018138 <memchr+0x4>

0801814a <_realloc_r>:
 801814a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801814c:	0007      	movs	r7, r0
 801814e:	000e      	movs	r6, r1
 8018150:	0014      	movs	r4, r2
 8018152:	2900      	cmp	r1, #0
 8018154:	d105      	bne.n	8018162 <_realloc_r+0x18>
 8018156:	0011      	movs	r1, r2
 8018158:	f7ff fb9a 	bl	8017890 <_malloc_r>
 801815c:	0005      	movs	r5, r0
 801815e:	0028      	movs	r0, r5
 8018160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018162:	2a00      	cmp	r2, #0
 8018164:	d103      	bne.n	801816e <_realloc_r+0x24>
 8018166:	f7ff fcb9 	bl	8017adc <_free_r>
 801816a:	0025      	movs	r5, r4
 801816c:	e7f7      	b.n	801815e <_realloc_r+0x14>
 801816e:	f000 f81b 	bl	80181a8 <_malloc_usable_size_r>
 8018172:	9001      	str	r0, [sp, #4]
 8018174:	4284      	cmp	r4, r0
 8018176:	d803      	bhi.n	8018180 <_realloc_r+0x36>
 8018178:	0035      	movs	r5, r6
 801817a:	0843      	lsrs	r3, r0, #1
 801817c:	42a3      	cmp	r3, r4
 801817e:	d3ee      	bcc.n	801815e <_realloc_r+0x14>
 8018180:	0021      	movs	r1, r4
 8018182:	0038      	movs	r0, r7
 8018184:	f7ff fb84 	bl	8017890 <_malloc_r>
 8018188:	1e05      	subs	r5, r0, #0
 801818a:	d0e8      	beq.n	801815e <_realloc_r+0x14>
 801818c:	9b01      	ldr	r3, [sp, #4]
 801818e:	0022      	movs	r2, r4
 8018190:	429c      	cmp	r4, r3
 8018192:	d900      	bls.n	8018196 <_realloc_r+0x4c>
 8018194:	001a      	movs	r2, r3
 8018196:	0031      	movs	r1, r6
 8018198:	0028      	movs	r0, r5
 801819a:	f7ff fc95 	bl	8017ac8 <memcpy>
 801819e:	0031      	movs	r1, r6
 80181a0:	0038      	movs	r0, r7
 80181a2:	f7ff fc9b 	bl	8017adc <_free_r>
 80181a6:	e7da      	b.n	801815e <_realloc_r+0x14>

080181a8 <_malloc_usable_size_r>:
 80181a8:	1f0b      	subs	r3, r1, #4
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	1f18      	subs	r0, r3, #4
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	da01      	bge.n	80181b6 <_malloc_usable_size_r+0xe>
 80181b2:	580b      	ldr	r3, [r1, r0]
 80181b4:	18c0      	adds	r0, r0, r3
 80181b6:	4770      	bx	lr

080181b8 <_init>:
 80181b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ba:	46c0      	nop			; (mov r8, r8)
 80181bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181be:	bc08      	pop	{r3}
 80181c0:	469e      	mov	lr, r3
 80181c2:	4770      	bx	lr

080181c4 <_fini>:
 80181c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181c6:	46c0      	nop			; (mov r8, r8)
 80181c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ca:	bc08      	pop	{r3}
 80181cc:	469e      	mov	lr, r3
 80181ce:	4770      	bx	lr
